
Wifi_ESP32_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e458  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000548  0810e6f8  0810e6f8  0001e6f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810ec40  0810ec40  0001ec40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810ec48  0810ec48  0001ec48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810ec4c  0810ec4c  0001ec4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e8  10000000  0810ec50  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002dc  100001e8  0810ee38  000201e8  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  100004c4  0810ee38  000204c4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001804f  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002bf3  00000000  00000000  000382aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001270  00000000  00000000  0003aea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000e76  00000000  00000000  0003c110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003bc34  00000000  00000000  0003cf86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00018a90  00000000  00000000  00078bba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0018b14a  00000000  00000000  0009164a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00006664  00000000  00000000  0021c794  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000071  00000000  00000000  00222df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	100001e8 	.word	0x100001e8
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810e6e0 	.word	0x0810e6e0

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	100001ec 	.word	0x100001ec
 81002dc:	0810e6e0 	.word	0x0810e6e0

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <strlen>:
 8100380:	4603      	mov	r3, r0
 8100382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8100386:	2a00      	cmp	r2, #0
 8100388:	d1fb      	bne.n	8100382 <strlen+0x2>
 810038a:	1a18      	subs	r0, r3, r0
 810038c:	3801      	subs	r0, #1
 810038e:	4770      	bx	lr

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	; 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2uiz>:
 8100cb8:	004a      	lsls	r2, r1, #1
 8100cba:	d211      	bcs.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100cc0:	d211      	bcs.n	8100ce6 <__aeabi_d2uiz+0x2e>
 8100cc2:	d50d      	bpl.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100ccc:	d40e      	bmi.n	8100cec <__aeabi_d2uiz+0x34>
 8100cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cda:	fa23 f002 	lsr.w	r0, r3, r2
 8100cde:	4770      	bx	lr
 8100ce0:	f04f 0000 	mov.w	r0, #0
 8100ce4:	4770      	bx	lr
 8100ce6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cea:	d102      	bne.n	8100cf2 <__aeabi_d2uiz+0x3a>
 8100cec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8100cf0:	4770      	bx	lr
 8100cf2:	f04f 0000 	mov.w	r0, #0
 8100cf6:	4770      	bx	lr

08100cf8 <__aeabi_d2f>:
 8100cf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100d00:	bf24      	itt	cs
 8100d02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100d06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100d0a:	d90d      	bls.n	8100d28 <__aeabi_d2f+0x30>
 8100d0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100d10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100d1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d20:	bf08      	it	eq
 8100d22:	f020 0001 	biceq.w	r0, r0, #1
 8100d26:	4770      	bx	lr
 8100d28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100d2c:	d121      	bne.n	8100d72 <__aeabi_d2f+0x7a>
 8100d2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100d32:	bfbc      	itt	lt
 8100d34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100d38:	4770      	bxlt	lr
 8100d3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100d3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d42:	f1c2 0218 	rsb	r2, r2, #24
 8100d46:	f1c2 0c20 	rsb	ip, r2, #32
 8100d4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d4e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d52:	bf18      	it	ne
 8100d54:	f040 0001 	orrne.w	r0, r0, #1
 8100d58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d64:	ea40 000c 	orr.w	r0, r0, ip
 8100d68:	fa23 f302 	lsr.w	r3, r3, r2
 8100d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d70:	e7cc      	b.n	8100d0c <__aeabi_d2f+0x14>
 8100d72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d76:	d107      	bne.n	8100d88 <__aeabi_d2f+0x90>
 8100d78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d7c:	bf1e      	ittt	ne
 8100d7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100d82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100d86:	4770      	bxne	lr
 8100d88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100d94:	4770      	bx	lr
 8100d96:	bf00      	nop

08100d98 <__aeabi_uldivmod>:
 8100d98:	b953      	cbnz	r3, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9a:	b94a      	cbnz	r2, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9c:	2900      	cmp	r1, #0
 8100d9e:	bf08      	it	eq
 8100da0:	2800      	cmpeq	r0, #0
 8100da2:	bf1c      	itt	ne
 8100da4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8100da8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8100dac:	f000 b9a6 	b.w	81010fc <__aeabi_idiv0>
 8100db0:	f1ad 0c08 	sub.w	ip, sp, #8
 8100db4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100db8:	f000 f83c 	bl	8100e34 <__udivmoddi4>
 8100dbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100dc4:	b004      	add	sp, #16
 8100dc6:	4770      	bx	lr

08100dc8 <__aeabi_d2lz>:
 8100dc8:	b538      	push	{r3, r4, r5, lr}
 8100dca:	2200      	movs	r2, #0
 8100dcc:	2300      	movs	r3, #0
 8100dce:	4604      	mov	r4, r0
 8100dd0:	460d      	mov	r5, r1
 8100dd2:	f7ff ff0b 	bl	8100bec <__aeabi_dcmplt>
 8100dd6:	b928      	cbnz	r0, 8100de4 <__aeabi_d2lz+0x1c>
 8100dd8:	4620      	mov	r0, r4
 8100dda:	4629      	mov	r1, r5
 8100ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100de0:	f000 b80a 	b.w	8100df8 <__aeabi_d2ulz>
 8100de4:	4620      	mov	r0, r4
 8100de6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8100dea:	f000 f805 	bl	8100df8 <__aeabi_d2ulz>
 8100dee:	4240      	negs	r0, r0
 8100df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100df4:	bd38      	pop	{r3, r4, r5, pc}
 8100df6:	bf00      	nop

08100df8 <__aeabi_d2ulz>:
 8100df8:	b5d0      	push	{r4, r6, r7, lr}
 8100dfa:	4b0c      	ldr	r3, [pc, #48]	; (8100e2c <__aeabi_d2ulz+0x34>)
 8100dfc:	2200      	movs	r2, #0
 8100dfe:	4606      	mov	r6, r0
 8100e00:	460f      	mov	r7, r1
 8100e02:	f7ff fc81 	bl	8100708 <__aeabi_dmul>
 8100e06:	f7ff ff57 	bl	8100cb8 <__aeabi_d2uiz>
 8100e0a:	4604      	mov	r4, r0
 8100e0c:	f7ff fc02 	bl	8100614 <__aeabi_ui2d>
 8100e10:	4b07      	ldr	r3, [pc, #28]	; (8100e30 <__aeabi_d2ulz+0x38>)
 8100e12:	2200      	movs	r2, #0
 8100e14:	f7ff fc78 	bl	8100708 <__aeabi_dmul>
 8100e18:	4602      	mov	r2, r0
 8100e1a:	460b      	mov	r3, r1
 8100e1c:	4630      	mov	r0, r6
 8100e1e:	4639      	mov	r1, r7
 8100e20:	f7ff faba 	bl	8100398 <__aeabi_dsub>
 8100e24:	f7ff ff48 	bl	8100cb8 <__aeabi_d2uiz>
 8100e28:	4621      	mov	r1, r4
 8100e2a:	bdd0      	pop	{r4, r6, r7, pc}
 8100e2c:	3df00000 	.word	0x3df00000
 8100e30:	41f00000 	.word	0x41f00000

08100e34 <__udivmoddi4>:
 8100e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100e38:	9e08      	ldr	r6, [sp, #32]
 8100e3a:	460d      	mov	r5, r1
 8100e3c:	4604      	mov	r4, r0
 8100e3e:	460f      	mov	r7, r1
 8100e40:	2b00      	cmp	r3, #0
 8100e42:	d14a      	bne.n	8100eda <__udivmoddi4+0xa6>
 8100e44:	428a      	cmp	r2, r1
 8100e46:	4694      	mov	ip, r2
 8100e48:	d965      	bls.n	8100f16 <__udivmoddi4+0xe2>
 8100e4a:	fab2 f382 	clz	r3, r2
 8100e4e:	b143      	cbz	r3, 8100e62 <__udivmoddi4+0x2e>
 8100e50:	fa02 fc03 	lsl.w	ip, r2, r3
 8100e54:	f1c3 0220 	rsb	r2, r3, #32
 8100e58:	409f      	lsls	r7, r3
 8100e5a:	fa20 f202 	lsr.w	r2, r0, r2
 8100e5e:	4317      	orrs	r7, r2
 8100e60:	409c      	lsls	r4, r3
 8100e62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8100e66:	fa1f f58c 	uxth.w	r5, ip
 8100e6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8100e6e:	0c22      	lsrs	r2, r4, #16
 8100e70:	fb0e 7711 	mls	r7, lr, r1, r7
 8100e74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8100e78:	fb01 f005 	mul.w	r0, r1, r5
 8100e7c:	4290      	cmp	r0, r2
 8100e7e:	d90a      	bls.n	8100e96 <__udivmoddi4+0x62>
 8100e80:	eb1c 0202 	adds.w	r2, ip, r2
 8100e84:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8100e88:	f080 811c 	bcs.w	81010c4 <__udivmoddi4+0x290>
 8100e8c:	4290      	cmp	r0, r2
 8100e8e:	f240 8119 	bls.w	81010c4 <__udivmoddi4+0x290>
 8100e92:	3902      	subs	r1, #2
 8100e94:	4462      	add	r2, ip
 8100e96:	1a12      	subs	r2, r2, r0
 8100e98:	b2a4      	uxth	r4, r4
 8100e9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8100e9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8100ea2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8100ea6:	fb00 f505 	mul.w	r5, r0, r5
 8100eaa:	42a5      	cmp	r5, r4
 8100eac:	d90a      	bls.n	8100ec4 <__udivmoddi4+0x90>
 8100eae:	eb1c 0404 	adds.w	r4, ip, r4
 8100eb2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8100eb6:	f080 8107 	bcs.w	81010c8 <__udivmoddi4+0x294>
 8100eba:	42a5      	cmp	r5, r4
 8100ebc:	f240 8104 	bls.w	81010c8 <__udivmoddi4+0x294>
 8100ec0:	4464      	add	r4, ip
 8100ec2:	3802      	subs	r0, #2
 8100ec4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8100ec8:	1b64      	subs	r4, r4, r5
 8100eca:	2100      	movs	r1, #0
 8100ecc:	b11e      	cbz	r6, 8100ed6 <__udivmoddi4+0xa2>
 8100ece:	40dc      	lsrs	r4, r3
 8100ed0:	2300      	movs	r3, #0
 8100ed2:	e9c6 4300 	strd	r4, r3, [r6]
 8100ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100eda:	428b      	cmp	r3, r1
 8100edc:	d908      	bls.n	8100ef0 <__udivmoddi4+0xbc>
 8100ede:	2e00      	cmp	r6, #0
 8100ee0:	f000 80ed 	beq.w	81010be <__udivmoddi4+0x28a>
 8100ee4:	2100      	movs	r1, #0
 8100ee6:	e9c6 0500 	strd	r0, r5, [r6]
 8100eea:	4608      	mov	r0, r1
 8100eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ef0:	fab3 f183 	clz	r1, r3
 8100ef4:	2900      	cmp	r1, #0
 8100ef6:	d149      	bne.n	8100f8c <__udivmoddi4+0x158>
 8100ef8:	42ab      	cmp	r3, r5
 8100efa:	d302      	bcc.n	8100f02 <__udivmoddi4+0xce>
 8100efc:	4282      	cmp	r2, r0
 8100efe:	f200 80f8 	bhi.w	81010f2 <__udivmoddi4+0x2be>
 8100f02:	1a84      	subs	r4, r0, r2
 8100f04:	eb65 0203 	sbc.w	r2, r5, r3
 8100f08:	2001      	movs	r0, #1
 8100f0a:	4617      	mov	r7, r2
 8100f0c:	2e00      	cmp	r6, #0
 8100f0e:	d0e2      	beq.n	8100ed6 <__udivmoddi4+0xa2>
 8100f10:	e9c6 4700 	strd	r4, r7, [r6]
 8100f14:	e7df      	b.n	8100ed6 <__udivmoddi4+0xa2>
 8100f16:	b902      	cbnz	r2, 8100f1a <__udivmoddi4+0xe6>
 8100f18:	deff      	udf	#255	; 0xff
 8100f1a:	fab2 f382 	clz	r3, r2
 8100f1e:	2b00      	cmp	r3, #0
 8100f20:	f040 8090 	bne.w	8101044 <__udivmoddi4+0x210>
 8100f24:	1a8a      	subs	r2, r1, r2
 8100f26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100f2a:	fa1f fe8c 	uxth.w	lr, ip
 8100f2e:	2101      	movs	r1, #1
 8100f30:	fbb2 f5f7 	udiv	r5, r2, r7
 8100f34:	fb07 2015 	mls	r0, r7, r5, r2
 8100f38:	0c22      	lsrs	r2, r4, #16
 8100f3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8100f3e:	fb0e f005 	mul.w	r0, lr, r5
 8100f42:	4290      	cmp	r0, r2
 8100f44:	d908      	bls.n	8100f58 <__udivmoddi4+0x124>
 8100f46:	eb1c 0202 	adds.w	r2, ip, r2
 8100f4a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8100f4e:	d202      	bcs.n	8100f56 <__udivmoddi4+0x122>
 8100f50:	4290      	cmp	r0, r2
 8100f52:	f200 80cb 	bhi.w	81010ec <__udivmoddi4+0x2b8>
 8100f56:	4645      	mov	r5, r8
 8100f58:	1a12      	subs	r2, r2, r0
 8100f5a:	b2a4      	uxth	r4, r4
 8100f5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8100f60:	fb07 2210 	mls	r2, r7, r0, r2
 8100f64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8100f68:	fb0e fe00 	mul.w	lr, lr, r0
 8100f6c:	45a6      	cmp	lr, r4
 8100f6e:	d908      	bls.n	8100f82 <__udivmoddi4+0x14e>
 8100f70:	eb1c 0404 	adds.w	r4, ip, r4
 8100f74:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8100f78:	d202      	bcs.n	8100f80 <__udivmoddi4+0x14c>
 8100f7a:	45a6      	cmp	lr, r4
 8100f7c:	f200 80bb 	bhi.w	81010f6 <__udivmoddi4+0x2c2>
 8100f80:	4610      	mov	r0, r2
 8100f82:	eba4 040e 	sub.w	r4, r4, lr
 8100f86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8100f8a:	e79f      	b.n	8100ecc <__udivmoddi4+0x98>
 8100f8c:	f1c1 0720 	rsb	r7, r1, #32
 8100f90:	408b      	lsls	r3, r1
 8100f92:	fa22 fc07 	lsr.w	ip, r2, r7
 8100f96:	ea4c 0c03 	orr.w	ip, ip, r3
 8100f9a:	fa05 f401 	lsl.w	r4, r5, r1
 8100f9e:	fa20 f307 	lsr.w	r3, r0, r7
 8100fa2:	40fd      	lsrs	r5, r7
 8100fa4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8100fa8:	4323      	orrs	r3, r4
 8100faa:	fbb5 f8f9 	udiv	r8, r5, r9
 8100fae:	fa1f fe8c 	uxth.w	lr, ip
 8100fb2:	fb09 5518 	mls	r5, r9, r8, r5
 8100fb6:	0c1c      	lsrs	r4, r3, #16
 8100fb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8100fbc:	fb08 f50e 	mul.w	r5, r8, lr
 8100fc0:	42a5      	cmp	r5, r4
 8100fc2:	fa02 f201 	lsl.w	r2, r2, r1
 8100fc6:	fa00 f001 	lsl.w	r0, r0, r1
 8100fca:	d90b      	bls.n	8100fe4 <__udivmoddi4+0x1b0>
 8100fcc:	eb1c 0404 	adds.w	r4, ip, r4
 8100fd0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8100fd4:	f080 8088 	bcs.w	81010e8 <__udivmoddi4+0x2b4>
 8100fd8:	42a5      	cmp	r5, r4
 8100fda:	f240 8085 	bls.w	81010e8 <__udivmoddi4+0x2b4>
 8100fde:	f1a8 0802 	sub.w	r8, r8, #2
 8100fe2:	4464      	add	r4, ip
 8100fe4:	1b64      	subs	r4, r4, r5
 8100fe6:	b29d      	uxth	r5, r3
 8100fe8:	fbb4 f3f9 	udiv	r3, r4, r9
 8100fec:	fb09 4413 	mls	r4, r9, r3, r4
 8100ff0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8100ff4:	fb03 fe0e 	mul.w	lr, r3, lr
 8100ff8:	45a6      	cmp	lr, r4
 8100ffa:	d908      	bls.n	810100e <__udivmoddi4+0x1da>
 8100ffc:	eb1c 0404 	adds.w	r4, ip, r4
 8101000:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8101004:	d26c      	bcs.n	81010e0 <__udivmoddi4+0x2ac>
 8101006:	45a6      	cmp	lr, r4
 8101008:	d96a      	bls.n	81010e0 <__udivmoddi4+0x2ac>
 810100a:	3b02      	subs	r3, #2
 810100c:	4464      	add	r4, ip
 810100e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8101012:	fba3 9502 	umull	r9, r5, r3, r2
 8101016:	eba4 040e 	sub.w	r4, r4, lr
 810101a:	42ac      	cmp	r4, r5
 810101c:	46c8      	mov	r8, r9
 810101e:	46ae      	mov	lr, r5
 8101020:	d356      	bcc.n	81010d0 <__udivmoddi4+0x29c>
 8101022:	d053      	beq.n	81010cc <__udivmoddi4+0x298>
 8101024:	b156      	cbz	r6, 810103c <__udivmoddi4+0x208>
 8101026:	ebb0 0208 	subs.w	r2, r0, r8
 810102a:	eb64 040e 	sbc.w	r4, r4, lr
 810102e:	fa04 f707 	lsl.w	r7, r4, r7
 8101032:	40ca      	lsrs	r2, r1
 8101034:	40cc      	lsrs	r4, r1
 8101036:	4317      	orrs	r7, r2
 8101038:	e9c6 7400 	strd	r7, r4, [r6]
 810103c:	4618      	mov	r0, r3
 810103e:	2100      	movs	r1, #0
 8101040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8101044:	f1c3 0120 	rsb	r1, r3, #32
 8101048:	fa02 fc03 	lsl.w	ip, r2, r3
 810104c:	fa20 f201 	lsr.w	r2, r0, r1
 8101050:	fa25 f101 	lsr.w	r1, r5, r1
 8101054:	409d      	lsls	r5, r3
 8101056:	432a      	orrs	r2, r5
 8101058:	ea4f 471c 	mov.w	r7, ip, lsr #16
 810105c:	fa1f fe8c 	uxth.w	lr, ip
 8101060:	fbb1 f0f7 	udiv	r0, r1, r7
 8101064:	fb07 1510 	mls	r5, r7, r0, r1
 8101068:	0c11      	lsrs	r1, r2, #16
 810106a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 810106e:	fb00 f50e 	mul.w	r5, r0, lr
 8101072:	428d      	cmp	r5, r1
 8101074:	fa04 f403 	lsl.w	r4, r4, r3
 8101078:	d908      	bls.n	810108c <__udivmoddi4+0x258>
 810107a:	eb1c 0101 	adds.w	r1, ip, r1
 810107e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8101082:	d22f      	bcs.n	81010e4 <__udivmoddi4+0x2b0>
 8101084:	428d      	cmp	r5, r1
 8101086:	d92d      	bls.n	81010e4 <__udivmoddi4+0x2b0>
 8101088:	3802      	subs	r0, #2
 810108a:	4461      	add	r1, ip
 810108c:	1b49      	subs	r1, r1, r5
 810108e:	b292      	uxth	r2, r2
 8101090:	fbb1 f5f7 	udiv	r5, r1, r7
 8101094:	fb07 1115 	mls	r1, r7, r5, r1
 8101098:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 810109c:	fb05 f10e 	mul.w	r1, r5, lr
 81010a0:	4291      	cmp	r1, r2
 81010a2:	d908      	bls.n	81010b6 <__udivmoddi4+0x282>
 81010a4:	eb1c 0202 	adds.w	r2, ip, r2
 81010a8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 81010ac:	d216      	bcs.n	81010dc <__udivmoddi4+0x2a8>
 81010ae:	4291      	cmp	r1, r2
 81010b0:	d914      	bls.n	81010dc <__udivmoddi4+0x2a8>
 81010b2:	3d02      	subs	r5, #2
 81010b4:	4462      	add	r2, ip
 81010b6:	1a52      	subs	r2, r2, r1
 81010b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 81010bc:	e738      	b.n	8100f30 <__udivmoddi4+0xfc>
 81010be:	4631      	mov	r1, r6
 81010c0:	4630      	mov	r0, r6
 81010c2:	e708      	b.n	8100ed6 <__udivmoddi4+0xa2>
 81010c4:	4639      	mov	r1, r7
 81010c6:	e6e6      	b.n	8100e96 <__udivmoddi4+0x62>
 81010c8:	4610      	mov	r0, r2
 81010ca:	e6fb      	b.n	8100ec4 <__udivmoddi4+0x90>
 81010cc:	4548      	cmp	r0, r9
 81010ce:	d2a9      	bcs.n	8101024 <__udivmoddi4+0x1f0>
 81010d0:	ebb9 0802 	subs.w	r8, r9, r2
 81010d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 81010d8:	3b01      	subs	r3, #1
 81010da:	e7a3      	b.n	8101024 <__udivmoddi4+0x1f0>
 81010dc:	4645      	mov	r5, r8
 81010de:	e7ea      	b.n	81010b6 <__udivmoddi4+0x282>
 81010e0:	462b      	mov	r3, r5
 81010e2:	e794      	b.n	810100e <__udivmoddi4+0x1da>
 81010e4:	4640      	mov	r0, r8
 81010e6:	e7d1      	b.n	810108c <__udivmoddi4+0x258>
 81010e8:	46d0      	mov	r8, sl
 81010ea:	e77b      	b.n	8100fe4 <__udivmoddi4+0x1b0>
 81010ec:	3d02      	subs	r5, #2
 81010ee:	4462      	add	r2, ip
 81010f0:	e732      	b.n	8100f58 <__udivmoddi4+0x124>
 81010f2:	4608      	mov	r0, r1
 81010f4:	e70a      	b.n	8100f0c <__udivmoddi4+0xd8>
 81010f6:	4464      	add	r4, ip
 81010f8:	3802      	subs	r0, #2
 81010fa:	e742      	b.n	8100f82 <__udivmoddi4+0x14e>

081010fc <__aeabi_idiv0>:
 81010fc:	4770      	bx	lr
 81010fe:	bf00      	nop

08101100 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8101100:	b480      	push	{r7}
 8101102:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8101104:	4b09      	ldr	r3, [pc, #36]	; (810112c <SystemInit+0x2c>)
 8101106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810110a:	4a08      	ldr	r2, [pc, #32]	; (810112c <SystemInit+0x2c>)
 810110c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8101110:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8101114:	4b05      	ldr	r3, [pc, #20]	; (810112c <SystemInit+0x2c>)
 8101116:	691b      	ldr	r3, [r3, #16]
 8101118:	4a04      	ldr	r2, [pc, #16]	; (810112c <SystemInit+0x2c>)
 810111a:	f043 0310 	orr.w	r3, r3, #16
 810111e:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8101120:	bf00      	nop
 8101122:	46bd      	mov	sp, r7
 8101124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101128:	4770      	bx	lr
 810112a:	bf00      	nop
 810112c:	e000ed00 	.word	0xe000ed00

08101130 <ftoa>:
	0.0000000005,		// 9
	0.00000000005		// 10
};

char * ftoa(double f, char * buf, int precision)
{
 8101130:	b5b0      	push	{r4, r5, r7, lr}
 8101132:	b08a      	sub	sp, #40	; 0x28
 8101134:	af00      	add	r7, sp, #0
 8101136:	ed87 0b02 	vstr	d0, [r7, #8]
 810113a:	6078      	str	r0, [r7, #4]
 810113c:	6039      	str	r1, [r7, #0]
	char * ptr = buf;
 810113e:	687b      	ldr	r3, [r7, #4]
 8101140:	627b      	str	r3, [r7, #36]	; 0x24
	char * p = ptr;
 8101142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101144:	623b      	str	r3, [r7, #32]
	char * p1;
	char c;
	long intPart;

	// check precision bounds
	if (precision > MAX_PRECISION)
 8101146:	683b      	ldr	r3, [r7, #0]
 8101148:	2b0a      	cmp	r3, #10
 810114a:	dd01      	ble.n	8101150 <ftoa+0x20>
		precision = MAX_PRECISION;
 810114c:	230a      	movs	r3, #10
 810114e:	603b      	str	r3, [r7, #0]

	// sign stuff
	if (f < 0)
 8101150:	f04f 0200 	mov.w	r2, #0
 8101154:	f04f 0300 	mov.w	r3, #0
 8101158:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810115c:	f7ff fd46 	bl	8100bec <__aeabi_dcmplt>
 8101160:	4603      	mov	r3, r0
 8101162:	2b00      	cmp	r3, #0
 8101164:	d00a      	beq.n	810117c <ftoa+0x4c>
	{
		f = -f;
 8101166:	68bc      	ldr	r4, [r7, #8]
 8101168:	68fb      	ldr	r3, [r7, #12]
 810116a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 810116e:	e9c7 4502 	strd	r4, r5, [r7, #8]
		*ptr++ = '-';
 8101172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101174:	1c5a      	adds	r2, r3, #1
 8101176:	627a      	str	r2, [r7, #36]	; 0x24
 8101178:	222d      	movs	r2, #45	; 0x2d
 810117a:	701a      	strb	r2, [r3, #0]
	}

	if (precision < 0)  // negative precision == automatic precision guess
 810117c:	683b      	ldr	r3, [r7, #0]
 810117e:	2b00      	cmp	r3, #0
 8101180:	da4f      	bge.n	8101222 <ftoa+0xf2>
	{
		if (f < 1.0) precision = 6;
 8101182:	f04f 0200 	mov.w	r2, #0
 8101186:	4b7c      	ldr	r3, [pc, #496]	; (8101378 <ftoa+0x248>)
 8101188:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810118c:	f7ff fd2e 	bl	8100bec <__aeabi_dcmplt>
 8101190:	4603      	mov	r3, r0
 8101192:	2b00      	cmp	r3, #0
 8101194:	d002      	beq.n	810119c <ftoa+0x6c>
 8101196:	2306      	movs	r3, #6
 8101198:	603b      	str	r3, [r7, #0]
 810119a:	e042      	b.n	8101222 <ftoa+0xf2>
		else if (f < 10.0) precision = 5;
 810119c:	f04f 0200 	mov.w	r2, #0
 81011a0:	4b76      	ldr	r3, [pc, #472]	; (810137c <ftoa+0x24c>)
 81011a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 81011a6:	f7ff fd21 	bl	8100bec <__aeabi_dcmplt>
 81011aa:	4603      	mov	r3, r0
 81011ac:	2b00      	cmp	r3, #0
 81011ae:	d002      	beq.n	81011b6 <ftoa+0x86>
 81011b0:	2305      	movs	r3, #5
 81011b2:	603b      	str	r3, [r7, #0]
 81011b4:	e035      	b.n	8101222 <ftoa+0xf2>
		else if (f < 100.0) precision = 4;
 81011b6:	f04f 0200 	mov.w	r2, #0
 81011ba:	4b71      	ldr	r3, [pc, #452]	; (8101380 <ftoa+0x250>)
 81011bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 81011c0:	f7ff fd14 	bl	8100bec <__aeabi_dcmplt>
 81011c4:	4603      	mov	r3, r0
 81011c6:	2b00      	cmp	r3, #0
 81011c8:	d002      	beq.n	81011d0 <ftoa+0xa0>
 81011ca:	2304      	movs	r3, #4
 81011cc:	603b      	str	r3, [r7, #0]
 81011ce:	e028      	b.n	8101222 <ftoa+0xf2>
		else if (f < 1000.0) precision = 3;
 81011d0:	f04f 0200 	mov.w	r2, #0
 81011d4:	4b6b      	ldr	r3, [pc, #428]	; (8101384 <ftoa+0x254>)
 81011d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 81011da:	f7ff fd07 	bl	8100bec <__aeabi_dcmplt>
 81011de:	4603      	mov	r3, r0
 81011e0:	2b00      	cmp	r3, #0
 81011e2:	d002      	beq.n	81011ea <ftoa+0xba>
 81011e4:	2303      	movs	r3, #3
 81011e6:	603b      	str	r3, [r7, #0]
 81011e8:	e01b      	b.n	8101222 <ftoa+0xf2>
		else if (f < 10000.0) precision = 2;
 81011ea:	a35f      	add	r3, pc, #380	; (adr r3, 8101368 <ftoa+0x238>)
 81011ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 81011f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 81011f4:	f7ff fcfa 	bl	8100bec <__aeabi_dcmplt>
 81011f8:	4603      	mov	r3, r0
 81011fa:	2b00      	cmp	r3, #0
 81011fc:	d002      	beq.n	8101204 <ftoa+0xd4>
 81011fe:	2302      	movs	r3, #2
 8101200:	603b      	str	r3, [r7, #0]
 8101202:	e00e      	b.n	8101222 <ftoa+0xf2>
		else if (f < 100000.0) precision = 1;
 8101204:	a35a      	add	r3, pc, #360	; (adr r3, 8101370 <ftoa+0x240>)
 8101206:	e9d3 2300 	ldrd	r2, r3, [r3]
 810120a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810120e:	f7ff fced 	bl	8100bec <__aeabi_dcmplt>
 8101212:	4603      	mov	r3, r0
 8101214:	2b00      	cmp	r3, #0
 8101216:	d002      	beq.n	810121e <ftoa+0xee>
 8101218:	2301      	movs	r3, #1
 810121a:	603b      	str	r3, [r7, #0]
 810121c:	e001      	b.n	8101222 <ftoa+0xf2>
		else precision = 0;
 810121e:	2300      	movs	r3, #0
 8101220:	603b      	str	r3, [r7, #0]
	}

	// round value according the precision
	if (precision)
 8101222:	683b      	ldr	r3, [r7, #0]
 8101224:	2b00      	cmp	r3, #0
 8101226:	d00d      	beq.n	8101244 <ftoa+0x114>
		f += rounders[precision];
 8101228:	4a57      	ldr	r2, [pc, #348]	; (8101388 <ftoa+0x258>)
 810122a:	683b      	ldr	r3, [r7, #0]
 810122c:	00db      	lsls	r3, r3, #3
 810122e:	4413      	add	r3, r2
 8101230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101234:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8101238:	f7ff f8b0 	bl	810039c <__adddf3>
 810123c:	4602      	mov	r2, r0
 810123e:	460b      	mov	r3, r1
 8101240:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// integer part...
	intPart = f;
 8101244:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8101248:	f7ff fd0e 	bl	8100c68 <__aeabi_d2iz>
 810124c:	4603      	mov	r3, r0
 810124e:	61fb      	str	r3, [r7, #28]
	f -= intPart;
 8101250:	69f8      	ldr	r0, [r7, #28]
 8101252:	f7ff f9ef 	bl	8100634 <__aeabi_i2d>
 8101256:	4602      	mov	r2, r0
 8101258:	460b      	mov	r3, r1
 810125a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810125e:	f7ff f89b 	bl	8100398 <__aeabi_dsub>
 8101262:	4602      	mov	r2, r0
 8101264:	460b      	mov	r3, r1
 8101266:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if (!intPart)
 810126a:	69fb      	ldr	r3, [r7, #28]
 810126c:	2b00      	cmp	r3, #0
 810126e:	d105      	bne.n	810127c <ftoa+0x14c>
		*ptr++ = '0';
 8101270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101272:	1c5a      	adds	r2, r3, #1
 8101274:	627a      	str	r2, [r7, #36]	; 0x24
 8101276:	2230      	movs	r2, #48	; 0x30
 8101278:	701a      	strb	r2, [r3, #0]
 810127a:	e038      	b.n	81012ee <ftoa+0x1be>
	else
	{
		// save start pointer
		p = ptr;
 810127c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810127e:	623b      	str	r3, [r7, #32]

		// convert (reverse order)
		while (intPart)
 8101280:	e01a      	b.n	81012b8 <ftoa+0x188>
		{
			*p++ = '0' + intPart % 10;
 8101282:	69fa      	ldr	r2, [r7, #28]
 8101284:	4b41      	ldr	r3, [pc, #260]	; (810138c <ftoa+0x25c>)
 8101286:	fb83 1302 	smull	r1, r3, r3, r2
 810128a:	1099      	asrs	r1, r3, #2
 810128c:	17d3      	asrs	r3, r2, #31
 810128e:	1ac9      	subs	r1, r1, r3
 8101290:	460b      	mov	r3, r1
 8101292:	009b      	lsls	r3, r3, #2
 8101294:	440b      	add	r3, r1
 8101296:	005b      	lsls	r3, r3, #1
 8101298:	1ad1      	subs	r1, r2, r3
 810129a:	b2ca      	uxtb	r2, r1
 810129c:	6a3b      	ldr	r3, [r7, #32]
 810129e:	1c59      	adds	r1, r3, #1
 81012a0:	6239      	str	r1, [r7, #32]
 81012a2:	3230      	adds	r2, #48	; 0x30
 81012a4:	b2d2      	uxtb	r2, r2
 81012a6:	701a      	strb	r2, [r3, #0]
			intPart /= 10;
 81012a8:	69fb      	ldr	r3, [r7, #28]
 81012aa:	4a38      	ldr	r2, [pc, #224]	; (810138c <ftoa+0x25c>)
 81012ac:	fb82 1203 	smull	r1, r2, r2, r3
 81012b0:	1092      	asrs	r2, r2, #2
 81012b2:	17db      	asrs	r3, r3, #31
 81012b4:	1ad3      	subs	r3, r2, r3
 81012b6:	61fb      	str	r3, [r7, #28]
		while (intPart)
 81012b8:	69fb      	ldr	r3, [r7, #28]
 81012ba:	2b00      	cmp	r3, #0
 81012bc:	d1e1      	bne.n	8101282 <ftoa+0x152>
		}

		// save end pos
		p1 = p;
 81012be:	6a3b      	ldr	r3, [r7, #32]
 81012c0:	61bb      	str	r3, [r7, #24]

		// reverse result
		while (p > ptr)
 81012c2:	e00e      	b.n	81012e2 <ftoa+0x1b2>
		{
			c = *--p;
 81012c4:	6a3b      	ldr	r3, [r7, #32]
 81012c6:	3b01      	subs	r3, #1
 81012c8:	623b      	str	r3, [r7, #32]
 81012ca:	6a3b      	ldr	r3, [r7, #32]
 81012cc:	781b      	ldrb	r3, [r3, #0]
 81012ce:	75fb      	strb	r3, [r7, #23]
			*p = *ptr;
 81012d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81012d2:	781a      	ldrb	r2, [r3, #0]
 81012d4:	6a3b      	ldr	r3, [r7, #32]
 81012d6:	701a      	strb	r2, [r3, #0]
			*ptr++ = c;
 81012d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81012da:	1c5a      	adds	r2, r3, #1
 81012dc:	627a      	str	r2, [r7, #36]	; 0x24
 81012de:	7dfa      	ldrb	r2, [r7, #23]
 81012e0:	701a      	strb	r2, [r3, #0]
		while (p > ptr)
 81012e2:	6a3a      	ldr	r2, [r7, #32]
 81012e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81012e6:	429a      	cmp	r2, r3
 81012e8:	d8ec      	bhi.n	81012c4 <ftoa+0x194>
		}

		// restore end pos
		ptr = p1;
 81012ea:	69bb      	ldr	r3, [r7, #24]
 81012ec:	627b      	str	r3, [r7, #36]	; 0x24
	}

	// decimal part
	if (precision)
 81012ee:	683b      	ldr	r3, [r7, #0]
 81012f0:	2b00      	cmp	r3, #0
 81012f2:	d030      	beq.n	8101356 <ftoa+0x226>
	{
		// place decimal point
		*ptr++ = '.';
 81012f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81012f6:	1c5a      	adds	r2, r3, #1
 81012f8:	627a      	str	r2, [r7, #36]	; 0x24
 81012fa:	222e      	movs	r2, #46	; 0x2e
 81012fc:	701a      	strb	r2, [r3, #0]

		// convert
		while (precision--)
 81012fe:	e025      	b.n	810134c <ftoa+0x21c>
		{
			f *= 10.0;
 8101300:	f04f 0200 	mov.w	r2, #0
 8101304:	4b1d      	ldr	r3, [pc, #116]	; (810137c <ftoa+0x24c>)
 8101306:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810130a:	f7ff f9fd 	bl	8100708 <__aeabi_dmul>
 810130e:	4602      	mov	r2, r0
 8101310:	460b      	mov	r3, r1
 8101312:	e9c7 2302 	strd	r2, r3, [r7, #8]
			c = f;
 8101316:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810131a:	f7ff fccd 	bl	8100cb8 <__aeabi_d2uiz>
 810131e:	4603      	mov	r3, r0
 8101320:	75fb      	strb	r3, [r7, #23]
			*ptr++ = '0' + c;
 8101322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101324:	1c5a      	adds	r2, r3, #1
 8101326:	627a      	str	r2, [r7, #36]	; 0x24
 8101328:	7dfa      	ldrb	r2, [r7, #23]
 810132a:	3230      	adds	r2, #48	; 0x30
 810132c:	b2d2      	uxtb	r2, r2
 810132e:	701a      	strb	r2, [r3, #0]
			f -= c;
 8101330:	7dfb      	ldrb	r3, [r7, #23]
 8101332:	4618      	mov	r0, r3
 8101334:	f7ff f97e 	bl	8100634 <__aeabi_i2d>
 8101338:	4602      	mov	r2, r0
 810133a:	460b      	mov	r3, r1
 810133c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8101340:	f7ff f82a 	bl	8100398 <__aeabi_dsub>
 8101344:	4602      	mov	r2, r0
 8101346:	460b      	mov	r3, r1
 8101348:	e9c7 2302 	strd	r2, r3, [r7, #8]
		while (precision--)
 810134c:	683b      	ldr	r3, [r7, #0]
 810134e:	1e5a      	subs	r2, r3, #1
 8101350:	603a      	str	r2, [r7, #0]
 8101352:	2b00      	cmp	r3, #0
 8101354:	d1d4      	bne.n	8101300 <ftoa+0x1d0>
		}
	}

	// terminating zero
	*ptr = 0;
 8101356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101358:	2200      	movs	r2, #0
 810135a:	701a      	strb	r2, [r3, #0]

	return buf;
 810135c:	687b      	ldr	r3, [r7, #4]
}
 810135e:	4618      	mov	r0, r3
 8101360:	3728      	adds	r7, #40	; 0x28
 8101362:	46bd      	mov	sp, r7
 8101364:	bdb0      	pop	{r4, r5, r7, pc}
 8101366:	bf00      	nop
 8101368:	00000000 	.word	0x00000000
 810136c:	40c38800 	.word	0x40c38800
 8101370:	00000000 	.word	0x00000000
 8101374:	40f86a00 	.word	0x40f86a00
 8101378:	3ff00000 	.word	0x3ff00000
 810137c:	40240000 	.word	0x40240000
 8101380:	40590000 	.word	0x40590000
 8101384:	408f4000 	.word	0x408f4000
 8101388:	0810e708 	.word	0x0810e708
 810138c:	66666667 	.word	0x66666667

08101390 <clearCommand>:
 * Function name: clearBuffer
 * Description : Clear the buffer array
 * Argument : none
 * Return value : none
 **********************************************/
void clearCommand(uint8_t data[]) {
 8101390:	b480      	push	{r7}
 8101392:	b085      	sub	sp, #20
 8101394:	af00      	add	r7, sp, #0
 8101396:	6078      	str	r0, [r7, #4]
	int i;
	for (i = 0; i < sizeof(data); i++) {
 8101398:	2300      	movs	r3, #0
 810139a:	60fb      	str	r3, [r7, #12]
 810139c:	e007      	b.n	81013ae <clearCommand+0x1e>
		data[i] = 0;
 810139e:	68fb      	ldr	r3, [r7, #12]
 81013a0:	687a      	ldr	r2, [r7, #4]
 81013a2:	4413      	add	r3, r2
 81013a4:	2200      	movs	r2, #0
 81013a6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < sizeof(data); i++) {
 81013a8:	68fb      	ldr	r3, [r7, #12]
 81013aa:	3301      	adds	r3, #1
 81013ac:	60fb      	str	r3, [r7, #12]
 81013ae:	68fb      	ldr	r3, [r7, #12]
 81013b0:	2b03      	cmp	r3, #3
 81013b2:	d9f4      	bls.n	810139e <clearCommand+0xe>
	}
}
 81013b4:	bf00      	nop
 81013b6:	bf00      	nop
 81013b8:	3714      	adds	r7, #20
 81013ba:	46bd      	mov	sp, r7
 81013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013c0:	4770      	bx	lr
	...

081013c4 <parseCommand>:
 * Function name: parseCommand
 * Description : Parse the received command
 * Argument : none
 * Return value : Char* pointing to the parsed command
 **********************************************/
void parseCommand(char *data) {
 81013c4:	b480      	push	{r7}
 81013c6:	b083      	sub	sp, #12
 81013c8:	af00      	add	r7, sp, #0
 81013ca:	6078      	str	r0, [r7, #4]
	if (data[2]) {
 81013cc:	687b      	ldr	r3, [r7, #4]
 81013ce:	3302      	adds	r3, #2
 81013d0:	781b      	ldrb	r3, [r3, #0]
 81013d2:	2b00      	cmp	r3, #0
 81013d4:	d02f      	beq.n	8101436 <parseCommand+0x72>
		switch (data[2]) {
 81013d6:	687b      	ldr	r3, [r7, #4]
 81013d8:	3302      	adds	r3, #2
 81013da:	781b      	ldrb	r3, [r3, #0]
 81013dc:	3b44      	subs	r3, #68	; 0x44
 81013de:	2b0a      	cmp	r3, #10
 81013e0:	d828      	bhi.n	8101434 <parseCommand+0x70>
 81013e2:	a201      	add	r2, pc, #4	; (adr r2, 81013e8 <parseCommand+0x24>)
 81013e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81013e8:	0810142d 	.word	0x0810142d
 81013ec:	08101425 	.word	0x08101425
 81013f0:	0810141d 	.word	0x0810141d
 81013f4:	08101435 	.word	0x08101435
 81013f8:	08101435 	.word	0x08101435
 81013fc:	08101435 	.word	0x08101435
 8101400:	08101435 	.word	0x08101435
 8101404:	08101435 	.word	0x08101435
 8101408:	08101435 	.word	0x08101435
 810140c:	08101435 	.word	0x08101435
 8101410:	08101415 	.word	0x08101415
		case 'N': {
			TX_Flag_DSTART = 1;
 8101414:	4b0b      	ldr	r3, [pc, #44]	; (8101444 <parseCommand+0x80>)
 8101416:	2201      	movs	r2, #1
 8101418:	601a      	str	r2, [r3, #0]
		}
			break;
 810141a:	e00c      	b.n	8101436 <parseCommand+0x72>

		case 'F': {
			TX_Flag_DSTART = 0;
 810141c:	4b09      	ldr	r3, [pc, #36]	; (8101444 <parseCommand+0x80>)
 810141e:	2200      	movs	r2, #0
 8101420:	601a      	str	r2, [r3, #0]
		}
			break;
 8101422:	e008      	b.n	8101436 <parseCommand+0x72>

		case 'E': {
			TX_Flag_DSEND = 1;
 8101424:	4b08      	ldr	r3, [pc, #32]	; (8101448 <parseCommand+0x84>)
 8101426:	2201      	movs	r2, #1
 8101428:	601a      	str	r2, [r3, #0]
		}
			break;
 810142a:	e004      	b.n	8101436 <parseCommand+0x72>

		case 'D': {
			TX_Flag_DSEND = 0;
 810142c:	4b06      	ldr	r3, [pc, #24]	; (8101448 <parseCommand+0x84>)
 810142e:	2200      	movs	r2, #0
 8101430:	601a      	str	r2, [r3, #0]
		}
			break;
 8101432:	e000      	b.n	8101436 <parseCommand+0x72>

		default:
			break;
 8101434:	bf00      	nop
		}
	}
}
 8101436:	bf00      	nop
 8101438:	370c      	adds	r7, #12
 810143a:	46bd      	mov	sp, r7
 810143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101440:	4770      	bx	lr
 8101442:	bf00      	nop
 8101444:	10000204 	.word	0x10000204
 8101448:	10000208 	.word	0x10000208

0810144c <HAL_UART_TxCpltCallback>:

uint8_t pc_buffer[20]; //dimensione della stringa inviata (letta sul file .txt su Matlab)
double duty_1 = 0, duty_2 = 0, duty_3 = 0, duty_4 = 0;

/* Callback per la trasmissione che si attiva una volta che tutti i dati sono pronti per l'invio*/ //(l'ESP trasmette alla scheda)
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 810144c:	b480      	push	{r7}
 810144e:	b083      	sub	sp, #12
 8101450:	af00      	add	r7, sp, #0
 8101452:	6078      	str	r0, [r7, #4]

}
 8101454:	bf00      	nop
 8101456:	370c      	adds	r7, #12
 8101458:	46bd      	mov	sp, r7
 810145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810145e:	4770      	bx	lr

08101460 <HAL_UART_RxCpltCallback>:

/* Callback per la ricezione che si attiva una volta ricevuti tutti i dati*/ //(l'ESP riceve da Matlab)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8101460:	b580      	push	{r7, lr}
 8101462:	b082      	sub	sp, #8
 8101464:	af00      	add	r7, sp, #0
 8101466:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart2, rxBuff, sizeof(rxBuff));
 8101468:	2204      	movs	r2, #4
 810146a:	4904      	ldr	r1, [pc, #16]	; (810147c <HAL_UART_RxCpltCallback+0x1c>)
 810146c:	4804      	ldr	r0, [pc, #16]	; (8101480 <HAL_UART_RxCpltCallback+0x20>)
 810146e:	f005 f985 	bl	810677c <HAL_UART_Receive_IT>
}
 8101472:	bf00      	nop
 8101474:	3708      	adds	r7, #8
 8101476:	46bd      	mov	sp, r7
 8101478:	bd80      	pop	{r7, pc}
 810147a:	bf00      	nop
 810147c:	10000334 	.word	0x10000334
 8101480:	100002a4 	.word	0x100002a4
 8101484:	00000000 	.word	0x00000000

08101488 <getFixedArray>:

void getFixedArray(double num, int nInt, int nDec, uint8_t *result) {
 8101488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810148c:	b08f      	sub	sp, #60	; 0x3c
 810148e:	af00      	add	r7, sp, #0
 8101490:	ed87 0b04 	vstr	d0, [r7, #16]
 8101494:	60f8      	str	r0, [r7, #12]
 8101496:	60b9      	str	r1, [r7, #8]
 8101498:	607a      	str	r2, [r7, #4]
 810149a:	466b      	mov	r3, sp
 810149c:	461e      	mov	r6, r3
	int p = 0;
 810149e:	2300      	movs	r3, #0
 81014a0:	627b      	str	r3, [r7, #36]	; 0x24
	for (int i=0; ; i++) {
 81014a2:	2300      	movs	r3, #0
 81014a4:	637b      	str	r3, [r7, #52]	; 0x34
		int r = (int) num/pow(10,i);
 81014a6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 81014aa:	f7ff fbdd 	bl	8100c68 <__aeabi_d2iz>
 81014ae:	4603      	mov	r3, r0
 81014b0:	4618      	mov	r0, r3
 81014b2:	f7ff f8bf 	bl	8100634 <__aeabi_i2d>
 81014b6:	4682      	mov	sl, r0
 81014b8:	468b      	mov	fp, r1
 81014ba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 81014bc:	f7ff f8ba 	bl	8100634 <__aeabi_i2d>
 81014c0:	4602      	mov	r2, r0
 81014c2:	460b      	mov	r3, r1
 81014c4:	ec43 2b11 	vmov	d1, r2, r3
 81014c8:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 81015f8 <getFixedArray+0x170>
 81014cc:	f00c f9c8 	bl	810d860 <pow>
 81014d0:	ec53 2b10 	vmov	r2, r3, d0
 81014d4:	4650      	mov	r0, sl
 81014d6:	4659      	mov	r1, fp
 81014d8:	f7ff fa40 	bl	810095c <__aeabi_ddiv>
 81014dc:	4602      	mov	r2, r0
 81014de:	460b      	mov	r3, r1
 81014e0:	4610      	mov	r0, r2
 81014e2:	4619      	mov	r1, r3
 81014e4:	f7ff fbc0 	bl	8100c68 <__aeabi_d2iz>
 81014e8:	4603      	mov	r3, r0
 81014ea:	623b      	str	r3, [r7, #32]
		if (r == 0) {
 81014ec:	6a3b      	ldr	r3, [r7, #32]
 81014ee:	2b00      	cmp	r3, #0
 81014f0:	d136      	bne.n	8101560 <getFixedArray+0xd8>
			p = i;
 81014f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81014f4:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 81014f6:	bf00      	nop
		}
	}
	char temp[nInt+nDec+1];
 81014f8:	68fa      	ldr	r2, [r7, #12]
 81014fa:	68bb      	ldr	r3, [r7, #8]
 81014fc:	4413      	add	r3, r2
 81014fe:	1c59      	adds	r1, r3, #1
 8101500:	1e4b      	subs	r3, r1, #1
 8101502:	61fb      	str	r3, [r7, #28]
 8101504:	460a      	mov	r2, r1
 8101506:	2300      	movs	r3, #0
 8101508:	4614      	mov	r4, r2
 810150a:	461d      	mov	r5, r3
 810150c:	f04f 0200 	mov.w	r2, #0
 8101510:	f04f 0300 	mov.w	r3, #0
 8101514:	00eb      	lsls	r3, r5, #3
 8101516:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 810151a:	00e2      	lsls	r2, r4, #3
 810151c:	460a      	mov	r2, r1
 810151e:	2300      	movs	r3, #0
 8101520:	4690      	mov	r8, r2
 8101522:	4699      	mov	r9, r3
 8101524:	f04f 0200 	mov.w	r2, #0
 8101528:	f04f 0300 	mov.w	r3, #0
 810152c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8101530:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8101534:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8101538:	460b      	mov	r3, r1
 810153a:	3307      	adds	r3, #7
 810153c:	08db      	lsrs	r3, r3, #3
 810153e:	00db      	lsls	r3, r3, #3
 8101540:	ebad 0d03 	sub.w	sp, sp, r3
 8101544:	466b      	mov	r3, sp
 8101546:	3300      	adds	r3, #0
 8101548:	61bb      	str	r3, [r7, #24]
	ftoa(num, temp, nDec);
 810154a:	68b9      	ldr	r1, [r7, #8]
 810154c:	69b8      	ldr	r0, [r7, #24]
 810154e:	ed97 0b04 	vldr	d0, [r7, #16]
 8101552:	f7ff fded 	bl	8101130 <ftoa>
	int j=0;
 8101556:	2300      	movs	r3, #0
 8101558:	633b      	str	r3, [r7, #48]	; 0x30
	for (int i=0; i<nInt; i++) {
 810155a:	2300      	movs	r3, #0
 810155c:	62fb      	str	r3, [r7, #44]	; 0x2c
 810155e:	e01e      	b.n	810159e <getFixedArray+0x116>
	for (int i=0; ; i++) {
 8101560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101562:	3301      	adds	r3, #1
 8101564:	637b      	str	r3, [r7, #52]	; 0x34
 8101566:	e79e      	b.n	81014a6 <getFixedArray+0x1e>
		if (nInt-p-i <= 0) {
 8101568:	68fa      	ldr	r2, [r7, #12]
 810156a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810156c:	1ad2      	subs	r2, r2, r3
 810156e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101570:	1ad3      	subs	r3, r2, r3
 8101572:	2b00      	cmp	r3, #0
 8101574:	dc0b      	bgt.n	810158e <getFixedArray+0x106>
			result[i] = temp[j];
 8101576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101578:	687a      	ldr	r2, [r7, #4]
 810157a:	4413      	add	r3, r2
 810157c:	69b9      	ldr	r1, [r7, #24]
 810157e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8101580:	440a      	add	r2, r1
 8101582:	7812      	ldrb	r2, [r2, #0]
 8101584:	701a      	strb	r2, [r3, #0]
			j++;
 8101586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101588:	3301      	adds	r3, #1
 810158a:	633b      	str	r3, [r7, #48]	; 0x30
 810158c:	e004      	b.n	8101598 <getFixedArray+0x110>
		} else {
			result[i] = '0';
 810158e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101590:	687a      	ldr	r2, [r7, #4]
 8101592:	4413      	add	r3, r2
 8101594:	2230      	movs	r2, #48	; 0x30
 8101596:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<nInt; i++) {
 8101598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810159a:	3301      	adds	r3, #1
 810159c:	62fb      	str	r3, [r7, #44]	; 0x2c
 810159e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 81015a0:	68fb      	ldr	r3, [r7, #12]
 81015a2:	429a      	cmp	r2, r3
 81015a4:	dbe0      	blt.n	8101568 <getFixedArray+0xe0>
		}
	}
	if (p==0)
 81015a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81015a8:	2b00      	cmp	r3, #0
 81015aa:	d102      	bne.n	81015b2 <getFixedArray+0x12a>
		j++;
 81015ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81015ae:	3301      	adds	r3, #1
 81015b0:	633b      	str	r3, [r7, #48]	; 0x30
	j++;
 81015b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81015b4:	3301      	adds	r3, #1
 81015b6:	633b      	str	r3, [r7, #48]	; 0x30
	for (int i=nInt; i<nInt+nDec; i++) {
 81015b8:	68fb      	ldr	r3, [r7, #12]
 81015ba:	62bb      	str	r3, [r7, #40]	; 0x28
 81015bc:	e00d      	b.n	81015da <getFixedArray+0x152>
		result[i] = temp[j];
 81015be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81015c0:	687a      	ldr	r2, [r7, #4]
 81015c2:	4413      	add	r3, r2
 81015c4:	69b9      	ldr	r1, [r7, #24]
 81015c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81015c8:	440a      	add	r2, r1
 81015ca:	7812      	ldrb	r2, [r2, #0]
 81015cc:	701a      	strb	r2, [r3, #0]
		j++;
 81015ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81015d0:	3301      	adds	r3, #1
 81015d2:	633b      	str	r3, [r7, #48]	; 0x30
	for (int i=nInt; i<nInt+nDec; i++) {
 81015d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81015d6:	3301      	adds	r3, #1
 81015d8:	62bb      	str	r3, [r7, #40]	; 0x28
 81015da:	68fa      	ldr	r2, [r7, #12]
 81015dc:	68bb      	ldr	r3, [r7, #8]
 81015de:	4413      	add	r3, r2
 81015e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 81015e2:	429a      	cmp	r2, r3
 81015e4:	dbeb      	blt.n	81015be <getFixedArray+0x136>
 81015e6:	46b5      	mov	sp, r6
	}
}
 81015e8:	bf00      	nop
 81015ea:	373c      	adds	r7, #60	; 0x3c
 81015ec:	46bd      	mov	sp, r7
 81015ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81015f2:	bf00      	nop
 81015f4:	f3af 8000 	nop.w
 81015f8:	00000000 	.word	0x00000000
 81015fc:	40240000 	.word	0x40240000

08101600 <generateRandomNumber>:

double generateRandomNumber(int min, int max) {
 8101600:	b5b0      	push	{r4, r5, r7, lr}
 8101602:	b084      	sub	sp, #16
 8101604:	af00      	add	r7, sp, #0
 8101606:	6078      	str	r0, [r7, #4]
 8101608:	6039      	str	r1, [r7, #0]
	double scale = rand() / (double) RAND_MAX; /* [0, 1.0] */
 810160a:	f008 fb95 	bl	8109d38 <rand>
 810160e:	4603      	mov	r3, r0
 8101610:	4618      	mov	r0, r3
 8101612:	f7ff f80f 	bl	8100634 <__aeabi_i2d>
 8101616:	a314      	add	r3, pc, #80	; (adr r3, 8101668 <generateRandomNumber+0x68>)
 8101618:	e9d3 2300 	ldrd	r2, r3, [r3]
 810161c:	f7ff f99e 	bl	810095c <__aeabi_ddiv>
 8101620:	4602      	mov	r2, r0
 8101622:	460b      	mov	r3, r1
 8101624:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return (double) min + scale * (double) (max - min); /* [min, max] */
 8101628:	6878      	ldr	r0, [r7, #4]
 810162a:	f7ff f803 	bl	8100634 <__aeabi_i2d>
 810162e:	4604      	mov	r4, r0
 8101630:	460d      	mov	r5, r1
 8101632:	683a      	ldr	r2, [r7, #0]
 8101634:	687b      	ldr	r3, [r7, #4]
 8101636:	1ad3      	subs	r3, r2, r3
 8101638:	4618      	mov	r0, r3
 810163a:	f7fe fffb 	bl	8100634 <__aeabi_i2d>
 810163e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8101642:	f7ff f861 	bl	8100708 <__aeabi_dmul>
 8101646:	4602      	mov	r2, r0
 8101648:	460b      	mov	r3, r1
 810164a:	4620      	mov	r0, r4
 810164c:	4629      	mov	r1, r5
 810164e:	f7fe fea5 	bl	810039c <__adddf3>
 8101652:	4602      	mov	r2, r0
 8101654:	460b      	mov	r3, r1
 8101656:	ec43 2b17 	vmov	d7, r2, r3
}
 810165a:	eeb0 0a47 	vmov.f32	s0, s14
 810165e:	eef0 0a67 	vmov.f32	s1, s15
 8101662:	3710      	adds	r7, #16
 8101664:	46bd      	mov	sp, r7
 8101666:	bdb0      	pop	{r4, r5, r7, pc}
 8101668:	ffc00000 	.word	0xffc00000
 810166c:	41dfffff 	.word	0x41dfffff

08101670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8101670:	b580      	push	{r7, lr}
 8101672:	b082      	sub	sp, #8
 8101674:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8101676:	4b90      	ldr	r3, [pc, #576]	; (81018b8 <main+0x248>)
 8101678:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810167c:	4a8e      	ldr	r2, [pc, #568]	; (81018b8 <main+0x248>)
 810167e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8101682:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101686:	4b8c      	ldr	r3, [pc, #560]	; (81018b8 <main+0x248>)
 8101688:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810168c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8101690:	603b      	str	r3, [r7, #0]
 8101692:	683b      	ldr	r3, [r7, #0]
	/* Activate HSEM notification for Cortex-M4*/
	HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101694:	2001      	movs	r0, #1
 8101696:	f001 ff2d 	bl	81034f4 <HAL_HSEM_ActivateNotification>
	/*
	 Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
	 perform system initialization (system clock config, external memory configuration.. )
	 */
	HAL_PWREx_ClearPendingEvent();
 810169a:	f001 ffb7 	bl	810360c <HAL_PWREx_ClearPendingEvent>
	HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE,
 810169e:	2201      	movs	r2, #1
 81016a0:	2102      	movs	r1, #2
 81016a2:	2000      	movs	r0, #0
 81016a4:	f001 ff38 	bl	8103518 <HAL_PWREx_EnterSTOPMode>
	PWR_D2_DOMAIN);
	/* Clear HSEM flag */
	__HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81016a8:	4b84      	ldr	r3, [pc, #528]	; (81018bc <main+0x24c>)
 81016aa:	681b      	ldr	r3, [r3, #0]
 81016ac:	091b      	lsrs	r3, r3, #4
 81016ae:	f003 030f 	and.w	r3, r3, #15
 81016b2:	2b07      	cmp	r3, #7
 81016b4:	d108      	bne.n	81016c8 <main+0x58>
 81016b6:	4b82      	ldr	r3, [pc, #520]	; (81018c0 <main+0x250>)
 81016b8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 81016bc:	4a80      	ldr	r2, [pc, #512]	; (81018c0 <main+0x250>)
 81016be:	f043 0301 	orr.w	r3, r3, #1
 81016c2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 81016c6:	e007      	b.n	81016d8 <main+0x68>
 81016c8:	4b7d      	ldr	r3, [pc, #500]	; (81018c0 <main+0x250>)
 81016ca:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 81016ce:	4a7c      	ldr	r2, [pc, #496]	; (81018c0 <main+0x250>)
 81016d0:	f043 0301 	orr.w	r3, r3, #1
 81016d4:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81016d8:	f000 fe06 	bl	81022e8 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81016dc:	f000 fa40 	bl	8101b60 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 81016e0:	f000 f9f2 	bl	8101ac8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 81016e4:	f000 f90a 	bl	81018fc <MX_TIM2_Init>
  MX_TIM3_Init();
 81016e8:	f000 f956 	bl	8101998 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart2, rxBuff, sizeof(rxBuff));
 81016ec:	2204      	movs	r2, #4
 81016ee:	4975      	ldr	r1, [pc, #468]	; (81018c4 <main+0x254>)
 81016f0:	4875      	ldr	r0, [pc, #468]	; (81018c8 <main+0x258>)
 81016f2:	f005 f843 	bl	810677c <HAL_UART_Receive_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 81016f6:	4875      	ldr	r0, [pc, #468]	; (81018cc <main+0x25c>)
 81016f8:	f003 fd2e 	bl	8105158 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 81016fc:	2100      	movs	r1, #0
 81016fe:	4874      	ldr	r0, [pc, #464]	; (81018d0 <main+0x260>)
 8101700:	f003 fe04 	bl	810530c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8101704:	2104      	movs	r1, #4
 8101706:	4872      	ldr	r0, [pc, #456]	; (81018d0 <main+0x260>)
 8101708:	f003 fe00 	bl	810530c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 810170c:	2108      	movs	r1, #8
 810170e:	4870      	ldr	r0, [pc, #448]	; (81018d0 <main+0x260>)
 8101710:	f003 fdfc 	bl	810530c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8101714:	210c      	movs	r1, #12
 8101716:	486e      	ldr	r0, [pc, #440]	; (81018d0 <main+0x260>)
 8101718:	f003 fdf8 	bl	810530c <HAL_TIM_PWM_Start>
	srand(time(NULL));
 810171c:	2000      	movs	r0, #0
 810171e:	f009 faa9 	bl	810ac74 <time>
 8101722:	4603      	mov	r3, r0
 8101724:	4618      	mov	r0, r3
 8101726:	f008 fad9 	bl	8109cdc <srand>
	int i = 0;
 810172a:	2300      	movs	r3, #0
 810172c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		TIM3->CCR1= 999 - i%1000;
 810172e:	687a      	ldr	r2, [r7, #4]
 8101730:	4b68      	ldr	r3, [pc, #416]	; (81018d4 <main+0x264>)
 8101732:	fb83 1302 	smull	r1, r3, r3, r2
 8101736:	1199      	asrs	r1, r3, #6
 8101738:	17d3      	asrs	r3, r2, #31
 810173a:	1acb      	subs	r3, r1, r3
 810173c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8101740:	fb01 f303 	mul.w	r3, r1, r3
 8101744:	1ad3      	subs	r3, r2, r3
 8101746:	f5c3 7379 	rsb	r3, r3, #996	; 0x3e4
 810174a:	3303      	adds	r3, #3
 810174c:	4a62      	ldr	r2, [pc, #392]	; (81018d8 <main+0x268>)
 810174e:	6353      	str	r3, [r2, #52]	; 0x34
		TIM3->CCR2= 999 - i%1000;
 8101750:	687a      	ldr	r2, [r7, #4]
 8101752:	4b60      	ldr	r3, [pc, #384]	; (81018d4 <main+0x264>)
 8101754:	fb83 1302 	smull	r1, r3, r3, r2
 8101758:	1199      	asrs	r1, r3, #6
 810175a:	17d3      	asrs	r3, r2, #31
 810175c:	1acb      	subs	r3, r1, r3
 810175e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8101762:	fb01 f303 	mul.w	r3, r1, r3
 8101766:	1ad3      	subs	r3, r2, r3
 8101768:	f5c3 7379 	rsb	r3, r3, #996	; 0x3e4
 810176c:	3303      	adds	r3, #3
 810176e:	4a5a      	ldr	r2, [pc, #360]	; (81018d8 <main+0x268>)
 8101770:	6393      	str	r3, [r2, #56]	; 0x38
		TIM3->CCR3= 999 - i%1000;
 8101772:	687a      	ldr	r2, [r7, #4]
 8101774:	4b57      	ldr	r3, [pc, #348]	; (81018d4 <main+0x264>)
 8101776:	fb83 1302 	smull	r1, r3, r3, r2
 810177a:	1199      	asrs	r1, r3, #6
 810177c:	17d3      	asrs	r3, r2, #31
 810177e:	1acb      	subs	r3, r1, r3
 8101780:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8101784:	fb01 f303 	mul.w	r3, r1, r3
 8101788:	1ad3      	subs	r3, r2, r3
 810178a:	f5c3 7379 	rsb	r3, r3, #996	; 0x3e4
 810178e:	3303      	adds	r3, #3
 8101790:	4a51      	ldr	r2, [pc, #324]	; (81018d8 <main+0x268>)
 8101792:	63d3      	str	r3, [r2, #60]	; 0x3c
		TIM3->CCR4= 999 - i%1000;
 8101794:	687a      	ldr	r2, [r7, #4]
 8101796:	4b4f      	ldr	r3, [pc, #316]	; (81018d4 <main+0x264>)
 8101798:	fb83 1302 	smull	r1, r3, r3, r2
 810179c:	1199      	asrs	r1, r3, #6
 810179e:	17d3      	asrs	r3, r2, #31
 81017a0:	1acb      	subs	r3, r1, r3
 81017a2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 81017a6:	fb01 f303 	mul.w	r3, r1, r3
 81017aa:	1ad3      	subs	r3, r2, r3
 81017ac:	f5c3 7379 	rsb	r3, r3, #996	; 0x3e4
 81017b0:	3303      	adds	r3, #3
 81017b2:	4a49      	ldr	r2, [pc, #292]	; (81018d8 <main+0x268>)
 81017b4:	6413      	str	r3, [r2, #64]	; 0x40
		duty_1 = (double) (i%1000) / 1000;
 81017b6:	687b      	ldr	r3, [r7, #4]
 81017b8:	4a46      	ldr	r2, [pc, #280]	; (81018d4 <main+0x264>)
 81017ba:	fb82 1203 	smull	r1, r2, r2, r3
 81017be:	1191      	asrs	r1, r2, #6
 81017c0:	17da      	asrs	r2, r3, #31
 81017c2:	1a8a      	subs	r2, r1, r2
 81017c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 81017c8:	fb01 f202 	mul.w	r2, r1, r2
 81017cc:	1a9a      	subs	r2, r3, r2
 81017ce:	4610      	mov	r0, r2
 81017d0:	f7fe ff30 	bl	8100634 <__aeabi_i2d>
 81017d4:	f04f 0200 	mov.w	r2, #0
 81017d8:	4b40      	ldr	r3, [pc, #256]	; (81018dc <main+0x26c>)
 81017da:	f7ff f8bf 	bl	810095c <__aeabi_ddiv>
 81017de:	4602      	mov	r2, r0
 81017e0:	460b      	mov	r3, r1
 81017e2:	493f      	ldr	r1, [pc, #252]	; (81018e0 <main+0x270>)
 81017e4:	e9c1 2300 	strd	r2, r3, [r1]
		duty_2 = (double) (i%1000) / 1000;
 81017e8:	687b      	ldr	r3, [r7, #4]
 81017ea:	4a3a      	ldr	r2, [pc, #232]	; (81018d4 <main+0x264>)
 81017ec:	fb82 1203 	smull	r1, r2, r2, r3
 81017f0:	1191      	asrs	r1, r2, #6
 81017f2:	17da      	asrs	r2, r3, #31
 81017f4:	1a8a      	subs	r2, r1, r2
 81017f6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 81017fa:	fb01 f202 	mul.w	r2, r1, r2
 81017fe:	1a9a      	subs	r2, r3, r2
 8101800:	4610      	mov	r0, r2
 8101802:	f7fe ff17 	bl	8100634 <__aeabi_i2d>
 8101806:	f04f 0200 	mov.w	r2, #0
 810180a:	4b34      	ldr	r3, [pc, #208]	; (81018dc <main+0x26c>)
 810180c:	f7ff f8a6 	bl	810095c <__aeabi_ddiv>
 8101810:	4602      	mov	r2, r0
 8101812:	460b      	mov	r3, r1
 8101814:	4933      	ldr	r1, [pc, #204]	; (81018e4 <main+0x274>)
 8101816:	e9c1 2300 	strd	r2, r3, [r1]
		duty_3 = (double) (i%1000) / 1000;
 810181a:	687b      	ldr	r3, [r7, #4]
 810181c:	4a2d      	ldr	r2, [pc, #180]	; (81018d4 <main+0x264>)
 810181e:	fb82 1203 	smull	r1, r2, r2, r3
 8101822:	1191      	asrs	r1, r2, #6
 8101824:	17da      	asrs	r2, r3, #31
 8101826:	1a8a      	subs	r2, r1, r2
 8101828:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 810182c:	fb01 f202 	mul.w	r2, r1, r2
 8101830:	1a9a      	subs	r2, r3, r2
 8101832:	4610      	mov	r0, r2
 8101834:	f7fe fefe 	bl	8100634 <__aeabi_i2d>
 8101838:	f04f 0200 	mov.w	r2, #0
 810183c:	4b27      	ldr	r3, [pc, #156]	; (81018dc <main+0x26c>)
 810183e:	f7ff f88d 	bl	810095c <__aeabi_ddiv>
 8101842:	4602      	mov	r2, r0
 8101844:	460b      	mov	r3, r1
 8101846:	4928      	ldr	r1, [pc, #160]	; (81018e8 <main+0x278>)
 8101848:	e9c1 2300 	strd	r2, r3, [r1]
		duty_4 = (double) (i%1000) / 1000;
 810184c:	687b      	ldr	r3, [r7, #4]
 810184e:	4a21      	ldr	r2, [pc, #132]	; (81018d4 <main+0x264>)
 8101850:	fb82 1203 	smull	r1, r2, r2, r3
 8101854:	1191      	asrs	r1, r2, #6
 8101856:	17da      	asrs	r2, r3, #31
 8101858:	1a8a      	subs	r2, r1, r2
 810185a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 810185e:	fb01 f202 	mul.w	r2, r1, r2
 8101862:	1a9a      	subs	r2, r3, r2
 8101864:	4610      	mov	r0, r2
 8101866:	f7fe fee5 	bl	8100634 <__aeabi_i2d>
 810186a:	f04f 0200 	mov.w	r2, #0
 810186e:	4b1b      	ldr	r3, [pc, #108]	; (81018dc <main+0x26c>)
 8101870:	f7ff f874 	bl	810095c <__aeabi_ddiv>
 8101874:	4602      	mov	r2, r0
 8101876:	460b      	mov	r3, r1
 8101878:	491c      	ldr	r1, [pc, #112]	; (81018ec <main+0x27c>)
 810187a:	e9c1 2300 	strd	r2, r3, [r1]
		i++;
 810187e:	687b      	ldr	r3, [r7, #4]
 8101880:	3301      	adds	r3, #1
 8101882:	607b      	str	r3, [r7, #4]

		if (TX_Flag_DSTOP) {
			//spegnimento dei motori
		}

		if (TX_Flag_DSEND) {
 8101884:	4b1a      	ldr	r3, [pc, #104]	; (81018f0 <main+0x280>)
 8101886:	681b      	ldr	r3, [r3, #0]
 8101888:	2b00      	cmp	r3, #0
 810188a:	d00a      	beq.n	81018a2 <main+0x232>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); //accensione led verde (se c'è trasmissione)
 810188c:	2201      	movs	r2, #1
 810188e:	2101      	movs	r1, #1
 8101890:	4818      	ldr	r0, [pc, #96]	; (81018f4 <main+0x284>)
 8101892:	f001 fe15 	bl	81034c0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET); //spegnimento led verde (se non c'è trasmissione)
 8101896:	2200      	movs	r2, #0
 8101898:	2102      	movs	r1, #2
 810189a:	4817      	ldr	r0, [pc, #92]	; (81018f8 <main+0x288>)
 810189c:	f001 fe10 	bl	81034c0 <HAL_GPIO_WritePin>
 81018a0:	e745      	b.n	810172e <main+0xbe>
		} else {
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET); //accensione led verde (se c'è trasmissione)
 81018a2:	2201      	movs	r2, #1
 81018a4:	2102      	movs	r1, #2
 81018a6:	4814      	ldr	r0, [pc, #80]	; (81018f8 <main+0x288>)
 81018a8:	f001 fe0a 	bl	81034c0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); //spegnimento led verde (se non c'è trasmissione)
 81018ac:	2200      	movs	r2, #0
 81018ae:	2101      	movs	r1, #1
 81018b0:	4810      	ldr	r0, [pc, #64]	; (81018f4 <main+0x284>)
 81018b2:	f001 fe05 	bl	81034c0 <HAL_GPIO_WritePin>
		TIM3->CCR1= 999 - i%1000;
 81018b6:	e73a      	b.n	810172e <main+0xbe>
 81018b8:	58024400 	.word	0x58024400
 81018bc:	e000ed00 	.word	0xe000ed00
 81018c0:	58026400 	.word	0x58026400
 81018c4:	10000334 	.word	0x10000334
 81018c8:	100002a4 	.word	0x100002a4
 81018cc:	1000020c 	.word	0x1000020c
 81018d0:	10000258 	.word	0x10000258
 81018d4:	10624dd3 	.word	0x10624dd3
 81018d8:	40000400 	.word	0x40000400
 81018dc:	408f4000 	.word	0x408f4000
 81018e0:	10000350 	.word	0x10000350
 81018e4:	10000358 	.word	0x10000358
 81018e8:	10000360 	.word	0x10000360
 81018ec:	10000368 	.word	0x10000368
 81018f0:	10000208 	.word	0x10000208
 81018f4:	58020400 	.word	0x58020400
 81018f8:	58021000 	.word	0x58021000

081018fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 81018fc:	b580      	push	{r7, lr}
 81018fe:	b088      	sub	sp, #32
 8101900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8101902:	f107 0310 	add.w	r3, r7, #16
 8101906:	2200      	movs	r2, #0
 8101908:	601a      	str	r2, [r3, #0]
 810190a:	605a      	str	r2, [r3, #4]
 810190c:	609a      	str	r2, [r3, #8]
 810190e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8101910:	1d3b      	adds	r3, r7, #4
 8101912:	2200      	movs	r2, #0
 8101914:	601a      	str	r2, [r3, #0]
 8101916:	605a      	str	r2, [r3, #4]
 8101918:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 810191a:	4b1e      	ldr	r3, [pc, #120]	; (8101994 <MX_TIM2_Init+0x98>)
 810191c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8101920:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24000-1;
 8101922:	4b1c      	ldr	r3, [pc, #112]	; (8101994 <MX_TIM2_Init+0x98>)
 8101924:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 8101928:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 810192a:	4b1a      	ldr	r3, [pc, #104]	; (8101994 <MX_TIM2_Init+0x98>)
 810192c:	2200      	movs	r2, #0
 810192e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8101930:	4b18      	ldr	r3, [pc, #96]	; (8101994 <MX_TIM2_Init+0x98>)
 8101932:	f240 32e7 	movw	r2, #999	; 0x3e7
 8101936:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8101938:	4b16      	ldr	r3, [pc, #88]	; (8101994 <MX_TIM2_Init+0x98>)
 810193a:	2200      	movs	r2, #0
 810193c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 810193e:	4b15      	ldr	r3, [pc, #84]	; (8101994 <MX_TIM2_Init+0x98>)
 8101940:	2200      	movs	r2, #0
 8101942:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8101944:	4813      	ldr	r0, [pc, #76]	; (8101994 <MX_TIM2_Init+0x98>)
 8101946:	f003 fbaf 	bl	81050a8 <HAL_TIM_Base_Init>
 810194a:	4603      	mov	r3, r0
 810194c:	2b00      	cmp	r3, #0
 810194e:	d001      	beq.n	8101954 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8101950:	f000 fa2c 	bl	8101dac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8101954:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8101958:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 810195a:	f107 0310 	add.w	r3, r7, #16
 810195e:	4619      	mov	r1, r3
 8101960:	480c      	ldr	r0, [pc, #48]	; (8101994 <MX_TIM2_Init+0x98>)
 8101962:	f004 f815 	bl	8105990 <HAL_TIM_ConfigClockSource>
 8101966:	4603      	mov	r3, r0
 8101968:	2b00      	cmp	r3, #0
 810196a:	d001      	beq.n	8101970 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 810196c:	f000 fa1e 	bl	8101dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8101970:	2300      	movs	r3, #0
 8101972:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8101974:	2300      	movs	r3, #0
 8101976:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8101978:	1d3b      	adds	r3, r7, #4
 810197a:	4619      	mov	r1, r3
 810197c:	4805      	ldr	r0, [pc, #20]	; (8101994 <MX_TIM2_Init+0x98>)
 810197e:	f004 fd59 	bl	8106434 <HAL_TIMEx_MasterConfigSynchronization>
 8101982:	4603      	mov	r3, r0
 8101984:	2b00      	cmp	r3, #0
 8101986:	d001      	beq.n	810198c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8101988:	f000 fa10 	bl	8101dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 810198c:	bf00      	nop
 810198e:	3720      	adds	r7, #32
 8101990:	46bd      	mov	sp, r7
 8101992:	bd80      	pop	{r7, pc}
 8101994:	1000020c 	.word	0x1000020c

08101998 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8101998:	b580      	push	{r7, lr}
 810199a:	b08e      	sub	sp, #56	; 0x38
 810199c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 810199e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 81019a2:	2200      	movs	r2, #0
 81019a4:	601a      	str	r2, [r3, #0]
 81019a6:	605a      	str	r2, [r3, #4]
 81019a8:	609a      	str	r2, [r3, #8]
 81019aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81019ac:	f107 031c 	add.w	r3, r7, #28
 81019b0:	2200      	movs	r2, #0
 81019b2:	601a      	str	r2, [r3, #0]
 81019b4:	605a      	str	r2, [r3, #4]
 81019b6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 81019b8:	463b      	mov	r3, r7
 81019ba:	2200      	movs	r2, #0
 81019bc:	601a      	str	r2, [r3, #0]
 81019be:	605a      	str	r2, [r3, #4]
 81019c0:	609a      	str	r2, [r3, #8]
 81019c2:	60da      	str	r2, [r3, #12]
 81019c4:	611a      	str	r2, [r3, #16]
 81019c6:	615a      	str	r2, [r3, #20]
 81019c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 81019ca:	4b3d      	ldr	r3, [pc, #244]	; (8101ac0 <MX_TIM3_Init+0x128>)
 81019cc:	4a3d      	ldr	r2, [pc, #244]	; (8101ac4 <MX_TIM3_Init+0x12c>)
 81019ce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 240-1;
 81019d0:	4b3b      	ldr	r3, [pc, #236]	; (8101ac0 <MX_TIM3_Init+0x128>)
 81019d2:	22ef      	movs	r2, #239	; 0xef
 81019d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 81019d6:	4b3a      	ldr	r3, [pc, #232]	; (8101ac0 <MX_TIM3_Init+0x128>)
 81019d8:	2200      	movs	r2, #0
 81019da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 81019dc:	4b38      	ldr	r3, [pc, #224]	; (8101ac0 <MX_TIM3_Init+0x128>)
 81019de:	f240 32e7 	movw	r2, #999	; 0x3e7
 81019e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81019e4:	4b36      	ldr	r3, [pc, #216]	; (8101ac0 <MX_TIM3_Init+0x128>)
 81019e6:	2200      	movs	r2, #0
 81019e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81019ea:	4b35      	ldr	r3, [pc, #212]	; (8101ac0 <MX_TIM3_Init+0x128>)
 81019ec:	2200      	movs	r2, #0
 81019ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 81019f0:	4833      	ldr	r0, [pc, #204]	; (8101ac0 <MX_TIM3_Init+0x128>)
 81019f2:	f003 fb59 	bl	81050a8 <HAL_TIM_Base_Init>
 81019f6:	4603      	mov	r3, r0
 81019f8:	2b00      	cmp	r3, #0
 81019fa:	d001      	beq.n	8101a00 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 81019fc:	f000 f9d6 	bl	8101dac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8101a00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8101a04:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8101a06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8101a0a:	4619      	mov	r1, r3
 8101a0c:	482c      	ldr	r0, [pc, #176]	; (8101ac0 <MX_TIM3_Init+0x128>)
 8101a0e:	f003 ffbf 	bl	8105990 <HAL_TIM_ConfigClockSource>
 8101a12:	4603      	mov	r3, r0
 8101a14:	2b00      	cmp	r3, #0
 8101a16:	d001      	beq.n	8101a1c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8101a18:	f000 f9c8 	bl	8101dac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8101a1c:	4828      	ldr	r0, [pc, #160]	; (8101ac0 <MX_TIM3_Init+0x128>)
 8101a1e:	f003 fc13 	bl	8105248 <HAL_TIM_PWM_Init>
 8101a22:	4603      	mov	r3, r0
 8101a24:	2b00      	cmp	r3, #0
 8101a26:	d001      	beq.n	8101a2c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8101a28:	f000 f9c0 	bl	8101dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8101a2c:	2300      	movs	r3, #0
 8101a2e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8101a30:	2300      	movs	r3, #0
 8101a32:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8101a34:	f107 031c 	add.w	r3, r7, #28
 8101a38:	4619      	mov	r1, r3
 8101a3a:	4821      	ldr	r0, [pc, #132]	; (8101ac0 <MX_TIM3_Init+0x128>)
 8101a3c:	f004 fcfa 	bl	8106434 <HAL_TIMEx_MasterConfigSynchronization>
 8101a40:	4603      	mov	r3, r0
 8101a42:	2b00      	cmp	r3, #0
 8101a44:	d001      	beq.n	8101a4a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8101a46:	f000 f9b1 	bl	8101dac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8101a4a:	2360      	movs	r3, #96	; 0x60
 8101a4c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8101a4e:	2300      	movs	r3, #0
 8101a50:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8101a52:	2300      	movs	r3, #0
 8101a54:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8101a56:	2300      	movs	r3, #0
 8101a58:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8101a5a:	463b      	mov	r3, r7
 8101a5c:	2200      	movs	r2, #0
 8101a5e:	4619      	mov	r1, r3
 8101a60:	4817      	ldr	r0, [pc, #92]	; (8101ac0 <MX_TIM3_Init+0x128>)
 8101a62:	f003 fe81 	bl	8105768 <HAL_TIM_PWM_ConfigChannel>
 8101a66:	4603      	mov	r3, r0
 8101a68:	2b00      	cmp	r3, #0
 8101a6a:	d001      	beq.n	8101a70 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8101a6c:	f000 f99e 	bl	8101dac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8101a70:	463b      	mov	r3, r7
 8101a72:	2204      	movs	r2, #4
 8101a74:	4619      	mov	r1, r3
 8101a76:	4812      	ldr	r0, [pc, #72]	; (8101ac0 <MX_TIM3_Init+0x128>)
 8101a78:	f003 fe76 	bl	8105768 <HAL_TIM_PWM_ConfigChannel>
 8101a7c:	4603      	mov	r3, r0
 8101a7e:	2b00      	cmp	r3, #0
 8101a80:	d001      	beq.n	8101a86 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8101a82:	f000 f993 	bl	8101dac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8101a86:	463b      	mov	r3, r7
 8101a88:	2208      	movs	r2, #8
 8101a8a:	4619      	mov	r1, r3
 8101a8c:	480c      	ldr	r0, [pc, #48]	; (8101ac0 <MX_TIM3_Init+0x128>)
 8101a8e:	f003 fe6b 	bl	8105768 <HAL_TIM_PWM_ConfigChannel>
 8101a92:	4603      	mov	r3, r0
 8101a94:	2b00      	cmp	r3, #0
 8101a96:	d001      	beq.n	8101a9c <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8101a98:	f000 f988 	bl	8101dac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8101a9c:	463b      	mov	r3, r7
 8101a9e:	220c      	movs	r2, #12
 8101aa0:	4619      	mov	r1, r3
 8101aa2:	4807      	ldr	r0, [pc, #28]	; (8101ac0 <MX_TIM3_Init+0x128>)
 8101aa4:	f003 fe60 	bl	8105768 <HAL_TIM_PWM_ConfigChannel>
 8101aa8:	4603      	mov	r3, r0
 8101aaa:	2b00      	cmp	r3, #0
 8101aac:	d001      	beq.n	8101ab2 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8101aae:	f000 f97d 	bl	8101dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8101ab2:	4803      	ldr	r0, [pc, #12]	; (8101ac0 <MX_TIM3_Init+0x128>)
 8101ab4:	f000 f9d8 	bl	8101e68 <HAL_TIM_MspPostInit>

}
 8101ab8:	bf00      	nop
 8101aba:	3738      	adds	r7, #56	; 0x38
 8101abc:	46bd      	mov	sp, r7
 8101abe:	bd80      	pop	{r7, pc}
 8101ac0:	10000258 	.word	0x10000258
 8101ac4:	40000400 	.word	0x40000400

08101ac8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8101ac8:	b580      	push	{r7, lr}
 8101aca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8101acc:	4b22      	ldr	r3, [pc, #136]	; (8101b58 <MX_USART2_UART_Init+0x90>)
 8101ace:	4a23      	ldr	r2, [pc, #140]	; (8101b5c <MX_USART2_UART_Init+0x94>)
 8101ad0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8101ad2:	4b21      	ldr	r3, [pc, #132]	; (8101b58 <MX_USART2_UART_Init+0x90>)
 8101ad4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8101ad8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8101ada:	4b1f      	ldr	r3, [pc, #124]	; (8101b58 <MX_USART2_UART_Init+0x90>)
 8101adc:	2200      	movs	r2, #0
 8101ade:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8101ae0:	4b1d      	ldr	r3, [pc, #116]	; (8101b58 <MX_USART2_UART_Init+0x90>)
 8101ae2:	2200      	movs	r2, #0
 8101ae4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8101ae6:	4b1c      	ldr	r3, [pc, #112]	; (8101b58 <MX_USART2_UART_Init+0x90>)
 8101ae8:	2200      	movs	r2, #0
 8101aea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8101aec:	4b1a      	ldr	r3, [pc, #104]	; (8101b58 <MX_USART2_UART_Init+0x90>)
 8101aee:	220c      	movs	r2, #12
 8101af0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8101af2:	4b19      	ldr	r3, [pc, #100]	; (8101b58 <MX_USART2_UART_Init+0x90>)
 8101af4:	2200      	movs	r2, #0
 8101af6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8101af8:	4b17      	ldr	r3, [pc, #92]	; (8101b58 <MX_USART2_UART_Init+0x90>)
 8101afa:	2200      	movs	r2, #0
 8101afc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8101afe:	4b16      	ldr	r3, [pc, #88]	; (8101b58 <MX_USART2_UART_Init+0x90>)
 8101b00:	2200      	movs	r2, #0
 8101b02:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8101b04:	4b14      	ldr	r3, [pc, #80]	; (8101b58 <MX_USART2_UART_Init+0x90>)
 8101b06:	2200      	movs	r2, #0
 8101b08:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8101b0a:	4b13      	ldr	r3, [pc, #76]	; (8101b58 <MX_USART2_UART_Init+0x90>)
 8101b0c:	2200      	movs	r2, #0
 8101b0e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8101b10:	4811      	ldr	r0, [pc, #68]	; (8101b58 <MX_USART2_UART_Init+0x90>)
 8101b12:	f004 fd3b 	bl	810658c <HAL_UART_Init>
 8101b16:	4603      	mov	r3, r0
 8101b18:	2b00      	cmp	r3, #0
 8101b1a:	d001      	beq.n	8101b20 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8101b1c:	f000 f946 	bl	8101dac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101b20:	2100      	movs	r1, #0
 8101b22:	480d      	ldr	r0, [pc, #52]	; (8101b58 <MX_USART2_UART_Init+0x90>)
 8101b24:	f007 f979 	bl	8108e1a <HAL_UARTEx_SetTxFifoThreshold>
 8101b28:	4603      	mov	r3, r0
 8101b2a:	2b00      	cmp	r3, #0
 8101b2c:	d001      	beq.n	8101b32 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8101b2e:	f000 f93d 	bl	8101dac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101b32:	2100      	movs	r1, #0
 8101b34:	4808      	ldr	r0, [pc, #32]	; (8101b58 <MX_USART2_UART_Init+0x90>)
 8101b36:	f007 f9ae 	bl	8108e96 <HAL_UARTEx_SetRxFifoThreshold>
 8101b3a:	4603      	mov	r3, r0
 8101b3c:	2b00      	cmp	r3, #0
 8101b3e:	d001      	beq.n	8101b44 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8101b40:	f000 f934 	bl	8101dac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8101b44:	4804      	ldr	r0, [pc, #16]	; (8101b58 <MX_USART2_UART_Init+0x90>)
 8101b46:	f007 f92f 	bl	8108da8 <HAL_UARTEx_DisableFifoMode>
 8101b4a:	4603      	mov	r3, r0
 8101b4c:	2b00      	cmp	r3, #0
 8101b4e:	d001      	beq.n	8101b54 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8101b50:	f000 f92c 	bl	8101dac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8101b54:	bf00      	nop
 8101b56:	bd80      	pop	{r7, pc}
 8101b58:	100002a4 	.word	0x100002a4
 8101b5c:	40004400 	.word	0x40004400

08101b60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8101b60:	b580      	push	{r7, lr}
 8101b62:	b08a      	sub	sp, #40	; 0x28
 8101b64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101b66:	f107 0314 	add.w	r3, r7, #20
 8101b6a:	2200      	movs	r2, #0
 8101b6c:	601a      	str	r2, [r3, #0]
 8101b6e:	605a      	str	r2, [r3, #4]
 8101b70:	609a      	str	r2, [r3, #8]
 8101b72:	60da      	str	r2, [r3, #12]
 8101b74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8101b76:	4b3a      	ldr	r3, [pc, #232]	; (8101c60 <MX_GPIO_Init+0x100>)
 8101b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b7c:	4a38      	ldr	r2, [pc, #224]	; (8101c60 <MX_GPIO_Init+0x100>)
 8101b7e:	f043 0301 	orr.w	r3, r3, #1
 8101b82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101b86:	4b36      	ldr	r3, [pc, #216]	; (8101c60 <MX_GPIO_Init+0x100>)
 8101b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b8c:	f003 0301 	and.w	r3, r3, #1
 8101b90:	613b      	str	r3, [r7, #16]
 8101b92:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8101b94:	4b32      	ldr	r3, [pc, #200]	; (8101c60 <MX_GPIO_Init+0x100>)
 8101b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b9a:	4a31      	ldr	r2, [pc, #196]	; (8101c60 <MX_GPIO_Init+0x100>)
 8101b9c:	f043 0302 	orr.w	r3, r3, #2
 8101ba0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101ba4:	4b2e      	ldr	r3, [pc, #184]	; (8101c60 <MX_GPIO_Init+0x100>)
 8101ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101baa:	f003 0302 	and.w	r3, r3, #2
 8101bae:	60fb      	str	r3, [r7, #12]
 8101bb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8101bb2:	4b2b      	ldr	r3, [pc, #172]	; (8101c60 <MX_GPIO_Init+0x100>)
 8101bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101bb8:	4a29      	ldr	r2, [pc, #164]	; (8101c60 <MX_GPIO_Init+0x100>)
 8101bba:	f043 0304 	orr.w	r3, r3, #4
 8101bbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101bc2:	4b27      	ldr	r3, [pc, #156]	; (8101c60 <MX_GPIO_Init+0x100>)
 8101bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101bc8:	f003 0304 	and.w	r3, r3, #4
 8101bcc:	60bb      	str	r3, [r7, #8]
 8101bce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8101bd0:	4b23      	ldr	r3, [pc, #140]	; (8101c60 <MX_GPIO_Init+0x100>)
 8101bd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101bd6:	4a22      	ldr	r2, [pc, #136]	; (8101c60 <MX_GPIO_Init+0x100>)
 8101bd8:	f043 0308 	orr.w	r3, r3, #8
 8101bdc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101be0:	4b1f      	ldr	r3, [pc, #124]	; (8101c60 <MX_GPIO_Init+0x100>)
 8101be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101be6:	f003 0308 	and.w	r3, r3, #8
 8101bea:	607b      	str	r3, [r7, #4]
 8101bec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8101bee:	4b1c      	ldr	r3, [pc, #112]	; (8101c60 <MX_GPIO_Init+0x100>)
 8101bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101bf4:	4a1a      	ldr	r2, [pc, #104]	; (8101c60 <MX_GPIO_Init+0x100>)
 8101bf6:	f043 0310 	orr.w	r3, r3, #16
 8101bfa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101bfe:	4b18      	ldr	r3, [pc, #96]	; (8101c60 <MX_GPIO_Init+0x100>)
 8101c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c04:	f003 0310 	and.w	r3, r3, #16
 8101c08:	603b      	str	r3, [r7, #0]
 8101c0a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8101c0c:	2200      	movs	r2, #0
 8101c0e:	2101      	movs	r1, #1
 8101c10:	4814      	ldr	r0, [pc, #80]	; (8101c64 <MX_GPIO_Init+0x104>)
 8101c12:	f001 fc55 	bl	81034c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8101c16:	2200      	movs	r2, #0
 8101c18:	2102      	movs	r1, #2
 8101c1a:	4813      	ldr	r0, [pc, #76]	; (8101c68 <MX_GPIO_Init+0x108>)
 8101c1c:	f001 fc50 	bl	81034c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8101c20:	2301      	movs	r3, #1
 8101c22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101c24:	2301      	movs	r3, #1
 8101c26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101c28:	2300      	movs	r3, #0
 8101c2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101c2c:	2300      	movs	r3, #0
 8101c2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101c30:	f107 0314 	add.w	r3, r7, #20
 8101c34:	4619      	mov	r1, r3
 8101c36:	480b      	ldr	r0, [pc, #44]	; (8101c64 <MX_GPIO_Init+0x104>)
 8101c38:	f001 fa92 	bl	8103160 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8101c3c:	2302      	movs	r3, #2
 8101c3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101c40:	2301      	movs	r3, #1
 8101c42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101c44:	2300      	movs	r3, #0
 8101c46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101c48:	2300      	movs	r3, #0
 8101c4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8101c4c:	f107 0314 	add.w	r3, r7, #20
 8101c50:	4619      	mov	r1, r3
 8101c52:	4805      	ldr	r0, [pc, #20]	; (8101c68 <MX_GPIO_Init+0x108>)
 8101c54:	f001 fa84 	bl	8103160 <HAL_GPIO_Init>

}
 8101c58:	bf00      	nop
 8101c5a:	3728      	adds	r7, #40	; 0x28
 8101c5c:	46bd      	mov	sp, r7
 8101c5e:	bd80      	pop	{r7, pc}
 8101c60:	58024400 	.word	0x58024400
 8101c64:	58020400 	.word	0x58020400
 8101c68:	58021000 	.word	0x58021000

08101c6c <HAL_TIM_PeriodElapsedCallback>:
//questa callback trasmette
//ad ogni intervallo di tempo impostato dal timer htim2
//la stringa pc_buffer contenente tutti i dati di interesse del drone
//dall'esp alla seriale della scheda stm
//questo esempio serve per verificare che l'ESP funzioni correttamente
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8101c6c:	b580      	push	{r7, lr}
 8101c6e:	b082      	sub	sp, #8
 8101c70:	af00      	add	r7, sp, #0
 8101c72:	6078      	str	r0, [r7, #4]
	// This callback is automatically called by the HAL on the UEV event
	parseCommand(rxBuff); //parse del comando inviato da MATLAB all'ESP
 8101c74:	483e      	ldr	r0, [pc, #248]	; (8101d70 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8101c76:	f7ff fba5 	bl	81013c4 <parseCommand>
	clearCommand(rxBuff); //pulizia del buffer di ricezione
 8101c7a:	483d      	ldr	r0, [pc, #244]	; (8101d70 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8101c7c:	f7ff fb88 	bl	8101390 <clearCommand>
	if (htim == &htim2) {
 8101c80:	687b      	ldr	r3, [r7, #4]
 8101c82:	4a3c      	ldr	r2, [pc, #240]	; (8101d74 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8101c84:	4293      	cmp	r3, r2
 8101c86:	d16e      	bne.n	8101d66 <HAL_TIM_PeriodElapsedCallback+0xfa>
		if (TX_Flag_DSEND) {
 8101c88:	4b3b      	ldr	r3, [pc, #236]	; (8101d78 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8101c8a:	681b      	ldr	r3, [r3, #0]
 8101c8c:	2b00      	cmp	r3, #0
 8101c8e:	d06a      	beq.n	8101d66 <HAL_TIM_PeriodElapsedCallback+0xfa>
			getFixedArray(generateRandomNumber(0, 360), 3, 1, &pc_buffer);
 8101c90:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8101c94:	2000      	movs	r0, #0
 8101c96:	f7ff fcb3 	bl	8101600 <generateRandomNumber>
 8101c9a:	eeb0 7a40 	vmov.f32	s14, s0
 8101c9e:	eef0 7a60 	vmov.f32	s15, s1
 8101ca2:	4a36      	ldr	r2, [pc, #216]	; (8101d7c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8101ca4:	2101      	movs	r1, #1
 8101ca6:	2003      	movs	r0, #3
 8101ca8:	eeb0 0a47 	vmov.f32	s0, s14
 8101cac:	eef0 0a67 	vmov.f32	s1, s15
 8101cb0:	f7ff fbea 	bl	8101488 <getFixedArray>
			getFixedArray(generateRandomNumber(0, 360), 3, 1, &pc_buffer[4]);
 8101cb4:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8101cb8:	2000      	movs	r0, #0
 8101cba:	f7ff fca1 	bl	8101600 <generateRandomNumber>
 8101cbe:	eeb0 7a40 	vmov.f32	s14, s0
 8101cc2:	eef0 7a60 	vmov.f32	s15, s1
 8101cc6:	4a2e      	ldr	r2, [pc, #184]	; (8101d80 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8101cc8:	2101      	movs	r1, #1
 8101cca:	2003      	movs	r0, #3
 8101ccc:	eeb0 0a47 	vmov.f32	s0, s14
 8101cd0:	eef0 0a67 	vmov.f32	s1, s15
 8101cd4:	f7ff fbd8 	bl	8101488 <getFixedArray>
			getFixedArray(generateRandomNumber(0, 360), 3, 1, &pc_buffer[8]);
 8101cd8:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8101cdc:	2000      	movs	r0, #0
 8101cde:	f7ff fc8f 	bl	8101600 <generateRandomNumber>
 8101ce2:	eeb0 7a40 	vmov.f32	s14, s0
 8101ce6:	eef0 7a60 	vmov.f32	s15, s1
 8101cea:	4a26      	ldr	r2, [pc, #152]	; (8101d84 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8101cec:	2101      	movs	r1, #1
 8101cee:	2003      	movs	r0, #3
 8101cf0:	eeb0 0a47 	vmov.f32	s0, s14
 8101cf4:	eef0 0a67 	vmov.f32	s1, s15
 8101cf8:	f7ff fbc6 	bl	8101488 <getFixedArray>
			getFixedArray(duty_1, 1, 1, &pc_buffer[12]);
 8101cfc:	4b22      	ldr	r3, [pc, #136]	; (8101d88 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8101cfe:	ed93 7b00 	vldr	d7, [r3]
 8101d02:	4a22      	ldr	r2, [pc, #136]	; (8101d8c <HAL_TIM_PeriodElapsedCallback+0x120>)
 8101d04:	2101      	movs	r1, #1
 8101d06:	2001      	movs	r0, #1
 8101d08:	eeb0 0a47 	vmov.f32	s0, s14
 8101d0c:	eef0 0a67 	vmov.f32	s1, s15
 8101d10:	f7ff fbba 	bl	8101488 <getFixedArray>
			getFixedArray(duty_2, 1, 1, &pc_buffer[14]);
 8101d14:	4b1e      	ldr	r3, [pc, #120]	; (8101d90 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8101d16:	ed93 7b00 	vldr	d7, [r3]
 8101d1a:	4a1e      	ldr	r2, [pc, #120]	; (8101d94 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8101d1c:	2101      	movs	r1, #1
 8101d1e:	2001      	movs	r0, #1
 8101d20:	eeb0 0a47 	vmov.f32	s0, s14
 8101d24:	eef0 0a67 	vmov.f32	s1, s15
 8101d28:	f7ff fbae 	bl	8101488 <getFixedArray>
			getFixedArray(duty_3, 1, 1, &pc_buffer[16]);
 8101d2c:	4b1a      	ldr	r3, [pc, #104]	; (8101d98 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8101d2e:	ed93 7b00 	vldr	d7, [r3]
 8101d32:	4a1a      	ldr	r2, [pc, #104]	; (8101d9c <HAL_TIM_PeriodElapsedCallback+0x130>)
 8101d34:	2101      	movs	r1, #1
 8101d36:	2001      	movs	r0, #1
 8101d38:	eeb0 0a47 	vmov.f32	s0, s14
 8101d3c:	eef0 0a67 	vmov.f32	s1, s15
 8101d40:	f7ff fba2 	bl	8101488 <getFixedArray>
			getFixedArray(duty_4, 1, 1, &pc_buffer[18]);
 8101d44:	4b16      	ldr	r3, [pc, #88]	; (8101da0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8101d46:	ed93 7b00 	vldr	d7, [r3]
 8101d4a:	4a16      	ldr	r2, [pc, #88]	; (8101da4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8101d4c:	2101      	movs	r1, #1
 8101d4e:	2001      	movs	r0, #1
 8101d50:	eeb0 0a47 	vmov.f32	s0, s14
 8101d54:	eef0 0a67 	vmov.f32	s1, s15
 8101d58:	f7ff fb96 	bl	8101488 <getFixedArray>
			HAL_UART_Transmit_IT(&huart2, pc_buffer, sizeof(pc_buffer));
 8101d5c:	2214      	movs	r2, #20
 8101d5e:	4907      	ldr	r1, [pc, #28]	; (8101d7c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8101d60:	4811      	ldr	r0, [pc, #68]	; (8101da8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8101d62:	f004 fc63 	bl	810662c <HAL_UART_Transmit_IT>
		}
	}
}
 8101d66:	bf00      	nop
 8101d68:	3708      	adds	r7, #8
 8101d6a:	46bd      	mov	sp, r7
 8101d6c:	bd80      	pop	{r7, pc}
 8101d6e:	bf00      	nop
 8101d70:	10000334 	.word	0x10000334
 8101d74:	1000020c 	.word	0x1000020c
 8101d78:	10000208 	.word	0x10000208
 8101d7c:	10000338 	.word	0x10000338
 8101d80:	1000033c 	.word	0x1000033c
 8101d84:	10000340 	.word	0x10000340
 8101d88:	10000350 	.word	0x10000350
 8101d8c:	10000344 	.word	0x10000344
 8101d90:	10000358 	.word	0x10000358
 8101d94:	10000346 	.word	0x10000346
 8101d98:	10000360 	.word	0x10000360
 8101d9c:	10000348 	.word	0x10000348
 8101da0:	10000368 	.word	0x10000368
 8101da4:	1000034a 	.word	0x1000034a
 8101da8:	100002a4 	.word	0x100002a4

08101dac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101dac:	b480      	push	{r7}
 8101dae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8101db0:	b672      	cpsid	i
}
 8101db2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8101db4:	e7fe      	b.n	8101db4 <Error_Handler+0x8>
	...

08101db8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101db8:	b480      	push	{r7}
 8101dba:	b083      	sub	sp, #12
 8101dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101dbe:	4b0a      	ldr	r3, [pc, #40]	; (8101de8 <HAL_MspInit+0x30>)
 8101dc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101dc4:	4a08      	ldr	r2, [pc, #32]	; (8101de8 <HAL_MspInit+0x30>)
 8101dc6:	f043 0302 	orr.w	r3, r3, #2
 8101dca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101dce:	4b06      	ldr	r3, [pc, #24]	; (8101de8 <HAL_MspInit+0x30>)
 8101dd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101dd4:	f003 0302 	and.w	r3, r3, #2
 8101dd8:	607b      	str	r3, [r7, #4]
 8101dda:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101ddc:	bf00      	nop
 8101dde:	370c      	adds	r7, #12
 8101de0:	46bd      	mov	sp, r7
 8101de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101de6:	4770      	bx	lr
 8101de8:	58024400 	.word	0x58024400

08101dec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8101dec:	b580      	push	{r7, lr}
 8101dee:	b084      	sub	sp, #16
 8101df0:	af00      	add	r7, sp, #0
 8101df2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8101df4:	687b      	ldr	r3, [r7, #4]
 8101df6:	681b      	ldr	r3, [r3, #0]
 8101df8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101dfc:	d117      	bne.n	8101e2e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8101dfe:	4b18      	ldr	r3, [pc, #96]	; (8101e60 <HAL_TIM_Base_MspInit+0x74>)
 8101e00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101e04:	4a16      	ldr	r2, [pc, #88]	; (8101e60 <HAL_TIM_Base_MspInit+0x74>)
 8101e06:	f043 0301 	orr.w	r3, r3, #1
 8101e0a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101e0e:	4b14      	ldr	r3, [pc, #80]	; (8101e60 <HAL_TIM_Base_MspInit+0x74>)
 8101e10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101e14:	f003 0301 	and.w	r3, r3, #1
 8101e18:	60fb      	str	r3, [r7, #12]
 8101e1a:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8101e1c:	2200      	movs	r2, #0
 8101e1e:	2100      	movs	r1, #0
 8101e20:	201c      	movs	r0, #28
 8101e22:	f000 fbf0 	bl	8102606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8101e26:	201c      	movs	r0, #28
 8101e28:	f000 fc07 	bl	810263a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8101e2c:	e013      	b.n	8101e56 <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM3)
 8101e2e:	687b      	ldr	r3, [r7, #4]
 8101e30:	681b      	ldr	r3, [r3, #0]
 8101e32:	4a0c      	ldr	r2, [pc, #48]	; (8101e64 <HAL_TIM_Base_MspInit+0x78>)
 8101e34:	4293      	cmp	r3, r2
 8101e36:	d10e      	bne.n	8101e56 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8101e38:	4b09      	ldr	r3, [pc, #36]	; (8101e60 <HAL_TIM_Base_MspInit+0x74>)
 8101e3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101e3e:	4a08      	ldr	r2, [pc, #32]	; (8101e60 <HAL_TIM_Base_MspInit+0x74>)
 8101e40:	f043 0302 	orr.w	r3, r3, #2
 8101e44:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101e48:	4b05      	ldr	r3, [pc, #20]	; (8101e60 <HAL_TIM_Base_MspInit+0x74>)
 8101e4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101e4e:	f003 0302 	and.w	r3, r3, #2
 8101e52:	60bb      	str	r3, [r7, #8]
 8101e54:	68bb      	ldr	r3, [r7, #8]
}
 8101e56:	bf00      	nop
 8101e58:	3710      	adds	r7, #16
 8101e5a:	46bd      	mov	sp, r7
 8101e5c:	bd80      	pop	{r7, pc}
 8101e5e:	bf00      	nop
 8101e60:	58024400 	.word	0x58024400
 8101e64:	40000400 	.word	0x40000400

08101e68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8101e68:	b580      	push	{r7, lr}
 8101e6a:	b08a      	sub	sp, #40	; 0x28
 8101e6c:	af00      	add	r7, sp, #0
 8101e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101e70:	f107 0314 	add.w	r3, r7, #20
 8101e74:	2200      	movs	r2, #0
 8101e76:	601a      	str	r2, [r3, #0]
 8101e78:	605a      	str	r2, [r3, #4]
 8101e7a:	609a      	str	r2, [r3, #8]
 8101e7c:	60da      	str	r2, [r3, #12]
 8101e7e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8101e80:	687b      	ldr	r3, [r7, #4]
 8101e82:	681b      	ldr	r3, [r3, #0]
 8101e84:	4a32      	ldr	r2, [pc, #200]	; (8101f50 <HAL_TIM_MspPostInit+0xe8>)
 8101e86:	4293      	cmp	r3, r2
 8101e88:	d15d      	bne.n	8101f46 <HAL_TIM_MspPostInit+0xde>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101e8a:	4b32      	ldr	r3, [pc, #200]	; (8101f54 <HAL_TIM_MspPostInit+0xec>)
 8101e8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101e90:	4a30      	ldr	r2, [pc, #192]	; (8101f54 <HAL_TIM_MspPostInit+0xec>)
 8101e92:	f043 0301 	orr.w	r3, r3, #1
 8101e96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101e9a:	4b2e      	ldr	r3, [pc, #184]	; (8101f54 <HAL_TIM_MspPostInit+0xec>)
 8101e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101ea0:	f003 0301 	and.w	r3, r3, #1
 8101ea4:	613b      	str	r3, [r7, #16]
 8101ea6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101ea8:	4b2a      	ldr	r3, [pc, #168]	; (8101f54 <HAL_TIM_MspPostInit+0xec>)
 8101eaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101eae:	4a29      	ldr	r2, [pc, #164]	; (8101f54 <HAL_TIM_MspPostInit+0xec>)
 8101eb0:	f043 0302 	orr.w	r3, r3, #2
 8101eb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101eb8:	4b26      	ldr	r3, [pc, #152]	; (8101f54 <HAL_TIM_MspPostInit+0xec>)
 8101eba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101ebe:	f003 0302 	and.w	r3, r3, #2
 8101ec2:	60fb      	str	r3, [r7, #12]
 8101ec4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8101ec6:	4b23      	ldr	r3, [pc, #140]	; (8101f54 <HAL_TIM_MspPostInit+0xec>)
 8101ec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101ecc:	4a21      	ldr	r2, [pc, #132]	; (8101f54 <HAL_TIM_MspPostInit+0xec>)
 8101ece:	f043 0304 	orr.w	r3, r3, #4
 8101ed2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101ed6:	4b1f      	ldr	r3, [pc, #124]	; (8101f54 <HAL_TIM_MspPostInit+0xec>)
 8101ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101edc:	f003 0304 	and.w	r3, r3, #4
 8101ee0:	60bb      	str	r3, [r7, #8]
 8101ee2:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TIM3_CH1
    PB1     ------> TIM3_CH4
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8101ee4:	2340      	movs	r3, #64	; 0x40
 8101ee6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101ee8:	2302      	movs	r3, #2
 8101eea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101eec:	2300      	movs	r3, #0
 8101eee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101ef0:	2300      	movs	r3, #0
 8101ef2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8101ef4:	2302      	movs	r3, #2
 8101ef6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101ef8:	f107 0314 	add.w	r3, r7, #20
 8101efc:	4619      	mov	r1, r3
 8101efe:	4816      	ldr	r0, [pc, #88]	; (8101f58 <HAL_TIM_MspPostInit+0xf0>)
 8101f00:	f001 f92e 	bl	8103160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8101f04:	2302      	movs	r3, #2
 8101f06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101f08:	2302      	movs	r3, #2
 8101f0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101f0c:	2300      	movs	r3, #0
 8101f0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101f10:	2300      	movs	r3, #0
 8101f12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8101f14:	2302      	movs	r3, #2
 8101f16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101f18:	f107 0314 	add.w	r3, r7, #20
 8101f1c:	4619      	mov	r1, r3
 8101f1e:	480f      	ldr	r0, [pc, #60]	; (8101f5c <HAL_TIM_MspPostInit+0xf4>)
 8101f20:	f001 f91e 	bl	8103160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8101f24:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8101f28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101f2a:	2302      	movs	r3, #2
 8101f2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101f2e:	2300      	movs	r3, #0
 8101f30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101f32:	2300      	movs	r3, #0
 8101f34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8101f36:	2302      	movs	r3, #2
 8101f38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8101f3a:	f107 0314 	add.w	r3, r7, #20
 8101f3e:	4619      	mov	r1, r3
 8101f40:	4807      	ldr	r0, [pc, #28]	; (8101f60 <HAL_TIM_MspPostInit+0xf8>)
 8101f42:	f001 f90d 	bl	8103160 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8101f46:	bf00      	nop
 8101f48:	3728      	adds	r7, #40	; 0x28
 8101f4a:	46bd      	mov	sp, r7
 8101f4c:	bd80      	pop	{r7, pc}
 8101f4e:	bf00      	nop
 8101f50:	40000400 	.word	0x40000400
 8101f54:	58024400 	.word	0x58024400
 8101f58:	58020000 	.word	0x58020000
 8101f5c:	58020400 	.word	0x58020400
 8101f60:	58020800 	.word	0x58020800

08101f64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8101f64:	b580      	push	{r7, lr}
 8101f66:	b0ba      	sub	sp, #232	; 0xe8
 8101f68:	af00      	add	r7, sp, #0
 8101f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101f6c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8101f70:	2200      	movs	r2, #0
 8101f72:	601a      	str	r2, [r3, #0]
 8101f74:	605a      	str	r2, [r3, #4]
 8101f76:	609a      	str	r2, [r3, #8]
 8101f78:	60da      	str	r2, [r3, #12]
 8101f7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101f7c:	f107 0318 	add.w	r3, r7, #24
 8101f80:	22bc      	movs	r2, #188	; 0xbc
 8101f82:	2100      	movs	r1, #0
 8101f84:	4618      	mov	r0, r3
 8101f86:	f008 fe6d 	bl	810ac64 <memset>
  if(huart->Instance==USART2)
 8101f8a:	687b      	ldr	r3, [r7, #4]
 8101f8c:	681b      	ldr	r3, [r3, #0]
 8101f8e:	4a3a      	ldr	r2, [pc, #232]	; (8102078 <HAL_UART_MspInit+0x114>)
 8101f90:	4293      	cmp	r3, r2
 8101f92:	d16d      	bne.n	8102070 <HAL_UART_MspInit+0x10c>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8101f94:	2302      	movs	r3, #2
 8101f96:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8101f98:	2300      	movs	r3, #0
 8101f9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101f9e:	f107 0318 	add.w	r3, r7, #24
 8101fa2:	4618      	mov	r0, r3
 8101fa4:	f001 fd18 	bl	81039d8 <HAL_RCCEx_PeriphCLKConfig>
 8101fa8:	4603      	mov	r3, r0
 8101faa:	2b00      	cmp	r3, #0
 8101fac:	d001      	beq.n	8101fb2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8101fae:	f7ff fefd 	bl	8101dac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8101fb2:	4b32      	ldr	r3, [pc, #200]	; (810207c <HAL_UART_MspInit+0x118>)
 8101fb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101fb8:	4a30      	ldr	r2, [pc, #192]	; (810207c <HAL_UART_MspInit+0x118>)
 8101fba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101fbe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101fc2:	4b2e      	ldr	r3, [pc, #184]	; (810207c <HAL_UART_MspInit+0x118>)
 8101fc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8101fcc:	617b      	str	r3, [r7, #20]
 8101fce:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101fd0:	4b2a      	ldr	r3, [pc, #168]	; (810207c <HAL_UART_MspInit+0x118>)
 8101fd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101fd6:	4a29      	ldr	r2, [pc, #164]	; (810207c <HAL_UART_MspInit+0x118>)
 8101fd8:	f043 0301 	orr.w	r3, r3, #1
 8101fdc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101fe0:	4b26      	ldr	r3, [pc, #152]	; (810207c <HAL_UART_MspInit+0x118>)
 8101fe2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101fe6:	f003 0301 	and.w	r3, r3, #1
 8101fea:	613b      	str	r3, [r7, #16]
 8101fec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101fee:	4b23      	ldr	r3, [pc, #140]	; (810207c <HAL_UART_MspInit+0x118>)
 8101ff0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101ff4:	4a21      	ldr	r2, [pc, #132]	; (810207c <HAL_UART_MspInit+0x118>)
 8101ff6:	f043 0308 	orr.w	r3, r3, #8
 8101ffa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101ffe:	4b1f      	ldr	r3, [pc, #124]	; (810207c <HAL_UART_MspInit+0x118>)
 8102000:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102004:	f003 0308 	and.w	r3, r3, #8
 8102008:	60fb      	str	r3, [r7, #12]
 810200a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 810200c:	2308      	movs	r3, #8
 810200e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102012:	2302      	movs	r3, #2
 8102014:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102018:	2300      	movs	r3, #0
 810201a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810201e:	2300      	movs	r3, #0
 8102020:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8102024:	2307      	movs	r3, #7
 8102026:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 810202a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 810202e:	4619      	mov	r1, r3
 8102030:	4813      	ldr	r0, [pc, #76]	; (8102080 <HAL_UART_MspInit+0x11c>)
 8102032:	f001 f895 	bl	8103160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8102036:	2320      	movs	r3, #32
 8102038:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810203c:	2302      	movs	r3, #2
 810203e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102042:	2300      	movs	r3, #0
 8102044:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102048:	2300      	movs	r3, #0
 810204a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 810204e:	2307      	movs	r3, #7
 8102050:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8102054:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8102058:	4619      	mov	r1, r3
 810205a:	480a      	ldr	r0, [pc, #40]	; (8102084 <HAL_UART_MspInit+0x120>)
 810205c:	f001 f880 	bl	8103160 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8102060:	2200      	movs	r2, #0
 8102062:	2100      	movs	r1, #0
 8102064:	2026      	movs	r0, #38	; 0x26
 8102066:	f000 face 	bl	8102606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 810206a:	2026      	movs	r0, #38	; 0x26
 810206c:	f000 fae5 	bl	810263a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8102070:	bf00      	nop
 8102072:	37e8      	adds	r7, #232	; 0xe8
 8102074:	46bd      	mov	sp, r7
 8102076:	bd80      	pop	{r7, pc}
 8102078:	40004400 	.word	0x40004400
 810207c:	58024400 	.word	0x58024400
 8102080:	58020000 	.word	0x58020000
 8102084:	58020c00 	.word	0x58020c00

08102088 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8102088:	b480      	push	{r7}
 810208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 810208c:	e7fe      	b.n	810208c <NMI_Handler+0x4>

0810208e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 810208e:	b480      	push	{r7}
 8102090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8102092:	e7fe      	b.n	8102092 <HardFault_Handler+0x4>

08102094 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8102094:	b480      	push	{r7}
 8102096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8102098:	e7fe      	b.n	8102098 <MemManage_Handler+0x4>

0810209a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810209a:	b480      	push	{r7}
 810209c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 810209e:	e7fe      	b.n	810209e <BusFault_Handler+0x4>

081020a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81020a0:	b480      	push	{r7}
 81020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81020a4:	e7fe      	b.n	81020a4 <UsageFault_Handler+0x4>

081020a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 81020a6:	b480      	push	{r7}
 81020a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 81020aa:	bf00      	nop
 81020ac:	46bd      	mov	sp, r7
 81020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020b2:	4770      	bx	lr

081020b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81020b4:	b480      	push	{r7}
 81020b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81020b8:	bf00      	nop
 81020ba:	46bd      	mov	sp, r7
 81020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020c0:	4770      	bx	lr

081020c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81020c2:	b480      	push	{r7}
 81020c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81020c6:	bf00      	nop
 81020c8:	46bd      	mov	sp, r7
 81020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020ce:	4770      	bx	lr

081020d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81020d0:	b580      	push	{r7, lr}
 81020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81020d4:	f000 f99c 	bl	8102410 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81020d8:	bf00      	nop
 81020da:	bd80      	pop	{r7, pc}

081020dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 81020dc:	b580      	push	{r7, lr}
 81020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 81020e0:	4802      	ldr	r0, [pc, #8]	; (81020ec <TIM2_IRQHandler+0x10>)
 81020e2:	f003 fa21 	bl	8105528 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 81020e6:	bf00      	nop
 81020e8:	bd80      	pop	{r7, pc}
 81020ea:	bf00      	nop
 81020ec:	1000020c 	.word	0x1000020c

081020f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 81020f0:	b580      	push	{r7, lr}
 81020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 81020f4:	4802      	ldr	r0, [pc, #8]	; (8102100 <USART2_IRQHandler+0x10>)
 81020f6:	f004 fb97 	bl	8106828 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 81020fa:	bf00      	nop
 81020fc:	bd80      	pop	{r7, pc}
 81020fe:	bf00      	nop
 8102100:	100002a4 	.word	0x100002a4

08102104 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8102104:	b480      	push	{r7}
 8102106:	af00      	add	r7, sp, #0
	return 1;
 8102108:	2301      	movs	r3, #1
}
 810210a:	4618      	mov	r0, r3
 810210c:	46bd      	mov	sp, r7
 810210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102112:	4770      	bx	lr

08102114 <_kill>:

int _kill(int pid, int sig)
{
 8102114:	b580      	push	{r7, lr}
 8102116:	b082      	sub	sp, #8
 8102118:	af00      	add	r7, sp, #0
 810211a:	6078      	str	r0, [r7, #4]
 810211c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 810211e:	f008 fdd9 	bl	810acd4 <__errno>
 8102122:	4603      	mov	r3, r0
 8102124:	2216      	movs	r2, #22
 8102126:	601a      	str	r2, [r3, #0]
	return -1;
 8102128:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 810212c:	4618      	mov	r0, r3
 810212e:	3708      	adds	r7, #8
 8102130:	46bd      	mov	sp, r7
 8102132:	bd80      	pop	{r7, pc}

08102134 <_exit>:

void _exit (int status)
{
 8102134:	b580      	push	{r7, lr}
 8102136:	b082      	sub	sp, #8
 8102138:	af00      	add	r7, sp, #0
 810213a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 810213c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8102140:	6878      	ldr	r0, [r7, #4]
 8102142:	f7ff ffe7 	bl	8102114 <_kill>
	while (1) {}		/* Make sure we hang here */
 8102146:	e7fe      	b.n	8102146 <_exit+0x12>

08102148 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8102148:	b580      	push	{r7, lr}
 810214a:	b086      	sub	sp, #24
 810214c:	af00      	add	r7, sp, #0
 810214e:	60f8      	str	r0, [r7, #12]
 8102150:	60b9      	str	r1, [r7, #8]
 8102152:	607a      	str	r2, [r7, #4]
	int DataIdx;

	len=1;
 8102154:	2301      	movs	r3, #1
 8102156:	607b      	str	r3, [r7, #4]

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8102158:	2300      	movs	r3, #0
 810215a:	617b      	str	r3, [r7, #20]
 810215c:	e00a      	b.n	8102174 <_read+0x2c>
	{
		*ptr++ = __io_getchar();
 810215e:	f3af 8000 	nop.w
 8102162:	4601      	mov	r1, r0
 8102164:	68bb      	ldr	r3, [r7, #8]
 8102166:	1c5a      	adds	r2, r3, #1
 8102168:	60ba      	str	r2, [r7, #8]
 810216a:	b2ca      	uxtb	r2, r1
 810216c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 810216e:	697b      	ldr	r3, [r7, #20]
 8102170:	3301      	adds	r3, #1
 8102172:	617b      	str	r3, [r7, #20]
 8102174:	697a      	ldr	r2, [r7, #20]
 8102176:	687b      	ldr	r3, [r7, #4]
 8102178:	429a      	cmp	r2, r3
 810217a:	dbf0      	blt.n	810215e <_read+0x16>
	}

return len;
 810217c:	687b      	ldr	r3, [r7, #4]
}
 810217e:	4618      	mov	r0, r3
 8102180:	3718      	adds	r7, #24
 8102182:	46bd      	mov	sp, r7
 8102184:	bd80      	pop	{r7, pc}

08102186 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8102186:	b580      	push	{r7, lr}
 8102188:	b086      	sub	sp, #24
 810218a:	af00      	add	r7, sp, #0
 810218c:	60f8      	str	r0, [r7, #12]
 810218e:	60b9      	str	r1, [r7, #8]
 8102190:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8102192:	2300      	movs	r3, #0
 8102194:	617b      	str	r3, [r7, #20]
 8102196:	e009      	b.n	81021ac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8102198:	68bb      	ldr	r3, [r7, #8]
 810219a:	1c5a      	adds	r2, r3, #1
 810219c:	60ba      	str	r2, [r7, #8]
 810219e:	781b      	ldrb	r3, [r3, #0]
 81021a0:	4618      	mov	r0, r3
 81021a2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 81021a6:	697b      	ldr	r3, [r7, #20]
 81021a8:	3301      	adds	r3, #1
 81021aa:	617b      	str	r3, [r7, #20]
 81021ac:	697a      	ldr	r2, [r7, #20]
 81021ae:	687b      	ldr	r3, [r7, #4]
 81021b0:	429a      	cmp	r2, r3
 81021b2:	dbf1      	blt.n	8102198 <_write+0x12>
	}
	return len;
 81021b4:	687b      	ldr	r3, [r7, #4]
}
 81021b6:	4618      	mov	r0, r3
 81021b8:	3718      	adds	r7, #24
 81021ba:	46bd      	mov	sp, r7
 81021bc:	bd80      	pop	{r7, pc}

081021be <_close>:

int _close(int file)
{
 81021be:	b480      	push	{r7}
 81021c0:	b083      	sub	sp, #12
 81021c2:	af00      	add	r7, sp, #0
 81021c4:	6078      	str	r0, [r7, #4]
	return -1;
 81021c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 81021ca:	4618      	mov	r0, r3
 81021cc:	370c      	adds	r7, #12
 81021ce:	46bd      	mov	sp, r7
 81021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021d4:	4770      	bx	lr

081021d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 81021d6:	b480      	push	{r7}
 81021d8:	b083      	sub	sp, #12
 81021da:	af00      	add	r7, sp, #0
 81021dc:	6078      	str	r0, [r7, #4]
 81021de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 81021e0:	683b      	ldr	r3, [r7, #0]
 81021e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 81021e6:	605a      	str	r2, [r3, #4]
	return 0;
 81021e8:	2300      	movs	r3, #0
}
 81021ea:	4618      	mov	r0, r3
 81021ec:	370c      	adds	r7, #12
 81021ee:	46bd      	mov	sp, r7
 81021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021f4:	4770      	bx	lr

081021f6 <_isatty>:

int _isatty(int file)
{
 81021f6:	b480      	push	{r7}
 81021f8:	b083      	sub	sp, #12
 81021fa:	af00      	add	r7, sp, #0
 81021fc:	6078      	str	r0, [r7, #4]
	return 1;
 81021fe:	2301      	movs	r3, #1
}
 8102200:	4618      	mov	r0, r3
 8102202:	370c      	adds	r7, #12
 8102204:	46bd      	mov	sp, r7
 8102206:	f85d 7b04 	ldr.w	r7, [sp], #4
 810220a:	4770      	bx	lr

0810220c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 810220c:	b480      	push	{r7}
 810220e:	b085      	sub	sp, #20
 8102210:	af00      	add	r7, sp, #0
 8102212:	60f8      	str	r0, [r7, #12]
 8102214:	60b9      	str	r1, [r7, #8]
 8102216:	607a      	str	r2, [r7, #4]
	return 0;
 8102218:	2300      	movs	r3, #0
}
 810221a:	4618      	mov	r0, r3
 810221c:	3714      	adds	r7, #20
 810221e:	46bd      	mov	sp, r7
 8102220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102224:	4770      	bx	lr
	...

08102228 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8102228:	b580      	push	{r7, lr}
 810222a:	b086      	sub	sp, #24
 810222c:	af00      	add	r7, sp, #0
 810222e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8102230:	4a14      	ldr	r2, [pc, #80]	; (8102284 <_sbrk+0x5c>)
 8102232:	4b15      	ldr	r3, [pc, #84]	; (8102288 <_sbrk+0x60>)
 8102234:	1ad3      	subs	r3, r2, r3
 8102236:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8102238:	697b      	ldr	r3, [r7, #20]
 810223a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 810223c:	4b13      	ldr	r3, [pc, #76]	; (810228c <_sbrk+0x64>)
 810223e:	681b      	ldr	r3, [r3, #0]
 8102240:	2b00      	cmp	r3, #0
 8102242:	d102      	bne.n	810224a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8102244:	4b11      	ldr	r3, [pc, #68]	; (810228c <_sbrk+0x64>)
 8102246:	4a12      	ldr	r2, [pc, #72]	; (8102290 <_sbrk+0x68>)
 8102248:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 810224a:	4b10      	ldr	r3, [pc, #64]	; (810228c <_sbrk+0x64>)
 810224c:	681a      	ldr	r2, [r3, #0]
 810224e:	687b      	ldr	r3, [r7, #4]
 8102250:	4413      	add	r3, r2
 8102252:	693a      	ldr	r2, [r7, #16]
 8102254:	429a      	cmp	r2, r3
 8102256:	d207      	bcs.n	8102268 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8102258:	f008 fd3c 	bl	810acd4 <__errno>
 810225c:	4603      	mov	r3, r0
 810225e:	220c      	movs	r2, #12
 8102260:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8102262:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8102266:	e009      	b.n	810227c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8102268:	4b08      	ldr	r3, [pc, #32]	; (810228c <_sbrk+0x64>)
 810226a:	681b      	ldr	r3, [r3, #0]
 810226c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 810226e:	4b07      	ldr	r3, [pc, #28]	; (810228c <_sbrk+0x64>)
 8102270:	681a      	ldr	r2, [r3, #0]
 8102272:	687b      	ldr	r3, [r7, #4]
 8102274:	4413      	add	r3, r2
 8102276:	4a05      	ldr	r2, [pc, #20]	; (810228c <_sbrk+0x64>)
 8102278:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 810227a:	68fb      	ldr	r3, [r7, #12]
}
 810227c:	4618      	mov	r0, r3
 810227e:	3718      	adds	r7, #24
 8102280:	46bd      	mov	sp, r7
 8102282:	bd80      	pop	{r7, pc}
 8102284:	10048000 	.word	0x10048000
 8102288:	00000400 	.word	0x00000400
 810228c:	10000370 	.word	0x10000370
 8102290:	100004c8 	.word	0x100004c8

08102294 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8102294:	f8df d034 	ldr.w	sp, [pc, #52]	; 81022cc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8102298:	f7fe ff32 	bl	8101100 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 810229c:	480c      	ldr	r0, [pc, #48]	; (81022d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 810229e:	490d      	ldr	r1, [pc, #52]	; (81022d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81022a0:	4a0d      	ldr	r2, [pc, #52]	; (81022d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81022a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81022a4:	e002      	b.n	81022ac <LoopCopyDataInit>

081022a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81022a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81022a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81022aa:	3304      	adds	r3, #4

081022ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81022ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81022ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81022b0:	d3f9      	bcc.n	81022a6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81022b2:	4a0a      	ldr	r2, [pc, #40]	; (81022dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81022b4:	4c0a      	ldr	r4, [pc, #40]	; (81022e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 81022b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 81022b8:	e001      	b.n	81022be <LoopFillZerobss>

081022ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81022ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81022bc:	3204      	adds	r2, #4

081022be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81022be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81022c0:	d3fb      	bcc.n	81022ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81022c2:	f008 fd0d 	bl	810ace0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81022c6:	f7ff f9d3 	bl	8101670 <main>
  bx  lr
 81022ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81022cc:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81022d0:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81022d4:	100001e8 	.word	0x100001e8
  ldr r2, =_sidata
 81022d8:	0810ec50 	.word	0x0810ec50
  ldr r2, =_sbss
 81022dc:	100001e8 	.word	0x100001e8
  ldr r4, =_ebss
 81022e0:	100004c4 	.word	0x100004c4

081022e4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81022e4:	e7fe      	b.n	81022e4 <ADC3_IRQHandler>
	...

081022e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81022e8:	b580      	push	{r7, lr}
 81022ea:	b082      	sub	sp, #8
 81022ec:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81022ee:	4b28      	ldr	r3, [pc, #160]	; (8102390 <HAL_Init+0xa8>)
 81022f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81022f4:	4a26      	ldr	r2, [pc, #152]	; (8102390 <HAL_Init+0xa8>)
 81022f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 81022fa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81022fe:	4b24      	ldr	r3, [pc, #144]	; (8102390 <HAL_Init+0xa8>)
 8102300:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102304:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8102308:	603b      	str	r3, [r7, #0]
 810230a:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 810230c:	4b21      	ldr	r3, [pc, #132]	; (8102394 <HAL_Init+0xac>)
 810230e:	681b      	ldr	r3, [r3, #0]
 8102310:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8102314:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8102318:	4a1e      	ldr	r2, [pc, #120]	; (8102394 <HAL_Init+0xac>)
 810231a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 810231e:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8102320:	4b1c      	ldr	r3, [pc, #112]	; (8102394 <HAL_Init+0xac>)
 8102322:	681b      	ldr	r3, [r3, #0]
 8102324:	4a1b      	ldr	r2, [pc, #108]	; (8102394 <HAL_Init+0xac>)
 8102326:	f043 0301 	orr.w	r3, r3, #1
 810232a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 810232c:	2003      	movs	r0, #3
 810232e:	f000 f95f 	bl	81025f0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8102332:	f001 f979 	bl	8103628 <HAL_RCC_GetSysClockFreq>
 8102336:	4602      	mov	r2, r0
 8102338:	4b15      	ldr	r3, [pc, #84]	; (8102390 <HAL_Init+0xa8>)
 810233a:	699b      	ldr	r3, [r3, #24]
 810233c:	0a1b      	lsrs	r3, r3, #8
 810233e:	f003 030f 	and.w	r3, r3, #15
 8102342:	4915      	ldr	r1, [pc, #84]	; (8102398 <HAL_Init+0xb0>)
 8102344:	5ccb      	ldrb	r3, [r1, r3]
 8102346:	f003 031f 	and.w	r3, r3, #31
 810234a:	fa22 f303 	lsr.w	r3, r2, r3
 810234e:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102350:	4b0f      	ldr	r3, [pc, #60]	; (8102390 <HAL_Init+0xa8>)
 8102352:	699b      	ldr	r3, [r3, #24]
 8102354:	f003 030f 	and.w	r3, r3, #15
 8102358:	4a0f      	ldr	r2, [pc, #60]	; (8102398 <HAL_Init+0xb0>)
 810235a:	5cd3      	ldrb	r3, [r2, r3]
 810235c:	f003 031f 	and.w	r3, r3, #31
 8102360:	687a      	ldr	r2, [r7, #4]
 8102362:	fa22 f303 	lsr.w	r3, r2, r3
 8102366:	4a0d      	ldr	r2, [pc, #52]	; (810239c <HAL_Init+0xb4>)
 8102368:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810236a:	4b0c      	ldr	r3, [pc, #48]	; (810239c <HAL_Init+0xb4>)
 810236c:	681b      	ldr	r3, [r3, #0]
 810236e:	4a0c      	ldr	r2, [pc, #48]	; (81023a0 <HAL_Init+0xb8>)
 8102370:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8102372:	2000      	movs	r0, #0
 8102374:	f000 f816 	bl	81023a4 <HAL_InitTick>
 8102378:	4603      	mov	r3, r0
 810237a:	2b00      	cmp	r3, #0
 810237c:	d001      	beq.n	8102382 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 810237e:	2301      	movs	r3, #1
 8102380:	e002      	b.n	8102388 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8102382:	f7ff fd19 	bl	8101db8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8102386:	2300      	movs	r3, #0
}
 8102388:	4618      	mov	r0, r3
 810238a:	3708      	adds	r7, #8
 810238c:	46bd      	mov	sp, r7
 810238e:	bd80      	pop	{r7, pc}
 8102390:	58024400 	.word	0x58024400
 8102394:	40024400 	.word	0x40024400
 8102398:	0810e6f8 	.word	0x0810e6f8
 810239c:	10000004 	.word	0x10000004
 81023a0:	10000000 	.word	0x10000000

081023a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81023a4:	b580      	push	{r7, lr}
 81023a6:	b082      	sub	sp, #8
 81023a8:	af00      	add	r7, sp, #0
 81023aa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 81023ac:	4b15      	ldr	r3, [pc, #84]	; (8102404 <HAL_InitTick+0x60>)
 81023ae:	781b      	ldrb	r3, [r3, #0]
 81023b0:	2b00      	cmp	r3, #0
 81023b2:	d101      	bne.n	81023b8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 81023b4:	2301      	movs	r3, #1
 81023b6:	e021      	b.n	81023fc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 81023b8:	4b13      	ldr	r3, [pc, #76]	; (8102408 <HAL_InitTick+0x64>)
 81023ba:	681a      	ldr	r2, [r3, #0]
 81023bc:	4b11      	ldr	r3, [pc, #68]	; (8102404 <HAL_InitTick+0x60>)
 81023be:	781b      	ldrb	r3, [r3, #0]
 81023c0:	4619      	mov	r1, r3
 81023c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81023c6:	fbb3 f3f1 	udiv	r3, r3, r1
 81023ca:	fbb2 f3f3 	udiv	r3, r2, r3
 81023ce:	4618      	mov	r0, r3
 81023d0:	f000 f941 	bl	8102656 <HAL_SYSTICK_Config>
 81023d4:	4603      	mov	r3, r0
 81023d6:	2b00      	cmp	r3, #0
 81023d8:	d001      	beq.n	81023de <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 81023da:	2301      	movs	r3, #1
 81023dc:	e00e      	b.n	81023fc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81023de:	687b      	ldr	r3, [r7, #4]
 81023e0:	2b0f      	cmp	r3, #15
 81023e2:	d80a      	bhi.n	81023fa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 81023e4:	2200      	movs	r2, #0
 81023e6:	6879      	ldr	r1, [r7, #4]
 81023e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 81023ec:	f000 f90b 	bl	8102606 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 81023f0:	4a06      	ldr	r2, [pc, #24]	; (810240c <HAL_InitTick+0x68>)
 81023f2:	687b      	ldr	r3, [r7, #4]
 81023f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 81023f6:	2300      	movs	r3, #0
 81023f8:	e000      	b.n	81023fc <HAL_InitTick+0x58>
    return HAL_ERROR;
 81023fa:	2301      	movs	r3, #1
}
 81023fc:	4618      	mov	r0, r3
 81023fe:	3708      	adds	r7, #8
 8102400:	46bd      	mov	sp, r7
 8102402:	bd80      	pop	{r7, pc}
 8102404:	1000000c 	.word	0x1000000c
 8102408:	10000000 	.word	0x10000000
 810240c:	10000008 	.word	0x10000008

08102410 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8102410:	b480      	push	{r7}
 8102412:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8102414:	4b06      	ldr	r3, [pc, #24]	; (8102430 <HAL_IncTick+0x20>)
 8102416:	781b      	ldrb	r3, [r3, #0]
 8102418:	461a      	mov	r2, r3
 810241a:	4b06      	ldr	r3, [pc, #24]	; (8102434 <HAL_IncTick+0x24>)
 810241c:	681b      	ldr	r3, [r3, #0]
 810241e:	4413      	add	r3, r2
 8102420:	4a04      	ldr	r2, [pc, #16]	; (8102434 <HAL_IncTick+0x24>)
 8102422:	6013      	str	r3, [r2, #0]
}
 8102424:	bf00      	nop
 8102426:	46bd      	mov	sp, r7
 8102428:	f85d 7b04 	ldr.w	r7, [sp], #4
 810242c:	4770      	bx	lr
 810242e:	bf00      	nop
 8102430:	1000000c 	.word	0x1000000c
 8102434:	10000374 	.word	0x10000374

08102438 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8102438:	b480      	push	{r7}
 810243a:	af00      	add	r7, sp, #0
  return uwTick;
 810243c:	4b03      	ldr	r3, [pc, #12]	; (810244c <HAL_GetTick+0x14>)
 810243e:	681b      	ldr	r3, [r3, #0]
}
 8102440:	4618      	mov	r0, r3
 8102442:	46bd      	mov	sp, r7
 8102444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102448:	4770      	bx	lr
 810244a:	bf00      	nop
 810244c:	10000374 	.word	0x10000374

08102450 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102450:	b480      	push	{r7}
 8102452:	b085      	sub	sp, #20
 8102454:	af00      	add	r7, sp, #0
 8102456:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8102458:	687b      	ldr	r3, [r7, #4]
 810245a:	f003 0307 	and.w	r3, r3, #7
 810245e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8102460:	4b0c      	ldr	r3, [pc, #48]	; (8102494 <__NVIC_SetPriorityGrouping+0x44>)
 8102462:	68db      	ldr	r3, [r3, #12]
 8102464:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8102466:	68ba      	ldr	r2, [r7, #8]
 8102468:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 810246c:	4013      	ands	r3, r2
 810246e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8102470:	68fb      	ldr	r3, [r7, #12]
 8102472:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8102474:	68bb      	ldr	r3, [r7, #8]
 8102476:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8102478:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 810247c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102480:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8102482:	4a04      	ldr	r2, [pc, #16]	; (8102494 <__NVIC_SetPriorityGrouping+0x44>)
 8102484:	68bb      	ldr	r3, [r7, #8]
 8102486:	60d3      	str	r3, [r2, #12]
}
 8102488:	bf00      	nop
 810248a:	3714      	adds	r7, #20
 810248c:	46bd      	mov	sp, r7
 810248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102492:	4770      	bx	lr
 8102494:	e000ed00 	.word	0xe000ed00

08102498 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8102498:	b480      	push	{r7}
 810249a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 810249c:	4b04      	ldr	r3, [pc, #16]	; (81024b0 <__NVIC_GetPriorityGrouping+0x18>)
 810249e:	68db      	ldr	r3, [r3, #12]
 81024a0:	0a1b      	lsrs	r3, r3, #8
 81024a2:	f003 0307 	and.w	r3, r3, #7
}
 81024a6:	4618      	mov	r0, r3
 81024a8:	46bd      	mov	sp, r7
 81024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81024ae:	4770      	bx	lr
 81024b0:	e000ed00 	.word	0xe000ed00

081024b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81024b4:	b480      	push	{r7}
 81024b6:	b083      	sub	sp, #12
 81024b8:	af00      	add	r7, sp, #0
 81024ba:	4603      	mov	r3, r0
 81024bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81024be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81024c2:	2b00      	cmp	r3, #0
 81024c4:	db0b      	blt.n	81024de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81024c6:	88fb      	ldrh	r3, [r7, #6]
 81024c8:	f003 021f 	and.w	r2, r3, #31
 81024cc:	4907      	ldr	r1, [pc, #28]	; (81024ec <__NVIC_EnableIRQ+0x38>)
 81024ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81024d2:	095b      	lsrs	r3, r3, #5
 81024d4:	2001      	movs	r0, #1
 81024d6:	fa00 f202 	lsl.w	r2, r0, r2
 81024da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 81024de:	bf00      	nop
 81024e0:	370c      	adds	r7, #12
 81024e2:	46bd      	mov	sp, r7
 81024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81024e8:	4770      	bx	lr
 81024ea:	bf00      	nop
 81024ec:	e000e100 	.word	0xe000e100

081024f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81024f0:	b480      	push	{r7}
 81024f2:	b083      	sub	sp, #12
 81024f4:	af00      	add	r7, sp, #0
 81024f6:	4603      	mov	r3, r0
 81024f8:	6039      	str	r1, [r7, #0]
 81024fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81024fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102500:	2b00      	cmp	r3, #0
 8102502:	db0a      	blt.n	810251a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102504:	683b      	ldr	r3, [r7, #0]
 8102506:	b2da      	uxtb	r2, r3
 8102508:	490c      	ldr	r1, [pc, #48]	; (810253c <__NVIC_SetPriority+0x4c>)
 810250a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810250e:	0112      	lsls	r2, r2, #4
 8102510:	b2d2      	uxtb	r2, r2
 8102512:	440b      	add	r3, r1
 8102514:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8102518:	e00a      	b.n	8102530 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810251a:	683b      	ldr	r3, [r7, #0]
 810251c:	b2da      	uxtb	r2, r3
 810251e:	4908      	ldr	r1, [pc, #32]	; (8102540 <__NVIC_SetPriority+0x50>)
 8102520:	88fb      	ldrh	r3, [r7, #6]
 8102522:	f003 030f 	and.w	r3, r3, #15
 8102526:	3b04      	subs	r3, #4
 8102528:	0112      	lsls	r2, r2, #4
 810252a:	b2d2      	uxtb	r2, r2
 810252c:	440b      	add	r3, r1
 810252e:	761a      	strb	r2, [r3, #24]
}
 8102530:	bf00      	nop
 8102532:	370c      	adds	r7, #12
 8102534:	46bd      	mov	sp, r7
 8102536:	f85d 7b04 	ldr.w	r7, [sp], #4
 810253a:	4770      	bx	lr
 810253c:	e000e100 	.word	0xe000e100
 8102540:	e000ed00 	.word	0xe000ed00

08102544 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102544:	b480      	push	{r7}
 8102546:	b089      	sub	sp, #36	; 0x24
 8102548:	af00      	add	r7, sp, #0
 810254a:	60f8      	str	r0, [r7, #12]
 810254c:	60b9      	str	r1, [r7, #8]
 810254e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8102550:	68fb      	ldr	r3, [r7, #12]
 8102552:	f003 0307 	and.w	r3, r3, #7
 8102556:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8102558:	69fb      	ldr	r3, [r7, #28]
 810255a:	f1c3 0307 	rsb	r3, r3, #7
 810255e:	2b04      	cmp	r3, #4
 8102560:	bf28      	it	cs
 8102562:	2304      	movcs	r3, #4
 8102564:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8102566:	69fb      	ldr	r3, [r7, #28]
 8102568:	3304      	adds	r3, #4
 810256a:	2b06      	cmp	r3, #6
 810256c:	d902      	bls.n	8102574 <NVIC_EncodePriority+0x30>
 810256e:	69fb      	ldr	r3, [r7, #28]
 8102570:	3b03      	subs	r3, #3
 8102572:	e000      	b.n	8102576 <NVIC_EncodePriority+0x32>
 8102574:	2300      	movs	r3, #0
 8102576:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102578:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810257c:	69bb      	ldr	r3, [r7, #24]
 810257e:	fa02 f303 	lsl.w	r3, r2, r3
 8102582:	43da      	mvns	r2, r3
 8102584:	68bb      	ldr	r3, [r7, #8]
 8102586:	401a      	ands	r2, r3
 8102588:	697b      	ldr	r3, [r7, #20]
 810258a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 810258c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8102590:	697b      	ldr	r3, [r7, #20]
 8102592:	fa01 f303 	lsl.w	r3, r1, r3
 8102596:	43d9      	mvns	r1, r3
 8102598:	687b      	ldr	r3, [r7, #4]
 810259a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 810259c:	4313      	orrs	r3, r2
         );
}
 810259e:	4618      	mov	r0, r3
 81025a0:	3724      	adds	r7, #36	; 0x24
 81025a2:	46bd      	mov	sp, r7
 81025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81025a8:	4770      	bx	lr
	...

081025ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 81025ac:	b580      	push	{r7, lr}
 81025ae:	b082      	sub	sp, #8
 81025b0:	af00      	add	r7, sp, #0
 81025b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 81025b4:	687b      	ldr	r3, [r7, #4]
 81025b6:	3b01      	subs	r3, #1
 81025b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81025bc:	d301      	bcc.n	81025c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 81025be:	2301      	movs	r3, #1
 81025c0:	e00f      	b.n	81025e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 81025c2:	4a0a      	ldr	r2, [pc, #40]	; (81025ec <SysTick_Config+0x40>)
 81025c4:	687b      	ldr	r3, [r7, #4]
 81025c6:	3b01      	subs	r3, #1
 81025c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 81025ca:	210f      	movs	r1, #15
 81025cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 81025d0:	f7ff ff8e 	bl	81024f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 81025d4:	4b05      	ldr	r3, [pc, #20]	; (81025ec <SysTick_Config+0x40>)
 81025d6:	2200      	movs	r2, #0
 81025d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 81025da:	4b04      	ldr	r3, [pc, #16]	; (81025ec <SysTick_Config+0x40>)
 81025dc:	2207      	movs	r2, #7
 81025de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 81025e0:	2300      	movs	r3, #0
}
 81025e2:	4618      	mov	r0, r3
 81025e4:	3708      	adds	r7, #8
 81025e6:	46bd      	mov	sp, r7
 81025e8:	bd80      	pop	{r7, pc}
 81025ea:	bf00      	nop
 81025ec:	e000e010 	.word	0xe000e010

081025f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81025f0:	b580      	push	{r7, lr}
 81025f2:	b082      	sub	sp, #8
 81025f4:	af00      	add	r7, sp, #0
 81025f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81025f8:	6878      	ldr	r0, [r7, #4]
 81025fa:	f7ff ff29 	bl	8102450 <__NVIC_SetPriorityGrouping>
}
 81025fe:	bf00      	nop
 8102600:	3708      	adds	r7, #8
 8102602:	46bd      	mov	sp, r7
 8102604:	bd80      	pop	{r7, pc}

08102606 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102606:	b580      	push	{r7, lr}
 8102608:	b086      	sub	sp, #24
 810260a:	af00      	add	r7, sp, #0
 810260c:	4603      	mov	r3, r0
 810260e:	60b9      	str	r1, [r7, #8]
 8102610:	607a      	str	r2, [r7, #4]
 8102612:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8102614:	f7ff ff40 	bl	8102498 <__NVIC_GetPriorityGrouping>
 8102618:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 810261a:	687a      	ldr	r2, [r7, #4]
 810261c:	68b9      	ldr	r1, [r7, #8]
 810261e:	6978      	ldr	r0, [r7, #20]
 8102620:	f7ff ff90 	bl	8102544 <NVIC_EncodePriority>
 8102624:	4602      	mov	r2, r0
 8102626:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 810262a:	4611      	mov	r1, r2
 810262c:	4618      	mov	r0, r3
 810262e:	f7ff ff5f 	bl	81024f0 <__NVIC_SetPriority>
}
 8102632:	bf00      	nop
 8102634:	3718      	adds	r7, #24
 8102636:	46bd      	mov	sp, r7
 8102638:	bd80      	pop	{r7, pc}

0810263a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810263a:	b580      	push	{r7, lr}
 810263c:	b082      	sub	sp, #8
 810263e:	af00      	add	r7, sp, #0
 8102640:	4603      	mov	r3, r0
 8102642:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8102644:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102648:	4618      	mov	r0, r3
 810264a:	f7ff ff33 	bl	81024b4 <__NVIC_EnableIRQ>
}
 810264e:	bf00      	nop
 8102650:	3708      	adds	r7, #8
 8102652:	46bd      	mov	sp, r7
 8102654:	bd80      	pop	{r7, pc}

08102656 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8102656:	b580      	push	{r7, lr}
 8102658:	b082      	sub	sp, #8
 810265a:	af00      	add	r7, sp, #0
 810265c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 810265e:	6878      	ldr	r0, [r7, #4]
 8102660:	f7ff ffa4 	bl	81025ac <SysTick_Config>
 8102664:	4603      	mov	r3, r0
}
 8102666:	4618      	mov	r0, r3
 8102668:	3708      	adds	r7, #8
 810266a:	46bd      	mov	sp, r7
 810266c:	bd80      	pop	{r7, pc}
	...

08102670 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8102670:	b480      	push	{r7}
 8102672:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8102674:	4b07      	ldr	r3, [pc, #28]	; (8102694 <HAL_GetCurrentCPUID+0x24>)
 8102676:	681b      	ldr	r3, [r3, #0]
 8102678:	091b      	lsrs	r3, r3, #4
 810267a:	f003 030f 	and.w	r3, r3, #15
 810267e:	2b07      	cmp	r3, #7
 8102680:	d101      	bne.n	8102686 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8102682:	2303      	movs	r3, #3
 8102684:	e000      	b.n	8102688 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8102686:	2301      	movs	r3, #1
  }
}
 8102688:	4618      	mov	r0, r3
 810268a:	46bd      	mov	sp, r7
 810268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102690:	4770      	bx	lr
 8102692:	bf00      	nop
 8102694:	e000ed00 	.word	0xe000ed00

08102698 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8102698:	b580      	push	{r7, lr}
 810269a:	b086      	sub	sp, #24
 810269c:	af00      	add	r7, sp, #0
 810269e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 81026a0:	f7ff feca 	bl	8102438 <HAL_GetTick>
 81026a4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 81026a6:	687b      	ldr	r3, [r7, #4]
 81026a8:	2b00      	cmp	r3, #0
 81026aa:	d101      	bne.n	81026b0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 81026ac:	2301      	movs	r3, #1
 81026ae:	e2dc      	b.n	8102c6a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 81026b0:	687b      	ldr	r3, [r7, #4]
 81026b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 81026b6:	b2db      	uxtb	r3, r3
 81026b8:	2b02      	cmp	r3, #2
 81026ba:	d008      	beq.n	81026ce <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 81026bc:	687b      	ldr	r3, [r7, #4]
 81026be:	2280      	movs	r2, #128	; 0x80
 81026c0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 81026c2:	687b      	ldr	r3, [r7, #4]
 81026c4:	2200      	movs	r2, #0
 81026c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 81026ca:	2301      	movs	r3, #1
 81026cc:	e2cd      	b.n	8102c6a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81026ce:	687b      	ldr	r3, [r7, #4]
 81026d0:	681b      	ldr	r3, [r3, #0]
 81026d2:	4a76      	ldr	r2, [pc, #472]	; (81028ac <HAL_DMA_Abort+0x214>)
 81026d4:	4293      	cmp	r3, r2
 81026d6:	d04a      	beq.n	810276e <HAL_DMA_Abort+0xd6>
 81026d8:	687b      	ldr	r3, [r7, #4]
 81026da:	681b      	ldr	r3, [r3, #0]
 81026dc:	4a74      	ldr	r2, [pc, #464]	; (81028b0 <HAL_DMA_Abort+0x218>)
 81026de:	4293      	cmp	r3, r2
 81026e0:	d045      	beq.n	810276e <HAL_DMA_Abort+0xd6>
 81026e2:	687b      	ldr	r3, [r7, #4]
 81026e4:	681b      	ldr	r3, [r3, #0]
 81026e6:	4a73      	ldr	r2, [pc, #460]	; (81028b4 <HAL_DMA_Abort+0x21c>)
 81026e8:	4293      	cmp	r3, r2
 81026ea:	d040      	beq.n	810276e <HAL_DMA_Abort+0xd6>
 81026ec:	687b      	ldr	r3, [r7, #4]
 81026ee:	681b      	ldr	r3, [r3, #0]
 81026f0:	4a71      	ldr	r2, [pc, #452]	; (81028b8 <HAL_DMA_Abort+0x220>)
 81026f2:	4293      	cmp	r3, r2
 81026f4:	d03b      	beq.n	810276e <HAL_DMA_Abort+0xd6>
 81026f6:	687b      	ldr	r3, [r7, #4]
 81026f8:	681b      	ldr	r3, [r3, #0]
 81026fa:	4a70      	ldr	r2, [pc, #448]	; (81028bc <HAL_DMA_Abort+0x224>)
 81026fc:	4293      	cmp	r3, r2
 81026fe:	d036      	beq.n	810276e <HAL_DMA_Abort+0xd6>
 8102700:	687b      	ldr	r3, [r7, #4]
 8102702:	681b      	ldr	r3, [r3, #0]
 8102704:	4a6e      	ldr	r2, [pc, #440]	; (81028c0 <HAL_DMA_Abort+0x228>)
 8102706:	4293      	cmp	r3, r2
 8102708:	d031      	beq.n	810276e <HAL_DMA_Abort+0xd6>
 810270a:	687b      	ldr	r3, [r7, #4]
 810270c:	681b      	ldr	r3, [r3, #0]
 810270e:	4a6d      	ldr	r2, [pc, #436]	; (81028c4 <HAL_DMA_Abort+0x22c>)
 8102710:	4293      	cmp	r3, r2
 8102712:	d02c      	beq.n	810276e <HAL_DMA_Abort+0xd6>
 8102714:	687b      	ldr	r3, [r7, #4]
 8102716:	681b      	ldr	r3, [r3, #0]
 8102718:	4a6b      	ldr	r2, [pc, #428]	; (81028c8 <HAL_DMA_Abort+0x230>)
 810271a:	4293      	cmp	r3, r2
 810271c:	d027      	beq.n	810276e <HAL_DMA_Abort+0xd6>
 810271e:	687b      	ldr	r3, [r7, #4]
 8102720:	681b      	ldr	r3, [r3, #0]
 8102722:	4a6a      	ldr	r2, [pc, #424]	; (81028cc <HAL_DMA_Abort+0x234>)
 8102724:	4293      	cmp	r3, r2
 8102726:	d022      	beq.n	810276e <HAL_DMA_Abort+0xd6>
 8102728:	687b      	ldr	r3, [r7, #4]
 810272a:	681b      	ldr	r3, [r3, #0]
 810272c:	4a68      	ldr	r2, [pc, #416]	; (81028d0 <HAL_DMA_Abort+0x238>)
 810272e:	4293      	cmp	r3, r2
 8102730:	d01d      	beq.n	810276e <HAL_DMA_Abort+0xd6>
 8102732:	687b      	ldr	r3, [r7, #4]
 8102734:	681b      	ldr	r3, [r3, #0]
 8102736:	4a67      	ldr	r2, [pc, #412]	; (81028d4 <HAL_DMA_Abort+0x23c>)
 8102738:	4293      	cmp	r3, r2
 810273a:	d018      	beq.n	810276e <HAL_DMA_Abort+0xd6>
 810273c:	687b      	ldr	r3, [r7, #4]
 810273e:	681b      	ldr	r3, [r3, #0]
 8102740:	4a65      	ldr	r2, [pc, #404]	; (81028d8 <HAL_DMA_Abort+0x240>)
 8102742:	4293      	cmp	r3, r2
 8102744:	d013      	beq.n	810276e <HAL_DMA_Abort+0xd6>
 8102746:	687b      	ldr	r3, [r7, #4]
 8102748:	681b      	ldr	r3, [r3, #0]
 810274a:	4a64      	ldr	r2, [pc, #400]	; (81028dc <HAL_DMA_Abort+0x244>)
 810274c:	4293      	cmp	r3, r2
 810274e:	d00e      	beq.n	810276e <HAL_DMA_Abort+0xd6>
 8102750:	687b      	ldr	r3, [r7, #4]
 8102752:	681b      	ldr	r3, [r3, #0]
 8102754:	4a62      	ldr	r2, [pc, #392]	; (81028e0 <HAL_DMA_Abort+0x248>)
 8102756:	4293      	cmp	r3, r2
 8102758:	d009      	beq.n	810276e <HAL_DMA_Abort+0xd6>
 810275a:	687b      	ldr	r3, [r7, #4]
 810275c:	681b      	ldr	r3, [r3, #0]
 810275e:	4a61      	ldr	r2, [pc, #388]	; (81028e4 <HAL_DMA_Abort+0x24c>)
 8102760:	4293      	cmp	r3, r2
 8102762:	d004      	beq.n	810276e <HAL_DMA_Abort+0xd6>
 8102764:	687b      	ldr	r3, [r7, #4]
 8102766:	681b      	ldr	r3, [r3, #0]
 8102768:	4a5f      	ldr	r2, [pc, #380]	; (81028e8 <HAL_DMA_Abort+0x250>)
 810276a:	4293      	cmp	r3, r2
 810276c:	d101      	bne.n	8102772 <HAL_DMA_Abort+0xda>
 810276e:	2301      	movs	r3, #1
 8102770:	e000      	b.n	8102774 <HAL_DMA_Abort+0xdc>
 8102772:	2300      	movs	r3, #0
 8102774:	2b00      	cmp	r3, #0
 8102776:	d013      	beq.n	81027a0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8102778:	687b      	ldr	r3, [r7, #4]
 810277a:	681b      	ldr	r3, [r3, #0]
 810277c:	681a      	ldr	r2, [r3, #0]
 810277e:	687b      	ldr	r3, [r7, #4]
 8102780:	681b      	ldr	r3, [r3, #0]
 8102782:	f022 021e 	bic.w	r2, r2, #30
 8102786:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8102788:	687b      	ldr	r3, [r7, #4]
 810278a:	681b      	ldr	r3, [r3, #0]
 810278c:	695a      	ldr	r2, [r3, #20]
 810278e:	687b      	ldr	r3, [r7, #4]
 8102790:	681b      	ldr	r3, [r3, #0]
 8102792:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8102796:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8102798:	687b      	ldr	r3, [r7, #4]
 810279a:	681b      	ldr	r3, [r3, #0]
 810279c:	617b      	str	r3, [r7, #20]
 810279e:	e00a      	b.n	81027b6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 81027a0:	687b      	ldr	r3, [r7, #4]
 81027a2:	681b      	ldr	r3, [r3, #0]
 81027a4:	681a      	ldr	r2, [r3, #0]
 81027a6:	687b      	ldr	r3, [r7, #4]
 81027a8:	681b      	ldr	r3, [r3, #0]
 81027aa:	f022 020e 	bic.w	r2, r2, #14
 81027ae:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 81027b0:	687b      	ldr	r3, [r7, #4]
 81027b2:	681b      	ldr	r3, [r3, #0]
 81027b4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81027b6:	687b      	ldr	r3, [r7, #4]
 81027b8:	681b      	ldr	r3, [r3, #0]
 81027ba:	4a3c      	ldr	r2, [pc, #240]	; (81028ac <HAL_DMA_Abort+0x214>)
 81027bc:	4293      	cmp	r3, r2
 81027be:	d072      	beq.n	81028a6 <HAL_DMA_Abort+0x20e>
 81027c0:	687b      	ldr	r3, [r7, #4]
 81027c2:	681b      	ldr	r3, [r3, #0]
 81027c4:	4a3a      	ldr	r2, [pc, #232]	; (81028b0 <HAL_DMA_Abort+0x218>)
 81027c6:	4293      	cmp	r3, r2
 81027c8:	d06d      	beq.n	81028a6 <HAL_DMA_Abort+0x20e>
 81027ca:	687b      	ldr	r3, [r7, #4]
 81027cc:	681b      	ldr	r3, [r3, #0]
 81027ce:	4a39      	ldr	r2, [pc, #228]	; (81028b4 <HAL_DMA_Abort+0x21c>)
 81027d0:	4293      	cmp	r3, r2
 81027d2:	d068      	beq.n	81028a6 <HAL_DMA_Abort+0x20e>
 81027d4:	687b      	ldr	r3, [r7, #4]
 81027d6:	681b      	ldr	r3, [r3, #0]
 81027d8:	4a37      	ldr	r2, [pc, #220]	; (81028b8 <HAL_DMA_Abort+0x220>)
 81027da:	4293      	cmp	r3, r2
 81027dc:	d063      	beq.n	81028a6 <HAL_DMA_Abort+0x20e>
 81027de:	687b      	ldr	r3, [r7, #4]
 81027e0:	681b      	ldr	r3, [r3, #0]
 81027e2:	4a36      	ldr	r2, [pc, #216]	; (81028bc <HAL_DMA_Abort+0x224>)
 81027e4:	4293      	cmp	r3, r2
 81027e6:	d05e      	beq.n	81028a6 <HAL_DMA_Abort+0x20e>
 81027e8:	687b      	ldr	r3, [r7, #4]
 81027ea:	681b      	ldr	r3, [r3, #0]
 81027ec:	4a34      	ldr	r2, [pc, #208]	; (81028c0 <HAL_DMA_Abort+0x228>)
 81027ee:	4293      	cmp	r3, r2
 81027f0:	d059      	beq.n	81028a6 <HAL_DMA_Abort+0x20e>
 81027f2:	687b      	ldr	r3, [r7, #4]
 81027f4:	681b      	ldr	r3, [r3, #0]
 81027f6:	4a33      	ldr	r2, [pc, #204]	; (81028c4 <HAL_DMA_Abort+0x22c>)
 81027f8:	4293      	cmp	r3, r2
 81027fa:	d054      	beq.n	81028a6 <HAL_DMA_Abort+0x20e>
 81027fc:	687b      	ldr	r3, [r7, #4]
 81027fe:	681b      	ldr	r3, [r3, #0]
 8102800:	4a31      	ldr	r2, [pc, #196]	; (81028c8 <HAL_DMA_Abort+0x230>)
 8102802:	4293      	cmp	r3, r2
 8102804:	d04f      	beq.n	81028a6 <HAL_DMA_Abort+0x20e>
 8102806:	687b      	ldr	r3, [r7, #4]
 8102808:	681b      	ldr	r3, [r3, #0]
 810280a:	4a30      	ldr	r2, [pc, #192]	; (81028cc <HAL_DMA_Abort+0x234>)
 810280c:	4293      	cmp	r3, r2
 810280e:	d04a      	beq.n	81028a6 <HAL_DMA_Abort+0x20e>
 8102810:	687b      	ldr	r3, [r7, #4]
 8102812:	681b      	ldr	r3, [r3, #0]
 8102814:	4a2e      	ldr	r2, [pc, #184]	; (81028d0 <HAL_DMA_Abort+0x238>)
 8102816:	4293      	cmp	r3, r2
 8102818:	d045      	beq.n	81028a6 <HAL_DMA_Abort+0x20e>
 810281a:	687b      	ldr	r3, [r7, #4]
 810281c:	681b      	ldr	r3, [r3, #0]
 810281e:	4a2d      	ldr	r2, [pc, #180]	; (81028d4 <HAL_DMA_Abort+0x23c>)
 8102820:	4293      	cmp	r3, r2
 8102822:	d040      	beq.n	81028a6 <HAL_DMA_Abort+0x20e>
 8102824:	687b      	ldr	r3, [r7, #4]
 8102826:	681b      	ldr	r3, [r3, #0]
 8102828:	4a2b      	ldr	r2, [pc, #172]	; (81028d8 <HAL_DMA_Abort+0x240>)
 810282a:	4293      	cmp	r3, r2
 810282c:	d03b      	beq.n	81028a6 <HAL_DMA_Abort+0x20e>
 810282e:	687b      	ldr	r3, [r7, #4]
 8102830:	681b      	ldr	r3, [r3, #0]
 8102832:	4a2a      	ldr	r2, [pc, #168]	; (81028dc <HAL_DMA_Abort+0x244>)
 8102834:	4293      	cmp	r3, r2
 8102836:	d036      	beq.n	81028a6 <HAL_DMA_Abort+0x20e>
 8102838:	687b      	ldr	r3, [r7, #4]
 810283a:	681b      	ldr	r3, [r3, #0]
 810283c:	4a28      	ldr	r2, [pc, #160]	; (81028e0 <HAL_DMA_Abort+0x248>)
 810283e:	4293      	cmp	r3, r2
 8102840:	d031      	beq.n	81028a6 <HAL_DMA_Abort+0x20e>
 8102842:	687b      	ldr	r3, [r7, #4]
 8102844:	681b      	ldr	r3, [r3, #0]
 8102846:	4a27      	ldr	r2, [pc, #156]	; (81028e4 <HAL_DMA_Abort+0x24c>)
 8102848:	4293      	cmp	r3, r2
 810284a:	d02c      	beq.n	81028a6 <HAL_DMA_Abort+0x20e>
 810284c:	687b      	ldr	r3, [r7, #4]
 810284e:	681b      	ldr	r3, [r3, #0]
 8102850:	4a25      	ldr	r2, [pc, #148]	; (81028e8 <HAL_DMA_Abort+0x250>)
 8102852:	4293      	cmp	r3, r2
 8102854:	d027      	beq.n	81028a6 <HAL_DMA_Abort+0x20e>
 8102856:	687b      	ldr	r3, [r7, #4]
 8102858:	681b      	ldr	r3, [r3, #0]
 810285a:	4a24      	ldr	r2, [pc, #144]	; (81028ec <HAL_DMA_Abort+0x254>)
 810285c:	4293      	cmp	r3, r2
 810285e:	d022      	beq.n	81028a6 <HAL_DMA_Abort+0x20e>
 8102860:	687b      	ldr	r3, [r7, #4]
 8102862:	681b      	ldr	r3, [r3, #0]
 8102864:	4a22      	ldr	r2, [pc, #136]	; (81028f0 <HAL_DMA_Abort+0x258>)
 8102866:	4293      	cmp	r3, r2
 8102868:	d01d      	beq.n	81028a6 <HAL_DMA_Abort+0x20e>
 810286a:	687b      	ldr	r3, [r7, #4]
 810286c:	681b      	ldr	r3, [r3, #0]
 810286e:	4a21      	ldr	r2, [pc, #132]	; (81028f4 <HAL_DMA_Abort+0x25c>)
 8102870:	4293      	cmp	r3, r2
 8102872:	d018      	beq.n	81028a6 <HAL_DMA_Abort+0x20e>
 8102874:	687b      	ldr	r3, [r7, #4]
 8102876:	681b      	ldr	r3, [r3, #0]
 8102878:	4a1f      	ldr	r2, [pc, #124]	; (81028f8 <HAL_DMA_Abort+0x260>)
 810287a:	4293      	cmp	r3, r2
 810287c:	d013      	beq.n	81028a6 <HAL_DMA_Abort+0x20e>
 810287e:	687b      	ldr	r3, [r7, #4]
 8102880:	681b      	ldr	r3, [r3, #0]
 8102882:	4a1e      	ldr	r2, [pc, #120]	; (81028fc <HAL_DMA_Abort+0x264>)
 8102884:	4293      	cmp	r3, r2
 8102886:	d00e      	beq.n	81028a6 <HAL_DMA_Abort+0x20e>
 8102888:	687b      	ldr	r3, [r7, #4]
 810288a:	681b      	ldr	r3, [r3, #0]
 810288c:	4a1c      	ldr	r2, [pc, #112]	; (8102900 <HAL_DMA_Abort+0x268>)
 810288e:	4293      	cmp	r3, r2
 8102890:	d009      	beq.n	81028a6 <HAL_DMA_Abort+0x20e>
 8102892:	687b      	ldr	r3, [r7, #4]
 8102894:	681b      	ldr	r3, [r3, #0]
 8102896:	4a1b      	ldr	r2, [pc, #108]	; (8102904 <HAL_DMA_Abort+0x26c>)
 8102898:	4293      	cmp	r3, r2
 810289a:	d004      	beq.n	81028a6 <HAL_DMA_Abort+0x20e>
 810289c:	687b      	ldr	r3, [r7, #4]
 810289e:	681b      	ldr	r3, [r3, #0]
 81028a0:	4a19      	ldr	r2, [pc, #100]	; (8102908 <HAL_DMA_Abort+0x270>)
 81028a2:	4293      	cmp	r3, r2
 81028a4:	d132      	bne.n	810290c <HAL_DMA_Abort+0x274>
 81028a6:	2301      	movs	r3, #1
 81028a8:	e031      	b.n	810290e <HAL_DMA_Abort+0x276>
 81028aa:	bf00      	nop
 81028ac:	40020010 	.word	0x40020010
 81028b0:	40020028 	.word	0x40020028
 81028b4:	40020040 	.word	0x40020040
 81028b8:	40020058 	.word	0x40020058
 81028bc:	40020070 	.word	0x40020070
 81028c0:	40020088 	.word	0x40020088
 81028c4:	400200a0 	.word	0x400200a0
 81028c8:	400200b8 	.word	0x400200b8
 81028cc:	40020410 	.word	0x40020410
 81028d0:	40020428 	.word	0x40020428
 81028d4:	40020440 	.word	0x40020440
 81028d8:	40020458 	.word	0x40020458
 81028dc:	40020470 	.word	0x40020470
 81028e0:	40020488 	.word	0x40020488
 81028e4:	400204a0 	.word	0x400204a0
 81028e8:	400204b8 	.word	0x400204b8
 81028ec:	58025408 	.word	0x58025408
 81028f0:	5802541c 	.word	0x5802541c
 81028f4:	58025430 	.word	0x58025430
 81028f8:	58025444 	.word	0x58025444
 81028fc:	58025458 	.word	0x58025458
 8102900:	5802546c 	.word	0x5802546c
 8102904:	58025480 	.word	0x58025480
 8102908:	58025494 	.word	0x58025494
 810290c:	2300      	movs	r3, #0
 810290e:	2b00      	cmp	r3, #0
 8102910:	d007      	beq.n	8102922 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8102912:	687b      	ldr	r3, [r7, #4]
 8102914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102916:	681a      	ldr	r2, [r3, #0]
 8102918:	687b      	ldr	r3, [r7, #4]
 810291a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810291c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8102920:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8102922:	687b      	ldr	r3, [r7, #4]
 8102924:	681b      	ldr	r3, [r3, #0]
 8102926:	4a6d      	ldr	r2, [pc, #436]	; (8102adc <HAL_DMA_Abort+0x444>)
 8102928:	4293      	cmp	r3, r2
 810292a:	d04a      	beq.n	81029c2 <HAL_DMA_Abort+0x32a>
 810292c:	687b      	ldr	r3, [r7, #4]
 810292e:	681b      	ldr	r3, [r3, #0]
 8102930:	4a6b      	ldr	r2, [pc, #428]	; (8102ae0 <HAL_DMA_Abort+0x448>)
 8102932:	4293      	cmp	r3, r2
 8102934:	d045      	beq.n	81029c2 <HAL_DMA_Abort+0x32a>
 8102936:	687b      	ldr	r3, [r7, #4]
 8102938:	681b      	ldr	r3, [r3, #0]
 810293a:	4a6a      	ldr	r2, [pc, #424]	; (8102ae4 <HAL_DMA_Abort+0x44c>)
 810293c:	4293      	cmp	r3, r2
 810293e:	d040      	beq.n	81029c2 <HAL_DMA_Abort+0x32a>
 8102940:	687b      	ldr	r3, [r7, #4]
 8102942:	681b      	ldr	r3, [r3, #0]
 8102944:	4a68      	ldr	r2, [pc, #416]	; (8102ae8 <HAL_DMA_Abort+0x450>)
 8102946:	4293      	cmp	r3, r2
 8102948:	d03b      	beq.n	81029c2 <HAL_DMA_Abort+0x32a>
 810294a:	687b      	ldr	r3, [r7, #4]
 810294c:	681b      	ldr	r3, [r3, #0]
 810294e:	4a67      	ldr	r2, [pc, #412]	; (8102aec <HAL_DMA_Abort+0x454>)
 8102950:	4293      	cmp	r3, r2
 8102952:	d036      	beq.n	81029c2 <HAL_DMA_Abort+0x32a>
 8102954:	687b      	ldr	r3, [r7, #4]
 8102956:	681b      	ldr	r3, [r3, #0]
 8102958:	4a65      	ldr	r2, [pc, #404]	; (8102af0 <HAL_DMA_Abort+0x458>)
 810295a:	4293      	cmp	r3, r2
 810295c:	d031      	beq.n	81029c2 <HAL_DMA_Abort+0x32a>
 810295e:	687b      	ldr	r3, [r7, #4]
 8102960:	681b      	ldr	r3, [r3, #0]
 8102962:	4a64      	ldr	r2, [pc, #400]	; (8102af4 <HAL_DMA_Abort+0x45c>)
 8102964:	4293      	cmp	r3, r2
 8102966:	d02c      	beq.n	81029c2 <HAL_DMA_Abort+0x32a>
 8102968:	687b      	ldr	r3, [r7, #4]
 810296a:	681b      	ldr	r3, [r3, #0]
 810296c:	4a62      	ldr	r2, [pc, #392]	; (8102af8 <HAL_DMA_Abort+0x460>)
 810296e:	4293      	cmp	r3, r2
 8102970:	d027      	beq.n	81029c2 <HAL_DMA_Abort+0x32a>
 8102972:	687b      	ldr	r3, [r7, #4]
 8102974:	681b      	ldr	r3, [r3, #0]
 8102976:	4a61      	ldr	r2, [pc, #388]	; (8102afc <HAL_DMA_Abort+0x464>)
 8102978:	4293      	cmp	r3, r2
 810297a:	d022      	beq.n	81029c2 <HAL_DMA_Abort+0x32a>
 810297c:	687b      	ldr	r3, [r7, #4]
 810297e:	681b      	ldr	r3, [r3, #0]
 8102980:	4a5f      	ldr	r2, [pc, #380]	; (8102b00 <HAL_DMA_Abort+0x468>)
 8102982:	4293      	cmp	r3, r2
 8102984:	d01d      	beq.n	81029c2 <HAL_DMA_Abort+0x32a>
 8102986:	687b      	ldr	r3, [r7, #4]
 8102988:	681b      	ldr	r3, [r3, #0]
 810298a:	4a5e      	ldr	r2, [pc, #376]	; (8102b04 <HAL_DMA_Abort+0x46c>)
 810298c:	4293      	cmp	r3, r2
 810298e:	d018      	beq.n	81029c2 <HAL_DMA_Abort+0x32a>
 8102990:	687b      	ldr	r3, [r7, #4]
 8102992:	681b      	ldr	r3, [r3, #0]
 8102994:	4a5c      	ldr	r2, [pc, #368]	; (8102b08 <HAL_DMA_Abort+0x470>)
 8102996:	4293      	cmp	r3, r2
 8102998:	d013      	beq.n	81029c2 <HAL_DMA_Abort+0x32a>
 810299a:	687b      	ldr	r3, [r7, #4]
 810299c:	681b      	ldr	r3, [r3, #0]
 810299e:	4a5b      	ldr	r2, [pc, #364]	; (8102b0c <HAL_DMA_Abort+0x474>)
 81029a0:	4293      	cmp	r3, r2
 81029a2:	d00e      	beq.n	81029c2 <HAL_DMA_Abort+0x32a>
 81029a4:	687b      	ldr	r3, [r7, #4]
 81029a6:	681b      	ldr	r3, [r3, #0]
 81029a8:	4a59      	ldr	r2, [pc, #356]	; (8102b10 <HAL_DMA_Abort+0x478>)
 81029aa:	4293      	cmp	r3, r2
 81029ac:	d009      	beq.n	81029c2 <HAL_DMA_Abort+0x32a>
 81029ae:	687b      	ldr	r3, [r7, #4]
 81029b0:	681b      	ldr	r3, [r3, #0]
 81029b2:	4a58      	ldr	r2, [pc, #352]	; (8102b14 <HAL_DMA_Abort+0x47c>)
 81029b4:	4293      	cmp	r3, r2
 81029b6:	d004      	beq.n	81029c2 <HAL_DMA_Abort+0x32a>
 81029b8:	687b      	ldr	r3, [r7, #4]
 81029ba:	681b      	ldr	r3, [r3, #0]
 81029bc:	4a56      	ldr	r2, [pc, #344]	; (8102b18 <HAL_DMA_Abort+0x480>)
 81029be:	4293      	cmp	r3, r2
 81029c0:	d108      	bne.n	81029d4 <HAL_DMA_Abort+0x33c>
 81029c2:	687b      	ldr	r3, [r7, #4]
 81029c4:	681b      	ldr	r3, [r3, #0]
 81029c6:	681a      	ldr	r2, [r3, #0]
 81029c8:	687b      	ldr	r3, [r7, #4]
 81029ca:	681b      	ldr	r3, [r3, #0]
 81029cc:	f022 0201 	bic.w	r2, r2, #1
 81029d0:	601a      	str	r2, [r3, #0]
 81029d2:	e007      	b.n	81029e4 <HAL_DMA_Abort+0x34c>
 81029d4:	687b      	ldr	r3, [r7, #4]
 81029d6:	681b      	ldr	r3, [r3, #0]
 81029d8:	681a      	ldr	r2, [r3, #0]
 81029da:	687b      	ldr	r3, [r7, #4]
 81029dc:	681b      	ldr	r3, [r3, #0]
 81029de:	f022 0201 	bic.w	r2, r2, #1
 81029e2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 81029e4:	e013      	b.n	8102a0e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 81029e6:	f7ff fd27 	bl	8102438 <HAL_GetTick>
 81029ea:	4602      	mov	r2, r0
 81029ec:	693b      	ldr	r3, [r7, #16]
 81029ee:	1ad3      	subs	r3, r2, r3
 81029f0:	2b05      	cmp	r3, #5
 81029f2:	d90c      	bls.n	8102a0e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 81029f4:	687b      	ldr	r3, [r7, #4]
 81029f6:	2220      	movs	r2, #32
 81029f8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 81029fa:	687b      	ldr	r3, [r7, #4]
 81029fc:	2203      	movs	r2, #3
 81029fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8102a02:	687b      	ldr	r3, [r7, #4]
 8102a04:	2200      	movs	r2, #0
 8102a06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8102a0a:	2301      	movs	r3, #1
 8102a0c:	e12d      	b.n	8102c6a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8102a0e:	697b      	ldr	r3, [r7, #20]
 8102a10:	681b      	ldr	r3, [r3, #0]
 8102a12:	f003 0301 	and.w	r3, r3, #1
 8102a16:	2b00      	cmp	r3, #0
 8102a18:	d1e5      	bne.n	81029e6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8102a1a:	687b      	ldr	r3, [r7, #4]
 8102a1c:	681b      	ldr	r3, [r3, #0]
 8102a1e:	4a2f      	ldr	r2, [pc, #188]	; (8102adc <HAL_DMA_Abort+0x444>)
 8102a20:	4293      	cmp	r3, r2
 8102a22:	d04a      	beq.n	8102aba <HAL_DMA_Abort+0x422>
 8102a24:	687b      	ldr	r3, [r7, #4]
 8102a26:	681b      	ldr	r3, [r3, #0]
 8102a28:	4a2d      	ldr	r2, [pc, #180]	; (8102ae0 <HAL_DMA_Abort+0x448>)
 8102a2a:	4293      	cmp	r3, r2
 8102a2c:	d045      	beq.n	8102aba <HAL_DMA_Abort+0x422>
 8102a2e:	687b      	ldr	r3, [r7, #4]
 8102a30:	681b      	ldr	r3, [r3, #0]
 8102a32:	4a2c      	ldr	r2, [pc, #176]	; (8102ae4 <HAL_DMA_Abort+0x44c>)
 8102a34:	4293      	cmp	r3, r2
 8102a36:	d040      	beq.n	8102aba <HAL_DMA_Abort+0x422>
 8102a38:	687b      	ldr	r3, [r7, #4]
 8102a3a:	681b      	ldr	r3, [r3, #0]
 8102a3c:	4a2a      	ldr	r2, [pc, #168]	; (8102ae8 <HAL_DMA_Abort+0x450>)
 8102a3e:	4293      	cmp	r3, r2
 8102a40:	d03b      	beq.n	8102aba <HAL_DMA_Abort+0x422>
 8102a42:	687b      	ldr	r3, [r7, #4]
 8102a44:	681b      	ldr	r3, [r3, #0]
 8102a46:	4a29      	ldr	r2, [pc, #164]	; (8102aec <HAL_DMA_Abort+0x454>)
 8102a48:	4293      	cmp	r3, r2
 8102a4a:	d036      	beq.n	8102aba <HAL_DMA_Abort+0x422>
 8102a4c:	687b      	ldr	r3, [r7, #4]
 8102a4e:	681b      	ldr	r3, [r3, #0]
 8102a50:	4a27      	ldr	r2, [pc, #156]	; (8102af0 <HAL_DMA_Abort+0x458>)
 8102a52:	4293      	cmp	r3, r2
 8102a54:	d031      	beq.n	8102aba <HAL_DMA_Abort+0x422>
 8102a56:	687b      	ldr	r3, [r7, #4]
 8102a58:	681b      	ldr	r3, [r3, #0]
 8102a5a:	4a26      	ldr	r2, [pc, #152]	; (8102af4 <HAL_DMA_Abort+0x45c>)
 8102a5c:	4293      	cmp	r3, r2
 8102a5e:	d02c      	beq.n	8102aba <HAL_DMA_Abort+0x422>
 8102a60:	687b      	ldr	r3, [r7, #4]
 8102a62:	681b      	ldr	r3, [r3, #0]
 8102a64:	4a24      	ldr	r2, [pc, #144]	; (8102af8 <HAL_DMA_Abort+0x460>)
 8102a66:	4293      	cmp	r3, r2
 8102a68:	d027      	beq.n	8102aba <HAL_DMA_Abort+0x422>
 8102a6a:	687b      	ldr	r3, [r7, #4]
 8102a6c:	681b      	ldr	r3, [r3, #0]
 8102a6e:	4a23      	ldr	r2, [pc, #140]	; (8102afc <HAL_DMA_Abort+0x464>)
 8102a70:	4293      	cmp	r3, r2
 8102a72:	d022      	beq.n	8102aba <HAL_DMA_Abort+0x422>
 8102a74:	687b      	ldr	r3, [r7, #4]
 8102a76:	681b      	ldr	r3, [r3, #0]
 8102a78:	4a21      	ldr	r2, [pc, #132]	; (8102b00 <HAL_DMA_Abort+0x468>)
 8102a7a:	4293      	cmp	r3, r2
 8102a7c:	d01d      	beq.n	8102aba <HAL_DMA_Abort+0x422>
 8102a7e:	687b      	ldr	r3, [r7, #4]
 8102a80:	681b      	ldr	r3, [r3, #0]
 8102a82:	4a20      	ldr	r2, [pc, #128]	; (8102b04 <HAL_DMA_Abort+0x46c>)
 8102a84:	4293      	cmp	r3, r2
 8102a86:	d018      	beq.n	8102aba <HAL_DMA_Abort+0x422>
 8102a88:	687b      	ldr	r3, [r7, #4]
 8102a8a:	681b      	ldr	r3, [r3, #0]
 8102a8c:	4a1e      	ldr	r2, [pc, #120]	; (8102b08 <HAL_DMA_Abort+0x470>)
 8102a8e:	4293      	cmp	r3, r2
 8102a90:	d013      	beq.n	8102aba <HAL_DMA_Abort+0x422>
 8102a92:	687b      	ldr	r3, [r7, #4]
 8102a94:	681b      	ldr	r3, [r3, #0]
 8102a96:	4a1d      	ldr	r2, [pc, #116]	; (8102b0c <HAL_DMA_Abort+0x474>)
 8102a98:	4293      	cmp	r3, r2
 8102a9a:	d00e      	beq.n	8102aba <HAL_DMA_Abort+0x422>
 8102a9c:	687b      	ldr	r3, [r7, #4]
 8102a9e:	681b      	ldr	r3, [r3, #0]
 8102aa0:	4a1b      	ldr	r2, [pc, #108]	; (8102b10 <HAL_DMA_Abort+0x478>)
 8102aa2:	4293      	cmp	r3, r2
 8102aa4:	d009      	beq.n	8102aba <HAL_DMA_Abort+0x422>
 8102aa6:	687b      	ldr	r3, [r7, #4]
 8102aa8:	681b      	ldr	r3, [r3, #0]
 8102aaa:	4a1a      	ldr	r2, [pc, #104]	; (8102b14 <HAL_DMA_Abort+0x47c>)
 8102aac:	4293      	cmp	r3, r2
 8102aae:	d004      	beq.n	8102aba <HAL_DMA_Abort+0x422>
 8102ab0:	687b      	ldr	r3, [r7, #4]
 8102ab2:	681b      	ldr	r3, [r3, #0]
 8102ab4:	4a18      	ldr	r2, [pc, #96]	; (8102b18 <HAL_DMA_Abort+0x480>)
 8102ab6:	4293      	cmp	r3, r2
 8102ab8:	d101      	bne.n	8102abe <HAL_DMA_Abort+0x426>
 8102aba:	2301      	movs	r3, #1
 8102abc:	e000      	b.n	8102ac0 <HAL_DMA_Abort+0x428>
 8102abe:	2300      	movs	r3, #0
 8102ac0:	2b00      	cmp	r3, #0
 8102ac2:	d02b      	beq.n	8102b1c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8102ac4:	687b      	ldr	r3, [r7, #4]
 8102ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102ac8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8102aca:	687b      	ldr	r3, [r7, #4]
 8102acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102ace:	f003 031f 	and.w	r3, r3, #31
 8102ad2:	223f      	movs	r2, #63	; 0x3f
 8102ad4:	409a      	lsls	r2, r3
 8102ad6:	68bb      	ldr	r3, [r7, #8]
 8102ad8:	609a      	str	r2, [r3, #8]
 8102ada:	e02a      	b.n	8102b32 <HAL_DMA_Abort+0x49a>
 8102adc:	40020010 	.word	0x40020010
 8102ae0:	40020028 	.word	0x40020028
 8102ae4:	40020040 	.word	0x40020040
 8102ae8:	40020058 	.word	0x40020058
 8102aec:	40020070 	.word	0x40020070
 8102af0:	40020088 	.word	0x40020088
 8102af4:	400200a0 	.word	0x400200a0
 8102af8:	400200b8 	.word	0x400200b8
 8102afc:	40020410 	.word	0x40020410
 8102b00:	40020428 	.word	0x40020428
 8102b04:	40020440 	.word	0x40020440
 8102b08:	40020458 	.word	0x40020458
 8102b0c:	40020470 	.word	0x40020470
 8102b10:	40020488 	.word	0x40020488
 8102b14:	400204a0 	.word	0x400204a0
 8102b18:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8102b1c:	687b      	ldr	r3, [r7, #4]
 8102b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102b20:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8102b22:	687b      	ldr	r3, [r7, #4]
 8102b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102b26:	f003 031f 	and.w	r3, r3, #31
 8102b2a:	2201      	movs	r2, #1
 8102b2c:	409a      	lsls	r2, r3
 8102b2e:	68fb      	ldr	r3, [r7, #12]
 8102b30:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8102b32:	687b      	ldr	r3, [r7, #4]
 8102b34:	681b      	ldr	r3, [r3, #0]
 8102b36:	4a4f      	ldr	r2, [pc, #316]	; (8102c74 <HAL_DMA_Abort+0x5dc>)
 8102b38:	4293      	cmp	r3, r2
 8102b3a:	d072      	beq.n	8102c22 <HAL_DMA_Abort+0x58a>
 8102b3c:	687b      	ldr	r3, [r7, #4]
 8102b3e:	681b      	ldr	r3, [r3, #0]
 8102b40:	4a4d      	ldr	r2, [pc, #308]	; (8102c78 <HAL_DMA_Abort+0x5e0>)
 8102b42:	4293      	cmp	r3, r2
 8102b44:	d06d      	beq.n	8102c22 <HAL_DMA_Abort+0x58a>
 8102b46:	687b      	ldr	r3, [r7, #4]
 8102b48:	681b      	ldr	r3, [r3, #0]
 8102b4a:	4a4c      	ldr	r2, [pc, #304]	; (8102c7c <HAL_DMA_Abort+0x5e4>)
 8102b4c:	4293      	cmp	r3, r2
 8102b4e:	d068      	beq.n	8102c22 <HAL_DMA_Abort+0x58a>
 8102b50:	687b      	ldr	r3, [r7, #4]
 8102b52:	681b      	ldr	r3, [r3, #0]
 8102b54:	4a4a      	ldr	r2, [pc, #296]	; (8102c80 <HAL_DMA_Abort+0x5e8>)
 8102b56:	4293      	cmp	r3, r2
 8102b58:	d063      	beq.n	8102c22 <HAL_DMA_Abort+0x58a>
 8102b5a:	687b      	ldr	r3, [r7, #4]
 8102b5c:	681b      	ldr	r3, [r3, #0]
 8102b5e:	4a49      	ldr	r2, [pc, #292]	; (8102c84 <HAL_DMA_Abort+0x5ec>)
 8102b60:	4293      	cmp	r3, r2
 8102b62:	d05e      	beq.n	8102c22 <HAL_DMA_Abort+0x58a>
 8102b64:	687b      	ldr	r3, [r7, #4]
 8102b66:	681b      	ldr	r3, [r3, #0]
 8102b68:	4a47      	ldr	r2, [pc, #284]	; (8102c88 <HAL_DMA_Abort+0x5f0>)
 8102b6a:	4293      	cmp	r3, r2
 8102b6c:	d059      	beq.n	8102c22 <HAL_DMA_Abort+0x58a>
 8102b6e:	687b      	ldr	r3, [r7, #4]
 8102b70:	681b      	ldr	r3, [r3, #0]
 8102b72:	4a46      	ldr	r2, [pc, #280]	; (8102c8c <HAL_DMA_Abort+0x5f4>)
 8102b74:	4293      	cmp	r3, r2
 8102b76:	d054      	beq.n	8102c22 <HAL_DMA_Abort+0x58a>
 8102b78:	687b      	ldr	r3, [r7, #4]
 8102b7a:	681b      	ldr	r3, [r3, #0]
 8102b7c:	4a44      	ldr	r2, [pc, #272]	; (8102c90 <HAL_DMA_Abort+0x5f8>)
 8102b7e:	4293      	cmp	r3, r2
 8102b80:	d04f      	beq.n	8102c22 <HAL_DMA_Abort+0x58a>
 8102b82:	687b      	ldr	r3, [r7, #4]
 8102b84:	681b      	ldr	r3, [r3, #0]
 8102b86:	4a43      	ldr	r2, [pc, #268]	; (8102c94 <HAL_DMA_Abort+0x5fc>)
 8102b88:	4293      	cmp	r3, r2
 8102b8a:	d04a      	beq.n	8102c22 <HAL_DMA_Abort+0x58a>
 8102b8c:	687b      	ldr	r3, [r7, #4]
 8102b8e:	681b      	ldr	r3, [r3, #0]
 8102b90:	4a41      	ldr	r2, [pc, #260]	; (8102c98 <HAL_DMA_Abort+0x600>)
 8102b92:	4293      	cmp	r3, r2
 8102b94:	d045      	beq.n	8102c22 <HAL_DMA_Abort+0x58a>
 8102b96:	687b      	ldr	r3, [r7, #4]
 8102b98:	681b      	ldr	r3, [r3, #0]
 8102b9a:	4a40      	ldr	r2, [pc, #256]	; (8102c9c <HAL_DMA_Abort+0x604>)
 8102b9c:	4293      	cmp	r3, r2
 8102b9e:	d040      	beq.n	8102c22 <HAL_DMA_Abort+0x58a>
 8102ba0:	687b      	ldr	r3, [r7, #4]
 8102ba2:	681b      	ldr	r3, [r3, #0]
 8102ba4:	4a3e      	ldr	r2, [pc, #248]	; (8102ca0 <HAL_DMA_Abort+0x608>)
 8102ba6:	4293      	cmp	r3, r2
 8102ba8:	d03b      	beq.n	8102c22 <HAL_DMA_Abort+0x58a>
 8102baa:	687b      	ldr	r3, [r7, #4]
 8102bac:	681b      	ldr	r3, [r3, #0]
 8102bae:	4a3d      	ldr	r2, [pc, #244]	; (8102ca4 <HAL_DMA_Abort+0x60c>)
 8102bb0:	4293      	cmp	r3, r2
 8102bb2:	d036      	beq.n	8102c22 <HAL_DMA_Abort+0x58a>
 8102bb4:	687b      	ldr	r3, [r7, #4]
 8102bb6:	681b      	ldr	r3, [r3, #0]
 8102bb8:	4a3b      	ldr	r2, [pc, #236]	; (8102ca8 <HAL_DMA_Abort+0x610>)
 8102bba:	4293      	cmp	r3, r2
 8102bbc:	d031      	beq.n	8102c22 <HAL_DMA_Abort+0x58a>
 8102bbe:	687b      	ldr	r3, [r7, #4]
 8102bc0:	681b      	ldr	r3, [r3, #0]
 8102bc2:	4a3a      	ldr	r2, [pc, #232]	; (8102cac <HAL_DMA_Abort+0x614>)
 8102bc4:	4293      	cmp	r3, r2
 8102bc6:	d02c      	beq.n	8102c22 <HAL_DMA_Abort+0x58a>
 8102bc8:	687b      	ldr	r3, [r7, #4]
 8102bca:	681b      	ldr	r3, [r3, #0]
 8102bcc:	4a38      	ldr	r2, [pc, #224]	; (8102cb0 <HAL_DMA_Abort+0x618>)
 8102bce:	4293      	cmp	r3, r2
 8102bd0:	d027      	beq.n	8102c22 <HAL_DMA_Abort+0x58a>
 8102bd2:	687b      	ldr	r3, [r7, #4]
 8102bd4:	681b      	ldr	r3, [r3, #0]
 8102bd6:	4a37      	ldr	r2, [pc, #220]	; (8102cb4 <HAL_DMA_Abort+0x61c>)
 8102bd8:	4293      	cmp	r3, r2
 8102bda:	d022      	beq.n	8102c22 <HAL_DMA_Abort+0x58a>
 8102bdc:	687b      	ldr	r3, [r7, #4]
 8102bde:	681b      	ldr	r3, [r3, #0]
 8102be0:	4a35      	ldr	r2, [pc, #212]	; (8102cb8 <HAL_DMA_Abort+0x620>)
 8102be2:	4293      	cmp	r3, r2
 8102be4:	d01d      	beq.n	8102c22 <HAL_DMA_Abort+0x58a>
 8102be6:	687b      	ldr	r3, [r7, #4]
 8102be8:	681b      	ldr	r3, [r3, #0]
 8102bea:	4a34      	ldr	r2, [pc, #208]	; (8102cbc <HAL_DMA_Abort+0x624>)
 8102bec:	4293      	cmp	r3, r2
 8102bee:	d018      	beq.n	8102c22 <HAL_DMA_Abort+0x58a>
 8102bf0:	687b      	ldr	r3, [r7, #4]
 8102bf2:	681b      	ldr	r3, [r3, #0]
 8102bf4:	4a32      	ldr	r2, [pc, #200]	; (8102cc0 <HAL_DMA_Abort+0x628>)
 8102bf6:	4293      	cmp	r3, r2
 8102bf8:	d013      	beq.n	8102c22 <HAL_DMA_Abort+0x58a>
 8102bfa:	687b      	ldr	r3, [r7, #4]
 8102bfc:	681b      	ldr	r3, [r3, #0]
 8102bfe:	4a31      	ldr	r2, [pc, #196]	; (8102cc4 <HAL_DMA_Abort+0x62c>)
 8102c00:	4293      	cmp	r3, r2
 8102c02:	d00e      	beq.n	8102c22 <HAL_DMA_Abort+0x58a>
 8102c04:	687b      	ldr	r3, [r7, #4]
 8102c06:	681b      	ldr	r3, [r3, #0]
 8102c08:	4a2f      	ldr	r2, [pc, #188]	; (8102cc8 <HAL_DMA_Abort+0x630>)
 8102c0a:	4293      	cmp	r3, r2
 8102c0c:	d009      	beq.n	8102c22 <HAL_DMA_Abort+0x58a>
 8102c0e:	687b      	ldr	r3, [r7, #4]
 8102c10:	681b      	ldr	r3, [r3, #0]
 8102c12:	4a2e      	ldr	r2, [pc, #184]	; (8102ccc <HAL_DMA_Abort+0x634>)
 8102c14:	4293      	cmp	r3, r2
 8102c16:	d004      	beq.n	8102c22 <HAL_DMA_Abort+0x58a>
 8102c18:	687b      	ldr	r3, [r7, #4]
 8102c1a:	681b      	ldr	r3, [r3, #0]
 8102c1c:	4a2c      	ldr	r2, [pc, #176]	; (8102cd0 <HAL_DMA_Abort+0x638>)
 8102c1e:	4293      	cmp	r3, r2
 8102c20:	d101      	bne.n	8102c26 <HAL_DMA_Abort+0x58e>
 8102c22:	2301      	movs	r3, #1
 8102c24:	e000      	b.n	8102c28 <HAL_DMA_Abort+0x590>
 8102c26:	2300      	movs	r3, #0
 8102c28:	2b00      	cmp	r3, #0
 8102c2a:	d015      	beq.n	8102c58 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8102c2c:	687b      	ldr	r3, [r7, #4]
 8102c2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102c30:	687a      	ldr	r2, [r7, #4]
 8102c32:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8102c34:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8102c36:	687b      	ldr	r3, [r7, #4]
 8102c38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102c3a:	2b00      	cmp	r3, #0
 8102c3c:	d00c      	beq.n	8102c58 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8102c3e:	687b      	ldr	r3, [r7, #4]
 8102c40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102c42:	681a      	ldr	r2, [r3, #0]
 8102c44:	687b      	ldr	r3, [r7, #4]
 8102c46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102c48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8102c4c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8102c4e:	687b      	ldr	r3, [r7, #4]
 8102c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102c52:	687a      	ldr	r2, [r7, #4]
 8102c54:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8102c56:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8102c58:	687b      	ldr	r3, [r7, #4]
 8102c5a:	2201      	movs	r2, #1
 8102c5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8102c60:	687b      	ldr	r3, [r7, #4]
 8102c62:	2200      	movs	r2, #0
 8102c64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8102c68:	2300      	movs	r3, #0
}
 8102c6a:	4618      	mov	r0, r3
 8102c6c:	3718      	adds	r7, #24
 8102c6e:	46bd      	mov	sp, r7
 8102c70:	bd80      	pop	{r7, pc}
 8102c72:	bf00      	nop
 8102c74:	40020010 	.word	0x40020010
 8102c78:	40020028 	.word	0x40020028
 8102c7c:	40020040 	.word	0x40020040
 8102c80:	40020058 	.word	0x40020058
 8102c84:	40020070 	.word	0x40020070
 8102c88:	40020088 	.word	0x40020088
 8102c8c:	400200a0 	.word	0x400200a0
 8102c90:	400200b8 	.word	0x400200b8
 8102c94:	40020410 	.word	0x40020410
 8102c98:	40020428 	.word	0x40020428
 8102c9c:	40020440 	.word	0x40020440
 8102ca0:	40020458 	.word	0x40020458
 8102ca4:	40020470 	.word	0x40020470
 8102ca8:	40020488 	.word	0x40020488
 8102cac:	400204a0 	.word	0x400204a0
 8102cb0:	400204b8 	.word	0x400204b8
 8102cb4:	58025408 	.word	0x58025408
 8102cb8:	5802541c 	.word	0x5802541c
 8102cbc:	58025430 	.word	0x58025430
 8102cc0:	58025444 	.word	0x58025444
 8102cc4:	58025458 	.word	0x58025458
 8102cc8:	5802546c 	.word	0x5802546c
 8102ccc:	58025480 	.word	0x58025480
 8102cd0:	58025494 	.word	0x58025494

08102cd4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8102cd4:	b580      	push	{r7, lr}
 8102cd6:	b084      	sub	sp, #16
 8102cd8:	af00      	add	r7, sp, #0
 8102cda:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8102cdc:	687b      	ldr	r3, [r7, #4]
 8102cde:	2b00      	cmp	r3, #0
 8102ce0:	d101      	bne.n	8102ce6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8102ce2:	2301      	movs	r3, #1
 8102ce4:	e237      	b.n	8103156 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8102ce6:	687b      	ldr	r3, [r7, #4]
 8102ce8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8102cec:	b2db      	uxtb	r3, r3
 8102cee:	2b02      	cmp	r3, #2
 8102cf0:	d004      	beq.n	8102cfc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8102cf2:	687b      	ldr	r3, [r7, #4]
 8102cf4:	2280      	movs	r2, #128	; 0x80
 8102cf6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8102cf8:	2301      	movs	r3, #1
 8102cfa:	e22c      	b.n	8103156 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8102cfc:	687b      	ldr	r3, [r7, #4]
 8102cfe:	681b      	ldr	r3, [r3, #0]
 8102d00:	4a5c      	ldr	r2, [pc, #368]	; (8102e74 <HAL_DMA_Abort_IT+0x1a0>)
 8102d02:	4293      	cmp	r3, r2
 8102d04:	d04a      	beq.n	8102d9c <HAL_DMA_Abort_IT+0xc8>
 8102d06:	687b      	ldr	r3, [r7, #4]
 8102d08:	681b      	ldr	r3, [r3, #0]
 8102d0a:	4a5b      	ldr	r2, [pc, #364]	; (8102e78 <HAL_DMA_Abort_IT+0x1a4>)
 8102d0c:	4293      	cmp	r3, r2
 8102d0e:	d045      	beq.n	8102d9c <HAL_DMA_Abort_IT+0xc8>
 8102d10:	687b      	ldr	r3, [r7, #4]
 8102d12:	681b      	ldr	r3, [r3, #0]
 8102d14:	4a59      	ldr	r2, [pc, #356]	; (8102e7c <HAL_DMA_Abort_IT+0x1a8>)
 8102d16:	4293      	cmp	r3, r2
 8102d18:	d040      	beq.n	8102d9c <HAL_DMA_Abort_IT+0xc8>
 8102d1a:	687b      	ldr	r3, [r7, #4]
 8102d1c:	681b      	ldr	r3, [r3, #0]
 8102d1e:	4a58      	ldr	r2, [pc, #352]	; (8102e80 <HAL_DMA_Abort_IT+0x1ac>)
 8102d20:	4293      	cmp	r3, r2
 8102d22:	d03b      	beq.n	8102d9c <HAL_DMA_Abort_IT+0xc8>
 8102d24:	687b      	ldr	r3, [r7, #4]
 8102d26:	681b      	ldr	r3, [r3, #0]
 8102d28:	4a56      	ldr	r2, [pc, #344]	; (8102e84 <HAL_DMA_Abort_IT+0x1b0>)
 8102d2a:	4293      	cmp	r3, r2
 8102d2c:	d036      	beq.n	8102d9c <HAL_DMA_Abort_IT+0xc8>
 8102d2e:	687b      	ldr	r3, [r7, #4]
 8102d30:	681b      	ldr	r3, [r3, #0]
 8102d32:	4a55      	ldr	r2, [pc, #340]	; (8102e88 <HAL_DMA_Abort_IT+0x1b4>)
 8102d34:	4293      	cmp	r3, r2
 8102d36:	d031      	beq.n	8102d9c <HAL_DMA_Abort_IT+0xc8>
 8102d38:	687b      	ldr	r3, [r7, #4]
 8102d3a:	681b      	ldr	r3, [r3, #0]
 8102d3c:	4a53      	ldr	r2, [pc, #332]	; (8102e8c <HAL_DMA_Abort_IT+0x1b8>)
 8102d3e:	4293      	cmp	r3, r2
 8102d40:	d02c      	beq.n	8102d9c <HAL_DMA_Abort_IT+0xc8>
 8102d42:	687b      	ldr	r3, [r7, #4]
 8102d44:	681b      	ldr	r3, [r3, #0]
 8102d46:	4a52      	ldr	r2, [pc, #328]	; (8102e90 <HAL_DMA_Abort_IT+0x1bc>)
 8102d48:	4293      	cmp	r3, r2
 8102d4a:	d027      	beq.n	8102d9c <HAL_DMA_Abort_IT+0xc8>
 8102d4c:	687b      	ldr	r3, [r7, #4]
 8102d4e:	681b      	ldr	r3, [r3, #0]
 8102d50:	4a50      	ldr	r2, [pc, #320]	; (8102e94 <HAL_DMA_Abort_IT+0x1c0>)
 8102d52:	4293      	cmp	r3, r2
 8102d54:	d022      	beq.n	8102d9c <HAL_DMA_Abort_IT+0xc8>
 8102d56:	687b      	ldr	r3, [r7, #4]
 8102d58:	681b      	ldr	r3, [r3, #0]
 8102d5a:	4a4f      	ldr	r2, [pc, #316]	; (8102e98 <HAL_DMA_Abort_IT+0x1c4>)
 8102d5c:	4293      	cmp	r3, r2
 8102d5e:	d01d      	beq.n	8102d9c <HAL_DMA_Abort_IT+0xc8>
 8102d60:	687b      	ldr	r3, [r7, #4]
 8102d62:	681b      	ldr	r3, [r3, #0]
 8102d64:	4a4d      	ldr	r2, [pc, #308]	; (8102e9c <HAL_DMA_Abort_IT+0x1c8>)
 8102d66:	4293      	cmp	r3, r2
 8102d68:	d018      	beq.n	8102d9c <HAL_DMA_Abort_IT+0xc8>
 8102d6a:	687b      	ldr	r3, [r7, #4]
 8102d6c:	681b      	ldr	r3, [r3, #0]
 8102d6e:	4a4c      	ldr	r2, [pc, #304]	; (8102ea0 <HAL_DMA_Abort_IT+0x1cc>)
 8102d70:	4293      	cmp	r3, r2
 8102d72:	d013      	beq.n	8102d9c <HAL_DMA_Abort_IT+0xc8>
 8102d74:	687b      	ldr	r3, [r7, #4]
 8102d76:	681b      	ldr	r3, [r3, #0]
 8102d78:	4a4a      	ldr	r2, [pc, #296]	; (8102ea4 <HAL_DMA_Abort_IT+0x1d0>)
 8102d7a:	4293      	cmp	r3, r2
 8102d7c:	d00e      	beq.n	8102d9c <HAL_DMA_Abort_IT+0xc8>
 8102d7e:	687b      	ldr	r3, [r7, #4]
 8102d80:	681b      	ldr	r3, [r3, #0]
 8102d82:	4a49      	ldr	r2, [pc, #292]	; (8102ea8 <HAL_DMA_Abort_IT+0x1d4>)
 8102d84:	4293      	cmp	r3, r2
 8102d86:	d009      	beq.n	8102d9c <HAL_DMA_Abort_IT+0xc8>
 8102d88:	687b      	ldr	r3, [r7, #4]
 8102d8a:	681b      	ldr	r3, [r3, #0]
 8102d8c:	4a47      	ldr	r2, [pc, #284]	; (8102eac <HAL_DMA_Abort_IT+0x1d8>)
 8102d8e:	4293      	cmp	r3, r2
 8102d90:	d004      	beq.n	8102d9c <HAL_DMA_Abort_IT+0xc8>
 8102d92:	687b      	ldr	r3, [r7, #4]
 8102d94:	681b      	ldr	r3, [r3, #0]
 8102d96:	4a46      	ldr	r2, [pc, #280]	; (8102eb0 <HAL_DMA_Abort_IT+0x1dc>)
 8102d98:	4293      	cmp	r3, r2
 8102d9a:	d101      	bne.n	8102da0 <HAL_DMA_Abort_IT+0xcc>
 8102d9c:	2301      	movs	r3, #1
 8102d9e:	e000      	b.n	8102da2 <HAL_DMA_Abort_IT+0xce>
 8102da0:	2300      	movs	r3, #0
 8102da2:	2b00      	cmp	r3, #0
 8102da4:	f000 8086 	beq.w	8102eb4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8102da8:	687b      	ldr	r3, [r7, #4]
 8102daa:	2204      	movs	r2, #4
 8102dac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8102db0:	687b      	ldr	r3, [r7, #4]
 8102db2:	681b      	ldr	r3, [r3, #0]
 8102db4:	4a2f      	ldr	r2, [pc, #188]	; (8102e74 <HAL_DMA_Abort_IT+0x1a0>)
 8102db6:	4293      	cmp	r3, r2
 8102db8:	d04a      	beq.n	8102e50 <HAL_DMA_Abort_IT+0x17c>
 8102dba:	687b      	ldr	r3, [r7, #4]
 8102dbc:	681b      	ldr	r3, [r3, #0]
 8102dbe:	4a2e      	ldr	r2, [pc, #184]	; (8102e78 <HAL_DMA_Abort_IT+0x1a4>)
 8102dc0:	4293      	cmp	r3, r2
 8102dc2:	d045      	beq.n	8102e50 <HAL_DMA_Abort_IT+0x17c>
 8102dc4:	687b      	ldr	r3, [r7, #4]
 8102dc6:	681b      	ldr	r3, [r3, #0]
 8102dc8:	4a2c      	ldr	r2, [pc, #176]	; (8102e7c <HAL_DMA_Abort_IT+0x1a8>)
 8102dca:	4293      	cmp	r3, r2
 8102dcc:	d040      	beq.n	8102e50 <HAL_DMA_Abort_IT+0x17c>
 8102dce:	687b      	ldr	r3, [r7, #4]
 8102dd0:	681b      	ldr	r3, [r3, #0]
 8102dd2:	4a2b      	ldr	r2, [pc, #172]	; (8102e80 <HAL_DMA_Abort_IT+0x1ac>)
 8102dd4:	4293      	cmp	r3, r2
 8102dd6:	d03b      	beq.n	8102e50 <HAL_DMA_Abort_IT+0x17c>
 8102dd8:	687b      	ldr	r3, [r7, #4]
 8102dda:	681b      	ldr	r3, [r3, #0]
 8102ddc:	4a29      	ldr	r2, [pc, #164]	; (8102e84 <HAL_DMA_Abort_IT+0x1b0>)
 8102dde:	4293      	cmp	r3, r2
 8102de0:	d036      	beq.n	8102e50 <HAL_DMA_Abort_IT+0x17c>
 8102de2:	687b      	ldr	r3, [r7, #4]
 8102de4:	681b      	ldr	r3, [r3, #0]
 8102de6:	4a28      	ldr	r2, [pc, #160]	; (8102e88 <HAL_DMA_Abort_IT+0x1b4>)
 8102de8:	4293      	cmp	r3, r2
 8102dea:	d031      	beq.n	8102e50 <HAL_DMA_Abort_IT+0x17c>
 8102dec:	687b      	ldr	r3, [r7, #4]
 8102dee:	681b      	ldr	r3, [r3, #0]
 8102df0:	4a26      	ldr	r2, [pc, #152]	; (8102e8c <HAL_DMA_Abort_IT+0x1b8>)
 8102df2:	4293      	cmp	r3, r2
 8102df4:	d02c      	beq.n	8102e50 <HAL_DMA_Abort_IT+0x17c>
 8102df6:	687b      	ldr	r3, [r7, #4]
 8102df8:	681b      	ldr	r3, [r3, #0]
 8102dfa:	4a25      	ldr	r2, [pc, #148]	; (8102e90 <HAL_DMA_Abort_IT+0x1bc>)
 8102dfc:	4293      	cmp	r3, r2
 8102dfe:	d027      	beq.n	8102e50 <HAL_DMA_Abort_IT+0x17c>
 8102e00:	687b      	ldr	r3, [r7, #4]
 8102e02:	681b      	ldr	r3, [r3, #0]
 8102e04:	4a23      	ldr	r2, [pc, #140]	; (8102e94 <HAL_DMA_Abort_IT+0x1c0>)
 8102e06:	4293      	cmp	r3, r2
 8102e08:	d022      	beq.n	8102e50 <HAL_DMA_Abort_IT+0x17c>
 8102e0a:	687b      	ldr	r3, [r7, #4]
 8102e0c:	681b      	ldr	r3, [r3, #0]
 8102e0e:	4a22      	ldr	r2, [pc, #136]	; (8102e98 <HAL_DMA_Abort_IT+0x1c4>)
 8102e10:	4293      	cmp	r3, r2
 8102e12:	d01d      	beq.n	8102e50 <HAL_DMA_Abort_IT+0x17c>
 8102e14:	687b      	ldr	r3, [r7, #4]
 8102e16:	681b      	ldr	r3, [r3, #0]
 8102e18:	4a20      	ldr	r2, [pc, #128]	; (8102e9c <HAL_DMA_Abort_IT+0x1c8>)
 8102e1a:	4293      	cmp	r3, r2
 8102e1c:	d018      	beq.n	8102e50 <HAL_DMA_Abort_IT+0x17c>
 8102e1e:	687b      	ldr	r3, [r7, #4]
 8102e20:	681b      	ldr	r3, [r3, #0]
 8102e22:	4a1f      	ldr	r2, [pc, #124]	; (8102ea0 <HAL_DMA_Abort_IT+0x1cc>)
 8102e24:	4293      	cmp	r3, r2
 8102e26:	d013      	beq.n	8102e50 <HAL_DMA_Abort_IT+0x17c>
 8102e28:	687b      	ldr	r3, [r7, #4]
 8102e2a:	681b      	ldr	r3, [r3, #0]
 8102e2c:	4a1d      	ldr	r2, [pc, #116]	; (8102ea4 <HAL_DMA_Abort_IT+0x1d0>)
 8102e2e:	4293      	cmp	r3, r2
 8102e30:	d00e      	beq.n	8102e50 <HAL_DMA_Abort_IT+0x17c>
 8102e32:	687b      	ldr	r3, [r7, #4]
 8102e34:	681b      	ldr	r3, [r3, #0]
 8102e36:	4a1c      	ldr	r2, [pc, #112]	; (8102ea8 <HAL_DMA_Abort_IT+0x1d4>)
 8102e38:	4293      	cmp	r3, r2
 8102e3a:	d009      	beq.n	8102e50 <HAL_DMA_Abort_IT+0x17c>
 8102e3c:	687b      	ldr	r3, [r7, #4]
 8102e3e:	681b      	ldr	r3, [r3, #0]
 8102e40:	4a1a      	ldr	r2, [pc, #104]	; (8102eac <HAL_DMA_Abort_IT+0x1d8>)
 8102e42:	4293      	cmp	r3, r2
 8102e44:	d004      	beq.n	8102e50 <HAL_DMA_Abort_IT+0x17c>
 8102e46:	687b      	ldr	r3, [r7, #4]
 8102e48:	681b      	ldr	r3, [r3, #0]
 8102e4a:	4a19      	ldr	r2, [pc, #100]	; (8102eb0 <HAL_DMA_Abort_IT+0x1dc>)
 8102e4c:	4293      	cmp	r3, r2
 8102e4e:	d108      	bne.n	8102e62 <HAL_DMA_Abort_IT+0x18e>
 8102e50:	687b      	ldr	r3, [r7, #4]
 8102e52:	681b      	ldr	r3, [r3, #0]
 8102e54:	681a      	ldr	r2, [r3, #0]
 8102e56:	687b      	ldr	r3, [r7, #4]
 8102e58:	681b      	ldr	r3, [r3, #0]
 8102e5a:	f022 0201 	bic.w	r2, r2, #1
 8102e5e:	601a      	str	r2, [r3, #0]
 8102e60:	e178      	b.n	8103154 <HAL_DMA_Abort_IT+0x480>
 8102e62:	687b      	ldr	r3, [r7, #4]
 8102e64:	681b      	ldr	r3, [r3, #0]
 8102e66:	681a      	ldr	r2, [r3, #0]
 8102e68:	687b      	ldr	r3, [r7, #4]
 8102e6a:	681b      	ldr	r3, [r3, #0]
 8102e6c:	f022 0201 	bic.w	r2, r2, #1
 8102e70:	601a      	str	r2, [r3, #0]
 8102e72:	e16f      	b.n	8103154 <HAL_DMA_Abort_IT+0x480>
 8102e74:	40020010 	.word	0x40020010
 8102e78:	40020028 	.word	0x40020028
 8102e7c:	40020040 	.word	0x40020040
 8102e80:	40020058 	.word	0x40020058
 8102e84:	40020070 	.word	0x40020070
 8102e88:	40020088 	.word	0x40020088
 8102e8c:	400200a0 	.word	0x400200a0
 8102e90:	400200b8 	.word	0x400200b8
 8102e94:	40020410 	.word	0x40020410
 8102e98:	40020428 	.word	0x40020428
 8102e9c:	40020440 	.word	0x40020440
 8102ea0:	40020458 	.word	0x40020458
 8102ea4:	40020470 	.word	0x40020470
 8102ea8:	40020488 	.word	0x40020488
 8102eac:	400204a0 	.word	0x400204a0
 8102eb0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8102eb4:	687b      	ldr	r3, [r7, #4]
 8102eb6:	681b      	ldr	r3, [r3, #0]
 8102eb8:	681a      	ldr	r2, [r3, #0]
 8102eba:	687b      	ldr	r3, [r7, #4]
 8102ebc:	681b      	ldr	r3, [r3, #0]
 8102ebe:	f022 020e 	bic.w	r2, r2, #14
 8102ec2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8102ec4:	687b      	ldr	r3, [r7, #4]
 8102ec6:	681b      	ldr	r3, [r3, #0]
 8102ec8:	4a6c      	ldr	r2, [pc, #432]	; (810307c <HAL_DMA_Abort_IT+0x3a8>)
 8102eca:	4293      	cmp	r3, r2
 8102ecc:	d04a      	beq.n	8102f64 <HAL_DMA_Abort_IT+0x290>
 8102ece:	687b      	ldr	r3, [r7, #4]
 8102ed0:	681b      	ldr	r3, [r3, #0]
 8102ed2:	4a6b      	ldr	r2, [pc, #428]	; (8103080 <HAL_DMA_Abort_IT+0x3ac>)
 8102ed4:	4293      	cmp	r3, r2
 8102ed6:	d045      	beq.n	8102f64 <HAL_DMA_Abort_IT+0x290>
 8102ed8:	687b      	ldr	r3, [r7, #4]
 8102eda:	681b      	ldr	r3, [r3, #0]
 8102edc:	4a69      	ldr	r2, [pc, #420]	; (8103084 <HAL_DMA_Abort_IT+0x3b0>)
 8102ede:	4293      	cmp	r3, r2
 8102ee0:	d040      	beq.n	8102f64 <HAL_DMA_Abort_IT+0x290>
 8102ee2:	687b      	ldr	r3, [r7, #4]
 8102ee4:	681b      	ldr	r3, [r3, #0]
 8102ee6:	4a68      	ldr	r2, [pc, #416]	; (8103088 <HAL_DMA_Abort_IT+0x3b4>)
 8102ee8:	4293      	cmp	r3, r2
 8102eea:	d03b      	beq.n	8102f64 <HAL_DMA_Abort_IT+0x290>
 8102eec:	687b      	ldr	r3, [r7, #4]
 8102eee:	681b      	ldr	r3, [r3, #0]
 8102ef0:	4a66      	ldr	r2, [pc, #408]	; (810308c <HAL_DMA_Abort_IT+0x3b8>)
 8102ef2:	4293      	cmp	r3, r2
 8102ef4:	d036      	beq.n	8102f64 <HAL_DMA_Abort_IT+0x290>
 8102ef6:	687b      	ldr	r3, [r7, #4]
 8102ef8:	681b      	ldr	r3, [r3, #0]
 8102efa:	4a65      	ldr	r2, [pc, #404]	; (8103090 <HAL_DMA_Abort_IT+0x3bc>)
 8102efc:	4293      	cmp	r3, r2
 8102efe:	d031      	beq.n	8102f64 <HAL_DMA_Abort_IT+0x290>
 8102f00:	687b      	ldr	r3, [r7, #4]
 8102f02:	681b      	ldr	r3, [r3, #0]
 8102f04:	4a63      	ldr	r2, [pc, #396]	; (8103094 <HAL_DMA_Abort_IT+0x3c0>)
 8102f06:	4293      	cmp	r3, r2
 8102f08:	d02c      	beq.n	8102f64 <HAL_DMA_Abort_IT+0x290>
 8102f0a:	687b      	ldr	r3, [r7, #4]
 8102f0c:	681b      	ldr	r3, [r3, #0]
 8102f0e:	4a62      	ldr	r2, [pc, #392]	; (8103098 <HAL_DMA_Abort_IT+0x3c4>)
 8102f10:	4293      	cmp	r3, r2
 8102f12:	d027      	beq.n	8102f64 <HAL_DMA_Abort_IT+0x290>
 8102f14:	687b      	ldr	r3, [r7, #4]
 8102f16:	681b      	ldr	r3, [r3, #0]
 8102f18:	4a60      	ldr	r2, [pc, #384]	; (810309c <HAL_DMA_Abort_IT+0x3c8>)
 8102f1a:	4293      	cmp	r3, r2
 8102f1c:	d022      	beq.n	8102f64 <HAL_DMA_Abort_IT+0x290>
 8102f1e:	687b      	ldr	r3, [r7, #4]
 8102f20:	681b      	ldr	r3, [r3, #0]
 8102f22:	4a5f      	ldr	r2, [pc, #380]	; (81030a0 <HAL_DMA_Abort_IT+0x3cc>)
 8102f24:	4293      	cmp	r3, r2
 8102f26:	d01d      	beq.n	8102f64 <HAL_DMA_Abort_IT+0x290>
 8102f28:	687b      	ldr	r3, [r7, #4]
 8102f2a:	681b      	ldr	r3, [r3, #0]
 8102f2c:	4a5d      	ldr	r2, [pc, #372]	; (81030a4 <HAL_DMA_Abort_IT+0x3d0>)
 8102f2e:	4293      	cmp	r3, r2
 8102f30:	d018      	beq.n	8102f64 <HAL_DMA_Abort_IT+0x290>
 8102f32:	687b      	ldr	r3, [r7, #4]
 8102f34:	681b      	ldr	r3, [r3, #0]
 8102f36:	4a5c      	ldr	r2, [pc, #368]	; (81030a8 <HAL_DMA_Abort_IT+0x3d4>)
 8102f38:	4293      	cmp	r3, r2
 8102f3a:	d013      	beq.n	8102f64 <HAL_DMA_Abort_IT+0x290>
 8102f3c:	687b      	ldr	r3, [r7, #4]
 8102f3e:	681b      	ldr	r3, [r3, #0]
 8102f40:	4a5a      	ldr	r2, [pc, #360]	; (81030ac <HAL_DMA_Abort_IT+0x3d8>)
 8102f42:	4293      	cmp	r3, r2
 8102f44:	d00e      	beq.n	8102f64 <HAL_DMA_Abort_IT+0x290>
 8102f46:	687b      	ldr	r3, [r7, #4]
 8102f48:	681b      	ldr	r3, [r3, #0]
 8102f4a:	4a59      	ldr	r2, [pc, #356]	; (81030b0 <HAL_DMA_Abort_IT+0x3dc>)
 8102f4c:	4293      	cmp	r3, r2
 8102f4e:	d009      	beq.n	8102f64 <HAL_DMA_Abort_IT+0x290>
 8102f50:	687b      	ldr	r3, [r7, #4]
 8102f52:	681b      	ldr	r3, [r3, #0]
 8102f54:	4a57      	ldr	r2, [pc, #348]	; (81030b4 <HAL_DMA_Abort_IT+0x3e0>)
 8102f56:	4293      	cmp	r3, r2
 8102f58:	d004      	beq.n	8102f64 <HAL_DMA_Abort_IT+0x290>
 8102f5a:	687b      	ldr	r3, [r7, #4]
 8102f5c:	681b      	ldr	r3, [r3, #0]
 8102f5e:	4a56      	ldr	r2, [pc, #344]	; (81030b8 <HAL_DMA_Abort_IT+0x3e4>)
 8102f60:	4293      	cmp	r3, r2
 8102f62:	d108      	bne.n	8102f76 <HAL_DMA_Abort_IT+0x2a2>
 8102f64:	687b      	ldr	r3, [r7, #4]
 8102f66:	681b      	ldr	r3, [r3, #0]
 8102f68:	681a      	ldr	r2, [r3, #0]
 8102f6a:	687b      	ldr	r3, [r7, #4]
 8102f6c:	681b      	ldr	r3, [r3, #0]
 8102f6e:	f022 0201 	bic.w	r2, r2, #1
 8102f72:	601a      	str	r2, [r3, #0]
 8102f74:	e007      	b.n	8102f86 <HAL_DMA_Abort_IT+0x2b2>
 8102f76:	687b      	ldr	r3, [r7, #4]
 8102f78:	681b      	ldr	r3, [r3, #0]
 8102f7a:	681a      	ldr	r2, [r3, #0]
 8102f7c:	687b      	ldr	r3, [r7, #4]
 8102f7e:	681b      	ldr	r3, [r3, #0]
 8102f80:	f022 0201 	bic.w	r2, r2, #1
 8102f84:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8102f86:	687b      	ldr	r3, [r7, #4]
 8102f88:	681b      	ldr	r3, [r3, #0]
 8102f8a:	4a3c      	ldr	r2, [pc, #240]	; (810307c <HAL_DMA_Abort_IT+0x3a8>)
 8102f8c:	4293      	cmp	r3, r2
 8102f8e:	d072      	beq.n	8103076 <HAL_DMA_Abort_IT+0x3a2>
 8102f90:	687b      	ldr	r3, [r7, #4]
 8102f92:	681b      	ldr	r3, [r3, #0]
 8102f94:	4a3a      	ldr	r2, [pc, #232]	; (8103080 <HAL_DMA_Abort_IT+0x3ac>)
 8102f96:	4293      	cmp	r3, r2
 8102f98:	d06d      	beq.n	8103076 <HAL_DMA_Abort_IT+0x3a2>
 8102f9a:	687b      	ldr	r3, [r7, #4]
 8102f9c:	681b      	ldr	r3, [r3, #0]
 8102f9e:	4a39      	ldr	r2, [pc, #228]	; (8103084 <HAL_DMA_Abort_IT+0x3b0>)
 8102fa0:	4293      	cmp	r3, r2
 8102fa2:	d068      	beq.n	8103076 <HAL_DMA_Abort_IT+0x3a2>
 8102fa4:	687b      	ldr	r3, [r7, #4]
 8102fa6:	681b      	ldr	r3, [r3, #0]
 8102fa8:	4a37      	ldr	r2, [pc, #220]	; (8103088 <HAL_DMA_Abort_IT+0x3b4>)
 8102faa:	4293      	cmp	r3, r2
 8102fac:	d063      	beq.n	8103076 <HAL_DMA_Abort_IT+0x3a2>
 8102fae:	687b      	ldr	r3, [r7, #4]
 8102fb0:	681b      	ldr	r3, [r3, #0]
 8102fb2:	4a36      	ldr	r2, [pc, #216]	; (810308c <HAL_DMA_Abort_IT+0x3b8>)
 8102fb4:	4293      	cmp	r3, r2
 8102fb6:	d05e      	beq.n	8103076 <HAL_DMA_Abort_IT+0x3a2>
 8102fb8:	687b      	ldr	r3, [r7, #4]
 8102fba:	681b      	ldr	r3, [r3, #0]
 8102fbc:	4a34      	ldr	r2, [pc, #208]	; (8103090 <HAL_DMA_Abort_IT+0x3bc>)
 8102fbe:	4293      	cmp	r3, r2
 8102fc0:	d059      	beq.n	8103076 <HAL_DMA_Abort_IT+0x3a2>
 8102fc2:	687b      	ldr	r3, [r7, #4]
 8102fc4:	681b      	ldr	r3, [r3, #0]
 8102fc6:	4a33      	ldr	r2, [pc, #204]	; (8103094 <HAL_DMA_Abort_IT+0x3c0>)
 8102fc8:	4293      	cmp	r3, r2
 8102fca:	d054      	beq.n	8103076 <HAL_DMA_Abort_IT+0x3a2>
 8102fcc:	687b      	ldr	r3, [r7, #4]
 8102fce:	681b      	ldr	r3, [r3, #0]
 8102fd0:	4a31      	ldr	r2, [pc, #196]	; (8103098 <HAL_DMA_Abort_IT+0x3c4>)
 8102fd2:	4293      	cmp	r3, r2
 8102fd4:	d04f      	beq.n	8103076 <HAL_DMA_Abort_IT+0x3a2>
 8102fd6:	687b      	ldr	r3, [r7, #4]
 8102fd8:	681b      	ldr	r3, [r3, #0]
 8102fda:	4a30      	ldr	r2, [pc, #192]	; (810309c <HAL_DMA_Abort_IT+0x3c8>)
 8102fdc:	4293      	cmp	r3, r2
 8102fde:	d04a      	beq.n	8103076 <HAL_DMA_Abort_IT+0x3a2>
 8102fe0:	687b      	ldr	r3, [r7, #4]
 8102fe2:	681b      	ldr	r3, [r3, #0]
 8102fe4:	4a2e      	ldr	r2, [pc, #184]	; (81030a0 <HAL_DMA_Abort_IT+0x3cc>)
 8102fe6:	4293      	cmp	r3, r2
 8102fe8:	d045      	beq.n	8103076 <HAL_DMA_Abort_IT+0x3a2>
 8102fea:	687b      	ldr	r3, [r7, #4]
 8102fec:	681b      	ldr	r3, [r3, #0]
 8102fee:	4a2d      	ldr	r2, [pc, #180]	; (81030a4 <HAL_DMA_Abort_IT+0x3d0>)
 8102ff0:	4293      	cmp	r3, r2
 8102ff2:	d040      	beq.n	8103076 <HAL_DMA_Abort_IT+0x3a2>
 8102ff4:	687b      	ldr	r3, [r7, #4]
 8102ff6:	681b      	ldr	r3, [r3, #0]
 8102ff8:	4a2b      	ldr	r2, [pc, #172]	; (81030a8 <HAL_DMA_Abort_IT+0x3d4>)
 8102ffa:	4293      	cmp	r3, r2
 8102ffc:	d03b      	beq.n	8103076 <HAL_DMA_Abort_IT+0x3a2>
 8102ffe:	687b      	ldr	r3, [r7, #4]
 8103000:	681b      	ldr	r3, [r3, #0]
 8103002:	4a2a      	ldr	r2, [pc, #168]	; (81030ac <HAL_DMA_Abort_IT+0x3d8>)
 8103004:	4293      	cmp	r3, r2
 8103006:	d036      	beq.n	8103076 <HAL_DMA_Abort_IT+0x3a2>
 8103008:	687b      	ldr	r3, [r7, #4]
 810300a:	681b      	ldr	r3, [r3, #0]
 810300c:	4a28      	ldr	r2, [pc, #160]	; (81030b0 <HAL_DMA_Abort_IT+0x3dc>)
 810300e:	4293      	cmp	r3, r2
 8103010:	d031      	beq.n	8103076 <HAL_DMA_Abort_IT+0x3a2>
 8103012:	687b      	ldr	r3, [r7, #4]
 8103014:	681b      	ldr	r3, [r3, #0]
 8103016:	4a27      	ldr	r2, [pc, #156]	; (81030b4 <HAL_DMA_Abort_IT+0x3e0>)
 8103018:	4293      	cmp	r3, r2
 810301a:	d02c      	beq.n	8103076 <HAL_DMA_Abort_IT+0x3a2>
 810301c:	687b      	ldr	r3, [r7, #4]
 810301e:	681b      	ldr	r3, [r3, #0]
 8103020:	4a25      	ldr	r2, [pc, #148]	; (81030b8 <HAL_DMA_Abort_IT+0x3e4>)
 8103022:	4293      	cmp	r3, r2
 8103024:	d027      	beq.n	8103076 <HAL_DMA_Abort_IT+0x3a2>
 8103026:	687b      	ldr	r3, [r7, #4]
 8103028:	681b      	ldr	r3, [r3, #0]
 810302a:	4a24      	ldr	r2, [pc, #144]	; (81030bc <HAL_DMA_Abort_IT+0x3e8>)
 810302c:	4293      	cmp	r3, r2
 810302e:	d022      	beq.n	8103076 <HAL_DMA_Abort_IT+0x3a2>
 8103030:	687b      	ldr	r3, [r7, #4]
 8103032:	681b      	ldr	r3, [r3, #0]
 8103034:	4a22      	ldr	r2, [pc, #136]	; (81030c0 <HAL_DMA_Abort_IT+0x3ec>)
 8103036:	4293      	cmp	r3, r2
 8103038:	d01d      	beq.n	8103076 <HAL_DMA_Abort_IT+0x3a2>
 810303a:	687b      	ldr	r3, [r7, #4]
 810303c:	681b      	ldr	r3, [r3, #0]
 810303e:	4a21      	ldr	r2, [pc, #132]	; (81030c4 <HAL_DMA_Abort_IT+0x3f0>)
 8103040:	4293      	cmp	r3, r2
 8103042:	d018      	beq.n	8103076 <HAL_DMA_Abort_IT+0x3a2>
 8103044:	687b      	ldr	r3, [r7, #4]
 8103046:	681b      	ldr	r3, [r3, #0]
 8103048:	4a1f      	ldr	r2, [pc, #124]	; (81030c8 <HAL_DMA_Abort_IT+0x3f4>)
 810304a:	4293      	cmp	r3, r2
 810304c:	d013      	beq.n	8103076 <HAL_DMA_Abort_IT+0x3a2>
 810304e:	687b      	ldr	r3, [r7, #4]
 8103050:	681b      	ldr	r3, [r3, #0]
 8103052:	4a1e      	ldr	r2, [pc, #120]	; (81030cc <HAL_DMA_Abort_IT+0x3f8>)
 8103054:	4293      	cmp	r3, r2
 8103056:	d00e      	beq.n	8103076 <HAL_DMA_Abort_IT+0x3a2>
 8103058:	687b      	ldr	r3, [r7, #4]
 810305a:	681b      	ldr	r3, [r3, #0]
 810305c:	4a1c      	ldr	r2, [pc, #112]	; (81030d0 <HAL_DMA_Abort_IT+0x3fc>)
 810305e:	4293      	cmp	r3, r2
 8103060:	d009      	beq.n	8103076 <HAL_DMA_Abort_IT+0x3a2>
 8103062:	687b      	ldr	r3, [r7, #4]
 8103064:	681b      	ldr	r3, [r3, #0]
 8103066:	4a1b      	ldr	r2, [pc, #108]	; (81030d4 <HAL_DMA_Abort_IT+0x400>)
 8103068:	4293      	cmp	r3, r2
 810306a:	d004      	beq.n	8103076 <HAL_DMA_Abort_IT+0x3a2>
 810306c:	687b      	ldr	r3, [r7, #4]
 810306e:	681b      	ldr	r3, [r3, #0]
 8103070:	4a19      	ldr	r2, [pc, #100]	; (81030d8 <HAL_DMA_Abort_IT+0x404>)
 8103072:	4293      	cmp	r3, r2
 8103074:	d132      	bne.n	81030dc <HAL_DMA_Abort_IT+0x408>
 8103076:	2301      	movs	r3, #1
 8103078:	e031      	b.n	81030de <HAL_DMA_Abort_IT+0x40a>
 810307a:	bf00      	nop
 810307c:	40020010 	.word	0x40020010
 8103080:	40020028 	.word	0x40020028
 8103084:	40020040 	.word	0x40020040
 8103088:	40020058 	.word	0x40020058
 810308c:	40020070 	.word	0x40020070
 8103090:	40020088 	.word	0x40020088
 8103094:	400200a0 	.word	0x400200a0
 8103098:	400200b8 	.word	0x400200b8
 810309c:	40020410 	.word	0x40020410
 81030a0:	40020428 	.word	0x40020428
 81030a4:	40020440 	.word	0x40020440
 81030a8:	40020458 	.word	0x40020458
 81030ac:	40020470 	.word	0x40020470
 81030b0:	40020488 	.word	0x40020488
 81030b4:	400204a0 	.word	0x400204a0
 81030b8:	400204b8 	.word	0x400204b8
 81030bc:	58025408 	.word	0x58025408
 81030c0:	5802541c 	.word	0x5802541c
 81030c4:	58025430 	.word	0x58025430
 81030c8:	58025444 	.word	0x58025444
 81030cc:	58025458 	.word	0x58025458
 81030d0:	5802546c 	.word	0x5802546c
 81030d4:	58025480 	.word	0x58025480
 81030d8:	58025494 	.word	0x58025494
 81030dc:	2300      	movs	r3, #0
 81030de:	2b00      	cmp	r3, #0
 81030e0:	d028      	beq.n	8103134 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 81030e2:	687b      	ldr	r3, [r7, #4]
 81030e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81030e6:	681a      	ldr	r2, [r3, #0]
 81030e8:	687b      	ldr	r3, [r7, #4]
 81030ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81030ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 81030f0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 81030f2:	687b      	ldr	r3, [r7, #4]
 81030f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81030f6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 81030f8:	687b      	ldr	r3, [r7, #4]
 81030fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81030fc:	f003 031f 	and.w	r3, r3, #31
 8103100:	2201      	movs	r2, #1
 8103102:	409a      	lsls	r2, r3
 8103104:	68fb      	ldr	r3, [r7, #12]
 8103106:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8103108:	687b      	ldr	r3, [r7, #4]
 810310a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810310c:	687a      	ldr	r2, [r7, #4]
 810310e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8103110:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8103112:	687b      	ldr	r3, [r7, #4]
 8103114:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103116:	2b00      	cmp	r3, #0
 8103118:	d00c      	beq.n	8103134 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 810311a:	687b      	ldr	r3, [r7, #4]
 810311c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810311e:	681a      	ldr	r2, [r3, #0]
 8103120:	687b      	ldr	r3, [r7, #4]
 8103122:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103124:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8103128:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 810312a:	687b      	ldr	r3, [r7, #4]
 810312c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810312e:	687a      	ldr	r2, [r7, #4]
 8103130:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8103132:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8103134:	687b      	ldr	r3, [r7, #4]
 8103136:	2201      	movs	r2, #1
 8103138:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 810313c:	687b      	ldr	r3, [r7, #4]
 810313e:	2200      	movs	r2, #0
 8103140:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8103144:	687b      	ldr	r3, [r7, #4]
 8103146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103148:	2b00      	cmp	r3, #0
 810314a:	d003      	beq.n	8103154 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 810314c:	687b      	ldr	r3, [r7, #4]
 810314e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103150:	6878      	ldr	r0, [r7, #4]
 8103152:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8103154:	2300      	movs	r3, #0
}
 8103156:	4618      	mov	r0, r3
 8103158:	3710      	adds	r7, #16
 810315a:	46bd      	mov	sp, r7
 810315c:	bd80      	pop	{r7, pc}
 810315e:	bf00      	nop

08103160 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8103160:	b480      	push	{r7}
 8103162:	b089      	sub	sp, #36	; 0x24
 8103164:	af00      	add	r7, sp, #0
 8103166:	6078      	str	r0, [r7, #4]
 8103168:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810316a:	2300      	movs	r3, #0
 810316c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810316e:	4b89      	ldr	r3, [pc, #548]	; (8103394 <HAL_GPIO_Init+0x234>)
 8103170:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8103172:	e194      	b.n	810349e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8103174:	683b      	ldr	r3, [r7, #0]
 8103176:	681a      	ldr	r2, [r3, #0]
 8103178:	2101      	movs	r1, #1
 810317a:	69fb      	ldr	r3, [r7, #28]
 810317c:	fa01 f303 	lsl.w	r3, r1, r3
 8103180:	4013      	ands	r3, r2
 8103182:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8103184:	693b      	ldr	r3, [r7, #16]
 8103186:	2b00      	cmp	r3, #0
 8103188:	f000 8186 	beq.w	8103498 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 810318c:	683b      	ldr	r3, [r7, #0]
 810318e:	685b      	ldr	r3, [r3, #4]
 8103190:	f003 0303 	and.w	r3, r3, #3
 8103194:	2b01      	cmp	r3, #1
 8103196:	d005      	beq.n	81031a4 <HAL_GPIO_Init+0x44>
 8103198:	683b      	ldr	r3, [r7, #0]
 810319a:	685b      	ldr	r3, [r3, #4]
 810319c:	f003 0303 	and.w	r3, r3, #3
 81031a0:	2b02      	cmp	r3, #2
 81031a2:	d130      	bne.n	8103206 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 81031a4:	687b      	ldr	r3, [r7, #4]
 81031a6:	689b      	ldr	r3, [r3, #8]
 81031a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 81031aa:	69fb      	ldr	r3, [r7, #28]
 81031ac:	005b      	lsls	r3, r3, #1
 81031ae:	2203      	movs	r2, #3
 81031b0:	fa02 f303 	lsl.w	r3, r2, r3
 81031b4:	43db      	mvns	r3, r3
 81031b6:	69ba      	ldr	r2, [r7, #24]
 81031b8:	4013      	ands	r3, r2
 81031ba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 81031bc:	683b      	ldr	r3, [r7, #0]
 81031be:	68da      	ldr	r2, [r3, #12]
 81031c0:	69fb      	ldr	r3, [r7, #28]
 81031c2:	005b      	lsls	r3, r3, #1
 81031c4:	fa02 f303 	lsl.w	r3, r2, r3
 81031c8:	69ba      	ldr	r2, [r7, #24]
 81031ca:	4313      	orrs	r3, r2
 81031cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 81031ce:	687b      	ldr	r3, [r7, #4]
 81031d0:	69ba      	ldr	r2, [r7, #24]
 81031d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81031d4:	687b      	ldr	r3, [r7, #4]
 81031d6:	685b      	ldr	r3, [r3, #4]
 81031d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81031da:	2201      	movs	r2, #1
 81031dc:	69fb      	ldr	r3, [r7, #28]
 81031de:	fa02 f303 	lsl.w	r3, r2, r3
 81031e2:	43db      	mvns	r3, r3
 81031e4:	69ba      	ldr	r2, [r7, #24]
 81031e6:	4013      	ands	r3, r2
 81031e8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 81031ea:	683b      	ldr	r3, [r7, #0]
 81031ec:	685b      	ldr	r3, [r3, #4]
 81031ee:	091b      	lsrs	r3, r3, #4
 81031f0:	f003 0201 	and.w	r2, r3, #1
 81031f4:	69fb      	ldr	r3, [r7, #28]
 81031f6:	fa02 f303 	lsl.w	r3, r2, r3
 81031fa:	69ba      	ldr	r2, [r7, #24]
 81031fc:	4313      	orrs	r3, r2
 81031fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8103200:	687b      	ldr	r3, [r7, #4]
 8103202:	69ba      	ldr	r2, [r7, #24]
 8103204:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8103206:	683b      	ldr	r3, [r7, #0]
 8103208:	685b      	ldr	r3, [r3, #4]
 810320a:	f003 0303 	and.w	r3, r3, #3
 810320e:	2b03      	cmp	r3, #3
 8103210:	d017      	beq.n	8103242 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8103212:	687b      	ldr	r3, [r7, #4]
 8103214:	68db      	ldr	r3, [r3, #12]
 8103216:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8103218:	69fb      	ldr	r3, [r7, #28]
 810321a:	005b      	lsls	r3, r3, #1
 810321c:	2203      	movs	r2, #3
 810321e:	fa02 f303 	lsl.w	r3, r2, r3
 8103222:	43db      	mvns	r3, r3
 8103224:	69ba      	ldr	r2, [r7, #24]
 8103226:	4013      	ands	r3, r2
 8103228:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 810322a:	683b      	ldr	r3, [r7, #0]
 810322c:	689a      	ldr	r2, [r3, #8]
 810322e:	69fb      	ldr	r3, [r7, #28]
 8103230:	005b      	lsls	r3, r3, #1
 8103232:	fa02 f303 	lsl.w	r3, r2, r3
 8103236:	69ba      	ldr	r2, [r7, #24]
 8103238:	4313      	orrs	r3, r2
 810323a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 810323c:	687b      	ldr	r3, [r7, #4]
 810323e:	69ba      	ldr	r2, [r7, #24]
 8103240:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8103242:	683b      	ldr	r3, [r7, #0]
 8103244:	685b      	ldr	r3, [r3, #4]
 8103246:	f003 0303 	and.w	r3, r3, #3
 810324a:	2b02      	cmp	r3, #2
 810324c:	d123      	bne.n	8103296 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 810324e:	69fb      	ldr	r3, [r7, #28]
 8103250:	08da      	lsrs	r2, r3, #3
 8103252:	687b      	ldr	r3, [r7, #4]
 8103254:	3208      	adds	r2, #8
 8103256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810325a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 810325c:	69fb      	ldr	r3, [r7, #28]
 810325e:	f003 0307 	and.w	r3, r3, #7
 8103262:	009b      	lsls	r3, r3, #2
 8103264:	220f      	movs	r2, #15
 8103266:	fa02 f303 	lsl.w	r3, r2, r3
 810326a:	43db      	mvns	r3, r3
 810326c:	69ba      	ldr	r2, [r7, #24]
 810326e:	4013      	ands	r3, r2
 8103270:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8103272:	683b      	ldr	r3, [r7, #0]
 8103274:	691a      	ldr	r2, [r3, #16]
 8103276:	69fb      	ldr	r3, [r7, #28]
 8103278:	f003 0307 	and.w	r3, r3, #7
 810327c:	009b      	lsls	r3, r3, #2
 810327e:	fa02 f303 	lsl.w	r3, r2, r3
 8103282:	69ba      	ldr	r2, [r7, #24]
 8103284:	4313      	orrs	r3, r2
 8103286:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8103288:	69fb      	ldr	r3, [r7, #28]
 810328a:	08da      	lsrs	r2, r3, #3
 810328c:	687b      	ldr	r3, [r7, #4]
 810328e:	3208      	adds	r2, #8
 8103290:	69b9      	ldr	r1, [r7, #24]
 8103292:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8103296:	687b      	ldr	r3, [r7, #4]
 8103298:	681b      	ldr	r3, [r3, #0]
 810329a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 810329c:	69fb      	ldr	r3, [r7, #28]
 810329e:	005b      	lsls	r3, r3, #1
 81032a0:	2203      	movs	r2, #3
 81032a2:	fa02 f303 	lsl.w	r3, r2, r3
 81032a6:	43db      	mvns	r3, r3
 81032a8:	69ba      	ldr	r2, [r7, #24]
 81032aa:	4013      	ands	r3, r2
 81032ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81032ae:	683b      	ldr	r3, [r7, #0]
 81032b0:	685b      	ldr	r3, [r3, #4]
 81032b2:	f003 0203 	and.w	r2, r3, #3
 81032b6:	69fb      	ldr	r3, [r7, #28]
 81032b8:	005b      	lsls	r3, r3, #1
 81032ba:	fa02 f303 	lsl.w	r3, r2, r3
 81032be:	69ba      	ldr	r2, [r7, #24]
 81032c0:	4313      	orrs	r3, r2
 81032c2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81032c4:	687b      	ldr	r3, [r7, #4]
 81032c6:	69ba      	ldr	r2, [r7, #24]
 81032c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 81032ca:	683b      	ldr	r3, [r7, #0]
 81032cc:	685b      	ldr	r3, [r3, #4]
 81032ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 81032d2:	2b00      	cmp	r3, #0
 81032d4:	f000 80e0 	beq.w	8103498 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81032d8:	4b2f      	ldr	r3, [pc, #188]	; (8103398 <HAL_GPIO_Init+0x238>)
 81032da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81032de:	4a2e      	ldr	r2, [pc, #184]	; (8103398 <HAL_GPIO_Init+0x238>)
 81032e0:	f043 0302 	orr.w	r3, r3, #2
 81032e4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81032e8:	4b2b      	ldr	r3, [pc, #172]	; (8103398 <HAL_GPIO_Init+0x238>)
 81032ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81032ee:	f003 0302 	and.w	r3, r3, #2
 81032f2:	60fb      	str	r3, [r7, #12]
 81032f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 81032f6:	4a29      	ldr	r2, [pc, #164]	; (810339c <HAL_GPIO_Init+0x23c>)
 81032f8:	69fb      	ldr	r3, [r7, #28]
 81032fa:	089b      	lsrs	r3, r3, #2
 81032fc:	3302      	adds	r3, #2
 81032fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8103302:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8103304:	69fb      	ldr	r3, [r7, #28]
 8103306:	f003 0303 	and.w	r3, r3, #3
 810330a:	009b      	lsls	r3, r3, #2
 810330c:	220f      	movs	r2, #15
 810330e:	fa02 f303 	lsl.w	r3, r2, r3
 8103312:	43db      	mvns	r3, r3
 8103314:	69ba      	ldr	r2, [r7, #24]
 8103316:	4013      	ands	r3, r2
 8103318:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 810331a:	687b      	ldr	r3, [r7, #4]
 810331c:	4a20      	ldr	r2, [pc, #128]	; (81033a0 <HAL_GPIO_Init+0x240>)
 810331e:	4293      	cmp	r3, r2
 8103320:	d052      	beq.n	81033c8 <HAL_GPIO_Init+0x268>
 8103322:	687b      	ldr	r3, [r7, #4]
 8103324:	4a1f      	ldr	r2, [pc, #124]	; (81033a4 <HAL_GPIO_Init+0x244>)
 8103326:	4293      	cmp	r3, r2
 8103328:	d031      	beq.n	810338e <HAL_GPIO_Init+0x22e>
 810332a:	687b      	ldr	r3, [r7, #4]
 810332c:	4a1e      	ldr	r2, [pc, #120]	; (81033a8 <HAL_GPIO_Init+0x248>)
 810332e:	4293      	cmp	r3, r2
 8103330:	d02b      	beq.n	810338a <HAL_GPIO_Init+0x22a>
 8103332:	687b      	ldr	r3, [r7, #4]
 8103334:	4a1d      	ldr	r2, [pc, #116]	; (81033ac <HAL_GPIO_Init+0x24c>)
 8103336:	4293      	cmp	r3, r2
 8103338:	d025      	beq.n	8103386 <HAL_GPIO_Init+0x226>
 810333a:	687b      	ldr	r3, [r7, #4]
 810333c:	4a1c      	ldr	r2, [pc, #112]	; (81033b0 <HAL_GPIO_Init+0x250>)
 810333e:	4293      	cmp	r3, r2
 8103340:	d01f      	beq.n	8103382 <HAL_GPIO_Init+0x222>
 8103342:	687b      	ldr	r3, [r7, #4]
 8103344:	4a1b      	ldr	r2, [pc, #108]	; (81033b4 <HAL_GPIO_Init+0x254>)
 8103346:	4293      	cmp	r3, r2
 8103348:	d019      	beq.n	810337e <HAL_GPIO_Init+0x21e>
 810334a:	687b      	ldr	r3, [r7, #4]
 810334c:	4a1a      	ldr	r2, [pc, #104]	; (81033b8 <HAL_GPIO_Init+0x258>)
 810334e:	4293      	cmp	r3, r2
 8103350:	d013      	beq.n	810337a <HAL_GPIO_Init+0x21a>
 8103352:	687b      	ldr	r3, [r7, #4]
 8103354:	4a19      	ldr	r2, [pc, #100]	; (81033bc <HAL_GPIO_Init+0x25c>)
 8103356:	4293      	cmp	r3, r2
 8103358:	d00d      	beq.n	8103376 <HAL_GPIO_Init+0x216>
 810335a:	687b      	ldr	r3, [r7, #4]
 810335c:	4a18      	ldr	r2, [pc, #96]	; (81033c0 <HAL_GPIO_Init+0x260>)
 810335e:	4293      	cmp	r3, r2
 8103360:	d007      	beq.n	8103372 <HAL_GPIO_Init+0x212>
 8103362:	687b      	ldr	r3, [r7, #4]
 8103364:	4a17      	ldr	r2, [pc, #92]	; (81033c4 <HAL_GPIO_Init+0x264>)
 8103366:	4293      	cmp	r3, r2
 8103368:	d101      	bne.n	810336e <HAL_GPIO_Init+0x20e>
 810336a:	2309      	movs	r3, #9
 810336c:	e02d      	b.n	81033ca <HAL_GPIO_Init+0x26a>
 810336e:	230a      	movs	r3, #10
 8103370:	e02b      	b.n	81033ca <HAL_GPIO_Init+0x26a>
 8103372:	2308      	movs	r3, #8
 8103374:	e029      	b.n	81033ca <HAL_GPIO_Init+0x26a>
 8103376:	2307      	movs	r3, #7
 8103378:	e027      	b.n	81033ca <HAL_GPIO_Init+0x26a>
 810337a:	2306      	movs	r3, #6
 810337c:	e025      	b.n	81033ca <HAL_GPIO_Init+0x26a>
 810337e:	2305      	movs	r3, #5
 8103380:	e023      	b.n	81033ca <HAL_GPIO_Init+0x26a>
 8103382:	2304      	movs	r3, #4
 8103384:	e021      	b.n	81033ca <HAL_GPIO_Init+0x26a>
 8103386:	2303      	movs	r3, #3
 8103388:	e01f      	b.n	81033ca <HAL_GPIO_Init+0x26a>
 810338a:	2302      	movs	r3, #2
 810338c:	e01d      	b.n	81033ca <HAL_GPIO_Init+0x26a>
 810338e:	2301      	movs	r3, #1
 8103390:	e01b      	b.n	81033ca <HAL_GPIO_Init+0x26a>
 8103392:	bf00      	nop
 8103394:	580000c0 	.word	0x580000c0
 8103398:	58024400 	.word	0x58024400
 810339c:	58000400 	.word	0x58000400
 81033a0:	58020000 	.word	0x58020000
 81033a4:	58020400 	.word	0x58020400
 81033a8:	58020800 	.word	0x58020800
 81033ac:	58020c00 	.word	0x58020c00
 81033b0:	58021000 	.word	0x58021000
 81033b4:	58021400 	.word	0x58021400
 81033b8:	58021800 	.word	0x58021800
 81033bc:	58021c00 	.word	0x58021c00
 81033c0:	58022000 	.word	0x58022000
 81033c4:	58022400 	.word	0x58022400
 81033c8:	2300      	movs	r3, #0
 81033ca:	69fa      	ldr	r2, [r7, #28]
 81033cc:	f002 0203 	and.w	r2, r2, #3
 81033d0:	0092      	lsls	r2, r2, #2
 81033d2:	4093      	lsls	r3, r2
 81033d4:	69ba      	ldr	r2, [r7, #24]
 81033d6:	4313      	orrs	r3, r2
 81033d8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 81033da:	4938      	ldr	r1, [pc, #224]	; (81034bc <HAL_GPIO_Init+0x35c>)
 81033dc:	69fb      	ldr	r3, [r7, #28]
 81033de:	089b      	lsrs	r3, r3, #2
 81033e0:	3302      	adds	r3, #2
 81033e2:	69ba      	ldr	r2, [r7, #24]
 81033e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 81033e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81033ec:	681b      	ldr	r3, [r3, #0]
 81033ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81033f0:	693b      	ldr	r3, [r7, #16]
 81033f2:	43db      	mvns	r3, r3
 81033f4:	69ba      	ldr	r2, [r7, #24]
 81033f6:	4013      	ands	r3, r2
 81033f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 81033fa:	683b      	ldr	r3, [r7, #0]
 81033fc:	685b      	ldr	r3, [r3, #4]
 81033fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8103402:	2b00      	cmp	r3, #0
 8103404:	d003      	beq.n	810340e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8103406:	69ba      	ldr	r2, [r7, #24]
 8103408:	693b      	ldr	r3, [r7, #16]
 810340a:	4313      	orrs	r3, r2
 810340c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 810340e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8103412:	69bb      	ldr	r3, [r7, #24]
 8103414:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8103416:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 810341a:	685b      	ldr	r3, [r3, #4]
 810341c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810341e:	693b      	ldr	r3, [r7, #16]
 8103420:	43db      	mvns	r3, r3
 8103422:	69ba      	ldr	r2, [r7, #24]
 8103424:	4013      	ands	r3, r2
 8103426:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8103428:	683b      	ldr	r3, [r7, #0]
 810342a:	685b      	ldr	r3, [r3, #4]
 810342c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8103430:	2b00      	cmp	r3, #0
 8103432:	d003      	beq.n	810343c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8103434:	69ba      	ldr	r2, [r7, #24]
 8103436:	693b      	ldr	r3, [r7, #16]
 8103438:	4313      	orrs	r3, r2
 810343a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 810343c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8103440:	69bb      	ldr	r3, [r7, #24]
 8103442:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8103444:	697b      	ldr	r3, [r7, #20]
 8103446:	685b      	ldr	r3, [r3, #4]
 8103448:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810344a:	693b      	ldr	r3, [r7, #16]
 810344c:	43db      	mvns	r3, r3
 810344e:	69ba      	ldr	r2, [r7, #24]
 8103450:	4013      	ands	r3, r2
 8103452:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8103454:	683b      	ldr	r3, [r7, #0]
 8103456:	685b      	ldr	r3, [r3, #4]
 8103458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810345c:	2b00      	cmp	r3, #0
 810345e:	d003      	beq.n	8103468 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8103460:	69ba      	ldr	r2, [r7, #24]
 8103462:	693b      	ldr	r3, [r7, #16]
 8103464:	4313      	orrs	r3, r2
 8103466:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8103468:	697b      	ldr	r3, [r7, #20]
 810346a:	69ba      	ldr	r2, [r7, #24]
 810346c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810346e:	697b      	ldr	r3, [r7, #20]
 8103470:	681b      	ldr	r3, [r3, #0]
 8103472:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103474:	693b      	ldr	r3, [r7, #16]
 8103476:	43db      	mvns	r3, r3
 8103478:	69ba      	ldr	r2, [r7, #24]
 810347a:	4013      	ands	r3, r2
 810347c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 810347e:	683b      	ldr	r3, [r7, #0]
 8103480:	685b      	ldr	r3, [r3, #4]
 8103482:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8103486:	2b00      	cmp	r3, #0
 8103488:	d003      	beq.n	8103492 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 810348a:	69ba      	ldr	r2, [r7, #24]
 810348c:	693b      	ldr	r3, [r7, #16]
 810348e:	4313      	orrs	r3, r2
 8103490:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8103492:	697b      	ldr	r3, [r7, #20]
 8103494:	69ba      	ldr	r2, [r7, #24]
 8103496:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8103498:	69fb      	ldr	r3, [r7, #28]
 810349a:	3301      	adds	r3, #1
 810349c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810349e:	683b      	ldr	r3, [r7, #0]
 81034a0:	681a      	ldr	r2, [r3, #0]
 81034a2:	69fb      	ldr	r3, [r7, #28]
 81034a4:	fa22 f303 	lsr.w	r3, r2, r3
 81034a8:	2b00      	cmp	r3, #0
 81034aa:	f47f ae63 	bne.w	8103174 <HAL_GPIO_Init+0x14>
  }
}
 81034ae:	bf00      	nop
 81034b0:	bf00      	nop
 81034b2:	3724      	adds	r7, #36	; 0x24
 81034b4:	46bd      	mov	sp, r7
 81034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034ba:	4770      	bx	lr
 81034bc:	58000400 	.word	0x58000400

081034c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 81034c0:	b480      	push	{r7}
 81034c2:	b083      	sub	sp, #12
 81034c4:	af00      	add	r7, sp, #0
 81034c6:	6078      	str	r0, [r7, #4]
 81034c8:	460b      	mov	r3, r1
 81034ca:	807b      	strh	r3, [r7, #2]
 81034cc:	4613      	mov	r3, r2
 81034ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 81034d0:	787b      	ldrb	r3, [r7, #1]
 81034d2:	2b00      	cmp	r3, #0
 81034d4:	d003      	beq.n	81034de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 81034d6:	887a      	ldrh	r2, [r7, #2]
 81034d8:	687b      	ldr	r3, [r7, #4]
 81034da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 81034dc:	e003      	b.n	81034e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 81034de:	887b      	ldrh	r3, [r7, #2]
 81034e0:	041a      	lsls	r2, r3, #16
 81034e2:	687b      	ldr	r3, [r7, #4]
 81034e4:	619a      	str	r2, [r3, #24]
}
 81034e6:	bf00      	nop
 81034e8:	370c      	adds	r7, #12
 81034ea:	46bd      	mov	sp, r7
 81034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034f0:	4770      	bx	lr
	...

081034f4 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81034f4:	b480      	push	{r7}
 81034f6:	b083      	sub	sp, #12
 81034f8:	af00      	add	r7, sp, #0
 81034fa:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81034fc:	4b05      	ldr	r3, [pc, #20]	; (8103514 <HAL_HSEM_ActivateNotification+0x20>)
 81034fe:	681a      	ldr	r2, [r3, #0]
 8103500:	4904      	ldr	r1, [pc, #16]	; (8103514 <HAL_HSEM_ActivateNotification+0x20>)
 8103502:	687b      	ldr	r3, [r7, #4]
 8103504:	4313      	orrs	r3, r2
 8103506:	600b      	str	r3, [r1, #0]
#endif
}
 8103508:	bf00      	nop
 810350a:	370c      	adds	r7, #12
 810350c:	46bd      	mov	sp, r7
 810350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103512:	4770      	bx	lr
 8103514:	58026510 	.word	0x58026510

08103518 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8103518:	b580      	push	{r7, lr}
 810351a:	b084      	sub	sp, #16
 810351c:	af00      	add	r7, sp, #0
 810351e:	60f8      	str	r0, [r7, #12]
 8103520:	460b      	mov	r3, r1
 8103522:	607a      	str	r2, [r7, #4]
 8103524:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8103526:	4b37      	ldr	r3, [pc, #220]	; (8103604 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103528:	681b      	ldr	r3, [r3, #0]
 810352a:	f023 0201 	bic.w	r2, r3, #1
 810352e:	4935      	ldr	r1, [pc, #212]	; (8103604 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103530:	68fb      	ldr	r3, [r7, #12]
 8103532:	4313      	orrs	r3, r2
 8103534:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8103536:	687b      	ldr	r3, [r7, #4]
 8103538:	2b00      	cmp	r3, #0
 810353a:	d123      	bne.n	8103584 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 810353c:	f7ff f898 	bl	8102670 <HAL_GetCurrentCPUID>
 8103540:	4603      	mov	r3, r0
 8103542:	2b03      	cmp	r3, #3
 8103544:	d158      	bne.n	81035f8 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8103546:	4b2f      	ldr	r3, [pc, #188]	; (8103604 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103548:	691b      	ldr	r3, [r3, #16]
 810354a:	4a2e      	ldr	r2, [pc, #184]	; (8103604 <HAL_PWREx_EnterSTOPMode+0xec>)
 810354c:	f023 0301 	bic.w	r3, r3, #1
 8103550:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103552:	4b2d      	ldr	r3, [pc, #180]	; (8103608 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103554:	691b      	ldr	r3, [r3, #16]
 8103556:	4a2c      	ldr	r2, [pc, #176]	; (8103608 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103558:	f043 0304 	orr.w	r3, r3, #4
 810355c:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 810355e:	f3bf 8f4f 	dsb	sy
}
 8103562:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8103564:	f3bf 8f6f 	isb	sy
}
 8103568:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810356a:	7afb      	ldrb	r3, [r7, #11]
 810356c:	2b01      	cmp	r3, #1
 810356e:	d101      	bne.n	8103574 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8103570:	bf30      	wfi
 8103572:	e000      	b.n	8103576 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8103574:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103576:	4b24      	ldr	r3, [pc, #144]	; (8103608 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103578:	691b      	ldr	r3, [r3, #16]
 810357a:	4a23      	ldr	r2, [pc, #140]	; (8103608 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810357c:	f023 0304 	bic.w	r3, r3, #4
 8103580:	6113      	str	r3, [r2, #16]
 8103582:	e03c      	b.n	81035fe <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8103584:	687b      	ldr	r3, [r7, #4]
 8103586:	2b01      	cmp	r3, #1
 8103588:	d123      	bne.n	81035d2 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 810358a:	f7ff f871 	bl	8102670 <HAL_GetCurrentCPUID>
 810358e:	4603      	mov	r3, r0
 8103590:	2b01      	cmp	r3, #1
 8103592:	d133      	bne.n	81035fc <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8103594:	4b1b      	ldr	r3, [pc, #108]	; (8103604 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103596:	695b      	ldr	r3, [r3, #20]
 8103598:	4a1a      	ldr	r2, [pc, #104]	; (8103604 <HAL_PWREx_EnterSTOPMode+0xec>)
 810359a:	f023 0302 	bic.w	r3, r3, #2
 810359e:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81035a0:	4b19      	ldr	r3, [pc, #100]	; (8103608 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81035a2:	691b      	ldr	r3, [r3, #16]
 81035a4:	4a18      	ldr	r2, [pc, #96]	; (8103608 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81035a6:	f043 0304 	orr.w	r3, r3, #4
 81035aa:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81035ac:	f3bf 8f4f 	dsb	sy
}
 81035b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81035b2:	f3bf 8f6f 	isb	sy
}
 81035b6:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81035b8:	7afb      	ldrb	r3, [r7, #11]
 81035ba:	2b01      	cmp	r3, #1
 81035bc:	d101      	bne.n	81035c2 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81035be:	bf30      	wfi
 81035c0:	e000      	b.n	81035c4 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81035c2:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81035c4:	4b10      	ldr	r3, [pc, #64]	; (8103608 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81035c6:	691b      	ldr	r3, [r3, #16]
 81035c8:	4a0f      	ldr	r2, [pc, #60]	; (8103608 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81035ca:	f023 0304 	bic.w	r3, r3, #4
 81035ce:	6113      	str	r3, [r2, #16]
 81035d0:	e015      	b.n	81035fe <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81035d2:	f7ff f84d 	bl	8102670 <HAL_GetCurrentCPUID>
 81035d6:	4603      	mov	r3, r0
 81035d8:	2b03      	cmp	r3, #3
 81035da:	d106      	bne.n	81035ea <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 81035dc:	4b09      	ldr	r3, [pc, #36]	; (8103604 <HAL_PWREx_EnterSTOPMode+0xec>)
 81035de:	691b      	ldr	r3, [r3, #16]
 81035e0:	4a08      	ldr	r2, [pc, #32]	; (8103604 <HAL_PWREx_EnterSTOPMode+0xec>)
 81035e2:	f023 0304 	bic.w	r3, r3, #4
 81035e6:	6113      	str	r3, [r2, #16]
 81035e8:	e009      	b.n	81035fe <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 81035ea:	4b06      	ldr	r3, [pc, #24]	; (8103604 <HAL_PWREx_EnterSTOPMode+0xec>)
 81035ec:	695b      	ldr	r3, [r3, #20]
 81035ee:	4a05      	ldr	r2, [pc, #20]	; (8103604 <HAL_PWREx_EnterSTOPMode+0xec>)
 81035f0:	f023 0304 	bic.w	r3, r3, #4
 81035f4:	6153      	str	r3, [r2, #20]
 81035f6:	e002      	b.n	81035fe <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81035f8:	bf00      	nop
 81035fa:	e000      	b.n	81035fe <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81035fc:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 81035fe:	3710      	adds	r7, #16
 8103600:	46bd      	mov	sp, r7
 8103602:	bd80      	pop	{r7, pc}
 8103604:	58024800 	.word	0x58024800
 8103608:	e000ed00 	.word	0xe000ed00

0810360c <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 810360c:	b580      	push	{r7, lr}
 810360e:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8103610:	f7ff f82e 	bl	8102670 <HAL_GetCurrentCPUID>
 8103614:	4603      	mov	r3, r0
 8103616:	2b03      	cmp	r3, #3
 8103618:	d101      	bne.n	810361e <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810361a:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 810361c:	e001      	b.n	8103622 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 810361e:	bf40      	sev
    __WFE ();
 8103620:	bf20      	wfe
}
 8103622:	bf00      	nop
 8103624:	bd80      	pop	{r7, pc}
	...

08103628 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8103628:	b480      	push	{r7}
 810362a:	b089      	sub	sp, #36	; 0x24
 810362c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 810362e:	4bb3      	ldr	r3, [pc, #716]	; (81038fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103630:	691b      	ldr	r3, [r3, #16]
 8103632:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8103636:	2b18      	cmp	r3, #24
 8103638:	f200 8155 	bhi.w	81038e6 <HAL_RCC_GetSysClockFreq+0x2be>
 810363c:	a201      	add	r2, pc, #4	; (adr r2, 8103644 <HAL_RCC_GetSysClockFreq+0x1c>)
 810363e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103642:	bf00      	nop
 8103644:	081036a9 	.word	0x081036a9
 8103648:	081038e7 	.word	0x081038e7
 810364c:	081038e7 	.word	0x081038e7
 8103650:	081038e7 	.word	0x081038e7
 8103654:	081038e7 	.word	0x081038e7
 8103658:	081038e7 	.word	0x081038e7
 810365c:	081038e7 	.word	0x081038e7
 8103660:	081038e7 	.word	0x081038e7
 8103664:	081036cf 	.word	0x081036cf
 8103668:	081038e7 	.word	0x081038e7
 810366c:	081038e7 	.word	0x081038e7
 8103670:	081038e7 	.word	0x081038e7
 8103674:	081038e7 	.word	0x081038e7
 8103678:	081038e7 	.word	0x081038e7
 810367c:	081038e7 	.word	0x081038e7
 8103680:	081038e7 	.word	0x081038e7
 8103684:	081036d5 	.word	0x081036d5
 8103688:	081038e7 	.word	0x081038e7
 810368c:	081038e7 	.word	0x081038e7
 8103690:	081038e7 	.word	0x081038e7
 8103694:	081038e7 	.word	0x081038e7
 8103698:	081038e7 	.word	0x081038e7
 810369c:	081038e7 	.word	0x081038e7
 81036a0:	081038e7 	.word	0x081038e7
 81036a4:	081036db 	.word	0x081036db
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81036a8:	4b94      	ldr	r3, [pc, #592]	; (81038fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 81036aa:	681b      	ldr	r3, [r3, #0]
 81036ac:	f003 0320 	and.w	r3, r3, #32
 81036b0:	2b00      	cmp	r3, #0
 81036b2:	d009      	beq.n	81036c8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81036b4:	4b91      	ldr	r3, [pc, #580]	; (81038fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 81036b6:	681b      	ldr	r3, [r3, #0]
 81036b8:	08db      	lsrs	r3, r3, #3
 81036ba:	f003 0303 	and.w	r3, r3, #3
 81036be:	4a90      	ldr	r2, [pc, #576]	; (8103900 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81036c0:	fa22 f303 	lsr.w	r3, r2, r3
 81036c4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 81036c6:	e111      	b.n	81038ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81036c8:	4b8d      	ldr	r3, [pc, #564]	; (8103900 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81036ca:	61bb      	str	r3, [r7, #24]
    break;
 81036cc:	e10e      	b.n	81038ec <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 81036ce:	4b8d      	ldr	r3, [pc, #564]	; (8103904 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81036d0:	61bb      	str	r3, [r7, #24]
    break;
 81036d2:	e10b      	b.n	81038ec <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 81036d4:	4b8c      	ldr	r3, [pc, #560]	; (8103908 <HAL_RCC_GetSysClockFreq+0x2e0>)
 81036d6:	61bb      	str	r3, [r7, #24]
    break;
 81036d8:	e108      	b.n	81038ec <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81036da:	4b88      	ldr	r3, [pc, #544]	; (81038fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 81036dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81036de:	f003 0303 	and.w	r3, r3, #3
 81036e2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 81036e4:	4b85      	ldr	r3, [pc, #532]	; (81038fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 81036e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81036e8:	091b      	lsrs	r3, r3, #4
 81036ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81036ee:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 81036f0:	4b82      	ldr	r3, [pc, #520]	; (81038fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 81036f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81036f4:	f003 0301 	and.w	r3, r3, #1
 81036f8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 81036fa:	4b80      	ldr	r3, [pc, #512]	; (81038fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 81036fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81036fe:	08db      	lsrs	r3, r3, #3
 8103700:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8103704:	68fa      	ldr	r2, [r7, #12]
 8103706:	fb02 f303 	mul.w	r3, r2, r3
 810370a:	ee07 3a90 	vmov	s15, r3
 810370e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103712:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8103716:	693b      	ldr	r3, [r7, #16]
 8103718:	2b00      	cmp	r3, #0
 810371a:	f000 80e1 	beq.w	81038e0 <HAL_RCC_GetSysClockFreq+0x2b8>
 810371e:	697b      	ldr	r3, [r7, #20]
 8103720:	2b02      	cmp	r3, #2
 8103722:	f000 8083 	beq.w	810382c <HAL_RCC_GetSysClockFreq+0x204>
 8103726:	697b      	ldr	r3, [r7, #20]
 8103728:	2b02      	cmp	r3, #2
 810372a:	f200 80a1 	bhi.w	8103870 <HAL_RCC_GetSysClockFreq+0x248>
 810372e:	697b      	ldr	r3, [r7, #20]
 8103730:	2b00      	cmp	r3, #0
 8103732:	d003      	beq.n	810373c <HAL_RCC_GetSysClockFreq+0x114>
 8103734:	697b      	ldr	r3, [r7, #20]
 8103736:	2b01      	cmp	r3, #1
 8103738:	d056      	beq.n	81037e8 <HAL_RCC_GetSysClockFreq+0x1c0>
 810373a:	e099      	b.n	8103870 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810373c:	4b6f      	ldr	r3, [pc, #444]	; (81038fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 810373e:	681b      	ldr	r3, [r3, #0]
 8103740:	f003 0320 	and.w	r3, r3, #32
 8103744:	2b00      	cmp	r3, #0
 8103746:	d02d      	beq.n	81037a4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8103748:	4b6c      	ldr	r3, [pc, #432]	; (81038fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 810374a:	681b      	ldr	r3, [r3, #0]
 810374c:	08db      	lsrs	r3, r3, #3
 810374e:	f003 0303 	and.w	r3, r3, #3
 8103752:	4a6b      	ldr	r2, [pc, #428]	; (8103900 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103754:	fa22 f303 	lsr.w	r3, r2, r3
 8103758:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810375a:	687b      	ldr	r3, [r7, #4]
 810375c:	ee07 3a90 	vmov	s15, r3
 8103760:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103764:	693b      	ldr	r3, [r7, #16]
 8103766:	ee07 3a90 	vmov	s15, r3
 810376a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810376e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103772:	4b62      	ldr	r3, [pc, #392]	; (81038fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810377a:	ee07 3a90 	vmov	s15, r3
 810377e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103782:	ed97 6a02 	vldr	s12, [r7, #8]
 8103786:	eddf 5a61 	vldr	s11, [pc, #388]	; 810390c <HAL_RCC_GetSysClockFreq+0x2e4>
 810378a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810378e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103792:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103796:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810379a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810379e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 81037a2:	e087      	b.n	81038b4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81037a4:	693b      	ldr	r3, [r7, #16]
 81037a6:	ee07 3a90 	vmov	s15, r3
 81037aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81037ae:	eddf 6a58 	vldr	s13, [pc, #352]	; 8103910 <HAL_RCC_GetSysClockFreq+0x2e8>
 81037b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81037b6:	4b51      	ldr	r3, [pc, #324]	; (81038fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 81037b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81037ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81037be:	ee07 3a90 	vmov	s15, r3
 81037c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81037c6:	ed97 6a02 	vldr	s12, [r7, #8]
 81037ca:	eddf 5a50 	vldr	s11, [pc, #320]	; 810390c <HAL_RCC_GetSysClockFreq+0x2e4>
 81037ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81037d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81037d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81037da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81037de:	ee67 7a27 	vmul.f32	s15, s14, s15
 81037e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81037e6:	e065      	b.n	81038b4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81037e8:	693b      	ldr	r3, [r7, #16]
 81037ea:	ee07 3a90 	vmov	s15, r3
 81037ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81037f2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8103914 <HAL_RCC_GetSysClockFreq+0x2ec>
 81037f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81037fa:	4b40      	ldr	r3, [pc, #256]	; (81038fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 81037fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81037fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103802:	ee07 3a90 	vmov	s15, r3
 8103806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810380a:	ed97 6a02 	vldr	s12, [r7, #8]
 810380e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 810390c <HAL_RCC_GetSysClockFreq+0x2e4>
 8103812:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103816:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810381a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810381e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103826:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810382a:	e043      	b.n	81038b4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810382c:	693b      	ldr	r3, [r7, #16]
 810382e:	ee07 3a90 	vmov	s15, r3
 8103832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103836:	eddf 6a38 	vldr	s13, [pc, #224]	; 8103918 <HAL_RCC_GetSysClockFreq+0x2f0>
 810383a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810383e:	4b2f      	ldr	r3, [pc, #188]	; (81038fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103846:	ee07 3a90 	vmov	s15, r3
 810384a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810384e:	ed97 6a02 	vldr	s12, [r7, #8]
 8103852:	eddf 5a2e 	vldr	s11, [pc, #184]	; 810390c <HAL_RCC_GetSysClockFreq+0x2e4>
 8103856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810385a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810385e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103866:	ee67 7a27 	vmul.f32	s15, s14, s15
 810386a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810386e:	e021      	b.n	81038b4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103870:	693b      	ldr	r3, [r7, #16]
 8103872:	ee07 3a90 	vmov	s15, r3
 8103876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810387a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8103914 <HAL_RCC_GetSysClockFreq+0x2ec>
 810387e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103882:	4b1e      	ldr	r3, [pc, #120]	; (81038fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810388a:	ee07 3a90 	vmov	s15, r3
 810388e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103892:	ed97 6a02 	vldr	s12, [r7, #8]
 8103896:	eddf 5a1d 	vldr	s11, [pc, #116]	; 810390c <HAL_RCC_GetSysClockFreq+0x2e4>
 810389a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810389e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81038a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81038a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81038aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 81038ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81038b2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 81038b4:	4b11      	ldr	r3, [pc, #68]	; (81038fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 81038b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81038b8:	0a5b      	lsrs	r3, r3, #9
 81038ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81038be:	3301      	adds	r3, #1
 81038c0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 81038c2:	683b      	ldr	r3, [r7, #0]
 81038c4:	ee07 3a90 	vmov	s15, r3
 81038c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81038cc:	edd7 6a07 	vldr	s13, [r7, #28]
 81038d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81038d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81038d8:	ee17 3a90 	vmov	r3, s15
 81038dc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 81038de:	e005      	b.n	81038ec <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 81038e0:	2300      	movs	r3, #0
 81038e2:	61bb      	str	r3, [r7, #24]
    break;
 81038e4:	e002      	b.n	81038ec <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 81038e6:	4b07      	ldr	r3, [pc, #28]	; (8103904 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81038e8:	61bb      	str	r3, [r7, #24]
    break;
 81038ea:	bf00      	nop
  }

  return sysclockfreq;
 81038ec:	69bb      	ldr	r3, [r7, #24]
}
 81038ee:	4618      	mov	r0, r3
 81038f0:	3724      	adds	r7, #36	; 0x24
 81038f2:	46bd      	mov	sp, r7
 81038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81038f8:	4770      	bx	lr
 81038fa:	bf00      	nop
 81038fc:	58024400 	.word	0x58024400
 8103900:	03d09000 	.word	0x03d09000
 8103904:	003d0900 	.word	0x003d0900
 8103908:	007a1200 	.word	0x007a1200
 810390c:	46000000 	.word	0x46000000
 8103910:	4c742400 	.word	0x4c742400
 8103914:	4a742400 	.word	0x4a742400
 8103918:	4af42400 	.word	0x4af42400

0810391c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 810391c:	b580      	push	{r7, lr}
 810391e:	b082      	sub	sp, #8
 8103920:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8103922:	f7ff fe81 	bl	8103628 <HAL_RCC_GetSysClockFreq>
 8103926:	4602      	mov	r2, r0
 8103928:	4b11      	ldr	r3, [pc, #68]	; (8103970 <HAL_RCC_GetHCLKFreq+0x54>)
 810392a:	699b      	ldr	r3, [r3, #24]
 810392c:	0a1b      	lsrs	r3, r3, #8
 810392e:	f003 030f 	and.w	r3, r3, #15
 8103932:	4910      	ldr	r1, [pc, #64]	; (8103974 <HAL_RCC_GetHCLKFreq+0x58>)
 8103934:	5ccb      	ldrb	r3, [r1, r3]
 8103936:	f003 031f 	and.w	r3, r3, #31
 810393a:	fa22 f303 	lsr.w	r3, r2, r3
 810393e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8103940:	4b0b      	ldr	r3, [pc, #44]	; (8103970 <HAL_RCC_GetHCLKFreq+0x54>)
 8103942:	699b      	ldr	r3, [r3, #24]
 8103944:	f003 030f 	and.w	r3, r3, #15
 8103948:	4a0a      	ldr	r2, [pc, #40]	; (8103974 <HAL_RCC_GetHCLKFreq+0x58>)
 810394a:	5cd3      	ldrb	r3, [r2, r3]
 810394c:	f003 031f 	and.w	r3, r3, #31
 8103950:	687a      	ldr	r2, [r7, #4]
 8103952:	fa22 f303 	lsr.w	r3, r2, r3
 8103956:	4a08      	ldr	r2, [pc, #32]	; (8103978 <HAL_RCC_GetHCLKFreq+0x5c>)
 8103958:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810395a:	4b07      	ldr	r3, [pc, #28]	; (8103978 <HAL_RCC_GetHCLKFreq+0x5c>)
 810395c:	681b      	ldr	r3, [r3, #0]
 810395e:	4a07      	ldr	r2, [pc, #28]	; (810397c <HAL_RCC_GetHCLKFreq+0x60>)
 8103960:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8103962:	4b05      	ldr	r3, [pc, #20]	; (8103978 <HAL_RCC_GetHCLKFreq+0x5c>)
 8103964:	681b      	ldr	r3, [r3, #0]
}
 8103966:	4618      	mov	r0, r3
 8103968:	3708      	adds	r7, #8
 810396a:	46bd      	mov	sp, r7
 810396c:	bd80      	pop	{r7, pc}
 810396e:	bf00      	nop
 8103970:	58024400 	.word	0x58024400
 8103974:	0810e6f8 	.word	0x0810e6f8
 8103978:	10000004 	.word	0x10000004
 810397c:	10000000 	.word	0x10000000

08103980 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8103980:	b580      	push	{r7, lr}
 8103982:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8103984:	f7ff ffca 	bl	810391c <HAL_RCC_GetHCLKFreq>
 8103988:	4602      	mov	r2, r0
 810398a:	4b06      	ldr	r3, [pc, #24]	; (81039a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 810398c:	69db      	ldr	r3, [r3, #28]
 810398e:	091b      	lsrs	r3, r3, #4
 8103990:	f003 0307 	and.w	r3, r3, #7
 8103994:	4904      	ldr	r1, [pc, #16]	; (81039a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8103996:	5ccb      	ldrb	r3, [r1, r3]
 8103998:	f003 031f 	and.w	r3, r3, #31
 810399c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 81039a0:	4618      	mov	r0, r3
 81039a2:	bd80      	pop	{r7, pc}
 81039a4:	58024400 	.word	0x58024400
 81039a8:	0810e6f8 	.word	0x0810e6f8

081039ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 81039ac:	b580      	push	{r7, lr}
 81039ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 81039b0:	f7ff ffb4 	bl	810391c <HAL_RCC_GetHCLKFreq>
 81039b4:	4602      	mov	r2, r0
 81039b6:	4b06      	ldr	r3, [pc, #24]	; (81039d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 81039b8:	69db      	ldr	r3, [r3, #28]
 81039ba:	0a1b      	lsrs	r3, r3, #8
 81039bc:	f003 0307 	and.w	r3, r3, #7
 81039c0:	4904      	ldr	r1, [pc, #16]	; (81039d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 81039c2:	5ccb      	ldrb	r3, [r1, r3]
 81039c4:	f003 031f 	and.w	r3, r3, #31
 81039c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 81039cc:	4618      	mov	r0, r3
 81039ce:	bd80      	pop	{r7, pc}
 81039d0:	58024400 	.word	0x58024400
 81039d4:	0810e6f8 	.word	0x0810e6f8

081039d8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 81039d8:	b580      	push	{r7, lr}
 81039da:	b086      	sub	sp, #24
 81039dc:	af00      	add	r7, sp, #0
 81039de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 81039e0:	2300      	movs	r3, #0
 81039e2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 81039e4:	2300      	movs	r3, #0
 81039e6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 81039e8:	687b      	ldr	r3, [r7, #4]
 81039ea:	681b      	ldr	r3, [r3, #0]
 81039ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81039f0:	2b00      	cmp	r3, #0
 81039f2:	d03f      	beq.n	8103a74 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 81039f4:	687b      	ldr	r3, [r7, #4]
 81039f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81039f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81039fc:	d02a      	beq.n	8103a54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 81039fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103a02:	d824      	bhi.n	8103a4e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8103a04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103a08:	d018      	beq.n	8103a3c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8103a0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103a0e:	d81e      	bhi.n	8103a4e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8103a10:	2b00      	cmp	r3, #0
 8103a12:	d003      	beq.n	8103a1c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8103a14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103a18:	d007      	beq.n	8103a2a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8103a1a:	e018      	b.n	8103a4e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103a1c:	4ba3      	ldr	r3, [pc, #652]	; (8103cac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103a20:	4aa2      	ldr	r2, [pc, #648]	; (8103cac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103a22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103a26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8103a28:	e015      	b.n	8103a56 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8103a2a:	687b      	ldr	r3, [r7, #4]
 8103a2c:	3304      	adds	r3, #4
 8103a2e:	2102      	movs	r1, #2
 8103a30:	4618      	mov	r0, r3
 8103a32:	f001 f9d5 	bl	8104de0 <RCCEx_PLL2_Config>
 8103a36:	4603      	mov	r3, r0
 8103a38:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8103a3a:	e00c      	b.n	8103a56 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103a3c:	687b      	ldr	r3, [r7, #4]
 8103a3e:	3324      	adds	r3, #36	; 0x24
 8103a40:	2102      	movs	r1, #2
 8103a42:	4618      	mov	r0, r3
 8103a44:	f001 fa7e 	bl	8104f44 <RCCEx_PLL3_Config>
 8103a48:	4603      	mov	r3, r0
 8103a4a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8103a4c:	e003      	b.n	8103a56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103a4e:	2301      	movs	r3, #1
 8103a50:	75fb      	strb	r3, [r7, #23]
      break;
 8103a52:	e000      	b.n	8103a56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8103a54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103a56:	7dfb      	ldrb	r3, [r7, #23]
 8103a58:	2b00      	cmp	r3, #0
 8103a5a:	d109      	bne.n	8103a70 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8103a5c:	4b93      	ldr	r3, [pc, #588]	; (8103cac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103a5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103a60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8103a64:	687b      	ldr	r3, [r7, #4]
 8103a66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103a68:	4990      	ldr	r1, [pc, #576]	; (8103cac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103a6a:	4313      	orrs	r3, r2
 8103a6c:	650b      	str	r3, [r1, #80]	; 0x50
 8103a6e:	e001      	b.n	8103a74 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103a70:	7dfb      	ldrb	r3, [r7, #23]
 8103a72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8103a74:	687b      	ldr	r3, [r7, #4]
 8103a76:	681b      	ldr	r3, [r3, #0]
 8103a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103a7c:	2b00      	cmp	r3, #0
 8103a7e:	d03d      	beq.n	8103afc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8103a80:	687b      	ldr	r3, [r7, #4]
 8103a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103a84:	2b04      	cmp	r3, #4
 8103a86:	d826      	bhi.n	8103ad6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8103a88:	a201      	add	r2, pc, #4	; (adr r2, 8103a90 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8103a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103a8e:	bf00      	nop
 8103a90:	08103aa5 	.word	0x08103aa5
 8103a94:	08103ab3 	.word	0x08103ab3
 8103a98:	08103ac5 	.word	0x08103ac5
 8103a9c:	08103add 	.word	0x08103add
 8103aa0:	08103add 	.word	0x08103add
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103aa4:	4b81      	ldr	r3, [pc, #516]	; (8103cac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103aa8:	4a80      	ldr	r2, [pc, #512]	; (8103cac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103aaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103aae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103ab0:	e015      	b.n	8103ade <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103ab2:	687b      	ldr	r3, [r7, #4]
 8103ab4:	3304      	adds	r3, #4
 8103ab6:	2100      	movs	r1, #0
 8103ab8:	4618      	mov	r0, r3
 8103aba:	f001 f991 	bl	8104de0 <RCCEx_PLL2_Config>
 8103abe:	4603      	mov	r3, r0
 8103ac0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103ac2:	e00c      	b.n	8103ade <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8103ac4:	687b      	ldr	r3, [r7, #4]
 8103ac6:	3324      	adds	r3, #36	; 0x24
 8103ac8:	2100      	movs	r1, #0
 8103aca:	4618      	mov	r0, r3
 8103acc:	f001 fa3a 	bl	8104f44 <RCCEx_PLL3_Config>
 8103ad0:	4603      	mov	r3, r0
 8103ad2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103ad4:	e003      	b.n	8103ade <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103ad6:	2301      	movs	r3, #1
 8103ad8:	75fb      	strb	r3, [r7, #23]
      break;
 8103ada:	e000      	b.n	8103ade <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8103adc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103ade:	7dfb      	ldrb	r3, [r7, #23]
 8103ae0:	2b00      	cmp	r3, #0
 8103ae2:	d109      	bne.n	8103af8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8103ae4:	4b71      	ldr	r3, [pc, #452]	; (8103cac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103ae8:	f023 0207 	bic.w	r2, r3, #7
 8103aec:	687b      	ldr	r3, [r7, #4]
 8103aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103af0:	496e      	ldr	r1, [pc, #440]	; (8103cac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103af2:	4313      	orrs	r3, r2
 8103af4:	650b      	str	r3, [r1, #80]	; 0x50
 8103af6:	e001      	b.n	8103afc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103af8:	7dfb      	ldrb	r3, [r7, #23]
 8103afa:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8103afc:	687b      	ldr	r3, [r7, #4]
 8103afe:	681b      	ldr	r3, [r3, #0]
 8103b00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8103b04:	2b00      	cmp	r3, #0
 8103b06:	d042      	beq.n	8103b8e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8103b08:	687b      	ldr	r3, [r7, #4]
 8103b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103b0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103b10:	d02b      	beq.n	8103b6a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8103b12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103b16:	d825      	bhi.n	8103b64 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8103b18:	2bc0      	cmp	r3, #192	; 0xc0
 8103b1a:	d028      	beq.n	8103b6e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8103b1c:	2bc0      	cmp	r3, #192	; 0xc0
 8103b1e:	d821      	bhi.n	8103b64 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8103b20:	2b80      	cmp	r3, #128	; 0x80
 8103b22:	d016      	beq.n	8103b52 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8103b24:	2b80      	cmp	r3, #128	; 0x80
 8103b26:	d81d      	bhi.n	8103b64 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8103b28:	2b00      	cmp	r3, #0
 8103b2a:	d002      	beq.n	8103b32 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8103b2c:	2b40      	cmp	r3, #64	; 0x40
 8103b2e:	d007      	beq.n	8103b40 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8103b30:	e018      	b.n	8103b64 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103b32:	4b5e      	ldr	r3, [pc, #376]	; (8103cac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103b36:	4a5d      	ldr	r2, [pc, #372]	; (8103cac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103b3c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8103b3e:	e017      	b.n	8103b70 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103b40:	687b      	ldr	r3, [r7, #4]
 8103b42:	3304      	adds	r3, #4
 8103b44:	2100      	movs	r1, #0
 8103b46:	4618      	mov	r0, r3
 8103b48:	f001 f94a 	bl	8104de0 <RCCEx_PLL2_Config>
 8103b4c:	4603      	mov	r3, r0
 8103b4e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8103b50:	e00e      	b.n	8103b70 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8103b52:	687b      	ldr	r3, [r7, #4]
 8103b54:	3324      	adds	r3, #36	; 0x24
 8103b56:	2100      	movs	r1, #0
 8103b58:	4618      	mov	r0, r3
 8103b5a:	f001 f9f3 	bl	8104f44 <RCCEx_PLL3_Config>
 8103b5e:	4603      	mov	r3, r0
 8103b60:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8103b62:	e005      	b.n	8103b70 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103b64:	2301      	movs	r3, #1
 8103b66:	75fb      	strb	r3, [r7, #23]
      break;
 8103b68:	e002      	b.n	8103b70 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8103b6a:	bf00      	nop
 8103b6c:	e000      	b.n	8103b70 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8103b6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103b70:	7dfb      	ldrb	r3, [r7, #23]
 8103b72:	2b00      	cmp	r3, #0
 8103b74:	d109      	bne.n	8103b8a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8103b76:	4b4d      	ldr	r3, [pc, #308]	; (8103cac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103b78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103b7a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8103b7e:	687b      	ldr	r3, [r7, #4]
 8103b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103b82:	494a      	ldr	r1, [pc, #296]	; (8103cac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103b84:	4313      	orrs	r3, r2
 8103b86:	650b      	str	r3, [r1, #80]	; 0x50
 8103b88:	e001      	b.n	8103b8e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103b8a:	7dfb      	ldrb	r3, [r7, #23]
 8103b8c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8103b8e:	687b      	ldr	r3, [r7, #4]
 8103b90:	681b      	ldr	r3, [r3, #0]
 8103b92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8103b96:	2b00      	cmp	r3, #0
 8103b98:	d049      	beq.n	8103c2e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8103b9a:	687b      	ldr	r3, [r7, #4]
 8103b9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8103ba0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8103ba4:	d030      	beq.n	8103c08 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8103ba6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8103baa:	d82a      	bhi.n	8103c02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8103bac:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8103bb0:	d02c      	beq.n	8103c0c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8103bb2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8103bb6:	d824      	bhi.n	8103c02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8103bb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103bbc:	d018      	beq.n	8103bf0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8103bbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103bc2:	d81e      	bhi.n	8103c02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8103bc4:	2b00      	cmp	r3, #0
 8103bc6:	d003      	beq.n	8103bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8103bc8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103bcc:	d007      	beq.n	8103bde <HAL_RCCEx_PeriphCLKConfig+0x206>
 8103bce:	e018      	b.n	8103c02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103bd0:	4b36      	ldr	r3, [pc, #216]	; (8103cac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103bd4:	4a35      	ldr	r2, [pc, #212]	; (8103cac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103bd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103bda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103bdc:	e017      	b.n	8103c0e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103bde:	687b      	ldr	r3, [r7, #4]
 8103be0:	3304      	adds	r3, #4
 8103be2:	2100      	movs	r1, #0
 8103be4:	4618      	mov	r0, r3
 8103be6:	f001 f8fb 	bl	8104de0 <RCCEx_PLL2_Config>
 8103bea:	4603      	mov	r3, r0
 8103bec:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8103bee:	e00e      	b.n	8103c0e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8103bf0:	687b      	ldr	r3, [r7, #4]
 8103bf2:	3324      	adds	r3, #36	; 0x24
 8103bf4:	2100      	movs	r1, #0
 8103bf6:	4618      	mov	r0, r3
 8103bf8:	f001 f9a4 	bl	8104f44 <RCCEx_PLL3_Config>
 8103bfc:	4603      	mov	r3, r0
 8103bfe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103c00:	e005      	b.n	8103c0e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8103c02:	2301      	movs	r3, #1
 8103c04:	75fb      	strb	r3, [r7, #23]
      break;
 8103c06:	e002      	b.n	8103c0e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8103c08:	bf00      	nop
 8103c0a:	e000      	b.n	8103c0e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8103c0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103c0e:	7dfb      	ldrb	r3, [r7, #23]
 8103c10:	2b00      	cmp	r3, #0
 8103c12:	d10a      	bne.n	8103c2a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8103c14:	4b25      	ldr	r3, [pc, #148]	; (8103cac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103c18:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8103c1c:	687b      	ldr	r3, [r7, #4]
 8103c1e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8103c22:	4922      	ldr	r1, [pc, #136]	; (8103cac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103c24:	4313      	orrs	r3, r2
 8103c26:	658b      	str	r3, [r1, #88]	; 0x58
 8103c28:	e001      	b.n	8103c2e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103c2a:	7dfb      	ldrb	r3, [r7, #23]
 8103c2c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8103c2e:	687b      	ldr	r3, [r7, #4]
 8103c30:	681b      	ldr	r3, [r3, #0]
 8103c32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8103c36:	2b00      	cmp	r3, #0
 8103c38:	d04b      	beq.n	8103cd2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8103c3a:	687b      	ldr	r3, [r7, #4]
 8103c3c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8103c40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8103c44:	d030      	beq.n	8103ca8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8103c46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8103c4a:	d82a      	bhi.n	8103ca2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8103c4c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8103c50:	d02e      	beq.n	8103cb0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8103c52:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8103c56:	d824      	bhi.n	8103ca2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8103c58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8103c5c:	d018      	beq.n	8103c90 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8103c5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8103c62:	d81e      	bhi.n	8103ca2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8103c64:	2b00      	cmp	r3, #0
 8103c66:	d003      	beq.n	8103c70 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8103c68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8103c6c:	d007      	beq.n	8103c7e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8103c6e:	e018      	b.n	8103ca2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103c70:	4b0e      	ldr	r3, [pc, #56]	; (8103cac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103c74:	4a0d      	ldr	r2, [pc, #52]	; (8103cac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103c76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103c7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103c7c:	e019      	b.n	8103cb2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103c7e:	687b      	ldr	r3, [r7, #4]
 8103c80:	3304      	adds	r3, #4
 8103c82:	2100      	movs	r1, #0
 8103c84:	4618      	mov	r0, r3
 8103c86:	f001 f8ab 	bl	8104de0 <RCCEx_PLL2_Config>
 8103c8a:	4603      	mov	r3, r0
 8103c8c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8103c8e:	e010      	b.n	8103cb2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103c90:	687b      	ldr	r3, [r7, #4]
 8103c92:	3324      	adds	r3, #36	; 0x24
 8103c94:	2100      	movs	r1, #0
 8103c96:	4618      	mov	r0, r3
 8103c98:	f001 f954 	bl	8104f44 <RCCEx_PLL3_Config>
 8103c9c:	4603      	mov	r3, r0
 8103c9e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103ca0:	e007      	b.n	8103cb2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8103ca2:	2301      	movs	r3, #1
 8103ca4:	75fb      	strb	r3, [r7, #23]
      break;
 8103ca6:	e004      	b.n	8103cb2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8103ca8:	bf00      	nop
 8103caa:	e002      	b.n	8103cb2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8103cac:	58024400 	.word	0x58024400
      break;
 8103cb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103cb2:	7dfb      	ldrb	r3, [r7, #23]
 8103cb4:	2b00      	cmp	r3, #0
 8103cb6:	d10a      	bne.n	8103cce <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8103cb8:	4b99      	ldr	r3, [pc, #612]	; (8103f20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103cbc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8103cc0:	687b      	ldr	r3, [r7, #4]
 8103cc2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8103cc6:	4996      	ldr	r1, [pc, #600]	; (8103f20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103cc8:	4313      	orrs	r3, r2
 8103cca:	658b      	str	r3, [r1, #88]	; 0x58
 8103ccc:	e001      	b.n	8103cd2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103cce:	7dfb      	ldrb	r3, [r7, #23]
 8103cd0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8103cd2:	687b      	ldr	r3, [r7, #4]
 8103cd4:	681b      	ldr	r3, [r3, #0]
 8103cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8103cda:	2b00      	cmp	r3, #0
 8103cdc:	d032      	beq.n	8103d44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8103cde:	687b      	ldr	r3, [r7, #4]
 8103ce0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103ce2:	2b30      	cmp	r3, #48	; 0x30
 8103ce4:	d01c      	beq.n	8103d20 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8103ce6:	2b30      	cmp	r3, #48	; 0x30
 8103ce8:	d817      	bhi.n	8103d1a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8103cea:	2b20      	cmp	r3, #32
 8103cec:	d00c      	beq.n	8103d08 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8103cee:	2b20      	cmp	r3, #32
 8103cf0:	d813      	bhi.n	8103d1a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8103cf2:	2b00      	cmp	r3, #0
 8103cf4:	d016      	beq.n	8103d24 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8103cf6:	2b10      	cmp	r3, #16
 8103cf8:	d10f      	bne.n	8103d1a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103cfa:	4b89      	ldr	r3, [pc, #548]	; (8103f20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103cfe:	4a88      	ldr	r2, [pc, #544]	; (8103f20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103d04:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8103d06:	e00e      	b.n	8103d26 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8103d08:	687b      	ldr	r3, [r7, #4]
 8103d0a:	3304      	adds	r3, #4
 8103d0c:	2102      	movs	r1, #2
 8103d0e:	4618      	mov	r0, r3
 8103d10:	f001 f866 	bl	8104de0 <RCCEx_PLL2_Config>
 8103d14:	4603      	mov	r3, r0
 8103d16:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8103d18:	e005      	b.n	8103d26 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8103d1a:	2301      	movs	r3, #1
 8103d1c:	75fb      	strb	r3, [r7, #23]
      break;
 8103d1e:	e002      	b.n	8103d26 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8103d20:	bf00      	nop
 8103d22:	e000      	b.n	8103d26 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8103d24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103d26:	7dfb      	ldrb	r3, [r7, #23]
 8103d28:	2b00      	cmp	r3, #0
 8103d2a:	d109      	bne.n	8103d40 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8103d2c:	4b7c      	ldr	r3, [pc, #496]	; (8103f20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103d2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103d30:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8103d34:	687b      	ldr	r3, [r7, #4]
 8103d36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103d38:	4979      	ldr	r1, [pc, #484]	; (8103f20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103d3a:	4313      	orrs	r3, r2
 8103d3c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8103d3e:	e001      	b.n	8103d44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103d40:	7dfb      	ldrb	r3, [r7, #23]
 8103d42:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8103d44:	687b      	ldr	r3, [r7, #4]
 8103d46:	681b      	ldr	r3, [r3, #0]
 8103d48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8103d4c:	2b00      	cmp	r3, #0
 8103d4e:	d047      	beq.n	8103de0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8103d50:	687b      	ldr	r3, [r7, #4]
 8103d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103d54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103d58:	d030      	beq.n	8103dbc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8103d5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103d5e:	d82a      	bhi.n	8103db6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8103d60:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8103d64:	d02c      	beq.n	8103dc0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8103d66:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8103d6a:	d824      	bhi.n	8103db6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8103d6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103d70:	d018      	beq.n	8103da4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8103d72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103d76:	d81e      	bhi.n	8103db6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8103d78:	2b00      	cmp	r3, #0
 8103d7a:	d003      	beq.n	8103d84 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8103d7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103d80:	d007      	beq.n	8103d92 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8103d82:	e018      	b.n	8103db6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103d84:	4b66      	ldr	r3, [pc, #408]	; (8103f20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103d88:	4a65      	ldr	r2, [pc, #404]	; (8103f20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103d8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103d8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8103d90:	e017      	b.n	8103dc2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103d92:	687b      	ldr	r3, [r7, #4]
 8103d94:	3304      	adds	r3, #4
 8103d96:	2100      	movs	r1, #0
 8103d98:	4618      	mov	r0, r3
 8103d9a:	f001 f821 	bl	8104de0 <RCCEx_PLL2_Config>
 8103d9e:	4603      	mov	r3, r0
 8103da0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8103da2:	e00e      	b.n	8103dc2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8103da4:	687b      	ldr	r3, [r7, #4]
 8103da6:	3324      	adds	r3, #36	; 0x24
 8103da8:	2100      	movs	r1, #0
 8103daa:	4618      	mov	r0, r3
 8103dac:	f001 f8ca 	bl	8104f44 <RCCEx_PLL3_Config>
 8103db0:	4603      	mov	r3, r0
 8103db2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8103db4:	e005      	b.n	8103dc2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103db6:	2301      	movs	r3, #1
 8103db8:	75fb      	strb	r3, [r7, #23]
      break;
 8103dba:	e002      	b.n	8103dc2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8103dbc:	bf00      	nop
 8103dbe:	e000      	b.n	8103dc2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8103dc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103dc2:	7dfb      	ldrb	r3, [r7, #23]
 8103dc4:	2b00      	cmp	r3, #0
 8103dc6:	d109      	bne.n	8103ddc <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8103dc8:	4b55      	ldr	r3, [pc, #340]	; (8103f20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103dcc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8103dd0:	687b      	ldr	r3, [r7, #4]
 8103dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103dd4:	4952      	ldr	r1, [pc, #328]	; (8103f20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103dd6:	4313      	orrs	r3, r2
 8103dd8:	650b      	str	r3, [r1, #80]	; 0x50
 8103dda:	e001      	b.n	8103de0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103ddc:	7dfb      	ldrb	r3, [r7, #23]
 8103dde:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8103de0:	687b      	ldr	r3, [r7, #4]
 8103de2:	681b      	ldr	r3, [r3, #0]
 8103de4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8103de8:	2b00      	cmp	r3, #0
 8103dea:	d049      	beq.n	8103e80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8103dec:	687b      	ldr	r3, [r7, #4]
 8103dee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103df0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8103df4:	d02e      	beq.n	8103e54 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8103df6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8103dfa:	d828      	bhi.n	8103e4e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8103dfc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8103e00:	d02a      	beq.n	8103e58 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8103e02:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8103e06:	d822      	bhi.n	8103e4e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8103e08:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103e0c:	d026      	beq.n	8103e5c <HAL_RCCEx_PeriphCLKConfig+0x484>
 8103e0e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103e12:	d81c      	bhi.n	8103e4e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8103e14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103e18:	d010      	beq.n	8103e3c <HAL_RCCEx_PeriphCLKConfig+0x464>
 8103e1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103e1e:	d816      	bhi.n	8103e4e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8103e20:	2b00      	cmp	r3, #0
 8103e22:	d01d      	beq.n	8103e60 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8103e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103e28:	d111      	bne.n	8103e4e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103e2a:	687b      	ldr	r3, [r7, #4]
 8103e2c:	3304      	adds	r3, #4
 8103e2e:	2101      	movs	r1, #1
 8103e30:	4618      	mov	r0, r3
 8103e32:	f000 ffd5 	bl	8104de0 <RCCEx_PLL2_Config>
 8103e36:	4603      	mov	r3, r0
 8103e38:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8103e3a:	e012      	b.n	8103e62 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103e3c:	687b      	ldr	r3, [r7, #4]
 8103e3e:	3324      	adds	r3, #36	; 0x24
 8103e40:	2101      	movs	r1, #1
 8103e42:	4618      	mov	r0, r3
 8103e44:	f001 f87e 	bl	8104f44 <RCCEx_PLL3_Config>
 8103e48:	4603      	mov	r3, r0
 8103e4a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8103e4c:	e009      	b.n	8103e62 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103e4e:	2301      	movs	r3, #1
 8103e50:	75fb      	strb	r3, [r7, #23]
      break;
 8103e52:	e006      	b.n	8103e62 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8103e54:	bf00      	nop
 8103e56:	e004      	b.n	8103e62 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8103e58:	bf00      	nop
 8103e5a:	e002      	b.n	8103e62 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8103e5c:	bf00      	nop
 8103e5e:	e000      	b.n	8103e62 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8103e60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103e62:	7dfb      	ldrb	r3, [r7, #23]
 8103e64:	2b00      	cmp	r3, #0
 8103e66:	d109      	bne.n	8103e7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8103e68:	4b2d      	ldr	r3, [pc, #180]	; (8103f20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103e6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103e6c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8103e70:	687b      	ldr	r3, [r7, #4]
 8103e72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103e74:	492a      	ldr	r1, [pc, #168]	; (8103f20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103e76:	4313      	orrs	r3, r2
 8103e78:	650b      	str	r3, [r1, #80]	; 0x50
 8103e7a:	e001      	b.n	8103e80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103e7c:	7dfb      	ldrb	r3, [r7, #23]
 8103e7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8103e80:	687b      	ldr	r3, [r7, #4]
 8103e82:	681b      	ldr	r3, [r3, #0]
 8103e84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8103e88:	2b00      	cmp	r3, #0
 8103e8a:	d04d      	beq.n	8103f28 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8103e8c:	687b      	ldr	r3, [r7, #4]
 8103e8e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8103e92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103e96:	d02e      	beq.n	8103ef6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8103e98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103e9c:	d828      	bhi.n	8103ef0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8103e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103ea2:	d02a      	beq.n	8103efa <HAL_RCCEx_PeriphCLKConfig+0x522>
 8103ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103ea8:	d822      	bhi.n	8103ef0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8103eaa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103eae:	d026      	beq.n	8103efe <HAL_RCCEx_PeriphCLKConfig+0x526>
 8103eb0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103eb4:	d81c      	bhi.n	8103ef0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8103eb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103eba:	d010      	beq.n	8103ede <HAL_RCCEx_PeriphCLKConfig+0x506>
 8103ebc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103ec0:	d816      	bhi.n	8103ef0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8103ec2:	2b00      	cmp	r3, #0
 8103ec4:	d01d      	beq.n	8103f02 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8103ec6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103eca:	d111      	bne.n	8103ef0 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103ecc:	687b      	ldr	r3, [r7, #4]
 8103ece:	3304      	adds	r3, #4
 8103ed0:	2101      	movs	r1, #1
 8103ed2:	4618      	mov	r0, r3
 8103ed4:	f000 ff84 	bl	8104de0 <RCCEx_PLL2_Config>
 8103ed8:	4603      	mov	r3, r0
 8103eda:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8103edc:	e012      	b.n	8103f04 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103ede:	687b      	ldr	r3, [r7, #4]
 8103ee0:	3324      	adds	r3, #36	; 0x24
 8103ee2:	2101      	movs	r1, #1
 8103ee4:	4618      	mov	r0, r3
 8103ee6:	f001 f82d 	bl	8104f44 <RCCEx_PLL3_Config>
 8103eea:	4603      	mov	r3, r0
 8103eec:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8103eee:	e009      	b.n	8103f04 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8103ef0:	2301      	movs	r3, #1
 8103ef2:	75fb      	strb	r3, [r7, #23]
      break;
 8103ef4:	e006      	b.n	8103f04 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8103ef6:	bf00      	nop
 8103ef8:	e004      	b.n	8103f04 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8103efa:	bf00      	nop
 8103efc:	e002      	b.n	8103f04 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8103efe:	bf00      	nop
 8103f00:	e000      	b.n	8103f04 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8103f02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103f04:	7dfb      	ldrb	r3, [r7, #23]
 8103f06:	2b00      	cmp	r3, #0
 8103f08:	d10c      	bne.n	8103f24 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8103f0a:	4b05      	ldr	r3, [pc, #20]	; (8103f20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103f0e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8103f12:	687b      	ldr	r3, [r7, #4]
 8103f14:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8103f18:	4901      	ldr	r1, [pc, #4]	; (8103f20 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103f1a:	4313      	orrs	r3, r2
 8103f1c:	658b      	str	r3, [r1, #88]	; 0x58
 8103f1e:	e003      	b.n	8103f28 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8103f20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103f24:	7dfb      	ldrb	r3, [r7, #23]
 8103f26:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8103f28:	687b      	ldr	r3, [r7, #4]
 8103f2a:	681b      	ldr	r3, [r3, #0]
 8103f2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8103f30:	2b00      	cmp	r3, #0
 8103f32:	d02f      	beq.n	8103f94 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8103f34:	687b      	ldr	r3, [r7, #4]
 8103f36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103f38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103f3c:	d00e      	beq.n	8103f5c <HAL_RCCEx_PeriphCLKConfig+0x584>
 8103f3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103f42:	d814      	bhi.n	8103f6e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8103f44:	2b00      	cmp	r3, #0
 8103f46:	d015      	beq.n	8103f74 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8103f48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103f4c:	d10f      	bne.n	8103f6e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103f4e:	4bb0      	ldr	r3, [pc, #704]	; (8104210 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103f52:	4aaf      	ldr	r2, [pc, #700]	; (8104210 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103f58:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8103f5a:	e00c      	b.n	8103f76 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103f5c:	687b      	ldr	r3, [r7, #4]
 8103f5e:	3304      	adds	r3, #4
 8103f60:	2101      	movs	r1, #1
 8103f62:	4618      	mov	r0, r3
 8103f64:	f000 ff3c 	bl	8104de0 <RCCEx_PLL2_Config>
 8103f68:	4603      	mov	r3, r0
 8103f6a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8103f6c:	e003      	b.n	8103f76 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103f6e:	2301      	movs	r3, #1
 8103f70:	75fb      	strb	r3, [r7, #23]
      break;
 8103f72:	e000      	b.n	8103f76 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8103f74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103f76:	7dfb      	ldrb	r3, [r7, #23]
 8103f78:	2b00      	cmp	r3, #0
 8103f7a:	d109      	bne.n	8103f90 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8103f7c:	4ba4      	ldr	r3, [pc, #656]	; (8104210 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103f80:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8103f84:	687b      	ldr	r3, [r7, #4]
 8103f86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103f88:	49a1      	ldr	r1, [pc, #644]	; (8104210 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103f8a:	4313      	orrs	r3, r2
 8103f8c:	650b      	str	r3, [r1, #80]	; 0x50
 8103f8e:	e001      	b.n	8103f94 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103f90:	7dfb      	ldrb	r3, [r7, #23]
 8103f92:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8103f94:	687b      	ldr	r3, [r7, #4]
 8103f96:	681b      	ldr	r3, [r3, #0]
 8103f98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8103f9c:	2b00      	cmp	r3, #0
 8103f9e:	d032      	beq.n	8104006 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8103fa0:	687b      	ldr	r3, [r7, #4]
 8103fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103fa4:	2b03      	cmp	r3, #3
 8103fa6:	d81b      	bhi.n	8103fe0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8103fa8:	a201      	add	r2, pc, #4	; (adr r2, 8103fb0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8103faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103fae:	bf00      	nop
 8103fb0:	08103fe7 	.word	0x08103fe7
 8103fb4:	08103fc1 	.word	0x08103fc1
 8103fb8:	08103fcf 	.word	0x08103fcf
 8103fbc:	08103fe7 	.word	0x08103fe7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103fc0:	4b93      	ldr	r3, [pc, #588]	; (8104210 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103fc4:	4a92      	ldr	r2, [pc, #584]	; (8104210 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103fc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103fca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8103fcc:	e00c      	b.n	8103fe8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8103fce:	687b      	ldr	r3, [r7, #4]
 8103fd0:	3304      	adds	r3, #4
 8103fd2:	2102      	movs	r1, #2
 8103fd4:	4618      	mov	r0, r3
 8103fd6:	f000 ff03 	bl	8104de0 <RCCEx_PLL2_Config>
 8103fda:	4603      	mov	r3, r0
 8103fdc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8103fde:	e003      	b.n	8103fe8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8103fe0:	2301      	movs	r3, #1
 8103fe2:	75fb      	strb	r3, [r7, #23]
      break;
 8103fe4:	e000      	b.n	8103fe8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8103fe6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103fe8:	7dfb      	ldrb	r3, [r7, #23]
 8103fea:	2b00      	cmp	r3, #0
 8103fec:	d109      	bne.n	8104002 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8103fee:	4b88      	ldr	r3, [pc, #544]	; (8104210 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103ff2:	f023 0203 	bic.w	r2, r3, #3
 8103ff6:	687b      	ldr	r3, [r7, #4]
 8103ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103ffa:	4985      	ldr	r1, [pc, #532]	; (8104210 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103ffc:	4313      	orrs	r3, r2
 8103ffe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8104000:	e001      	b.n	8104006 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104002:	7dfb      	ldrb	r3, [r7, #23]
 8104004:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8104006:	687b      	ldr	r3, [r7, #4]
 8104008:	681b      	ldr	r3, [r3, #0]
 810400a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810400e:	2b00      	cmp	r3, #0
 8104010:	f000 8088 	beq.w	8104124 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8104014:	4b7f      	ldr	r3, [pc, #508]	; (8104214 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8104016:	681b      	ldr	r3, [r3, #0]
 8104018:	4a7e      	ldr	r2, [pc, #504]	; (8104214 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 810401a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810401e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8104020:	f7fe fa0a 	bl	8102438 <HAL_GetTick>
 8104024:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8104026:	e009      	b.n	810403c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8104028:	f7fe fa06 	bl	8102438 <HAL_GetTick>
 810402c:	4602      	mov	r2, r0
 810402e:	693b      	ldr	r3, [r7, #16]
 8104030:	1ad3      	subs	r3, r2, r3
 8104032:	2b64      	cmp	r3, #100	; 0x64
 8104034:	d902      	bls.n	810403c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8104036:	2303      	movs	r3, #3
 8104038:	75fb      	strb	r3, [r7, #23]
        break;
 810403a:	e005      	b.n	8104048 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810403c:	4b75      	ldr	r3, [pc, #468]	; (8104214 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 810403e:	681b      	ldr	r3, [r3, #0]
 8104040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104044:	2b00      	cmp	r3, #0
 8104046:	d0ef      	beq.n	8104028 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8104048:	7dfb      	ldrb	r3, [r7, #23]
 810404a:	2b00      	cmp	r3, #0
 810404c:	d168      	bne.n	8104120 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 810404e:	4b70      	ldr	r3, [pc, #448]	; (8104210 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104050:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8104052:	687b      	ldr	r3, [r7, #4]
 8104054:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8104058:	4053      	eors	r3, r2
 810405a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810405e:	2b00      	cmp	r3, #0
 8104060:	d013      	beq.n	810408a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8104062:	4b6b      	ldr	r3, [pc, #428]	; (8104210 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104066:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810406a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 810406c:	4b68      	ldr	r3, [pc, #416]	; (8104210 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810406e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104070:	4a67      	ldr	r2, [pc, #412]	; (8104210 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104072:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8104076:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8104078:	4b65      	ldr	r3, [pc, #404]	; (8104210 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810407a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810407c:	4a64      	ldr	r2, [pc, #400]	; (8104210 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810407e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8104082:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8104084:	4a62      	ldr	r2, [pc, #392]	; (8104210 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104086:	68fb      	ldr	r3, [r7, #12]
 8104088:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 810408a:	687b      	ldr	r3, [r7, #4]
 810408c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8104090:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104094:	d115      	bne.n	81040c2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8104096:	f7fe f9cf 	bl	8102438 <HAL_GetTick>
 810409a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810409c:	e00b      	b.n	81040b6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 810409e:	f7fe f9cb 	bl	8102438 <HAL_GetTick>
 81040a2:	4602      	mov	r2, r0
 81040a4:	693b      	ldr	r3, [r7, #16]
 81040a6:	1ad3      	subs	r3, r2, r3
 81040a8:	f241 3288 	movw	r2, #5000	; 0x1388
 81040ac:	4293      	cmp	r3, r2
 81040ae:	d902      	bls.n	81040b6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 81040b0:	2303      	movs	r3, #3
 81040b2:	75fb      	strb	r3, [r7, #23]
            break;
 81040b4:	e005      	b.n	81040c2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81040b6:	4b56      	ldr	r3, [pc, #344]	; (8104210 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81040b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81040ba:	f003 0302 	and.w	r3, r3, #2
 81040be:	2b00      	cmp	r3, #0
 81040c0:	d0ed      	beq.n	810409e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 81040c2:	7dfb      	ldrb	r3, [r7, #23]
 81040c4:	2b00      	cmp	r3, #0
 81040c6:	d128      	bne.n	810411a <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 81040c8:	687b      	ldr	r3, [r7, #4]
 81040ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81040ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81040d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81040d6:	d10f      	bne.n	81040f8 <HAL_RCCEx_PeriphCLKConfig+0x720>
 81040d8:	4b4d      	ldr	r3, [pc, #308]	; (8104210 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81040da:	691b      	ldr	r3, [r3, #16]
 81040dc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 81040e0:	687b      	ldr	r3, [r7, #4]
 81040e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81040e6:	091b      	lsrs	r3, r3, #4
 81040e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 81040ec:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 81040f0:	4947      	ldr	r1, [pc, #284]	; (8104210 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81040f2:	4313      	orrs	r3, r2
 81040f4:	610b      	str	r3, [r1, #16]
 81040f6:	e005      	b.n	8104104 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 81040f8:	4b45      	ldr	r3, [pc, #276]	; (8104210 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81040fa:	691b      	ldr	r3, [r3, #16]
 81040fc:	4a44      	ldr	r2, [pc, #272]	; (8104210 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81040fe:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8104102:	6113      	str	r3, [r2, #16]
 8104104:	4b42      	ldr	r3, [pc, #264]	; (8104210 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104106:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8104108:	687b      	ldr	r3, [r7, #4]
 810410a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810410e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8104112:	493f      	ldr	r1, [pc, #252]	; (8104210 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104114:	4313      	orrs	r3, r2
 8104116:	670b      	str	r3, [r1, #112]	; 0x70
 8104118:	e004      	b.n	8104124 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 810411a:	7dfb      	ldrb	r3, [r7, #23]
 810411c:	75bb      	strb	r3, [r7, #22]
 810411e:	e001      	b.n	8104124 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104120:	7dfb      	ldrb	r3, [r7, #23]
 8104122:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8104124:	687b      	ldr	r3, [r7, #4]
 8104126:	681b      	ldr	r3, [r3, #0]
 8104128:	f003 0301 	and.w	r3, r3, #1
 810412c:	2b00      	cmp	r3, #0
 810412e:	f000 8083 	beq.w	8104238 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8104132:	687b      	ldr	r3, [r7, #4]
 8104134:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8104136:	2b28      	cmp	r3, #40	; 0x28
 8104138:	d866      	bhi.n	8104208 <HAL_RCCEx_PeriphCLKConfig+0x830>
 810413a:	a201      	add	r2, pc, #4	; (adr r2, 8104140 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 810413c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104140:	08104219 	.word	0x08104219
 8104144:	08104209 	.word	0x08104209
 8104148:	08104209 	.word	0x08104209
 810414c:	08104209 	.word	0x08104209
 8104150:	08104209 	.word	0x08104209
 8104154:	08104209 	.word	0x08104209
 8104158:	08104209 	.word	0x08104209
 810415c:	08104209 	.word	0x08104209
 8104160:	081041e5 	.word	0x081041e5
 8104164:	08104209 	.word	0x08104209
 8104168:	08104209 	.word	0x08104209
 810416c:	08104209 	.word	0x08104209
 8104170:	08104209 	.word	0x08104209
 8104174:	08104209 	.word	0x08104209
 8104178:	08104209 	.word	0x08104209
 810417c:	08104209 	.word	0x08104209
 8104180:	081041f7 	.word	0x081041f7
 8104184:	08104209 	.word	0x08104209
 8104188:	08104209 	.word	0x08104209
 810418c:	08104209 	.word	0x08104209
 8104190:	08104209 	.word	0x08104209
 8104194:	08104209 	.word	0x08104209
 8104198:	08104209 	.word	0x08104209
 810419c:	08104209 	.word	0x08104209
 81041a0:	08104219 	.word	0x08104219
 81041a4:	08104209 	.word	0x08104209
 81041a8:	08104209 	.word	0x08104209
 81041ac:	08104209 	.word	0x08104209
 81041b0:	08104209 	.word	0x08104209
 81041b4:	08104209 	.word	0x08104209
 81041b8:	08104209 	.word	0x08104209
 81041bc:	08104209 	.word	0x08104209
 81041c0:	08104219 	.word	0x08104219
 81041c4:	08104209 	.word	0x08104209
 81041c8:	08104209 	.word	0x08104209
 81041cc:	08104209 	.word	0x08104209
 81041d0:	08104209 	.word	0x08104209
 81041d4:	08104209 	.word	0x08104209
 81041d8:	08104209 	.word	0x08104209
 81041dc:	08104209 	.word	0x08104209
 81041e0:	08104219 	.word	0x08104219
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81041e4:	687b      	ldr	r3, [r7, #4]
 81041e6:	3304      	adds	r3, #4
 81041e8:	2101      	movs	r1, #1
 81041ea:	4618      	mov	r0, r3
 81041ec:	f000 fdf8 	bl	8104de0 <RCCEx_PLL2_Config>
 81041f0:	4603      	mov	r3, r0
 81041f2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 81041f4:	e011      	b.n	810421a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81041f6:	687b      	ldr	r3, [r7, #4]
 81041f8:	3324      	adds	r3, #36	; 0x24
 81041fa:	2101      	movs	r1, #1
 81041fc:	4618      	mov	r0, r3
 81041fe:	f000 fea1 	bl	8104f44 <RCCEx_PLL3_Config>
 8104202:	4603      	mov	r3, r0
 8104204:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8104206:	e008      	b.n	810421a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104208:	2301      	movs	r3, #1
 810420a:	75fb      	strb	r3, [r7, #23]
      break;
 810420c:	e005      	b.n	810421a <HAL_RCCEx_PeriphCLKConfig+0x842>
 810420e:	bf00      	nop
 8104210:	58024400 	.word	0x58024400
 8104214:	58024800 	.word	0x58024800
      break;
 8104218:	bf00      	nop
    }

    if(ret == HAL_OK)
 810421a:	7dfb      	ldrb	r3, [r7, #23]
 810421c:	2b00      	cmp	r3, #0
 810421e:	d109      	bne.n	8104234 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8104220:	4b96      	ldr	r3, [pc, #600]	; (810447c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8104222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104224:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8104228:	687b      	ldr	r3, [r7, #4]
 810422a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810422c:	4993      	ldr	r1, [pc, #588]	; (810447c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810422e:	4313      	orrs	r3, r2
 8104230:	654b      	str	r3, [r1, #84]	; 0x54
 8104232:	e001      	b.n	8104238 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104234:	7dfb      	ldrb	r3, [r7, #23]
 8104236:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8104238:	687b      	ldr	r3, [r7, #4]
 810423a:	681b      	ldr	r3, [r3, #0]
 810423c:	f003 0302 	and.w	r3, r3, #2
 8104240:	2b00      	cmp	r3, #0
 8104242:	d038      	beq.n	81042b6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8104244:	687b      	ldr	r3, [r7, #4]
 8104246:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8104248:	2b05      	cmp	r3, #5
 810424a:	d821      	bhi.n	8104290 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 810424c:	a201      	add	r2, pc, #4	; (adr r2, 8104254 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 810424e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104252:	bf00      	nop
 8104254:	08104297 	.word	0x08104297
 8104258:	0810426d 	.word	0x0810426d
 810425c:	0810427f 	.word	0x0810427f
 8104260:	08104297 	.word	0x08104297
 8104264:	08104297 	.word	0x08104297
 8104268:	08104297 	.word	0x08104297
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810426c:	687b      	ldr	r3, [r7, #4]
 810426e:	3304      	adds	r3, #4
 8104270:	2101      	movs	r1, #1
 8104272:	4618      	mov	r0, r3
 8104274:	f000 fdb4 	bl	8104de0 <RCCEx_PLL2_Config>
 8104278:	4603      	mov	r3, r0
 810427a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 810427c:	e00c      	b.n	8104298 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810427e:	687b      	ldr	r3, [r7, #4]
 8104280:	3324      	adds	r3, #36	; 0x24
 8104282:	2101      	movs	r1, #1
 8104284:	4618      	mov	r0, r3
 8104286:	f000 fe5d 	bl	8104f44 <RCCEx_PLL3_Config>
 810428a:	4603      	mov	r3, r0
 810428c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 810428e:	e003      	b.n	8104298 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104290:	2301      	movs	r3, #1
 8104292:	75fb      	strb	r3, [r7, #23]
      break;
 8104294:	e000      	b.n	8104298 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8104296:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104298:	7dfb      	ldrb	r3, [r7, #23]
 810429a:	2b00      	cmp	r3, #0
 810429c:	d109      	bne.n	81042b2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 810429e:	4b77      	ldr	r3, [pc, #476]	; (810447c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81042a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81042a2:	f023 0207 	bic.w	r2, r3, #7
 81042a6:	687b      	ldr	r3, [r7, #4]
 81042a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81042aa:	4974      	ldr	r1, [pc, #464]	; (810447c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81042ac:	4313      	orrs	r3, r2
 81042ae:	654b      	str	r3, [r1, #84]	; 0x54
 81042b0:	e001      	b.n	81042b6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81042b2:	7dfb      	ldrb	r3, [r7, #23]
 81042b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 81042b6:	687b      	ldr	r3, [r7, #4]
 81042b8:	681b      	ldr	r3, [r3, #0]
 81042ba:	f003 0304 	and.w	r3, r3, #4
 81042be:	2b00      	cmp	r3, #0
 81042c0:	d03a      	beq.n	8104338 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 81042c2:	687b      	ldr	r3, [r7, #4]
 81042c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81042c8:	2b05      	cmp	r3, #5
 81042ca:	d821      	bhi.n	8104310 <HAL_RCCEx_PeriphCLKConfig+0x938>
 81042cc:	a201      	add	r2, pc, #4	; (adr r2, 81042d4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 81042ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81042d2:	bf00      	nop
 81042d4:	08104317 	.word	0x08104317
 81042d8:	081042ed 	.word	0x081042ed
 81042dc:	081042ff 	.word	0x081042ff
 81042e0:	08104317 	.word	0x08104317
 81042e4:	08104317 	.word	0x08104317
 81042e8:	08104317 	.word	0x08104317
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81042ec:	687b      	ldr	r3, [r7, #4]
 81042ee:	3304      	adds	r3, #4
 81042f0:	2101      	movs	r1, #1
 81042f2:	4618      	mov	r0, r3
 81042f4:	f000 fd74 	bl	8104de0 <RCCEx_PLL2_Config>
 81042f8:	4603      	mov	r3, r0
 81042fa:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 81042fc:	e00c      	b.n	8104318 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81042fe:	687b      	ldr	r3, [r7, #4]
 8104300:	3324      	adds	r3, #36	; 0x24
 8104302:	2101      	movs	r1, #1
 8104304:	4618      	mov	r0, r3
 8104306:	f000 fe1d 	bl	8104f44 <RCCEx_PLL3_Config>
 810430a:	4603      	mov	r3, r0
 810430c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 810430e:	e003      	b.n	8104318 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104310:	2301      	movs	r3, #1
 8104312:	75fb      	strb	r3, [r7, #23]
      break;
 8104314:	e000      	b.n	8104318 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8104316:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104318:	7dfb      	ldrb	r3, [r7, #23]
 810431a:	2b00      	cmp	r3, #0
 810431c:	d10a      	bne.n	8104334 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 810431e:	4b57      	ldr	r3, [pc, #348]	; (810447c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8104320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104322:	f023 0207 	bic.w	r2, r3, #7
 8104326:	687b      	ldr	r3, [r7, #4]
 8104328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 810432c:	4953      	ldr	r1, [pc, #332]	; (810447c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810432e:	4313      	orrs	r3, r2
 8104330:	658b      	str	r3, [r1, #88]	; 0x58
 8104332:	e001      	b.n	8104338 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104334:	7dfb      	ldrb	r3, [r7, #23]
 8104336:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8104338:	687b      	ldr	r3, [r7, #4]
 810433a:	681b      	ldr	r3, [r3, #0]
 810433c:	f003 0320 	and.w	r3, r3, #32
 8104340:	2b00      	cmp	r3, #0
 8104342:	d04b      	beq.n	81043dc <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8104344:	687b      	ldr	r3, [r7, #4]
 8104346:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810434a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810434e:	d02e      	beq.n	81043ae <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8104350:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8104354:	d828      	bhi.n	81043a8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8104356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810435a:	d02a      	beq.n	81043b2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 810435c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104360:	d822      	bhi.n	81043a8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8104362:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8104366:	d026      	beq.n	81043b6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8104368:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810436c:	d81c      	bhi.n	81043a8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 810436e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104372:	d010      	beq.n	8104396 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8104374:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104378:	d816      	bhi.n	81043a8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 810437a:	2b00      	cmp	r3, #0
 810437c:	d01d      	beq.n	81043ba <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 810437e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104382:	d111      	bne.n	81043a8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104384:	687b      	ldr	r3, [r7, #4]
 8104386:	3304      	adds	r3, #4
 8104388:	2100      	movs	r1, #0
 810438a:	4618      	mov	r0, r3
 810438c:	f000 fd28 	bl	8104de0 <RCCEx_PLL2_Config>
 8104390:	4603      	mov	r3, r0
 8104392:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8104394:	e012      	b.n	81043bc <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8104396:	687b      	ldr	r3, [r7, #4]
 8104398:	3324      	adds	r3, #36	; 0x24
 810439a:	2102      	movs	r1, #2
 810439c:	4618      	mov	r0, r3
 810439e:	f000 fdd1 	bl	8104f44 <RCCEx_PLL3_Config>
 81043a2:	4603      	mov	r3, r0
 81043a4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 81043a6:	e009      	b.n	81043bc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81043a8:	2301      	movs	r3, #1
 81043aa:	75fb      	strb	r3, [r7, #23]
      break;
 81043ac:	e006      	b.n	81043bc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81043ae:	bf00      	nop
 81043b0:	e004      	b.n	81043bc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81043b2:	bf00      	nop
 81043b4:	e002      	b.n	81043bc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81043b6:	bf00      	nop
 81043b8:	e000      	b.n	81043bc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81043ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 81043bc:	7dfb      	ldrb	r3, [r7, #23]
 81043be:	2b00      	cmp	r3, #0
 81043c0:	d10a      	bne.n	81043d8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 81043c2:	4b2e      	ldr	r3, [pc, #184]	; (810447c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81043c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81043c6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 81043ca:	687b      	ldr	r3, [r7, #4]
 81043cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81043d0:	492a      	ldr	r1, [pc, #168]	; (810447c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81043d2:	4313      	orrs	r3, r2
 81043d4:	654b      	str	r3, [r1, #84]	; 0x54
 81043d6:	e001      	b.n	81043dc <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81043d8:	7dfb      	ldrb	r3, [r7, #23]
 81043da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 81043dc:	687b      	ldr	r3, [r7, #4]
 81043de:	681b      	ldr	r3, [r3, #0]
 81043e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81043e4:	2b00      	cmp	r3, #0
 81043e6:	d04d      	beq.n	8104484 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 81043e8:	687b      	ldr	r3, [r7, #4]
 81043ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 81043ee:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 81043f2:	d02e      	beq.n	8104452 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 81043f4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 81043f8:	d828      	bhi.n	810444c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 81043fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81043fe:	d02a      	beq.n	8104456 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8104400:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104404:	d822      	bhi.n	810444c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8104406:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 810440a:	d026      	beq.n	810445a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 810440c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8104410:	d81c      	bhi.n	810444c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8104412:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8104416:	d010      	beq.n	810443a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8104418:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810441c:	d816      	bhi.n	810444c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 810441e:	2b00      	cmp	r3, #0
 8104420:	d01d      	beq.n	810445e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8104422:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8104426:	d111      	bne.n	810444c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104428:	687b      	ldr	r3, [r7, #4]
 810442a:	3304      	adds	r3, #4
 810442c:	2100      	movs	r1, #0
 810442e:	4618      	mov	r0, r3
 8104430:	f000 fcd6 	bl	8104de0 <RCCEx_PLL2_Config>
 8104434:	4603      	mov	r3, r0
 8104436:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8104438:	e012      	b.n	8104460 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810443a:	687b      	ldr	r3, [r7, #4]
 810443c:	3324      	adds	r3, #36	; 0x24
 810443e:	2102      	movs	r1, #2
 8104440:	4618      	mov	r0, r3
 8104442:	f000 fd7f 	bl	8104f44 <RCCEx_PLL3_Config>
 8104446:	4603      	mov	r3, r0
 8104448:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 810444a:	e009      	b.n	8104460 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810444c:	2301      	movs	r3, #1
 810444e:	75fb      	strb	r3, [r7, #23]
      break;
 8104450:	e006      	b.n	8104460 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8104452:	bf00      	nop
 8104454:	e004      	b.n	8104460 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8104456:	bf00      	nop
 8104458:	e002      	b.n	8104460 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 810445a:	bf00      	nop
 810445c:	e000      	b.n	8104460 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 810445e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104460:	7dfb      	ldrb	r3, [r7, #23]
 8104462:	2b00      	cmp	r3, #0
 8104464:	d10c      	bne.n	8104480 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8104466:	4b05      	ldr	r3, [pc, #20]	; (810447c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8104468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810446a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 810446e:	687b      	ldr	r3, [r7, #4]
 8104470:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8104474:	4901      	ldr	r1, [pc, #4]	; (810447c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8104476:	4313      	orrs	r3, r2
 8104478:	658b      	str	r3, [r1, #88]	; 0x58
 810447a:	e003      	b.n	8104484 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 810447c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104480:	7dfb      	ldrb	r3, [r7, #23]
 8104482:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8104484:	687b      	ldr	r3, [r7, #4]
 8104486:	681b      	ldr	r3, [r3, #0]
 8104488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810448c:	2b00      	cmp	r3, #0
 810448e:	d04b      	beq.n	8104528 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8104490:	687b      	ldr	r3, [r7, #4]
 8104492:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8104496:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 810449a:	d02e      	beq.n	81044fa <HAL_RCCEx_PeriphCLKConfig+0xb22>
 810449c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81044a0:	d828      	bhi.n	81044f4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 81044a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81044a6:	d02a      	beq.n	81044fe <HAL_RCCEx_PeriphCLKConfig+0xb26>
 81044a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81044ac:	d822      	bhi.n	81044f4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 81044ae:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81044b2:	d026      	beq.n	8104502 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 81044b4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81044b8:	d81c      	bhi.n	81044f4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 81044ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81044be:	d010      	beq.n	81044e2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 81044c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81044c4:	d816      	bhi.n	81044f4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 81044c6:	2b00      	cmp	r3, #0
 81044c8:	d01d      	beq.n	8104506 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 81044ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81044ce:	d111      	bne.n	81044f4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81044d0:	687b      	ldr	r3, [r7, #4]
 81044d2:	3304      	adds	r3, #4
 81044d4:	2100      	movs	r1, #0
 81044d6:	4618      	mov	r0, r3
 81044d8:	f000 fc82 	bl	8104de0 <RCCEx_PLL2_Config>
 81044dc:	4603      	mov	r3, r0
 81044de:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 81044e0:	e012      	b.n	8104508 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81044e2:	687b      	ldr	r3, [r7, #4]
 81044e4:	3324      	adds	r3, #36	; 0x24
 81044e6:	2102      	movs	r1, #2
 81044e8:	4618      	mov	r0, r3
 81044ea:	f000 fd2b 	bl	8104f44 <RCCEx_PLL3_Config>
 81044ee:	4603      	mov	r3, r0
 81044f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 81044f2:	e009      	b.n	8104508 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81044f4:	2301      	movs	r3, #1
 81044f6:	75fb      	strb	r3, [r7, #23]
      break;
 81044f8:	e006      	b.n	8104508 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 81044fa:	bf00      	nop
 81044fc:	e004      	b.n	8104508 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 81044fe:	bf00      	nop
 8104500:	e002      	b.n	8104508 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8104502:	bf00      	nop
 8104504:	e000      	b.n	8104508 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8104506:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104508:	7dfb      	ldrb	r3, [r7, #23]
 810450a:	2b00      	cmp	r3, #0
 810450c:	d10a      	bne.n	8104524 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 810450e:	4b9d      	ldr	r3, [pc, #628]	; (8104784 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104512:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8104516:	687b      	ldr	r3, [r7, #4]
 8104518:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 810451c:	4999      	ldr	r1, [pc, #612]	; (8104784 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810451e:	4313      	orrs	r3, r2
 8104520:	658b      	str	r3, [r1, #88]	; 0x58
 8104522:	e001      	b.n	8104528 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104524:	7dfb      	ldrb	r3, [r7, #23]
 8104526:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8104528:	687b      	ldr	r3, [r7, #4]
 810452a:	681b      	ldr	r3, [r3, #0]
 810452c:	f003 0308 	and.w	r3, r3, #8
 8104530:	2b00      	cmp	r3, #0
 8104532:	d01a      	beq.n	810456a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8104534:	687b      	ldr	r3, [r7, #4]
 8104536:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810453a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810453e:	d10a      	bne.n	8104556 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8104540:	687b      	ldr	r3, [r7, #4]
 8104542:	3324      	adds	r3, #36	; 0x24
 8104544:	2102      	movs	r1, #2
 8104546:	4618      	mov	r0, r3
 8104548:	f000 fcfc 	bl	8104f44 <RCCEx_PLL3_Config>
 810454c:	4603      	mov	r3, r0
 810454e:	2b00      	cmp	r3, #0
 8104550:	d001      	beq.n	8104556 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8104552:	2301      	movs	r3, #1
 8104554:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8104556:	4b8b      	ldr	r3, [pc, #556]	; (8104784 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810455a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 810455e:	687b      	ldr	r3, [r7, #4]
 8104560:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8104564:	4987      	ldr	r1, [pc, #540]	; (8104784 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104566:	4313      	orrs	r3, r2
 8104568:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 810456a:	687b      	ldr	r3, [r7, #4]
 810456c:	681b      	ldr	r3, [r3, #0]
 810456e:	f003 0310 	and.w	r3, r3, #16
 8104572:	2b00      	cmp	r3, #0
 8104574:	d01a      	beq.n	81045ac <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8104576:	687b      	ldr	r3, [r7, #4]
 8104578:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 810457c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104580:	d10a      	bne.n	8104598 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8104582:	687b      	ldr	r3, [r7, #4]
 8104584:	3324      	adds	r3, #36	; 0x24
 8104586:	2102      	movs	r1, #2
 8104588:	4618      	mov	r0, r3
 810458a:	f000 fcdb 	bl	8104f44 <RCCEx_PLL3_Config>
 810458e:	4603      	mov	r3, r0
 8104590:	2b00      	cmp	r3, #0
 8104592:	d001      	beq.n	8104598 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8104594:	2301      	movs	r3, #1
 8104596:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8104598:	4b7a      	ldr	r3, [pc, #488]	; (8104784 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810459a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810459c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81045a0:	687b      	ldr	r3, [r7, #4]
 81045a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81045a6:	4977      	ldr	r1, [pc, #476]	; (8104784 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81045a8:	4313      	orrs	r3, r2
 81045aa:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 81045ac:	687b      	ldr	r3, [r7, #4]
 81045ae:	681b      	ldr	r3, [r3, #0]
 81045b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 81045b4:	2b00      	cmp	r3, #0
 81045b6:	d034      	beq.n	8104622 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 81045b8:	687b      	ldr	r3, [r7, #4]
 81045ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81045be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81045c2:	d01d      	beq.n	8104600 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 81045c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81045c8:	d817      	bhi.n	81045fa <HAL_RCCEx_PeriphCLKConfig+0xc22>
 81045ca:	2b00      	cmp	r3, #0
 81045cc:	d003      	beq.n	81045d6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 81045ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81045d2:	d009      	beq.n	81045e8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 81045d4:	e011      	b.n	81045fa <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81045d6:	687b      	ldr	r3, [r7, #4]
 81045d8:	3304      	adds	r3, #4
 81045da:	2100      	movs	r1, #0
 81045dc:	4618      	mov	r0, r3
 81045de:	f000 fbff 	bl	8104de0 <RCCEx_PLL2_Config>
 81045e2:	4603      	mov	r3, r0
 81045e4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 81045e6:	e00c      	b.n	8104602 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81045e8:	687b      	ldr	r3, [r7, #4]
 81045ea:	3324      	adds	r3, #36	; 0x24
 81045ec:	2102      	movs	r1, #2
 81045ee:	4618      	mov	r0, r3
 81045f0:	f000 fca8 	bl	8104f44 <RCCEx_PLL3_Config>
 81045f4:	4603      	mov	r3, r0
 81045f6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 81045f8:	e003      	b.n	8104602 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81045fa:	2301      	movs	r3, #1
 81045fc:	75fb      	strb	r3, [r7, #23]
      break;
 81045fe:	e000      	b.n	8104602 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8104600:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104602:	7dfb      	ldrb	r3, [r7, #23]
 8104604:	2b00      	cmp	r3, #0
 8104606:	d10a      	bne.n	810461e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8104608:	4b5e      	ldr	r3, [pc, #376]	; (8104784 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810460a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810460c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8104610:	687b      	ldr	r3, [r7, #4]
 8104612:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8104616:	495b      	ldr	r1, [pc, #364]	; (8104784 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104618:	4313      	orrs	r3, r2
 810461a:	658b      	str	r3, [r1, #88]	; 0x58
 810461c:	e001      	b.n	8104622 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810461e:	7dfb      	ldrb	r3, [r7, #23]
 8104620:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8104622:	687b      	ldr	r3, [r7, #4]
 8104624:	681b      	ldr	r3, [r3, #0]
 8104626:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810462a:	2b00      	cmp	r3, #0
 810462c:	d033      	beq.n	8104696 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 810462e:	687b      	ldr	r3, [r7, #4]
 8104630:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104634:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104638:	d01c      	beq.n	8104674 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 810463a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810463e:	d816      	bhi.n	810466e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8104640:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8104644:	d003      	beq.n	810464e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8104646:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810464a:	d007      	beq.n	810465c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 810464c:	e00f      	b.n	810466e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810464e:	4b4d      	ldr	r3, [pc, #308]	; (8104784 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104652:	4a4c      	ldr	r2, [pc, #304]	; (8104784 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104658:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 810465a:	e00c      	b.n	8104676 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810465c:	687b      	ldr	r3, [r7, #4]
 810465e:	3324      	adds	r3, #36	; 0x24
 8104660:	2101      	movs	r1, #1
 8104662:	4618      	mov	r0, r3
 8104664:	f000 fc6e 	bl	8104f44 <RCCEx_PLL3_Config>
 8104668:	4603      	mov	r3, r0
 810466a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 810466c:	e003      	b.n	8104676 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810466e:	2301      	movs	r3, #1
 8104670:	75fb      	strb	r3, [r7, #23]
      break;
 8104672:	e000      	b.n	8104676 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8104674:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104676:	7dfb      	ldrb	r3, [r7, #23]
 8104678:	2b00      	cmp	r3, #0
 810467a:	d10a      	bne.n	8104692 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 810467c:	4b41      	ldr	r3, [pc, #260]	; (8104784 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810467e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104680:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8104684:	687b      	ldr	r3, [r7, #4]
 8104686:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810468a:	493e      	ldr	r1, [pc, #248]	; (8104784 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810468c:	4313      	orrs	r3, r2
 810468e:	654b      	str	r3, [r1, #84]	; 0x54
 8104690:	e001      	b.n	8104696 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104692:	7dfb      	ldrb	r3, [r7, #23]
 8104694:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8104696:	687b      	ldr	r3, [r7, #4]
 8104698:	681b      	ldr	r3, [r3, #0]
 810469a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810469e:	2b00      	cmp	r3, #0
 81046a0:	d029      	beq.n	81046f6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 81046a2:	687b      	ldr	r3, [r7, #4]
 81046a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81046a6:	2b00      	cmp	r3, #0
 81046a8:	d003      	beq.n	81046b2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 81046aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81046ae:	d007      	beq.n	81046c0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 81046b0:	e00f      	b.n	81046d2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81046b2:	4b34      	ldr	r3, [pc, #208]	; (8104784 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81046b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81046b6:	4a33      	ldr	r2, [pc, #204]	; (8104784 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81046b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81046bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 81046be:	e00b      	b.n	81046d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81046c0:	687b      	ldr	r3, [r7, #4]
 81046c2:	3304      	adds	r3, #4
 81046c4:	2102      	movs	r1, #2
 81046c6:	4618      	mov	r0, r3
 81046c8:	f000 fb8a 	bl	8104de0 <RCCEx_PLL2_Config>
 81046cc:	4603      	mov	r3, r0
 81046ce:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 81046d0:	e002      	b.n	81046d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 81046d2:	2301      	movs	r3, #1
 81046d4:	75fb      	strb	r3, [r7, #23]
      break;
 81046d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81046d8:	7dfb      	ldrb	r3, [r7, #23]
 81046da:	2b00      	cmp	r3, #0
 81046dc:	d109      	bne.n	81046f2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 81046de:	4b29      	ldr	r3, [pc, #164]	; (8104784 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81046e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81046e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 81046e6:	687b      	ldr	r3, [r7, #4]
 81046e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81046ea:	4926      	ldr	r1, [pc, #152]	; (8104784 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81046ec:	4313      	orrs	r3, r2
 81046ee:	64cb      	str	r3, [r1, #76]	; 0x4c
 81046f0:	e001      	b.n	81046f6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81046f2:	7dfb      	ldrb	r3, [r7, #23]
 81046f4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 81046f6:	687b      	ldr	r3, [r7, #4]
 81046f8:	681b      	ldr	r3, [r3, #0]
 81046fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81046fe:	2b00      	cmp	r3, #0
 8104700:	d00a      	beq.n	8104718 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8104702:	687b      	ldr	r3, [r7, #4]
 8104704:	3324      	adds	r3, #36	; 0x24
 8104706:	2102      	movs	r1, #2
 8104708:	4618      	mov	r0, r3
 810470a:	f000 fc1b 	bl	8104f44 <RCCEx_PLL3_Config>
 810470e:	4603      	mov	r3, r0
 8104710:	2b00      	cmp	r3, #0
 8104712:	d001      	beq.n	8104718 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8104714:	2301      	movs	r3, #1
 8104716:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8104718:	687b      	ldr	r3, [r7, #4]
 810471a:	681b      	ldr	r3, [r3, #0]
 810471c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104720:	2b00      	cmp	r3, #0
 8104722:	d033      	beq.n	810478c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8104724:	687b      	ldr	r3, [r7, #4]
 8104726:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104728:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810472c:	d017      	beq.n	810475e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 810472e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8104732:	d811      	bhi.n	8104758 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8104734:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8104738:	d013      	beq.n	8104762 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 810473a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810473e:	d80b      	bhi.n	8104758 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8104740:	2b00      	cmp	r3, #0
 8104742:	d010      	beq.n	8104766 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8104744:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104748:	d106      	bne.n	8104758 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810474a:	4b0e      	ldr	r3, [pc, #56]	; (8104784 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810474c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810474e:	4a0d      	ldr	r2, [pc, #52]	; (8104784 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104754:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8104756:	e007      	b.n	8104768 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104758:	2301      	movs	r3, #1
 810475a:	75fb      	strb	r3, [r7, #23]
      break;
 810475c:	e004      	b.n	8104768 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 810475e:	bf00      	nop
 8104760:	e002      	b.n	8104768 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8104762:	bf00      	nop
 8104764:	e000      	b.n	8104768 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8104766:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104768:	7dfb      	ldrb	r3, [r7, #23]
 810476a:	2b00      	cmp	r3, #0
 810476c:	d10c      	bne.n	8104788 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 810476e:	4b05      	ldr	r3, [pc, #20]	; (8104784 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104772:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8104776:	687b      	ldr	r3, [r7, #4]
 8104778:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810477a:	4902      	ldr	r1, [pc, #8]	; (8104784 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810477c:	4313      	orrs	r3, r2
 810477e:	654b      	str	r3, [r1, #84]	; 0x54
 8104780:	e004      	b.n	810478c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8104782:	bf00      	nop
 8104784:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104788:	7dfb      	ldrb	r3, [r7, #23]
 810478a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 810478c:	687b      	ldr	r3, [r7, #4]
 810478e:	681b      	ldr	r3, [r3, #0]
 8104790:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8104794:	2b00      	cmp	r3, #0
 8104796:	d008      	beq.n	81047aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8104798:	4b31      	ldr	r3, [pc, #196]	; (8104860 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810479a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810479c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 81047a0:	687b      	ldr	r3, [r7, #4]
 81047a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81047a4:	492e      	ldr	r1, [pc, #184]	; (8104860 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81047a6:	4313      	orrs	r3, r2
 81047a8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 81047aa:	687b      	ldr	r3, [r7, #4]
 81047ac:	681b      	ldr	r3, [r3, #0]
 81047ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 81047b2:	2b00      	cmp	r3, #0
 81047b4:	d009      	beq.n	81047ca <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 81047b6:	4b2a      	ldr	r3, [pc, #168]	; (8104860 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81047b8:	691b      	ldr	r3, [r3, #16]
 81047ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 81047be:	687b      	ldr	r3, [r7, #4]
 81047c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 81047c4:	4926      	ldr	r1, [pc, #152]	; (8104860 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81047c6:	4313      	orrs	r3, r2
 81047c8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 81047ca:	687b      	ldr	r3, [r7, #4]
 81047cc:	681b      	ldr	r3, [r3, #0]
 81047ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81047d2:	2b00      	cmp	r3, #0
 81047d4:	d008      	beq.n	81047e8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 81047d6:	4b22      	ldr	r3, [pc, #136]	; (8104860 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81047d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81047da:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 81047de:	687b      	ldr	r3, [r7, #4]
 81047e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 81047e2:	491f      	ldr	r1, [pc, #124]	; (8104860 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81047e4:	4313      	orrs	r3, r2
 81047e6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 81047e8:	687b      	ldr	r3, [r7, #4]
 81047ea:	681b      	ldr	r3, [r3, #0]
 81047ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 81047f0:	2b00      	cmp	r3, #0
 81047f2:	d00d      	beq.n	8104810 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 81047f4:	4b1a      	ldr	r3, [pc, #104]	; (8104860 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81047f6:	691b      	ldr	r3, [r3, #16]
 81047f8:	4a19      	ldr	r2, [pc, #100]	; (8104860 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81047fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 81047fe:	6113      	str	r3, [r2, #16]
 8104800:	4b17      	ldr	r3, [pc, #92]	; (8104860 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104802:	691a      	ldr	r2, [r3, #16]
 8104804:	687b      	ldr	r3, [r7, #4]
 8104806:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 810480a:	4915      	ldr	r1, [pc, #84]	; (8104860 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810480c:	4313      	orrs	r3, r2
 810480e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8104810:	687b      	ldr	r3, [r7, #4]
 8104812:	681b      	ldr	r3, [r3, #0]
 8104814:	2b00      	cmp	r3, #0
 8104816:	da08      	bge.n	810482a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8104818:	4b11      	ldr	r3, [pc, #68]	; (8104860 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810481a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810481c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8104820:	687b      	ldr	r3, [r7, #4]
 8104822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104824:	490e      	ldr	r1, [pc, #56]	; (8104860 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104826:	4313      	orrs	r3, r2
 8104828:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 810482a:	687b      	ldr	r3, [r7, #4]
 810482c:	681b      	ldr	r3, [r3, #0]
 810482e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8104832:	2b00      	cmp	r3, #0
 8104834:	d009      	beq.n	810484a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8104836:	4b0a      	ldr	r3, [pc, #40]	; (8104860 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810483a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 810483e:	687b      	ldr	r3, [r7, #4]
 8104840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8104844:	4906      	ldr	r1, [pc, #24]	; (8104860 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104846:	4313      	orrs	r3, r2
 8104848:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 810484a:	7dbb      	ldrb	r3, [r7, #22]
 810484c:	2b00      	cmp	r3, #0
 810484e:	d101      	bne.n	8104854 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8104850:	2300      	movs	r3, #0
 8104852:	e000      	b.n	8104856 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8104854:	2301      	movs	r3, #1
}
 8104856:	4618      	mov	r0, r3
 8104858:	3718      	adds	r7, #24
 810485a:	46bd      	mov	sp, r7
 810485c:	bd80      	pop	{r7, pc}
 810485e:	bf00      	nop
 8104860:	58024400 	.word	0x58024400

08104864 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8104864:	b580      	push	{r7, lr}
 8104866:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8104868:	f7ff f858 	bl	810391c <HAL_RCC_GetHCLKFreq>
 810486c:	4602      	mov	r2, r0
 810486e:	4b06      	ldr	r3, [pc, #24]	; (8104888 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8104870:	6a1b      	ldr	r3, [r3, #32]
 8104872:	091b      	lsrs	r3, r3, #4
 8104874:	f003 0307 	and.w	r3, r3, #7
 8104878:	4904      	ldr	r1, [pc, #16]	; (810488c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 810487a:	5ccb      	ldrb	r3, [r1, r3]
 810487c:	f003 031f 	and.w	r3, r3, #31
 8104880:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8104884:	4618      	mov	r0, r3
 8104886:	bd80      	pop	{r7, pc}
 8104888:	58024400 	.word	0x58024400
 810488c:	0810e6f8 	.word	0x0810e6f8

08104890 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8104890:	b480      	push	{r7}
 8104892:	b089      	sub	sp, #36	; 0x24
 8104894:	af00      	add	r7, sp, #0
 8104896:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104898:	4ba1      	ldr	r3, [pc, #644]	; (8104b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810489a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810489c:	f003 0303 	and.w	r3, r3, #3
 81048a0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 81048a2:	4b9f      	ldr	r3, [pc, #636]	; (8104b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81048a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81048a6:	0b1b      	lsrs	r3, r3, #12
 81048a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81048ac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 81048ae:	4b9c      	ldr	r3, [pc, #624]	; (8104b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81048b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81048b2:	091b      	lsrs	r3, r3, #4
 81048b4:	f003 0301 	and.w	r3, r3, #1
 81048b8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 81048ba:	4b99      	ldr	r3, [pc, #612]	; (8104b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81048bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81048be:	08db      	lsrs	r3, r3, #3
 81048c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81048c4:	693a      	ldr	r2, [r7, #16]
 81048c6:	fb02 f303 	mul.w	r3, r2, r3
 81048ca:	ee07 3a90 	vmov	s15, r3
 81048ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81048d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 81048d6:	697b      	ldr	r3, [r7, #20]
 81048d8:	2b00      	cmp	r3, #0
 81048da:	f000 8111 	beq.w	8104b00 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 81048de:	69bb      	ldr	r3, [r7, #24]
 81048e0:	2b02      	cmp	r3, #2
 81048e2:	f000 8083 	beq.w	81049ec <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 81048e6:	69bb      	ldr	r3, [r7, #24]
 81048e8:	2b02      	cmp	r3, #2
 81048ea:	f200 80a1 	bhi.w	8104a30 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 81048ee:	69bb      	ldr	r3, [r7, #24]
 81048f0:	2b00      	cmp	r3, #0
 81048f2:	d003      	beq.n	81048fc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 81048f4:	69bb      	ldr	r3, [r7, #24]
 81048f6:	2b01      	cmp	r3, #1
 81048f8:	d056      	beq.n	81049a8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 81048fa:	e099      	b.n	8104a30 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81048fc:	4b88      	ldr	r3, [pc, #544]	; (8104b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81048fe:	681b      	ldr	r3, [r3, #0]
 8104900:	f003 0320 	and.w	r3, r3, #32
 8104904:	2b00      	cmp	r3, #0
 8104906:	d02d      	beq.n	8104964 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8104908:	4b85      	ldr	r3, [pc, #532]	; (8104b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810490a:	681b      	ldr	r3, [r3, #0]
 810490c:	08db      	lsrs	r3, r3, #3
 810490e:	f003 0303 	and.w	r3, r3, #3
 8104912:	4a84      	ldr	r2, [pc, #528]	; (8104b24 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8104914:	fa22 f303 	lsr.w	r3, r2, r3
 8104918:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810491a:	68bb      	ldr	r3, [r7, #8]
 810491c:	ee07 3a90 	vmov	s15, r3
 8104920:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104924:	697b      	ldr	r3, [r7, #20]
 8104926:	ee07 3a90 	vmov	s15, r3
 810492a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810492e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104932:	4b7b      	ldr	r3, [pc, #492]	; (8104b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810493a:	ee07 3a90 	vmov	s15, r3
 810493e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104942:	ed97 6a03 	vldr	s12, [r7, #12]
 8104946:	eddf 5a78 	vldr	s11, [pc, #480]	; 8104b28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810494a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810494e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104952:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810495a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810495e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8104962:	e087      	b.n	8104a74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8104964:	697b      	ldr	r3, [r7, #20]
 8104966:	ee07 3a90 	vmov	s15, r3
 810496a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810496e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8104b2c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8104972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104976:	4b6a      	ldr	r3, [pc, #424]	; (8104b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810497a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810497e:	ee07 3a90 	vmov	s15, r3
 8104982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104986:	ed97 6a03 	vldr	s12, [r7, #12]
 810498a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8104b28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810498e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104996:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810499a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810499e:	ee67 7a27 	vmul.f32	s15, s14, s15
 81049a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81049a6:	e065      	b.n	8104a74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81049a8:	697b      	ldr	r3, [r7, #20]
 81049aa:	ee07 3a90 	vmov	s15, r3
 81049ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81049b2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8104b30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81049b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81049ba:	4b59      	ldr	r3, [pc, #356]	; (8104b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81049bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81049be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81049c2:	ee07 3a90 	vmov	s15, r3
 81049c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81049ca:	ed97 6a03 	vldr	s12, [r7, #12]
 81049ce:	eddf 5a56 	vldr	s11, [pc, #344]	; 8104b28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81049d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81049d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81049da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81049de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81049e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81049e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81049ea:	e043      	b.n	8104a74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81049ec:	697b      	ldr	r3, [r7, #20]
 81049ee:	ee07 3a90 	vmov	s15, r3
 81049f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81049f6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8104b34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 81049fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81049fe:	4b48      	ldr	r3, [pc, #288]	; (8104b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104a06:	ee07 3a90 	vmov	s15, r3
 8104a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104a0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8104a12:	eddf 5a45 	vldr	s11, [pc, #276]	; 8104b28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104a1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104a2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104a2e:	e021      	b.n	8104a74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8104a30:	697b      	ldr	r3, [r7, #20]
 8104a32:	ee07 3a90 	vmov	s15, r3
 8104a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104a3a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8104b30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8104a3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104a42:	4b37      	ldr	r3, [pc, #220]	; (8104b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104a4a:	ee07 3a90 	vmov	s15, r3
 8104a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104a52:	ed97 6a03 	vldr	s12, [r7, #12]
 8104a56:	eddf 5a34 	vldr	s11, [pc, #208]	; 8104b28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104a5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104a62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104a66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104a6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104a72:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8104a74:	4b2a      	ldr	r3, [pc, #168]	; (8104b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104a78:	0a5b      	lsrs	r3, r3, #9
 8104a7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104a7e:	ee07 3a90 	vmov	s15, r3
 8104a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104a86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104a8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104a8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8104a92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104a96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104a9a:	ee17 2a90 	vmov	r2, s15
 8104a9e:	687b      	ldr	r3, [r7, #4]
 8104aa0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8104aa2:	4b1f      	ldr	r3, [pc, #124]	; (8104b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104aa6:	0c1b      	lsrs	r3, r3, #16
 8104aa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104aac:	ee07 3a90 	vmov	s15, r3
 8104ab0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104ab4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104ab8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104abc:	edd7 6a07 	vldr	s13, [r7, #28]
 8104ac0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104ac4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104ac8:	ee17 2a90 	vmov	r2, s15
 8104acc:	687b      	ldr	r3, [r7, #4]
 8104ace:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8104ad0:	4b13      	ldr	r3, [pc, #76]	; (8104b20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104ad4:	0e1b      	lsrs	r3, r3, #24
 8104ad6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104ada:	ee07 3a90 	vmov	s15, r3
 8104ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104ae2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104ae6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104aea:	edd7 6a07 	vldr	s13, [r7, #28]
 8104aee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104af2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104af6:	ee17 2a90 	vmov	r2, s15
 8104afa:	687b      	ldr	r3, [r7, #4]
 8104afc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8104afe:	e008      	b.n	8104b12 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8104b00:	687b      	ldr	r3, [r7, #4]
 8104b02:	2200      	movs	r2, #0
 8104b04:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8104b06:	687b      	ldr	r3, [r7, #4]
 8104b08:	2200      	movs	r2, #0
 8104b0a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8104b0c:	687b      	ldr	r3, [r7, #4]
 8104b0e:	2200      	movs	r2, #0
 8104b10:	609a      	str	r2, [r3, #8]
}
 8104b12:	bf00      	nop
 8104b14:	3724      	adds	r7, #36	; 0x24
 8104b16:	46bd      	mov	sp, r7
 8104b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b1c:	4770      	bx	lr
 8104b1e:	bf00      	nop
 8104b20:	58024400 	.word	0x58024400
 8104b24:	03d09000 	.word	0x03d09000
 8104b28:	46000000 	.word	0x46000000
 8104b2c:	4c742400 	.word	0x4c742400
 8104b30:	4a742400 	.word	0x4a742400
 8104b34:	4af42400 	.word	0x4af42400

08104b38 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8104b38:	b480      	push	{r7}
 8104b3a:	b089      	sub	sp, #36	; 0x24
 8104b3c:	af00      	add	r7, sp, #0
 8104b3e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104b40:	4ba1      	ldr	r3, [pc, #644]	; (8104dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104b44:	f003 0303 	and.w	r3, r3, #3
 8104b48:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8104b4a:	4b9f      	ldr	r3, [pc, #636]	; (8104dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104b4e:	0d1b      	lsrs	r3, r3, #20
 8104b50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8104b54:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8104b56:	4b9c      	ldr	r3, [pc, #624]	; (8104dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104b5a:	0a1b      	lsrs	r3, r3, #8
 8104b5c:	f003 0301 	and.w	r3, r3, #1
 8104b60:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8104b62:	4b99      	ldr	r3, [pc, #612]	; (8104dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104b66:	08db      	lsrs	r3, r3, #3
 8104b68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8104b6c:	693a      	ldr	r2, [r7, #16]
 8104b6e:	fb02 f303 	mul.w	r3, r2, r3
 8104b72:	ee07 3a90 	vmov	s15, r3
 8104b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104b7a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8104b7e:	697b      	ldr	r3, [r7, #20]
 8104b80:	2b00      	cmp	r3, #0
 8104b82:	f000 8111 	beq.w	8104da8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8104b86:	69bb      	ldr	r3, [r7, #24]
 8104b88:	2b02      	cmp	r3, #2
 8104b8a:	f000 8083 	beq.w	8104c94 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8104b8e:	69bb      	ldr	r3, [r7, #24]
 8104b90:	2b02      	cmp	r3, #2
 8104b92:	f200 80a1 	bhi.w	8104cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8104b96:	69bb      	ldr	r3, [r7, #24]
 8104b98:	2b00      	cmp	r3, #0
 8104b9a:	d003      	beq.n	8104ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8104b9c:	69bb      	ldr	r3, [r7, #24]
 8104b9e:	2b01      	cmp	r3, #1
 8104ba0:	d056      	beq.n	8104c50 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8104ba2:	e099      	b.n	8104cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104ba4:	4b88      	ldr	r3, [pc, #544]	; (8104dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104ba6:	681b      	ldr	r3, [r3, #0]
 8104ba8:	f003 0320 	and.w	r3, r3, #32
 8104bac:	2b00      	cmp	r3, #0
 8104bae:	d02d      	beq.n	8104c0c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8104bb0:	4b85      	ldr	r3, [pc, #532]	; (8104dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104bb2:	681b      	ldr	r3, [r3, #0]
 8104bb4:	08db      	lsrs	r3, r3, #3
 8104bb6:	f003 0303 	and.w	r3, r3, #3
 8104bba:	4a84      	ldr	r2, [pc, #528]	; (8104dcc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8104bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8104bc0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8104bc2:	68bb      	ldr	r3, [r7, #8]
 8104bc4:	ee07 3a90 	vmov	s15, r3
 8104bc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104bcc:	697b      	ldr	r3, [r7, #20]
 8104bce:	ee07 3a90 	vmov	s15, r3
 8104bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104bd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104bda:	4b7b      	ldr	r3, [pc, #492]	; (8104dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104bde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104be2:	ee07 3a90 	vmov	s15, r3
 8104be6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104bea:	ed97 6a03 	vldr	s12, [r7, #12]
 8104bee:	eddf 5a78 	vldr	s11, [pc, #480]	; 8104dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104bf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104bf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104bfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104bfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104c06:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8104c0a:	e087      	b.n	8104d1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8104c0c:	697b      	ldr	r3, [r7, #20]
 8104c0e:	ee07 3a90 	vmov	s15, r3
 8104c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104c16:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8104dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8104c1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104c1e:	4b6a      	ldr	r3, [pc, #424]	; (8104dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104c26:	ee07 3a90 	vmov	s15, r3
 8104c2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104c2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8104c32:	eddf 5a67 	vldr	s11, [pc, #412]	; 8104dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104c36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104c3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104c3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104c42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104c4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104c4e:	e065      	b.n	8104d1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8104c50:	697b      	ldr	r3, [r7, #20]
 8104c52:	ee07 3a90 	vmov	s15, r3
 8104c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104c5a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8104dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8104c5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104c62:	4b59      	ldr	r3, [pc, #356]	; (8104dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104c6a:	ee07 3a90 	vmov	s15, r3
 8104c6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104c72:	ed97 6a03 	vldr	s12, [r7, #12]
 8104c76:	eddf 5a56 	vldr	s11, [pc, #344]	; 8104dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104c7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104c7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104c82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104c86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104c8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104c92:	e043      	b.n	8104d1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8104c94:	697b      	ldr	r3, [r7, #20]
 8104c96:	ee07 3a90 	vmov	s15, r3
 8104c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104c9e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8104ddc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8104ca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104ca6:	4b48      	ldr	r3, [pc, #288]	; (8104dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104cae:	ee07 3a90 	vmov	s15, r3
 8104cb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104cb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8104cba:	eddf 5a45 	vldr	s11, [pc, #276]	; 8104dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104cbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104cc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104cc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104cca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104cd2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104cd6:	e021      	b.n	8104d1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8104cd8:	697b      	ldr	r3, [r7, #20]
 8104cda:	ee07 3a90 	vmov	s15, r3
 8104cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104ce2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8104dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8104ce6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104cea:	4b37      	ldr	r3, [pc, #220]	; (8104dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104cf2:	ee07 3a90 	vmov	s15, r3
 8104cf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104cfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8104cfe:	eddf 5a34 	vldr	s11, [pc, #208]	; 8104dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104d02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104d06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104d0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104d0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104d16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104d1a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8104d1c:	4b2a      	ldr	r3, [pc, #168]	; (8104dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104d20:	0a5b      	lsrs	r3, r3, #9
 8104d22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104d26:	ee07 3a90 	vmov	s15, r3
 8104d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104d2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104d32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104d36:	edd7 6a07 	vldr	s13, [r7, #28]
 8104d3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104d3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104d42:	ee17 2a90 	vmov	r2, s15
 8104d46:	687b      	ldr	r3, [r7, #4]
 8104d48:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8104d4a:	4b1f      	ldr	r3, [pc, #124]	; (8104dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104d4e:	0c1b      	lsrs	r3, r3, #16
 8104d50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104d54:	ee07 3a90 	vmov	s15, r3
 8104d58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104d5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104d60:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104d64:	edd7 6a07 	vldr	s13, [r7, #28]
 8104d68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104d6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104d70:	ee17 2a90 	vmov	r2, s15
 8104d74:	687b      	ldr	r3, [r7, #4]
 8104d76:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8104d78:	4b13      	ldr	r3, [pc, #76]	; (8104dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104d7c:	0e1b      	lsrs	r3, r3, #24
 8104d7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104d82:	ee07 3a90 	vmov	s15, r3
 8104d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104d8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104d8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104d92:	edd7 6a07 	vldr	s13, [r7, #28]
 8104d96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104d9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104d9e:	ee17 2a90 	vmov	r2, s15
 8104da2:	687b      	ldr	r3, [r7, #4]
 8104da4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8104da6:	e008      	b.n	8104dba <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8104da8:	687b      	ldr	r3, [r7, #4]
 8104daa:	2200      	movs	r2, #0
 8104dac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8104dae:	687b      	ldr	r3, [r7, #4]
 8104db0:	2200      	movs	r2, #0
 8104db2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8104db4:	687b      	ldr	r3, [r7, #4]
 8104db6:	2200      	movs	r2, #0
 8104db8:	609a      	str	r2, [r3, #8]
}
 8104dba:	bf00      	nop
 8104dbc:	3724      	adds	r7, #36	; 0x24
 8104dbe:	46bd      	mov	sp, r7
 8104dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104dc4:	4770      	bx	lr
 8104dc6:	bf00      	nop
 8104dc8:	58024400 	.word	0x58024400
 8104dcc:	03d09000 	.word	0x03d09000
 8104dd0:	46000000 	.word	0x46000000
 8104dd4:	4c742400 	.word	0x4c742400
 8104dd8:	4a742400 	.word	0x4a742400
 8104ddc:	4af42400 	.word	0x4af42400

08104de0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8104de0:	b580      	push	{r7, lr}
 8104de2:	b084      	sub	sp, #16
 8104de4:	af00      	add	r7, sp, #0
 8104de6:	6078      	str	r0, [r7, #4]
 8104de8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8104dea:	2300      	movs	r3, #0
 8104dec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8104dee:	4b54      	ldr	r3, [pc, #336]	; (8104f40 <RCCEx_PLL2_Config+0x160>)
 8104df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104df2:	f003 0303 	and.w	r3, r3, #3
 8104df6:	2b03      	cmp	r3, #3
 8104df8:	d101      	bne.n	8104dfe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8104dfa:	2301      	movs	r3, #1
 8104dfc:	e09b      	b.n	8104f36 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8104dfe:	4b50      	ldr	r3, [pc, #320]	; (8104f40 <RCCEx_PLL2_Config+0x160>)
 8104e00:	681b      	ldr	r3, [r3, #0]
 8104e02:	4a4f      	ldr	r2, [pc, #316]	; (8104f40 <RCCEx_PLL2_Config+0x160>)
 8104e04:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8104e08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104e0a:	f7fd fb15 	bl	8102438 <HAL_GetTick>
 8104e0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8104e10:	e008      	b.n	8104e24 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8104e12:	f7fd fb11 	bl	8102438 <HAL_GetTick>
 8104e16:	4602      	mov	r2, r0
 8104e18:	68bb      	ldr	r3, [r7, #8]
 8104e1a:	1ad3      	subs	r3, r2, r3
 8104e1c:	2b02      	cmp	r3, #2
 8104e1e:	d901      	bls.n	8104e24 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8104e20:	2303      	movs	r3, #3
 8104e22:	e088      	b.n	8104f36 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8104e24:	4b46      	ldr	r3, [pc, #280]	; (8104f40 <RCCEx_PLL2_Config+0x160>)
 8104e26:	681b      	ldr	r3, [r3, #0]
 8104e28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104e2c:	2b00      	cmp	r3, #0
 8104e2e:	d1f0      	bne.n	8104e12 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8104e30:	4b43      	ldr	r3, [pc, #268]	; (8104f40 <RCCEx_PLL2_Config+0x160>)
 8104e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104e34:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8104e38:	687b      	ldr	r3, [r7, #4]
 8104e3a:	681b      	ldr	r3, [r3, #0]
 8104e3c:	031b      	lsls	r3, r3, #12
 8104e3e:	4940      	ldr	r1, [pc, #256]	; (8104f40 <RCCEx_PLL2_Config+0x160>)
 8104e40:	4313      	orrs	r3, r2
 8104e42:	628b      	str	r3, [r1, #40]	; 0x28
 8104e44:	687b      	ldr	r3, [r7, #4]
 8104e46:	685b      	ldr	r3, [r3, #4]
 8104e48:	3b01      	subs	r3, #1
 8104e4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8104e4e:	687b      	ldr	r3, [r7, #4]
 8104e50:	689b      	ldr	r3, [r3, #8]
 8104e52:	3b01      	subs	r3, #1
 8104e54:	025b      	lsls	r3, r3, #9
 8104e56:	b29b      	uxth	r3, r3
 8104e58:	431a      	orrs	r2, r3
 8104e5a:	687b      	ldr	r3, [r7, #4]
 8104e5c:	68db      	ldr	r3, [r3, #12]
 8104e5e:	3b01      	subs	r3, #1
 8104e60:	041b      	lsls	r3, r3, #16
 8104e62:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8104e66:	431a      	orrs	r2, r3
 8104e68:	687b      	ldr	r3, [r7, #4]
 8104e6a:	691b      	ldr	r3, [r3, #16]
 8104e6c:	3b01      	subs	r3, #1
 8104e6e:	061b      	lsls	r3, r3, #24
 8104e70:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8104e74:	4932      	ldr	r1, [pc, #200]	; (8104f40 <RCCEx_PLL2_Config+0x160>)
 8104e76:	4313      	orrs	r3, r2
 8104e78:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8104e7a:	4b31      	ldr	r3, [pc, #196]	; (8104f40 <RCCEx_PLL2_Config+0x160>)
 8104e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104e7e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8104e82:	687b      	ldr	r3, [r7, #4]
 8104e84:	695b      	ldr	r3, [r3, #20]
 8104e86:	492e      	ldr	r1, [pc, #184]	; (8104f40 <RCCEx_PLL2_Config+0x160>)
 8104e88:	4313      	orrs	r3, r2
 8104e8a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8104e8c:	4b2c      	ldr	r3, [pc, #176]	; (8104f40 <RCCEx_PLL2_Config+0x160>)
 8104e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104e90:	f023 0220 	bic.w	r2, r3, #32
 8104e94:	687b      	ldr	r3, [r7, #4]
 8104e96:	699b      	ldr	r3, [r3, #24]
 8104e98:	4929      	ldr	r1, [pc, #164]	; (8104f40 <RCCEx_PLL2_Config+0x160>)
 8104e9a:	4313      	orrs	r3, r2
 8104e9c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8104e9e:	4b28      	ldr	r3, [pc, #160]	; (8104f40 <RCCEx_PLL2_Config+0x160>)
 8104ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104ea2:	4a27      	ldr	r2, [pc, #156]	; (8104f40 <RCCEx_PLL2_Config+0x160>)
 8104ea4:	f023 0310 	bic.w	r3, r3, #16
 8104ea8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8104eaa:	4b25      	ldr	r3, [pc, #148]	; (8104f40 <RCCEx_PLL2_Config+0x160>)
 8104eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104eae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8104eb2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8104eb6:	687a      	ldr	r2, [r7, #4]
 8104eb8:	69d2      	ldr	r2, [r2, #28]
 8104eba:	00d2      	lsls	r2, r2, #3
 8104ebc:	4920      	ldr	r1, [pc, #128]	; (8104f40 <RCCEx_PLL2_Config+0x160>)
 8104ebe:	4313      	orrs	r3, r2
 8104ec0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8104ec2:	4b1f      	ldr	r3, [pc, #124]	; (8104f40 <RCCEx_PLL2_Config+0x160>)
 8104ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104ec6:	4a1e      	ldr	r2, [pc, #120]	; (8104f40 <RCCEx_PLL2_Config+0x160>)
 8104ec8:	f043 0310 	orr.w	r3, r3, #16
 8104ecc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8104ece:	683b      	ldr	r3, [r7, #0]
 8104ed0:	2b00      	cmp	r3, #0
 8104ed2:	d106      	bne.n	8104ee2 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8104ed4:	4b1a      	ldr	r3, [pc, #104]	; (8104f40 <RCCEx_PLL2_Config+0x160>)
 8104ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104ed8:	4a19      	ldr	r2, [pc, #100]	; (8104f40 <RCCEx_PLL2_Config+0x160>)
 8104eda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8104ede:	62d3      	str	r3, [r2, #44]	; 0x2c
 8104ee0:	e00f      	b.n	8104f02 <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8104ee2:	683b      	ldr	r3, [r7, #0]
 8104ee4:	2b01      	cmp	r3, #1
 8104ee6:	d106      	bne.n	8104ef6 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8104ee8:	4b15      	ldr	r3, [pc, #84]	; (8104f40 <RCCEx_PLL2_Config+0x160>)
 8104eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104eec:	4a14      	ldr	r2, [pc, #80]	; (8104f40 <RCCEx_PLL2_Config+0x160>)
 8104eee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8104ef2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8104ef4:	e005      	b.n	8104f02 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8104ef6:	4b12      	ldr	r3, [pc, #72]	; (8104f40 <RCCEx_PLL2_Config+0x160>)
 8104ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104efa:	4a11      	ldr	r2, [pc, #68]	; (8104f40 <RCCEx_PLL2_Config+0x160>)
 8104efc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8104f00:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8104f02:	4b0f      	ldr	r3, [pc, #60]	; (8104f40 <RCCEx_PLL2_Config+0x160>)
 8104f04:	681b      	ldr	r3, [r3, #0]
 8104f06:	4a0e      	ldr	r2, [pc, #56]	; (8104f40 <RCCEx_PLL2_Config+0x160>)
 8104f08:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8104f0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104f0e:	f7fd fa93 	bl	8102438 <HAL_GetTick>
 8104f12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8104f14:	e008      	b.n	8104f28 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8104f16:	f7fd fa8f 	bl	8102438 <HAL_GetTick>
 8104f1a:	4602      	mov	r2, r0
 8104f1c:	68bb      	ldr	r3, [r7, #8]
 8104f1e:	1ad3      	subs	r3, r2, r3
 8104f20:	2b02      	cmp	r3, #2
 8104f22:	d901      	bls.n	8104f28 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8104f24:	2303      	movs	r3, #3
 8104f26:	e006      	b.n	8104f36 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8104f28:	4b05      	ldr	r3, [pc, #20]	; (8104f40 <RCCEx_PLL2_Config+0x160>)
 8104f2a:	681b      	ldr	r3, [r3, #0]
 8104f2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104f30:	2b00      	cmp	r3, #0
 8104f32:	d0f0      	beq.n	8104f16 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8104f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8104f36:	4618      	mov	r0, r3
 8104f38:	3710      	adds	r7, #16
 8104f3a:	46bd      	mov	sp, r7
 8104f3c:	bd80      	pop	{r7, pc}
 8104f3e:	bf00      	nop
 8104f40:	58024400 	.word	0x58024400

08104f44 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8104f44:	b580      	push	{r7, lr}
 8104f46:	b084      	sub	sp, #16
 8104f48:	af00      	add	r7, sp, #0
 8104f4a:	6078      	str	r0, [r7, #4]
 8104f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8104f4e:	2300      	movs	r3, #0
 8104f50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8104f52:	4b54      	ldr	r3, [pc, #336]	; (81050a4 <RCCEx_PLL3_Config+0x160>)
 8104f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104f56:	f003 0303 	and.w	r3, r3, #3
 8104f5a:	2b03      	cmp	r3, #3
 8104f5c:	d101      	bne.n	8104f62 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8104f5e:	2301      	movs	r3, #1
 8104f60:	e09b      	b.n	810509a <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8104f62:	4b50      	ldr	r3, [pc, #320]	; (81050a4 <RCCEx_PLL3_Config+0x160>)
 8104f64:	681b      	ldr	r3, [r3, #0]
 8104f66:	4a4f      	ldr	r2, [pc, #316]	; (81050a4 <RCCEx_PLL3_Config+0x160>)
 8104f68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8104f6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104f6e:	f7fd fa63 	bl	8102438 <HAL_GetTick>
 8104f72:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8104f74:	e008      	b.n	8104f88 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8104f76:	f7fd fa5f 	bl	8102438 <HAL_GetTick>
 8104f7a:	4602      	mov	r2, r0
 8104f7c:	68bb      	ldr	r3, [r7, #8]
 8104f7e:	1ad3      	subs	r3, r2, r3
 8104f80:	2b02      	cmp	r3, #2
 8104f82:	d901      	bls.n	8104f88 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8104f84:	2303      	movs	r3, #3
 8104f86:	e088      	b.n	810509a <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8104f88:	4b46      	ldr	r3, [pc, #280]	; (81050a4 <RCCEx_PLL3_Config+0x160>)
 8104f8a:	681b      	ldr	r3, [r3, #0]
 8104f8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104f90:	2b00      	cmp	r3, #0
 8104f92:	d1f0      	bne.n	8104f76 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8104f94:	4b43      	ldr	r3, [pc, #268]	; (81050a4 <RCCEx_PLL3_Config+0x160>)
 8104f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104f98:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8104f9c:	687b      	ldr	r3, [r7, #4]
 8104f9e:	681b      	ldr	r3, [r3, #0]
 8104fa0:	051b      	lsls	r3, r3, #20
 8104fa2:	4940      	ldr	r1, [pc, #256]	; (81050a4 <RCCEx_PLL3_Config+0x160>)
 8104fa4:	4313      	orrs	r3, r2
 8104fa6:	628b      	str	r3, [r1, #40]	; 0x28
 8104fa8:	687b      	ldr	r3, [r7, #4]
 8104faa:	685b      	ldr	r3, [r3, #4]
 8104fac:	3b01      	subs	r3, #1
 8104fae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8104fb2:	687b      	ldr	r3, [r7, #4]
 8104fb4:	689b      	ldr	r3, [r3, #8]
 8104fb6:	3b01      	subs	r3, #1
 8104fb8:	025b      	lsls	r3, r3, #9
 8104fba:	b29b      	uxth	r3, r3
 8104fbc:	431a      	orrs	r2, r3
 8104fbe:	687b      	ldr	r3, [r7, #4]
 8104fc0:	68db      	ldr	r3, [r3, #12]
 8104fc2:	3b01      	subs	r3, #1
 8104fc4:	041b      	lsls	r3, r3, #16
 8104fc6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8104fca:	431a      	orrs	r2, r3
 8104fcc:	687b      	ldr	r3, [r7, #4]
 8104fce:	691b      	ldr	r3, [r3, #16]
 8104fd0:	3b01      	subs	r3, #1
 8104fd2:	061b      	lsls	r3, r3, #24
 8104fd4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8104fd8:	4932      	ldr	r1, [pc, #200]	; (81050a4 <RCCEx_PLL3_Config+0x160>)
 8104fda:	4313      	orrs	r3, r2
 8104fdc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8104fde:	4b31      	ldr	r3, [pc, #196]	; (81050a4 <RCCEx_PLL3_Config+0x160>)
 8104fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104fe2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8104fe6:	687b      	ldr	r3, [r7, #4]
 8104fe8:	695b      	ldr	r3, [r3, #20]
 8104fea:	492e      	ldr	r1, [pc, #184]	; (81050a4 <RCCEx_PLL3_Config+0x160>)
 8104fec:	4313      	orrs	r3, r2
 8104fee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8104ff0:	4b2c      	ldr	r3, [pc, #176]	; (81050a4 <RCCEx_PLL3_Config+0x160>)
 8104ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104ff4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8104ff8:	687b      	ldr	r3, [r7, #4]
 8104ffa:	699b      	ldr	r3, [r3, #24]
 8104ffc:	4929      	ldr	r1, [pc, #164]	; (81050a4 <RCCEx_PLL3_Config+0x160>)
 8104ffe:	4313      	orrs	r3, r2
 8105000:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8105002:	4b28      	ldr	r3, [pc, #160]	; (81050a4 <RCCEx_PLL3_Config+0x160>)
 8105004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105006:	4a27      	ldr	r2, [pc, #156]	; (81050a4 <RCCEx_PLL3_Config+0x160>)
 8105008:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810500c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810500e:	4b25      	ldr	r3, [pc, #148]	; (81050a4 <RCCEx_PLL3_Config+0x160>)
 8105010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105012:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8105016:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 810501a:	687a      	ldr	r2, [r7, #4]
 810501c:	69d2      	ldr	r2, [r2, #28]
 810501e:	00d2      	lsls	r2, r2, #3
 8105020:	4920      	ldr	r1, [pc, #128]	; (81050a4 <RCCEx_PLL3_Config+0x160>)
 8105022:	4313      	orrs	r3, r2
 8105024:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8105026:	4b1f      	ldr	r3, [pc, #124]	; (81050a4 <RCCEx_PLL3_Config+0x160>)
 8105028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810502a:	4a1e      	ldr	r2, [pc, #120]	; (81050a4 <RCCEx_PLL3_Config+0x160>)
 810502c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8105030:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8105032:	683b      	ldr	r3, [r7, #0]
 8105034:	2b00      	cmp	r3, #0
 8105036:	d106      	bne.n	8105046 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8105038:	4b1a      	ldr	r3, [pc, #104]	; (81050a4 <RCCEx_PLL3_Config+0x160>)
 810503a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810503c:	4a19      	ldr	r2, [pc, #100]	; (81050a4 <RCCEx_PLL3_Config+0x160>)
 810503e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8105042:	62d3      	str	r3, [r2, #44]	; 0x2c
 8105044:	e00f      	b.n	8105066 <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8105046:	683b      	ldr	r3, [r7, #0]
 8105048:	2b01      	cmp	r3, #1
 810504a:	d106      	bne.n	810505a <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 810504c:	4b15      	ldr	r3, [pc, #84]	; (81050a4 <RCCEx_PLL3_Config+0x160>)
 810504e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105050:	4a14      	ldr	r2, [pc, #80]	; (81050a4 <RCCEx_PLL3_Config+0x160>)
 8105052:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8105056:	62d3      	str	r3, [r2, #44]	; 0x2c
 8105058:	e005      	b.n	8105066 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 810505a:	4b12      	ldr	r3, [pc, #72]	; (81050a4 <RCCEx_PLL3_Config+0x160>)
 810505c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810505e:	4a11      	ldr	r2, [pc, #68]	; (81050a4 <RCCEx_PLL3_Config+0x160>)
 8105060:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8105064:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8105066:	4b0f      	ldr	r3, [pc, #60]	; (81050a4 <RCCEx_PLL3_Config+0x160>)
 8105068:	681b      	ldr	r3, [r3, #0]
 810506a:	4a0e      	ldr	r2, [pc, #56]	; (81050a4 <RCCEx_PLL3_Config+0x160>)
 810506c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8105070:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8105072:	f7fd f9e1 	bl	8102438 <HAL_GetTick>
 8105076:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8105078:	e008      	b.n	810508c <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 810507a:	f7fd f9dd 	bl	8102438 <HAL_GetTick>
 810507e:	4602      	mov	r2, r0
 8105080:	68bb      	ldr	r3, [r7, #8]
 8105082:	1ad3      	subs	r3, r2, r3
 8105084:	2b02      	cmp	r3, #2
 8105086:	d901      	bls.n	810508c <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8105088:	2303      	movs	r3, #3
 810508a:	e006      	b.n	810509a <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810508c:	4b05      	ldr	r3, [pc, #20]	; (81050a4 <RCCEx_PLL3_Config+0x160>)
 810508e:	681b      	ldr	r3, [r3, #0]
 8105090:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105094:	2b00      	cmp	r3, #0
 8105096:	d0f0      	beq.n	810507a <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8105098:	7bfb      	ldrb	r3, [r7, #15]
}
 810509a:	4618      	mov	r0, r3
 810509c:	3710      	adds	r7, #16
 810509e:	46bd      	mov	sp, r7
 81050a0:	bd80      	pop	{r7, pc}
 81050a2:	bf00      	nop
 81050a4:	58024400 	.word	0x58024400

081050a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 81050a8:	b580      	push	{r7, lr}
 81050aa:	b082      	sub	sp, #8
 81050ac:	af00      	add	r7, sp, #0
 81050ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81050b0:	687b      	ldr	r3, [r7, #4]
 81050b2:	2b00      	cmp	r3, #0
 81050b4:	d101      	bne.n	81050ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 81050b6:	2301      	movs	r3, #1
 81050b8:	e049      	b.n	810514e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81050ba:	687b      	ldr	r3, [r7, #4]
 81050bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81050c0:	b2db      	uxtb	r3, r3
 81050c2:	2b00      	cmp	r3, #0
 81050c4:	d106      	bne.n	81050d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81050c6:	687b      	ldr	r3, [r7, #4]
 81050c8:	2200      	movs	r2, #0
 81050ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 81050ce:	6878      	ldr	r0, [r7, #4]
 81050d0:	f7fc fe8c 	bl	8101dec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81050d4:	687b      	ldr	r3, [r7, #4]
 81050d6:	2202      	movs	r2, #2
 81050d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 81050dc:	687b      	ldr	r3, [r7, #4]
 81050de:	681a      	ldr	r2, [r3, #0]
 81050e0:	687b      	ldr	r3, [r7, #4]
 81050e2:	3304      	adds	r3, #4
 81050e4:	4619      	mov	r1, r3
 81050e6:	4610      	mov	r0, r2
 81050e8:	f000 fd72 	bl	8105bd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81050ec:	687b      	ldr	r3, [r7, #4]
 81050ee:	2201      	movs	r2, #1
 81050f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81050f4:	687b      	ldr	r3, [r7, #4]
 81050f6:	2201      	movs	r2, #1
 81050f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 81050fc:	687b      	ldr	r3, [r7, #4]
 81050fe:	2201      	movs	r2, #1
 8105100:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8105104:	687b      	ldr	r3, [r7, #4]
 8105106:	2201      	movs	r2, #1
 8105108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 810510c:	687b      	ldr	r3, [r7, #4]
 810510e:	2201      	movs	r2, #1
 8105110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8105114:	687b      	ldr	r3, [r7, #4]
 8105116:	2201      	movs	r2, #1
 8105118:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 810511c:	687b      	ldr	r3, [r7, #4]
 810511e:	2201      	movs	r2, #1
 8105120:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8105124:	687b      	ldr	r3, [r7, #4]
 8105126:	2201      	movs	r2, #1
 8105128:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810512c:	687b      	ldr	r3, [r7, #4]
 810512e:	2201      	movs	r2, #1
 8105130:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8105134:	687b      	ldr	r3, [r7, #4]
 8105136:	2201      	movs	r2, #1
 8105138:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 810513c:	687b      	ldr	r3, [r7, #4]
 810513e:	2201      	movs	r2, #1
 8105140:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8105144:	687b      	ldr	r3, [r7, #4]
 8105146:	2201      	movs	r2, #1
 8105148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 810514c:	2300      	movs	r3, #0
}
 810514e:	4618      	mov	r0, r3
 8105150:	3708      	adds	r7, #8
 8105152:	46bd      	mov	sp, r7
 8105154:	bd80      	pop	{r7, pc}
	...

08105158 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8105158:	b480      	push	{r7}
 810515a:	b085      	sub	sp, #20
 810515c:	af00      	add	r7, sp, #0
 810515e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8105160:	687b      	ldr	r3, [r7, #4]
 8105162:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8105166:	b2db      	uxtb	r3, r3
 8105168:	2b01      	cmp	r3, #1
 810516a:	d001      	beq.n	8105170 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 810516c:	2301      	movs	r3, #1
 810516e:	e054      	b.n	810521a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8105170:	687b      	ldr	r3, [r7, #4]
 8105172:	2202      	movs	r2, #2
 8105174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8105178:	687b      	ldr	r3, [r7, #4]
 810517a:	681b      	ldr	r3, [r3, #0]
 810517c:	68da      	ldr	r2, [r3, #12]
 810517e:	687b      	ldr	r3, [r7, #4]
 8105180:	681b      	ldr	r3, [r3, #0]
 8105182:	f042 0201 	orr.w	r2, r2, #1
 8105186:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8105188:	687b      	ldr	r3, [r7, #4]
 810518a:	681b      	ldr	r3, [r3, #0]
 810518c:	4a26      	ldr	r2, [pc, #152]	; (8105228 <HAL_TIM_Base_Start_IT+0xd0>)
 810518e:	4293      	cmp	r3, r2
 8105190:	d022      	beq.n	81051d8 <HAL_TIM_Base_Start_IT+0x80>
 8105192:	687b      	ldr	r3, [r7, #4]
 8105194:	681b      	ldr	r3, [r3, #0]
 8105196:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810519a:	d01d      	beq.n	81051d8 <HAL_TIM_Base_Start_IT+0x80>
 810519c:	687b      	ldr	r3, [r7, #4]
 810519e:	681b      	ldr	r3, [r3, #0]
 81051a0:	4a22      	ldr	r2, [pc, #136]	; (810522c <HAL_TIM_Base_Start_IT+0xd4>)
 81051a2:	4293      	cmp	r3, r2
 81051a4:	d018      	beq.n	81051d8 <HAL_TIM_Base_Start_IT+0x80>
 81051a6:	687b      	ldr	r3, [r7, #4]
 81051a8:	681b      	ldr	r3, [r3, #0]
 81051aa:	4a21      	ldr	r2, [pc, #132]	; (8105230 <HAL_TIM_Base_Start_IT+0xd8>)
 81051ac:	4293      	cmp	r3, r2
 81051ae:	d013      	beq.n	81051d8 <HAL_TIM_Base_Start_IT+0x80>
 81051b0:	687b      	ldr	r3, [r7, #4]
 81051b2:	681b      	ldr	r3, [r3, #0]
 81051b4:	4a1f      	ldr	r2, [pc, #124]	; (8105234 <HAL_TIM_Base_Start_IT+0xdc>)
 81051b6:	4293      	cmp	r3, r2
 81051b8:	d00e      	beq.n	81051d8 <HAL_TIM_Base_Start_IT+0x80>
 81051ba:	687b      	ldr	r3, [r7, #4]
 81051bc:	681b      	ldr	r3, [r3, #0]
 81051be:	4a1e      	ldr	r2, [pc, #120]	; (8105238 <HAL_TIM_Base_Start_IT+0xe0>)
 81051c0:	4293      	cmp	r3, r2
 81051c2:	d009      	beq.n	81051d8 <HAL_TIM_Base_Start_IT+0x80>
 81051c4:	687b      	ldr	r3, [r7, #4]
 81051c6:	681b      	ldr	r3, [r3, #0]
 81051c8:	4a1c      	ldr	r2, [pc, #112]	; (810523c <HAL_TIM_Base_Start_IT+0xe4>)
 81051ca:	4293      	cmp	r3, r2
 81051cc:	d004      	beq.n	81051d8 <HAL_TIM_Base_Start_IT+0x80>
 81051ce:	687b      	ldr	r3, [r7, #4]
 81051d0:	681b      	ldr	r3, [r3, #0]
 81051d2:	4a1b      	ldr	r2, [pc, #108]	; (8105240 <HAL_TIM_Base_Start_IT+0xe8>)
 81051d4:	4293      	cmp	r3, r2
 81051d6:	d115      	bne.n	8105204 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 81051d8:	687b      	ldr	r3, [r7, #4]
 81051da:	681b      	ldr	r3, [r3, #0]
 81051dc:	689a      	ldr	r2, [r3, #8]
 81051de:	4b19      	ldr	r3, [pc, #100]	; (8105244 <HAL_TIM_Base_Start_IT+0xec>)
 81051e0:	4013      	ands	r3, r2
 81051e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81051e4:	68fb      	ldr	r3, [r7, #12]
 81051e6:	2b06      	cmp	r3, #6
 81051e8:	d015      	beq.n	8105216 <HAL_TIM_Base_Start_IT+0xbe>
 81051ea:	68fb      	ldr	r3, [r7, #12]
 81051ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81051f0:	d011      	beq.n	8105216 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 81051f2:	687b      	ldr	r3, [r7, #4]
 81051f4:	681b      	ldr	r3, [r3, #0]
 81051f6:	681a      	ldr	r2, [r3, #0]
 81051f8:	687b      	ldr	r3, [r7, #4]
 81051fa:	681b      	ldr	r3, [r3, #0]
 81051fc:	f042 0201 	orr.w	r2, r2, #1
 8105200:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8105202:	e008      	b.n	8105216 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8105204:	687b      	ldr	r3, [r7, #4]
 8105206:	681b      	ldr	r3, [r3, #0]
 8105208:	681a      	ldr	r2, [r3, #0]
 810520a:	687b      	ldr	r3, [r7, #4]
 810520c:	681b      	ldr	r3, [r3, #0]
 810520e:	f042 0201 	orr.w	r2, r2, #1
 8105212:	601a      	str	r2, [r3, #0]
 8105214:	e000      	b.n	8105218 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8105216:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8105218:	2300      	movs	r3, #0
}
 810521a:	4618      	mov	r0, r3
 810521c:	3714      	adds	r7, #20
 810521e:	46bd      	mov	sp, r7
 8105220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105224:	4770      	bx	lr
 8105226:	bf00      	nop
 8105228:	40010000 	.word	0x40010000
 810522c:	40000400 	.word	0x40000400
 8105230:	40000800 	.word	0x40000800
 8105234:	40000c00 	.word	0x40000c00
 8105238:	40010400 	.word	0x40010400
 810523c:	40001800 	.word	0x40001800
 8105240:	40014000 	.word	0x40014000
 8105244:	00010007 	.word	0x00010007

08105248 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8105248:	b580      	push	{r7, lr}
 810524a:	b082      	sub	sp, #8
 810524c:	af00      	add	r7, sp, #0
 810524e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8105250:	687b      	ldr	r3, [r7, #4]
 8105252:	2b00      	cmp	r3, #0
 8105254:	d101      	bne.n	810525a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8105256:	2301      	movs	r3, #1
 8105258:	e049      	b.n	81052ee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810525a:	687b      	ldr	r3, [r7, #4]
 810525c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8105260:	b2db      	uxtb	r3, r3
 8105262:	2b00      	cmp	r3, #0
 8105264:	d106      	bne.n	8105274 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8105266:	687b      	ldr	r3, [r7, #4]
 8105268:	2200      	movs	r2, #0
 810526a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 810526e:	6878      	ldr	r0, [r7, #4]
 8105270:	f000 f841 	bl	81052f6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8105274:	687b      	ldr	r3, [r7, #4]
 8105276:	2202      	movs	r2, #2
 8105278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810527c:	687b      	ldr	r3, [r7, #4]
 810527e:	681a      	ldr	r2, [r3, #0]
 8105280:	687b      	ldr	r3, [r7, #4]
 8105282:	3304      	adds	r3, #4
 8105284:	4619      	mov	r1, r3
 8105286:	4610      	mov	r0, r2
 8105288:	f000 fca2 	bl	8105bd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810528c:	687b      	ldr	r3, [r7, #4]
 810528e:	2201      	movs	r2, #1
 8105290:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8105294:	687b      	ldr	r3, [r7, #4]
 8105296:	2201      	movs	r2, #1
 8105298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 810529c:	687b      	ldr	r3, [r7, #4]
 810529e:	2201      	movs	r2, #1
 81052a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 81052a4:	687b      	ldr	r3, [r7, #4]
 81052a6:	2201      	movs	r2, #1
 81052a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 81052ac:	687b      	ldr	r3, [r7, #4]
 81052ae:	2201      	movs	r2, #1
 81052b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 81052b4:	687b      	ldr	r3, [r7, #4]
 81052b6:	2201      	movs	r2, #1
 81052b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 81052bc:	687b      	ldr	r3, [r7, #4]
 81052be:	2201      	movs	r2, #1
 81052c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81052c4:	687b      	ldr	r3, [r7, #4]
 81052c6:	2201      	movs	r2, #1
 81052c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 81052cc:	687b      	ldr	r3, [r7, #4]
 81052ce:	2201      	movs	r2, #1
 81052d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 81052d4:	687b      	ldr	r3, [r7, #4]
 81052d6:	2201      	movs	r2, #1
 81052d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 81052dc:	687b      	ldr	r3, [r7, #4]
 81052de:	2201      	movs	r2, #1
 81052e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81052e4:	687b      	ldr	r3, [r7, #4]
 81052e6:	2201      	movs	r2, #1
 81052e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 81052ec:	2300      	movs	r3, #0
}
 81052ee:	4618      	mov	r0, r3
 81052f0:	3708      	adds	r7, #8
 81052f2:	46bd      	mov	sp, r7
 81052f4:	bd80      	pop	{r7, pc}

081052f6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 81052f6:	b480      	push	{r7}
 81052f8:	b083      	sub	sp, #12
 81052fa:	af00      	add	r7, sp, #0
 81052fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 81052fe:	bf00      	nop
 8105300:	370c      	adds	r7, #12
 8105302:	46bd      	mov	sp, r7
 8105304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105308:	4770      	bx	lr
	...

0810530c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 810530c:	b580      	push	{r7, lr}
 810530e:	b084      	sub	sp, #16
 8105310:	af00      	add	r7, sp, #0
 8105312:	6078      	str	r0, [r7, #4]
 8105314:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8105316:	683b      	ldr	r3, [r7, #0]
 8105318:	2b00      	cmp	r3, #0
 810531a:	d109      	bne.n	8105330 <HAL_TIM_PWM_Start+0x24>
 810531c:	687b      	ldr	r3, [r7, #4]
 810531e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8105322:	b2db      	uxtb	r3, r3
 8105324:	2b01      	cmp	r3, #1
 8105326:	bf14      	ite	ne
 8105328:	2301      	movne	r3, #1
 810532a:	2300      	moveq	r3, #0
 810532c:	b2db      	uxtb	r3, r3
 810532e:	e03c      	b.n	81053aa <HAL_TIM_PWM_Start+0x9e>
 8105330:	683b      	ldr	r3, [r7, #0]
 8105332:	2b04      	cmp	r3, #4
 8105334:	d109      	bne.n	810534a <HAL_TIM_PWM_Start+0x3e>
 8105336:	687b      	ldr	r3, [r7, #4]
 8105338:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 810533c:	b2db      	uxtb	r3, r3
 810533e:	2b01      	cmp	r3, #1
 8105340:	bf14      	ite	ne
 8105342:	2301      	movne	r3, #1
 8105344:	2300      	moveq	r3, #0
 8105346:	b2db      	uxtb	r3, r3
 8105348:	e02f      	b.n	81053aa <HAL_TIM_PWM_Start+0x9e>
 810534a:	683b      	ldr	r3, [r7, #0]
 810534c:	2b08      	cmp	r3, #8
 810534e:	d109      	bne.n	8105364 <HAL_TIM_PWM_Start+0x58>
 8105350:	687b      	ldr	r3, [r7, #4]
 8105352:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8105356:	b2db      	uxtb	r3, r3
 8105358:	2b01      	cmp	r3, #1
 810535a:	bf14      	ite	ne
 810535c:	2301      	movne	r3, #1
 810535e:	2300      	moveq	r3, #0
 8105360:	b2db      	uxtb	r3, r3
 8105362:	e022      	b.n	81053aa <HAL_TIM_PWM_Start+0x9e>
 8105364:	683b      	ldr	r3, [r7, #0]
 8105366:	2b0c      	cmp	r3, #12
 8105368:	d109      	bne.n	810537e <HAL_TIM_PWM_Start+0x72>
 810536a:	687b      	ldr	r3, [r7, #4]
 810536c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105370:	b2db      	uxtb	r3, r3
 8105372:	2b01      	cmp	r3, #1
 8105374:	bf14      	ite	ne
 8105376:	2301      	movne	r3, #1
 8105378:	2300      	moveq	r3, #0
 810537a:	b2db      	uxtb	r3, r3
 810537c:	e015      	b.n	81053aa <HAL_TIM_PWM_Start+0x9e>
 810537e:	683b      	ldr	r3, [r7, #0]
 8105380:	2b10      	cmp	r3, #16
 8105382:	d109      	bne.n	8105398 <HAL_TIM_PWM_Start+0x8c>
 8105384:	687b      	ldr	r3, [r7, #4]
 8105386:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 810538a:	b2db      	uxtb	r3, r3
 810538c:	2b01      	cmp	r3, #1
 810538e:	bf14      	ite	ne
 8105390:	2301      	movne	r3, #1
 8105392:	2300      	moveq	r3, #0
 8105394:	b2db      	uxtb	r3, r3
 8105396:	e008      	b.n	81053aa <HAL_TIM_PWM_Start+0x9e>
 8105398:	687b      	ldr	r3, [r7, #4]
 810539a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 810539e:	b2db      	uxtb	r3, r3
 81053a0:	2b01      	cmp	r3, #1
 81053a2:	bf14      	ite	ne
 81053a4:	2301      	movne	r3, #1
 81053a6:	2300      	moveq	r3, #0
 81053a8:	b2db      	uxtb	r3, r3
 81053aa:	2b00      	cmp	r3, #0
 81053ac:	d001      	beq.n	81053b2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 81053ae:	2301      	movs	r3, #1
 81053b0:	e0a1      	b.n	81054f6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 81053b2:	683b      	ldr	r3, [r7, #0]
 81053b4:	2b00      	cmp	r3, #0
 81053b6:	d104      	bne.n	81053c2 <HAL_TIM_PWM_Start+0xb6>
 81053b8:	687b      	ldr	r3, [r7, #4]
 81053ba:	2202      	movs	r2, #2
 81053bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 81053c0:	e023      	b.n	810540a <HAL_TIM_PWM_Start+0xfe>
 81053c2:	683b      	ldr	r3, [r7, #0]
 81053c4:	2b04      	cmp	r3, #4
 81053c6:	d104      	bne.n	81053d2 <HAL_TIM_PWM_Start+0xc6>
 81053c8:	687b      	ldr	r3, [r7, #4]
 81053ca:	2202      	movs	r2, #2
 81053cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 81053d0:	e01b      	b.n	810540a <HAL_TIM_PWM_Start+0xfe>
 81053d2:	683b      	ldr	r3, [r7, #0]
 81053d4:	2b08      	cmp	r3, #8
 81053d6:	d104      	bne.n	81053e2 <HAL_TIM_PWM_Start+0xd6>
 81053d8:	687b      	ldr	r3, [r7, #4]
 81053da:	2202      	movs	r2, #2
 81053dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 81053e0:	e013      	b.n	810540a <HAL_TIM_PWM_Start+0xfe>
 81053e2:	683b      	ldr	r3, [r7, #0]
 81053e4:	2b0c      	cmp	r3, #12
 81053e6:	d104      	bne.n	81053f2 <HAL_TIM_PWM_Start+0xe6>
 81053e8:	687b      	ldr	r3, [r7, #4]
 81053ea:	2202      	movs	r2, #2
 81053ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 81053f0:	e00b      	b.n	810540a <HAL_TIM_PWM_Start+0xfe>
 81053f2:	683b      	ldr	r3, [r7, #0]
 81053f4:	2b10      	cmp	r3, #16
 81053f6:	d104      	bne.n	8105402 <HAL_TIM_PWM_Start+0xf6>
 81053f8:	687b      	ldr	r3, [r7, #4]
 81053fa:	2202      	movs	r2, #2
 81053fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8105400:	e003      	b.n	810540a <HAL_TIM_PWM_Start+0xfe>
 8105402:	687b      	ldr	r3, [r7, #4]
 8105404:	2202      	movs	r2, #2
 8105406:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 810540a:	687b      	ldr	r3, [r7, #4]
 810540c:	681b      	ldr	r3, [r3, #0]
 810540e:	2201      	movs	r2, #1
 8105410:	6839      	ldr	r1, [r7, #0]
 8105412:	4618      	mov	r0, r3
 8105414:	f000 ffe8 	bl	81063e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8105418:	687b      	ldr	r3, [r7, #4]
 810541a:	681b      	ldr	r3, [r3, #0]
 810541c:	4a38      	ldr	r2, [pc, #224]	; (8105500 <HAL_TIM_PWM_Start+0x1f4>)
 810541e:	4293      	cmp	r3, r2
 8105420:	d013      	beq.n	810544a <HAL_TIM_PWM_Start+0x13e>
 8105422:	687b      	ldr	r3, [r7, #4]
 8105424:	681b      	ldr	r3, [r3, #0]
 8105426:	4a37      	ldr	r2, [pc, #220]	; (8105504 <HAL_TIM_PWM_Start+0x1f8>)
 8105428:	4293      	cmp	r3, r2
 810542a:	d00e      	beq.n	810544a <HAL_TIM_PWM_Start+0x13e>
 810542c:	687b      	ldr	r3, [r7, #4]
 810542e:	681b      	ldr	r3, [r3, #0]
 8105430:	4a35      	ldr	r2, [pc, #212]	; (8105508 <HAL_TIM_PWM_Start+0x1fc>)
 8105432:	4293      	cmp	r3, r2
 8105434:	d009      	beq.n	810544a <HAL_TIM_PWM_Start+0x13e>
 8105436:	687b      	ldr	r3, [r7, #4]
 8105438:	681b      	ldr	r3, [r3, #0]
 810543a:	4a34      	ldr	r2, [pc, #208]	; (810550c <HAL_TIM_PWM_Start+0x200>)
 810543c:	4293      	cmp	r3, r2
 810543e:	d004      	beq.n	810544a <HAL_TIM_PWM_Start+0x13e>
 8105440:	687b      	ldr	r3, [r7, #4]
 8105442:	681b      	ldr	r3, [r3, #0]
 8105444:	4a32      	ldr	r2, [pc, #200]	; (8105510 <HAL_TIM_PWM_Start+0x204>)
 8105446:	4293      	cmp	r3, r2
 8105448:	d101      	bne.n	810544e <HAL_TIM_PWM_Start+0x142>
 810544a:	2301      	movs	r3, #1
 810544c:	e000      	b.n	8105450 <HAL_TIM_PWM_Start+0x144>
 810544e:	2300      	movs	r3, #0
 8105450:	2b00      	cmp	r3, #0
 8105452:	d007      	beq.n	8105464 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8105454:	687b      	ldr	r3, [r7, #4]
 8105456:	681b      	ldr	r3, [r3, #0]
 8105458:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810545a:	687b      	ldr	r3, [r7, #4]
 810545c:	681b      	ldr	r3, [r3, #0]
 810545e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8105462:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8105464:	687b      	ldr	r3, [r7, #4]
 8105466:	681b      	ldr	r3, [r3, #0]
 8105468:	4a25      	ldr	r2, [pc, #148]	; (8105500 <HAL_TIM_PWM_Start+0x1f4>)
 810546a:	4293      	cmp	r3, r2
 810546c:	d022      	beq.n	81054b4 <HAL_TIM_PWM_Start+0x1a8>
 810546e:	687b      	ldr	r3, [r7, #4]
 8105470:	681b      	ldr	r3, [r3, #0]
 8105472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105476:	d01d      	beq.n	81054b4 <HAL_TIM_PWM_Start+0x1a8>
 8105478:	687b      	ldr	r3, [r7, #4]
 810547a:	681b      	ldr	r3, [r3, #0]
 810547c:	4a25      	ldr	r2, [pc, #148]	; (8105514 <HAL_TIM_PWM_Start+0x208>)
 810547e:	4293      	cmp	r3, r2
 8105480:	d018      	beq.n	81054b4 <HAL_TIM_PWM_Start+0x1a8>
 8105482:	687b      	ldr	r3, [r7, #4]
 8105484:	681b      	ldr	r3, [r3, #0]
 8105486:	4a24      	ldr	r2, [pc, #144]	; (8105518 <HAL_TIM_PWM_Start+0x20c>)
 8105488:	4293      	cmp	r3, r2
 810548a:	d013      	beq.n	81054b4 <HAL_TIM_PWM_Start+0x1a8>
 810548c:	687b      	ldr	r3, [r7, #4]
 810548e:	681b      	ldr	r3, [r3, #0]
 8105490:	4a22      	ldr	r2, [pc, #136]	; (810551c <HAL_TIM_PWM_Start+0x210>)
 8105492:	4293      	cmp	r3, r2
 8105494:	d00e      	beq.n	81054b4 <HAL_TIM_PWM_Start+0x1a8>
 8105496:	687b      	ldr	r3, [r7, #4]
 8105498:	681b      	ldr	r3, [r3, #0]
 810549a:	4a1a      	ldr	r2, [pc, #104]	; (8105504 <HAL_TIM_PWM_Start+0x1f8>)
 810549c:	4293      	cmp	r3, r2
 810549e:	d009      	beq.n	81054b4 <HAL_TIM_PWM_Start+0x1a8>
 81054a0:	687b      	ldr	r3, [r7, #4]
 81054a2:	681b      	ldr	r3, [r3, #0]
 81054a4:	4a1e      	ldr	r2, [pc, #120]	; (8105520 <HAL_TIM_PWM_Start+0x214>)
 81054a6:	4293      	cmp	r3, r2
 81054a8:	d004      	beq.n	81054b4 <HAL_TIM_PWM_Start+0x1a8>
 81054aa:	687b      	ldr	r3, [r7, #4]
 81054ac:	681b      	ldr	r3, [r3, #0]
 81054ae:	4a16      	ldr	r2, [pc, #88]	; (8105508 <HAL_TIM_PWM_Start+0x1fc>)
 81054b0:	4293      	cmp	r3, r2
 81054b2:	d115      	bne.n	81054e0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 81054b4:	687b      	ldr	r3, [r7, #4]
 81054b6:	681b      	ldr	r3, [r3, #0]
 81054b8:	689a      	ldr	r2, [r3, #8]
 81054ba:	4b1a      	ldr	r3, [pc, #104]	; (8105524 <HAL_TIM_PWM_Start+0x218>)
 81054bc:	4013      	ands	r3, r2
 81054be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81054c0:	68fb      	ldr	r3, [r7, #12]
 81054c2:	2b06      	cmp	r3, #6
 81054c4:	d015      	beq.n	81054f2 <HAL_TIM_PWM_Start+0x1e6>
 81054c6:	68fb      	ldr	r3, [r7, #12]
 81054c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81054cc:	d011      	beq.n	81054f2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 81054ce:	687b      	ldr	r3, [r7, #4]
 81054d0:	681b      	ldr	r3, [r3, #0]
 81054d2:	681a      	ldr	r2, [r3, #0]
 81054d4:	687b      	ldr	r3, [r7, #4]
 81054d6:	681b      	ldr	r3, [r3, #0]
 81054d8:	f042 0201 	orr.w	r2, r2, #1
 81054dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81054de:	e008      	b.n	81054f2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 81054e0:	687b      	ldr	r3, [r7, #4]
 81054e2:	681b      	ldr	r3, [r3, #0]
 81054e4:	681a      	ldr	r2, [r3, #0]
 81054e6:	687b      	ldr	r3, [r7, #4]
 81054e8:	681b      	ldr	r3, [r3, #0]
 81054ea:	f042 0201 	orr.w	r2, r2, #1
 81054ee:	601a      	str	r2, [r3, #0]
 81054f0:	e000      	b.n	81054f4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81054f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 81054f4:	2300      	movs	r3, #0
}
 81054f6:	4618      	mov	r0, r3
 81054f8:	3710      	adds	r7, #16
 81054fa:	46bd      	mov	sp, r7
 81054fc:	bd80      	pop	{r7, pc}
 81054fe:	bf00      	nop
 8105500:	40010000 	.word	0x40010000
 8105504:	40010400 	.word	0x40010400
 8105508:	40014000 	.word	0x40014000
 810550c:	40014400 	.word	0x40014400
 8105510:	40014800 	.word	0x40014800
 8105514:	40000400 	.word	0x40000400
 8105518:	40000800 	.word	0x40000800
 810551c:	40000c00 	.word	0x40000c00
 8105520:	40001800 	.word	0x40001800
 8105524:	00010007 	.word	0x00010007

08105528 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8105528:	b580      	push	{r7, lr}
 810552a:	b082      	sub	sp, #8
 810552c:	af00      	add	r7, sp, #0
 810552e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8105530:	687b      	ldr	r3, [r7, #4]
 8105532:	681b      	ldr	r3, [r3, #0]
 8105534:	691b      	ldr	r3, [r3, #16]
 8105536:	f003 0302 	and.w	r3, r3, #2
 810553a:	2b02      	cmp	r3, #2
 810553c:	d122      	bne.n	8105584 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 810553e:	687b      	ldr	r3, [r7, #4]
 8105540:	681b      	ldr	r3, [r3, #0]
 8105542:	68db      	ldr	r3, [r3, #12]
 8105544:	f003 0302 	and.w	r3, r3, #2
 8105548:	2b02      	cmp	r3, #2
 810554a:	d11b      	bne.n	8105584 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 810554c:	687b      	ldr	r3, [r7, #4]
 810554e:	681b      	ldr	r3, [r3, #0]
 8105550:	f06f 0202 	mvn.w	r2, #2
 8105554:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8105556:	687b      	ldr	r3, [r7, #4]
 8105558:	2201      	movs	r2, #1
 810555a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 810555c:	687b      	ldr	r3, [r7, #4]
 810555e:	681b      	ldr	r3, [r3, #0]
 8105560:	699b      	ldr	r3, [r3, #24]
 8105562:	f003 0303 	and.w	r3, r3, #3
 8105566:	2b00      	cmp	r3, #0
 8105568:	d003      	beq.n	8105572 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 810556a:	6878      	ldr	r0, [r7, #4]
 810556c:	f000 fb12 	bl	8105b94 <HAL_TIM_IC_CaptureCallback>
 8105570:	e005      	b.n	810557e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8105572:	6878      	ldr	r0, [r7, #4]
 8105574:	f000 fb04 	bl	8105b80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8105578:	6878      	ldr	r0, [r7, #4]
 810557a:	f000 fb15 	bl	8105ba8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810557e:	687b      	ldr	r3, [r7, #4]
 8105580:	2200      	movs	r2, #0
 8105582:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8105584:	687b      	ldr	r3, [r7, #4]
 8105586:	681b      	ldr	r3, [r3, #0]
 8105588:	691b      	ldr	r3, [r3, #16]
 810558a:	f003 0304 	and.w	r3, r3, #4
 810558e:	2b04      	cmp	r3, #4
 8105590:	d122      	bne.n	81055d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8105592:	687b      	ldr	r3, [r7, #4]
 8105594:	681b      	ldr	r3, [r3, #0]
 8105596:	68db      	ldr	r3, [r3, #12]
 8105598:	f003 0304 	and.w	r3, r3, #4
 810559c:	2b04      	cmp	r3, #4
 810559e:	d11b      	bne.n	81055d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 81055a0:	687b      	ldr	r3, [r7, #4]
 81055a2:	681b      	ldr	r3, [r3, #0]
 81055a4:	f06f 0204 	mvn.w	r2, #4
 81055a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 81055aa:	687b      	ldr	r3, [r7, #4]
 81055ac:	2202      	movs	r2, #2
 81055ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 81055b0:	687b      	ldr	r3, [r7, #4]
 81055b2:	681b      	ldr	r3, [r3, #0]
 81055b4:	699b      	ldr	r3, [r3, #24]
 81055b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81055ba:	2b00      	cmp	r3, #0
 81055bc:	d003      	beq.n	81055c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81055be:	6878      	ldr	r0, [r7, #4]
 81055c0:	f000 fae8 	bl	8105b94 <HAL_TIM_IC_CaptureCallback>
 81055c4:	e005      	b.n	81055d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81055c6:	6878      	ldr	r0, [r7, #4]
 81055c8:	f000 fada 	bl	8105b80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81055cc:	6878      	ldr	r0, [r7, #4]
 81055ce:	f000 faeb 	bl	8105ba8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81055d2:	687b      	ldr	r3, [r7, #4]
 81055d4:	2200      	movs	r2, #0
 81055d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 81055d8:	687b      	ldr	r3, [r7, #4]
 81055da:	681b      	ldr	r3, [r3, #0]
 81055dc:	691b      	ldr	r3, [r3, #16]
 81055de:	f003 0308 	and.w	r3, r3, #8
 81055e2:	2b08      	cmp	r3, #8
 81055e4:	d122      	bne.n	810562c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 81055e6:	687b      	ldr	r3, [r7, #4]
 81055e8:	681b      	ldr	r3, [r3, #0]
 81055ea:	68db      	ldr	r3, [r3, #12]
 81055ec:	f003 0308 	and.w	r3, r3, #8
 81055f0:	2b08      	cmp	r3, #8
 81055f2:	d11b      	bne.n	810562c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 81055f4:	687b      	ldr	r3, [r7, #4]
 81055f6:	681b      	ldr	r3, [r3, #0]
 81055f8:	f06f 0208 	mvn.w	r2, #8
 81055fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 81055fe:	687b      	ldr	r3, [r7, #4]
 8105600:	2204      	movs	r2, #4
 8105602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8105604:	687b      	ldr	r3, [r7, #4]
 8105606:	681b      	ldr	r3, [r3, #0]
 8105608:	69db      	ldr	r3, [r3, #28]
 810560a:	f003 0303 	and.w	r3, r3, #3
 810560e:	2b00      	cmp	r3, #0
 8105610:	d003      	beq.n	810561a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8105612:	6878      	ldr	r0, [r7, #4]
 8105614:	f000 fabe 	bl	8105b94 <HAL_TIM_IC_CaptureCallback>
 8105618:	e005      	b.n	8105626 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810561a:	6878      	ldr	r0, [r7, #4]
 810561c:	f000 fab0 	bl	8105b80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8105620:	6878      	ldr	r0, [r7, #4]
 8105622:	f000 fac1 	bl	8105ba8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8105626:	687b      	ldr	r3, [r7, #4]
 8105628:	2200      	movs	r2, #0
 810562a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 810562c:	687b      	ldr	r3, [r7, #4]
 810562e:	681b      	ldr	r3, [r3, #0]
 8105630:	691b      	ldr	r3, [r3, #16]
 8105632:	f003 0310 	and.w	r3, r3, #16
 8105636:	2b10      	cmp	r3, #16
 8105638:	d122      	bne.n	8105680 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 810563a:	687b      	ldr	r3, [r7, #4]
 810563c:	681b      	ldr	r3, [r3, #0]
 810563e:	68db      	ldr	r3, [r3, #12]
 8105640:	f003 0310 	and.w	r3, r3, #16
 8105644:	2b10      	cmp	r3, #16
 8105646:	d11b      	bne.n	8105680 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8105648:	687b      	ldr	r3, [r7, #4]
 810564a:	681b      	ldr	r3, [r3, #0]
 810564c:	f06f 0210 	mvn.w	r2, #16
 8105650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8105652:	687b      	ldr	r3, [r7, #4]
 8105654:	2208      	movs	r2, #8
 8105656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8105658:	687b      	ldr	r3, [r7, #4]
 810565a:	681b      	ldr	r3, [r3, #0]
 810565c:	69db      	ldr	r3, [r3, #28]
 810565e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8105662:	2b00      	cmp	r3, #0
 8105664:	d003      	beq.n	810566e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8105666:	6878      	ldr	r0, [r7, #4]
 8105668:	f000 fa94 	bl	8105b94 <HAL_TIM_IC_CaptureCallback>
 810566c:	e005      	b.n	810567a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810566e:	6878      	ldr	r0, [r7, #4]
 8105670:	f000 fa86 	bl	8105b80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8105674:	6878      	ldr	r0, [r7, #4]
 8105676:	f000 fa97 	bl	8105ba8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810567a:	687b      	ldr	r3, [r7, #4]
 810567c:	2200      	movs	r2, #0
 810567e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8105680:	687b      	ldr	r3, [r7, #4]
 8105682:	681b      	ldr	r3, [r3, #0]
 8105684:	691b      	ldr	r3, [r3, #16]
 8105686:	f003 0301 	and.w	r3, r3, #1
 810568a:	2b01      	cmp	r3, #1
 810568c:	d10e      	bne.n	81056ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 810568e:	687b      	ldr	r3, [r7, #4]
 8105690:	681b      	ldr	r3, [r3, #0]
 8105692:	68db      	ldr	r3, [r3, #12]
 8105694:	f003 0301 	and.w	r3, r3, #1
 8105698:	2b01      	cmp	r3, #1
 810569a:	d107      	bne.n	81056ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 810569c:	687b      	ldr	r3, [r7, #4]
 810569e:	681b      	ldr	r3, [r3, #0]
 81056a0:	f06f 0201 	mvn.w	r2, #1
 81056a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 81056a6:	6878      	ldr	r0, [r7, #4]
 81056a8:	f7fc fae0 	bl	8101c6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 81056ac:	687b      	ldr	r3, [r7, #4]
 81056ae:	681b      	ldr	r3, [r3, #0]
 81056b0:	691b      	ldr	r3, [r3, #16]
 81056b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81056b6:	2b80      	cmp	r3, #128	; 0x80
 81056b8:	d10e      	bne.n	81056d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 81056ba:	687b      	ldr	r3, [r7, #4]
 81056bc:	681b      	ldr	r3, [r3, #0]
 81056be:	68db      	ldr	r3, [r3, #12]
 81056c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81056c4:	2b80      	cmp	r3, #128	; 0x80
 81056c6:	d107      	bne.n	81056d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 81056c8:	687b      	ldr	r3, [r7, #4]
 81056ca:	681b      	ldr	r3, [r3, #0]
 81056cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 81056d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 81056d2:	6878      	ldr	r0, [r7, #4]
 81056d4:	f000 ff46 	bl	8106564 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 81056d8:	687b      	ldr	r3, [r7, #4]
 81056da:	681b      	ldr	r3, [r3, #0]
 81056dc:	691b      	ldr	r3, [r3, #16]
 81056de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81056e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81056e6:	d10e      	bne.n	8105706 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 81056e8:	687b      	ldr	r3, [r7, #4]
 81056ea:	681b      	ldr	r3, [r3, #0]
 81056ec:	68db      	ldr	r3, [r3, #12]
 81056ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81056f2:	2b80      	cmp	r3, #128	; 0x80
 81056f4:	d107      	bne.n	8105706 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 81056f6:	687b      	ldr	r3, [r7, #4]
 81056f8:	681b      	ldr	r3, [r3, #0]
 81056fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 81056fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8105700:	6878      	ldr	r0, [r7, #4]
 8105702:	f000 ff39 	bl	8106578 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8105706:	687b      	ldr	r3, [r7, #4]
 8105708:	681b      	ldr	r3, [r3, #0]
 810570a:	691b      	ldr	r3, [r3, #16]
 810570c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8105710:	2b40      	cmp	r3, #64	; 0x40
 8105712:	d10e      	bne.n	8105732 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8105714:	687b      	ldr	r3, [r7, #4]
 8105716:	681b      	ldr	r3, [r3, #0]
 8105718:	68db      	ldr	r3, [r3, #12]
 810571a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810571e:	2b40      	cmp	r3, #64	; 0x40
 8105720:	d107      	bne.n	8105732 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8105722:	687b      	ldr	r3, [r7, #4]
 8105724:	681b      	ldr	r3, [r3, #0]
 8105726:	f06f 0240 	mvn.w	r2, #64	; 0x40
 810572a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 810572c:	6878      	ldr	r0, [r7, #4]
 810572e:	f000 fa45 	bl	8105bbc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8105732:	687b      	ldr	r3, [r7, #4]
 8105734:	681b      	ldr	r3, [r3, #0]
 8105736:	691b      	ldr	r3, [r3, #16]
 8105738:	f003 0320 	and.w	r3, r3, #32
 810573c:	2b20      	cmp	r3, #32
 810573e:	d10e      	bne.n	810575e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8105740:	687b      	ldr	r3, [r7, #4]
 8105742:	681b      	ldr	r3, [r3, #0]
 8105744:	68db      	ldr	r3, [r3, #12]
 8105746:	f003 0320 	and.w	r3, r3, #32
 810574a:	2b20      	cmp	r3, #32
 810574c:	d107      	bne.n	810575e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 810574e:	687b      	ldr	r3, [r7, #4]
 8105750:	681b      	ldr	r3, [r3, #0]
 8105752:	f06f 0220 	mvn.w	r2, #32
 8105756:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8105758:	6878      	ldr	r0, [r7, #4]
 810575a:	f000 fef9 	bl	8106550 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 810575e:	bf00      	nop
 8105760:	3708      	adds	r7, #8
 8105762:	46bd      	mov	sp, r7
 8105764:	bd80      	pop	{r7, pc}
	...

08105768 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8105768:	b580      	push	{r7, lr}
 810576a:	b086      	sub	sp, #24
 810576c:	af00      	add	r7, sp, #0
 810576e:	60f8      	str	r0, [r7, #12]
 8105770:	60b9      	str	r1, [r7, #8]
 8105772:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8105774:	2300      	movs	r3, #0
 8105776:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8105778:	68fb      	ldr	r3, [r7, #12]
 810577a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 810577e:	2b01      	cmp	r3, #1
 8105780:	d101      	bne.n	8105786 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8105782:	2302      	movs	r3, #2
 8105784:	e0ff      	b.n	8105986 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8105786:	68fb      	ldr	r3, [r7, #12]
 8105788:	2201      	movs	r2, #1
 810578a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 810578e:	687b      	ldr	r3, [r7, #4]
 8105790:	2b14      	cmp	r3, #20
 8105792:	f200 80f0 	bhi.w	8105976 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8105796:	a201      	add	r2, pc, #4	; (adr r2, 810579c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8105798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810579c:	081057f1 	.word	0x081057f1
 81057a0:	08105977 	.word	0x08105977
 81057a4:	08105977 	.word	0x08105977
 81057a8:	08105977 	.word	0x08105977
 81057ac:	08105831 	.word	0x08105831
 81057b0:	08105977 	.word	0x08105977
 81057b4:	08105977 	.word	0x08105977
 81057b8:	08105977 	.word	0x08105977
 81057bc:	08105873 	.word	0x08105873
 81057c0:	08105977 	.word	0x08105977
 81057c4:	08105977 	.word	0x08105977
 81057c8:	08105977 	.word	0x08105977
 81057cc:	081058b3 	.word	0x081058b3
 81057d0:	08105977 	.word	0x08105977
 81057d4:	08105977 	.word	0x08105977
 81057d8:	08105977 	.word	0x08105977
 81057dc:	081058f5 	.word	0x081058f5
 81057e0:	08105977 	.word	0x08105977
 81057e4:	08105977 	.word	0x08105977
 81057e8:	08105977 	.word	0x08105977
 81057ec:	08105935 	.word	0x08105935
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 81057f0:	68fb      	ldr	r3, [r7, #12]
 81057f2:	681b      	ldr	r3, [r3, #0]
 81057f4:	68b9      	ldr	r1, [r7, #8]
 81057f6:	4618      	mov	r0, r3
 81057f8:	f000 fa84 	bl	8105d04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 81057fc:	68fb      	ldr	r3, [r7, #12]
 81057fe:	681b      	ldr	r3, [r3, #0]
 8105800:	699a      	ldr	r2, [r3, #24]
 8105802:	68fb      	ldr	r3, [r7, #12]
 8105804:	681b      	ldr	r3, [r3, #0]
 8105806:	f042 0208 	orr.w	r2, r2, #8
 810580a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 810580c:	68fb      	ldr	r3, [r7, #12]
 810580e:	681b      	ldr	r3, [r3, #0]
 8105810:	699a      	ldr	r2, [r3, #24]
 8105812:	68fb      	ldr	r3, [r7, #12]
 8105814:	681b      	ldr	r3, [r3, #0]
 8105816:	f022 0204 	bic.w	r2, r2, #4
 810581a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 810581c:	68fb      	ldr	r3, [r7, #12]
 810581e:	681b      	ldr	r3, [r3, #0]
 8105820:	6999      	ldr	r1, [r3, #24]
 8105822:	68bb      	ldr	r3, [r7, #8]
 8105824:	691a      	ldr	r2, [r3, #16]
 8105826:	68fb      	ldr	r3, [r7, #12]
 8105828:	681b      	ldr	r3, [r3, #0]
 810582a:	430a      	orrs	r2, r1
 810582c:	619a      	str	r2, [r3, #24]
      break;
 810582e:	e0a5      	b.n	810597c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8105830:	68fb      	ldr	r3, [r7, #12]
 8105832:	681b      	ldr	r3, [r3, #0]
 8105834:	68b9      	ldr	r1, [r7, #8]
 8105836:	4618      	mov	r0, r3
 8105838:	f000 faf4 	bl	8105e24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 810583c:	68fb      	ldr	r3, [r7, #12]
 810583e:	681b      	ldr	r3, [r3, #0]
 8105840:	699a      	ldr	r2, [r3, #24]
 8105842:	68fb      	ldr	r3, [r7, #12]
 8105844:	681b      	ldr	r3, [r3, #0]
 8105846:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810584a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 810584c:	68fb      	ldr	r3, [r7, #12]
 810584e:	681b      	ldr	r3, [r3, #0]
 8105850:	699a      	ldr	r2, [r3, #24]
 8105852:	68fb      	ldr	r3, [r7, #12]
 8105854:	681b      	ldr	r3, [r3, #0]
 8105856:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 810585a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 810585c:	68fb      	ldr	r3, [r7, #12]
 810585e:	681b      	ldr	r3, [r3, #0]
 8105860:	6999      	ldr	r1, [r3, #24]
 8105862:	68bb      	ldr	r3, [r7, #8]
 8105864:	691b      	ldr	r3, [r3, #16]
 8105866:	021a      	lsls	r2, r3, #8
 8105868:	68fb      	ldr	r3, [r7, #12]
 810586a:	681b      	ldr	r3, [r3, #0]
 810586c:	430a      	orrs	r2, r1
 810586e:	619a      	str	r2, [r3, #24]
      break;
 8105870:	e084      	b.n	810597c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8105872:	68fb      	ldr	r3, [r7, #12]
 8105874:	681b      	ldr	r3, [r3, #0]
 8105876:	68b9      	ldr	r1, [r7, #8]
 8105878:	4618      	mov	r0, r3
 810587a:	f000 fb5d 	bl	8105f38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 810587e:	68fb      	ldr	r3, [r7, #12]
 8105880:	681b      	ldr	r3, [r3, #0]
 8105882:	69da      	ldr	r2, [r3, #28]
 8105884:	68fb      	ldr	r3, [r7, #12]
 8105886:	681b      	ldr	r3, [r3, #0]
 8105888:	f042 0208 	orr.w	r2, r2, #8
 810588c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 810588e:	68fb      	ldr	r3, [r7, #12]
 8105890:	681b      	ldr	r3, [r3, #0]
 8105892:	69da      	ldr	r2, [r3, #28]
 8105894:	68fb      	ldr	r3, [r7, #12]
 8105896:	681b      	ldr	r3, [r3, #0]
 8105898:	f022 0204 	bic.w	r2, r2, #4
 810589c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 810589e:	68fb      	ldr	r3, [r7, #12]
 81058a0:	681b      	ldr	r3, [r3, #0]
 81058a2:	69d9      	ldr	r1, [r3, #28]
 81058a4:	68bb      	ldr	r3, [r7, #8]
 81058a6:	691a      	ldr	r2, [r3, #16]
 81058a8:	68fb      	ldr	r3, [r7, #12]
 81058aa:	681b      	ldr	r3, [r3, #0]
 81058ac:	430a      	orrs	r2, r1
 81058ae:	61da      	str	r2, [r3, #28]
      break;
 81058b0:	e064      	b.n	810597c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 81058b2:	68fb      	ldr	r3, [r7, #12]
 81058b4:	681b      	ldr	r3, [r3, #0]
 81058b6:	68b9      	ldr	r1, [r7, #8]
 81058b8:	4618      	mov	r0, r3
 81058ba:	f000 fbc5 	bl	8106048 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 81058be:	68fb      	ldr	r3, [r7, #12]
 81058c0:	681b      	ldr	r3, [r3, #0]
 81058c2:	69da      	ldr	r2, [r3, #28]
 81058c4:	68fb      	ldr	r3, [r7, #12]
 81058c6:	681b      	ldr	r3, [r3, #0]
 81058c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 81058cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 81058ce:	68fb      	ldr	r3, [r7, #12]
 81058d0:	681b      	ldr	r3, [r3, #0]
 81058d2:	69da      	ldr	r2, [r3, #28]
 81058d4:	68fb      	ldr	r3, [r7, #12]
 81058d6:	681b      	ldr	r3, [r3, #0]
 81058d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 81058dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 81058de:	68fb      	ldr	r3, [r7, #12]
 81058e0:	681b      	ldr	r3, [r3, #0]
 81058e2:	69d9      	ldr	r1, [r3, #28]
 81058e4:	68bb      	ldr	r3, [r7, #8]
 81058e6:	691b      	ldr	r3, [r3, #16]
 81058e8:	021a      	lsls	r2, r3, #8
 81058ea:	68fb      	ldr	r3, [r7, #12]
 81058ec:	681b      	ldr	r3, [r3, #0]
 81058ee:	430a      	orrs	r2, r1
 81058f0:	61da      	str	r2, [r3, #28]
      break;
 81058f2:	e043      	b.n	810597c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 81058f4:	68fb      	ldr	r3, [r7, #12]
 81058f6:	681b      	ldr	r3, [r3, #0]
 81058f8:	68b9      	ldr	r1, [r7, #8]
 81058fa:	4618      	mov	r0, r3
 81058fc:	f000 fc0e 	bl	810611c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8105900:	68fb      	ldr	r3, [r7, #12]
 8105902:	681b      	ldr	r3, [r3, #0]
 8105904:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8105906:	68fb      	ldr	r3, [r7, #12]
 8105908:	681b      	ldr	r3, [r3, #0]
 810590a:	f042 0208 	orr.w	r2, r2, #8
 810590e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8105910:	68fb      	ldr	r3, [r7, #12]
 8105912:	681b      	ldr	r3, [r3, #0]
 8105914:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8105916:	68fb      	ldr	r3, [r7, #12]
 8105918:	681b      	ldr	r3, [r3, #0]
 810591a:	f022 0204 	bic.w	r2, r2, #4
 810591e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8105920:	68fb      	ldr	r3, [r7, #12]
 8105922:	681b      	ldr	r3, [r3, #0]
 8105924:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8105926:	68bb      	ldr	r3, [r7, #8]
 8105928:	691a      	ldr	r2, [r3, #16]
 810592a:	68fb      	ldr	r3, [r7, #12]
 810592c:	681b      	ldr	r3, [r3, #0]
 810592e:	430a      	orrs	r2, r1
 8105930:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8105932:	e023      	b.n	810597c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8105934:	68fb      	ldr	r3, [r7, #12]
 8105936:	681b      	ldr	r3, [r3, #0]
 8105938:	68b9      	ldr	r1, [r7, #8]
 810593a:	4618      	mov	r0, r3
 810593c:	f000 fc52 	bl	81061e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8105940:	68fb      	ldr	r3, [r7, #12]
 8105942:	681b      	ldr	r3, [r3, #0]
 8105944:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8105946:	68fb      	ldr	r3, [r7, #12]
 8105948:	681b      	ldr	r3, [r3, #0]
 810594a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810594e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8105950:	68fb      	ldr	r3, [r7, #12]
 8105952:	681b      	ldr	r3, [r3, #0]
 8105954:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8105956:	68fb      	ldr	r3, [r7, #12]
 8105958:	681b      	ldr	r3, [r3, #0]
 810595a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 810595e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8105960:	68fb      	ldr	r3, [r7, #12]
 8105962:	681b      	ldr	r3, [r3, #0]
 8105964:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8105966:	68bb      	ldr	r3, [r7, #8]
 8105968:	691b      	ldr	r3, [r3, #16]
 810596a:	021a      	lsls	r2, r3, #8
 810596c:	68fb      	ldr	r3, [r7, #12]
 810596e:	681b      	ldr	r3, [r3, #0]
 8105970:	430a      	orrs	r2, r1
 8105972:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8105974:	e002      	b.n	810597c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8105976:	2301      	movs	r3, #1
 8105978:	75fb      	strb	r3, [r7, #23]
      break;
 810597a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 810597c:	68fb      	ldr	r3, [r7, #12]
 810597e:	2200      	movs	r2, #0
 8105980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8105984:	7dfb      	ldrb	r3, [r7, #23]
}
 8105986:	4618      	mov	r0, r3
 8105988:	3718      	adds	r7, #24
 810598a:	46bd      	mov	sp, r7
 810598c:	bd80      	pop	{r7, pc}
 810598e:	bf00      	nop

08105990 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8105990:	b580      	push	{r7, lr}
 8105992:	b084      	sub	sp, #16
 8105994:	af00      	add	r7, sp, #0
 8105996:	6078      	str	r0, [r7, #4]
 8105998:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 810599a:	2300      	movs	r3, #0
 810599c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 810599e:	687b      	ldr	r3, [r7, #4]
 81059a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 81059a4:	2b01      	cmp	r3, #1
 81059a6:	d101      	bne.n	81059ac <HAL_TIM_ConfigClockSource+0x1c>
 81059a8:	2302      	movs	r3, #2
 81059aa:	e0de      	b.n	8105b6a <HAL_TIM_ConfigClockSource+0x1da>
 81059ac:	687b      	ldr	r3, [r7, #4]
 81059ae:	2201      	movs	r2, #1
 81059b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 81059b4:	687b      	ldr	r3, [r7, #4]
 81059b6:	2202      	movs	r2, #2
 81059b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 81059bc:	687b      	ldr	r3, [r7, #4]
 81059be:	681b      	ldr	r3, [r3, #0]
 81059c0:	689b      	ldr	r3, [r3, #8]
 81059c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 81059c4:	68bb      	ldr	r3, [r7, #8]
 81059c6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 81059ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 81059ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 81059d0:	68bb      	ldr	r3, [r7, #8]
 81059d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81059d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 81059d8:	687b      	ldr	r3, [r7, #4]
 81059da:	681b      	ldr	r3, [r3, #0]
 81059dc:	68ba      	ldr	r2, [r7, #8]
 81059de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 81059e0:	683b      	ldr	r3, [r7, #0]
 81059e2:	681b      	ldr	r3, [r3, #0]
 81059e4:	4a63      	ldr	r2, [pc, #396]	; (8105b74 <HAL_TIM_ConfigClockSource+0x1e4>)
 81059e6:	4293      	cmp	r3, r2
 81059e8:	f000 80a9 	beq.w	8105b3e <HAL_TIM_ConfigClockSource+0x1ae>
 81059ec:	4a61      	ldr	r2, [pc, #388]	; (8105b74 <HAL_TIM_ConfigClockSource+0x1e4>)
 81059ee:	4293      	cmp	r3, r2
 81059f0:	f200 80ae 	bhi.w	8105b50 <HAL_TIM_ConfigClockSource+0x1c0>
 81059f4:	4a60      	ldr	r2, [pc, #384]	; (8105b78 <HAL_TIM_ConfigClockSource+0x1e8>)
 81059f6:	4293      	cmp	r3, r2
 81059f8:	f000 80a1 	beq.w	8105b3e <HAL_TIM_ConfigClockSource+0x1ae>
 81059fc:	4a5e      	ldr	r2, [pc, #376]	; (8105b78 <HAL_TIM_ConfigClockSource+0x1e8>)
 81059fe:	4293      	cmp	r3, r2
 8105a00:	f200 80a6 	bhi.w	8105b50 <HAL_TIM_ConfigClockSource+0x1c0>
 8105a04:	4a5d      	ldr	r2, [pc, #372]	; (8105b7c <HAL_TIM_ConfigClockSource+0x1ec>)
 8105a06:	4293      	cmp	r3, r2
 8105a08:	f000 8099 	beq.w	8105b3e <HAL_TIM_ConfigClockSource+0x1ae>
 8105a0c:	4a5b      	ldr	r2, [pc, #364]	; (8105b7c <HAL_TIM_ConfigClockSource+0x1ec>)
 8105a0e:	4293      	cmp	r3, r2
 8105a10:	f200 809e 	bhi.w	8105b50 <HAL_TIM_ConfigClockSource+0x1c0>
 8105a14:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8105a18:	f000 8091 	beq.w	8105b3e <HAL_TIM_ConfigClockSource+0x1ae>
 8105a1c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8105a20:	f200 8096 	bhi.w	8105b50 <HAL_TIM_ConfigClockSource+0x1c0>
 8105a24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8105a28:	f000 8089 	beq.w	8105b3e <HAL_TIM_ConfigClockSource+0x1ae>
 8105a2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8105a30:	f200 808e 	bhi.w	8105b50 <HAL_TIM_ConfigClockSource+0x1c0>
 8105a34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105a38:	d03e      	beq.n	8105ab8 <HAL_TIM_ConfigClockSource+0x128>
 8105a3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105a3e:	f200 8087 	bhi.w	8105b50 <HAL_TIM_ConfigClockSource+0x1c0>
 8105a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105a46:	f000 8086 	beq.w	8105b56 <HAL_TIM_ConfigClockSource+0x1c6>
 8105a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105a4e:	d87f      	bhi.n	8105b50 <HAL_TIM_ConfigClockSource+0x1c0>
 8105a50:	2b70      	cmp	r3, #112	; 0x70
 8105a52:	d01a      	beq.n	8105a8a <HAL_TIM_ConfigClockSource+0xfa>
 8105a54:	2b70      	cmp	r3, #112	; 0x70
 8105a56:	d87b      	bhi.n	8105b50 <HAL_TIM_ConfigClockSource+0x1c0>
 8105a58:	2b60      	cmp	r3, #96	; 0x60
 8105a5a:	d050      	beq.n	8105afe <HAL_TIM_ConfigClockSource+0x16e>
 8105a5c:	2b60      	cmp	r3, #96	; 0x60
 8105a5e:	d877      	bhi.n	8105b50 <HAL_TIM_ConfigClockSource+0x1c0>
 8105a60:	2b50      	cmp	r3, #80	; 0x50
 8105a62:	d03c      	beq.n	8105ade <HAL_TIM_ConfigClockSource+0x14e>
 8105a64:	2b50      	cmp	r3, #80	; 0x50
 8105a66:	d873      	bhi.n	8105b50 <HAL_TIM_ConfigClockSource+0x1c0>
 8105a68:	2b40      	cmp	r3, #64	; 0x40
 8105a6a:	d058      	beq.n	8105b1e <HAL_TIM_ConfigClockSource+0x18e>
 8105a6c:	2b40      	cmp	r3, #64	; 0x40
 8105a6e:	d86f      	bhi.n	8105b50 <HAL_TIM_ConfigClockSource+0x1c0>
 8105a70:	2b30      	cmp	r3, #48	; 0x30
 8105a72:	d064      	beq.n	8105b3e <HAL_TIM_ConfigClockSource+0x1ae>
 8105a74:	2b30      	cmp	r3, #48	; 0x30
 8105a76:	d86b      	bhi.n	8105b50 <HAL_TIM_ConfigClockSource+0x1c0>
 8105a78:	2b20      	cmp	r3, #32
 8105a7a:	d060      	beq.n	8105b3e <HAL_TIM_ConfigClockSource+0x1ae>
 8105a7c:	2b20      	cmp	r3, #32
 8105a7e:	d867      	bhi.n	8105b50 <HAL_TIM_ConfigClockSource+0x1c0>
 8105a80:	2b00      	cmp	r3, #0
 8105a82:	d05c      	beq.n	8105b3e <HAL_TIM_ConfigClockSource+0x1ae>
 8105a84:	2b10      	cmp	r3, #16
 8105a86:	d05a      	beq.n	8105b3e <HAL_TIM_ConfigClockSource+0x1ae>
 8105a88:	e062      	b.n	8105b50 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8105a8a:	687b      	ldr	r3, [r7, #4]
 8105a8c:	6818      	ldr	r0, [r3, #0]
 8105a8e:	683b      	ldr	r3, [r7, #0]
 8105a90:	6899      	ldr	r1, [r3, #8]
 8105a92:	683b      	ldr	r3, [r7, #0]
 8105a94:	685a      	ldr	r2, [r3, #4]
 8105a96:	683b      	ldr	r3, [r7, #0]
 8105a98:	68db      	ldr	r3, [r3, #12]
 8105a9a:	f000 fc85 	bl	81063a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8105a9e:	687b      	ldr	r3, [r7, #4]
 8105aa0:	681b      	ldr	r3, [r3, #0]
 8105aa2:	689b      	ldr	r3, [r3, #8]
 8105aa4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8105aa6:	68bb      	ldr	r3, [r7, #8]
 8105aa8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8105aac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8105aae:	687b      	ldr	r3, [r7, #4]
 8105ab0:	681b      	ldr	r3, [r3, #0]
 8105ab2:	68ba      	ldr	r2, [r7, #8]
 8105ab4:	609a      	str	r2, [r3, #8]
      break;
 8105ab6:	e04f      	b.n	8105b58 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8105ab8:	687b      	ldr	r3, [r7, #4]
 8105aba:	6818      	ldr	r0, [r3, #0]
 8105abc:	683b      	ldr	r3, [r7, #0]
 8105abe:	6899      	ldr	r1, [r3, #8]
 8105ac0:	683b      	ldr	r3, [r7, #0]
 8105ac2:	685a      	ldr	r2, [r3, #4]
 8105ac4:	683b      	ldr	r3, [r7, #0]
 8105ac6:	68db      	ldr	r3, [r3, #12]
 8105ac8:	f000 fc6e 	bl	81063a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8105acc:	687b      	ldr	r3, [r7, #4]
 8105ace:	681b      	ldr	r3, [r3, #0]
 8105ad0:	689a      	ldr	r2, [r3, #8]
 8105ad2:	687b      	ldr	r3, [r7, #4]
 8105ad4:	681b      	ldr	r3, [r3, #0]
 8105ad6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8105ada:	609a      	str	r2, [r3, #8]
      break;
 8105adc:	e03c      	b.n	8105b58 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8105ade:	687b      	ldr	r3, [r7, #4]
 8105ae0:	6818      	ldr	r0, [r3, #0]
 8105ae2:	683b      	ldr	r3, [r7, #0]
 8105ae4:	6859      	ldr	r1, [r3, #4]
 8105ae6:	683b      	ldr	r3, [r7, #0]
 8105ae8:	68db      	ldr	r3, [r3, #12]
 8105aea:	461a      	mov	r2, r3
 8105aec:	f000 fbe0 	bl	81062b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8105af0:	687b      	ldr	r3, [r7, #4]
 8105af2:	681b      	ldr	r3, [r3, #0]
 8105af4:	2150      	movs	r1, #80	; 0x50
 8105af6:	4618      	mov	r0, r3
 8105af8:	f000 fc39 	bl	810636e <TIM_ITRx_SetConfig>
      break;
 8105afc:	e02c      	b.n	8105b58 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8105afe:	687b      	ldr	r3, [r7, #4]
 8105b00:	6818      	ldr	r0, [r3, #0]
 8105b02:	683b      	ldr	r3, [r7, #0]
 8105b04:	6859      	ldr	r1, [r3, #4]
 8105b06:	683b      	ldr	r3, [r7, #0]
 8105b08:	68db      	ldr	r3, [r3, #12]
 8105b0a:	461a      	mov	r2, r3
 8105b0c:	f000 fbff 	bl	810630e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8105b10:	687b      	ldr	r3, [r7, #4]
 8105b12:	681b      	ldr	r3, [r3, #0]
 8105b14:	2160      	movs	r1, #96	; 0x60
 8105b16:	4618      	mov	r0, r3
 8105b18:	f000 fc29 	bl	810636e <TIM_ITRx_SetConfig>
      break;
 8105b1c:	e01c      	b.n	8105b58 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8105b1e:	687b      	ldr	r3, [r7, #4]
 8105b20:	6818      	ldr	r0, [r3, #0]
 8105b22:	683b      	ldr	r3, [r7, #0]
 8105b24:	6859      	ldr	r1, [r3, #4]
 8105b26:	683b      	ldr	r3, [r7, #0]
 8105b28:	68db      	ldr	r3, [r3, #12]
 8105b2a:	461a      	mov	r2, r3
 8105b2c:	f000 fbc0 	bl	81062b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8105b30:	687b      	ldr	r3, [r7, #4]
 8105b32:	681b      	ldr	r3, [r3, #0]
 8105b34:	2140      	movs	r1, #64	; 0x40
 8105b36:	4618      	mov	r0, r3
 8105b38:	f000 fc19 	bl	810636e <TIM_ITRx_SetConfig>
      break;
 8105b3c:	e00c      	b.n	8105b58 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8105b3e:	687b      	ldr	r3, [r7, #4]
 8105b40:	681a      	ldr	r2, [r3, #0]
 8105b42:	683b      	ldr	r3, [r7, #0]
 8105b44:	681b      	ldr	r3, [r3, #0]
 8105b46:	4619      	mov	r1, r3
 8105b48:	4610      	mov	r0, r2
 8105b4a:	f000 fc10 	bl	810636e <TIM_ITRx_SetConfig>
      break;
 8105b4e:	e003      	b.n	8105b58 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8105b50:	2301      	movs	r3, #1
 8105b52:	73fb      	strb	r3, [r7, #15]
      break;
 8105b54:	e000      	b.n	8105b58 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8105b56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8105b58:	687b      	ldr	r3, [r7, #4]
 8105b5a:	2201      	movs	r2, #1
 8105b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8105b60:	687b      	ldr	r3, [r7, #4]
 8105b62:	2200      	movs	r2, #0
 8105b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8105b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8105b6a:	4618      	mov	r0, r3
 8105b6c:	3710      	adds	r7, #16
 8105b6e:	46bd      	mov	sp, r7
 8105b70:	bd80      	pop	{r7, pc}
 8105b72:	bf00      	nop
 8105b74:	00100040 	.word	0x00100040
 8105b78:	00100030 	.word	0x00100030
 8105b7c:	00100020 	.word	0x00100020

08105b80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8105b80:	b480      	push	{r7}
 8105b82:	b083      	sub	sp, #12
 8105b84:	af00      	add	r7, sp, #0
 8105b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8105b88:	bf00      	nop
 8105b8a:	370c      	adds	r7, #12
 8105b8c:	46bd      	mov	sp, r7
 8105b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105b92:	4770      	bx	lr

08105b94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8105b94:	b480      	push	{r7}
 8105b96:	b083      	sub	sp, #12
 8105b98:	af00      	add	r7, sp, #0
 8105b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8105b9c:	bf00      	nop
 8105b9e:	370c      	adds	r7, #12
 8105ba0:	46bd      	mov	sp, r7
 8105ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105ba6:	4770      	bx	lr

08105ba8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8105ba8:	b480      	push	{r7}
 8105baa:	b083      	sub	sp, #12
 8105bac:	af00      	add	r7, sp, #0
 8105bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8105bb0:	bf00      	nop
 8105bb2:	370c      	adds	r7, #12
 8105bb4:	46bd      	mov	sp, r7
 8105bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105bba:	4770      	bx	lr

08105bbc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8105bbc:	b480      	push	{r7}
 8105bbe:	b083      	sub	sp, #12
 8105bc0:	af00      	add	r7, sp, #0
 8105bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8105bc4:	bf00      	nop
 8105bc6:	370c      	adds	r7, #12
 8105bc8:	46bd      	mov	sp, r7
 8105bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105bce:	4770      	bx	lr

08105bd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8105bd0:	b480      	push	{r7}
 8105bd2:	b085      	sub	sp, #20
 8105bd4:	af00      	add	r7, sp, #0
 8105bd6:	6078      	str	r0, [r7, #4]
 8105bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8105bda:	687b      	ldr	r3, [r7, #4]
 8105bdc:	681b      	ldr	r3, [r3, #0]
 8105bde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8105be0:	687b      	ldr	r3, [r7, #4]
 8105be2:	4a40      	ldr	r2, [pc, #256]	; (8105ce4 <TIM_Base_SetConfig+0x114>)
 8105be4:	4293      	cmp	r3, r2
 8105be6:	d013      	beq.n	8105c10 <TIM_Base_SetConfig+0x40>
 8105be8:	687b      	ldr	r3, [r7, #4]
 8105bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105bee:	d00f      	beq.n	8105c10 <TIM_Base_SetConfig+0x40>
 8105bf0:	687b      	ldr	r3, [r7, #4]
 8105bf2:	4a3d      	ldr	r2, [pc, #244]	; (8105ce8 <TIM_Base_SetConfig+0x118>)
 8105bf4:	4293      	cmp	r3, r2
 8105bf6:	d00b      	beq.n	8105c10 <TIM_Base_SetConfig+0x40>
 8105bf8:	687b      	ldr	r3, [r7, #4]
 8105bfa:	4a3c      	ldr	r2, [pc, #240]	; (8105cec <TIM_Base_SetConfig+0x11c>)
 8105bfc:	4293      	cmp	r3, r2
 8105bfe:	d007      	beq.n	8105c10 <TIM_Base_SetConfig+0x40>
 8105c00:	687b      	ldr	r3, [r7, #4]
 8105c02:	4a3b      	ldr	r2, [pc, #236]	; (8105cf0 <TIM_Base_SetConfig+0x120>)
 8105c04:	4293      	cmp	r3, r2
 8105c06:	d003      	beq.n	8105c10 <TIM_Base_SetConfig+0x40>
 8105c08:	687b      	ldr	r3, [r7, #4]
 8105c0a:	4a3a      	ldr	r2, [pc, #232]	; (8105cf4 <TIM_Base_SetConfig+0x124>)
 8105c0c:	4293      	cmp	r3, r2
 8105c0e:	d108      	bne.n	8105c22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8105c10:	68fb      	ldr	r3, [r7, #12]
 8105c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8105c16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8105c18:	683b      	ldr	r3, [r7, #0]
 8105c1a:	685b      	ldr	r3, [r3, #4]
 8105c1c:	68fa      	ldr	r2, [r7, #12]
 8105c1e:	4313      	orrs	r3, r2
 8105c20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8105c22:	687b      	ldr	r3, [r7, #4]
 8105c24:	4a2f      	ldr	r2, [pc, #188]	; (8105ce4 <TIM_Base_SetConfig+0x114>)
 8105c26:	4293      	cmp	r3, r2
 8105c28:	d01f      	beq.n	8105c6a <TIM_Base_SetConfig+0x9a>
 8105c2a:	687b      	ldr	r3, [r7, #4]
 8105c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105c30:	d01b      	beq.n	8105c6a <TIM_Base_SetConfig+0x9a>
 8105c32:	687b      	ldr	r3, [r7, #4]
 8105c34:	4a2c      	ldr	r2, [pc, #176]	; (8105ce8 <TIM_Base_SetConfig+0x118>)
 8105c36:	4293      	cmp	r3, r2
 8105c38:	d017      	beq.n	8105c6a <TIM_Base_SetConfig+0x9a>
 8105c3a:	687b      	ldr	r3, [r7, #4]
 8105c3c:	4a2b      	ldr	r2, [pc, #172]	; (8105cec <TIM_Base_SetConfig+0x11c>)
 8105c3e:	4293      	cmp	r3, r2
 8105c40:	d013      	beq.n	8105c6a <TIM_Base_SetConfig+0x9a>
 8105c42:	687b      	ldr	r3, [r7, #4]
 8105c44:	4a2a      	ldr	r2, [pc, #168]	; (8105cf0 <TIM_Base_SetConfig+0x120>)
 8105c46:	4293      	cmp	r3, r2
 8105c48:	d00f      	beq.n	8105c6a <TIM_Base_SetConfig+0x9a>
 8105c4a:	687b      	ldr	r3, [r7, #4]
 8105c4c:	4a29      	ldr	r2, [pc, #164]	; (8105cf4 <TIM_Base_SetConfig+0x124>)
 8105c4e:	4293      	cmp	r3, r2
 8105c50:	d00b      	beq.n	8105c6a <TIM_Base_SetConfig+0x9a>
 8105c52:	687b      	ldr	r3, [r7, #4]
 8105c54:	4a28      	ldr	r2, [pc, #160]	; (8105cf8 <TIM_Base_SetConfig+0x128>)
 8105c56:	4293      	cmp	r3, r2
 8105c58:	d007      	beq.n	8105c6a <TIM_Base_SetConfig+0x9a>
 8105c5a:	687b      	ldr	r3, [r7, #4]
 8105c5c:	4a27      	ldr	r2, [pc, #156]	; (8105cfc <TIM_Base_SetConfig+0x12c>)
 8105c5e:	4293      	cmp	r3, r2
 8105c60:	d003      	beq.n	8105c6a <TIM_Base_SetConfig+0x9a>
 8105c62:	687b      	ldr	r3, [r7, #4]
 8105c64:	4a26      	ldr	r2, [pc, #152]	; (8105d00 <TIM_Base_SetConfig+0x130>)
 8105c66:	4293      	cmp	r3, r2
 8105c68:	d108      	bne.n	8105c7c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8105c6a:	68fb      	ldr	r3, [r7, #12]
 8105c6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8105c70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8105c72:	683b      	ldr	r3, [r7, #0]
 8105c74:	68db      	ldr	r3, [r3, #12]
 8105c76:	68fa      	ldr	r2, [r7, #12]
 8105c78:	4313      	orrs	r3, r2
 8105c7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8105c7c:	68fb      	ldr	r3, [r7, #12]
 8105c7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8105c82:	683b      	ldr	r3, [r7, #0]
 8105c84:	695b      	ldr	r3, [r3, #20]
 8105c86:	4313      	orrs	r3, r2
 8105c88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8105c8a:	687b      	ldr	r3, [r7, #4]
 8105c8c:	68fa      	ldr	r2, [r7, #12]
 8105c8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8105c90:	683b      	ldr	r3, [r7, #0]
 8105c92:	689a      	ldr	r2, [r3, #8]
 8105c94:	687b      	ldr	r3, [r7, #4]
 8105c96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8105c98:	683b      	ldr	r3, [r7, #0]
 8105c9a:	681a      	ldr	r2, [r3, #0]
 8105c9c:	687b      	ldr	r3, [r7, #4]
 8105c9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8105ca0:	687b      	ldr	r3, [r7, #4]
 8105ca2:	4a10      	ldr	r2, [pc, #64]	; (8105ce4 <TIM_Base_SetConfig+0x114>)
 8105ca4:	4293      	cmp	r3, r2
 8105ca6:	d00f      	beq.n	8105cc8 <TIM_Base_SetConfig+0xf8>
 8105ca8:	687b      	ldr	r3, [r7, #4]
 8105caa:	4a12      	ldr	r2, [pc, #72]	; (8105cf4 <TIM_Base_SetConfig+0x124>)
 8105cac:	4293      	cmp	r3, r2
 8105cae:	d00b      	beq.n	8105cc8 <TIM_Base_SetConfig+0xf8>
 8105cb0:	687b      	ldr	r3, [r7, #4]
 8105cb2:	4a11      	ldr	r2, [pc, #68]	; (8105cf8 <TIM_Base_SetConfig+0x128>)
 8105cb4:	4293      	cmp	r3, r2
 8105cb6:	d007      	beq.n	8105cc8 <TIM_Base_SetConfig+0xf8>
 8105cb8:	687b      	ldr	r3, [r7, #4]
 8105cba:	4a10      	ldr	r2, [pc, #64]	; (8105cfc <TIM_Base_SetConfig+0x12c>)
 8105cbc:	4293      	cmp	r3, r2
 8105cbe:	d003      	beq.n	8105cc8 <TIM_Base_SetConfig+0xf8>
 8105cc0:	687b      	ldr	r3, [r7, #4]
 8105cc2:	4a0f      	ldr	r2, [pc, #60]	; (8105d00 <TIM_Base_SetConfig+0x130>)
 8105cc4:	4293      	cmp	r3, r2
 8105cc6:	d103      	bne.n	8105cd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8105cc8:	683b      	ldr	r3, [r7, #0]
 8105cca:	691a      	ldr	r2, [r3, #16]
 8105ccc:	687b      	ldr	r3, [r7, #4]
 8105cce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8105cd0:	687b      	ldr	r3, [r7, #4]
 8105cd2:	2201      	movs	r2, #1
 8105cd4:	615a      	str	r2, [r3, #20]
}
 8105cd6:	bf00      	nop
 8105cd8:	3714      	adds	r7, #20
 8105cda:	46bd      	mov	sp, r7
 8105cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105ce0:	4770      	bx	lr
 8105ce2:	bf00      	nop
 8105ce4:	40010000 	.word	0x40010000
 8105ce8:	40000400 	.word	0x40000400
 8105cec:	40000800 	.word	0x40000800
 8105cf0:	40000c00 	.word	0x40000c00
 8105cf4:	40010400 	.word	0x40010400
 8105cf8:	40014000 	.word	0x40014000
 8105cfc:	40014400 	.word	0x40014400
 8105d00:	40014800 	.word	0x40014800

08105d04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8105d04:	b480      	push	{r7}
 8105d06:	b087      	sub	sp, #28
 8105d08:	af00      	add	r7, sp, #0
 8105d0a:	6078      	str	r0, [r7, #4]
 8105d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8105d0e:	687b      	ldr	r3, [r7, #4]
 8105d10:	6a1b      	ldr	r3, [r3, #32]
 8105d12:	f023 0201 	bic.w	r2, r3, #1
 8105d16:	687b      	ldr	r3, [r7, #4]
 8105d18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8105d1a:	687b      	ldr	r3, [r7, #4]
 8105d1c:	6a1b      	ldr	r3, [r3, #32]
 8105d1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8105d20:	687b      	ldr	r3, [r7, #4]
 8105d22:	685b      	ldr	r3, [r3, #4]
 8105d24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8105d26:	687b      	ldr	r3, [r7, #4]
 8105d28:	699b      	ldr	r3, [r3, #24]
 8105d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8105d2c:	68fb      	ldr	r3, [r7, #12]
 8105d2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8105d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8105d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8105d38:	68fb      	ldr	r3, [r7, #12]
 8105d3a:	f023 0303 	bic.w	r3, r3, #3
 8105d3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8105d40:	683b      	ldr	r3, [r7, #0]
 8105d42:	681b      	ldr	r3, [r3, #0]
 8105d44:	68fa      	ldr	r2, [r7, #12]
 8105d46:	4313      	orrs	r3, r2
 8105d48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8105d4a:	697b      	ldr	r3, [r7, #20]
 8105d4c:	f023 0302 	bic.w	r3, r3, #2
 8105d50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8105d52:	683b      	ldr	r3, [r7, #0]
 8105d54:	689b      	ldr	r3, [r3, #8]
 8105d56:	697a      	ldr	r2, [r7, #20]
 8105d58:	4313      	orrs	r3, r2
 8105d5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8105d5c:	687b      	ldr	r3, [r7, #4]
 8105d5e:	4a2c      	ldr	r2, [pc, #176]	; (8105e10 <TIM_OC1_SetConfig+0x10c>)
 8105d60:	4293      	cmp	r3, r2
 8105d62:	d00f      	beq.n	8105d84 <TIM_OC1_SetConfig+0x80>
 8105d64:	687b      	ldr	r3, [r7, #4]
 8105d66:	4a2b      	ldr	r2, [pc, #172]	; (8105e14 <TIM_OC1_SetConfig+0x110>)
 8105d68:	4293      	cmp	r3, r2
 8105d6a:	d00b      	beq.n	8105d84 <TIM_OC1_SetConfig+0x80>
 8105d6c:	687b      	ldr	r3, [r7, #4]
 8105d6e:	4a2a      	ldr	r2, [pc, #168]	; (8105e18 <TIM_OC1_SetConfig+0x114>)
 8105d70:	4293      	cmp	r3, r2
 8105d72:	d007      	beq.n	8105d84 <TIM_OC1_SetConfig+0x80>
 8105d74:	687b      	ldr	r3, [r7, #4]
 8105d76:	4a29      	ldr	r2, [pc, #164]	; (8105e1c <TIM_OC1_SetConfig+0x118>)
 8105d78:	4293      	cmp	r3, r2
 8105d7a:	d003      	beq.n	8105d84 <TIM_OC1_SetConfig+0x80>
 8105d7c:	687b      	ldr	r3, [r7, #4]
 8105d7e:	4a28      	ldr	r2, [pc, #160]	; (8105e20 <TIM_OC1_SetConfig+0x11c>)
 8105d80:	4293      	cmp	r3, r2
 8105d82:	d10c      	bne.n	8105d9e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8105d84:	697b      	ldr	r3, [r7, #20]
 8105d86:	f023 0308 	bic.w	r3, r3, #8
 8105d8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8105d8c:	683b      	ldr	r3, [r7, #0]
 8105d8e:	68db      	ldr	r3, [r3, #12]
 8105d90:	697a      	ldr	r2, [r7, #20]
 8105d92:	4313      	orrs	r3, r2
 8105d94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8105d96:	697b      	ldr	r3, [r7, #20]
 8105d98:	f023 0304 	bic.w	r3, r3, #4
 8105d9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8105d9e:	687b      	ldr	r3, [r7, #4]
 8105da0:	4a1b      	ldr	r2, [pc, #108]	; (8105e10 <TIM_OC1_SetConfig+0x10c>)
 8105da2:	4293      	cmp	r3, r2
 8105da4:	d00f      	beq.n	8105dc6 <TIM_OC1_SetConfig+0xc2>
 8105da6:	687b      	ldr	r3, [r7, #4]
 8105da8:	4a1a      	ldr	r2, [pc, #104]	; (8105e14 <TIM_OC1_SetConfig+0x110>)
 8105daa:	4293      	cmp	r3, r2
 8105dac:	d00b      	beq.n	8105dc6 <TIM_OC1_SetConfig+0xc2>
 8105dae:	687b      	ldr	r3, [r7, #4]
 8105db0:	4a19      	ldr	r2, [pc, #100]	; (8105e18 <TIM_OC1_SetConfig+0x114>)
 8105db2:	4293      	cmp	r3, r2
 8105db4:	d007      	beq.n	8105dc6 <TIM_OC1_SetConfig+0xc2>
 8105db6:	687b      	ldr	r3, [r7, #4]
 8105db8:	4a18      	ldr	r2, [pc, #96]	; (8105e1c <TIM_OC1_SetConfig+0x118>)
 8105dba:	4293      	cmp	r3, r2
 8105dbc:	d003      	beq.n	8105dc6 <TIM_OC1_SetConfig+0xc2>
 8105dbe:	687b      	ldr	r3, [r7, #4]
 8105dc0:	4a17      	ldr	r2, [pc, #92]	; (8105e20 <TIM_OC1_SetConfig+0x11c>)
 8105dc2:	4293      	cmp	r3, r2
 8105dc4:	d111      	bne.n	8105dea <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8105dc6:	693b      	ldr	r3, [r7, #16]
 8105dc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8105dcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8105dce:	693b      	ldr	r3, [r7, #16]
 8105dd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8105dd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8105dd6:	683b      	ldr	r3, [r7, #0]
 8105dd8:	695b      	ldr	r3, [r3, #20]
 8105dda:	693a      	ldr	r2, [r7, #16]
 8105ddc:	4313      	orrs	r3, r2
 8105dde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8105de0:	683b      	ldr	r3, [r7, #0]
 8105de2:	699b      	ldr	r3, [r3, #24]
 8105de4:	693a      	ldr	r2, [r7, #16]
 8105de6:	4313      	orrs	r3, r2
 8105de8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8105dea:	687b      	ldr	r3, [r7, #4]
 8105dec:	693a      	ldr	r2, [r7, #16]
 8105dee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8105df0:	687b      	ldr	r3, [r7, #4]
 8105df2:	68fa      	ldr	r2, [r7, #12]
 8105df4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8105df6:	683b      	ldr	r3, [r7, #0]
 8105df8:	685a      	ldr	r2, [r3, #4]
 8105dfa:	687b      	ldr	r3, [r7, #4]
 8105dfc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8105dfe:	687b      	ldr	r3, [r7, #4]
 8105e00:	697a      	ldr	r2, [r7, #20]
 8105e02:	621a      	str	r2, [r3, #32]
}
 8105e04:	bf00      	nop
 8105e06:	371c      	adds	r7, #28
 8105e08:	46bd      	mov	sp, r7
 8105e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105e0e:	4770      	bx	lr
 8105e10:	40010000 	.word	0x40010000
 8105e14:	40010400 	.word	0x40010400
 8105e18:	40014000 	.word	0x40014000
 8105e1c:	40014400 	.word	0x40014400
 8105e20:	40014800 	.word	0x40014800

08105e24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8105e24:	b480      	push	{r7}
 8105e26:	b087      	sub	sp, #28
 8105e28:	af00      	add	r7, sp, #0
 8105e2a:	6078      	str	r0, [r7, #4]
 8105e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8105e2e:	687b      	ldr	r3, [r7, #4]
 8105e30:	6a1b      	ldr	r3, [r3, #32]
 8105e32:	f023 0210 	bic.w	r2, r3, #16
 8105e36:	687b      	ldr	r3, [r7, #4]
 8105e38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8105e3a:	687b      	ldr	r3, [r7, #4]
 8105e3c:	6a1b      	ldr	r3, [r3, #32]
 8105e3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8105e40:	687b      	ldr	r3, [r7, #4]
 8105e42:	685b      	ldr	r3, [r3, #4]
 8105e44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8105e46:	687b      	ldr	r3, [r7, #4]
 8105e48:	699b      	ldr	r3, [r3, #24]
 8105e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8105e4c:	68fb      	ldr	r3, [r7, #12]
 8105e4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8105e52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8105e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8105e58:	68fb      	ldr	r3, [r7, #12]
 8105e5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8105e5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8105e60:	683b      	ldr	r3, [r7, #0]
 8105e62:	681b      	ldr	r3, [r3, #0]
 8105e64:	021b      	lsls	r3, r3, #8
 8105e66:	68fa      	ldr	r2, [r7, #12]
 8105e68:	4313      	orrs	r3, r2
 8105e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8105e6c:	697b      	ldr	r3, [r7, #20]
 8105e6e:	f023 0320 	bic.w	r3, r3, #32
 8105e72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8105e74:	683b      	ldr	r3, [r7, #0]
 8105e76:	689b      	ldr	r3, [r3, #8]
 8105e78:	011b      	lsls	r3, r3, #4
 8105e7a:	697a      	ldr	r2, [r7, #20]
 8105e7c:	4313      	orrs	r3, r2
 8105e7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8105e80:	687b      	ldr	r3, [r7, #4]
 8105e82:	4a28      	ldr	r2, [pc, #160]	; (8105f24 <TIM_OC2_SetConfig+0x100>)
 8105e84:	4293      	cmp	r3, r2
 8105e86:	d003      	beq.n	8105e90 <TIM_OC2_SetConfig+0x6c>
 8105e88:	687b      	ldr	r3, [r7, #4]
 8105e8a:	4a27      	ldr	r2, [pc, #156]	; (8105f28 <TIM_OC2_SetConfig+0x104>)
 8105e8c:	4293      	cmp	r3, r2
 8105e8e:	d10d      	bne.n	8105eac <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8105e90:	697b      	ldr	r3, [r7, #20]
 8105e92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8105e96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8105e98:	683b      	ldr	r3, [r7, #0]
 8105e9a:	68db      	ldr	r3, [r3, #12]
 8105e9c:	011b      	lsls	r3, r3, #4
 8105e9e:	697a      	ldr	r2, [r7, #20]
 8105ea0:	4313      	orrs	r3, r2
 8105ea2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8105ea4:	697b      	ldr	r3, [r7, #20]
 8105ea6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8105eaa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8105eac:	687b      	ldr	r3, [r7, #4]
 8105eae:	4a1d      	ldr	r2, [pc, #116]	; (8105f24 <TIM_OC2_SetConfig+0x100>)
 8105eb0:	4293      	cmp	r3, r2
 8105eb2:	d00f      	beq.n	8105ed4 <TIM_OC2_SetConfig+0xb0>
 8105eb4:	687b      	ldr	r3, [r7, #4]
 8105eb6:	4a1c      	ldr	r2, [pc, #112]	; (8105f28 <TIM_OC2_SetConfig+0x104>)
 8105eb8:	4293      	cmp	r3, r2
 8105eba:	d00b      	beq.n	8105ed4 <TIM_OC2_SetConfig+0xb0>
 8105ebc:	687b      	ldr	r3, [r7, #4]
 8105ebe:	4a1b      	ldr	r2, [pc, #108]	; (8105f2c <TIM_OC2_SetConfig+0x108>)
 8105ec0:	4293      	cmp	r3, r2
 8105ec2:	d007      	beq.n	8105ed4 <TIM_OC2_SetConfig+0xb0>
 8105ec4:	687b      	ldr	r3, [r7, #4]
 8105ec6:	4a1a      	ldr	r2, [pc, #104]	; (8105f30 <TIM_OC2_SetConfig+0x10c>)
 8105ec8:	4293      	cmp	r3, r2
 8105eca:	d003      	beq.n	8105ed4 <TIM_OC2_SetConfig+0xb0>
 8105ecc:	687b      	ldr	r3, [r7, #4]
 8105ece:	4a19      	ldr	r2, [pc, #100]	; (8105f34 <TIM_OC2_SetConfig+0x110>)
 8105ed0:	4293      	cmp	r3, r2
 8105ed2:	d113      	bne.n	8105efc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8105ed4:	693b      	ldr	r3, [r7, #16]
 8105ed6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8105eda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8105edc:	693b      	ldr	r3, [r7, #16]
 8105ede:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8105ee2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8105ee4:	683b      	ldr	r3, [r7, #0]
 8105ee6:	695b      	ldr	r3, [r3, #20]
 8105ee8:	009b      	lsls	r3, r3, #2
 8105eea:	693a      	ldr	r2, [r7, #16]
 8105eec:	4313      	orrs	r3, r2
 8105eee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8105ef0:	683b      	ldr	r3, [r7, #0]
 8105ef2:	699b      	ldr	r3, [r3, #24]
 8105ef4:	009b      	lsls	r3, r3, #2
 8105ef6:	693a      	ldr	r2, [r7, #16]
 8105ef8:	4313      	orrs	r3, r2
 8105efa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8105efc:	687b      	ldr	r3, [r7, #4]
 8105efe:	693a      	ldr	r2, [r7, #16]
 8105f00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8105f02:	687b      	ldr	r3, [r7, #4]
 8105f04:	68fa      	ldr	r2, [r7, #12]
 8105f06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8105f08:	683b      	ldr	r3, [r7, #0]
 8105f0a:	685a      	ldr	r2, [r3, #4]
 8105f0c:	687b      	ldr	r3, [r7, #4]
 8105f0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8105f10:	687b      	ldr	r3, [r7, #4]
 8105f12:	697a      	ldr	r2, [r7, #20]
 8105f14:	621a      	str	r2, [r3, #32]
}
 8105f16:	bf00      	nop
 8105f18:	371c      	adds	r7, #28
 8105f1a:	46bd      	mov	sp, r7
 8105f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105f20:	4770      	bx	lr
 8105f22:	bf00      	nop
 8105f24:	40010000 	.word	0x40010000
 8105f28:	40010400 	.word	0x40010400
 8105f2c:	40014000 	.word	0x40014000
 8105f30:	40014400 	.word	0x40014400
 8105f34:	40014800 	.word	0x40014800

08105f38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8105f38:	b480      	push	{r7}
 8105f3a:	b087      	sub	sp, #28
 8105f3c:	af00      	add	r7, sp, #0
 8105f3e:	6078      	str	r0, [r7, #4]
 8105f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8105f42:	687b      	ldr	r3, [r7, #4]
 8105f44:	6a1b      	ldr	r3, [r3, #32]
 8105f46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8105f4a:	687b      	ldr	r3, [r7, #4]
 8105f4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8105f4e:	687b      	ldr	r3, [r7, #4]
 8105f50:	6a1b      	ldr	r3, [r3, #32]
 8105f52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8105f54:	687b      	ldr	r3, [r7, #4]
 8105f56:	685b      	ldr	r3, [r3, #4]
 8105f58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8105f5a:	687b      	ldr	r3, [r7, #4]
 8105f5c:	69db      	ldr	r3, [r3, #28]
 8105f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8105f60:	68fb      	ldr	r3, [r7, #12]
 8105f62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8105f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8105f6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8105f6c:	68fb      	ldr	r3, [r7, #12]
 8105f6e:	f023 0303 	bic.w	r3, r3, #3
 8105f72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8105f74:	683b      	ldr	r3, [r7, #0]
 8105f76:	681b      	ldr	r3, [r3, #0]
 8105f78:	68fa      	ldr	r2, [r7, #12]
 8105f7a:	4313      	orrs	r3, r2
 8105f7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8105f7e:	697b      	ldr	r3, [r7, #20]
 8105f80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8105f84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8105f86:	683b      	ldr	r3, [r7, #0]
 8105f88:	689b      	ldr	r3, [r3, #8]
 8105f8a:	021b      	lsls	r3, r3, #8
 8105f8c:	697a      	ldr	r2, [r7, #20]
 8105f8e:	4313      	orrs	r3, r2
 8105f90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8105f92:	687b      	ldr	r3, [r7, #4]
 8105f94:	4a27      	ldr	r2, [pc, #156]	; (8106034 <TIM_OC3_SetConfig+0xfc>)
 8105f96:	4293      	cmp	r3, r2
 8105f98:	d003      	beq.n	8105fa2 <TIM_OC3_SetConfig+0x6a>
 8105f9a:	687b      	ldr	r3, [r7, #4]
 8105f9c:	4a26      	ldr	r2, [pc, #152]	; (8106038 <TIM_OC3_SetConfig+0x100>)
 8105f9e:	4293      	cmp	r3, r2
 8105fa0:	d10d      	bne.n	8105fbe <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8105fa2:	697b      	ldr	r3, [r7, #20]
 8105fa4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8105fa8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8105faa:	683b      	ldr	r3, [r7, #0]
 8105fac:	68db      	ldr	r3, [r3, #12]
 8105fae:	021b      	lsls	r3, r3, #8
 8105fb0:	697a      	ldr	r2, [r7, #20]
 8105fb2:	4313      	orrs	r3, r2
 8105fb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8105fb6:	697b      	ldr	r3, [r7, #20]
 8105fb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8105fbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8105fbe:	687b      	ldr	r3, [r7, #4]
 8105fc0:	4a1c      	ldr	r2, [pc, #112]	; (8106034 <TIM_OC3_SetConfig+0xfc>)
 8105fc2:	4293      	cmp	r3, r2
 8105fc4:	d00f      	beq.n	8105fe6 <TIM_OC3_SetConfig+0xae>
 8105fc6:	687b      	ldr	r3, [r7, #4]
 8105fc8:	4a1b      	ldr	r2, [pc, #108]	; (8106038 <TIM_OC3_SetConfig+0x100>)
 8105fca:	4293      	cmp	r3, r2
 8105fcc:	d00b      	beq.n	8105fe6 <TIM_OC3_SetConfig+0xae>
 8105fce:	687b      	ldr	r3, [r7, #4]
 8105fd0:	4a1a      	ldr	r2, [pc, #104]	; (810603c <TIM_OC3_SetConfig+0x104>)
 8105fd2:	4293      	cmp	r3, r2
 8105fd4:	d007      	beq.n	8105fe6 <TIM_OC3_SetConfig+0xae>
 8105fd6:	687b      	ldr	r3, [r7, #4]
 8105fd8:	4a19      	ldr	r2, [pc, #100]	; (8106040 <TIM_OC3_SetConfig+0x108>)
 8105fda:	4293      	cmp	r3, r2
 8105fdc:	d003      	beq.n	8105fe6 <TIM_OC3_SetConfig+0xae>
 8105fde:	687b      	ldr	r3, [r7, #4]
 8105fe0:	4a18      	ldr	r2, [pc, #96]	; (8106044 <TIM_OC3_SetConfig+0x10c>)
 8105fe2:	4293      	cmp	r3, r2
 8105fe4:	d113      	bne.n	810600e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8105fe6:	693b      	ldr	r3, [r7, #16]
 8105fe8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8105fec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8105fee:	693b      	ldr	r3, [r7, #16]
 8105ff0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8105ff4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8105ff6:	683b      	ldr	r3, [r7, #0]
 8105ff8:	695b      	ldr	r3, [r3, #20]
 8105ffa:	011b      	lsls	r3, r3, #4
 8105ffc:	693a      	ldr	r2, [r7, #16]
 8105ffe:	4313      	orrs	r3, r2
 8106000:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8106002:	683b      	ldr	r3, [r7, #0]
 8106004:	699b      	ldr	r3, [r3, #24]
 8106006:	011b      	lsls	r3, r3, #4
 8106008:	693a      	ldr	r2, [r7, #16]
 810600a:	4313      	orrs	r3, r2
 810600c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810600e:	687b      	ldr	r3, [r7, #4]
 8106010:	693a      	ldr	r2, [r7, #16]
 8106012:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8106014:	687b      	ldr	r3, [r7, #4]
 8106016:	68fa      	ldr	r2, [r7, #12]
 8106018:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 810601a:	683b      	ldr	r3, [r7, #0]
 810601c:	685a      	ldr	r2, [r3, #4]
 810601e:	687b      	ldr	r3, [r7, #4]
 8106020:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8106022:	687b      	ldr	r3, [r7, #4]
 8106024:	697a      	ldr	r2, [r7, #20]
 8106026:	621a      	str	r2, [r3, #32]
}
 8106028:	bf00      	nop
 810602a:	371c      	adds	r7, #28
 810602c:	46bd      	mov	sp, r7
 810602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106032:	4770      	bx	lr
 8106034:	40010000 	.word	0x40010000
 8106038:	40010400 	.word	0x40010400
 810603c:	40014000 	.word	0x40014000
 8106040:	40014400 	.word	0x40014400
 8106044:	40014800 	.word	0x40014800

08106048 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8106048:	b480      	push	{r7}
 810604a:	b087      	sub	sp, #28
 810604c:	af00      	add	r7, sp, #0
 810604e:	6078      	str	r0, [r7, #4]
 8106050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8106052:	687b      	ldr	r3, [r7, #4]
 8106054:	6a1b      	ldr	r3, [r3, #32]
 8106056:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 810605a:	687b      	ldr	r3, [r7, #4]
 810605c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810605e:	687b      	ldr	r3, [r7, #4]
 8106060:	6a1b      	ldr	r3, [r3, #32]
 8106062:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8106064:	687b      	ldr	r3, [r7, #4]
 8106066:	685b      	ldr	r3, [r3, #4]
 8106068:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810606a:	687b      	ldr	r3, [r7, #4]
 810606c:	69db      	ldr	r3, [r3, #28]
 810606e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8106070:	68fb      	ldr	r3, [r7, #12]
 8106072:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8106076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810607a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 810607c:	68fb      	ldr	r3, [r7, #12]
 810607e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8106082:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8106084:	683b      	ldr	r3, [r7, #0]
 8106086:	681b      	ldr	r3, [r3, #0]
 8106088:	021b      	lsls	r3, r3, #8
 810608a:	68fa      	ldr	r2, [r7, #12]
 810608c:	4313      	orrs	r3, r2
 810608e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8106090:	693b      	ldr	r3, [r7, #16]
 8106092:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8106096:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8106098:	683b      	ldr	r3, [r7, #0]
 810609a:	689b      	ldr	r3, [r3, #8]
 810609c:	031b      	lsls	r3, r3, #12
 810609e:	693a      	ldr	r2, [r7, #16]
 81060a0:	4313      	orrs	r3, r2
 81060a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81060a4:	687b      	ldr	r3, [r7, #4]
 81060a6:	4a18      	ldr	r2, [pc, #96]	; (8106108 <TIM_OC4_SetConfig+0xc0>)
 81060a8:	4293      	cmp	r3, r2
 81060aa:	d00f      	beq.n	81060cc <TIM_OC4_SetConfig+0x84>
 81060ac:	687b      	ldr	r3, [r7, #4]
 81060ae:	4a17      	ldr	r2, [pc, #92]	; (810610c <TIM_OC4_SetConfig+0xc4>)
 81060b0:	4293      	cmp	r3, r2
 81060b2:	d00b      	beq.n	81060cc <TIM_OC4_SetConfig+0x84>
 81060b4:	687b      	ldr	r3, [r7, #4]
 81060b6:	4a16      	ldr	r2, [pc, #88]	; (8106110 <TIM_OC4_SetConfig+0xc8>)
 81060b8:	4293      	cmp	r3, r2
 81060ba:	d007      	beq.n	81060cc <TIM_OC4_SetConfig+0x84>
 81060bc:	687b      	ldr	r3, [r7, #4]
 81060be:	4a15      	ldr	r2, [pc, #84]	; (8106114 <TIM_OC4_SetConfig+0xcc>)
 81060c0:	4293      	cmp	r3, r2
 81060c2:	d003      	beq.n	81060cc <TIM_OC4_SetConfig+0x84>
 81060c4:	687b      	ldr	r3, [r7, #4]
 81060c6:	4a14      	ldr	r2, [pc, #80]	; (8106118 <TIM_OC4_SetConfig+0xd0>)
 81060c8:	4293      	cmp	r3, r2
 81060ca:	d109      	bne.n	81060e0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 81060cc:	697b      	ldr	r3, [r7, #20]
 81060ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 81060d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 81060d4:	683b      	ldr	r3, [r7, #0]
 81060d6:	695b      	ldr	r3, [r3, #20]
 81060d8:	019b      	lsls	r3, r3, #6
 81060da:	697a      	ldr	r2, [r7, #20]
 81060dc:	4313      	orrs	r3, r2
 81060de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81060e0:	687b      	ldr	r3, [r7, #4]
 81060e2:	697a      	ldr	r2, [r7, #20]
 81060e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 81060e6:	687b      	ldr	r3, [r7, #4]
 81060e8:	68fa      	ldr	r2, [r7, #12]
 81060ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 81060ec:	683b      	ldr	r3, [r7, #0]
 81060ee:	685a      	ldr	r2, [r3, #4]
 81060f0:	687b      	ldr	r3, [r7, #4]
 81060f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81060f4:	687b      	ldr	r3, [r7, #4]
 81060f6:	693a      	ldr	r2, [r7, #16]
 81060f8:	621a      	str	r2, [r3, #32]
}
 81060fa:	bf00      	nop
 81060fc:	371c      	adds	r7, #28
 81060fe:	46bd      	mov	sp, r7
 8106100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106104:	4770      	bx	lr
 8106106:	bf00      	nop
 8106108:	40010000 	.word	0x40010000
 810610c:	40010400 	.word	0x40010400
 8106110:	40014000 	.word	0x40014000
 8106114:	40014400 	.word	0x40014400
 8106118:	40014800 	.word	0x40014800

0810611c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 810611c:	b480      	push	{r7}
 810611e:	b087      	sub	sp, #28
 8106120:	af00      	add	r7, sp, #0
 8106122:	6078      	str	r0, [r7, #4]
 8106124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8106126:	687b      	ldr	r3, [r7, #4]
 8106128:	6a1b      	ldr	r3, [r3, #32]
 810612a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 810612e:	687b      	ldr	r3, [r7, #4]
 8106130:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8106132:	687b      	ldr	r3, [r7, #4]
 8106134:	6a1b      	ldr	r3, [r3, #32]
 8106136:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8106138:	687b      	ldr	r3, [r7, #4]
 810613a:	685b      	ldr	r3, [r3, #4]
 810613c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810613e:	687b      	ldr	r3, [r7, #4]
 8106140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8106144:	68fb      	ldr	r3, [r7, #12]
 8106146:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810614a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810614e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8106150:	683b      	ldr	r3, [r7, #0]
 8106152:	681b      	ldr	r3, [r3, #0]
 8106154:	68fa      	ldr	r2, [r7, #12]
 8106156:	4313      	orrs	r3, r2
 8106158:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 810615a:	693b      	ldr	r3, [r7, #16]
 810615c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8106160:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8106162:	683b      	ldr	r3, [r7, #0]
 8106164:	689b      	ldr	r3, [r3, #8]
 8106166:	041b      	lsls	r3, r3, #16
 8106168:	693a      	ldr	r2, [r7, #16]
 810616a:	4313      	orrs	r3, r2
 810616c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810616e:	687b      	ldr	r3, [r7, #4]
 8106170:	4a17      	ldr	r2, [pc, #92]	; (81061d0 <TIM_OC5_SetConfig+0xb4>)
 8106172:	4293      	cmp	r3, r2
 8106174:	d00f      	beq.n	8106196 <TIM_OC5_SetConfig+0x7a>
 8106176:	687b      	ldr	r3, [r7, #4]
 8106178:	4a16      	ldr	r2, [pc, #88]	; (81061d4 <TIM_OC5_SetConfig+0xb8>)
 810617a:	4293      	cmp	r3, r2
 810617c:	d00b      	beq.n	8106196 <TIM_OC5_SetConfig+0x7a>
 810617e:	687b      	ldr	r3, [r7, #4]
 8106180:	4a15      	ldr	r2, [pc, #84]	; (81061d8 <TIM_OC5_SetConfig+0xbc>)
 8106182:	4293      	cmp	r3, r2
 8106184:	d007      	beq.n	8106196 <TIM_OC5_SetConfig+0x7a>
 8106186:	687b      	ldr	r3, [r7, #4]
 8106188:	4a14      	ldr	r2, [pc, #80]	; (81061dc <TIM_OC5_SetConfig+0xc0>)
 810618a:	4293      	cmp	r3, r2
 810618c:	d003      	beq.n	8106196 <TIM_OC5_SetConfig+0x7a>
 810618e:	687b      	ldr	r3, [r7, #4]
 8106190:	4a13      	ldr	r2, [pc, #76]	; (81061e0 <TIM_OC5_SetConfig+0xc4>)
 8106192:	4293      	cmp	r3, r2
 8106194:	d109      	bne.n	81061aa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8106196:	697b      	ldr	r3, [r7, #20]
 8106198:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810619c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 810619e:	683b      	ldr	r3, [r7, #0]
 81061a0:	695b      	ldr	r3, [r3, #20]
 81061a2:	021b      	lsls	r3, r3, #8
 81061a4:	697a      	ldr	r2, [r7, #20]
 81061a6:	4313      	orrs	r3, r2
 81061a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81061aa:	687b      	ldr	r3, [r7, #4]
 81061ac:	697a      	ldr	r2, [r7, #20]
 81061ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 81061b0:	687b      	ldr	r3, [r7, #4]
 81061b2:	68fa      	ldr	r2, [r7, #12]
 81061b4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 81061b6:	683b      	ldr	r3, [r7, #0]
 81061b8:	685a      	ldr	r2, [r3, #4]
 81061ba:	687b      	ldr	r3, [r7, #4]
 81061bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81061be:	687b      	ldr	r3, [r7, #4]
 81061c0:	693a      	ldr	r2, [r7, #16]
 81061c2:	621a      	str	r2, [r3, #32]
}
 81061c4:	bf00      	nop
 81061c6:	371c      	adds	r7, #28
 81061c8:	46bd      	mov	sp, r7
 81061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81061ce:	4770      	bx	lr
 81061d0:	40010000 	.word	0x40010000
 81061d4:	40010400 	.word	0x40010400
 81061d8:	40014000 	.word	0x40014000
 81061dc:	40014400 	.word	0x40014400
 81061e0:	40014800 	.word	0x40014800

081061e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 81061e4:	b480      	push	{r7}
 81061e6:	b087      	sub	sp, #28
 81061e8:	af00      	add	r7, sp, #0
 81061ea:	6078      	str	r0, [r7, #4]
 81061ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 81061ee:	687b      	ldr	r3, [r7, #4]
 81061f0:	6a1b      	ldr	r3, [r3, #32]
 81061f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 81061f6:	687b      	ldr	r3, [r7, #4]
 81061f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81061fa:	687b      	ldr	r3, [r7, #4]
 81061fc:	6a1b      	ldr	r3, [r3, #32]
 81061fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8106200:	687b      	ldr	r3, [r7, #4]
 8106202:	685b      	ldr	r3, [r3, #4]
 8106204:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8106206:	687b      	ldr	r3, [r7, #4]
 8106208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810620a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 810620c:	68fb      	ldr	r3, [r7, #12]
 810620e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8106212:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8106216:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8106218:	683b      	ldr	r3, [r7, #0]
 810621a:	681b      	ldr	r3, [r3, #0]
 810621c:	021b      	lsls	r3, r3, #8
 810621e:	68fa      	ldr	r2, [r7, #12]
 8106220:	4313      	orrs	r3, r2
 8106222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8106224:	693b      	ldr	r3, [r7, #16]
 8106226:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 810622a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 810622c:	683b      	ldr	r3, [r7, #0]
 810622e:	689b      	ldr	r3, [r3, #8]
 8106230:	051b      	lsls	r3, r3, #20
 8106232:	693a      	ldr	r2, [r7, #16]
 8106234:	4313      	orrs	r3, r2
 8106236:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8106238:	687b      	ldr	r3, [r7, #4]
 810623a:	4a18      	ldr	r2, [pc, #96]	; (810629c <TIM_OC6_SetConfig+0xb8>)
 810623c:	4293      	cmp	r3, r2
 810623e:	d00f      	beq.n	8106260 <TIM_OC6_SetConfig+0x7c>
 8106240:	687b      	ldr	r3, [r7, #4]
 8106242:	4a17      	ldr	r2, [pc, #92]	; (81062a0 <TIM_OC6_SetConfig+0xbc>)
 8106244:	4293      	cmp	r3, r2
 8106246:	d00b      	beq.n	8106260 <TIM_OC6_SetConfig+0x7c>
 8106248:	687b      	ldr	r3, [r7, #4]
 810624a:	4a16      	ldr	r2, [pc, #88]	; (81062a4 <TIM_OC6_SetConfig+0xc0>)
 810624c:	4293      	cmp	r3, r2
 810624e:	d007      	beq.n	8106260 <TIM_OC6_SetConfig+0x7c>
 8106250:	687b      	ldr	r3, [r7, #4]
 8106252:	4a15      	ldr	r2, [pc, #84]	; (81062a8 <TIM_OC6_SetConfig+0xc4>)
 8106254:	4293      	cmp	r3, r2
 8106256:	d003      	beq.n	8106260 <TIM_OC6_SetConfig+0x7c>
 8106258:	687b      	ldr	r3, [r7, #4]
 810625a:	4a14      	ldr	r2, [pc, #80]	; (81062ac <TIM_OC6_SetConfig+0xc8>)
 810625c:	4293      	cmp	r3, r2
 810625e:	d109      	bne.n	8106274 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8106260:	697b      	ldr	r3, [r7, #20]
 8106262:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8106266:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8106268:	683b      	ldr	r3, [r7, #0]
 810626a:	695b      	ldr	r3, [r3, #20]
 810626c:	029b      	lsls	r3, r3, #10
 810626e:	697a      	ldr	r2, [r7, #20]
 8106270:	4313      	orrs	r3, r2
 8106272:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8106274:	687b      	ldr	r3, [r7, #4]
 8106276:	697a      	ldr	r2, [r7, #20]
 8106278:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810627a:	687b      	ldr	r3, [r7, #4]
 810627c:	68fa      	ldr	r2, [r7, #12]
 810627e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8106280:	683b      	ldr	r3, [r7, #0]
 8106282:	685a      	ldr	r2, [r3, #4]
 8106284:	687b      	ldr	r3, [r7, #4]
 8106286:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8106288:	687b      	ldr	r3, [r7, #4]
 810628a:	693a      	ldr	r2, [r7, #16]
 810628c:	621a      	str	r2, [r3, #32]
}
 810628e:	bf00      	nop
 8106290:	371c      	adds	r7, #28
 8106292:	46bd      	mov	sp, r7
 8106294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106298:	4770      	bx	lr
 810629a:	bf00      	nop
 810629c:	40010000 	.word	0x40010000
 81062a0:	40010400 	.word	0x40010400
 81062a4:	40014000 	.word	0x40014000
 81062a8:	40014400 	.word	0x40014400
 81062ac:	40014800 	.word	0x40014800

081062b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 81062b0:	b480      	push	{r7}
 81062b2:	b087      	sub	sp, #28
 81062b4:	af00      	add	r7, sp, #0
 81062b6:	60f8      	str	r0, [r7, #12]
 81062b8:	60b9      	str	r1, [r7, #8]
 81062ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 81062bc:	68fb      	ldr	r3, [r7, #12]
 81062be:	6a1b      	ldr	r3, [r3, #32]
 81062c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 81062c2:	68fb      	ldr	r3, [r7, #12]
 81062c4:	6a1b      	ldr	r3, [r3, #32]
 81062c6:	f023 0201 	bic.w	r2, r3, #1
 81062ca:	68fb      	ldr	r3, [r7, #12]
 81062cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 81062ce:	68fb      	ldr	r3, [r7, #12]
 81062d0:	699b      	ldr	r3, [r3, #24]
 81062d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 81062d4:	693b      	ldr	r3, [r7, #16]
 81062d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 81062da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 81062dc:	687b      	ldr	r3, [r7, #4]
 81062de:	011b      	lsls	r3, r3, #4
 81062e0:	693a      	ldr	r2, [r7, #16]
 81062e2:	4313      	orrs	r3, r2
 81062e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 81062e6:	697b      	ldr	r3, [r7, #20]
 81062e8:	f023 030a 	bic.w	r3, r3, #10
 81062ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 81062ee:	697a      	ldr	r2, [r7, #20]
 81062f0:	68bb      	ldr	r3, [r7, #8]
 81062f2:	4313      	orrs	r3, r2
 81062f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 81062f6:	68fb      	ldr	r3, [r7, #12]
 81062f8:	693a      	ldr	r2, [r7, #16]
 81062fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 81062fc:	68fb      	ldr	r3, [r7, #12]
 81062fe:	697a      	ldr	r2, [r7, #20]
 8106300:	621a      	str	r2, [r3, #32]
}
 8106302:	bf00      	nop
 8106304:	371c      	adds	r7, #28
 8106306:	46bd      	mov	sp, r7
 8106308:	f85d 7b04 	ldr.w	r7, [sp], #4
 810630c:	4770      	bx	lr

0810630e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 810630e:	b480      	push	{r7}
 8106310:	b087      	sub	sp, #28
 8106312:	af00      	add	r7, sp, #0
 8106314:	60f8      	str	r0, [r7, #12]
 8106316:	60b9      	str	r1, [r7, #8]
 8106318:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810631a:	68fb      	ldr	r3, [r7, #12]
 810631c:	6a1b      	ldr	r3, [r3, #32]
 810631e:	f023 0210 	bic.w	r2, r3, #16
 8106322:	68fb      	ldr	r3, [r7, #12]
 8106324:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8106326:	68fb      	ldr	r3, [r7, #12]
 8106328:	699b      	ldr	r3, [r3, #24]
 810632a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 810632c:	68fb      	ldr	r3, [r7, #12]
 810632e:	6a1b      	ldr	r3, [r3, #32]
 8106330:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8106332:	697b      	ldr	r3, [r7, #20]
 8106334:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8106338:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 810633a:	687b      	ldr	r3, [r7, #4]
 810633c:	031b      	lsls	r3, r3, #12
 810633e:	697a      	ldr	r2, [r7, #20]
 8106340:	4313      	orrs	r3, r2
 8106342:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8106344:	693b      	ldr	r3, [r7, #16]
 8106346:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 810634a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 810634c:	68bb      	ldr	r3, [r7, #8]
 810634e:	011b      	lsls	r3, r3, #4
 8106350:	693a      	ldr	r2, [r7, #16]
 8106352:	4313      	orrs	r3, r2
 8106354:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8106356:	68fb      	ldr	r3, [r7, #12]
 8106358:	697a      	ldr	r2, [r7, #20]
 810635a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 810635c:	68fb      	ldr	r3, [r7, #12]
 810635e:	693a      	ldr	r2, [r7, #16]
 8106360:	621a      	str	r2, [r3, #32]
}
 8106362:	bf00      	nop
 8106364:	371c      	adds	r7, #28
 8106366:	46bd      	mov	sp, r7
 8106368:	f85d 7b04 	ldr.w	r7, [sp], #4
 810636c:	4770      	bx	lr

0810636e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 810636e:	b480      	push	{r7}
 8106370:	b085      	sub	sp, #20
 8106372:	af00      	add	r7, sp, #0
 8106374:	6078      	str	r0, [r7, #4]
 8106376:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8106378:	687b      	ldr	r3, [r7, #4]
 810637a:	689b      	ldr	r3, [r3, #8]
 810637c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 810637e:	68fb      	ldr	r3, [r7, #12]
 8106380:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8106384:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8106388:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 810638a:	683a      	ldr	r2, [r7, #0]
 810638c:	68fb      	ldr	r3, [r7, #12]
 810638e:	4313      	orrs	r3, r2
 8106390:	f043 0307 	orr.w	r3, r3, #7
 8106394:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8106396:	687b      	ldr	r3, [r7, #4]
 8106398:	68fa      	ldr	r2, [r7, #12]
 810639a:	609a      	str	r2, [r3, #8]
}
 810639c:	bf00      	nop
 810639e:	3714      	adds	r7, #20
 81063a0:	46bd      	mov	sp, r7
 81063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81063a6:	4770      	bx	lr

081063a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 81063a8:	b480      	push	{r7}
 81063aa:	b087      	sub	sp, #28
 81063ac:	af00      	add	r7, sp, #0
 81063ae:	60f8      	str	r0, [r7, #12]
 81063b0:	60b9      	str	r1, [r7, #8]
 81063b2:	607a      	str	r2, [r7, #4]
 81063b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 81063b6:	68fb      	ldr	r3, [r7, #12]
 81063b8:	689b      	ldr	r3, [r3, #8]
 81063ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 81063bc:	697b      	ldr	r3, [r7, #20]
 81063be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81063c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 81063c4:	683b      	ldr	r3, [r7, #0]
 81063c6:	021a      	lsls	r2, r3, #8
 81063c8:	687b      	ldr	r3, [r7, #4]
 81063ca:	431a      	orrs	r2, r3
 81063cc:	68bb      	ldr	r3, [r7, #8]
 81063ce:	4313      	orrs	r3, r2
 81063d0:	697a      	ldr	r2, [r7, #20]
 81063d2:	4313      	orrs	r3, r2
 81063d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 81063d6:	68fb      	ldr	r3, [r7, #12]
 81063d8:	697a      	ldr	r2, [r7, #20]
 81063da:	609a      	str	r2, [r3, #8]
}
 81063dc:	bf00      	nop
 81063de:	371c      	adds	r7, #28
 81063e0:	46bd      	mov	sp, r7
 81063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81063e6:	4770      	bx	lr

081063e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 81063e8:	b480      	push	{r7}
 81063ea:	b087      	sub	sp, #28
 81063ec:	af00      	add	r7, sp, #0
 81063ee:	60f8      	str	r0, [r7, #12]
 81063f0:	60b9      	str	r1, [r7, #8]
 81063f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 81063f4:	68bb      	ldr	r3, [r7, #8]
 81063f6:	f003 031f 	and.w	r3, r3, #31
 81063fa:	2201      	movs	r2, #1
 81063fc:	fa02 f303 	lsl.w	r3, r2, r3
 8106400:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8106402:	68fb      	ldr	r3, [r7, #12]
 8106404:	6a1a      	ldr	r2, [r3, #32]
 8106406:	697b      	ldr	r3, [r7, #20]
 8106408:	43db      	mvns	r3, r3
 810640a:	401a      	ands	r2, r3
 810640c:	68fb      	ldr	r3, [r7, #12]
 810640e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8106410:	68fb      	ldr	r3, [r7, #12]
 8106412:	6a1a      	ldr	r2, [r3, #32]
 8106414:	68bb      	ldr	r3, [r7, #8]
 8106416:	f003 031f 	and.w	r3, r3, #31
 810641a:	6879      	ldr	r1, [r7, #4]
 810641c:	fa01 f303 	lsl.w	r3, r1, r3
 8106420:	431a      	orrs	r2, r3
 8106422:	68fb      	ldr	r3, [r7, #12]
 8106424:	621a      	str	r2, [r3, #32]
}
 8106426:	bf00      	nop
 8106428:	371c      	adds	r7, #28
 810642a:	46bd      	mov	sp, r7
 810642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106430:	4770      	bx	lr
	...

08106434 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8106434:	b480      	push	{r7}
 8106436:	b085      	sub	sp, #20
 8106438:	af00      	add	r7, sp, #0
 810643a:	6078      	str	r0, [r7, #4]
 810643c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 810643e:	687b      	ldr	r3, [r7, #4]
 8106440:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8106444:	2b01      	cmp	r3, #1
 8106446:	d101      	bne.n	810644c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8106448:	2302      	movs	r3, #2
 810644a:	e06d      	b.n	8106528 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 810644c:	687b      	ldr	r3, [r7, #4]
 810644e:	2201      	movs	r2, #1
 8106450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8106454:	687b      	ldr	r3, [r7, #4]
 8106456:	2202      	movs	r2, #2
 8106458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 810645c:	687b      	ldr	r3, [r7, #4]
 810645e:	681b      	ldr	r3, [r3, #0]
 8106460:	685b      	ldr	r3, [r3, #4]
 8106462:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8106464:	687b      	ldr	r3, [r7, #4]
 8106466:	681b      	ldr	r3, [r3, #0]
 8106468:	689b      	ldr	r3, [r3, #8]
 810646a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 810646c:	687b      	ldr	r3, [r7, #4]
 810646e:	681b      	ldr	r3, [r3, #0]
 8106470:	4a30      	ldr	r2, [pc, #192]	; (8106534 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8106472:	4293      	cmp	r3, r2
 8106474:	d004      	beq.n	8106480 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8106476:	687b      	ldr	r3, [r7, #4]
 8106478:	681b      	ldr	r3, [r3, #0]
 810647a:	4a2f      	ldr	r2, [pc, #188]	; (8106538 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810647c:	4293      	cmp	r3, r2
 810647e:	d108      	bne.n	8106492 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8106480:	68fb      	ldr	r3, [r7, #12]
 8106482:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8106486:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8106488:	683b      	ldr	r3, [r7, #0]
 810648a:	685b      	ldr	r3, [r3, #4]
 810648c:	68fa      	ldr	r2, [r7, #12]
 810648e:	4313      	orrs	r3, r2
 8106490:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8106492:	68fb      	ldr	r3, [r7, #12]
 8106494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8106498:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 810649a:	683b      	ldr	r3, [r7, #0]
 810649c:	681b      	ldr	r3, [r3, #0]
 810649e:	68fa      	ldr	r2, [r7, #12]
 81064a0:	4313      	orrs	r3, r2
 81064a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 81064a4:	687b      	ldr	r3, [r7, #4]
 81064a6:	681b      	ldr	r3, [r3, #0]
 81064a8:	68fa      	ldr	r2, [r7, #12]
 81064aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81064ac:	687b      	ldr	r3, [r7, #4]
 81064ae:	681b      	ldr	r3, [r3, #0]
 81064b0:	4a20      	ldr	r2, [pc, #128]	; (8106534 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 81064b2:	4293      	cmp	r3, r2
 81064b4:	d022      	beq.n	81064fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81064b6:	687b      	ldr	r3, [r7, #4]
 81064b8:	681b      	ldr	r3, [r3, #0]
 81064ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81064be:	d01d      	beq.n	81064fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81064c0:	687b      	ldr	r3, [r7, #4]
 81064c2:	681b      	ldr	r3, [r3, #0]
 81064c4:	4a1d      	ldr	r2, [pc, #116]	; (810653c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 81064c6:	4293      	cmp	r3, r2
 81064c8:	d018      	beq.n	81064fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81064ca:	687b      	ldr	r3, [r7, #4]
 81064cc:	681b      	ldr	r3, [r3, #0]
 81064ce:	4a1c      	ldr	r2, [pc, #112]	; (8106540 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 81064d0:	4293      	cmp	r3, r2
 81064d2:	d013      	beq.n	81064fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81064d4:	687b      	ldr	r3, [r7, #4]
 81064d6:	681b      	ldr	r3, [r3, #0]
 81064d8:	4a1a      	ldr	r2, [pc, #104]	; (8106544 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 81064da:	4293      	cmp	r3, r2
 81064dc:	d00e      	beq.n	81064fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81064de:	687b      	ldr	r3, [r7, #4]
 81064e0:	681b      	ldr	r3, [r3, #0]
 81064e2:	4a15      	ldr	r2, [pc, #84]	; (8106538 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 81064e4:	4293      	cmp	r3, r2
 81064e6:	d009      	beq.n	81064fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81064e8:	687b      	ldr	r3, [r7, #4]
 81064ea:	681b      	ldr	r3, [r3, #0]
 81064ec:	4a16      	ldr	r2, [pc, #88]	; (8106548 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 81064ee:	4293      	cmp	r3, r2
 81064f0:	d004      	beq.n	81064fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81064f2:	687b      	ldr	r3, [r7, #4]
 81064f4:	681b      	ldr	r3, [r3, #0]
 81064f6:	4a15      	ldr	r2, [pc, #84]	; (810654c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 81064f8:	4293      	cmp	r3, r2
 81064fa:	d10c      	bne.n	8106516 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 81064fc:	68bb      	ldr	r3, [r7, #8]
 81064fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8106502:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8106504:	683b      	ldr	r3, [r7, #0]
 8106506:	689b      	ldr	r3, [r3, #8]
 8106508:	68ba      	ldr	r2, [r7, #8]
 810650a:	4313      	orrs	r3, r2
 810650c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 810650e:	687b      	ldr	r3, [r7, #4]
 8106510:	681b      	ldr	r3, [r3, #0]
 8106512:	68ba      	ldr	r2, [r7, #8]
 8106514:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8106516:	687b      	ldr	r3, [r7, #4]
 8106518:	2201      	movs	r2, #1
 810651a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 810651e:	687b      	ldr	r3, [r7, #4]
 8106520:	2200      	movs	r2, #0
 8106522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8106526:	2300      	movs	r3, #0
}
 8106528:	4618      	mov	r0, r3
 810652a:	3714      	adds	r7, #20
 810652c:	46bd      	mov	sp, r7
 810652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106532:	4770      	bx	lr
 8106534:	40010000 	.word	0x40010000
 8106538:	40010400 	.word	0x40010400
 810653c:	40000400 	.word	0x40000400
 8106540:	40000800 	.word	0x40000800
 8106544:	40000c00 	.word	0x40000c00
 8106548:	40001800 	.word	0x40001800
 810654c:	40014000 	.word	0x40014000

08106550 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8106550:	b480      	push	{r7}
 8106552:	b083      	sub	sp, #12
 8106554:	af00      	add	r7, sp, #0
 8106556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8106558:	bf00      	nop
 810655a:	370c      	adds	r7, #12
 810655c:	46bd      	mov	sp, r7
 810655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106562:	4770      	bx	lr

08106564 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8106564:	b480      	push	{r7}
 8106566:	b083      	sub	sp, #12
 8106568:	af00      	add	r7, sp, #0
 810656a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 810656c:	bf00      	nop
 810656e:	370c      	adds	r7, #12
 8106570:	46bd      	mov	sp, r7
 8106572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106576:	4770      	bx	lr

08106578 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8106578:	b480      	push	{r7}
 810657a:	b083      	sub	sp, #12
 810657c:	af00      	add	r7, sp, #0
 810657e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8106580:	bf00      	nop
 8106582:	370c      	adds	r7, #12
 8106584:	46bd      	mov	sp, r7
 8106586:	f85d 7b04 	ldr.w	r7, [sp], #4
 810658a:	4770      	bx	lr

0810658c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 810658c:	b580      	push	{r7, lr}
 810658e:	b082      	sub	sp, #8
 8106590:	af00      	add	r7, sp, #0
 8106592:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8106594:	687b      	ldr	r3, [r7, #4]
 8106596:	2b00      	cmp	r3, #0
 8106598:	d101      	bne.n	810659e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 810659a:	2301      	movs	r3, #1
 810659c:	e042      	b.n	8106624 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 810659e:	687b      	ldr	r3, [r7, #4]
 81065a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81065a4:	2b00      	cmp	r3, #0
 81065a6:	d106      	bne.n	81065b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 81065a8:	687b      	ldr	r3, [r7, #4]
 81065aa:	2200      	movs	r2, #0
 81065ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 81065b0:	6878      	ldr	r0, [r7, #4]
 81065b2:	f7fb fcd7 	bl	8101f64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 81065b6:	687b      	ldr	r3, [r7, #4]
 81065b8:	2224      	movs	r2, #36	; 0x24
 81065ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 81065be:	687b      	ldr	r3, [r7, #4]
 81065c0:	681b      	ldr	r3, [r3, #0]
 81065c2:	681a      	ldr	r2, [r3, #0]
 81065c4:	687b      	ldr	r3, [r7, #4]
 81065c6:	681b      	ldr	r3, [r3, #0]
 81065c8:	f022 0201 	bic.w	r2, r2, #1
 81065cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 81065ce:	6878      	ldr	r0, [r7, #4]
 81065d0:	f000 fcde 	bl	8106f90 <UART_SetConfig>
 81065d4:	4603      	mov	r3, r0
 81065d6:	2b01      	cmp	r3, #1
 81065d8:	d101      	bne.n	81065de <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 81065da:	2301      	movs	r3, #1
 81065dc:	e022      	b.n	8106624 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 81065de:	687b      	ldr	r3, [r7, #4]
 81065e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81065e2:	2b00      	cmp	r3, #0
 81065e4:	d002      	beq.n	81065ec <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 81065e6:	6878      	ldr	r0, [r7, #4]
 81065e8:	f001 fa3a 	bl	8107a60 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 81065ec:	687b      	ldr	r3, [r7, #4]
 81065ee:	681b      	ldr	r3, [r3, #0]
 81065f0:	685a      	ldr	r2, [r3, #4]
 81065f2:	687b      	ldr	r3, [r7, #4]
 81065f4:	681b      	ldr	r3, [r3, #0]
 81065f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 81065fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 81065fc:	687b      	ldr	r3, [r7, #4]
 81065fe:	681b      	ldr	r3, [r3, #0]
 8106600:	689a      	ldr	r2, [r3, #8]
 8106602:	687b      	ldr	r3, [r7, #4]
 8106604:	681b      	ldr	r3, [r3, #0]
 8106606:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 810660a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 810660c:	687b      	ldr	r3, [r7, #4]
 810660e:	681b      	ldr	r3, [r3, #0]
 8106610:	681a      	ldr	r2, [r3, #0]
 8106612:	687b      	ldr	r3, [r7, #4]
 8106614:	681b      	ldr	r3, [r3, #0]
 8106616:	f042 0201 	orr.w	r2, r2, #1
 810661a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 810661c:	6878      	ldr	r0, [r7, #4]
 810661e:	f001 fac1 	bl	8107ba4 <UART_CheckIdleState>
 8106622:	4603      	mov	r3, r0
}
 8106624:	4618      	mov	r0, r3
 8106626:	3708      	adds	r7, #8
 8106628:	46bd      	mov	sp, r7
 810662a:	bd80      	pop	{r7, pc}

0810662c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 810662c:	b480      	push	{r7}
 810662e:	b091      	sub	sp, #68	; 0x44
 8106630:	af00      	add	r7, sp, #0
 8106632:	60f8      	str	r0, [r7, #12]
 8106634:	60b9      	str	r1, [r7, #8]
 8106636:	4613      	mov	r3, r2
 8106638:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 810663a:	68fb      	ldr	r3, [r7, #12]
 810663c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106640:	2b20      	cmp	r3, #32
 8106642:	f040 808c 	bne.w	810675e <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8106646:	68bb      	ldr	r3, [r7, #8]
 8106648:	2b00      	cmp	r3, #0
 810664a:	d002      	beq.n	8106652 <HAL_UART_Transmit_IT+0x26>
 810664c:	88fb      	ldrh	r3, [r7, #6]
 810664e:	2b00      	cmp	r3, #0
 8106650:	d101      	bne.n	8106656 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8106652:	2301      	movs	r3, #1
 8106654:	e084      	b.n	8106760 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 8106656:	68fb      	ldr	r3, [r7, #12]
 8106658:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810665c:	2b01      	cmp	r3, #1
 810665e:	d101      	bne.n	8106664 <HAL_UART_Transmit_IT+0x38>
 8106660:	2302      	movs	r3, #2
 8106662:	e07d      	b.n	8106760 <HAL_UART_Transmit_IT+0x134>
 8106664:	68fb      	ldr	r3, [r7, #12]
 8106666:	2201      	movs	r2, #1
 8106668:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 810666c:	68fb      	ldr	r3, [r7, #12]
 810666e:	68ba      	ldr	r2, [r7, #8]
 8106670:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8106672:	68fb      	ldr	r3, [r7, #12]
 8106674:	88fa      	ldrh	r2, [r7, #6]
 8106676:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 810667a:	68fb      	ldr	r3, [r7, #12]
 810667c:	88fa      	ldrh	r2, [r7, #6]
 810667e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8106682:	68fb      	ldr	r3, [r7, #12]
 8106684:	2200      	movs	r2, #0
 8106686:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8106688:	68fb      	ldr	r3, [r7, #12]
 810668a:	2200      	movs	r2, #0
 810668c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8106690:	68fb      	ldr	r3, [r7, #12]
 8106692:	2221      	movs	r2, #33	; 0x21
 8106694:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8106698:	68fb      	ldr	r3, [r7, #12]
 810669a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810669c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81066a0:	d12e      	bne.n	8106700 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 81066a2:	68fb      	ldr	r3, [r7, #12]
 81066a4:	689b      	ldr	r3, [r3, #8]
 81066a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81066aa:	d107      	bne.n	81066bc <HAL_UART_Transmit_IT+0x90>
 81066ac:	68fb      	ldr	r3, [r7, #12]
 81066ae:	691b      	ldr	r3, [r3, #16]
 81066b0:	2b00      	cmp	r3, #0
 81066b2:	d103      	bne.n	81066bc <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 81066b4:	68fb      	ldr	r3, [r7, #12]
 81066b6:	4a2d      	ldr	r2, [pc, #180]	; (810676c <HAL_UART_Transmit_IT+0x140>)
 81066b8:	675a      	str	r2, [r3, #116]	; 0x74
 81066ba:	e002      	b.n	81066c2 <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 81066bc:	68fb      	ldr	r3, [r7, #12]
 81066be:	4a2c      	ldr	r2, [pc, #176]	; (8106770 <HAL_UART_Transmit_IT+0x144>)
 81066c0:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 81066c2:	68fb      	ldr	r3, [r7, #12]
 81066c4:	2200      	movs	r2, #0
 81066c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 81066ca:	68fb      	ldr	r3, [r7, #12]
 81066cc:	681b      	ldr	r3, [r3, #0]
 81066ce:	3308      	adds	r3, #8
 81066d0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81066d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81066d4:	e853 3f00 	ldrex	r3, [r3]
 81066d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 81066da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81066dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 81066e0:	63bb      	str	r3, [r7, #56]	; 0x38
 81066e2:	68fb      	ldr	r3, [r7, #12]
 81066e4:	681b      	ldr	r3, [r3, #0]
 81066e6:	3308      	adds	r3, #8
 81066e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 81066ea:	637a      	str	r2, [r7, #52]	; 0x34
 81066ec:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81066ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 81066f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81066f2:	e841 2300 	strex	r3, r2, [r1]
 81066f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 81066f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81066fa:	2b00      	cmp	r3, #0
 81066fc:	d1e5      	bne.n	81066ca <HAL_UART_Transmit_IT+0x9e>
 81066fe:	e02c      	b.n	810675a <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8106700:	68fb      	ldr	r3, [r7, #12]
 8106702:	689b      	ldr	r3, [r3, #8]
 8106704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106708:	d107      	bne.n	810671a <HAL_UART_Transmit_IT+0xee>
 810670a:	68fb      	ldr	r3, [r7, #12]
 810670c:	691b      	ldr	r3, [r3, #16]
 810670e:	2b00      	cmp	r3, #0
 8106710:	d103      	bne.n	810671a <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8106712:	68fb      	ldr	r3, [r7, #12]
 8106714:	4a17      	ldr	r2, [pc, #92]	; (8106774 <HAL_UART_Transmit_IT+0x148>)
 8106716:	675a      	str	r2, [r3, #116]	; 0x74
 8106718:	e002      	b.n	8106720 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 810671a:	68fb      	ldr	r3, [r7, #12]
 810671c:	4a16      	ldr	r2, [pc, #88]	; (8106778 <HAL_UART_Transmit_IT+0x14c>)
 810671e:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8106720:	68fb      	ldr	r3, [r7, #12]
 8106722:	2200      	movs	r2, #0
 8106724:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8106728:	68fb      	ldr	r3, [r7, #12]
 810672a:	681b      	ldr	r3, [r3, #0]
 810672c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810672e:	697b      	ldr	r3, [r7, #20]
 8106730:	e853 3f00 	ldrex	r3, [r3]
 8106734:	613b      	str	r3, [r7, #16]
   return(result);
 8106736:	693b      	ldr	r3, [r7, #16]
 8106738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810673c:	63fb      	str	r3, [r7, #60]	; 0x3c
 810673e:	68fb      	ldr	r3, [r7, #12]
 8106740:	681b      	ldr	r3, [r3, #0]
 8106742:	461a      	mov	r2, r3
 8106744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8106746:	623b      	str	r3, [r7, #32]
 8106748:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810674a:	69f9      	ldr	r1, [r7, #28]
 810674c:	6a3a      	ldr	r2, [r7, #32]
 810674e:	e841 2300 	strex	r3, r2, [r1]
 8106752:	61bb      	str	r3, [r7, #24]
   return(result);
 8106754:	69bb      	ldr	r3, [r7, #24]
 8106756:	2b00      	cmp	r3, #0
 8106758:	d1e6      	bne.n	8106728 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 810675a:	2300      	movs	r3, #0
 810675c:	e000      	b.n	8106760 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 810675e:	2302      	movs	r3, #2
  }
}
 8106760:	4618      	mov	r0, r3
 8106762:	3744      	adds	r7, #68	; 0x44
 8106764:	46bd      	mov	sp, r7
 8106766:	f85d 7b04 	ldr.w	r7, [sp], #4
 810676a:	4770      	bx	lr
 810676c:	08108373 	.word	0x08108373
 8106770:	08108293 	.word	0x08108293
 8106774:	081081d1 	.word	0x081081d1
 8106778:	08108119 	.word	0x08108119

0810677c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 810677c:	b580      	push	{r7, lr}
 810677e:	b08a      	sub	sp, #40	; 0x28
 8106780:	af00      	add	r7, sp, #0
 8106782:	60f8      	str	r0, [r7, #12]
 8106784:	60b9      	str	r1, [r7, #8]
 8106786:	4613      	mov	r3, r2
 8106788:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 810678a:	68fb      	ldr	r3, [r7, #12]
 810678c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8106790:	2b20      	cmp	r3, #32
 8106792:	d142      	bne.n	810681a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8106794:	68bb      	ldr	r3, [r7, #8]
 8106796:	2b00      	cmp	r3, #0
 8106798:	d002      	beq.n	81067a0 <HAL_UART_Receive_IT+0x24>
 810679a:	88fb      	ldrh	r3, [r7, #6]
 810679c:	2b00      	cmp	r3, #0
 810679e:	d101      	bne.n	81067a4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 81067a0:	2301      	movs	r3, #1
 81067a2:	e03b      	b.n	810681c <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 81067a4:	68fb      	ldr	r3, [r7, #12]
 81067a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 81067aa:	2b01      	cmp	r3, #1
 81067ac:	d101      	bne.n	81067b2 <HAL_UART_Receive_IT+0x36>
 81067ae:	2302      	movs	r3, #2
 81067b0:	e034      	b.n	810681c <HAL_UART_Receive_IT+0xa0>
 81067b2:	68fb      	ldr	r3, [r7, #12]
 81067b4:	2201      	movs	r2, #1
 81067b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 81067ba:	68fb      	ldr	r3, [r7, #12]
 81067bc:	2200      	movs	r2, #0
 81067be:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 81067c0:	68fb      	ldr	r3, [r7, #12]
 81067c2:	681b      	ldr	r3, [r3, #0]
 81067c4:	4a17      	ldr	r2, [pc, #92]	; (8106824 <HAL_UART_Receive_IT+0xa8>)
 81067c6:	4293      	cmp	r3, r2
 81067c8:	d01f      	beq.n	810680a <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 81067ca:	68fb      	ldr	r3, [r7, #12]
 81067cc:	681b      	ldr	r3, [r3, #0]
 81067ce:	685b      	ldr	r3, [r3, #4]
 81067d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 81067d4:	2b00      	cmp	r3, #0
 81067d6:	d018      	beq.n	810680a <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 81067d8:	68fb      	ldr	r3, [r7, #12]
 81067da:	681b      	ldr	r3, [r3, #0]
 81067dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81067de:	697b      	ldr	r3, [r7, #20]
 81067e0:	e853 3f00 	ldrex	r3, [r3]
 81067e4:	613b      	str	r3, [r7, #16]
   return(result);
 81067e6:	693b      	ldr	r3, [r7, #16]
 81067e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 81067ec:	627b      	str	r3, [r7, #36]	; 0x24
 81067ee:	68fb      	ldr	r3, [r7, #12]
 81067f0:	681b      	ldr	r3, [r3, #0]
 81067f2:	461a      	mov	r2, r3
 81067f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81067f6:	623b      	str	r3, [r7, #32]
 81067f8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81067fa:	69f9      	ldr	r1, [r7, #28]
 81067fc:	6a3a      	ldr	r2, [r7, #32]
 81067fe:	e841 2300 	strex	r3, r2, [r1]
 8106802:	61bb      	str	r3, [r7, #24]
   return(result);
 8106804:	69bb      	ldr	r3, [r7, #24]
 8106806:	2b00      	cmp	r3, #0
 8106808:	d1e6      	bne.n	81067d8 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 810680a:	88fb      	ldrh	r3, [r7, #6]
 810680c:	461a      	mov	r2, r3
 810680e:	68b9      	ldr	r1, [r7, #8]
 8106810:	68f8      	ldr	r0, [r7, #12]
 8106812:	f001 fadb 	bl	8107dcc <UART_Start_Receive_IT>
 8106816:	4603      	mov	r3, r0
 8106818:	e000      	b.n	810681c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 810681a:	2302      	movs	r3, #2
  }
}
 810681c:	4618      	mov	r0, r3
 810681e:	3728      	adds	r7, #40	; 0x28
 8106820:	46bd      	mov	sp, r7
 8106822:	bd80      	pop	{r7, pc}
 8106824:	58000c00 	.word	0x58000c00

08106828 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8106828:	b580      	push	{r7, lr}
 810682a:	b0ba      	sub	sp, #232	; 0xe8
 810682c:	af00      	add	r7, sp, #0
 810682e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8106830:	687b      	ldr	r3, [r7, #4]
 8106832:	681b      	ldr	r3, [r3, #0]
 8106834:	69db      	ldr	r3, [r3, #28]
 8106836:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 810683a:	687b      	ldr	r3, [r7, #4]
 810683c:	681b      	ldr	r3, [r3, #0]
 810683e:	681b      	ldr	r3, [r3, #0]
 8106840:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8106844:	687b      	ldr	r3, [r7, #4]
 8106846:	681b      	ldr	r3, [r3, #0]
 8106848:	689b      	ldr	r3, [r3, #8]
 810684a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 810684e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8106852:	f640 030f 	movw	r3, #2063	; 0x80f
 8106856:	4013      	ands	r3, r2
 8106858:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 810685c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8106860:	2b00      	cmp	r3, #0
 8106862:	d11b      	bne.n	810689c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8106864:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8106868:	f003 0320 	and.w	r3, r3, #32
 810686c:	2b00      	cmp	r3, #0
 810686e:	d015      	beq.n	810689c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8106870:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8106874:	f003 0320 	and.w	r3, r3, #32
 8106878:	2b00      	cmp	r3, #0
 810687a:	d105      	bne.n	8106888 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 810687c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8106880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8106884:	2b00      	cmp	r3, #0
 8106886:	d009      	beq.n	810689c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8106888:	687b      	ldr	r3, [r7, #4]
 810688a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810688c:	2b00      	cmp	r3, #0
 810688e:	f000 835c 	beq.w	8106f4a <HAL_UART_IRQHandler+0x722>
      {
        huart->RxISR(huart);
 8106892:	687b      	ldr	r3, [r7, #4]
 8106894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8106896:	6878      	ldr	r0, [r7, #4]
 8106898:	4798      	blx	r3
      }
      return;
 810689a:	e356      	b.n	8106f4a <HAL_UART_IRQHandler+0x722>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 810689c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 81068a0:	2b00      	cmp	r3, #0
 81068a2:	f000 811f 	beq.w	8106ae4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 81068a6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 81068aa:	4b8b      	ldr	r3, [pc, #556]	; (8106ad8 <HAL_UART_IRQHandler+0x2b0>)
 81068ac:	4013      	ands	r3, r2
 81068ae:	2b00      	cmp	r3, #0
 81068b0:	d106      	bne.n	81068c0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 81068b2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 81068b6:	4b89      	ldr	r3, [pc, #548]	; (8106adc <HAL_UART_IRQHandler+0x2b4>)
 81068b8:	4013      	ands	r3, r2
 81068ba:	2b00      	cmp	r3, #0
 81068bc:	f000 8112 	beq.w	8106ae4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 81068c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 81068c4:	f003 0301 	and.w	r3, r3, #1
 81068c8:	2b00      	cmp	r3, #0
 81068ca:	d011      	beq.n	81068f0 <HAL_UART_IRQHandler+0xc8>
 81068cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 81068d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81068d4:	2b00      	cmp	r3, #0
 81068d6:	d00b      	beq.n	81068f0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 81068d8:	687b      	ldr	r3, [r7, #4]
 81068da:	681b      	ldr	r3, [r3, #0]
 81068dc:	2201      	movs	r2, #1
 81068de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 81068e0:	687b      	ldr	r3, [r7, #4]
 81068e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81068e6:	f043 0201 	orr.w	r2, r3, #1
 81068ea:	687b      	ldr	r3, [r7, #4]
 81068ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 81068f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 81068f4:	f003 0302 	and.w	r3, r3, #2
 81068f8:	2b00      	cmp	r3, #0
 81068fa:	d011      	beq.n	8106920 <HAL_UART_IRQHandler+0xf8>
 81068fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8106900:	f003 0301 	and.w	r3, r3, #1
 8106904:	2b00      	cmp	r3, #0
 8106906:	d00b      	beq.n	8106920 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8106908:	687b      	ldr	r3, [r7, #4]
 810690a:	681b      	ldr	r3, [r3, #0]
 810690c:	2202      	movs	r2, #2
 810690e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8106910:	687b      	ldr	r3, [r7, #4]
 8106912:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8106916:	f043 0204 	orr.w	r2, r3, #4
 810691a:	687b      	ldr	r3, [r7, #4]
 810691c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8106920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8106924:	f003 0304 	and.w	r3, r3, #4
 8106928:	2b00      	cmp	r3, #0
 810692a:	d011      	beq.n	8106950 <HAL_UART_IRQHandler+0x128>
 810692c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8106930:	f003 0301 	and.w	r3, r3, #1
 8106934:	2b00      	cmp	r3, #0
 8106936:	d00b      	beq.n	8106950 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8106938:	687b      	ldr	r3, [r7, #4]
 810693a:	681b      	ldr	r3, [r3, #0]
 810693c:	2204      	movs	r2, #4
 810693e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8106940:	687b      	ldr	r3, [r7, #4]
 8106942:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8106946:	f043 0202 	orr.w	r2, r3, #2
 810694a:	687b      	ldr	r3, [r7, #4]
 810694c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8106950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8106954:	f003 0308 	and.w	r3, r3, #8
 8106958:	2b00      	cmp	r3, #0
 810695a:	d017      	beq.n	810698c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 810695c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8106960:	f003 0320 	and.w	r3, r3, #32
 8106964:	2b00      	cmp	r3, #0
 8106966:	d105      	bne.n	8106974 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8106968:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 810696c:	4b5a      	ldr	r3, [pc, #360]	; (8106ad8 <HAL_UART_IRQHandler+0x2b0>)
 810696e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8106970:	2b00      	cmp	r3, #0
 8106972:	d00b      	beq.n	810698c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8106974:	687b      	ldr	r3, [r7, #4]
 8106976:	681b      	ldr	r3, [r3, #0]
 8106978:	2208      	movs	r2, #8
 810697a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 810697c:	687b      	ldr	r3, [r7, #4]
 810697e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8106982:	f043 0208 	orr.w	r2, r3, #8
 8106986:	687b      	ldr	r3, [r7, #4]
 8106988:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 810698c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8106990:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8106994:	2b00      	cmp	r3, #0
 8106996:	d012      	beq.n	81069be <HAL_UART_IRQHandler+0x196>
 8106998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 810699c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 81069a0:	2b00      	cmp	r3, #0
 81069a2:	d00c      	beq.n	81069be <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 81069a4:	687b      	ldr	r3, [r7, #4]
 81069a6:	681b      	ldr	r3, [r3, #0]
 81069a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 81069ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 81069ae:	687b      	ldr	r3, [r7, #4]
 81069b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81069b4:	f043 0220 	orr.w	r2, r3, #32
 81069b8:	687b      	ldr	r3, [r7, #4]
 81069ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 81069be:	687b      	ldr	r3, [r7, #4]
 81069c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81069c4:	2b00      	cmp	r3, #0
 81069c6:	f000 82c2 	beq.w	8106f4e <HAL_UART_IRQHandler+0x726>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 81069ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 81069ce:	f003 0320 	and.w	r3, r3, #32
 81069d2:	2b00      	cmp	r3, #0
 81069d4:	d013      	beq.n	81069fe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 81069d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 81069da:	f003 0320 	and.w	r3, r3, #32
 81069de:	2b00      	cmp	r3, #0
 81069e0:	d105      	bne.n	81069ee <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 81069e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 81069e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 81069ea:	2b00      	cmp	r3, #0
 81069ec:	d007      	beq.n	81069fe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 81069ee:	687b      	ldr	r3, [r7, #4]
 81069f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81069f2:	2b00      	cmp	r3, #0
 81069f4:	d003      	beq.n	81069fe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 81069f6:	687b      	ldr	r3, [r7, #4]
 81069f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81069fa:	6878      	ldr	r0, [r7, #4]
 81069fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 81069fe:	687b      	ldr	r3, [r7, #4]
 8106a00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8106a04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8106a08:	687b      	ldr	r3, [r7, #4]
 8106a0a:	681b      	ldr	r3, [r3, #0]
 8106a0c:	689b      	ldr	r3, [r3, #8]
 8106a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106a12:	2b40      	cmp	r3, #64	; 0x40
 8106a14:	d005      	beq.n	8106a22 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8106a16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8106a1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8106a1e:	2b00      	cmp	r3, #0
 8106a20:	d04f      	beq.n	8106ac2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8106a22:	6878      	ldr	r0, [r7, #4]
 8106a24:	f001 fafc 	bl	8108020 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8106a28:	687b      	ldr	r3, [r7, #4]
 8106a2a:	681b      	ldr	r3, [r3, #0]
 8106a2c:	689b      	ldr	r3, [r3, #8]
 8106a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106a32:	2b40      	cmp	r3, #64	; 0x40
 8106a34:	d141      	bne.n	8106aba <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8106a36:	687b      	ldr	r3, [r7, #4]
 8106a38:	681b      	ldr	r3, [r3, #0]
 8106a3a:	3308      	adds	r3, #8
 8106a3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106a40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8106a44:	e853 3f00 	ldrex	r3, [r3]
 8106a48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8106a4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8106a50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8106a54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8106a58:	687b      	ldr	r3, [r7, #4]
 8106a5a:	681b      	ldr	r3, [r3, #0]
 8106a5c:	3308      	adds	r3, #8
 8106a5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8106a62:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8106a66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106a6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8106a6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8106a72:	e841 2300 	strex	r3, r2, [r1]
 8106a76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8106a7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8106a7e:	2b00      	cmp	r3, #0
 8106a80:	d1d9      	bne.n	8106a36 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8106a82:	687b      	ldr	r3, [r7, #4]
 8106a84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106a86:	2b00      	cmp	r3, #0
 8106a88:	d013      	beq.n	8106ab2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8106a8a:	687b      	ldr	r3, [r7, #4]
 8106a8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106a8e:	4a14      	ldr	r2, [pc, #80]	; (8106ae0 <HAL_UART_IRQHandler+0x2b8>)
 8106a90:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8106a92:	687b      	ldr	r3, [r7, #4]
 8106a94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106a96:	4618      	mov	r0, r3
 8106a98:	f7fc f91c 	bl	8102cd4 <HAL_DMA_Abort_IT>
 8106a9c:	4603      	mov	r3, r0
 8106a9e:	2b00      	cmp	r3, #0
 8106aa0:	d017      	beq.n	8106ad2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8106aa2:	687b      	ldr	r3, [r7, #4]
 8106aa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106aa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106aa8:	687a      	ldr	r2, [r7, #4]
 8106aaa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8106aac:	4610      	mov	r0, r2
 8106aae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8106ab0:	e00f      	b.n	8106ad2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8106ab2:	6878      	ldr	r0, [r7, #4]
 8106ab4:	f000 fa56 	bl	8106f64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8106ab8:	e00b      	b.n	8106ad2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8106aba:	6878      	ldr	r0, [r7, #4]
 8106abc:	f000 fa52 	bl	8106f64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8106ac0:	e007      	b.n	8106ad2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8106ac2:	6878      	ldr	r0, [r7, #4]
 8106ac4:	f000 fa4e 	bl	8106f64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8106ac8:	687b      	ldr	r3, [r7, #4]
 8106aca:	2200      	movs	r2, #0
 8106acc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8106ad0:	e23d      	b.n	8106f4e <HAL_UART_IRQHandler+0x726>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8106ad2:	bf00      	nop
    return;
 8106ad4:	e23b      	b.n	8106f4e <HAL_UART_IRQHandler+0x726>
 8106ad6:	bf00      	nop
 8106ad8:	10000001 	.word	0x10000001
 8106adc:	04000120 	.word	0x04000120
 8106ae0:	081080ed 	.word	0x081080ed

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8106ae4:	687b      	ldr	r3, [r7, #4]
 8106ae6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8106ae8:	2b01      	cmp	r3, #1
 8106aea:	f040 81d0 	bne.w	8106e8e <HAL_UART_IRQHandler+0x666>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8106aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8106af2:	f003 0310 	and.w	r3, r3, #16
 8106af6:	2b00      	cmp	r3, #0
 8106af8:	f000 81c9 	beq.w	8106e8e <HAL_UART_IRQHandler+0x666>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8106afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8106b00:	f003 0310 	and.w	r3, r3, #16
 8106b04:	2b00      	cmp	r3, #0
 8106b06:	f000 81c2 	beq.w	8106e8e <HAL_UART_IRQHandler+0x666>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8106b0a:	687b      	ldr	r3, [r7, #4]
 8106b0c:	681b      	ldr	r3, [r3, #0]
 8106b0e:	2210      	movs	r2, #16
 8106b10:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8106b12:	687b      	ldr	r3, [r7, #4]
 8106b14:	681b      	ldr	r3, [r3, #0]
 8106b16:	689b      	ldr	r3, [r3, #8]
 8106b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106b1c:	2b40      	cmp	r3, #64	; 0x40
 8106b1e:	f040 813b 	bne.w	8106d98 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8106b22:	687b      	ldr	r3, [r7, #4]
 8106b24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106b26:	681b      	ldr	r3, [r3, #0]
 8106b28:	4a8b      	ldr	r2, [pc, #556]	; (8106d58 <HAL_UART_IRQHandler+0x530>)
 8106b2a:	4293      	cmp	r3, r2
 8106b2c:	d059      	beq.n	8106be2 <HAL_UART_IRQHandler+0x3ba>
 8106b2e:	687b      	ldr	r3, [r7, #4]
 8106b30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106b32:	681b      	ldr	r3, [r3, #0]
 8106b34:	4a89      	ldr	r2, [pc, #548]	; (8106d5c <HAL_UART_IRQHandler+0x534>)
 8106b36:	4293      	cmp	r3, r2
 8106b38:	d053      	beq.n	8106be2 <HAL_UART_IRQHandler+0x3ba>
 8106b3a:	687b      	ldr	r3, [r7, #4]
 8106b3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106b3e:	681b      	ldr	r3, [r3, #0]
 8106b40:	4a87      	ldr	r2, [pc, #540]	; (8106d60 <HAL_UART_IRQHandler+0x538>)
 8106b42:	4293      	cmp	r3, r2
 8106b44:	d04d      	beq.n	8106be2 <HAL_UART_IRQHandler+0x3ba>
 8106b46:	687b      	ldr	r3, [r7, #4]
 8106b48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106b4a:	681b      	ldr	r3, [r3, #0]
 8106b4c:	4a85      	ldr	r2, [pc, #532]	; (8106d64 <HAL_UART_IRQHandler+0x53c>)
 8106b4e:	4293      	cmp	r3, r2
 8106b50:	d047      	beq.n	8106be2 <HAL_UART_IRQHandler+0x3ba>
 8106b52:	687b      	ldr	r3, [r7, #4]
 8106b54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106b56:	681b      	ldr	r3, [r3, #0]
 8106b58:	4a83      	ldr	r2, [pc, #524]	; (8106d68 <HAL_UART_IRQHandler+0x540>)
 8106b5a:	4293      	cmp	r3, r2
 8106b5c:	d041      	beq.n	8106be2 <HAL_UART_IRQHandler+0x3ba>
 8106b5e:	687b      	ldr	r3, [r7, #4]
 8106b60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106b62:	681b      	ldr	r3, [r3, #0]
 8106b64:	4a81      	ldr	r2, [pc, #516]	; (8106d6c <HAL_UART_IRQHandler+0x544>)
 8106b66:	4293      	cmp	r3, r2
 8106b68:	d03b      	beq.n	8106be2 <HAL_UART_IRQHandler+0x3ba>
 8106b6a:	687b      	ldr	r3, [r7, #4]
 8106b6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106b6e:	681b      	ldr	r3, [r3, #0]
 8106b70:	4a7f      	ldr	r2, [pc, #508]	; (8106d70 <HAL_UART_IRQHandler+0x548>)
 8106b72:	4293      	cmp	r3, r2
 8106b74:	d035      	beq.n	8106be2 <HAL_UART_IRQHandler+0x3ba>
 8106b76:	687b      	ldr	r3, [r7, #4]
 8106b78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106b7a:	681b      	ldr	r3, [r3, #0]
 8106b7c:	4a7d      	ldr	r2, [pc, #500]	; (8106d74 <HAL_UART_IRQHandler+0x54c>)
 8106b7e:	4293      	cmp	r3, r2
 8106b80:	d02f      	beq.n	8106be2 <HAL_UART_IRQHandler+0x3ba>
 8106b82:	687b      	ldr	r3, [r7, #4]
 8106b84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106b86:	681b      	ldr	r3, [r3, #0]
 8106b88:	4a7b      	ldr	r2, [pc, #492]	; (8106d78 <HAL_UART_IRQHandler+0x550>)
 8106b8a:	4293      	cmp	r3, r2
 8106b8c:	d029      	beq.n	8106be2 <HAL_UART_IRQHandler+0x3ba>
 8106b8e:	687b      	ldr	r3, [r7, #4]
 8106b90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106b92:	681b      	ldr	r3, [r3, #0]
 8106b94:	4a79      	ldr	r2, [pc, #484]	; (8106d7c <HAL_UART_IRQHandler+0x554>)
 8106b96:	4293      	cmp	r3, r2
 8106b98:	d023      	beq.n	8106be2 <HAL_UART_IRQHandler+0x3ba>
 8106b9a:	687b      	ldr	r3, [r7, #4]
 8106b9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106b9e:	681b      	ldr	r3, [r3, #0]
 8106ba0:	4a77      	ldr	r2, [pc, #476]	; (8106d80 <HAL_UART_IRQHandler+0x558>)
 8106ba2:	4293      	cmp	r3, r2
 8106ba4:	d01d      	beq.n	8106be2 <HAL_UART_IRQHandler+0x3ba>
 8106ba6:	687b      	ldr	r3, [r7, #4]
 8106ba8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106baa:	681b      	ldr	r3, [r3, #0]
 8106bac:	4a75      	ldr	r2, [pc, #468]	; (8106d84 <HAL_UART_IRQHandler+0x55c>)
 8106bae:	4293      	cmp	r3, r2
 8106bb0:	d017      	beq.n	8106be2 <HAL_UART_IRQHandler+0x3ba>
 8106bb2:	687b      	ldr	r3, [r7, #4]
 8106bb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106bb6:	681b      	ldr	r3, [r3, #0]
 8106bb8:	4a73      	ldr	r2, [pc, #460]	; (8106d88 <HAL_UART_IRQHandler+0x560>)
 8106bba:	4293      	cmp	r3, r2
 8106bbc:	d011      	beq.n	8106be2 <HAL_UART_IRQHandler+0x3ba>
 8106bbe:	687b      	ldr	r3, [r7, #4]
 8106bc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106bc2:	681b      	ldr	r3, [r3, #0]
 8106bc4:	4a71      	ldr	r2, [pc, #452]	; (8106d8c <HAL_UART_IRQHandler+0x564>)
 8106bc6:	4293      	cmp	r3, r2
 8106bc8:	d00b      	beq.n	8106be2 <HAL_UART_IRQHandler+0x3ba>
 8106bca:	687b      	ldr	r3, [r7, #4]
 8106bcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106bce:	681b      	ldr	r3, [r3, #0]
 8106bd0:	4a6f      	ldr	r2, [pc, #444]	; (8106d90 <HAL_UART_IRQHandler+0x568>)
 8106bd2:	4293      	cmp	r3, r2
 8106bd4:	d005      	beq.n	8106be2 <HAL_UART_IRQHandler+0x3ba>
 8106bd6:	687b      	ldr	r3, [r7, #4]
 8106bd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106bda:	681b      	ldr	r3, [r3, #0]
 8106bdc:	4a6d      	ldr	r2, [pc, #436]	; (8106d94 <HAL_UART_IRQHandler+0x56c>)
 8106bde:	4293      	cmp	r3, r2
 8106be0:	d105      	bne.n	8106bee <HAL_UART_IRQHandler+0x3c6>
 8106be2:	687b      	ldr	r3, [r7, #4]
 8106be4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106be6:	681b      	ldr	r3, [r3, #0]
 8106be8:	685b      	ldr	r3, [r3, #4]
 8106bea:	b29b      	uxth	r3, r3
 8106bec:	e004      	b.n	8106bf8 <HAL_UART_IRQHandler+0x3d0>
 8106bee:	687b      	ldr	r3, [r7, #4]
 8106bf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106bf2:	681b      	ldr	r3, [r3, #0]
 8106bf4:	685b      	ldr	r3, [r3, #4]
 8106bf6:	b29b      	uxth	r3, r3
 8106bf8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8106bfc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8106c00:	2b00      	cmp	r3, #0
 8106c02:	f000 81a6 	beq.w	8106f52 <HAL_UART_IRQHandler+0x72a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8106c06:	687b      	ldr	r3, [r7, #4]
 8106c08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8106c0c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8106c10:	429a      	cmp	r2, r3
 8106c12:	f080 819e 	bcs.w	8106f52 <HAL_UART_IRQHandler+0x72a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8106c16:	687b      	ldr	r3, [r7, #4]
 8106c18:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8106c1c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8106c20:	687b      	ldr	r3, [r7, #4]
 8106c22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106c24:	69db      	ldr	r3, [r3, #28]
 8106c26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106c2a:	f000 8086 	beq.w	8106d3a <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8106c2e:	687b      	ldr	r3, [r7, #4]
 8106c30:	681b      	ldr	r3, [r3, #0]
 8106c32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106c36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8106c3a:	e853 3f00 	ldrex	r3, [r3]
 8106c3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8106c42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8106c46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8106c4a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8106c4e:	687b      	ldr	r3, [r7, #4]
 8106c50:	681b      	ldr	r3, [r3, #0]
 8106c52:	461a      	mov	r2, r3
 8106c54:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8106c58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8106c5c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106c60:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8106c64:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8106c68:	e841 2300 	strex	r3, r2, [r1]
 8106c6c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8106c70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8106c74:	2b00      	cmp	r3, #0
 8106c76:	d1da      	bne.n	8106c2e <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8106c78:	687b      	ldr	r3, [r7, #4]
 8106c7a:	681b      	ldr	r3, [r3, #0]
 8106c7c:	3308      	adds	r3, #8
 8106c7e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106c80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8106c82:	e853 3f00 	ldrex	r3, [r3]
 8106c86:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8106c88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8106c8a:	f023 0301 	bic.w	r3, r3, #1
 8106c8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8106c92:	687b      	ldr	r3, [r7, #4]
 8106c94:	681b      	ldr	r3, [r3, #0]
 8106c96:	3308      	adds	r3, #8
 8106c98:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8106c9c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8106ca0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106ca2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8106ca4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8106ca8:	e841 2300 	strex	r3, r2, [r1]
 8106cac:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8106cae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8106cb0:	2b00      	cmp	r3, #0
 8106cb2:	d1e1      	bne.n	8106c78 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8106cb4:	687b      	ldr	r3, [r7, #4]
 8106cb6:	681b      	ldr	r3, [r3, #0]
 8106cb8:	3308      	adds	r3, #8
 8106cba:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106cbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8106cbe:	e853 3f00 	ldrex	r3, [r3]
 8106cc2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8106cc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8106cc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8106cca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8106cce:	687b      	ldr	r3, [r7, #4]
 8106cd0:	681b      	ldr	r3, [r3, #0]
 8106cd2:	3308      	adds	r3, #8
 8106cd4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8106cd8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8106cda:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106cdc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8106cde:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8106ce0:	e841 2300 	strex	r3, r2, [r1]
 8106ce4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8106ce6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8106ce8:	2b00      	cmp	r3, #0
 8106cea:	d1e3      	bne.n	8106cb4 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8106cec:	687b      	ldr	r3, [r7, #4]
 8106cee:	2220      	movs	r2, #32
 8106cf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8106cf4:	687b      	ldr	r3, [r7, #4]
 8106cf6:	2200      	movs	r2, #0
 8106cf8:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8106cfa:	687b      	ldr	r3, [r7, #4]
 8106cfc:	681b      	ldr	r3, [r3, #0]
 8106cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106d00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8106d02:	e853 3f00 	ldrex	r3, [r3]
 8106d06:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8106d08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8106d0a:	f023 0310 	bic.w	r3, r3, #16
 8106d0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8106d12:	687b      	ldr	r3, [r7, #4]
 8106d14:	681b      	ldr	r3, [r3, #0]
 8106d16:	461a      	mov	r2, r3
 8106d18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8106d1c:	65bb      	str	r3, [r7, #88]	; 0x58
 8106d1e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106d20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8106d22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8106d24:	e841 2300 	strex	r3, r2, [r1]
 8106d28:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8106d2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8106d2c:	2b00      	cmp	r3, #0
 8106d2e:	d1e4      	bne.n	8106cfa <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8106d30:	687b      	ldr	r3, [r7, #4]
 8106d32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106d34:	4618      	mov	r0, r3
 8106d36:	f7fb fcaf 	bl	8102698 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8106d3a:	687b      	ldr	r3, [r7, #4]
 8106d3c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8106d40:	687b      	ldr	r3, [r7, #4]
 8106d42:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8106d46:	b29b      	uxth	r3, r3
 8106d48:	1ad3      	subs	r3, r2, r3
 8106d4a:	b29b      	uxth	r3, r3
 8106d4c:	4619      	mov	r1, r3
 8106d4e:	6878      	ldr	r0, [r7, #4]
 8106d50:	f000 f912 	bl	8106f78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8106d54:	e0fd      	b.n	8106f52 <HAL_UART_IRQHandler+0x72a>
 8106d56:	bf00      	nop
 8106d58:	40020010 	.word	0x40020010
 8106d5c:	40020028 	.word	0x40020028
 8106d60:	40020040 	.word	0x40020040
 8106d64:	40020058 	.word	0x40020058
 8106d68:	40020070 	.word	0x40020070
 8106d6c:	40020088 	.word	0x40020088
 8106d70:	400200a0 	.word	0x400200a0
 8106d74:	400200b8 	.word	0x400200b8
 8106d78:	40020410 	.word	0x40020410
 8106d7c:	40020428 	.word	0x40020428
 8106d80:	40020440 	.word	0x40020440
 8106d84:	40020458 	.word	0x40020458
 8106d88:	40020470 	.word	0x40020470
 8106d8c:	40020488 	.word	0x40020488
 8106d90:	400204a0 	.word	0x400204a0
 8106d94:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8106d98:	687b      	ldr	r3, [r7, #4]
 8106d9a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8106d9e:	687b      	ldr	r3, [r7, #4]
 8106da0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8106da4:	b29b      	uxth	r3, r3
 8106da6:	1ad3      	subs	r3, r2, r3
 8106da8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8106dac:	687b      	ldr	r3, [r7, #4]
 8106dae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8106db2:	b29b      	uxth	r3, r3
 8106db4:	2b00      	cmp	r3, #0
 8106db6:	f000 80ce 	beq.w	8106f56 <HAL_UART_IRQHandler+0x72e>
          && (nb_rx_data > 0U))
 8106dba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8106dbe:	2b00      	cmp	r3, #0
 8106dc0:	f000 80c9 	beq.w	8106f56 <HAL_UART_IRQHandler+0x72e>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8106dc4:	687b      	ldr	r3, [r7, #4]
 8106dc6:	681b      	ldr	r3, [r3, #0]
 8106dc8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106dcc:	e853 3f00 	ldrex	r3, [r3]
 8106dd0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8106dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106dd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8106dd8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8106ddc:	687b      	ldr	r3, [r7, #4]
 8106dde:	681b      	ldr	r3, [r3, #0]
 8106de0:	461a      	mov	r2, r3
 8106de2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8106de6:	647b      	str	r3, [r7, #68]	; 0x44
 8106de8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106dea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8106dec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8106dee:	e841 2300 	strex	r3, r2, [r1]
 8106df2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8106df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8106df6:	2b00      	cmp	r3, #0
 8106df8:	d1e4      	bne.n	8106dc4 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8106dfa:	687b      	ldr	r3, [r7, #4]
 8106dfc:	681b      	ldr	r3, [r3, #0]
 8106dfe:	3308      	adds	r3, #8
 8106e00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106e04:	e853 3f00 	ldrex	r3, [r3]
 8106e08:	623b      	str	r3, [r7, #32]
   return(result);
 8106e0a:	6a3b      	ldr	r3, [r7, #32]
 8106e0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8106e10:	f023 0301 	bic.w	r3, r3, #1
 8106e14:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8106e18:	687b      	ldr	r3, [r7, #4]
 8106e1a:	681b      	ldr	r3, [r3, #0]
 8106e1c:	3308      	adds	r3, #8
 8106e1e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8106e22:	633a      	str	r2, [r7, #48]	; 0x30
 8106e24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106e26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8106e28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8106e2a:	e841 2300 	strex	r3, r2, [r1]
 8106e2e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8106e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106e32:	2b00      	cmp	r3, #0
 8106e34:	d1e1      	bne.n	8106dfa <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8106e36:	687b      	ldr	r3, [r7, #4]
 8106e38:	2220      	movs	r2, #32
 8106e3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8106e3e:	687b      	ldr	r3, [r7, #4]
 8106e40:	2200      	movs	r2, #0
 8106e42:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8106e44:	687b      	ldr	r3, [r7, #4]
 8106e46:	2200      	movs	r2, #0
 8106e48:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8106e4a:	687b      	ldr	r3, [r7, #4]
 8106e4c:	681b      	ldr	r3, [r3, #0]
 8106e4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106e50:	693b      	ldr	r3, [r7, #16]
 8106e52:	e853 3f00 	ldrex	r3, [r3]
 8106e56:	60fb      	str	r3, [r7, #12]
   return(result);
 8106e58:	68fb      	ldr	r3, [r7, #12]
 8106e5a:	f023 0310 	bic.w	r3, r3, #16
 8106e5e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8106e62:	687b      	ldr	r3, [r7, #4]
 8106e64:	681b      	ldr	r3, [r3, #0]
 8106e66:	461a      	mov	r2, r3
 8106e68:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8106e6c:	61fb      	str	r3, [r7, #28]
 8106e6e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106e70:	69b9      	ldr	r1, [r7, #24]
 8106e72:	69fa      	ldr	r2, [r7, #28]
 8106e74:	e841 2300 	strex	r3, r2, [r1]
 8106e78:	617b      	str	r3, [r7, #20]
   return(result);
 8106e7a:	697b      	ldr	r3, [r7, #20]
 8106e7c:	2b00      	cmp	r3, #0
 8106e7e:	d1e4      	bne.n	8106e4a <HAL_UART_IRQHandler+0x622>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8106e80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8106e84:	4619      	mov	r1, r3
 8106e86:	6878      	ldr	r0, [r7, #4]
 8106e88:	f000 f876 	bl	8106f78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8106e8c:	e063      	b.n	8106f56 <HAL_UART_IRQHandler+0x72e>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8106e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8106e92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8106e96:	2b00      	cmp	r3, #0
 8106e98:	d00e      	beq.n	8106eb8 <HAL_UART_IRQHandler+0x690>
 8106e9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8106e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8106ea2:	2b00      	cmp	r3, #0
 8106ea4:	d008      	beq.n	8106eb8 <HAL_UART_IRQHandler+0x690>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8106ea6:	687b      	ldr	r3, [r7, #4]
 8106ea8:	681b      	ldr	r3, [r3, #0]
 8106eaa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8106eae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8106eb0:	6878      	ldr	r0, [r7, #4]
 8106eb2:	f001 ff5b 	bl	8108d6c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8106eb6:	e051      	b.n	8106f5c <HAL_UART_IRQHandler+0x734>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8106eb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8106ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8106ec0:	2b00      	cmp	r3, #0
 8106ec2:	d014      	beq.n	8106eee <HAL_UART_IRQHandler+0x6c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8106ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8106ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8106ecc:	2b00      	cmp	r3, #0
 8106ece:	d105      	bne.n	8106edc <HAL_UART_IRQHandler+0x6b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8106ed0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8106ed4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8106ed8:	2b00      	cmp	r3, #0
 8106eda:	d008      	beq.n	8106eee <HAL_UART_IRQHandler+0x6c6>
  {
    if (huart->TxISR != NULL)
 8106edc:	687b      	ldr	r3, [r7, #4]
 8106ede:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8106ee0:	2b00      	cmp	r3, #0
 8106ee2:	d03a      	beq.n	8106f5a <HAL_UART_IRQHandler+0x732>
    {
      huart->TxISR(huart);
 8106ee4:	687b      	ldr	r3, [r7, #4]
 8106ee6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8106ee8:	6878      	ldr	r0, [r7, #4]
 8106eea:	4798      	blx	r3
    }
    return;
 8106eec:	e035      	b.n	8106f5a <HAL_UART_IRQHandler+0x732>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8106eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8106ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106ef6:	2b00      	cmp	r3, #0
 8106ef8:	d009      	beq.n	8106f0e <HAL_UART_IRQHandler+0x6e6>
 8106efa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8106efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106f02:	2b00      	cmp	r3, #0
 8106f04:	d003      	beq.n	8106f0e <HAL_UART_IRQHandler+0x6e6>
  {
    UART_EndTransmit_IT(huart);
 8106f06:	6878      	ldr	r0, [r7, #4]
 8106f08:	f001 faa8 	bl	810845c <UART_EndTransmit_IT>
    return;
 8106f0c:	e026      	b.n	8106f5c <HAL_UART_IRQHandler+0x734>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8106f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8106f12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8106f16:	2b00      	cmp	r3, #0
 8106f18:	d009      	beq.n	8106f2e <HAL_UART_IRQHandler+0x706>
 8106f1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8106f1e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8106f22:	2b00      	cmp	r3, #0
 8106f24:	d003      	beq.n	8106f2e <HAL_UART_IRQHandler+0x706>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8106f26:	6878      	ldr	r0, [r7, #4]
 8106f28:	f001 ff34 	bl	8108d94 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8106f2c:	e016      	b.n	8106f5c <HAL_UART_IRQHandler+0x734>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8106f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8106f32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8106f36:	2b00      	cmp	r3, #0
 8106f38:	d010      	beq.n	8106f5c <HAL_UART_IRQHandler+0x734>
 8106f3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8106f3e:	2b00      	cmp	r3, #0
 8106f40:	da0c      	bge.n	8106f5c <HAL_UART_IRQHandler+0x734>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8106f42:	6878      	ldr	r0, [r7, #4]
 8106f44:	f001 ff1c 	bl	8108d80 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8106f48:	e008      	b.n	8106f5c <HAL_UART_IRQHandler+0x734>
      return;
 8106f4a:	bf00      	nop
 8106f4c:	e006      	b.n	8106f5c <HAL_UART_IRQHandler+0x734>
    return;
 8106f4e:	bf00      	nop
 8106f50:	e004      	b.n	8106f5c <HAL_UART_IRQHandler+0x734>
      return;
 8106f52:	bf00      	nop
 8106f54:	e002      	b.n	8106f5c <HAL_UART_IRQHandler+0x734>
      return;
 8106f56:	bf00      	nop
 8106f58:	e000      	b.n	8106f5c <HAL_UART_IRQHandler+0x734>
    return;
 8106f5a:	bf00      	nop
  }
}
 8106f5c:	37e8      	adds	r7, #232	; 0xe8
 8106f5e:	46bd      	mov	sp, r7
 8106f60:	bd80      	pop	{r7, pc}
 8106f62:	bf00      	nop

08106f64 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8106f64:	b480      	push	{r7}
 8106f66:	b083      	sub	sp, #12
 8106f68:	af00      	add	r7, sp, #0
 8106f6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8106f6c:	bf00      	nop
 8106f6e:	370c      	adds	r7, #12
 8106f70:	46bd      	mov	sp, r7
 8106f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106f76:	4770      	bx	lr

08106f78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8106f78:	b480      	push	{r7}
 8106f7a:	b083      	sub	sp, #12
 8106f7c:	af00      	add	r7, sp, #0
 8106f7e:	6078      	str	r0, [r7, #4]
 8106f80:	460b      	mov	r3, r1
 8106f82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8106f84:	bf00      	nop
 8106f86:	370c      	adds	r7, #12
 8106f88:	46bd      	mov	sp, r7
 8106f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106f8e:	4770      	bx	lr

08106f90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8106f90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8106f94:	b092      	sub	sp, #72	; 0x48
 8106f96:	af00      	add	r7, sp, #0
 8106f98:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8106f9a:	2300      	movs	r3, #0
 8106f9c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8106fa0:	697b      	ldr	r3, [r7, #20]
 8106fa2:	689a      	ldr	r2, [r3, #8]
 8106fa4:	697b      	ldr	r3, [r7, #20]
 8106fa6:	691b      	ldr	r3, [r3, #16]
 8106fa8:	431a      	orrs	r2, r3
 8106faa:	697b      	ldr	r3, [r7, #20]
 8106fac:	695b      	ldr	r3, [r3, #20]
 8106fae:	431a      	orrs	r2, r3
 8106fb0:	697b      	ldr	r3, [r7, #20]
 8106fb2:	69db      	ldr	r3, [r3, #28]
 8106fb4:	4313      	orrs	r3, r2
 8106fb6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8106fb8:	697b      	ldr	r3, [r7, #20]
 8106fba:	681b      	ldr	r3, [r3, #0]
 8106fbc:	681a      	ldr	r2, [r3, #0]
 8106fbe:	4bbd      	ldr	r3, [pc, #756]	; (81072b4 <UART_SetConfig+0x324>)
 8106fc0:	4013      	ands	r3, r2
 8106fc2:	697a      	ldr	r2, [r7, #20]
 8106fc4:	6812      	ldr	r2, [r2, #0]
 8106fc6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8106fc8:	430b      	orrs	r3, r1
 8106fca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8106fcc:	697b      	ldr	r3, [r7, #20]
 8106fce:	681b      	ldr	r3, [r3, #0]
 8106fd0:	685b      	ldr	r3, [r3, #4]
 8106fd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8106fd6:	697b      	ldr	r3, [r7, #20]
 8106fd8:	68da      	ldr	r2, [r3, #12]
 8106fda:	697b      	ldr	r3, [r7, #20]
 8106fdc:	681b      	ldr	r3, [r3, #0]
 8106fde:	430a      	orrs	r2, r1
 8106fe0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8106fe2:	697b      	ldr	r3, [r7, #20]
 8106fe4:	699b      	ldr	r3, [r3, #24]
 8106fe6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8106fe8:	697b      	ldr	r3, [r7, #20]
 8106fea:	681b      	ldr	r3, [r3, #0]
 8106fec:	4ab2      	ldr	r2, [pc, #712]	; (81072b8 <UART_SetConfig+0x328>)
 8106fee:	4293      	cmp	r3, r2
 8106ff0:	d004      	beq.n	8106ffc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8106ff2:	697b      	ldr	r3, [r7, #20]
 8106ff4:	6a1b      	ldr	r3, [r3, #32]
 8106ff6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8106ff8:	4313      	orrs	r3, r2
 8106ffa:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8106ffc:	697b      	ldr	r3, [r7, #20]
 8106ffe:	681b      	ldr	r3, [r3, #0]
 8107000:	689b      	ldr	r3, [r3, #8]
 8107002:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8107006:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 810700a:	697a      	ldr	r2, [r7, #20]
 810700c:	6812      	ldr	r2, [r2, #0]
 810700e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8107010:	430b      	orrs	r3, r1
 8107012:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8107014:	697b      	ldr	r3, [r7, #20]
 8107016:	681b      	ldr	r3, [r3, #0]
 8107018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810701a:	f023 010f 	bic.w	r1, r3, #15
 810701e:	697b      	ldr	r3, [r7, #20]
 8107020:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8107022:	697b      	ldr	r3, [r7, #20]
 8107024:	681b      	ldr	r3, [r3, #0]
 8107026:	430a      	orrs	r2, r1
 8107028:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 810702a:	697b      	ldr	r3, [r7, #20]
 810702c:	681b      	ldr	r3, [r3, #0]
 810702e:	4aa3      	ldr	r2, [pc, #652]	; (81072bc <UART_SetConfig+0x32c>)
 8107030:	4293      	cmp	r3, r2
 8107032:	d177      	bne.n	8107124 <UART_SetConfig+0x194>
 8107034:	4ba2      	ldr	r3, [pc, #648]	; (81072c0 <UART_SetConfig+0x330>)
 8107036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107038:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810703c:	2b28      	cmp	r3, #40	; 0x28
 810703e:	d86d      	bhi.n	810711c <UART_SetConfig+0x18c>
 8107040:	a201      	add	r2, pc, #4	; (adr r2, 8107048 <UART_SetConfig+0xb8>)
 8107042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107046:	bf00      	nop
 8107048:	081070ed 	.word	0x081070ed
 810704c:	0810711d 	.word	0x0810711d
 8107050:	0810711d 	.word	0x0810711d
 8107054:	0810711d 	.word	0x0810711d
 8107058:	0810711d 	.word	0x0810711d
 810705c:	0810711d 	.word	0x0810711d
 8107060:	0810711d 	.word	0x0810711d
 8107064:	0810711d 	.word	0x0810711d
 8107068:	081070f5 	.word	0x081070f5
 810706c:	0810711d 	.word	0x0810711d
 8107070:	0810711d 	.word	0x0810711d
 8107074:	0810711d 	.word	0x0810711d
 8107078:	0810711d 	.word	0x0810711d
 810707c:	0810711d 	.word	0x0810711d
 8107080:	0810711d 	.word	0x0810711d
 8107084:	0810711d 	.word	0x0810711d
 8107088:	081070fd 	.word	0x081070fd
 810708c:	0810711d 	.word	0x0810711d
 8107090:	0810711d 	.word	0x0810711d
 8107094:	0810711d 	.word	0x0810711d
 8107098:	0810711d 	.word	0x0810711d
 810709c:	0810711d 	.word	0x0810711d
 81070a0:	0810711d 	.word	0x0810711d
 81070a4:	0810711d 	.word	0x0810711d
 81070a8:	08107105 	.word	0x08107105
 81070ac:	0810711d 	.word	0x0810711d
 81070b0:	0810711d 	.word	0x0810711d
 81070b4:	0810711d 	.word	0x0810711d
 81070b8:	0810711d 	.word	0x0810711d
 81070bc:	0810711d 	.word	0x0810711d
 81070c0:	0810711d 	.word	0x0810711d
 81070c4:	0810711d 	.word	0x0810711d
 81070c8:	0810710d 	.word	0x0810710d
 81070cc:	0810711d 	.word	0x0810711d
 81070d0:	0810711d 	.word	0x0810711d
 81070d4:	0810711d 	.word	0x0810711d
 81070d8:	0810711d 	.word	0x0810711d
 81070dc:	0810711d 	.word	0x0810711d
 81070e0:	0810711d 	.word	0x0810711d
 81070e4:	0810711d 	.word	0x0810711d
 81070e8:	08107115 	.word	0x08107115
 81070ec:	2301      	movs	r3, #1
 81070ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81070f2:	e220      	b.n	8107536 <UART_SetConfig+0x5a6>
 81070f4:	2304      	movs	r3, #4
 81070f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81070fa:	e21c      	b.n	8107536 <UART_SetConfig+0x5a6>
 81070fc:	2308      	movs	r3, #8
 81070fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107102:	e218      	b.n	8107536 <UART_SetConfig+0x5a6>
 8107104:	2310      	movs	r3, #16
 8107106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810710a:	e214      	b.n	8107536 <UART_SetConfig+0x5a6>
 810710c:	2320      	movs	r3, #32
 810710e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107112:	e210      	b.n	8107536 <UART_SetConfig+0x5a6>
 8107114:	2340      	movs	r3, #64	; 0x40
 8107116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810711a:	e20c      	b.n	8107536 <UART_SetConfig+0x5a6>
 810711c:	2380      	movs	r3, #128	; 0x80
 810711e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107122:	e208      	b.n	8107536 <UART_SetConfig+0x5a6>
 8107124:	697b      	ldr	r3, [r7, #20]
 8107126:	681b      	ldr	r3, [r3, #0]
 8107128:	4a66      	ldr	r2, [pc, #408]	; (81072c4 <UART_SetConfig+0x334>)
 810712a:	4293      	cmp	r3, r2
 810712c:	d130      	bne.n	8107190 <UART_SetConfig+0x200>
 810712e:	4b64      	ldr	r3, [pc, #400]	; (81072c0 <UART_SetConfig+0x330>)
 8107130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107132:	f003 0307 	and.w	r3, r3, #7
 8107136:	2b05      	cmp	r3, #5
 8107138:	d826      	bhi.n	8107188 <UART_SetConfig+0x1f8>
 810713a:	a201      	add	r2, pc, #4	; (adr r2, 8107140 <UART_SetConfig+0x1b0>)
 810713c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107140:	08107159 	.word	0x08107159
 8107144:	08107161 	.word	0x08107161
 8107148:	08107169 	.word	0x08107169
 810714c:	08107171 	.word	0x08107171
 8107150:	08107179 	.word	0x08107179
 8107154:	08107181 	.word	0x08107181
 8107158:	2300      	movs	r3, #0
 810715a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810715e:	e1ea      	b.n	8107536 <UART_SetConfig+0x5a6>
 8107160:	2304      	movs	r3, #4
 8107162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107166:	e1e6      	b.n	8107536 <UART_SetConfig+0x5a6>
 8107168:	2308      	movs	r3, #8
 810716a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810716e:	e1e2      	b.n	8107536 <UART_SetConfig+0x5a6>
 8107170:	2310      	movs	r3, #16
 8107172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107176:	e1de      	b.n	8107536 <UART_SetConfig+0x5a6>
 8107178:	2320      	movs	r3, #32
 810717a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810717e:	e1da      	b.n	8107536 <UART_SetConfig+0x5a6>
 8107180:	2340      	movs	r3, #64	; 0x40
 8107182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107186:	e1d6      	b.n	8107536 <UART_SetConfig+0x5a6>
 8107188:	2380      	movs	r3, #128	; 0x80
 810718a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810718e:	e1d2      	b.n	8107536 <UART_SetConfig+0x5a6>
 8107190:	697b      	ldr	r3, [r7, #20]
 8107192:	681b      	ldr	r3, [r3, #0]
 8107194:	4a4c      	ldr	r2, [pc, #304]	; (81072c8 <UART_SetConfig+0x338>)
 8107196:	4293      	cmp	r3, r2
 8107198:	d130      	bne.n	81071fc <UART_SetConfig+0x26c>
 810719a:	4b49      	ldr	r3, [pc, #292]	; (81072c0 <UART_SetConfig+0x330>)
 810719c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810719e:	f003 0307 	and.w	r3, r3, #7
 81071a2:	2b05      	cmp	r3, #5
 81071a4:	d826      	bhi.n	81071f4 <UART_SetConfig+0x264>
 81071a6:	a201      	add	r2, pc, #4	; (adr r2, 81071ac <UART_SetConfig+0x21c>)
 81071a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81071ac:	081071c5 	.word	0x081071c5
 81071b0:	081071cd 	.word	0x081071cd
 81071b4:	081071d5 	.word	0x081071d5
 81071b8:	081071dd 	.word	0x081071dd
 81071bc:	081071e5 	.word	0x081071e5
 81071c0:	081071ed 	.word	0x081071ed
 81071c4:	2300      	movs	r3, #0
 81071c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81071ca:	e1b4      	b.n	8107536 <UART_SetConfig+0x5a6>
 81071cc:	2304      	movs	r3, #4
 81071ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81071d2:	e1b0      	b.n	8107536 <UART_SetConfig+0x5a6>
 81071d4:	2308      	movs	r3, #8
 81071d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81071da:	e1ac      	b.n	8107536 <UART_SetConfig+0x5a6>
 81071dc:	2310      	movs	r3, #16
 81071de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81071e2:	e1a8      	b.n	8107536 <UART_SetConfig+0x5a6>
 81071e4:	2320      	movs	r3, #32
 81071e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81071ea:	e1a4      	b.n	8107536 <UART_SetConfig+0x5a6>
 81071ec:	2340      	movs	r3, #64	; 0x40
 81071ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81071f2:	e1a0      	b.n	8107536 <UART_SetConfig+0x5a6>
 81071f4:	2380      	movs	r3, #128	; 0x80
 81071f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81071fa:	e19c      	b.n	8107536 <UART_SetConfig+0x5a6>
 81071fc:	697b      	ldr	r3, [r7, #20]
 81071fe:	681b      	ldr	r3, [r3, #0]
 8107200:	4a32      	ldr	r2, [pc, #200]	; (81072cc <UART_SetConfig+0x33c>)
 8107202:	4293      	cmp	r3, r2
 8107204:	d130      	bne.n	8107268 <UART_SetConfig+0x2d8>
 8107206:	4b2e      	ldr	r3, [pc, #184]	; (81072c0 <UART_SetConfig+0x330>)
 8107208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810720a:	f003 0307 	and.w	r3, r3, #7
 810720e:	2b05      	cmp	r3, #5
 8107210:	d826      	bhi.n	8107260 <UART_SetConfig+0x2d0>
 8107212:	a201      	add	r2, pc, #4	; (adr r2, 8107218 <UART_SetConfig+0x288>)
 8107214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107218:	08107231 	.word	0x08107231
 810721c:	08107239 	.word	0x08107239
 8107220:	08107241 	.word	0x08107241
 8107224:	08107249 	.word	0x08107249
 8107228:	08107251 	.word	0x08107251
 810722c:	08107259 	.word	0x08107259
 8107230:	2300      	movs	r3, #0
 8107232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107236:	e17e      	b.n	8107536 <UART_SetConfig+0x5a6>
 8107238:	2304      	movs	r3, #4
 810723a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810723e:	e17a      	b.n	8107536 <UART_SetConfig+0x5a6>
 8107240:	2308      	movs	r3, #8
 8107242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107246:	e176      	b.n	8107536 <UART_SetConfig+0x5a6>
 8107248:	2310      	movs	r3, #16
 810724a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810724e:	e172      	b.n	8107536 <UART_SetConfig+0x5a6>
 8107250:	2320      	movs	r3, #32
 8107252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107256:	e16e      	b.n	8107536 <UART_SetConfig+0x5a6>
 8107258:	2340      	movs	r3, #64	; 0x40
 810725a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810725e:	e16a      	b.n	8107536 <UART_SetConfig+0x5a6>
 8107260:	2380      	movs	r3, #128	; 0x80
 8107262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107266:	e166      	b.n	8107536 <UART_SetConfig+0x5a6>
 8107268:	697b      	ldr	r3, [r7, #20]
 810726a:	681b      	ldr	r3, [r3, #0]
 810726c:	4a18      	ldr	r2, [pc, #96]	; (81072d0 <UART_SetConfig+0x340>)
 810726e:	4293      	cmp	r3, r2
 8107270:	d140      	bne.n	81072f4 <UART_SetConfig+0x364>
 8107272:	4b13      	ldr	r3, [pc, #76]	; (81072c0 <UART_SetConfig+0x330>)
 8107274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107276:	f003 0307 	and.w	r3, r3, #7
 810727a:	2b05      	cmp	r3, #5
 810727c:	d836      	bhi.n	81072ec <UART_SetConfig+0x35c>
 810727e:	a201      	add	r2, pc, #4	; (adr r2, 8107284 <UART_SetConfig+0x2f4>)
 8107280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107284:	0810729d 	.word	0x0810729d
 8107288:	081072a5 	.word	0x081072a5
 810728c:	081072ad 	.word	0x081072ad
 8107290:	081072d5 	.word	0x081072d5
 8107294:	081072dd 	.word	0x081072dd
 8107298:	081072e5 	.word	0x081072e5
 810729c:	2300      	movs	r3, #0
 810729e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81072a2:	e148      	b.n	8107536 <UART_SetConfig+0x5a6>
 81072a4:	2304      	movs	r3, #4
 81072a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81072aa:	e144      	b.n	8107536 <UART_SetConfig+0x5a6>
 81072ac:	2308      	movs	r3, #8
 81072ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81072b2:	e140      	b.n	8107536 <UART_SetConfig+0x5a6>
 81072b4:	cfff69f3 	.word	0xcfff69f3
 81072b8:	58000c00 	.word	0x58000c00
 81072bc:	40011000 	.word	0x40011000
 81072c0:	58024400 	.word	0x58024400
 81072c4:	40004400 	.word	0x40004400
 81072c8:	40004800 	.word	0x40004800
 81072cc:	40004c00 	.word	0x40004c00
 81072d0:	40005000 	.word	0x40005000
 81072d4:	2310      	movs	r3, #16
 81072d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81072da:	e12c      	b.n	8107536 <UART_SetConfig+0x5a6>
 81072dc:	2320      	movs	r3, #32
 81072de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81072e2:	e128      	b.n	8107536 <UART_SetConfig+0x5a6>
 81072e4:	2340      	movs	r3, #64	; 0x40
 81072e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81072ea:	e124      	b.n	8107536 <UART_SetConfig+0x5a6>
 81072ec:	2380      	movs	r3, #128	; 0x80
 81072ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81072f2:	e120      	b.n	8107536 <UART_SetConfig+0x5a6>
 81072f4:	697b      	ldr	r3, [r7, #20]
 81072f6:	681b      	ldr	r3, [r3, #0]
 81072f8:	4acb      	ldr	r2, [pc, #812]	; (8107628 <UART_SetConfig+0x698>)
 81072fa:	4293      	cmp	r3, r2
 81072fc:	d176      	bne.n	81073ec <UART_SetConfig+0x45c>
 81072fe:	4bcb      	ldr	r3, [pc, #812]	; (810762c <UART_SetConfig+0x69c>)
 8107300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107302:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8107306:	2b28      	cmp	r3, #40	; 0x28
 8107308:	d86c      	bhi.n	81073e4 <UART_SetConfig+0x454>
 810730a:	a201      	add	r2, pc, #4	; (adr r2, 8107310 <UART_SetConfig+0x380>)
 810730c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107310:	081073b5 	.word	0x081073b5
 8107314:	081073e5 	.word	0x081073e5
 8107318:	081073e5 	.word	0x081073e5
 810731c:	081073e5 	.word	0x081073e5
 8107320:	081073e5 	.word	0x081073e5
 8107324:	081073e5 	.word	0x081073e5
 8107328:	081073e5 	.word	0x081073e5
 810732c:	081073e5 	.word	0x081073e5
 8107330:	081073bd 	.word	0x081073bd
 8107334:	081073e5 	.word	0x081073e5
 8107338:	081073e5 	.word	0x081073e5
 810733c:	081073e5 	.word	0x081073e5
 8107340:	081073e5 	.word	0x081073e5
 8107344:	081073e5 	.word	0x081073e5
 8107348:	081073e5 	.word	0x081073e5
 810734c:	081073e5 	.word	0x081073e5
 8107350:	081073c5 	.word	0x081073c5
 8107354:	081073e5 	.word	0x081073e5
 8107358:	081073e5 	.word	0x081073e5
 810735c:	081073e5 	.word	0x081073e5
 8107360:	081073e5 	.word	0x081073e5
 8107364:	081073e5 	.word	0x081073e5
 8107368:	081073e5 	.word	0x081073e5
 810736c:	081073e5 	.word	0x081073e5
 8107370:	081073cd 	.word	0x081073cd
 8107374:	081073e5 	.word	0x081073e5
 8107378:	081073e5 	.word	0x081073e5
 810737c:	081073e5 	.word	0x081073e5
 8107380:	081073e5 	.word	0x081073e5
 8107384:	081073e5 	.word	0x081073e5
 8107388:	081073e5 	.word	0x081073e5
 810738c:	081073e5 	.word	0x081073e5
 8107390:	081073d5 	.word	0x081073d5
 8107394:	081073e5 	.word	0x081073e5
 8107398:	081073e5 	.word	0x081073e5
 810739c:	081073e5 	.word	0x081073e5
 81073a0:	081073e5 	.word	0x081073e5
 81073a4:	081073e5 	.word	0x081073e5
 81073a8:	081073e5 	.word	0x081073e5
 81073ac:	081073e5 	.word	0x081073e5
 81073b0:	081073dd 	.word	0x081073dd
 81073b4:	2301      	movs	r3, #1
 81073b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81073ba:	e0bc      	b.n	8107536 <UART_SetConfig+0x5a6>
 81073bc:	2304      	movs	r3, #4
 81073be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81073c2:	e0b8      	b.n	8107536 <UART_SetConfig+0x5a6>
 81073c4:	2308      	movs	r3, #8
 81073c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81073ca:	e0b4      	b.n	8107536 <UART_SetConfig+0x5a6>
 81073cc:	2310      	movs	r3, #16
 81073ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81073d2:	e0b0      	b.n	8107536 <UART_SetConfig+0x5a6>
 81073d4:	2320      	movs	r3, #32
 81073d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81073da:	e0ac      	b.n	8107536 <UART_SetConfig+0x5a6>
 81073dc:	2340      	movs	r3, #64	; 0x40
 81073de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81073e2:	e0a8      	b.n	8107536 <UART_SetConfig+0x5a6>
 81073e4:	2380      	movs	r3, #128	; 0x80
 81073e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81073ea:	e0a4      	b.n	8107536 <UART_SetConfig+0x5a6>
 81073ec:	697b      	ldr	r3, [r7, #20]
 81073ee:	681b      	ldr	r3, [r3, #0]
 81073f0:	4a8f      	ldr	r2, [pc, #572]	; (8107630 <UART_SetConfig+0x6a0>)
 81073f2:	4293      	cmp	r3, r2
 81073f4:	d130      	bne.n	8107458 <UART_SetConfig+0x4c8>
 81073f6:	4b8d      	ldr	r3, [pc, #564]	; (810762c <UART_SetConfig+0x69c>)
 81073f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81073fa:	f003 0307 	and.w	r3, r3, #7
 81073fe:	2b05      	cmp	r3, #5
 8107400:	d826      	bhi.n	8107450 <UART_SetConfig+0x4c0>
 8107402:	a201      	add	r2, pc, #4	; (adr r2, 8107408 <UART_SetConfig+0x478>)
 8107404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107408:	08107421 	.word	0x08107421
 810740c:	08107429 	.word	0x08107429
 8107410:	08107431 	.word	0x08107431
 8107414:	08107439 	.word	0x08107439
 8107418:	08107441 	.word	0x08107441
 810741c:	08107449 	.word	0x08107449
 8107420:	2300      	movs	r3, #0
 8107422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107426:	e086      	b.n	8107536 <UART_SetConfig+0x5a6>
 8107428:	2304      	movs	r3, #4
 810742a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810742e:	e082      	b.n	8107536 <UART_SetConfig+0x5a6>
 8107430:	2308      	movs	r3, #8
 8107432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107436:	e07e      	b.n	8107536 <UART_SetConfig+0x5a6>
 8107438:	2310      	movs	r3, #16
 810743a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810743e:	e07a      	b.n	8107536 <UART_SetConfig+0x5a6>
 8107440:	2320      	movs	r3, #32
 8107442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107446:	e076      	b.n	8107536 <UART_SetConfig+0x5a6>
 8107448:	2340      	movs	r3, #64	; 0x40
 810744a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810744e:	e072      	b.n	8107536 <UART_SetConfig+0x5a6>
 8107450:	2380      	movs	r3, #128	; 0x80
 8107452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107456:	e06e      	b.n	8107536 <UART_SetConfig+0x5a6>
 8107458:	697b      	ldr	r3, [r7, #20]
 810745a:	681b      	ldr	r3, [r3, #0]
 810745c:	4a75      	ldr	r2, [pc, #468]	; (8107634 <UART_SetConfig+0x6a4>)
 810745e:	4293      	cmp	r3, r2
 8107460:	d130      	bne.n	81074c4 <UART_SetConfig+0x534>
 8107462:	4b72      	ldr	r3, [pc, #456]	; (810762c <UART_SetConfig+0x69c>)
 8107464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107466:	f003 0307 	and.w	r3, r3, #7
 810746a:	2b05      	cmp	r3, #5
 810746c:	d826      	bhi.n	81074bc <UART_SetConfig+0x52c>
 810746e:	a201      	add	r2, pc, #4	; (adr r2, 8107474 <UART_SetConfig+0x4e4>)
 8107470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107474:	0810748d 	.word	0x0810748d
 8107478:	08107495 	.word	0x08107495
 810747c:	0810749d 	.word	0x0810749d
 8107480:	081074a5 	.word	0x081074a5
 8107484:	081074ad 	.word	0x081074ad
 8107488:	081074b5 	.word	0x081074b5
 810748c:	2300      	movs	r3, #0
 810748e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107492:	e050      	b.n	8107536 <UART_SetConfig+0x5a6>
 8107494:	2304      	movs	r3, #4
 8107496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810749a:	e04c      	b.n	8107536 <UART_SetConfig+0x5a6>
 810749c:	2308      	movs	r3, #8
 810749e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81074a2:	e048      	b.n	8107536 <UART_SetConfig+0x5a6>
 81074a4:	2310      	movs	r3, #16
 81074a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81074aa:	e044      	b.n	8107536 <UART_SetConfig+0x5a6>
 81074ac:	2320      	movs	r3, #32
 81074ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81074b2:	e040      	b.n	8107536 <UART_SetConfig+0x5a6>
 81074b4:	2340      	movs	r3, #64	; 0x40
 81074b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81074ba:	e03c      	b.n	8107536 <UART_SetConfig+0x5a6>
 81074bc:	2380      	movs	r3, #128	; 0x80
 81074be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81074c2:	e038      	b.n	8107536 <UART_SetConfig+0x5a6>
 81074c4:	697b      	ldr	r3, [r7, #20]
 81074c6:	681b      	ldr	r3, [r3, #0]
 81074c8:	4a5b      	ldr	r2, [pc, #364]	; (8107638 <UART_SetConfig+0x6a8>)
 81074ca:	4293      	cmp	r3, r2
 81074cc:	d130      	bne.n	8107530 <UART_SetConfig+0x5a0>
 81074ce:	4b57      	ldr	r3, [pc, #348]	; (810762c <UART_SetConfig+0x69c>)
 81074d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81074d2:	f003 0307 	and.w	r3, r3, #7
 81074d6:	2b05      	cmp	r3, #5
 81074d8:	d826      	bhi.n	8107528 <UART_SetConfig+0x598>
 81074da:	a201      	add	r2, pc, #4	; (adr r2, 81074e0 <UART_SetConfig+0x550>)
 81074dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81074e0:	081074f9 	.word	0x081074f9
 81074e4:	08107501 	.word	0x08107501
 81074e8:	08107509 	.word	0x08107509
 81074ec:	08107511 	.word	0x08107511
 81074f0:	08107519 	.word	0x08107519
 81074f4:	08107521 	.word	0x08107521
 81074f8:	2302      	movs	r3, #2
 81074fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81074fe:	e01a      	b.n	8107536 <UART_SetConfig+0x5a6>
 8107500:	2304      	movs	r3, #4
 8107502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107506:	e016      	b.n	8107536 <UART_SetConfig+0x5a6>
 8107508:	2308      	movs	r3, #8
 810750a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810750e:	e012      	b.n	8107536 <UART_SetConfig+0x5a6>
 8107510:	2310      	movs	r3, #16
 8107512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107516:	e00e      	b.n	8107536 <UART_SetConfig+0x5a6>
 8107518:	2320      	movs	r3, #32
 810751a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810751e:	e00a      	b.n	8107536 <UART_SetConfig+0x5a6>
 8107520:	2340      	movs	r3, #64	; 0x40
 8107522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107526:	e006      	b.n	8107536 <UART_SetConfig+0x5a6>
 8107528:	2380      	movs	r3, #128	; 0x80
 810752a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810752e:	e002      	b.n	8107536 <UART_SetConfig+0x5a6>
 8107530:	2380      	movs	r3, #128	; 0x80
 8107532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8107536:	697b      	ldr	r3, [r7, #20]
 8107538:	681b      	ldr	r3, [r3, #0]
 810753a:	4a3f      	ldr	r2, [pc, #252]	; (8107638 <UART_SetConfig+0x6a8>)
 810753c:	4293      	cmp	r3, r2
 810753e:	f040 80f8 	bne.w	8107732 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8107542:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8107546:	2b20      	cmp	r3, #32
 8107548:	dc46      	bgt.n	81075d8 <UART_SetConfig+0x648>
 810754a:	2b02      	cmp	r3, #2
 810754c:	f2c0 8082 	blt.w	8107654 <UART_SetConfig+0x6c4>
 8107550:	3b02      	subs	r3, #2
 8107552:	2b1e      	cmp	r3, #30
 8107554:	d87e      	bhi.n	8107654 <UART_SetConfig+0x6c4>
 8107556:	a201      	add	r2, pc, #4	; (adr r2, 810755c <UART_SetConfig+0x5cc>)
 8107558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810755c:	081075df 	.word	0x081075df
 8107560:	08107655 	.word	0x08107655
 8107564:	081075e7 	.word	0x081075e7
 8107568:	08107655 	.word	0x08107655
 810756c:	08107655 	.word	0x08107655
 8107570:	08107655 	.word	0x08107655
 8107574:	081075f7 	.word	0x081075f7
 8107578:	08107655 	.word	0x08107655
 810757c:	08107655 	.word	0x08107655
 8107580:	08107655 	.word	0x08107655
 8107584:	08107655 	.word	0x08107655
 8107588:	08107655 	.word	0x08107655
 810758c:	08107655 	.word	0x08107655
 8107590:	08107655 	.word	0x08107655
 8107594:	08107607 	.word	0x08107607
 8107598:	08107655 	.word	0x08107655
 810759c:	08107655 	.word	0x08107655
 81075a0:	08107655 	.word	0x08107655
 81075a4:	08107655 	.word	0x08107655
 81075a8:	08107655 	.word	0x08107655
 81075ac:	08107655 	.word	0x08107655
 81075b0:	08107655 	.word	0x08107655
 81075b4:	08107655 	.word	0x08107655
 81075b8:	08107655 	.word	0x08107655
 81075bc:	08107655 	.word	0x08107655
 81075c0:	08107655 	.word	0x08107655
 81075c4:	08107655 	.word	0x08107655
 81075c8:	08107655 	.word	0x08107655
 81075cc:	08107655 	.word	0x08107655
 81075d0:	08107655 	.word	0x08107655
 81075d4:	08107647 	.word	0x08107647
 81075d8:	2b40      	cmp	r3, #64	; 0x40
 81075da:	d037      	beq.n	810764c <UART_SetConfig+0x6bc>
 81075dc:	e03a      	b.n	8107654 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 81075de:	f7fd f941 	bl	8104864 <HAL_RCCEx_GetD3PCLK1Freq>
 81075e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 81075e4:	e03c      	b.n	8107660 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81075e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81075ea:	4618      	mov	r0, r3
 81075ec:	f7fd f950 	bl	8104890 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81075f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81075f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81075f4:	e034      	b.n	8107660 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81075f6:	f107 0318 	add.w	r3, r7, #24
 81075fa:	4618      	mov	r0, r3
 81075fc:	f7fd fa9c 	bl	8104b38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8107600:	69fb      	ldr	r3, [r7, #28]
 8107602:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107604:	e02c      	b.n	8107660 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107606:	4b09      	ldr	r3, [pc, #36]	; (810762c <UART_SetConfig+0x69c>)
 8107608:	681b      	ldr	r3, [r3, #0]
 810760a:	f003 0320 	and.w	r3, r3, #32
 810760e:	2b00      	cmp	r3, #0
 8107610:	d016      	beq.n	8107640 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8107612:	4b06      	ldr	r3, [pc, #24]	; (810762c <UART_SetConfig+0x69c>)
 8107614:	681b      	ldr	r3, [r3, #0]
 8107616:	08db      	lsrs	r3, r3, #3
 8107618:	f003 0303 	and.w	r3, r3, #3
 810761c:	4a07      	ldr	r2, [pc, #28]	; (810763c <UART_SetConfig+0x6ac>)
 810761e:	fa22 f303 	lsr.w	r3, r2, r3
 8107622:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8107624:	e01c      	b.n	8107660 <UART_SetConfig+0x6d0>
 8107626:	bf00      	nop
 8107628:	40011400 	.word	0x40011400
 810762c:	58024400 	.word	0x58024400
 8107630:	40007800 	.word	0x40007800
 8107634:	40007c00 	.word	0x40007c00
 8107638:	58000c00 	.word	0x58000c00
 810763c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8107640:	4b9d      	ldr	r3, [pc, #628]	; (81078b8 <UART_SetConfig+0x928>)
 8107642:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107644:	e00c      	b.n	8107660 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8107646:	4b9d      	ldr	r3, [pc, #628]	; (81078bc <UART_SetConfig+0x92c>)
 8107648:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810764a:	e009      	b.n	8107660 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810764c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8107650:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107652:	e005      	b.n	8107660 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8107654:	2300      	movs	r3, #0
 8107656:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8107658:	2301      	movs	r3, #1
 810765a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 810765e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8107660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8107662:	2b00      	cmp	r3, #0
 8107664:	f000 81de 	beq.w	8107a24 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8107668:	697b      	ldr	r3, [r7, #20]
 810766a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810766c:	4a94      	ldr	r2, [pc, #592]	; (81078c0 <UART_SetConfig+0x930>)
 810766e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8107672:	461a      	mov	r2, r3
 8107674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8107676:	fbb3 f3f2 	udiv	r3, r3, r2
 810767a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810767c:	697b      	ldr	r3, [r7, #20]
 810767e:	685a      	ldr	r2, [r3, #4]
 8107680:	4613      	mov	r3, r2
 8107682:	005b      	lsls	r3, r3, #1
 8107684:	4413      	add	r3, r2
 8107686:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8107688:	429a      	cmp	r2, r3
 810768a:	d305      	bcc.n	8107698 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 810768c:	697b      	ldr	r3, [r7, #20]
 810768e:	685b      	ldr	r3, [r3, #4]
 8107690:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8107692:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8107694:	429a      	cmp	r2, r3
 8107696:	d903      	bls.n	81076a0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8107698:	2301      	movs	r3, #1
 810769a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 810769e:	e1c1      	b.n	8107a24 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81076a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81076a2:	2200      	movs	r2, #0
 81076a4:	60bb      	str	r3, [r7, #8]
 81076a6:	60fa      	str	r2, [r7, #12]
 81076a8:	697b      	ldr	r3, [r7, #20]
 81076aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81076ac:	4a84      	ldr	r2, [pc, #528]	; (81078c0 <UART_SetConfig+0x930>)
 81076ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81076b2:	b29b      	uxth	r3, r3
 81076b4:	2200      	movs	r2, #0
 81076b6:	603b      	str	r3, [r7, #0]
 81076b8:	607a      	str	r2, [r7, #4]
 81076ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 81076be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 81076c2:	f7f9 fb69 	bl	8100d98 <__aeabi_uldivmod>
 81076c6:	4602      	mov	r2, r0
 81076c8:	460b      	mov	r3, r1
 81076ca:	4610      	mov	r0, r2
 81076cc:	4619      	mov	r1, r3
 81076ce:	f04f 0200 	mov.w	r2, #0
 81076d2:	f04f 0300 	mov.w	r3, #0
 81076d6:	020b      	lsls	r3, r1, #8
 81076d8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 81076dc:	0202      	lsls	r2, r0, #8
 81076de:	6979      	ldr	r1, [r7, #20]
 81076e0:	6849      	ldr	r1, [r1, #4]
 81076e2:	0849      	lsrs	r1, r1, #1
 81076e4:	2000      	movs	r0, #0
 81076e6:	460c      	mov	r4, r1
 81076e8:	4605      	mov	r5, r0
 81076ea:	eb12 0804 	adds.w	r8, r2, r4
 81076ee:	eb43 0905 	adc.w	r9, r3, r5
 81076f2:	697b      	ldr	r3, [r7, #20]
 81076f4:	685b      	ldr	r3, [r3, #4]
 81076f6:	2200      	movs	r2, #0
 81076f8:	469a      	mov	sl, r3
 81076fa:	4693      	mov	fp, r2
 81076fc:	4652      	mov	r2, sl
 81076fe:	465b      	mov	r3, fp
 8107700:	4640      	mov	r0, r8
 8107702:	4649      	mov	r1, r9
 8107704:	f7f9 fb48 	bl	8100d98 <__aeabi_uldivmod>
 8107708:	4602      	mov	r2, r0
 810770a:	460b      	mov	r3, r1
 810770c:	4613      	mov	r3, r2
 810770e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8107710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107712:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8107716:	d308      	bcc.n	810772a <UART_SetConfig+0x79a>
 8107718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810771a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810771e:	d204      	bcs.n	810772a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8107720:	697b      	ldr	r3, [r7, #20]
 8107722:	681b      	ldr	r3, [r3, #0]
 8107724:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8107726:	60da      	str	r2, [r3, #12]
 8107728:	e17c      	b.n	8107a24 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 810772a:	2301      	movs	r3, #1
 810772c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8107730:	e178      	b.n	8107a24 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8107732:	697b      	ldr	r3, [r7, #20]
 8107734:	69db      	ldr	r3, [r3, #28]
 8107736:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810773a:	f040 80c5 	bne.w	81078c8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 810773e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8107742:	2b20      	cmp	r3, #32
 8107744:	dc48      	bgt.n	81077d8 <UART_SetConfig+0x848>
 8107746:	2b00      	cmp	r3, #0
 8107748:	db7b      	blt.n	8107842 <UART_SetConfig+0x8b2>
 810774a:	2b20      	cmp	r3, #32
 810774c:	d879      	bhi.n	8107842 <UART_SetConfig+0x8b2>
 810774e:	a201      	add	r2, pc, #4	; (adr r2, 8107754 <UART_SetConfig+0x7c4>)
 8107750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107754:	081077df 	.word	0x081077df
 8107758:	081077e7 	.word	0x081077e7
 810775c:	08107843 	.word	0x08107843
 8107760:	08107843 	.word	0x08107843
 8107764:	081077ef 	.word	0x081077ef
 8107768:	08107843 	.word	0x08107843
 810776c:	08107843 	.word	0x08107843
 8107770:	08107843 	.word	0x08107843
 8107774:	081077ff 	.word	0x081077ff
 8107778:	08107843 	.word	0x08107843
 810777c:	08107843 	.word	0x08107843
 8107780:	08107843 	.word	0x08107843
 8107784:	08107843 	.word	0x08107843
 8107788:	08107843 	.word	0x08107843
 810778c:	08107843 	.word	0x08107843
 8107790:	08107843 	.word	0x08107843
 8107794:	0810780f 	.word	0x0810780f
 8107798:	08107843 	.word	0x08107843
 810779c:	08107843 	.word	0x08107843
 81077a0:	08107843 	.word	0x08107843
 81077a4:	08107843 	.word	0x08107843
 81077a8:	08107843 	.word	0x08107843
 81077ac:	08107843 	.word	0x08107843
 81077b0:	08107843 	.word	0x08107843
 81077b4:	08107843 	.word	0x08107843
 81077b8:	08107843 	.word	0x08107843
 81077bc:	08107843 	.word	0x08107843
 81077c0:	08107843 	.word	0x08107843
 81077c4:	08107843 	.word	0x08107843
 81077c8:	08107843 	.word	0x08107843
 81077cc:	08107843 	.word	0x08107843
 81077d0:	08107843 	.word	0x08107843
 81077d4:	08107835 	.word	0x08107835
 81077d8:	2b40      	cmp	r3, #64	; 0x40
 81077da:	d02e      	beq.n	810783a <UART_SetConfig+0x8aa>
 81077dc:	e031      	b.n	8107842 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 81077de:	f7fc f8cf 	bl	8103980 <HAL_RCC_GetPCLK1Freq>
 81077e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 81077e4:	e033      	b.n	810784e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 81077e6:	f7fc f8e1 	bl	81039ac <HAL_RCC_GetPCLK2Freq>
 81077ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 81077ec:	e02f      	b.n	810784e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81077ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81077f2:	4618      	mov	r0, r3
 81077f4:	f7fd f84c 	bl	8104890 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81077f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81077fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81077fc:	e027      	b.n	810784e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81077fe:	f107 0318 	add.w	r3, r7, #24
 8107802:	4618      	mov	r0, r3
 8107804:	f7fd f998 	bl	8104b38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8107808:	69fb      	ldr	r3, [r7, #28]
 810780a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810780c:	e01f      	b.n	810784e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810780e:	4b2d      	ldr	r3, [pc, #180]	; (81078c4 <UART_SetConfig+0x934>)
 8107810:	681b      	ldr	r3, [r3, #0]
 8107812:	f003 0320 	and.w	r3, r3, #32
 8107816:	2b00      	cmp	r3, #0
 8107818:	d009      	beq.n	810782e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810781a:	4b2a      	ldr	r3, [pc, #168]	; (81078c4 <UART_SetConfig+0x934>)
 810781c:	681b      	ldr	r3, [r3, #0]
 810781e:	08db      	lsrs	r3, r3, #3
 8107820:	f003 0303 	and.w	r3, r3, #3
 8107824:	4a24      	ldr	r2, [pc, #144]	; (81078b8 <UART_SetConfig+0x928>)
 8107826:	fa22 f303 	lsr.w	r3, r2, r3
 810782a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810782c:	e00f      	b.n	810784e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 810782e:	4b22      	ldr	r3, [pc, #136]	; (81078b8 <UART_SetConfig+0x928>)
 8107830:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107832:	e00c      	b.n	810784e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8107834:	4b21      	ldr	r3, [pc, #132]	; (81078bc <UART_SetConfig+0x92c>)
 8107836:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107838:	e009      	b.n	810784e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810783a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810783e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107840:	e005      	b.n	810784e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8107842:	2300      	movs	r3, #0
 8107844:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8107846:	2301      	movs	r3, #1
 8107848:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 810784c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810784e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8107850:	2b00      	cmp	r3, #0
 8107852:	f000 80e7 	beq.w	8107a24 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8107856:	697b      	ldr	r3, [r7, #20]
 8107858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810785a:	4a19      	ldr	r2, [pc, #100]	; (81078c0 <UART_SetConfig+0x930>)
 810785c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8107860:	461a      	mov	r2, r3
 8107862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8107864:	fbb3 f3f2 	udiv	r3, r3, r2
 8107868:	005a      	lsls	r2, r3, #1
 810786a:	697b      	ldr	r3, [r7, #20]
 810786c:	685b      	ldr	r3, [r3, #4]
 810786e:	085b      	lsrs	r3, r3, #1
 8107870:	441a      	add	r2, r3
 8107872:	697b      	ldr	r3, [r7, #20]
 8107874:	685b      	ldr	r3, [r3, #4]
 8107876:	fbb2 f3f3 	udiv	r3, r2, r3
 810787a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810787c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810787e:	2b0f      	cmp	r3, #15
 8107880:	d916      	bls.n	81078b0 <UART_SetConfig+0x920>
 8107882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8107888:	d212      	bcs.n	81078b0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810788a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810788c:	b29b      	uxth	r3, r3
 810788e:	f023 030f 	bic.w	r3, r3, #15
 8107892:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8107894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107896:	085b      	lsrs	r3, r3, #1
 8107898:	b29b      	uxth	r3, r3
 810789a:	f003 0307 	and.w	r3, r3, #7
 810789e:	b29a      	uxth	r2, r3
 81078a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 81078a2:	4313      	orrs	r3, r2
 81078a4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 81078a6:	697b      	ldr	r3, [r7, #20]
 81078a8:	681b      	ldr	r3, [r3, #0]
 81078aa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 81078ac:	60da      	str	r2, [r3, #12]
 81078ae:	e0b9      	b.n	8107a24 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 81078b0:	2301      	movs	r3, #1
 81078b2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 81078b6:	e0b5      	b.n	8107a24 <UART_SetConfig+0xa94>
 81078b8:	03d09000 	.word	0x03d09000
 81078bc:	003d0900 	.word	0x003d0900
 81078c0:	0810e760 	.word	0x0810e760
 81078c4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 81078c8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 81078cc:	2b20      	cmp	r3, #32
 81078ce:	dc49      	bgt.n	8107964 <UART_SetConfig+0x9d4>
 81078d0:	2b00      	cmp	r3, #0
 81078d2:	db7c      	blt.n	81079ce <UART_SetConfig+0xa3e>
 81078d4:	2b20      	cmp	r3, #32
 81078d6:	d87a      	bhi.n	81079ce <UART_SetConfig+0xa3e>
 81078d8:	a201      	add	r2, pc, #4	; (adr r2, 81078e0 <UART_SetConfig+0x950>)
 81078da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81078de:	bf00      	nop
 81078e0:	0810796b 	.word	0x0810796b
 81078e4:	08107973 	.word	0x08107973
 81078e8:	081079cf 	.word	0x081079cf
 81078ec:	081079cf 	.word	0x081079cf
 81078f0:	0810797b 	.word	0x0810797b
 81078f4:	081079cf 	.word	0x081079cf
 81078f8:	081079cf 	.word	0x081079cf
 81078fc:	081079cf 	.word	0x081079cf
 8107900:	0810798b 	.word	0x0810798b
 8107904:	081079cf 	.word	0x081079cf
 8107908:	081079cf 	.word	0x081079cf
 810790c:	081079cf 	.word	0x081079cf
 8107910:	081079cf 	.word	0x081079cf
 8107914:	081079cf 	.word	0x081079cf
 8107918:	081079cf 	.word	0x081079cf
 810791c:	081079cf 	.word	0x081079cf
 8107920:	0810799b 	.word	0x0810799b
 8107924:	081079cf 	.word	0x081079cf
 8107928:	081079cf 	.word	0x081079cf
 810792c:	081079cf 	.word	0x081079cf
 8107930:	081079cf 	.word	0x081079cf
 8107934:	081079cf 	.word	0x081079cf
 8107938:	081079cf 	.word	0x081079cf
 810793c:	081079cf 	.word	0x081079cf
 8107940:	081079cf 	.word	0x081079cf
 8107944:	081079cf 	.word	0x081079cf
 8107948:	081079cf 	.word	0x081079cf
 810794c:	081079cf 	.word	0x081079cf
 8107950:	081079cf 	.word	0x081079cf
 8107954:	081079cf 	.word	0x081079cf
 8107958:	081079cf 	.word	0x081079cf
 810795c:	081079cf 	.word	0x081079cf
 8107960:	081079c1 	.word	0x081079c1
 8107964:	2b40      	cmp	r3, #64	; 0x40
 8107966:	d02e      	beq.n	81079c6 <UART_SetConfig+0xa36>
 8107968:	e031      	b.n	81079ce <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810796a:	f7fc f809 	bl	8103980 <HAL_RCC_GetPCLK1Freq>
 810796e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8107970:	e033      	b.n	81079da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8107972:	f7fc f81b 	bl	81039ac <HAL_RCC_GetPCLK2Freq>
 8107976:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8107978:	e02f      	b.n	81079da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810797a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810797e:	4618      	mov	r0, r3
 8107980:	f7fc ff86 	bl	8104890 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8107984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107986:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107988:	e027      	b.n	81079da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810798a:	f107 0318 	add.w	r3, r7, #24
 810798e:	4618      	mov	r0, r3
 8107990:	f7fd f8d2 	bl	8104b38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8107994:	69fb      	ldr	r3, [r7, #28]
 8107996:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107998:	e01f      	b.n	81079da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810799a:	4b2d      	ldr	r3, [pc, #180]	; (8107a50 <UART_SetConfig+0xac0>)
 810799c:	681b      	ldr	r3, [r3, #0]
 810799e:	f003 0320 	and.w	r3, r3, #32
 81079a2:	2b00      	cmp	r3, #0
 81079a4:	d009      	beq.n	81079ba <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81079a6:	4b2a      	ldr	r3, [pc, #168]	; (8107a50 <UART_SetConfig+0xac0>)
 81079a8:	681b      	ldr	r3, [r3, #0]
 81079aa:	08db      	lsrs	r3, r3, #3
 81079ac:	f003 0303 	and.w	r3, r3, #3
 81079b0:	4a28      	ldr	r2, [pc, #160]	; (8107a54 <UART_SetConfig+0xac4>)
 81079b2:	fa22 f303 	lsr.w	r3, r2, r3
 81079b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81079b8:	e00f      	b.n	81079da <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 81079ba:	4b26      	ldr	r3, [pc, #152]	; (8107a54 <UART_SetConfig+0xac4>)
 81079bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81079be:	e00c      	b.n	81079da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81079c0:	4b25      	ldr	r3, [pc, #148]	; (8107a58 <UART_SetConfig+0xac8>)
 81079c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81079c4:	e009      	b.n	81079da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81079c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81079ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81079cc:	e005      	b.n	81079da <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 81079ce:	2300      	movs	r3, #0
 81079d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 81079d2:	2301      	movs	r3, #1
 81079d4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 81079d8:	bf00      	nop
    }

    if (pclk != 0U)
 81079da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81079dc:	2b00      	cmp	r3, #0
 81079de:	d021      	beq.n	8107a24 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81079e0:	697b      	ldr	r3, [r7, #20]
 81079e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81079e4:	4a1d      	ldr	r2, [pc, #116]	; (8107a5c <UART_SetConfig+0xacc>)
 81079e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81079ea:	461a      	mov	r2, r3
 81079ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81079ee:	fbb3 f2f2 	udiv	r2, r3, r2
 81079f2:	697b      	ldr	r3, [r7, #20]
 81079f4:	685b      	ldr	r3, [r3, #4]
 81079f6:	085b      	lsrs	r3, r3, #1
 81079f8:	441a      	add	r2, r3
 81079fa:	697b      	ldr	r3, [r7, #20]
 81079fc:	685b      	ldr	r3, [r3, #4]
 81079fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8107a02:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8107a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107a06:	2b0f      	cmp	r3, #15
 8107a08:	d909      	bls.n	8107a1e <UART_SetConfig+0xa8e>
 8107a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8107a10:	d205      	bcs.n	8107a1e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8107a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107a14:	b29a      	uxth	r2, r3
 8107a16:	697b      	ldr	r3, [r7, #20]
 8107a18:	681b      	ldr	r3, [r3, #0]
 8107a1a:	60da      	str	r2, [r3, #12]
 8107a1c:	e002      	b.n	8107a24 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8107a1e:	2301      	movs	r3, #1
 8107a20:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8107a24:	697b      	ldr	r3, [r7, #20]
 8107a26:	2201      	movs	r2, #1
 8107a28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8107a2c:	697b      	ldr	r3, [r7, #20]
 8107a2e:	2201      	movs	r2, #1
 8107a30:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8107a34:	697b      	ldr	r3, [r7, #20]
 8107a36:	2200      	movs	r2, #0
 8107a38:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8107a3a:	697b      	ldr	r3, [r7, #20]
 8107a3c:	2200      	movs	r2, #0
 8107a3e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8107a40:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8107a44:	4618      	mov	r0, r3
 8107a46:	3748      	adds	r7, #72	; 0x48
 8107a48:	46bd      	mov	sp, r7
 8107a4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8107a4e:	bf00      	nop
 8107a50:	58024400 	.word	0x58024400
 8107a54:	03d09000 	.word	0x03d09000
 8107a58:	003d0900 	.word	0x003d0900
 8107a5c:	0810e760 	.word	0x0810e760

08107a60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8107a60:	b480      	push	{r7}
 8107a62:	b083      	sub	sp, #12
 8107a64:	af00      	add	r7, sp, #0
 8107a66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8107a68:	687b      	ldr	r3, [r7, #4]
 8107a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107a6c:	f003 0301 	and.w	r3, r3, #1
 8107a70:	2b00      	cmp	r3, #0
 8107a72:	d00a      	beq.n	8107a8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8107a74:	687b      	ldr	r3, [r7, #4]
 8107a76:	681b      	ldr	r3, [r3, #0]
 8107a78:	685b      	ldr	r3, [r3, #4]
 8107a7a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8107a7e:	687b      	ldr	r3, [r7, #4]
 8107a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8107a82:	687b      	ldr	r3, [r7, #4]
 8107a84:	681b      	ldr	r3, [r3, #0]
 8107a86:	430a      	orrs	r2, r1
 8107a88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8107a8a:	687b      	ldr	r3, [r7, #4]
 8107a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107a8e:	f003 0302 	and.w	r3, r3, #2
 8107a92:	2b00      	cmp	r3, #0
 8107a94:	d00a      	beq.n	8107aac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8107a96:	687b      	ldr	r3, [r7, #4]
 8107a98:	681b      	ldr	r3, [r3, #0]
 8107a9a:	685b      	ldr	r3, [r3, #4]
 8107a9c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8107aa0:	687b      	ldr	r3, [r7, #4]
 8107aa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8107aa4:	687b      	ldr	r3, [r7, #4]
 8107aa6:	681b      	ldr	r3, [r3, #0]
 8107aa8:	430a      	orrs	r2, r1
 8107aaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8107aac:	687b      	ldr	r3, [r7, #4]
 8107aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107ab0:	f003 0304 	and.w	r3, r3, #4
 8107ab4:	2b00      	cmp	r3, #0
 8107ab6:	d00a      	beq.n	8107ace <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8107ab8:	687b      	ldr	r3, [r7, #4]
 8107aba:	681b      	ldr	r3, [r3, #0]
 8107abc:	685b      	ldr	r3, [r3, #4]
 8107abe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8107ac2:	687b      	ldr	r3, [r7, #4]
 8107ac4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8107ac6:	687b      	ldr	r3, [r7, #4]
 8107ac8:	681b      	ldr	r3, [r3, #0]
 8107aca:	430a      	orrs	r2, r1
 8107acc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8107ace:	687b      	ldr	r3, [r7, #4]
 8107ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107ad2:	f003 0308 	and.w	r3, r3, #8
 8107ad6:	2b00      	cmp	r3, #0
 8107ad8:	d00a      	beq.n	8107af0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8107ada:	687b      	ldr	r3, [r7, #4]
 8107adc:	681b      	ldr	r3, [r3, #0]
 8107ade:	685b      	ldr	r3, [r3, #4]
 8107ae0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8107ae4:	687b      	ldr	r3, [r7, #4]
 8107ae6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8107ae8:	687b      	ldr	r3, [r7, #4]
 8107aea:	681b      	ldr	r3, [r3, #0]
 8107aec:	430a      	orrs	r2, r1
 8107aee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8107af0:	687b      	ldr	r3, [r7, #4]
 8107af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107af4:	f003 0310 	and.w	r3, r3, #16
 8107af8:	2b00      	cmp	r3, #0
 8107afa:	d00a      	beq.n	8107b12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8107afc:	687b      	ldr	r3, [r7, #4]
 8107afe:	681b      	ldr	r3, [r3, #0]
 8107b00:	689b      	ldr	r3, [r3, #8]
 8107b02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8107b06:	687b      	ldr	r3, [r7, #4]
 8107b08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8107b0a:	687b      	ldr	r3, [r7, #4]
 8107b0c:	681b      	ldr	r3, [r3, #0]
 8107b0e:	430a      	orrs	r2, r1
 8107b10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8107b12:	687b      	ldr	r3, [r7, #4]
 8107b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107b16:	f003 0320 	and.w	r3, r3, #32
 8107b1a:	2b00      	cmp	r3, #0
 8107b1c:	d00a      	beq.n	8107b34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8107b1e:	687b      	ldr	r3, [r7, #4]
 8107b20:	681b      	ldr	r3, [r3, #0]
 8107b22:	689b      	ldr	r3, [r3, #8]
 8107b24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8107b28:	687b      	ldr	r3, [r7, #4]
 8107b2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8107b2c:	687b      	ldr	r3, [r7, #4]
 8107b2e:	681b      	ldr	r3, [r3, #0]
 8107b30:	430a      	orrs	r2, r1
 8107b32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8107b34:	687b      	ldr	r3, [r7, #4]
 8107b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107b3c:	2b00      	cmp	r3, #0
 8107b3e:	d01a      	beq.n	8107b76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8107b40:	687b      	ldr	r3, [r7, #4]
 8107b42:	681b      	ldr	r3, [r3, #0]
 8107b44:	685b      	ldr	r3, [r3, #4]
 8107b46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8107b4a:	687b      	ldr	r3, [r7, #4]
 8107b4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8107b4e:	687b      	ldr	r3, [r7, #4]
 8107b50:	681b      	ldr	r3, [r3, #0]
 8107b52:	430a      	orrs	r2, r1
 8107b54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8107b56:	687b      	ldr	r3, [r7, #4]
 8107b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107b5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8107b5e:	d10a      	bne.n	8107b76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8107b60:	687b      	ldr	r3, [r7, #4]
 8107b62:	681b      	ldr	r3, [r3, #0]
 8107b64:	685b      	ldr	r3, [r3, #4]
 8107b66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8107b6a:	687b      	ldr	r3, [r7, #4]
 8107b6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8107b6e:	687b      	ldr	r3, [r7, #4]
 8107b70:	681b      	ldr	r3, [r3, #0]
 8107b72:	430a      	orrs	r2, r1
 8107b74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8107b76:	687b      	ldr	r3, [r7, #4]
 8107b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8107b7e:	2b00      	cmp	r3, #0
 8107b80:	d00a      	beq.n	8107b98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8107b82:	687b      	ldr	r3, [r7, #4]
 8107b84:	681b      	ldr	r3, [r3, #0]
 8107b86:	685b      	ldr	r3, [r3, #4]
 8107b88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8107b8c:	687b      	ldr	r3, [r7, #4]
 8107b8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8107b90:	687b      	ldr	r3, [r7, #4]
 8107b92:	681b      	ldr	r3, [r3, #0]
 8107b94:	430a      	orrs	r2, r1
 8107b96:	605a      	str	r2, [r3, #4]
  }
}
 8107b98:	bf00      	nop
 8107b9a:	370c      	adds	r7, #12
 8107b9c:	46bd      	mov	sp, r7
 8107b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107ba2:	4770      	bx	lr

08107ba4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8107ba4:	b580      	push	{r7, lr}
 8107ba6:	b086      	sub	sp, #24
 8107ba8:	af02      	add	r7, sp, #8
 8107baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8107bac:	687b      	ldr	r3, [r7, #4]
 8107bae:	2200      	movs	r2, #0
 8107bb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8107bb4:	f7fa fc40 	bl	8102438 <HAL_GetTick>
 8107bb8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8107bba:	687b      	ldr	r3, [r7, #4]
 8107bbc:	681b      	ldr	r3, [r3, #0]
 8107bbe:	681b      	ldr	r3, [r3, #0]
 8107bc0:	f003 0308 	and.w	r3, r3, #8
 8107bc4:	2b08      	cmp	r3, #8
 8107bc6:	d10e      	bne.n	8107be6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8107bc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8107bcc:	9300      	str	r3, [sp, #0]
 8107bce:	68fb      	ldr	r3, [r7, #12]
 8107bd0:	2200      	movs	r2, #0
 8107bd2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8107bd6:	6878      	ldr	r0, [r7, #4]
 8107bd8:	f000 f82f 	bl	8107c3a <UART_WaitOnFlagUntilTimeout>
 8107bdc:	4603      	mov	r3, r0
 8107bde:	2b00      	cmp	r3, #0
 8107be0:	d001      	beq.n	8107be6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8107be2:	2303      	movs	r3, #3
 8107be4:	e025      	b.n	8107c32 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8107be6:	687b      	ldr	r3, [r7, #4]
 8107be8:	681b      	ldr	r3, [r3, #0]
 8107bea:	681b      	ldr	r3, [r3, #0]
 8107bec:	f003 0304 	and.w	r3, r3, #4
 8107bf0:	2b04      	cmp	r3, #4
 8107bf2:	d10e      	bne.n	8107c12 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8107bf4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8107bf8:	9300      	str	r3, [sp, #0]
 8107bfa:	68fb      	ldr	r3, [r7, #12]
 8107bfc:	2200      	movs	r2, #0
 8107bfe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8107c02:	6878      	ldr	r0, [r7, #4]
 8107c04:	f000 f819 	bl	8107c3a <UART_WaitOnFlagUntilTimeout>
 8107c08:	4603      	mov	r3, r0
 8107c0a:	2b00      	cmp	r3, #0
 8107c0c:	d001      	beq.n	8107c12 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8107c0e:	2303      	movs	r3, #3
 8107c10:	e00f      	b.n	8107c32 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8107c12:	687b      	ldr	r3, [r7, #4]
 8107c14:	2220      	movs	r2, #32
 8107c16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8107c1a:	687b      	ldr	r3, [r7, #4]
 8107c1c:	2220      	movs	r2, #32
 8107c1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8107c22:	687b      	ldr	r3, [r7, #4]
 8107c24:	2200      	movs	r2, #0
 8107c26:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8107c28:	687b      	ldr	r3, [r7, #4]
 8107c2a:	2200      	movs	r2, #0
 8107c2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8107c30:	2300      	movs	r3, #0
}
 8107c32:	4618      	mov	r0, r3
 8107c34:	3710      	adds	r7, #16
 8107c36:	46bd      	mov	sp, r7
 8107c38:	bd80      	pop	{r7, pc}

08107c3a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8107c3a:	b580      	push	{r7, lr}
 8107c3c:	b09c      	sub	sp, #112	; 0x70
 8107c3e:	af00      	add	r7, sp, #0
 8107c40:	60f8      	str	r0, [r7, #12]
 8107c42:	60b9      	str	r1, [r7, #8]
 8107c44:	603b      	str	r3, [r7, #0]
 8107c46:	4613      	mov	r3, r2
 8107c48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8107c4a:	e0a9      	b.n	8107da0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8107c4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8107c4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8107c52:	f000 80a5 	beq.w	8107da0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8107c56:	f7fa fbef 	bl	8102438 <HAL_GetTick>
 8107c5a:	4602      	mov	r2, r0
 8107c5c:	683b      	ldr	r3, [r7, #0]
 8107c5e:	1ad3      	subs	r3, r2, r3
 8107c60:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8107c62:	429a      	cmp	r2, r3
 8107c64:	d302      	bcc.n	8107c6c <UART_WaitOnFlagUntilTimeout+0x32>
 8107c66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8107c68:	2b00      	cmp	r3, #0
 8107c6a:	d140      	bne.n	8107cee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8107c6c:	68fb      	ldr	r3, [r7, #12]
 8107c6e:	681b      	ldr	r3, [r3, #0]
 8107c70:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107c72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8107c74:	e853 3f00 	ldrex	r3, [r3]
 8107c78:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8107c7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8107c7c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8107c80:	667b      	str	r3, [r7, #100]	; 0x64
 8107c82:	68fb      	ldr	r3, [r7, #12]
 8107c84:	681b      	ldr	r3, [r3, #0]
 8107c86:	461a      	mov	r2, r3
 8107c88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8107c8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8107c8c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107c8e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8107c90:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8107c92:	e841 2300 	strex	r3, r2, [r1]
 8107c96:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8107c98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8107c9a:	2b00      	cmp	r3, #0
 8107c9c:	d1e6      	bne.n	8107c6c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8107c9e:	68fb      	ldr	r3, [r7, #12]
 8107ca0:	681b      	ldr	r3, [r3, #0]
 8107ca2:	3308      	adds	r3, #8
 8107ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8107ca8:	e853 3f00 	ldrex	r3, [r3]
 8107cac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8107cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107cb0:	f023 0301 	bic.w	r3, r3, #1
 8107cb4:	663b      	str	r3, [r7, #96]	; 0x60
 8107cb6:	68fb      	ldr	r3, [r7, #12]
 8107cb8:	681b      	ldr	r3, [r3, #0]
 8107cba:	3308      	adds	r3, #8
 8107cbc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8107cbe:	64ba      	str	r2, [r7, #72]	; 0x48
 8107cc0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107cc2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8107cc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8107cc6:	e841 2300 	strex	r3, r2, [r1]
 8107cca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8107ccc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8107cce:	2b00      	cmp	r3, #0
 8107cd0:	d1e5      	bne.n	8107c9e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8107cd2:	68fb      	ldr	r3, [r7, #12]
 8107cd4:	2220      	movs	r2, #32
 8107cd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8107cda:	68fb      	ldr	r3, [r7, #12]
 8107cdc:	2220      	movs	r2, #32
 8107cde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8107ce2:	68fb      	ldr	r3, [r7, #12]
 8107ce4:	2200      	movs	r2, #0
 8107ce6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8107cea:	2303      	movs	r3, #3
 8107cec:	e069      	b.n	8107dc2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8107cee:	68fb      	ldr	r3, [r7, #12]
 8107cf0:	681b      	ldr	r3, [r3, #0]
 8107cf2:	681b      	ldr	r3, [r3, #0]
 8107cf4:	f003 0304 	and.w	r3, r3, #4
 8107cf8:	2b00      	cmp	r3, #0
 8107cfa:	d051      	beq.n	8107da0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8107cfc:	68fb      	ldr	r3, [r7, #12]
 8107cfe:	681b      	ldr	r3, [r3, #0]
 8107d00:	69db      	ldr	r3, [r3, #28]
 8107d02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8107d06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8107d0a:	d149      	bne.n	8107da0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8107d0c:	68fb      	ldr	r3, [r7, #12]
 8107d0e:	681b      	ldr	r3, [r3, #0]
 8107d10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8107d14:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8107d16:	68fb      	ldr	r3, [r7, #12]
 8107d18:	681b      	ldr	r3, [r3, #0]
 8107d1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107d1e:	e853 3f00 	ldrex	r3, [r3]
 8107d22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8107d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8107d26:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8107d2a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8107d2c:	68fb      	ldr	r3, [r7, #12]
 8107d2e:	681b      	ldr	r3, [r3, #0]
 8107d30:	461a      	mov	r2, r3
 8107d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8107d34:	637b      	str	r3, [r7, #52]	; 0x34
 8107d36:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107d38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8107d3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8107d3c:	e841 2300 	strex	r3, r2, [r1]
 8107d40:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8107d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107d44:	2b00      	cmp	r3, #0
 8107d46:	d1e6      	bne.n	8107d16 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8107d48:	68fb      	ldr	r3, [r7, #12]
 8107d4a:	681b      	ldr	r3, [r3, #0]
 8107d4c:	3308      	adds	r3, #8
 8107d4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107d50:	697b      	ldr	r3, [r7, #20]
 8107d52:	e853 3f00 	ldrex	r3, [r3]
 8107d56:	613b      	str	r3, [r7, #16]
   return(result);
 8107d58:	693b      	ldr	r3, [r7, #16]
 8107d5a:	f023 0301 	bic.w	r3, r3, #1
 8107d5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8107d60:	68fb      	ldr	r3, [r7, #12]
 8107d62:	681b      	ldr	r3, [r3, #0]
 8107d64:	3308      	adds	r3, #8
 8107d66:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8107d68:	623a      	str	r2, [r7, #32]
 8107d6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107d6c:	69f9      	ldr	r1, [r7, #28]
 8107d6e:	6a3a      	ldr	r2, [r7, #32]
 8107d70:	e841 2300 	strex	r3, r2, [r1]
 8107d74:	61bb      	str	r3, [r7, #24]
   return(result);
 8107d76:	69bb      	ldr	r3, [r7, #24]
 8107d78:	2b00      	cmp	r3, #0
 8107d7a:	d1e5      	bne.n	8107d48 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8107d7c:	68fb      	ldr	r3, [r7, #12]
 8107d7e:	2220      	movs	r2, #32
 8107d80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8107d84:	68fb      	ldr	r3, [r7, #12]
 8107d86:	2220      	movs	r2, #32
 8107d88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8107d8c:	68fb      	ldr	r3, [r7, #12]
 8107d8e:	2220      	movs	r2, #32
 8107d90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8107d94:	68fb      	ldr	r3, [r7, #12]
 8107d96:	2200      	movs	r2, #0
 8107d98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8107d9c:	2303      	movs	r3, #3
 8107d9e:	e010      	b.n	8107dc2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8107da0:	68fb      	ldr	r3, [r7, #12]
 8107da2:	681b      	ldr	r3, [r3, #0]
 8107da4:	69da      	ldr	r2, [r3, #28]
 8107da6:	68bb      	ldr	r3, [r7, #8]
 8107da8:	4013      	ands	r3, r2
 8107daa:	68ba      	ldr	r2, [r7, #8]
 8107dac:	429a      	cmp	r2, r3
 8107dae:	bf0c      	ite	eq
 8107db0:	2301      	moveq	r3, #1
 8107db2:	2300      	movne	r3, #0
 8107db4:	b2db      	uxtb	r3, r3
 8107db6:	461a      	mov	r2, r3
 8107db8:	79fb      	ldrb	r3, [r7, #7]
 8107dba:	429a      	cmp	r2, r3
 8107dbc:	f43f af46 	beq.w	8107c4c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8107dc0:	2300      	movs	r3, #0
}
 8107dc2:	4618      	mov	r0, r3
 8107dc4:	3770      	adds	r7, #112	; 0x70
 8107dc6:	46bd      	mov	sp, r7
 8107dc8:	bd80      	pop	{r7, pc}
	...

08107dcc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8107dcc:	b480      	push	{r7}
 8107dce:	b0a3      	sub	sp, #140	; 0x8c
 8107dd0:	af00      	add	r7, sp, #0
 8107dd2:	60f8      	str	r0, [r7, #12]
 8107dd4:	60b9      	str	r1, [r7, #8]
 8107dd6:	4613      	mov	r3, r2
 8107dd8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8107dda:	68fb      	ldr	r3, [r7, #12]
 8107ddc:	68ba      	ldr	r2, [r7, #8]
 8107dde:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8107de0:	68fb      	ldr	r3, [r7, #12]
 8107de2:	88fa      	ldrh	r2, [r7, #6]
 8107de4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8107de8:	68fb      	ldr	r3, [r7, #12]
 8107dea:	88fa      	ldrh	r2, [r7, #6]
 8107dec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8107df0:	68fb      	ldr	r3, [r7, #12]
 8107df2:	2200      	movs	r2, #0
 8107df4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8107df6:	68fb      	ldr	r3, [r7, #12]
 8107df8:	689b      	ldr	r3, [r3, #8]
 8107dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8107dfe:	d10e      	bne.n	8107e1e <UART_Start_Receive_IT+0x52>
 8107e00:	68fb      	ldr	r3, [r7, #12]
 8107e02:	691b      	ldr	r3, [r3, #16]
 8107e04:	2b00      	cmp	r3, #0
 8107e06:	d105      	bne.n	8107e14 <UART_Start_Receive_IT+0x48>
 8107e08:	68fb      	ldr	r3, [r7, #12]
 8107e0a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8107e0e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8107e12:	e02d      	b.n	8107e70 <UART_Start_Receive_IT+0xa4>
 8107e14:	68fb      	ldr	r3, [r7, #12]
 8107e16:	22ff      	movs	r2, #255	; 0xff
 8107e18:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8107e1c:	e028      	b.n	8107e70 <UART_Start_Receive_IT+0xa4>
 8107e1e:	68fb      	ldr	r3, [r7, #12]
 8107e20:	689b      	ldr	r3, [r3, #8]
 8107e22:	2b00      	cmp	r3, #0
 8107e24:	d10d      	bne.n	8107e42 <UART_Start_Receive_IT+0x76>
 8107e26:	68fb      	ldr	r3, [r7, #12]
 8107e28:	691b      	ldr	r3, [r3, #16]
 8107e2a:	2b00      	cmp	r3, #0
 8107e2c:	d104      	bne.n	8107e38 <UART_Start_Receive_IT+0x6c>
 8107e2e:	68fb      	ldr	r3, [r7, #12]
 8107e30:	22ff      	movs	r2, #255	; 0xff
 8107e32:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8107e36:	e01b      	b.n	8107e70 <UART_Start_Receive_IT+0xa4>
 8107e38:	68fb      	ldr	r3, [r7, #12]
 8107e3a:	227f      	movs	r2, #127	; 0x7f
 8107e3c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8107e40:	e016      	b.n	8107e70 <UART_Start_Receive_IT+0xa4>
 8107e42:	68fb      	ldr	r3, [r7, #12]
 8107e44:	689b      	ldr	r3, [r3, #8]
 8107e46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8107e4a:	d10d      	bne.n	8107e68 <UART_Start_Receive_IT+0x9c>
 8107e4c:	68fb      	ldr	r3, [r7, #12]
 8107e4e:	691b      	ldr	r3, [r3, #16]
 8107e50:	2b00      	cmp	r3, #0
 8107e52:	d104      	bne.n	8107e5e <UART_Start_Receive_IT+0x92>
 8107e54:	68fb      	ldr	r3, [r7, #12]
 8107e56:	227f      	movs	r2, #127	; 0x7f
 8107e58:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8107e5c:	e008      	b.n	8107e70 <UART_Start_Receive_IT+0xa4>
 8107e5e:	68fb      	ldr	r3, [r7, #12]
 8107e60:	223f      	movs	r2, #63	; 0x3f
 8107e62:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8107e66:	e003      	b.n	8107e70 <UART_Start_Receive_IT+0xa4>
 8107e68:	68fb      	ldr	r3, [r7, #12]
 8107e6a:	2200      	movs	r2, #0
 8107e6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8107e70:	68fb      	ldr	r3, [r7, #12]
 8107e72:	2200      	movs	r2, #0
 8107e74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8107e78:	68fb      	ldr	r3, [r7, #12]
 8107e7a:	2222      	movs	r2, #34	; 0x22
 8107e7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8107e80:	68fb      	ldr	r3, [r7, #12]
 8107e82:	681b      	ldr	r3, [r3, #0]
 8107e84:	3308      	adds	r3, #8
 8107e86:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107e88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8107e8a:	e853 3f00 	ldrex	r3, [r3]
 8107e8e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8107e90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8107e92:	f043 0301 	orr.w	r3, r3, #1
 8107e96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8107e9a:	68fb      	ldr	r3, [r7, #12]
 8107e9c:	681b      	ldr	r3, [r3, #0]
 8107e9e:	3308      	adds	r3, #8
 8107ea0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8107ea4:	673a      	str	r2, [r7, #112]	; 0x70
 8107ea6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107ea8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8107eaa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8107eac:	e841 2300 	strex	r3, r2, [r1]
 8107eb0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8107eb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8107eb4:	2b00      	cmp	r3, #0
 8107eb6:	d1e3      	bne.n	8107e80 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8107eb8:	68fb      	ldr	r3, [r7, #12]
 8107eba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8107ebc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107ec0:	d153      	bne.n	8107f6a <UART_Start_Receive_IT+0x19e>
 8107ec2:	68fb      	ldr	r3, [r7, #12]
 8107ec4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8107ec8:	88fa      	ldrh	r2, [r7, #6]
 8107eca:	429a      	cmp	r2, r3
 8107ecc:	d34d      	bcc.n	8107f6a <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8107ece:	68fb      	ldr	r3, [r7, #12]
 8107ed0:	689b      	ldr	r3, [r3, #8]
 8107ed2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8107ed6:	d107      	bne.n	8107ee8 <UART_Start_Receive_IT+0x11c>
 8107ed8:	68fb      	ldr	r3, [r7, #12]
 8107eda:	691b      	ldr	r3, [r3, #16]
 8107edc:	2b00      	cmp	r3, #0
 8107ede:	d103      	bne.n	8107ee8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8107ee0:	68fb      	ldr	r3, [r7, #12]
 8107ee2:	4a4b      	ldr	r2, [pc, #300]	; (8108010 <UART_Start_Receive_IT+0x244>)
 8107ee4:	671a      	str	r2, [r3, #112]	; 0x70
 8107ee6:	e002      	b.n	8107eee <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8107ee8:	68fb      	ldr	r3, [r7, #12]
 8107eea:	4a4a      	ldr	r2, [pc, #296]	; (8108014 <UART_Start_Receive_IT+0x248>)
 8107eec:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8107eee:	68fb      	ldr	r3, [r7, #12]
 8107ef0:	2200      	movs	r2, #0
 8107ef2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8107ef6:	68fb      	ldr	r3, [r7, #12]
 8107ef8:	691b      	ldr	r3, [r3, #16]
 8107efa:	2b00      	cmp	r3, #0
 8107efc:	d01a      	beq.n	8107f34 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8107efe:	68fb      	ldr	r3, [r7, #12]
 8107f00:	681b      	ldr	r3, [r3, #0]
 8107f02:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107f04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8107f06:	e853 3f00 	ldrex	r3, [r3]
 8107f0a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8107f0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8107f0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8107f12:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8107f16:	68fb      	ldr	r3, [r7, #12]
 8107f18:	681b      	ldr	r3, [r3, #0]
 8107f1a:	461a      	mov	r2, r3
 8107f1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8107f20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8107f22:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107f24:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8107f26:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8107f28:	e841 2300 	strex	r3, r2, [r1]
 8107f2c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8107f2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8107f30:	2b00      	cmp	r3, #0
 8107f32:	d1e4      	bne.n	8107efe <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8107f34:	68fb      	ldr	r3, [r7, #12]
 8107f36:	681b      	ldr	r3, [r3, #0]
 8107f38:	3308      	adds	r3, #8
 8107f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8107f3e:	e853 3f00 	ldrex	r3, [r3]
 8107f42:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8107f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107f46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8107f4a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8107f4c:	68fb      	ldr	r3, [r7, #12]
 8107f4e:	681b      	ldr	r3, [r3, #0]
 8107f50:	3308      	adds	r3, #8
 8107f52:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8107f54:	64ba      	str	r2, [r7, #72]	; 0x48
 8107f56:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107f58:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8107f5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8107f5c:	e841 2300 	strex	r3, r2, [r1]
 8107f60:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8107f62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8107f64:	2b00      	cmp	r3, #0
 8107f66:	d1e5      	bne.n	8107f34 <UART_Start_Receive_IT+0x168>
 8107f68:	e04a      	b.n	8108000 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8107f6a:	68fb      	ldr	r3, [r7, #12]
 8107f6c:	689b      	ldr	r3, [r3, #8]
 8107f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8107f72:	d107      	bne.n	8107f84 <UART_Start_Receive_IT+0x1b8>
 8107f74:	68fb      	ldr	r3, [r7, #12]
 8107f76:	691b      	ldr	r3, [r3, #16]
 8107f78:	2b00      	cmp	r3, #0
 8107f7a:	d103      	bne.n	8107f84 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8107f7c:	68fb      	ldr	r3, [r7, #12]
 8107f7e:	4a26      	ldr	r2, [pc, #152]	; (8108018 <UART_Start_Receive_IT+0x24c>)
 8107f80:	671a      	str	r2, [r3, #112]	; 0x70
 8107f82:	e002      	b.n	8107f8a <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8107f84:	68fb      	ldr	r3, [r7, #12]
 8107f86:	4a25      	ldr	r2, [pc, #148]	; (810801c <UART_Start_Receive_IT+0x250>)
 8107f88:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8107f8a:	68fb      	ldr	r3, [r7, #12]
 8107f8c:	2200      	movs	r2, #0
 8107f8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8107f92:	68fb      	ldr	r3, [r7, #12]
 8107f94:	691b      	ldr	r3, [r3, #16]
 8107f96:	2b00      	cmp	r3, #0
 8107f98:	d019      	beq.n	8107fce <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8107f9a:	68fb      	ldr	r3, [r7, #12]
 8107f9c:	681b      	ldr	r3, [r3, #0]
 8107f9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107fa2:	e853 3f00 	ldrex	r3, [r3]
 8107fa6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8107fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8107faa:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8107fae:	677b      	str	r3, [r7, #116]	; 0x74
 8107fb0:	68fb      	ldr	r3, [r7, #12]
 8107fb2:	681b      	ldr	r3, [r3, #0]
 8107fb4:	461a      	mov	r2, r3
 8107fb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8107fb8:	637b      	str	r3, [r7, #52]	; 0x34
 8107fba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107fbc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8107fbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8107fc0:	e841 2300 	strex	r3, r2, [r1]
 8107fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8107fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107fc8:	2b00      	cmp	r3, #0
 8107fca:	d1e6      	bne.n	8107f9a <UART_Start_Receive_IT+0x1ce>
 8107fcc:	e018      	b.n	8108000 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8107fce:	68fb      	ldr	r3, [r7, #12]
 8107fd0:	681b      	ldr	r3, [r3, #0]
 8107fd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107fd4:	697b      	ldr	r3, [r7, #20]
 8107fd6:	e853 3f00 	ldrex	r3, [r3]
 8107fda:	613b      	str	r3, [r7, #16]
   return(result);
 8107fdc:	693b      	ldr	r3, [r7, #16]
 8107fde:	f043 0320 	orr.w	r3, r3, #32
 8107fe2:	67bb      	str	r3, [r7, #120]	; 0x78
 8107fe4:	68fb      	ldr	r3, [r7, #12]
 8107fe6:	681b      	ldr	r3, [r3, #0]
 8107fe8:	461a      	mov	r2, r3
 8107fea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8107fec:	623b      	str	r3, [r7, #32]
 8107fee:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107ff0:	69f9      	ldr	r1, [r7, #28]
 8107ff2:	6a3a      	ldr	r2, [r7, #32]
 8107ff4:	e841 2300 	strex	r3, r2, [r1]
 8107ff8:	61bb      	str	r3, [r7, #24]
   return(result);
 8107ffa:	69bb      	ldr	r3, [r7, #24]
 8107ffc:	2b00      	cmp	r3, #0
 8107ffe:	d1e6      	bne.n	8107fce <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 8108000:	2300      	movs	r3, #0
}
 8108002:	4618      	mov	r0, r3
 8108004:	378c      	adds	r7, #140	; 0x8c
 8108006:	46bd      	mov	sp, r7
 8108008:	f85d 7b04 	ldr.w	r7, [sp], #4
 810800c:	4770      	bx	lr
 810800e:	bf00      	nop
 8108010:	08108a6d 	.word	0x08108a6d
 8108014:	08108775 	.word	0x08108775
 8108018:	08108613 	.word	0x08108613
 810801c:	081084b3 	.word	0x081084b3

08108020 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8108020:	b480      	push	{r7}
 8108022:	b095      	sub	sp, #84	; 0x54
 8108024:	af00      	add	r7, sp, #0
 8108026:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8108028:	687b      	ldr	r3, [r7, #4]
 810802a:	681b      	ldr	r3, [r3, #0]
 810802c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810802e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8108030:	e853 3f00 	ldrex	r3, [r3]
 8108034:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8108036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108038:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 810803c:	64fb      	str	r3, [r7, #76]	; 0x4c
 810803e:	687b      	ldr	r3, [r7, #4]
 8108040:	681b      	ldr	r3, [r3, #0]
 8108042:	461a      	mov	r2, r3
 8108044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8108046:	643b      	str	r3, [r7, #64]	; 0x40
 8108048:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810804a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 810804c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 810804e:	e841 2300 	strex	r3, r2, [r1]
 8108052:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8108054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108056:	2b00      	cmp	r3, #0
 8108058:	d1e6      	bne.n	8108028 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810805a:	687b      	ldr	r3, [r7, #4]
 810805c:	681b      	ldr	r3, [r3, #0]
 810805e:	3308      	adds	r3, #8
 8108060:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108062:	6a3b      	ldr	r3, [r7, #32]
 8108064:	e853 3f00 	ldrex	r3, [r3]
 8108068:	61fb      	str	r3, [r7, #28]
   return(result);
 810806a:	69fb      	ldr	r3, [r7, #28]
 810806c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8108070:	f023 0301 	bic.w	r3, r3, #1
 8108074:	64bb      	str	r3, [r7, #72]	; 0x48
 8108076:	687b      	ldr	r3, [r7, #4]
 8108078:	681b      	ldr	r3, [r3, #0]
 810807a:	3308      	adds	r3, #8
 810807c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 810807e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8108080:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108082:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8108084:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8108086:	e841 2300 	strex	r3, r2, [r1]
 810808a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 810808c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810808e:	2b00      	cmp	r3, #0
 8108090:	d1e3      	bne.n	810805a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8108092:	687b      	ldr	r3, [r7, #4]
 8108094:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8108096:	2b01      	cmp	r3, #1
 8108098:	d118      	bne.n	81080cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810809a:	687b      	ldr	r3, [r7, #4]
 810809c:	681b      	ldr	r3, [r3, #0]
 810809e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81080a0:	68fb      	ldr	r3, [r7, #12]
 81080a2:	e853 3f00 	ldrex	r3, [r3]
 81080a6:	60bb      	str	r3, [r7, #8]
   return(result);
 81080a8:	68bb      	ldr	r3, [r7, #8]
 81080aa:	f023 0310 	bic.w	r3, r3, #16
 81080ae:	647b      	str	r3, [r7, #68]	; 0x44
 81080b0:	687b      	ldr	r3, [r7, #4]
 81080b2:	681b      	ldr	r3, [r3, #0]
 81080b4:	461a      	mov	r2, r3
 81080b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81080b8:	61bb      	str	r3, [r7, #24]
 81080ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81080bc:	6979      	ldr	r1, [r7, #20]
 81080be:	69ba      	ldr	r2, [r7, #24]
 81080c0:	e841 2300 	strex	r3, r2, [r1]
 81080c4:	613b      	str	r3, [r7, #16]
   return(result);
 81080c6:	693b      	ldr	r3, [r7, #16]
 81080c8:	2b00      	cmp	r3, #0
 81080ca:	d1e6      	bne.n	810809a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 81080cc:	687b      	ldr	r3, [r7, #4]
 81080ce:	2220      	movs	r2, #32
 81080d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 81080d4:	687b      	ldr	r3, [r7, #4]
 81080d6:	2200      	movs	r2, #0
 81080d8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 81080da:	687b      	ldr	r3, [r7, #4]
 81080dc:	2200      	movs	r2, #0
 81080de:	671a      	str	r2, [r3, #112]	; 0x70
}
 81080e0:	bf00      	nop
 81080e2:	3754      	adds	r7, #84	; 0x54
 81080e4:	46bd      	mov	sp, r7
 81080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81080ea:	4770      	bx	lr

081080ec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 81080ec:	b580      	push	{r7, lr}
 81080ee:	b084      	sub	sp, #16
 81080f0:	af00      	add	r7, sp, #0
 81080f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 81080f4:	687b      	ldr	r3, [r7, #4]
 81080f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81080f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 81080fa:	68fb      	ldr	r3, [r7, #12]
 81080fc:	2200      	movs	r2, #0
 81080fe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8108102:	68fb      	ldr	r3, [r7, #12]
 8108104:	2200      	movs	r2, #0
 8108106:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 810810a:	68f8      	ldr	r0, [r7, #12]
 810810c:	f7fe ff2a 	bl	8106f64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8108110:	bf00      	nop
 8108112:	3710      	adds	r7, #16
 8108114:	46bd      	mov	sp, r7
 8108116:	bd80      	pop	{r7, pc}

08108118 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8108118:	b480      	push	{r7}
 810811a:	b08f      	sub	sp, #60	; 0x3c
 810811c:	af00      	add	r7, sp, #0
 810811e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8108120:	687b      	ldr	r3, [r7, #4]
 8108122:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8108126:	2b21      	cmp	r3, #33	; 0x21
 8108128:	d14c      	bne.n	81081c4 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 810812a:	687b      	ldr	r3, [r7, #4]
 810812c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8108130:	b29b      	uxth	r3, r3
 8108132:	2b00      	cmp	r3, #0
 8108134:	d132      	bne.n	810819c <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8108136:	687b      	ldr	r3, [r7, #4]
 8108138:	681b      	ldr	r3, [r3, #0]
 810813a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810813c:	6a3b      	ldr	r3, [r7, #32]
 810813e:	e853 3f00 	ldrex	r3, [r3]
 8108142:	61fb      	str	r3, [r7, #28]
   return(result);
 8108144:	69fb      	ldr	r3, [r7, #28]
 8108146:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 810814a:	637b      	str	r3, [r7, #52]	; 0x34
 810814c:	687b      	ldr	r3, [r7, #4]
 810814e:	681b      	ldr	r3, [r3, #0]
 8108150:	461a      	mov	r2, r3
 8108152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8108154:	62fb      	str	r3, [r7, #44]	; 0x2c
 8108156:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108158:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810815a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810815c:	e841 2300 	strex	r3, r2, [r1]
 8108160:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8108162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108164:	2b00      	cmp	r3, #0
 8108166:	d1e6      	bne.n	8108136 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8108168:	687b      	ldr	r3, [r7, #4]
 810816a:	681b      	ldr	r3, [r3, #0]
 810816c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810816e:	68fb      	ldr	r3, [r7, #12]
 8108170:	e853 3f00 	ldrex	r3, [r3]
 8108174:	60bb      	str	r3, [r7, #8]
   return(result);
 8108176:	68bb      	ldr	r3, [r7, #8]
 8108178:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810817c:	633b      	str	r3, [r7, #48]	; 0x30
 810817e:	687b      	ldr	r3, [r7, #4]
 8108180:	681b      	ldr	r3, [r3, #0]
 8108182:	461a      	mov	r2, r3
 8108184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108186:	61bb      	str	r3, [r7, #24]
 8108188:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810818a:	6979      	ldr	r1, [r7, #20]
 810818c:	69ba      	ldr	r2, [r7, #24]
 810818e:	e841 2300 	strex	r3, r2, [r1]
 8108192:	613b      	str	r3, [r7, #16]
   return(result);
 8108194:	693b      	ldr	r3, [r7, #16]
 8108196:	2b00      	cmp	r3, #0
 8108198:	d1e6      	bne.n	8108168 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 810819a:	e013      	b.n	81081c4 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 810819c:	687b      	ldr	r3, [r7, #4]
 810819e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81081a0:	781a      	ldrb	r2, [r3, #0]
 81081a2:	687b      	ldr	r3, [r7, #4]
 81081a4:	681b      	ldr	r3, [r3, #0]
 81081a6:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 81081a8:	687b      	ldr	r3, [r7, #4]
 81081aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81081ac:	1c5a      	adds	r2, r3, #1
 81081ae:	687b      	ldr	r3, [r7, #4]
 81081b0:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 81081b2:	687b      	ldr	r3, [r7, #4]
 81081b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 81081b8:	b29b      	uxth	r3, r3
 81081ba:	3b01      	subs	r3, #1
 81081bc:	b29a      	uxth	r2, r3
 81081be:	687b      	ldr	r3, [r7, #4]
 81081c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 81081c4:	bf00      	nop
 81081c6:	373c      	adds	r7, #60	; 0x3c
 81081c8:	46bd      	mov	sp, r7
 81081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81081ce:	4770      	bx	lr

081081d0 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 81081d0:	b480      	push	{r7}
 81081d2:	b091      	sub	sp, #68	; 0x44
 81081d4:	af00      	add	r7, sp, #0
 81081d6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 81081d8:	687b      	ldr	r3, [r7, #4]
 81081da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81081de:	2b21      	cmp	r3, #33	; 0x21
 81081e0:	d151      	bne.n	8108286 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 81081e2:	687b      	ldr	r3, [r7, #4]
 81081e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 81081e8:	b29b      	uxth	r3, r3
 81081ea:	2b00      	cmp	r3, #0
 81081ec:	d132      	bne.n	8108254 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 81081ee:	687b      	ldr	r3, [r7, #4]
 81081f0:	681b      	ldr	r3, [r3, #0]
 81081f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81081f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81081f6:	e853 3f00 	ldrex	r3, [r3]
 81081fa:	623b      	str	r3, [r7, #32]
   return(result);
 81081fc:	6a3b      	ldr	r3, [r7, #32]
 81081fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8108202:	63bb      	str	r3, [r7, #56]	; 0x38
 8108204:	687b      	ldr	r3, [r7, #4]
 8108206:	681b      	ldr	r3, [r3, #0]
 8108208:	461a      	mov	r2, r3
 810820a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810820c:	633b      	str	r3, [r7, #48]	; 0x30
 810820e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108210:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8108212:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8108214:	e841 2300 	strex	r3, r2, [r1]
 8108218:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 810821a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810821c:	2b00      	cmp	r3, #0
 810821e:	d1e6      	bne.n	81081ee <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8108220:	687b      	ldr	r3, [r7, #4]
 8108222:	681b      	ldr	r3, [r3, #0]
 8108224:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108226:	693b      	ldr	r3, [r7, #16]
 8108228:	e853 3f00 	ldrex	r3, [r3]
 810822c:	60fb      	str	r3, [r7, #12]
   return(result);
 810822e:	68fb      	ldr	r3, [r7, #12]
 8108230:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8108234:	637b      	str	r3, [r7, #52]	; 0x34
 8108236:	687b      	ldr	r3, [r7, #4]
 8108238:	681b      	ldr	r3, [r3, #0]
 810823a:	461a      	mov	r2, r3
 810823c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810823e:	61fb      	str	r3, [r7, #28]
 8108240:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108242:	69b9      	ldr	r1, [r7, #24]
 8108244:	69fa      	ldr	r2, [r7, #28]
 8108246:	e841 2300 	strex	r3, r2, [r1]
 810824a:	617b      	str	r3, [r7, #20]
   return(result);
 810824c:	697b      	ldr	r3, [r7, #20]
 810824e:	2b00      	cmp	r3, #0
 8108250:	d1e6      	bne.n	8108220 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8108252:	e018      	b.n	8108286 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8108254:	687b      	ldr	r3, [r7, #4]
 8108256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8108258:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 810825a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810825c:	881b      	ldrh	r3, [r3, #0]
 810825e:	461a      	mov	r2, r3
 8108260:	687b      	ldr	r3, [r7, #4]
 8108262:	681b      	ldr	r3, [r3, #0]
 8108264:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8108268:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 810826a:	687b      	ldr	r3, [r7, #4]
 810826c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810826e:	1c9a      	adds	r2, r3, #2
 8108270:	687b      	ldr	r3, [r7, #4]
 8108272:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8108274:	687b      	ldr	r3, [r7, #4]
 8108276:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 810827a:	b29b      	uxth	r3, r3
 810827c:	3b01      	subs	r3, #1
 810827e:	b29a      	uxth	r2, r3
 8108280:	687b      	ldr	r3, [r7, #4]
 8108282:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8108286:	bf00      	nop
 8108288:	3744      	adds	r7, #68	; 0x44
 810828a:	46bd      	mov	sp, r7
 810828c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108290:	4770      	bx	lr

08108292 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8108292:	b480      	push	{r7}
 8108294:	b091      	sub	sp, #68	; 0x44
 8108296:	af00      	add	r7, sp, #0
 8108298:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 810829a:	687b      	ldr	r3, [r7, #4]
 810829c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81082a0:	2b21      	cmp	r3, #33	; 0x21
 81082a2:	d160      	bne.n	8108366 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 81082a4:	687b      	ldr	r3, [r7, #4]
 81082a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81082aa:	87fb      	strh	r3, [r7, #62]	; 0x3e
 81082ac:	e057      	b.n	810835e <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 81082ae:	687b      	ldr	r3, [r7, #4]
 81082b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 81082b4:	b29b      	uxth	r3, r3
 81082b6:	2b00      	cmp	r3, #0
 81082b8:	d133      	bne.n	8108322 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 81082ba:	687b      	ldr	r3, [r7, #4]
 81082bc:	681b      	ldr	r3, [r3, #0]
 81082be:	3308      	adds	r3, #8
 81082c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81082c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81082c4:	e853 3f00 	ldrex	r3, [r3]
 81082c8:	623b      	str	r3, [r7, #32]
   return(result);
 81082ca:	6a3b      	ldr	r3, [r7, #32]
 81082cc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 81082d0:	63bb      	str	r3, [r7, #56]	; 0x38
 81082d2:	687b      	ldr	r3, [r7, #4]
 81082d4:	681b      	ldr	r3, [r3, #0]
 81082d6:	3308      	adds	r3, #8
 81082d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 81082da:	633a      	str	r2, [r7, #48]	; 0x30
 81082dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81082de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 81082e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81082e2:	e841 2300 	strex	r3, r2, [r1]
 81082e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 81082e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81082ea:	2b00      	cmp	r3, #0
 81082ec:	d1e5      	bne.n	81082ba <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 81082ee:	687b      	ldr	r3, [r7, #4]
 81082f0:	681b      	ldr	r3, [r3, #0]
 81082f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81082f4:	693b      	ldr	r3, [r7, #16]
 81082f6:	e853 3f00 	ldrex	r3, [r3]
 81082fa:	60fb      	str	r3, [r7, #12]
   return(result);
 81082fc:	68fb      	ldr	r3, [r7, #12]
 81082fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8108302:	637b      	str	r3, [r7, #52]	; 0x34
 8108304:	687b      	ldr	r3, [r7, #4]
 8108306:	681b      	ldr	r3, [r3, #0]
 8108308:	461a      	mov	r2, r3
 810830a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810830c:	61fb      	str	r3, [r7, #28]
 810830e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108310:	69b9      	ldr	r1, [r7, #24]
 8108312:	69fa      	ldr	r2, [r7, #28]
 8108314:	e841 2300 	strex	r3, r2, [r1]
 8108318:	617b      	str	r3, [r7, #20]
   return(result);
 810831a:	697b      	ldr	r3, [r7, #20]
 810831c:	2b00      	cmp	r3, #0
 810831e:	d1e6      	bne.n	81082ee <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8108320:	e021      	b.n	8108366 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8108322:	687b      	ldr	r3, [r7, #4]
 8108324:	681b      	ldr	r3, [r3, #0]
 8108326:	69db      	ldr	r3, [r3, #28]
 8108328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810832c:	2b00      	cmp	r3, #0
 810832e:	d013      	beq.n	8108358 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8108330:	687b      	ldr	r3, [r7, #4]
 8108332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8108334:	781a      	ldrb	r2, [r3, #0]
 8108336:	687b      	ldr	r3, [r7, #4]
 8108338:	681b      	ldr	r3, [r3, #0]
 810833a:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 810833c:	687b      	ldr	r3, [r7, #4]
 810833e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8108340:	1c5a      	adds	r2, r3, #1
 8108342:	687b      	ldr	r3, [r7, #4]
 8108344:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8108346:	687b      	ldr	r3, [r7, #4]
 8108348:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 810834c:	b29b      	uxth	r3, r3
 810834e:	3b01      	subs	r3, #1
 8108350:	b29a      	uxth	r2, r3
 8108352:	687b      	ldr	r3, [r7, #4]
 8108354:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8108358:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 810835a:	3b01      	subs	r3, #1
 810835c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 810835e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8108360:	2b00      	cmp	r3, #0
 8108362:	d1a4      	bne.n	81082ae <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8108364:	e7ff      	b.n	8108366 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8108366:	bf00      	nop
 8108368:	3744      	adds	r7, #68	; 0x44
 810836a:	46bd      	mov	sp, r7
 810836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108370:	4770      	bx	lr

08108372 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8108372:	b480      	push	{r7}
 8108374:	b091      	sub	sp, #68	; 0x44
 8108376:	af00      	add	r7, sp, #0
 8108378:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 810837a:	687b      	ldr	r3, [r7, #4]
 810837c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8108380:	2b21      	cmp	r3, #33	; 0x21
 8108382:	d165      	bne.n	8108450 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8108384:	687b      	ldr	r3, [r7, #4]
 8108386:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810838a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 810838c:	e05c      	b.n	8108448 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 810838e:	687b      	ldr	r3, [r7, #4]
 8108390:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8108394:	b29b      	uxth	r3, r3
 8108396:	2b00      	cmp	r3, #0
 8108398:	d133      	bne.n	8108402 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 810839a:	687b      	ldr	r3, [r7, #4]
 810839c:	681b      	ldr	r3, [r3, #0]
 810839e:	3308      	adds	r3, #8
 81083a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81083a2:	6a3b      	ldr	r3, [r7, #32]
 81083a4:	e853 3f00 	ldrex	r3, [r3]
 81083a8:	61fb      	str	r3, [r7, #28]
   return(result);
 81083aa:	69fb      	ldr	r3, [r7, #28]
 81083ac:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 81083b0:	637b      	str	r3, [r7, #52]	; 0x34
 81083b2:	687b      	ldr	r3, [r7, #4]
 81083b4:	681b      	ldr	r3, [r3, #0]
 81083b6:	3308      	adds	r3, #8
 81083b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81083ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 81083bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81083be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 81083c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 81083c2:	e841 2300 	strex	r3, r2, [r1]
 81083c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 81083c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81083ca:	2b00      	cmp	r3, #0
 81083cc:	d1e5      	bne.n	810839a <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 81083ce:	687b      	ldr	r3, [r7, #4]
 81083d0:	681b      	ldr	r3, [r3, #0]
 81083d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81083d4:	68fb      	ldr	r3, [r7, #12]
 81083d6:	e853 3f00 	ldrex	r3, [r3]
 81083da:	60bb      	str	r3, [r7, #8]
   return(result);
 81083dc:	68bb      	ldr	r3, [r7, #8]
 81083de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81083e2:	633b      	str	r3, [r7, #48]	; 0x30
 81083e4:	687b      	ldr	r3, [r7, #4]
 81083e6:	681b      	ldr	r3, [r3, #0]
 81083e8:	461a      	mov	r2, r3
 81083ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81083ec:	61bb      	str	r3, [r7, #24]
 81083ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81083f0:	6979      	ldr	r1, [r7, #20]
 81083f2:	69ba      	ldr	r2, [r7, #24]
 81083f4:	e841 2300 	strex	r3, r2, [r1]
 81083f8:	613b      	str	r3, [r7, #16]
   return(result);
 81083fa:	693b      	ldr	r3, [r7, #16]
 81083fc:	2b00      	cmp	r3, #0
 81083fe:	d1e6      	bne.n	81083ce <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8108400:	e026      	b.n	8108450 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8108402:	687b      	ldr	r3, [r7, #4]
 8108404:	681b      	ldr	r3, [r3, #0]
 8108406:	69db      	ldr	r3, [r3, #28]
 8108408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810840c:	2b00      	cmp	r3, #0
 810840e:	d018      	beq.n	8108442 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8108410:	687b      	ldr	r3, [r7, #4]
 8108412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8108414:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8108416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108418:	881b      	ldrh	r3, [r3, #0]
 810841a:	461a      	mov	r2, r3
 810841c:	687b      	ldr	r3, [r7, #4]
 810841e:	681b      	ldr	r3, [r3, #0]
 8108420:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8108424:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8108426:	687b      	ldr	r3, [r7, #4]
 8108428:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810842a:	1c9a      	adds	r2, r3, #2
 810842c:	687b      	ldr	r3, [r7, #4]
 810842e:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8108430:	687b      	ldr	r3, [r7, #4]
 8108432:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8108436:	b29b      	uxth	r3, r3
 8108438:	3b01      	subs	r3, #1
 810843a:	b29a      	uxth	r2, r3
 810843c:	687b      	ldr	r3, [r7, #4]
 810843e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8108442:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8108444:	3b01      	subs	r3, #1
 8108446:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8108448:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 810844a:	2b00      	cmp	r3, #0
 810844c:	d19f      	bne.n	810838e <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 810844e:	e7ff      	b.n	8108450 <UART_TxISR_16BIT_FIFOEN+0xde>
 8108450:	bf00      	nop
 8108452:	3744      	adds	r7, #68	; 0x44
 8108454:	46bd      	mov	sp, r7
 8108456:	f85d 7b04 	ldr.w	r7, [sp], #4
 810845a:	4770      	bx	lr

0810845c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 810845c:	b580      	push	{r7, lr}
 810845e:	b088      	sub	sp, #32
 8108460:	af00      	add	r7, sp, #0
 8108462:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8108464:	687b      	ldr	r3, [r7, #4]
 8108466:	681b      	ldr	r3, [r3, #0]
 8108468:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810846a:	68fb      	ldr	r3, [r7, #12]
 810846c:	e853 3f00 	ldrex	r3, [r3]
 8108470:	60bb      	str	r3, [r7, #8]
   return(result);
 8108472:	68bb      	ldr	r3, [r7, #8]
 8108474:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8108478:	61fb      	str	r3, [r7, #28]
 810847a:	687b      	ldr	r3, [r7, #4]
 810847c:	681b      	ldr	r3, [r3, #0]
 810847e:	461a      	mov	r2, r3
 8108480:	69fb      	ldr	r3, [r7, #28]
 8108482:	61bb      	str	r3, [r7, #24]
 8108484:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108486:	6979      	ldr	r1, [r7, #20]
 8108488:	69ba      	ldr	r2, [r7, #24]
 810848a:	e841 2300 	strex	r3, r2, [r1]
 810848e:	613b      	str	r3, [r7, #16]
   return(result);
 8108490:	693b      	ldr	r3, [r7, #16]
 8108492:	2b00      	cmp	r3, #0
 8108494:	d1e6      	bne.n	8108464 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8108496:	687b      	ldr	r3, [r7, #4]
 8108498:	2220      	movs	r2, #32
 810849a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 810849e:	687b      	ldr	r3, [r7, #4]
 81084a0:	2200      	movs	r2, #0
 81084a2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 81084a4:	6878      	ldr	r0, [r7, #4]
 81084a6:	f7f8 ffd1 	bl	810144c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 81084aa:	bf00      	nop
 81084ac:	3720      	adds	r7, #32
 81084ae:	46bd      	mov	sp, r7
 81084b0:	bd80      	pop	{r7, pc}

081084b2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 81084b2:	b580      	push	{r7, lr}
 81084b4:	b096      	sub	sp, #88	; 0x58
 81084b6:	af00      	add	r7, sp, #0
 81084b8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 81084ba:	687b      	ldr	r3, [r7, #4]
 81084bc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 81084c0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 81084c4:	687b      	ldr	r3, [r7, #4]
 81084c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81084ca:	2b22      	cmp	r3, #34	; 0x22
 81084cc:	f040 8095 	bne.w	81085fa <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 81084d0:	687b      	ldr	r3, [r7, #4]
 81084d2:	681b      	ldr	r3, [r3, #0]
 81084d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81084d6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 81084da:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 81084de:	b2d9      	uxtb	r1, r3
 81084e0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 81084e4:	b2da      	uxtb	r2, r3
 81084e6:	687b      	ldr	r3, [r7, #4]
 81084e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81084ea:	400a      	ands	r2, r1
 81084ec:	b2d2      	uxtb	r2, r2
 81084ee:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 81084f0:	687b      	ldr	r3, [r7, #4]
 81084f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81084f4:	1c5a      	adds	r2, r3, #1
 81084f6:	687b      	ldr	r3, [r7, #4]
 81084f8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 81084fa:	687b      	ldr	r3, [r7, #4]
 81084fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8108500:	b29b      	uxth	r3, r3
 8108502:	3b01      	subs	r3, #1
 8108504:	b29a      	uxth	r2, r3
 8108506:	687b      	ldr	r3, [r7, #4]
 8108508:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 810850c:	687b      	ldr	r3, [r7, #4]
 810850e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8108512:	b29b      	uxth	r3, r3
 8108514:	2b00      	cmp	r3, #0
 8108516:	d178      	bne.n	810860a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8108518:	687b      	ldr	r3, [r7, #4]
 810851a:	681b      	ldr	r3, [r3, #0]
 810851c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810851e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108520:	e853 3f00 	ldrex	r3, [r3]
 8108524:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8108526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8108528:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 810852c:	653b      	str	r3, [r7, #80]	; 0x50
 810852e:	687b      	ldr	r3, [r7, #4]
 8108530:	681b      	ldr	r3, [r3, #0]
 8108532:	461a      	mov	r2, r3
 8108534:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8108536:	647b      	str	r3, [r7, #68]	; 0x44
 8108538:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810853a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 810853c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 810853e:	e841 2300 	strex	r3, r2, [r1]
 8108542:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8108544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108546:	2b00      	cmp	r3, #0
 8108548:	d1e6      	bne.n	8108518 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810854a:	687b      	ldr	r3, [r7, #4]
 810854c:	681b      	ldr	r3, [r3, #0]
 810854e:	3308      	adds	r3, #8
 8108550:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108554:	e853 3f00 	ldrex	r3, [r3]
 8108558:	623b      	str	r3, [r7, #32]
   return(result);
 810855a:	6a3b      	ldr	r3, [r7, #32]
 810855c:	f023 0301 	bic.w	r3, r3, #1
 8108560:	64fb      	str	r3, [r7, #76]	; 0x4c
 8108562:	687b      	ldr	r3, [r7, #4]
 8108564:	681b      	ldr	r3, [r3, #0]
 8108566:	3308      	adds	r3, #8
 8108568:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 810856a:	633a      	str	r2, [r7, #48]	; 0x30
 810856c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810856e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8108570:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8108572:	e841 2300 	strex	r3, r2, [r1]
 8108576:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8108578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810857a:	2b00      	cmp	r3, #0
 810857c:	d1e5      	bne.n	810854a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 810857e:	687b      	ldr	r3, [r7, #4]
 8108580:	2220      	movs	r2, #32
 8108582:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8108586:	687b      	ldr	r3, [r7, #4]
 8108588:	2200      	movs	r2, #0
 810858a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810858c:	687b      	ldr	r3, [r7, #4]
 810858e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8108590:	2b01      	cmp	r3, #1
 8108592:	d12e      	bne.n	81085f2 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8108594:	687b      	ldr	r3, [r7, #4]
 8108596:	2200      	movs	r2, #0
 8108598:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810859a:	687b      	ldr	r3, [r7, #4]
 810859c:	681b      	ldr	r3, [r3, #0]
 810859e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81085a0:	693b      	ldr	r3, [r7, #16]
 81085a2:	e853 3f00 	ldrex	r3, [r3]
 81085a6:	60fb      	str	r3, [r7, #12]
   return(result);
 81085a8:	68fb      	ldr	r3, [r7, #12]
 81085aa:	f023 0310 	bic.w	r3, r3, #16
 81085ae:	64bb      	str	r3, [r7, #72]	; 0x48
 81085b0:	687b      	ldr	r3, [r7, #4]
 81085b2:	681b      	ldr	r3, [r3, #0]
 81085b4:	461a      	mov	r2, r3
 81085b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 81085b8:	61fb      	str	r3, [r7, #28]
 81085ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81085bc:	69b9      	ldr	r1, [r7, #24]
 81085be:	69fa      	ldr	r2, [r7, #28]
 81085c0:	e841 2300 	strex	r3, r2, [r1]
 81085c4:	617b      	str	r3, [r7, #20]
   return(result);
 81085c6:	697b      	ldr	r3, [r7, #20]
 81085c8:	2b00      	cmp	r3, #0
 81085ca:	d1e6      	bne.n	810859a <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 81085cc:	687b      	ldr	r3, [r7, #4]
 81085ce:	681b      	ldr	r3, [r3, #0]
 81085d0:	69db      	ldr	r3, [r3, #28]
 81085d2:	f003 0310 	and.w	r3, r3, #16
 81085d6:	2b10      	cmp	r3, #16
 81085d8:	d103      	bne.n	81085e2 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 81085da:	687b      	ldr	r3, [r7, #4]
 81085dc:	681b      	ldr	r3, [r3, #0]
 81085de:	2210      	movs	r2, #16
 81085e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 81085e2:	687b      	ldr	r3, [r7, #4]
 81085e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 81085e8:	4619      	mov	r1, r3
 81085ea:	6878      	ldr	r0, [r7, #4]
 81085ec:	f7fe fcc4 	bl	8106f78 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 81085f0:	e00b      	b.n	810860a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 81085f2:	6878      	ldr	r0, [r7, #4]
 81085f4:	f7f8 ff34 	bl	8101460 <HAL_UART_RxCpltCallback>
}
 81085f8:	e007      	b.n	810860a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 81085fa:	687b      	ldr	r3, [r7, #4]
 81085fc:	681b      	ldr	r3, [r3, #0]
 81085fe:	699a      	ldr	r2, [r3, #24]
 8108600:	687b      	ldr	r3, [r7, #4]
 8108602:	681b      	ldr	r3, [r3, #0]
 8108604:	f042 0208 	orr.w	r2, r2, #8
 8108608:	619a      	str	r2, [r3, #24]
}
 810860a:	bf00      	nop
 810860c:	3758      	adds	r7, #88	; 0x58
 810860e:	46bd      	mov	sp, r7
 8108610:	bd80      	pop	{r7, pc}

08108612 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8108612:	b580      	push	{r7, lr}
 8108614:	b096      	sub	sp, #88	; 0x58
 8108616:	af00      	add	r7, sp, #0
 8108618:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 810861a:	687b      	ldr	r3, [r7, #4]
 810861c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8108620:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8108624:	687b      	ldr	r3, [r7, #4]
 8108626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810862a:	2b22      	cmp	r3, #34	; 0x22
 810862c:	f040 8095 	bne.w	810875a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8108630:	687b      	ldr	r3, [r7, #4]
 8108632:	681b      	ldr	r3, [r3, #0]
 8108634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108636:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 810863a:	687b      	ldr	r3, [r7, #4]
 810863c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810863e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8108640:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8108644:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8108648:	4013      	ands	r3, r2
 810864a:	b29a      	uxth	r2, r3
 810864c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 810864e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8108650:	687b      	ldr	r3, [r7, #4]
 8108652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108654:	1c9a      	adds	r2, r3, #2
 8108656:	687b      	ldr	r3, [r7, #4]
 8108658:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 810865a:	687b      	ldr	r3, [r7, #4]
 810865c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8108660:	b29b      	uxth	r3, r3
 8108662:	3b01      	subs	r3, #1
 8108664:	b29a      	uxth	r2, r3
 8108666:	687b      	ldr	r3, [r7, #4]
 8108668:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 810866c:	687b      	ldr	r3, [r7, #4]
 810866e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8108672:	b29b      	uxth	r3, r3
 8108674:	2b00      	cmp	r3, #0
 8108676:	d178      	bne.n	810876a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8108678:	687b      	ldr	r3, [r7, #4]
 810867a:	681b      	ldr	r3, [r3, #0]
 810867c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810867e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8108680:	e853 3f00 	ldrex	r3, [r3]
 8108684:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8108686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108688:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 810868c:	64fb      	str	r3, [r7, #76]	; 0x4c
 810868e:	687b      	ldr	r3, [r7, #4]
 8108690:	681b      	ldr	r3, [r3, #0]
 8108692:	461a      	mov	r2, r3
 8108694:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8108696:	643b      	str	r3, [r7, #64]	; 0x40
 8108698:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810869a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 810869c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 810869e:	e841 2300 	strex	r3, r2, [r1]
 81086a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 81086a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81086a6:	2b00      	cmp	r3, #0
 81086a8:	d1e6      	bne.n	8108678 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 81086aa:	687b      	ldr	r3, [r7, #4]
 81086ac:	681b      	ldr	r3, [r3, #0]
 81086ae:	3308      	adds	r3, #8
 81086b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81086b2:	6a3b      	ldr	r3, [r7, #32]
 81086b4:	e853 3f00 	ldrex	r3, [r3]
 81086b8:	61fb      	str	r3, [r7, #28]
   return(result);
 81086ba:	69fb      	ldr	r3, [r7, #28]
 81086bc:	f023 0301 	bic.w	r3, r3, #1
 81086c0:	64bb      	str	r3, [r7, #72]	; 0x48
 81086c2:	687b      	ldr	r3, [r7, #4]
 81086c4:	681b      	ldr	r3, [r3, #0]
 81086c6:	3308      	adds	r3, #8
 81086c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 81086ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 81086cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81086ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 81086d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 81086d2:	e841 2300 	strex	r3, r2, [r1]
 81086d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 81086d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81086da:	2b00      	cmp	r3, #0
 81086dc:	d1e5      	bne.n	81086aa <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 81086de:	687b      	ldr	r3, [r7, #4]
 81086e0:	2220      	movs	r2, #32
 81086e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 81086e6:	687b      	ldr	r3, [r7, #4]
 81086e8:	2200      	movs	r2, #0
 81086ea:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 81086ec:	687b      	ldr	r3, [r7, #4]
 81086ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81086f0:	2b01      	cmp	r3, #1
 81086f2:	d12e      	bne.n	8108752 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 81086f4:	687b      	ldr	r3, [r7, #4]
 81086f6:	2200      	movs	r2, #0
 81086f8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 81086fa:	687b      	ldr	r3, [r7, #4]
 81086fc:	681b      	ldr	r3, [r3, #0]
 81086fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108700:	68fb      	ldr	r3, [r7, #12]
 8108702:	e853 3f00 	ldrex	r3, [r3]
 8108706:	60bb      	str	r3, [r7, #8]
   return(result);
 8108708:	68bb      	ldr	r3, [r7, #8]
 810870a:	f023 0310 	bic.w	r3, r3, #16
 810870e:	647b      	str	r3, [r7, #68]	; 0x44
 8108710:	687b      	ldr	r3, [r7, #4]
 8108712:	681b      	ldr	r3, [r3, #0]
 8108714:	461a      	mov	r2, r3
 8108716:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8108718:	61bb      	str	r3, [r7, #24]
 810871a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810871c:	6979      	ldr	r1, [r7, #20]
 810871e:	69ba      	ldr	r2, [r7, #24]
 8108720:	e841 2300 	strex	r3, r2, [r1]
 8108724:	613b      	str	r3, [r7, #16]
   return(result);
 8108726:	693b      	ldr	r3, [r7, #16]
 8108728:	2b00      	cmp	r3, #0
 810872a:	d1e6      	bne.n	81086fa <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 810872c:	687b      	ldr	r3, [r7, #4]
 810872e:	681b      	ldr	r3, [r3, #0]
 8108730:	69db      	ldr	r3, [r3, #28]
 8108732:	f003 0310 	and.w	r3, r3, #16
 8108736:	2b10      	cmp	r3, #16
 8108738:	d103      	bne.n	8108742 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810873a:	687b      	ldr	r3, [r7, #4]
 810873c:	681b      	ldr	r3, [r3, #0]
 810873e:	2210      	movs	r2, #16
 8108740:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8108742:	687b      	ldr	r3, [r7, #4]
 8108744:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8108748:	4619      	mov	r1, r3
 810874a:	6878      	ldr	r0, [r7, #4]
 810874c:	f7fe fc14 	bl	8106f78 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8108750:	e00b      	b.n	810876a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8108752:	6878      	ldr	r0, [r7, #4]
 8108754:	f7f8 fe84 	bl	8101460 <HAL_UART_RxCpltCallback>
}
 8108758:	e007      	b.n	810876a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 810875a:	687b      	ldr	r3, [r7, #4]
 810875c:	681b      	ldr	r3, [r3, #0]
 810875e:	699a      	ldr	r2, [r3, #24]
 8108760:	687b      	ldr	r3, [r7, #4]
 8108762:	681b      	ldr	r3, [r3, #0]
 8108764:	f042 0208 	orr.w	r2, r2, #8
 8108768:	619a      	str	r2, [r3, #24]
}
 810876a:	bf00      	nop
 810876c:	3758      	adds	r7, #88	; 0x58
 810876e:	46bd      	mov	sp, r7
 8108770:	bd80      	pop	{r7, pc}
	...

08108774 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8108774:	b580      	push	{r7, lr}
 8108776:	b0a6      	sub	sp, #152	; 0x98
 8108778:	af00      	add	r7, sp, #0
 810877a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 810877c:	687b      	ldr	r3, [r7, #4]
 810877e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8108782:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8108786:	687b      	ldr	r3, [r7, #4]
 8108788:	681b      	ldr	r3, [r3, #0]
 810878a:	69db      	ldr	r3, [r3, #28]
 810878c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8108790:	687b      	ldr	r3, [r7, #4]
 8108792:	681b      	ldr	r3, [r3, #0]
 8108794:	681b      	ldr	r3, [r3, #0]
 8108796:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 810879a:	687b      	ldr	r3, [r7, #4]
 810879c:	681b      	ldr	r3, [r3, #0]
 810879e:	689b      	ldr	r3, [r3, #8]
 81087a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 81087a4:	687b      	ldr	r3, [r7, #4]
 81087a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81087aa:	2b22      	cmp	r3, #34	; 0x22
 81087ac:	f040 814f 	bne.w	8108a4e <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 81087b0:	687b      	ldr	r3, [r7, #4]
 81087b2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 81087b6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 81087ba:	e0f6      	b.n	81089aa <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 81087bc:	687b      	ldr	r3, [r7, #4]
 81087be:	681b      	ldr	r3, [r3, #0]
 81087c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81087c2:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 81087c6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 81087ca:	b2d9      	uxtb	r1, r3
 81087cc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 81087d0:	b2da      	uxtb	r2, r3
 81087d2:	687b      	ldr	r3, [r7, #4]
 81087d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81087d6:	400a      	ands	r2, r1
 81087d8:	b2d2      	uxtb	r2, r2
 81087da:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 81087dc:	687b      	ldr	r3, [r7, #4]
 81087de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81087e0:	1c5a      	adds	r2, r3, #1
 81087e2:	687b      	ldr	r3, [r7, #4]
 81087e4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 81087e6:	687b      	ldr	r3, [r7, #4]
 81087e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 81087ec:	b29b      	uxth	r3, r3
 81087ee:	3b01      	subs	r3, #1
 81087f0:	b29a      	uxth	r2, r3
 81087f2:	687b      	ldr	r3, [r7, #4]
 81087f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 81087f8:	687b      	ldr	r3, [r7, #4]
 81087fa:	681b      	ldr	r3, [r3, #0]
 81087fc:	69db      	ldr	r3, [r3, #28]
 81087fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8108802:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8108806:	f003 0307 	and.w	r3, r3, #7
 810880a:	2b00      	cmp	r3, #0
 810880c:	d053      	beq.n	81088b6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 810880e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8108812:	f003 0301 	and.w	r3, r3, #1
 8108816:	2b00      	cmp	r3, #0
 8108818:	d011      	beq.n	810883e <UART_RxISR_8BIT_FIFOEN+0xca>
 810881a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 810881e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8108822:	2b00      	cmp	r3, #0
 8108824:	d00b      	beq.n	810883e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8108826:	687b      	ldr	r3, [r7, #4]
 8108828:	681b      	ldr	r3, [r3, #0]
 810882a:	2201      	movs	r2, #1
 810882c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 810882e:	687b      	ldr	r3, [r7, #4]
 8108830:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8108834:	f043 0201 	orr.w	r2, r3, #1
 8108838:	687b      	ldr	r3, [r7, #4]
 810883a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810883e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8108842:	f003 0302 	and.w	r3, r3, #2
 8108846:	2b00      	cmp	r3, #0
 8108848:	d011      	beq.n	810886e <UART_RxISR_8BIT_FIFOEN+0xfa>
 810884a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 810884e:	f003 0301 	and.w	r3, r3, #1
 8108852:	2b00      	cmp	r3, #0
 8108854:	d00b      	beq.n	810886e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8108856:	687b      	ldr	r3, [r7, #4]
 8108858:	681b      	ldr	r3, [r3, #0]
 810885a:	2202      	movs	r2, #2
 810885c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 810885e:	687b      	ldr	r3, [r7, #4]
 8108860:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8108864:	f043 0204 	orr.w	r2, r3, #4
 8108868:	687b      	ldr	r3, [r7, #4]
 810886a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810886e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8108872:	f003 0304 	and.w	r3, r3, #4
 8108876:	2b00      	cmp	r3, #0
 8108878:	d011      	beq.n	810889e <UART_RxISR_8BIT_FIFOEN+0x12a>
 810887a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 810887e:	f003 0301 	and.w	r3, r3, #1
 8108882:	2b00      	cmp	r3, #0
 8108884:	d00b      	beq.n	810889e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8108886:	687b      	ldr	r3, [r7, #4]
 8108888:	681b      	ldr	r3, [r3, #0]
 810888a:	2204      	movs	r2, #4
 810888c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 810888e:	687b      	ldr	r3, [r7, #4]
 8108890:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8108894:	f043 0202 	orr.w	r2, r3, #2
 8108898:	687b      	ldr	r3, [r7, #4]
 810889a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 810889e:	687b      	ldr	r3, [r7, #4]
 81088a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81088a4:	2b00      	cmp	r3, #0
 81088a6:	d006      	beq.n	81088b6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 81088a8:	6878      	ldr	r0, [r7, #4]
 81088aa:	f7fe fb5b 	bl	8106f64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 81088ae:	687b      	ldr	r3, [r7, #4]
 81088b0:	2200      	movs	r2, #0
 81088b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 81088b6:	687b      	ldr	r3, [r7, #4]
 81088b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 81088bc:	b29b      	uxth	r3, r3
 81088be:	2b00      	cmp	r3, #0
 81088c0:	d173      	bne.n	81089aa <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 81088c2:	687b      	ldr	r3, [r7, #4]
 81088c4:	681b      	ldr	r3, [r3, #0]
 81088c6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81088c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 81088ca:	e853 3f00 	ldrex	r3, [r3]
 81088ce:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 81088d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 81088d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81088d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 81088da:	687b      	ldr	r3, [r7, #4]
 81088dc:	681b      	ldr	r3, [r3, #0]
 81088de:	461a      	mov	r2, r3
 81088e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 81088e4:	66bb      	str	r3, [r7, #104]	; 0x68
 81088e6:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81088e8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 81088ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 81088ec:	e841 2300 	strex	r3, r2, [r1]
 81088f0:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 81088f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 81088f4:	2b00      	cmp	r3, #0
 81088f6:	d1e4      	bne.n	81088c2 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 81088f8:	687b      	ldr	r3, [r7, #4]
 81088fa:	681b      	ldr	r3, [r3, #0]
 81088fc:	3308      	adds	r3, #8
 81088fe:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108900:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8108902:	e853 3f00 	ldrex	r3, [r3]
 8108906:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8108908:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 810890a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810890e:	f023 0301 	bic.w	r3, r3, #1
 8108912:	67fb      	str	r3, [r7, #124]	; 0x7c
 8108914:	687b      	ldr	r3, [r7, #4]
 8108916:	681b      	ldr	r3, [r3, #0]
 8108918:	3308      	adds	r3, #8
 810891a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 810891c:	657a      	str	r2, [r7, #84]	; 0x54
 810891e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108920:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8108922:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8108924:	e841 2300 	strex	r3, r2, [r1]
 8108928:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 810892a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810892c:	2b00      	cmp	r3, #0
 810892e:	d1e3      	bne.n	81088f8 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8108930:	687b      	ldr	r3, [r7, #4]
 8108932:	2220      	movs	r2, #32
 8108934:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8108938:	687b      	ldr	r3, [r7, #4]
 810893a:	2200      	movs	r2, #0
 810893c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810893e:	687b      	ldr	r3, [r7, #4]
 8108940:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8108942:	2b01      	cmp	r3, #1
 8108944:	d12e      	bne.n	81089a4 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8108946:	687b      	ldr	r3, [r7, #4]
 8108948:	2200      	movs	r2, #0
 810894a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810894c:	687b      	ldr	r3, [r7, #4]
 810894e:	681b      	ldr	r3, [r3, #0]
 8108950:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8108954:	e853 3f00 	ldrex	r3, [r3]
 8108958:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 810895a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810895c:	f023 0310 	bic.w	r3, r3, #16
 8108960:	67bb      	str	r3, [r7, #120]	; 0x78
 8108962:	687b      	ldr	r3, [r7, #4]
 8108964:	681b      	ldr	r3, [r3, #0]
 8108966:	461a      	mov	r2, r3
 8108968:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 810896a:	643b      	str	r3, [r7, #64]	; 0x40
 810896c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810896e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8108970:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8108972:	e841 2300 	strex	r3, r2, [r1]
 8108976:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8108978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810897a:	2b00      	cmp	r3, #0
 810897c:	d1e6      	bne.n	810894c <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 810897e:	687b      	ldr	r3, [r7, #4]
 8108980:	681b      	ldr	r3, [r3, #0]
 8108982:	69db      	ldr	r3, [r3, #28]
 8108984:	f003 0310 	and.w	r3, r3, #16
 8108988:	2b10      	cmp	r3, #16
 810898a:	d103      	bne.n	8108994 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810898c:	687b      	ldr	r3, [r7, #4]
 810898e:	681b      	ldr	r3, [r3, #0]
 8108990:	2210      	movs	r2, #16
 8108992:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8108994:	687b      	ldr	r3, [r7, #4]
 8108996:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 810899a:	4619      	mov	r1, r3
 810899c:	6878      	ldr	r0, [r7, #4]
 810899e:	f7fe faeb 	bl	8106f78 <HAL_UARTEx_RxEventCallback>
 81089a2:	e002      	b.n	81089aa <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 81089a4:	6878      	ldr	r0, [r7, #4]
 81089a6:	f7f8 fd5b 	bl	8101460 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 81089aa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 81089ae:	2b00      	cmp	r3, #0
 81089b0:	d006      	beq.n	81089c0 <UART_RxISR_8BIT_FIFOEN+0x24c>
 81089b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 81089b6:	f003 0320 	and.w	r3, r3, #32
 81089ba:	2b00      	cmp	r3, #0
 81089bc:	f47f aefe 	bne.w	81087bc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 81089c0:	687b      	ldr	r3, [r7, #4]
 81089c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 81089c6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 81089ca:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 81089ce:	2b00      	cmp	r3, #0
 81089d0:	d045      	beq.n	8108a5e <UART_RxISR_8BIT_FIFOEN+0x2ea>
 81089d2:	687b      	ldr	r3, [r7, #4]
 81089d4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 81089d8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 81089dc:	429a      	cmp	r2, r3
 81089de:	d23e      	bcs.n	8108a5e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 81089e0:	687b      	ldr	r3, [r7, #4]
 81089e2:	681b      	ldr	r3, [r3, #0]
 81089e4:	3308      	adds	r3, #8
 81089e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81089e8:	6a3b      	ldr	r3, [r7, #32]
 81089ea:	e853 3f00 	ldrex	r3, [r3]
 81089ee:	61fb      	str	r3, [r7, #28]
   return(result);
 81089f0:	69fb      	ldr	r3, [r7, #28]
 81089f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 81089f6:	673b      	str	r3, [r7, #112]	; 0x70
 81089f8:	687b      	ldr	r3, [r7, #4]
 81089fa:	681b      	ldr	r3, [r3, #0]
 81089fc:	3308      	adds	r3, #8
 81089fe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8108a00:	62fa      	str	r2, [r7, #44]	; 0x2c
 8108a02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108a04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8108a06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8108a08:	e841 2300 	strex	r3, r2, [r1]
 8108a0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8108a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108a10:	2b00      	cmp	r3, #0
 8108a12:	d1e5      	bne.n	81089e0 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8108a14:	687b      	ldr	r3, [r7, #4]
 8108a16:	4a14      	ldr	r2, [pc, #80]	; (8108a68 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8108a18:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8108a1a:	687b      	ldr	r3, [r7, #4]
 8108a1c:	681b      	ldr	r3, [r3, #0]
 8108a1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108a20:	68fb      	ldr	r3, [r7, #12]
 8108a22:	e853 3f00 	ldrex	r3, [r3]
 8108a26:	60bb      	str	r3, [r7, #8]
   return(result);
 8108a28:	68bb      	ldr	r3, [r7, #8]
 8108a2a:	f043 0320 	orr.w	r3, r3, #32
 8108a2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8108a30:	687b      	ldr	r3, [r7, #4]
 8108a32:	681b      	ldr	r3, [r3, #0]
 8108a34:	461a      	mov	r2, r3
 8108a36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8108a38:	61bb      	str	r3, [r7, #24]
 8108a3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108a3c:	6979      	ldr	r1, [r7, #20]
 8108a3e:	69ba      	ldr	r2, [r7, #24]
 8108a40:	e841 2300 	strex	r3, r2, [r1]
 8108a44:	613b      	str	r3, [r7, #16]
   return(result);
 8108a46:	693b      	ldr	r3, [r7, #16]
 8108a48:	2b00      	cmp	r3, #0
 8108a4a:	d1e6      	bne.n	8108a1a <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8108a4c:	e007      	b.n	8108a5e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8108a4e:	687b      	ldr	r3, [r7, #4]
 8108a50:	681b      	ldr	r3, [r3, #0]
 8108a52:	699a      	ldr	r2, [r3, #24]
 8108a54:	687b      	ldr	r3, [r7, #4]
 8108a56:	681b      	ldr	r3, [r3, #0]
 8108a58:	f042 0208 	orr.w	r2, r2, #8
 8108a5c:	619a      	str	r2, [r3, #24]
}
 8108a5e:	bf00      	nop
 8108a60:	3798      	adds	r7, #152	; 0x98
 8108a62:	46bd      	mov	sp, r7
 8108a64:	bd80      	pop	{r7, pc}
 8108a66:	bf00      	nop
 8108a68:	081084b3 	.word	0x081084b3

08108a6c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8108a6c:	b580      	push	{r7, lr}
 8108a6e:	b0a8      	sub	sp, #160	; 0xa0
 8108a70:	af00      	add	r7, sp, #0
 8108a72:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8108a74:	687b      	ldr	r3, [r7, #4]
 8108a76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8108a7a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8108a7e:	687b      	ldr	r3, [r7, #4]
 8108a80:	681b      	ldr	r3, [r3, #0]
 8108a82:	69db      	ldr	r3, [r3, #28]
 8108a84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8108a88:	687b      	ldr	r3, [r7, #4]
 8108a8a:	681b      	ldr	r3, [r3, #0]
 8108a8c:	681b      	ldr	r3, [r3, #0]
 8108a8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8108a92:	687b      	ldr	r3, [r7, #4]
 8108a94:	681b      	ldr	r3, [r3, #0]
 8108a96:	689b      	ldr	r3, [r3, #8]
 8108a98:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8108a9c:	687b      	ldr	r3, [r7, #4]
 8108a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8108aa2:	2b22      	cmp	r3, #34	; 0x22
 8108aa4:	f040 8153 	bne.w	8108d4e <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8108aa8:	687b      	ldr	r3, [r7, #4]
 8108aaa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8108aae:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8108ab2:	e0fa      	b.n	8108caa <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8108ab4:	687b      	ldr	r3, [r7, #4]
 8108ab6:	681b      	ldr	r3, [r3, #0]
 8108ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108aba:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8108abe:	687b      	ldr	r3, [r7, #4]
 8108ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108ac2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8108ac6:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8108aca:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8108ace:	4013      	ands	r3, r2
 8108ad0:	b29a      	uxth	r2, r3
 8108ad2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8108ad6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8108ad8:	687b      	ldr	r3, [r7, #4]
 8108ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108adc:	1c9a      	adds	r2, r3, #2
 8108ade:	687b      	ldr	r3, [r7, #4]
 8108ae0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8108ae2:	687b      	ldr	r3, [r7, #4]
 8108ae4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8108ae8:	b29b      	uxth	r3, r3
 8108aea:	3b01      	subs	r3, #1
 8108aec:	b29a      	uxth	r2, r3
 8108aee:	687b      	ldr	r3, [r7, #4]
 8108af0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8108af4:	687b      	ldr	r3, [r7, #4]
 8108af6:	681b      	ldr	r3, [r3, #0]
 8108af8:	69db      	ldr	r3, [r3, #28]
 8108afa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8108afe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8108b02:	f003 0307 	and.w	r3, r3, #7
 8108b06:	2b00      	cmp	r3, #0
 8108b08:	d053      	beq.n	8108bb2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8108b0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8108b0e:	f003 0301 	and.w	r3, r3, #1
 8108b12:	2b00      	cmp	r3, #0
 8108b14:	d011      	beq.n	8108b3a <UART_RxISR_16BIT_FIFOEN+0xce>
 8108b16:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8108b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8108b1e:	2b00      	cmp	r3, #0
 8108b20:	d00b      	beq.n	8108b3a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8108b22:	687b      	ldr	r3, [r7, #4]
 8108b24:	681b      	ldr	r3, [r3, #0]
 8108b26:	2201      	movs	r2, #1
 8108b28:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8108b2a:	687b      	ldr	r3, [r7, #4]
 8108b2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8108b30:	f043 0201 	orr.w	r2, r3, #1
 8108b34:	687b      	ldr	r3, [r7, #4]
 8108b36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8108b3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8108b3e:	f003 0302 	and.w	r3, r3, #2
 8108b42:	2b00      	cmp	r3, #0
 8108b44:	d011      	beq.n	8108b6a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8108b46:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8108b4a:	f003 0301 	and.w	r3, r3, #1
 8108b4e:	2b00      	cmp	r3, #0
 8108b50:	d00b      	beq.n	8108b6a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8108b52:	687b      	ldr	r3, [r7, #4]
 8108b54:	681b      	ldr	r3, [r3, #0]
 8108b56:	2202      	movs	r2, #2
 8108b58:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8108b5a:	687b      	ldr	r3, [r7, #4]
 8108b5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8108b60:	f043 0204 	orr.w	r2, r3, #4
 8108b64:	687b      	ldr	r3, [r7, #4]
 8108b66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8108b6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8108b6e:	f003 0304 	and.w	r3, r3, #4
 8108b72:	2b00      	cmp	r3, #0
 8108b74:	d011      	beq.n	8108b9a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8108b76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8108b7a:	f003 0301 	and.w	r3, r3, #1
 8108b7e:	2b00      	cmp	r3, #0
 8108b80:	d00b      	beq.n	8108b9a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8108b82:	687b      	ldr	r3, [r7, #4]
 8108b84:	681b      	ldr	r3, [r3, #0]
 8108b86:	2204      	movs	r2, #4
 8108b88:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8108b8a:	687b      	ldr	r3, [r7, #4]
 8108b8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8108b90:	f043 0202 	orr.w	r2, r3, #2
 8108b94:	687b      	ldr	r3, [r7, #4]
 8108b96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8108b9a:	687b      	ldr	r3, [r7, #4]
 8108b9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8108ba0:	2b00      	cmp	r3, #0
 8108ba2:	d006      	beq.n	8108bb2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8108ba4:	6878      	ldr	r0, [r7, #4]
 8108ba6:	f7fe f9dd 	bl	8106f64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8108baa:	687b      	ldr	r3, [r7, #4]
 8108bac:	2200      	movs	r2, #0
 8108bae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8108bb2:	687b      	ldr	r3, [r7, #4]
 8108bb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8108bb8:	b29b      	uxth	r3, r3
 8108bba:	2b00      	cmp	r3, #0
 8108bbc:	d175      	bne.n	8108caa <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8108bbe:	687b      	ldr	r3, [r7, #4]
 8108bc0:	681b      	ldr	r3, [r3, #0]
 8108bc2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108bc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8108bc6:	e853 3f00 	ldrex	r3, [r3]
 8108bca:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8108bcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8108bce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8108bd2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8108bd6:	687b      	ldr	r3, [r7, #4]
 8108bd8:	681b      	ldr	r3, [r3, #0]
 8108bda:	461a      	mov	r2, r3
 8108bdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8108be0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8108be2:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108be4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8108be6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8108be8:	e841 2300 	strex	r3, r2, [r1]
 8108bec:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8108bee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8108bf0:	2b00      	cmp	r3, #0
 8108bf2:	d1e4      	bne.n	8108bbe <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8108bf4:	687b      	ldr	r3, [r7, #4]
 8108bf6:	681b      	ldr	r3, [r3, #0]
 8108bf8:	3308      	adds	r3, #8
 8108bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108bfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8108bfe:	e853 3f00 	ldrex	r3, [r3]
 8108c02:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8108c04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8108c06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8108c0a:	f023 0301 	bic.w	r3, r3, #1
 8108c0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8108c12:	687b      	ldr	r3, [r7, #4]
 8108c14:	681b      	ldr	r3, [r3, #0]
 8108c16:	3308      	adds	r3, #8
 8108c18:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8108c1c:	65ba      	str	r2, [r7, #88]	; 0x58
 8108c1e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108c20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8108c22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8108c24:	e841 2300 	strex	r3, r2, [r1]
 8108c28:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8108c2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8108c2c:	2b00      	cmp	r3, #0
 8108c2e:	d1e1      	bne.n	8108bf4 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8108c30:	687b      	ldr	r3, [r7, #4]
 8108c32:	2220      	movs	r2, #32
 8108c34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8108c38:	687b      	ldr	r3, [r7, #4]
 8108c3a:	2200      	movs	r2, #0
 8108c3c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8108c3e:	687b      	ldr	r3, [r7, #4]
 8108c40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8108c42:	2b01      	cmp	r3, #1
 8108c44:	d12e      	bne.n	8108ca4 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8108c46:	687b      	ldr	r3, [r7, #4]
 8108c48:	2200      	movs	r2, #0
 8108c4a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8108c4c:	687b      	ldr	r3, [r7, #4]
 8108c4e:	681b      	ldr	r3, [r3, #0]
 8108c50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108c54:	e853 3f00 	ldrex	r3, [r3]
 8108c58:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8108c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8108c5c:	f023 0310 	bic.w	r3, r3, #16
 8108c60:	67fb      	str	r3, [r7, #124]	; 0x7c
 8108c62:	687b      	ldr	r3, [r7, #4]
 8108c64:	681b      	ldr	r3, [r3, #0]
 8108c66:	461a      	mov	r2, r3
 8108c68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8108c6a:	647b      	str	r3, [r7, #68]	; 0x44
 8108c6c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108c6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8108c70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8108c72:	e841 2300 	strex	r3, r2, [r1]
 8108c76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8108c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108c7a:	2b00      	cmp	r3, #0
 8108c7c:	d1e6      	bne.n	8108c4c <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8108c7e:	687b      	ldr	r3, [r7, #4]
 8108c80:	681b      	ldr	r3, [r3, #0]
 8108c82:	69db      	ldr	r3, [r3, #28]
 8108c84:	f003 0310 	and.w	r3, r3, #16
 8108c88:	2b10      	cmp	r3, #16
 8108c8a:	d103      	bne.n	8108c94 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8108c8c:	687b      	ldr	r3, [r7, #4]
 8108c8e:	681b      	ldr	r3, [r3, #0]
 8108c90:	2210      	movs	r2, #16
 8108c92:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8108c94:	687b      	ldr	r3, [r7, #4]
 8108c96:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8108c9a:	4619      	mov	r1, r3
 8108c9c:	6878      	ldr	r0, [r7, #4]
 8108c9e:	f7fe f96b 	bl	8106f78 <HAL_UARTEx_RxEventCallback>
 8108ca2:	e002      	b.n	8108caa <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8108ca4:	6878      	ldr	r0, [r7, #4]
 8108ca6:	f7f8 fbdb 	bl	8101460 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8108caa:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8108cae:	2b00      	cmp	r3, #0
 8108cb0:	d006      	beq.n	8108cc0 <UART_RxISR_16BIT_FIFOEN+0x254>
 8108cb2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8108cb6:	f003 0320 	and.w	r3, r3, #32
 8108cba:	2b00      	cmp	r3, #0
 8108cbc:	f47f aefa 	bne.w	8108ab4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8108cc0:	687b      	ldr	r3, [r7, #4]
 8108cc2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8108cc6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8108cca:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8108cce:	2b00      	cmp	r3, #0
 8108cd0:	d045      	beq.n	8108d5e <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8108cd2:	687b      	ldr	r3, [r7, #4]
 8108cd4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8108cd8:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8108cdc:	429a      	cmp	r2, r3
 8108cde:	d23e      	bcs.n	8108d5e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8108ce0:	687b      	ldr	r3, [r7, #4]
 8108ce2:	681b      	ldr	r3, [r3, #0]
 8108ce4:	3308      	adds	r3, #8
 8108ce6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108cea:	e853 3f00 	ldrex	r3, [r3]
 8108cee:	623b      	str	r3, [r7, #32]
   return(result);
 8108cf0:	6a3b      	ldr	r3, [r7, #32]
 8108cf2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8108cf6:	677b      	str	r3, [r7, #116]	; 0x74
 8108cf8:	687b      	ldr	r3, [r7, #4]
 8108cfa:	681b      	ldr	r3, [r3, #0]
 8108cfc:	3308      	adds	r3, #8
 8108cfe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8108d00:	633a      	str	r2, [r7, #48]	; 0x30
 8108d02:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108d04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8108d06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8108d08:	e841 2300 	strex	r3, r2, [r1]
 8108d0c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8108d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108d10:	2b00      	cmp	r3, #0
 8108d12:	d1e5      	bne.n	8108ce0 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8108d14:	687b      	ldr	r3, [r7, #4]
 8108d16:	4a14      	ldr	r2, [pc, #80]	; (8108d68 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8108d18:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8108d1a:	687b      	ldr	r3, [r7, #4]
 8108d1c:	681b      	ldr	r3, [r3, #0]
 8108d1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108d20:	693b      	ldr	r3, [r7, #16]
 8108d22:	e853 3f00 	ldrex	r3, [r3]
 8108d26:	60fb      	str	r3, [r7, #12]
   return(result);
 8108d28:	68fb      	ldr	r3, [r7, #12]
 8108d2a:	f043 0320 	orr.w	r3, r3, #32
 8108d2e:	673b      	str	r3, [r7, #112]	; 0x70
 8108d30:	687b      	ldr	r3, [r7, #4]
 8108d32:	681b      	ldr	r3, [r3, #0]
 8108d34:	461a      	mov	r2, r3
 8108d36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8108d38:	61fb      	str	r3, [r7, #28]
 8108d3a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108d3c:	69b9      	ldr	r1, [r7, #24]
 8108d3e:	69fa      	ldr	r2, [r7, #28]
 8108d40:	e841 2300 	strex	r3, r2, [r1]
 8108d44:	617b      	str	r3, [r7, #20]
   return(result);
 8108d46:	697b      	ldr	r3, [r7, #20]
 8108d48:	2b00      	cmp	r3, #0
 8108d4a:	d1e6      	bne.n	8108d1a <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8108d4c:	e007      	b.n	8108d5e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8108d4e:	687b      	ldr	r3, [r7, #4]
 8108d50:	681b      	ldr	r3, [r3, #0]
 8108d52:	699a      	ldr	r2, [r3, #24]
 8108d54:	687b      	ldr	r3, [r7, #4]
 8108d56:	681b      	ldr	r3, [r3, #0]
 8108d58:	f042 0208 	orr.w	r2, r2, #8
 8108d5c:	619a      	str	r2, [r3, #24]
}
 8108d5e:	bf00      	nop
 8108d60:	37a0      	adds	r7, #160	; 0xa0
 8108d62:	46bd      	mov	sp, r7
 8108d64:	bd80      	pop	{r7, pc}
 8108d66:	bf00      	nop
 8108d68:	08108613 	.word	0x08108613

08108d6c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8108d6c:	b480      	push	{r7}
 8108d6e:	b083      	sub	sp, #12
 8108d70:	af00      	add	r7, sp, #0
 8108d72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8108d74:	bf00      	nop
 8108d76:	370c      	adds	r7, #12
 8108d78:	46bd      	mov	sp, r7
 8108d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108d7e:	4770      	bx	lr

08108d80 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8108d80:	b480      	push	{r7}
 8108d82:	b083      	sub	sp, #12
 8108d84:	af00      	add	r7, sp, #0
 8108d86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8108d88:	bf00      	nop
 8108d8a:	370c      	adds	r7, #12
 8108d8c:	46bd      	mov	sp, r7
 8108d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108d92:	4770      	bx	lr

08108d94 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8108d94:	b480      	push	{r7}
 8108d96:	b083      	sub	sp, #12
 8108d98:	af00      	add	r7, sp, #0
 8108d9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8108d9c:	bf00      	nop
 8108d9e:	370c      	adds	r7, #12
 8108da0:	46bd      	mov	sp, r7
 8108da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108da6:	4770      	bx	lr

08108da8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8108da8:	b480      	push	{r7}
 8108daa:	b085      	sub	sp, #20
 8108dac:	af00      	add	r7, sp, #0
 8108dae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8108db0:	687b      	ldr	r3, [r7, #4]
 8108db2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8108db6:	2b01      	cmp	r3, #1
 8108db8:	d101      	bne.n	8108dbe <HAL_UARTEx_DisableFifoMode+0x16>
 8108dba:	2302      	movs	r3, #2
 8108dbc:	e027      	b.n	8108e0e <HAL_UARTEx_DisableFifoMode+0x66>
 8108dbe:	687b      	ldr	r3, [r7, #4]
 8108dc0:	2201      	movs	r2, #1
 8108dc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8108dc6:	687b      	ldr	r3, [r7, #4]
 8108dc8:	2224      	movs	r2, #36	; 0x24
 8108dca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8108dce:	687b      	ldr	r3, [r7, #4]
 8108dd0:	681b      	ldr	r3, [r3, #0]
 8108dd2:	681b      	ldr	r3, [r3, #0]
 8108dd4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8108dd6:	687b      	ldr	r3, [r7, #4]
 8108dd8:	681b      	ldr	r3, [r3, #0]
 8108dda:	681a      	ldr	r2, [r3, #0]
 8108ddc:	687b      	ldr	r3, [r7, #4]
 8108dde:	681b      	ldr	r3, [r3, #0]
 8108de0:	f022 0201 	bic.w	r2, r2, #1
 8108de4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8108de6:	68fb      	ldr	r3, [r7, #12]
 8108de8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8108dec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8108dee:	687b      	ldr	r3, [r7, #4]
 8108df0:	2200      	movs	r2, #0
 8108df2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8108df4:	687b      	ldr	r3, [r7, #4]
 8108df6:	681b      	ldr	r3, [r3, #0]
 8108df8:	68fa      	ldr	r2, [r7, #12]
 8108dfa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8108dfc:	687b      	ldr	r3, [r7, #4]
 8108dfe:	2220      	movs	r2, #32
 8108e00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8108e04:	687b      	ldr	r3, [r7, #4]
 8108e06:	2200      	movs	r2, #0
 8108e08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8108e0c:	2300      	movs	r3, #0
}
 8108e0e:	4618      	mov	r0, r3
 8108e10:	3714      	adds	r7, #20
 8108e12:	46bd      	mov	sp, r7
 8108e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108e18:	4770      	bx	lr

08108e1a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8108e1a:	b580      	push	{r7, lr}
 8108e1c:	b084      	sub	sp, #16
 8108e1e:	af00      	add	r7, sp, #0
 8108e20:	6078      	str	r0, [r7, #4]
 8108e22:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8108e24:	687b      	ldr	r3, [r7, #4]
 8108e26:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8108e2a:	2b01      	cmp	r3, #1
 8108e2c:	d101      	bne.n	8108e32 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8108e2e:	2302      	movs	r3, #2
 8108e30:	e02d      	b.n	8108e8e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8108e32:	687b      	ldr	r3, [r7, #4]
 8108e34:	2201      	movs	r2, #1
 8108e36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8108e3a:	687b      	ldr	r3, [r7, #4]
 8108e3c:	2224      	movs	r2, #36	; 0x24
 8108e3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8108e42:	687b      	ldr	r3, [r7, #4]
 8108e44:	681b      	ldr	r3, [r3, #0]
 8108e46:	681b      	ldr	r3, [r3, #0]
 8108e48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8108e4a:	687b      	ldr	r3, [r7, #4]
 8108e4c:	681b      	ldr	r3, [r3, #0]
 8108e4e:	681a      	ldr	r2, [r3, #0]
 8108e50:	687b      	ldr	r3, [r7, #4]
 8108e52:	681b      	ldr	r3, [r3, #0]
 8108e54:	f022 0201 	bic.w	r2, r2, #1
 8108e58:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8108e5a:	687b      	ldr	r3, [r7, #4]
 8108e5c:	681b      	ldr	r3, [r3, #0]
 8108e5e:	689b      	ldr	r3, [r3, #8]
 8108e60:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8108e64:	687b      	ldr	r3, [r7, #4]
 8108e66:	681b      	ldr	r3, [r3, #0]
 8108e68:	683a      	ldr	r2, [r7, #0]
 8108e6a:	430a      	orrs	r2, r1
 8108e6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8108e6e:	6878      	ldr	r0, [r7, #4]
 8108e70:	f000 f850 	bl	8108f14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8108e74:	687b      	ldr	r3, [r7, #4]
 8108e76:	681b      	ldr	r3, [r3, #0]
 8108e78:	68fa      	ldr	r2, [r7, #12]
 8108e7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8108e7c:	687b      	ldr	r3, [r7, #4]
 8108e7e:	2220      	movs	r2, #32
 8108e80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8108e84:	687b      	ldr	r3, [r7, #4]
 8108e86:	2200      	movs	r2, #0
 8108e88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8108e8c:	2300      	movs	r3, #0
}
 8108e8e:	4618      	mov	r0, r3
 8108e90:	3710      	adds	r7, #16
 8108e92:	46bd      	mov	sp, r7
 8108e94:	bd80      	pop	{r7, pc}

08108e96 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8108e96:	b580      	push	{r7, lr}
 8108e98:	b084      	sub	sp, #16
 8108e9a:	af00      	add	r7, sp, #0
 8108e9c:	6078      	str	r0, [r7, #4]
 8108e9e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8108ea0:	687b      	ldr	r3, [r7, #4]
 8108ea2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8108ea6:	2b01      	cmp	r3, #1
 8108ea8:	d101      	bne.n	8108eae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8108eaa:	2302      	movs	r3, #2
 8108eac:	e02d      	b.n	8108f0a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8108eae:	687b      	ldr	r3, [r7, #4]
 8108eb0:	2201      	movs	r2, #1
 8108eb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8108eb6:	687b      	ldr	r3, [r7, #4]
 8108eb8:	2224      	movs	r2, #36	; 0x24
 8108eba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8108ebe:	687b      	ldr	r3, [r7, #4]
 8108ec0:	681b      	ldr	r3, [r3, #0]
 8108ec2:	681b      	ldr	r3, [r3, #0]
 8108ec4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8108ec6:	687b      	ldr	r3, [r7, #4]
 8108ec8:	681b      	ldr	r3, [r3, #0]
 8108eca:	681a      	ldr	r2, [r3, #0]
 8108ecc:	687b      	ldr	r3, [r7, #4]
 8108ece:	681b      	ldr	r3, [r3, #0]
 8108ed0:	f022 0201 	bic.w	r2, r2, #1
 8108ed4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8108ed6:	687b      	ldr	r3, [r7, #4]
 8108ed8:	681b      	ldr	r3, [r3, #0]
 8108eda:	689b      	ldr	r3, [r3, #8]
 8108edc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8108ee0:	687b      	ldr	r3, [r7, #4]
 8108ee2:	681b      	ldr	r3, [r3, #0]
 8108ee4:	683a      	ldr	r2, [r7, #0]
 8108ee6:	430a      	orrs	r2, r1
 8108ee8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8108eea:	6878      	ldr	r0, [r7, #4]
 8108eec:	f000 f812 	bl	8108f14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8108ef0:	687b      	ldr	r3, [r7, #4]
 8108ef2:	681b      	ldr	r3, [r3, #0]
 8108ef4:	68fa      	ldr	r2, [r7, #12]
 8108ef6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8108ef8:	687b      	ldr	r3, [r7, #4]
 8108efa:	2220      	movs	r2, #32
 8108efc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8108f00:	687b      	ldr	r3, [r7, #4]
 8108f02:	2200      	movs	r2, #0
 8108f04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8108f08:	2300      	movs	r3, #0
}
 8108f0a:	4618      	mov	r0, r3
 8108f0c:	3710      	adds	r7, #16
 8108f0e:	46bd      	mov	sp, r7
 8108f10:	bd80      	pop	{r7, pc}
	...

08108f14 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8108f14:	b480      	push	{r7}
 8108f16:	b085      	sub	sp, #20
 8108f18:	af00      	add	r7, sp, #0
 8108f1a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8108f1c:	687b      	ldr	r3, [r7, #4]
 8108f1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8108f20:	2b00      	cmp	r3, #0
 8108f22:	d108      	bne.n	8108f36 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8108f24:	687b      	ldr	r3, [r7, #4]
 8108f26:	2201      	movs	r2, #1
 8108f28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8108f2c:	687b      	ldr	r3, [r7, #4]
 8108f2e:	2201      	movs	r2, #1
 8108f30:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8108f34:	e031      	b.n	8108f9a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8108f36:	2310      	movs	r3, #16
 8108f38:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8108f3a:	2310      	movs	r3, #16
 8108f3c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8108f3e:	687b      	ldr	r3, [r7, #4]
 8108f40:	681b      	ldr	r3, [r3, #0]
 8108f42:	689b      	ldr	r3, [r3, #8]
 8108f44:	0e5b      	lsrs	r3, r3, #25
 8108f46:	b2db      	uxtb	r3, r3
 8108f48:	f003 0307 	and.w	r3, r3, #7
 8108f4c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8108f4e:	687b      	ldr	r3, [r7, #4]
 8108f50:	681b      	ldr	r3, [r3, #0]
 8108f52:	689b      	ldr	r3, [r3, #8]
 8108f54:	0f5b      	lsrs	r3, r3, #29
 8108f56:	b2db      	uxtb	r3, r3
 8108f58:	f003 0307 	and.w	r3, r3, #7
 8108f5c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8108f5e:	7bbb      	ldrb	r3, [r7, #14]
 8108f60:	7b3a      	ldrb	r2, [r7, #12]
 8108f62:	4911      	ldr	r1, [pc, #68]	; (8108fa8 <UARTEx_SetNbDataToProcess+0x94>)
 8108f64:	5c8a      	ldrb	r2, [r1, r2]
 8108f66:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8108f6a:	7b3a      	ldrb	r2, [r7, #12]
 8108f6c:	490f      	ldr	r1, [pc, #60]	; (8108fac <UARTEx_SetNbDataToProcess+0x98>)
 8108f6e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8108f70:	fb93 f3f2 	sdiv	r3, r3, r2
 8108f74:	b29a      	uxth	r2, r3
 8108f76:	687b      	ldr	r3, [r7, #4]
 8108f78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8108f7c:	7bfb      	ldrb	r3, [r7, #15]
 8108f7e:	7b7a      	ldrb	r2, [r7, #13]
 8108f80:	4909      	ldr	r1, [pc, #36]	; (8108fa8 <UARTEx_SetNbDataToProcess+0x94>)
 8108f82:	5c8a      	ldrb	r2, [r1, r2]
 8108f84:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8108f88:	7b7a      	ldrb	r2, [r7, #13]
 8108f8a:	4908      	ldr	r1, [pc, #32]	; (8108fac <UARTEx_SetNbDataToProcess+0x98>)
 8108f8c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8108f8e:	fb93 f3f2 	sdiv	r3, r3, r2
 8108f92:	b29a      	uxth	r2, r3
 8108f94:	687b      	ldr	r3, [r7, #4]
 8108f96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8108f9a:	bf00      	nop
 8108f9c:	3714      	adds	r7, #20
 8108f9e:	46bd      	mov	sp, r7
 8108fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108fa4:	4770      	bx	lr
 8108fa6:	bf00      	nop
 8108fa8:	0810e778 	.word	0x0810e778
 8108fac:	0810e780 	.word	0x0810e780

08108fb0 <__cvt>:
 8108fb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8108fb4:	ec55 4b10 	vmov	r4, r5, d0
 8108fb8:	2d00      	cmp	r5, #0
 8108fba:	460e      	mov	r6, r1
 8108fbc:	4619      	mov	r1, r3
 8108fbe:	462b      	mov	r3, r5
 8108fc0:	bfbb      	ittet	lt
 8108fc2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8108fc6:	461d      	movlt	r5, r3
 8108fc8:	2300      	movge	r3, #0
 8108fca:	232d      	movlt	r3, #45	; 0x2d
 8108fcc:	700b      	strb	r3, [r1, #0]
 8108fce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8108fd0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8108fd4:	4691      	mov	r9, r2
 8108fd6:	f023 0820 	bic.w	r8, r3, #32
 8108fda:	bfbc      	itt	lt
 8108fdc:	4622      	movlt	r2, r4
 8108fde:	4614      	movlt	r4, r2
 8108fe0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8108fe4:	d005      	beq.n	8108ff2 <__cvt+0x42>
 8108fe6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8108fea:	d100      	bne.n	8108fee <__cvt+0x3e>
 8108fec:	3601      	adds	r6, #1
 8108fee:	2102      	movs	r1, #2
 8108ff0:	e000      	b.n	8108ff4 <__cvt+0x44>
 8108ff2:	2103      	movs	r1, #3
 8108ff4:	ab03      	add	r3, sp, #12
 8108ff6:	9301      	str	r3, [sp, #4]
 8108ff8:	ab02      	add	r3, sp, #8
 8108ffa:	9300      	str	r3, [sp, #0]
 8108ffc:	ec45 4b10 	vmov	d0, r4, r5
 8109000:	4653      	mov	r3, sl
 8109002:	4632      	mov	r2, r6
 8109004:	f001 ff54 	bl	810aeb0 <_dtoa_r>
 8109008:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 810900c:	4607      	mov	r7, r0
 810900e:	d102      	bne.n	8109016 <__cvt+0x66>
 8109010:	f019 0f01 	tst.w	r9, #1
 8109014:	d022      	beq.n	810905c <__cvt+0xac>
 8109016:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 810901a:	eb07 0906 	add.w	r9, r7, r6
 810901e:	d110      	bne.n	8109042 <__cvt+0x92>
 8109020:	783b      	ldrb	r3, [r7, #0]
 8109022:	2b30      	cmp	r3, #48	; 0x30
 8109024:	d10a      	bne.n	810903c <__cvt+0x8c>
 8109026:	2200      	movs	r2, #0
 8109028:	2300      	movs	r3, #0
 810902a:	4620      	mov	r0, r4
 810902c:	4629      	mov	r1, r5
 810902e:	f7f7 fdd3 	bl	8100bd8 <__aeabi_dcmpeq>
 8109032:	b918      	cbnz	r0, 810903c <__cvt+0x8c>
 8109034:	f1c6 0601 	rsb	r6, r6, #1
 8109038:	f8ca 6000 	str.w	r6, [sl]
 810903c:	f8da 3000 	ldr.w	r3, [sl]
 8109040:	4499      	add	r9, r3
 8109042:	2200      	movs	r2, #0
 8109044:	2300      	movs	r3, #0
 8109046:	4620      	mov	r0, r4
 8109048:	4629      	mov	r1, r5
 810904a:	f7f7 fdc5 	bl	8100bd8 <__aeabi_dcmpeq>
 810904e:	b108      	cbz	r0, 8109054 <__cvt+0xa4>
 8109050:	f8cd 900c 	str.w	r9, [sp, #12]
 8109054:	2230      	movs	r2, #48	; 0x30
 8109056:	9b03      	ldr	r3, [sp, #12]
 8109058:	454b      	cmp	r3, r9
 810905a:	d307      	bcc.n	810906c <__cvt+0xbc>
 810905c:	9b03      	ldr	r3, [sp, #12]
 810905e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8109060:	1bdb      	subs	r3, r3, r7
 8109062:	4638      	mov	r0, r7
 8109064:	6013      	str	r3, [r2, #0]
 8109066:	b004      	add	sp, #16
 8109068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810906c:	1c59      	adds	r1, r3, #1
 810906e:	9103      	str	r1, [sp, #12]
 8109070:	701a      	strb	r2, [r3, #0]
 8109072:	e7f0      	b.n	8109056 <__cvt+0xa6>

08109074 <__exponent>:
 8109074:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8109076:	4603      	mov	r3, r0
 8109078:	2900      	cmp	r1, #0
 810907a:	bfb8      	it	lt
 810907c:	4249      	neglt	r1, r1
 810907e:	f803 2b02 	strb.w	r2, [r3], #2
 8109082:	bfb4      	ite	lt
 8109084:	222d      	movlt	r2, #45	; 0x2d
 8109086:	222b      	movge	r2, #43	; 0x2b
 8109088:	2909      	cmp	r1, #9
 810908a:	7042      	strb	r2, [r0, #1]
 810908c:	dd2a      	ble.n	81090e4 <__exponent+0x70>
 810908e:	f10d 0207 	add.w	r2, sp, #7
 8109092:	4617      	mov	r7, r2
 8109094:	260a      	movs	r6, #10
 8109096:	4694      	mov	ip, r2
 8109098:	fb91 f5f6 	sdiv	r5, r1, r6
 810909c:	fb06 1415 	mls	r4, r6, r5, r1
 81090a0:	3430      	adds	r4, #48	; 0x30
 81090a2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 81090a6:	460c      	mov	r4, r1
 81090a8:	2c63      	cmp	r4, #99	; 0x63
 81090aa:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 81090ae:	4629      	mov	r1, r5
 81090b0:	dcf1      	bgt.n	8109096 <__exponent+0x22>
 81090b2:	3130      	adds	r1, #48	; 0x30
 81090b4:	f1ac 0402 	sub.w	r4, ip, #2
 81090b8:	f802 1c01 	strb.w	r1, [r2, #-1]
 81090bc:	1c41      	adds	r1, r0, #1
 81090be:	4622      	mov	r2, r4
 81090c0:	42ba      	cmp	r2, r7
 81090c2:	d30a      	bcc.n	81090da <__exponent+0x66>
 81090c4:	f10d 0209 	add.w	r2, sp, #9
 81090c8:	eba2 020c 	sub.w	r2, r2, ip
 81090cc:	42bc      	cmp	r4, r7
 81090ce:	bf88      	it	hi
 81090d0:	2200      	movhi	r2, #0
 81090d2:	4413      	add	r3, r2
 81090d4:	1a18      	subs	r0, r3, r0
 81090d6:	b003      	add	sp, #12
 81090d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 81090da:	f812 5b01 	ldrb.w	r5, [r2], #1
 81090de:	f801 5f01 	strb.w	r5, [r1, #1]!
 81090e2:	e7ed      	b.n	81090c0 <__exponent+0x4c>
 81090e4:	2330      	movs	r3, #48	; 0x30
 81090e6:	3130      	adds	r1, #48	; 0x30
 81090e8:	7083      	strb	r3, [r0, #2]
 81090ea:	70c1      	strb	r1, [r0, #3]
 81090ec:	1d03      	adds	r3, r0, #4
 81090ee:	e7f1      	b.n	81090d4 <__exponent+0x60>

081090f0 <_printf_float>:
 81090f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81090f4:	ed2d 8b02 	vpush	{d8}
 81090f8:	b08d      	sub	sp, #52	; 0x34
 81090fa:	460c      	mov	r4, r1
 81090fc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8109100:	4616      	mov	r6, r2
 8109102:	461f      	mov	r7, r3
 8109104:	4605      	mov	r5, r0
 8109106:	f001 fdcf 	bl	810aca8 <_localeconv_r>
 810910a:	f8d0 a000 	ldr.w	sl, [r0]
 810910e:	4650      	mov	r0, sl
 8109110:	f7f7 f936 	bl	8100380 <strlen>
 8109114:	2300      	movs	r3, #0
 8109116:	930a      	str	r3, [sp, #40]	; 0x28
 8109118:	6823      	ldr	r3, [r4, #0]
 810911a:	9305      	str	r3, [sp, #20]
 810911c:	f8d8 3000 	ldr.w	r3, [r8]
 8109120:	f894 b018 	ldrb.w	fp, [r4, #24]
 8109124:	3307      	adds	r3, #7
 8109126:	f023 0307 	bic.w	r3, r3, #7
 810912a:	f103 0208 	add.w	r2, r3, #8
 810912e:	f8c8 2000 	str.w	r2, [r8]
 8109132:	e9d3 8900 	ldrd	r8, r9, [r3]
 8109136:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 810913a:	9307      	str	r3, [sp, #28]
 810913c:	f8cd 8018 	str.w	r8, [sp, #24]
 8109140:	ee08 0a10 	vmov	s16, r0
 8109144:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8109148:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810914c:	4b9e      	ldr	r3, [pc, #632]	; (81093c8 <_printf_float+0x2d8>)
 810914e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8109152:	f7f7 fd73 	bl	8100c3c <__aeabi_dcmpun>
 8109156:	bb88      	cbnz	r0, 81091bc <_printf_float+0xcc>
 8109158:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810915c:	4b9a      	ldr	r3, [pc, #616]	; (81093c8 <_printf_float+0x2d8>)
 810915e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8109162:	f7f7 fd4d 	bl	8100c00 <__aeabi_dcmple>
 8109166:	bb48      	cbnz	r0, 81091bc <_printf_float+0xcc>
 8109168:	2200      	movs	r2, #0
 810916a:	2300      	movs	r3, #0
 810916c:	4640      	mov	r0, r8
 810916e:	4649      	mov	r1, r9
 8109170:	f7f7 fd3c 	bl	8100bec <__aeabi_dcmplt>
 8109174:	b110      	cbz	r0, 810917c <_printf_float+0x8c>
 8109176:	232d      	movs	r3, #45	; 0x2d
 8109178:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810917c:	4a93      	ldr	r2, [pc, #588]	; (81093cc <_printf_float+0x2dc>)
 810917e:	4b94      	ldr	r3, [pc, #592]	; (81093d0 <_printf_float+0x2e0>)
 8109180:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8109184:	bf94      	ite	ls
 8109186:	4690      	movls	r8, r2
 8109188:	4698      	movhi	r8, r3
 810918a:	2303      	movs	r3, #3
 810918c:	6123      	str	r3, [r4, #16]
 810918e:	9b05      	ldr	r3, [sp, #20]
 8109190:	f023 0304 	bic.w	r3, r3, #4
 8109194:	6023      	str	r3, [r4, #0]
 8109196:	f04f 0900 	mov.w	r9, #0
 810919a:	9700      	str	r7, [sp, #0]
 810919c:	4633      	mov	r3, r6
 810919e:	aa0b      	add	r2, sp, #44	; 0x2c
 81091a0:	4621      	mov	r1, r4
 81091a2:	4628      	mov	r0, r5
 81091a4:	f000 f9da 	bl	810955c <_printf_common>
 81091a8:	3001      	adds	r0, #1
 81091aa:	f040 8090 	bne.w	81092ce <_printf_float+0x1de>
 81091ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 81091b2:	b00d      	add	sp, #52	; 0x34
 81091b4:	ecbd 8b02 	vpop	{d8}
 81091b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81091bc:	4642      	mov	r2, r8
 81091be:	464b      	mov	r3, r9
 81091c0:	4640      	mov	r0, r8
 81091c2:	4649      	mov	r1, r9
 81091c4:	f7f7 fd3a 	bl	8100c3c <__aeabi_dcmpun>
 81091c8:	b140      	cbz	r0, 81091dc <_printf_float+0xec>
 81091ca:	464b      	mov	r3, r9
 81091cc:	2b00      	cmp	r3, #0
 81091ce:	bfbc      	itt	lt
 81091d0:	232d      	movlt	r3, #45	; 0x2d
 81091d2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 81091d6:	4a7f      	ldr	r2, [pc, #508]	; (81093d4 <_printf_float+0x2e4>)
 81091d8:	4b7f      	ldr	r3, [pc, #508]	; (81093d8 <_printf_float+0x2e8>)
 81091da:	e7d1      	b.n	8109180 <_printf_float+0x90>
 81091dc:	6863      	ldr	r3, [r4, #4]
 81091de:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 81091e2:	9206      	str	r2, [sp, #24]
 81091e4:	1c5a      	adds	r2, r3, #1
 81091e6:	d13f      	bne.n	8109268 <_printf_float+0x178>
 81091e8:	2306      	movs	r3, #6
 81091ea:	6063      	str	r3, [r4, #4]
 81091ec:	9b05      	ldr	r3, [sp, #20]
 81091ee:	6861      	ldr	r1, [r4, #4]
 81091f0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 81091f4:	2300      	movs	r3, #0
 81091f6:	9303      	str	r3, [sp, #12]
 81091f8:	ab0a      	add	r3, sp, #40	; 0x28
 81091fa:	e9cd b301 	strd	fp, r3, [sp, #4]
 81091fe:	ab09      	add	r3, sp, #36	; 0x24
 8109200:	ec49 8b10 	vmov	d0, r8, r9
 8109204:	9300      	str	r3, [sp, #0]
 8109206:	6022      	str	r2, [r4, #0]
 8109208:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 810920c:	4628      	mov	r0, r5
 810920e:	f7ff fecf 	bl	8108fb0 <__cvt>
 8109212:	9b06      	ldr	r3, [sp, #24]
 8109214:	9909      	ldr	r1, [sp, #36]	; 0x24
 8109216:	2b47      	cmp	r3, #71	; 0x47
 8109218:	4680      	mov	r8, r0
 810921a:	d108      	bne.n	810922e <_printf_float+0x13e>
 810921c:	1cc8      	adds	r0, r1, #3
 810921e:	db02      	blt.n	8109226 <_printf_float+0x136>
 8109220:	6863      	ldr	r3, [r4, #4]
 8109222:	4299      	cmp	r1, r3
 8109224:	dd41      	ble.n	81092aa <_printf_float+0x1ba>
 8109226:	f1ab 0302 	sub.w	r3, fp, #2
 810922a:	fa5f fb83 	uxtb.w	fp, r3
 810922e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8109232:	d820      	bhi.n	8109276 <_printf_float+0x186>
 8109234:	3901      	subs	r1, #1
 8109236:	465a      	mov	r2, fp
 8109238:	f104 0050 	add.w	r0, r4, #80	; 0x50
 810923c:	9109      	str	r1, [sp, #36]	; 0x24
 810923e:	f7ff ff19 	bl	8109074 <__exponent>
 8109242:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8109244:	1813      	adds	r3, r2, r0
 8109246:	2a01      	cmp	r2, #1
 8109248:	4681      	mov	r9, r0
 810924a:	6123      	str	r3, [r4, #16]
 810924c:	dc02      	bgt.n	8109254 <_printf_float+0x164>
 810924e:	6822      	ldr	r2, [r4, #0]
 8109250:	07d2      	lsls	r2, r2, #31
 8109252:	d501      	bpl.n	8109258 <_printf_float+0x168>
 8109254:	3301      	adds	r3, #1
 8109256:	6123      	str	r3, [r4, #16]
 8109258:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 810925c:	2b00      	cmp	r3, #0
 810925e:	d09c      	beq.n	810919a <_printf_float+0xaa>
 8109260:	232d      	movs	r3, #45	; 0x2d
 8109262:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8109266:	e798      	b.n	810919a <_printf_float+0xaa>
 8109268:	9a06      	ldr	r2, [sp, #24]
 810926a:	2a47      	cmp	r2, #71	; 0x47
 810926c:	d1be      	bne.n	81091ec <_printf_float+0xfc>
 810926e:	2b00      	cmp	r3, #0
 8109270:	d1bc      	bne.n	81091ec <_printf_float+0xfc>
 8109272:	2301      	movs	r3, #1
 8109274:	e7b9      	b.n	81091ea <_printf_float+0xfa>
 8109276:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 810927a:	d118      	bne.n	81092ae <_printf_float+0x1be>
 810927c:	2900      	cmp	r1, #0
 810927e:	6863      	ldr	r3, [r4, #4]
 8109280:	dd0b      	ble.n	810929a <_printf_float+0x1aa>
 8109282:	6121      	str	r1, [r4, #16]
 8109284:	b913      	cbnz	r3, 810928c <_printf_float+0x19c>
 8109286:	6822      	ldr	r2, [r4, #0]
 8109288:	07d0      	lsls	r0, r2, #31
 810928a:	d502      	bpl.n	8109292 <_printf_float+0x1a2>
 810928c:	3301      	adds	r3, #1
 810928e:	440b      	add	r3, r1
 8109290:	6123      	str	r3, [r4, #16]
 8109292:	65a1      	str	r1, [r4, #88]	; 0x58
 8109294:	f04f 0900 	mov.w	r9, #0
 8109298:	e7de      	b.n	8109258 <_printf_float+0x168>
 810929a:	b913      	cbnz	r3, 81092a2 <_printf_float+0x1b2>
 810929c:	6822      	ldr	r2, [r4, #0]
 810929e:	07d2      	lsls	r2, r2, #31
 81092a0:	d501      	bpl.n	81092a6 <_printf_float+0x1b6>
 81092a2:	3302      	adds	r3, #2
 81092a4:	e7f4      	b.n	8109290 <_printf_float+0x1a0>
 81092a6:	2301      	movs	r3, #1
 81092a8:	e7f2      	b.n	8109290 <_printf_float+0x1a0>
 81092aa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 81092ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81092b0:	4299      	cmp	r1, r3
 81092b2:	db05      	blt.n	81092c0 <_printf_float+0x1d0>
 81092b4:	6823      	ldr	r3, [r4, #0]
 81092b6:	6121      	str	r1, [r4, #16]
 81092b8:	07d8      	lsls	r0, r3, #31
 81092ba:	d5ea      	bpl.n	8109292 <_printf_float+0x1a2>
 81092bc:	1c4b      	adds	r3, r1, #1
 81092be:	e7e7      	b.n	8109290 <_printf_float+0x1a0>
 81092c0:	2900      	cmp	r1, #0
 81092c2:	bfd4      	ite	le
 81092c4:	f1c1 0202 	rsble	r2, r1, #2
 81092c8:	2201      	movgt	r2, #1
 81092ca:	4413      	add	r3, r2
 81092cc:	e7e0      	b.n	8109290 <_printf_float+0x1a0>
 81092ce:	6823      	ldr	r3, [r4, #0]
 81092d0:	055a      	lsls	r2, r3, #21
 81092d2:	d407      	bmi.n	81092e4 <_printf_float+0x1f4>
 81092d4:	6923      	ldr	r3, [r4, #16]
 81092d6:	4642      	mov	r2, r8
 81092d8:	4631      	mov	r1, r6
 81092da:	4628      	mov	r0, r5
 81092dc:	47b8      	blx	r7
 81092de:	3001      	adds	r0, #1
 81092e0:	d12c      	bne.n	810933c <_printf_float+0x24c>
 81092e2:	e764      	b.n	81091ae <_printf_float+0xbe>
 81092e4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 81092e8:	f240 80e0 	bls.w	81094ac <_printf_float+0x3bc>
 81092ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 81092f0:	2200      	movs	r2, #0
 81092f2:	2300      	movs	r3, #0
 81092f4:	f7f7 fc70 	bl	8100bd8 <__aeabi_dcmpeq>
 81092f8:	2800      	cmp	r0, #0
 81092fa:	d034      	beq.n	8109366 <_printf_float+0x276>
 81092fc:	4a37      	ldr	r2, [pc, #220]	; (81093dc <_printf_float+0x2ec>)
 81092fe:	2301      	movs	r3, #1
 8109300:	4631      	mov	r1, r6
 8109302:	4628      	mov	r0, r5
 8109304:	47b8      	blx	r7
 8109306:	3001      	adds	r0, #1
 8109308:	f43f af51 	beq.w	81091ae <_printf_float+0xbe>
 810930c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8109310:	429a      	cmp	r2, r3
 8109312:	db02      	blt.n	810931a <_printf_float+0x22a>
 8109314:	6823      	ldr	r3, [r4, #0]
 8109316:	07d8      	lsls	r0, r3, #31
 8109318:	d510      	bpl.n	810933c <_printf_float+0x24c>
 810931a:	ee18 3a10 	vmov	r3, s16
 810931e:	4652      	mov	r2, sl
 8109320:	4631      	mov	r1, r6
 8109322:	4628      	mov	r0, r5
 8109324:	47b8      	blx	r7
 8109326:	3001      	adds	r0, #1
 8109328:	f43f af41 	beq.w	81091ae <_printf_float+0xbe>
 810932c:	f04f 0800 	mov.w	r8, #0
 8109330:	f104 091a 	add.w	r9, r4, #26
 8109334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8109336:	3b01      	subs	r3, #1
 8109338:	4543      	cmp	r3, r8
 810933a:	dc09      	bgt.n	8109350 <_printf_float+0x260>
 810933c:	6823      	ldr	r3, [r4, #0]
 810933e:	079b      	lsls	r3, r3, #30
 8109340:	f100 8107 	bmi.w	8109552 <_printf_float+0x462>
 8109344:	68e0      	ldr	r0, [r4, #12]
 8109346:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8109348:	4298      	cmp	r0, r3
 810934a:	bfb8      	it	lt
 810934c:	4618      	movlt	r0, r3
 810934e:	e730      	b.n	81091b2 <_printf_float+0xc2>
 8109350:	2301      	movs	r3, #1
 8109352:	464a      	mov	r2, r9
 8109354:	4631      	mov	r1, r6
 8109356:	4628      	mov	r0, r5
 8109358:	47b8      	blx	r7
 810935a:	3001      	adds	r0, #1
 810935c:	f43f af27 	beq.w	81091ae <_printf_float+0xbe>
 8109360:	f108 0801 	add.w	r8, r8, #1
 8109364:	e7e6      	b.n	8109334 <_printf_float+0x244>
 8109366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8109368:	2b00      	cmp	r3, #0
 810936a:	dc39      	bgt.n	81093e0 <_printf_float+0x2f0>
 810936c:	4a1b      	ldr	r2, [pc, #108]	; (81093dc <_printf_float+0x2ec>)
 810936e:	2301      	movs	r3, #1
 8109370:	4631      	mov	r1, r6
 8109372:	4628      	mov	r0, r5
 8109374:	47b8      	blx	r7
 8109376:	3001      	adds	r0, #1
 8109378:	f43f af19 	beq.w	81091ae <_printf_float+0xbe>
 810937c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8109380:	4313      	orrs	r3, r2
 8109382:	d102      	bne.n	810938a <_printf_float+0x29a>
 8109384:	6823      	ldr	r3, [r4, #0]
 8109386:	07d9      	lsls	r1, r3, #31
 8109388:	d5d8      	bpl.n	810933c <_printf_float+0x24c>
 810938a:	ee18 3a10 	vmov	r3, s16
 810938e:	4652      	mov	r2, sl
 8109390:	4631      	mov	r1, r6
 8109392:	4628      	mov	r0, r5
 8109394:	47b8      	blx	r7
 8109396:	3001      	adds	r0, #1
 8109398:	f43f af09 	beq.w	81091ae <_printf_float+0xbe>
 810939c:	f04f 0900 	mov.w	r9, #0
 81093a0:	f104 0a1a 	add.w	sl, r4, #26
 81093a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81093a6:	425b      	negs	r3, r3
 81093a8:	454b      	cmp	r3, r9
 81093aa:	dc01      	bgt.n	81093b0 <_printf_float+0x2c0>
 81093ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81093ae:	e792      	b.n	81092d6 <_printf_float+0x1e6>
 81093b0:	2301      	movs	r3, #1
 81093b2:	4652      	mov	r2, sl
 81093b4:	4631      	mov	r1, r6
 81093b6:	4628      	mov	r0, r5
 81093b8:	47b8      	blx	r7
 81093ba:	3001      	adds	r0, #1
 81093bc:	f43f aef7 	beq.w	81091ae <_printf_float+0xbe>
 81093c0:	f109 0901 	add.w	r9, r9, #1
 81093c4:	e7ee      	b.n	81093a4 <_printf_float+0x2b4>
 81093c6:	bf00      	nop
 81093c8:	7fefffff 	.word	0x7fefffff
 81093cc:	0810e788 	.word	0x0810e788
 81093d0:	0810e78c 	.word	0x0810e78c
 81093d4:	0810e790 	.word	0x0810e790
 81093d8:	0810e794 	.word	0x0810e794
 81093dc:	0810e798 	.word	0x0810e798
 81093e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 81093e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 81093e4:	429a      	cmp	r2, r3
 81093e6:	bfa8      	it	ge
 81093e8:	461a      	movge	r2, r3
 81093ea:	2a00      	cmp	r2, #0
 81093ec:	4691      	mov	r9, r2
 81093ee:	dc37      	bgt.n	8109460 <_printf_float+0x370>
 81093f0:	f04f 0b00 	mov.w	fp, #0
 81093f4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 81093f8:	f104 021a 	add.w	r2, r4, #26
 81093fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 81093fe:	9305      	str	r3, [sp, #20]
 8109400:	eba3 0309 	sub.w	r3, r3, r9
 8109404:	455b      	cmp	r3, fp
 8109406:	dc33      	bgt.n	8109470 <_printf_float+0x380>
 8109408:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810940c:	429a      	cmp	r2, r3
 810940e:	db3b      	blt.n	8109488 <_printf_float+0x398>
 8109410:	6823      	ldr	r3, [r4, #0]
 8109412:	07da      	lsls	r2, r3, #31
 8109414:	d438      	bmi.n	8109488 <_printf_float+0x398>
 8109416:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 810941a:	eba2 0903 	sub.w	r9, r2, r3
 810941e:	9b05      	ldr	r3, [sp, #20]
 8109420:	1ad2      	subs	r2, r2, r3
 8109422:	4591      	cmp	r9, r2
 8109424:	bfa8      	it	ge
 8109426:	4691      	movge	r9, r2
 8109428:	f1b9 0f00 	cmp.w	r9, #0
 810942c:	dc35      	bgt.n	810949a <_printf_float+0x3aa>
 810942e:	f04f 0800 	mov.w	r8, #0
 8109432:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8109436:	f104 0a1a 	add.w	sl, r4, #26
 810943a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810943e:	1a9b      	subs	r3, r3, r2
 8109440:	eba3 0309 	sub.w	r3, r3, r9
 8109444:	4543      	cmp	r3, r8
 8109446:	f77f af79 	ble.w	810933c <_printf_float+0x24c>
 810944a:	2301      	movs	r3, #1
 810944c:	4652      	mov	r2, sl
 810944e:	4631      	mov	r1, r6
 8109450:	4628      	mov	r0, r5
 8109452:	47b8      	blx	r7
 8109454:	3001      	adds	r0, #1
 8109456:	f43f aeaa 	beq.w	81091ae <_printf_float+0xbe>
 810945a:	f108 0801 	add.w	r8, r8, #1
 810945e:	e7ec      	b.n	810943a <_printf_float+0x34a>
 8109460:	4613      	mov	r3, r2
 8109462:	4631      	mov	r1, r6
 8109464:	4642      	mov	r2, r8
 8109466:	4628      	mov	r0, r5
 8109468:	47b8      	blx	r7
 810946a:	3001      	adds	r0, #1
 810946c:	d1c0      	bne.n	81093f0 <_printf_float+0x300>
 810946e:	e69e      	b.n	81091ae <_printf_float+0xbe>
 8109470:	2301      	movs	r3, #1
 8109472:	4631      	mov	r1, r6
 8109474:	4628      	mov	r0, r5
 8109476:	9205      	str	r2, [sp, #20]
 8109478:	47b8      	blx	r7
 810947a:	3001      	adds	r0, #1
 810947c:	f43f ae97 	beq.w	81091ae <_printf_float+0xbe>
 8109480:	9a05      	ldr	r2, [sp, #20]
 8109482:	f10b 0b01 	add.w	fp, fp, #1
 8109486:	e7b9      	b.n	81093fc <_printf_float+0x30c>
 8109488:	ee18 3a10 	vmov	r3, s16
 810948c:	4652      	mov	r2, sl
 810948e:	4631      	mov	r1, r6
 8109490:	4628      	mov	r0, r5
 8109492:	47b8      	blx	r7
 8109494:	3001      	adds	r0, #1
 8109496:	d1be      	bne.n	8109416 <_printf_float+0x326>
 8109498:	e689      	b.n	81091ae <_printf_float+0xbe>
 810949a:	9a05      	ldr	r2, [sp, #20]
 810949c:	464b      	mov	r3, r9
 810949e:	4442      	add	r2, r8
 81094a0:	4631      	mov	r1, r6
 81094a2:	4628      	mov	r0, r5
 81094a4:	47b8      	blx	r7
 81094a6:	3001      	adds	r0, #1
 81094a8:	d1c1      	bne.n	810942e <_printf_float+0x33e>
 81094aa:	e680      	b.n	81091ae <_printf_float+0xbe>
 81094ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 81094ae:	2a01      	cmp	r2, #1
 81094b0:	dc01      	bgt.n	81094b6 <_printf_float+0x3c6>
 81094b2:	07db      	lsls	r3, r3, #31
 81094b4:	d53a      	bpl.n	810952c <_printf_float+0x43c>
 81094b6:	2301      	movs	r3, #1
 81094b8:	4642      	mov	r2, r8
 81094ba:	4631      	mov	r1, r6
 81094bc:	4628      	mov	r0, r5
 81094be:	47b8      	blx	r7
 81094c0:	3001      	adds	r0, #1
 81094c2:	f43f ae74 	beq.w	81091ae <_printf_float+0xbe>
 81094c6:	ee18 3a10 	vmov	r3, s16
 81094ca:	4652      	mov	r2, sl
 81094cc:	4631      	mov	r1, r6
 81094ce:	4628      	mov	r0, r5
 81094d0:	47b8      	blx	r7
 81094d2:	3001      	adds	r0, #1
 81094d4:	f43f ae6b 	beq.w	81091ae <_printf_float+0xbe>
 81094d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 81094dc:	2200      	movs	r2, #0
 81094de:	2300      	movs	r3, #0
 81094e0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 81094e4:	f7f7 fb78 	bl	8100bd8 <__aeabi_dcmpeq>
 81094e8:	b9d8      	cbnz	r0, 8109522 <_printf_float+0x432>
 81094ea:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 81094ee:	f108 0201 	add.w	r2, r8, #1
 81094f2:	4631      	mov	r1, r6
 81094f4:	4628      	mov	r0, r5
 81094f6:	47b8      	blx	r7
 81094f8:	3001      	adds	r0, #1
 81094fa:	d10e      	bne.n	810951a <_printf_float+0x42a>
 81094fc:	e657      	b.n	81091ae <_printf_float+0xbe>
 81094fe:	2301      	movs	r3, #1
 8109500:	4652      	mov	r2, sl
 8109502:	4631      	mov	r1, r6
 8109504:	4628      	mov	r0, r5
 8109506:	47b8      	blx	r7
 8109508:	3001      	adds	r0, #1
 810950a:	f43f ae50 	beq.w	81091ae <_printf_float+0xbe>
 810950e:	f108 0801 	add.w	r8, r8, #1
 8109512:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8109514:	3b01      	subs	r3, #1
 8109516:	4543      	cmp	r3, r8
 8109518:	dcf1      	bgt.n	81094fe <_printf_float+0x40e>
 810951a:	464b      	mov	r3, r9
 810951c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8109520:	e6da      	b.n	81092d8 <_printf_float+0x1e8>
 8109522:	f04f 0800 	mov.w	r8, #0
 8109526:	f104 0a1a 	add.w	sl, r4, #26
 810952a:	e7f2      	b.n	8109512 <_printf_float+0x422>
 810952c:	2301      	movs	r3, #1
 810952e:	4642      	mov	r2, r8
 8109530:	e7df      	b.n	81094f2 <_printf_float+0x402>
 8109532:	2301      	movs	r3, #1
 8109534:	464a      	mov	r2, r9
 8109536:	4631      	mov	r1, r6
 8109538:	4628      	mov	r0, r5
 810953a:	47b8      	blx	r7
 810953c:	3001      	adds	r0, #1
 810953e:	f43f ae36 	beq.w	81091ae <_printf_float+0xbe>
 8109542:	f108 0801 	add.w	r8, r8, #1
 8109546:	68e3      	ldr	r3, [r4, #12]
 8109548:	990b      	ldr	r1, [sp, #44]	; 0x2c
 810954a:	1a5b      	subs	r3, r3, r1
 810954c:	4543      	cmp	r3, r8
 810954e:	dcf0      	bgt.n	8109532 <_printf_float+0x442>
 8109550:	e6f8      	b.n	8109344 <_printf_float+0x254>
 8109552:	f04f 0800 	mov.w	r8, #0
 8109556:	f104 0919 	add.w	r9, r4, #25
 810955a:	e7f4      	b.n	8109546 <_printf_float+0x456>

0810955c <_printf_common>:
 810955c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8109560:	4616      	mov	r6, r2
 8109562:	4699      	mov	r9, r3
 8109564:	688a      	ldr	r2, [r1, #8]
 8109566:	690b      	ldr	r3, [r1, #16]
 8109568:	f8dd 8020 	ldr.w	r8, [sp, #32]
 810956c:	4293      	cmp	r3, r2
 810956e:	bfb8      	it	lt
 8109570:	4613      	movlt	r3, r2
 8109572:	6033      	str	r3, [r6, #0]
 8109574:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8109578:	4607      	mov	r7, r0
 810957a:	460c      	mov	r4, r1
 810957c:	b10a      	cbz	r2, 8109582 <_printf_common+0x26>
 810957e:	3301      	adds	r3, #1
 8109580:	6033      	str	r3, [r6, #0]
 8109582:	6823      	ldr	r3, [r4, #0]
 8109584:	0699      	lsls	r1, r3, #26
 8109586:	bf42      	ittt	mi
 8109588:	6833      	ldrmi	r3, [r6, #0]
 810958a:	3302      	addmi	r3, #2
 810958c:	6033      	strmi	r3, [r6, #0]
 810958e:	6825      	ldr	r5, [r4, #0]
 8109590:	f015 0506 	ands.w	r5, r5, #6
 8109594:	d106      	bne.n	81095a4 <_printf_common+0x48>
 8109596:	f104 0a19 	add.w	sl, r4, #25
 810959a:	68e3      	ldr	r3, [r4, #12]
 810959c:	6832      	ldr	r2, [r6, #0]
 810959e:	1a9b      	subs	r3, r3, r2
 81095a0:	42ab      	cmp	r3, r5
 81095a2:	dc26      	bgt.n	81095f2 <_printf_common+0x96>
 81095a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 81095a8:	1e13      	subs	r3, r2, #0
 81095aa:	6822      	ldr	r2, [r4, #0]
 81095ac:	bf18      	it	ne
 81095ae:	2301      	movne	r3, #1
 81095b0:	0692      	lsls	r2, r2, #26
 81095b2:	d42b      	bmi.n	810960c <_printf_common+0xb0>
 81095b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 81095b8:	4649      	mov	r1, r9
 81095ba:	4638      	mov	r0, r7
 81095bc:	47c0      	blx	r8
 81095be:	3001      	adds	r0, #1
 81095c0:	d01e      	beq.n	8109600 <_printf_common+0xa4>
 81095c2:	6823      	ldr	r3, [r4, #0]
 81095c4:	6922      	ldr	r2, [r4, #16]
 81095c6:	f003 0306 	and.w	r3, r3, #6
 81095ca:	2b04      	cmp	r3, #4
 81095cc:	bf02      	ittt	eq
 81095ce:	68e5      	ldreq	r5, [r4, #12]
 81095d0:	6833      	ldreq	r3, [r6, #0]
 81095d2:	1aed      	subeq	r5, r5, r3
 81095d4:	68a3      	ldr	r3, [r4, #8]
 81095d6:	bf0c      	ite	eq
 81095d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 81095dc:	2500      	movne	r5, #0
 81095de:	4293      	cmp	r3, r2
 81095e0:	bfc4      	itt	gt
 81095e2:	1a9b      	subgt	r3, r3, r2
 81095e4:	18ed      	addgt	r5, r5, r3
 81095e6:	2600      	movs	r6, #0
 81095e8:	341a      	adds	r4, #26
 81095ea:	42b5      	cmp	r5, r6
 81095ec:	d11a      	bne.n	8109624 <_printf_common+0xc8>
 81095ee:	2000      	movs	r0, #0
 81095f0:	e008      	b.n	8109604 <_printf_common+0xa8>
 81095f2:	2301      	movs	r3, #1
 81095f4:	4652      	mov	r2, sl
 81095f6:	4649      	mov	r1, r9
 81095f8:	4638      	mov	r0, r7
 81095fa:	47c0      	blx	r8
 81095fc:	3001      	adds	r0, #1
 81095fe:	d103      	bne.n	8109608 <_printf_common+0xac>
 8109600:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8109604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8109608:	3501      	adds	r5, #1
 810960a:	e7c6      	b.n	810959a <_printf_common+0x3e>
 810960c:	18e1      	adds	r1, r4, r3
 810960e:	1c5a      	adds	r2, r3, #1
 8109610:	2030      	movs	r0, #48	; 0x30
 8109612:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8109616:	4422      	add	r2, r4
 8109618:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 810961c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8109620:	3302      	adds	r3, #2
 8109622:	e7c7      	b.n	81095b4 <_printf_common+0x58>
 8109624:	2301      	movs	r3, #1
 8109626:	4622      	mov	r2, r4
 8109628:	4649      	mov	r1, r9
 810962a:	4638      	mov	r0, r7
 810962c:	47c0      	blx	r8
 810962e:	3001      	adds	r0, #1
 8109630:	d0e6      	beq.n	8109600 <_printf_common+0xa4>
 8109632:	3601      	adds	r6, #1
 8109634:	e7d9      	b.n	81095ea <_printf_common+0x8e>
	...

08109638 <_printf_i>:
 8109638:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810963c:	7e0f      	ldrb	r7, [r1, #24]
 810963e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8109640:	2f78      	cmp	r7, #120	; 0x78
 8109642:	4691      	mov	r9, r2
 8109644:	4680      	mov	r8, r0
 8109646:	460c      	mov	r4, r1
 8109648:	469a      	mov	sl, r3
 810964a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 810964e:	d807      	bhi.n	8109660 <_printf_i+0x28>
 8109650:	2f62      	cmp	r7, #98	; 0x62
 8109652:	d80a      	bhi.n	810966a <_printf_i+0x32>
 8109654:	2f00      	cmp	r7, #0
 8109656:	f000 80d4 	beq.w	8109802 <_printf_i+0x1ca>
 810965a:	2f58      	cmp	r7, #88	; 0x58
 810965c:	f000 80c0 	beq.w	81097e0 <_printf_i+0x1a8>
 8109660:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8109664:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8109668:	e03a      	b.n	81096e0 <_printf_i+0xa8>
 810966a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 810966e:	2b15      	cmp	r3, #21
 8109670:	d8f6      	bhi.n	8109660 <_printf_i+0x28>
 8109672:	a101      	add	r1, pc, #4	; (adr r1, 8109678 <_printf_i+0x40>)
 8109674:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8109678:	081096d1 	.word	0x081096d1
 810967c:	081096e5 	.word	0x081096e5
 8109680:	08109661 	.word	0x08109661
 8109684:	08109661 	.word	0x08109661
 8109688:	08109661 	.word	0x08109661
 810968c:	08109661 	.word	0x08109661
 8109690:	081096e5 	.word	0x081096e5
 8109694:	08109661 	.word	0x08109661
 8109698:	08109661 	.word	0x08109661
 810969c:	08109661 	.word	0x08109661
 81096a0:	08109661 	.word	0x08109661
 81096a4:	081097e9 	.word	0x081097e9
 81096a8:	08109711 	.word	0x08109711
 81096ac:	081097a3 	.word	0x081097a3
 81096b0:	08109661 	.word	0x08109661
 81096b4:	08109661 	.word	0x08109661
 81096b8:	0810980b 	.word	0x0810980b
 81096bc:	08109661 	.word	0x08109661
 81096c0:	08109711 	.word	0x08109711
 81096c4:	08109661 	.word	0x08109661
 81096c8:	08109661 	.word	0x08109661
 81096cc:	081097ab 	.word	0x081097ab
 81096d0:	682b      	ldr	r3, [r5, #0]
 81096d2:	1d1a      	adds	r2, r3, #4
 81096d4:	681b      	ldr	r3, [r3, #0]
 81096d6:	602a      	str	r2, [r5, #0]
 81096d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 81096dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 81096e0:	2301      	movs	r3, #1
 81096e2:	e09f      	b.n	8109824 <_printf_i+0x1ec>
 81096e4:	6820      	ldr	r0, [r4, #0]
 81096e6:	682b      	ldr	r3, [r5, #0]
 81096e8:	0607      	lsls	r7, r0, #24
 81096ea:	f103 0104 	add.w	r1, r3, #4
 81096ee:	6029      	str	r1, [r5, #0]
 81096f0:	d501      	bpl.n	81096f6 <_printf_i+0xbe>
 81096f2:	681e      	ldr	r6, [r3, #0]
 81096f4:	e003      	b.n	81096fe <_printf_i+0xc6>
 81096f6:	0646      	lsls	r6, r0, #25
 81096f8:	d5fb      	bpl.n	81096f2 <_printf_i+0xba>
 81096fa:	f9b3 6000 	ldrsh.w	r6, [r3]
 81096fe:	2e00      	cmp	r6, #0
 8109700:	da03      	bge.n	810970a <_printf_i+0xd2>
 8109702:	232d      	movs	r3, #45	; 0x2d
 8109704:	4276      	negs	r6, r6
 8109706:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810970a:	485a      	ldr	r0, [pc, #360]	; (8109874 <_printf_i+0x23c>)
 810970c:	230a      	movs	r3, #10
 810970e:	e012      	b.n	8109736 <_printf_i+0xfe>
 8109710:	682b      	ldr	r3, [r5, #0]
 8109712:	6820      	ldr	r0, [r4, #0]
 8109714:	1d19      	adds	r1, r3, #4
 8109716:	6029      	str	r1, [r5, #0]
 8109718:	0605      	lsls	r5, r0, #24
 810971a:	d501      	bpl.n	8109720 <_printf_i+0xe8>
 810971c:	681e      	ldr	r6, [r3, #0]
 810971e:	e002      	b.n	8109726 <_printf_i+0xee>
 8109720:	0641      	lsls	r1, r0, #25
 8109722:	d5fb      	bpl.n	810971c <_printf_i+0xe4>
 8109724:	881e      	ldrh	r6, [r3, #0]
 8109726:	4853      	ldr	r0, [pc, #332]	; (8109874 <_printf_i+0x23c>)
 8109728:	2f6f      	cmp	r7, #111	; 0x6f
 810972a:	bf0c      	ite	eq
 810972c:	2308      	moveq	r3, #8
 810972e:	230a      	movne	r3, #10
 8109730:	2100      	movs	r1, #0
 8109732:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8109736:	6865      	ldr	r5, [r4, #4]
 8109738:	60a5      	str	r5, [r4, #8]
 810973a:	2d00      	cmp	r5, #0
 810973c:	bfa2      	ittt	ge
 810973e:	6821      	ldrge	r1, [r4, #0]
 8109740:	f021 0104 	bicge.w	r1, r1, #4
 8109744:	6021      	strge	r1, [r4, #0]
 8109746:	b90e      	cbnz	r6, 810974c <_printf_i+0x114>
 8109748:	2d00      	cmp	r5, #0
 810974a:	d04b      	beq.n	81097e4 <_printf_i+0x1ac>
 810974c:	4615      	mov	r5, r2
 810974e:	fbb6 f1f3 	udiv	r1, r6, r3
 8109752:	fb03 6711 	mls	r7, r3, r1, r6
 8109756:	5dc7      	ldrb	r7, [r0, r7]
 8109758:	f805 7d01 	strb.w	r7, [r5, #-1]!
 810975c:	4637      	mov	r7, r6
 810975e:	42bb      	cmp	r3, r7
 8109760:	460e      	mov	r6, r1
 8109762:	d9f4      	bls.n	810974e <_printf_i+0x116>
 8109764:	2b08      	cmp	r3, #8
 8109766:	d10b      	bne.n	8109780 <_printf_i+0x148>
 8109768:	6823      	ldr	r3, [r4, #0]
 810976a:	07de      	lsls	r6, r3, #31
 810976c:	d508      	bpl.n	8109780 <_printf_i+0x148>
 810976e:	6923      	ldr	r3, [r4, #16]
 8109770:	6861      	ldr	r1, [r4, #4]
 8109772:	4299      	cmp	r1, r3
 8109774:	bfde      	ittt	le
 8109776:	2330      	movle	r3, #48	; 0x30
 8109778:	f805 3c01 	strble.w	r3, [r5, #-1]
 810977c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8109780:	1b52      	subs	r2, r2, r5
 8109782:	6122      	str	r2, [r4, #16]
 8109784:	f8cd a000 	str.w	sl, [sp]
 8109788:	464b      	mov	r3, r9
 810978a:	aa03      	add	r2, sp, #12
 810978c:	4621      	mov	r1, r4
 810978e:	4640      	mov	r0, r8
 8109790:	f7ff fee4 	bl	810955c <_printf_common>
 8109794:	3001      	adds	r0, #1
 8109796:	d14a      	bne.n	810982e <_printf_i+0x1f6>
 8109798:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810979c:	b004      	add	sp, #16
 810979e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81097a2:	6823      	ldr	r3, [r4, #0]
 81097a4:	f043 0320 	orr.w	r3, r3, #32
 81097a8:	6023      	str	r3, [r4, #0]
 81097aa:	4833      	ldr	r0, [pc, #204]	; (8109878 <_printf_i+0x240>)
 81097ac:	2778      	movs	r7, #120	; 0x78
 81097ae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 81097b2:	6823      	ldr	r3, [r4, #0]
 81097b4:	6829      	ldr	r1, [r5, #0]
 81097b6:	061f      	lsls	r7, r3, #24
 81097b8:	f851 6b04 	ldr.w	r6, [r1], #4
 81097bc:	d402      	bmi.n	81097c4 <_printf_i+0x18c>
 81097be:	065f      	lsls	r7, r3, #25
 81097c0:	bf48      	it	mi
 81097c2:	b2b6      	uxthmi	r6, r6
 81097c4:	07df      	lsls	r7, r3, #31
 81097c6:	bf48      	it	mi
 81097c8:	f043 0320 	orrmi.w	r3, r3, #32
 81097cc:	6029      	str	r1, [r5, #0]
 81097ce:	bf48      	it	mi
 81097d0:	6023      	strmi	r3, [r4, #0]
 81097d2:	b91e      	cbnz	r6, 81097dc <_printf_i+0x1a4>
 81097d4:	6823      	ldr	r3, [r4, #0]
 81097d6:	f023 0320 	bic.w	r3, r3, #32
 81097da:	6023      	str	r3, [r4, #0]
 81097dc:	2310      	movs	r3, #16
 81097de:	e7a7      	b.n	8109730 <_printf_i+0xf8>
 81097e0:	4824      	ldr	r0, [pc, #144]	; (8109874 <_printf_i+0x23c>)
 81097e2:	e7e4      	b.n	81097ae <_printf_i+0x176>
 81097e4:	4615      	mov	r5, r2
 81097e6:	e7bd      	b.n	8109764 <_printf_i+0x12c>
 81097e8:	682b      	ldr	r3, [r5, #0]
 81097ea:	6826      	ldr	r6, [r4, #0]
 81097ec:	6961      	ldr	r1, [r4, #20]
 81097ee:	1d18      	adds	r0, r3, #4
 81097f0:	6028      	str	r0, [r5, #0]
 81097f2:	0635      	lsls	r5, r6, #24
 81097f4:	681b      	ldr	r3, [r3, #0]
 81097f6:	d501      	bpl.n	81097fc <_printf_i+0x1c4>
 81097f8:	6019      	str	r1, [r3, #0]
 81097fa:	e002      	b.n	8109802 <_printf_i+0x1ca>
 81097fc:	0670      	lsls	r0, r6, #25
 81097fe:	d5fb      	bpl.n	81097f8 <_printf_i+0x1c0>
 8109800:	8019      	strh	r1, [r3, #0]
 8109802:	2300      	movs	r3, #0
 8109804:	6123      	str	r3, [r4, #16]
 8109806:	4615      	mov	r5, r2
 8109808:	e7bc      	b.n	8109784 <_printf_i+0x14c>
 810980a:	682b      	ldr	r3, [r5, #0]
 810980c:	1d1a      	adds	r2, r3, #4
 810980e:	602a      	str	r2, [r5, #0]
 8109810:	681d      	ldr	r5, [r3, #0]
 8109812:	6862      	ldr	r2, [r4, #4]
 8109814:	2100      	movs	r1, #0
 8109816:	4628      	mov	r0, r5
 8109818:	f7f6 fd62 	bl	81002e0 <memchr>
 810981c:	b108      	cbz	r0, 8109822 <_printf_i+0x1ea>
 810981e:	1b40      	subs	r0, r0, r5
 8109820:	6060      	str	r0, [r4, #4]
 8109822:	6863      	ldr	r3, [r4, #4]
 8109824:	6123      	str	r3, [r4, #16]
 8109826:	2300      	movs	r3, #0
 8109828:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810982c:	e7aa      	b.n	8109784 <_printf_i+0x14c>
 810982e:	6923      	ldr	r3, [r4, #16]
 8109830:	462a      	mov	r2, r5
 8109832:	4649      	mov	r1, r9
 8109834:	4640      	mov	r0, r8
 8109836:	47d0      	blx	sl
 8109838:	3001      	adds	r0, #1
 810983a:	d0ad      	beq.n	8109798 <_printf_i+0x160>
 810983c:	6823      	ldr	r3, [r4, #0]
 810983e:	079b      	lsls	r3, r3, #30
 8109840:	d413      	bmi.n	810986a <_printf_i+0x232>
 8109842:	68e0      	ldr	r0, [r4, #12]
 8109844:	9b03      	ldr	r3, [sp, #12]
 8109846:	4298      	cmp	r0, r3
 8109848:	bfb8      	it	lt
 810984a:	4618      	movlt	r0, r3
 810984c:	e7a6      	b.n	810979c <_printf_i+0x164>
 810984e:	2301      	movs	r3, #1
 8109850:	4632      	mov	r2, r6
 8109852:	4649      	mov	r1, r9
 8109854:	4640      	mov	r0, r8
 8109856:	47d0      	blx	sl
 8109858:	3001      	adds	r0, #1
 810985a:	d09d      	beq.n	8109798 <_printf_i+0x160>
 810985c:	3501      	adds	r5, #1
 810985e:	68e3      	ldr	r3, [r4, #12]
 8109860:	9903      	ldr	r1, [sp, #12]
 8109862:	1a5b      	subs	r3, r3, r1
 8109864:	42ab      	cmp	r3, r5
 8109866:	dcf2      	bgt.n	810984e <_printf_i+0x216>
 8109868:	e7eb      	b.n	8109842 <_printf_i+0x20a>
 810986a:	2500      	movs	r5, #0
 810986c:	f104 0619 	add.w	r6, r4, #25
 8109870:	e7f5      	b.n	810985e <_printf_i+0x226>
 8109872:	bf00      	nop
 8109874:	0810e79a 	.word	0x0810e79a
 8109878:	0810e7ab 	.word	0x0810e7ab

0810987c <_scanf_float>:
 810987c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109880:	b087      	sub	sp, #28
 8109882:	4617      	mov	r7, r2
 8109884:	9303      	str	r3, [sp, #12]
 8109886:	688b      	ldr	r3, [r1, #8]
 8109888:	1e5a      	subs	r2, r3, #1
 810988a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 810988e:	bf83      	ittte	hi
 8109890:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8109894:	195b      	addhi	r3, r3, r5
 8109896:	9302      	strhi	r3, [sp, #8]
 8109898:	2300      	movls	r3, #0
 810989a:	bf86      	itte	hi
 810989c:	f240 135d 	movwhi	r3, #349	; 0x15d
 81098a0:	608b      	strhi	r3, [r1, #8]
 81098a2:	9302      	strls	r3, [sp, #8]
 81098a4:	680b      	ldr	r3, [r1, #0]
 81098a6:	468b      	mov	fp, r1
 81098a8:	2500      	movs	r5, #0
 81098aa:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 81098ae:	f84b 3b1c 	str.w	r3, [fp], #28
 81098b2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 81098b6:	4680      	mov	r8, r0
 81098b8:	460c      	mov	r4, r1
 81098ba:	465e      	mov	r6, fp
 81098bc:	46aa      	mov	sl, r5
 81098be:	46a9      	mov	r9, r5
 81098c0:	9501      	str	r5, [sp, #4]
 81098c2:	68a2      	ldr	r2, [r4, #8]
 81098c4:	b152      	cbz	r2, 81098dc <_scanf_float+0x60>
 81098c6:	683b      	ldr	r3, [r7, #0]
 81098c8:	781b      	ldrb	r3, [r3, #0]
 81098ca:	2b4e      	cmp	r3, #78	; 0x4e
 81098cc:	d864      	bhi.n	8109998 <_scanf_float+0x11c>
 81098ce:	2b40      	cmp	r3, #64	; 0x40
 81098d0:	d83c      	bhi.n	810994c <_scanf_float+0xd0>
 81098d2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 81098d6:	b2c8      	uxtb	r0, r1
 81098d8:	280e      	cmp	r0, #14
 81098da:	d93a      	bls.n	8109952 <_scanf_float+0xd6>
 81098dc:	f1b9 0f00 	cmp.w	r9, #0
 81098e0:	d003      	beq.n	81098ea <_scanf_float+0x6e>
 81098e2:	6823      	ldr	r3, [r4, #0]
 81098e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81098e8:	6023      	str	r3, [r4, #0]
 81098ea:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 81098ee:	f1ba 0f01 	cmp.w	sl, #1
 81098f2:	f200 8113 	bhi.w	8109b1c <_scanf_float+0x2a0>
 81098f6:	455e      	cmp	r6, fp
 81098f8:	f200 8105 	bhi.w	8109b06 <_scanf_float+0x28a>
 81098fc:	2501      	movs	r5, #1
 81098fe:	4628      	mov	r0, r5
 8109900:	b007      	add	sp, #28
 8109902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109906:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 810990a:	2a0d      	cmp	r2, #13
 810990c:	d8e6      	bhi.n	81098dc <_scanf_float+0x60>
 810990e:	a101      	add	r1, pc, #4	; (adr r1, 8109914 <_scanf_float+0x98>)
 8109910:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8109914:	08109a53 	.word	0x08109a53
 8109918:	081098dd 	.word	0x081098dd
 810991c:	081098dd 	.word	0x081098dd
 8109920:	081098dd 	.word	0x081098dd
 8109924:	08109ab3 	.word	0x08109ab3
 8109928:	08109a8b 	.word	0x08109a8b
 810992c:	081098dd 	.word	0x081098dd
 8109930:	081098dd 	.word	0x081098dd
 8109934:	08109a61 	.word	0x08109a61
 8109938:	081098dd 	.word	0x081098dd
 810993c:	081098dd 	.word	0x081098dd
 8109940:	081098dd 	.word	0x081098dd
 8109944:	081098dd 	.word	0x081098dd
 8109948:	08109a19 	.word	0x08109a19
 810994c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8109950:	e7db      	b.n	810990a <_scanf_float+0x8e>
 8109952:	290e      	cmp	r1, #14
 8109954:	d8c2      	bhi.n	81098dc <_scanf_float+0x60>
 8109956:	a001      	add	r0, pc, #4	; (adr r0, 810995c <_scanf_float+0xe0>)
 8109958:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 810995c:	08109a0b 	.word	0x08109a0b
 8109960:	081098dd 	.word	0x081098dd
 8109964:	08109a0b 	.word	0x08109a0b
 8109968:	08109a9f 	.word	0x08109a9f
 810996c:	081098dd 	.word	0x081098dd
 8109970:	081099b9 	.word	0x081099b9
 8109974:	081099f5 	.word	0x081099f5
 8109978:	081099f5 	.word	0x081099f5
 810997c:	081099f5 	.word	0x081099f5
 8109980:	081099f5 	.word	0x081099f5
 8109984:	081099f5 	.word	0x081099f5
 8109988:	081099f5 	.word	0x081099f5
 810998c:	081099f5 	.word	0x081099f5
 8109990:	081099f5 	.word	0x081099f5
 8109994:	081099f5 	.word	0x081099f5
 8109998:	2b6e      	cmp	r3, #110	; 0x6e
 810999a:	d809      	bhi.n	81099b0 <_scanf_float+0x134>
 810999c:	2b60      	cmp	r3, #96	; 0x60
 810999e:	d8b2      	bhi.n	8109906 <_scanf_float+0x8a>
 81099a0:	2b54      	cmp	r3, #84	; 0x54
 81099a2:	d077      	beq.n	8109a94 <_scanf_float+0x218>
 81099a4:	2b59      	cmp	r3, #89	; 0x59
 81099a6:	d199      	bne.n	81098dc <_scanf_float+0x60>
 81099a8:	2d07      	cmp	r5, #7
 81099aa:	d197      	bne.n	81098dc <_scanf_float+0x60>
 81099ac:	2508      	movs	r5, #8
 81099ae:	e029      	b.n	8109a04 <_scanf_float+0x188>
 81099b0:	2b74      	cmp	r3, #116	; 0x74
 81099b2:	d06f      	beq.n	8109a94 <_scanf_float+0x218>
 81099b4:	2b79      	cmp	r3, #121	; 0x79
 81099b6:	e7f6      	b.n	81099a6 <_scanf_float+0x12a>
 81099b8:	6821      	ldr	r1, [r4, #0]
 81099ba:	05c8      	lsls	r0, r1, #23
 81099bc:	d51a      	bpl.n	81099f4 <_scanf_float+0x178>
 81099be:	9b02      	ldr	r3, [sp, #8]
 81099c0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 81099c4:	6021      	str	r1, [r4, #0]
 81099c6:	f109 0901 	add.w	r9, r9, #1
 81099ca:	b11b      	cbz	r3, 81099d4 <_scanf_float+0x158>
 81099cc:	3b01      	subs	r3, #1
 81099ce:	3201      	adds	r2, #1
 81099d0:	9302      	str	r3, [sp, #8]
 81099d2:	60a2      	str	r2, [r4, #8]
 81099d4:	68a3      	ldr	r3, [r4, #8]
 81099d6:	3b01      	subs	r3, #1
 81099d8:	60a3      	str	r3, [r4, #8]
 81099da:	6923      	ldr	r3, [r4, #16]
 81099dc:	3301      	adds	r3, #1
 81099de:	6123      	str	r3, [r4, #16]
 81099e0:	687b      	ldr	r3, [r7, #4]
 81099e2:	3b01      	subs	r3, #1
 81099e4:	2b00      	cmp	r3, #0
 81099e6:	607b      	str	r3, [r7, #4]
 81099e8:	f340 8084 	ble.w	8109af4 <_scanf_float+0x278>
 81099ec:	683b      	ldr	r3, [r7, #0]
 81099ee:	3301      	adds	r3, #1
 81099f0:	603b      	str	r3, [r7, #0]
 81099f2:	e766      	b.n	81098c2 <_scanf_float+0x46>
 81099f4:	eb1a 0f05 	cmn.w	sl, r5
 81099f8:	f47f af70 	bne.w	81098dc <_scanf_float+0x60>
 81099fc:	6822      	ldr	r2, [r4, #0]
 81099fe:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8109a02:	6022      	str	r2, [r4, #0]
 8109a04:	f806 3b01 	strb.w	r3, [r6], #1
 8109a08:	e7e4      	b.n	81099d4 <_scanf_float+0x158>
 8109a0a:	6822      	ldr	r2, [r4, #0]
 8109a0c:	0610      	lsls	r0, r2, #24
 8109a0e:	f57f af65 	bpl.w	81098dc <_scanf_float+0x60>
 8109a12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8109a16:	e7f4      	b.n	8109a02 <_scanf_float+0x186>
 8109a18:	f1ba 0f00 	cmp.w	sl, #0
 8109a1c:	d10e      	bne.n	8109a3c <_scanf_float+0x1c0>
 8109a1e:	f1b9 0f00 	cmp.w	r9, #0
 8109a22:	d10e      	bne.n	8109a42 <_scanf_float+0x1c6>
 8109a24:	6822      	ldr	r2, [r4, #0]
 8109a26:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8109a2a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8109a2e:	d108      	bne.n	8109a42 <_scanf_float+0x1c6>
 8109a30:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8109a34:	6022      	str	r2, [r4, #0]
 8109a36:	f04f 0a01 	mov.w	sl, #1
 8109a3a:	e7e3      	b.n	8109a04 <_scanf_float+0x188>
 8109a3c:	f1ba 0f02 	cmp.w	sl, #2
 8109a40:	d055      	beq.n	8109aee <_scanf_float+0x272>
 8109a42:	2d01      	cmp	r5, #1
 8109a44:	d002      	beq.n	8109a4c <_scanf_float+0x1d0>
 8109a46:	2d04      	cmp	r5, #4
 8109a48:	f47f af48 	bne.w	81098dc <_scanf_float+0x60>
 8109a4c:	3501      	adds	r5, #1
 8109a4e:	b2ed      	uxtb	r5, r5
 8109a50:	e7d8      	b.n	8109a04 <_scanf_float+0x188>
 8109a52:	f1ba 0f01 	cmp.w	sl, #1
 8109a56:	f47f af41 	bne.w	81098dc <_scanf_float+0x60>
 8109a5a:	f04f 0a02 	mov.w	sl, #2
 8109a5e:	e7d1      	b.n	8109a04 <_scanf_float+0x188>
 8109a60:	b97d      	cbnz	r5, 8109a82 <_scanf_float+0x206>
 8109a62:	f1b9 0f00 	cmp.w	r9, #0
 8109a66:	f47f af3c 	bne.w	81098e2 <_scanf_float+0x66>
 8109a6a:	6822      	ldr	r2, [r4, #0]
 8109a6c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8109a70:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8109a74:	f47f af39 	bne.w	81098ea <_scanf_float+0x6e>
 8109a78:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8109a7c:	6022      	str	r2, [r4, #0]
 8109a7e:	2501      	movs	r5, #1
 8109a80:	e7c0      	b.n	8109a04 <_scanf_float+0x188>
 8109a82:	2d03      	cmp	r5, #3
 8109a84:	d0e2      	beq.n	8109a4c <_scanf_float+0x1d0>
 8109a86:	2d05      	cmp	r5, #5
 8109a88:	e7de      	b.n	8109a48 <_scanf_float+0x1cc>
 8109a8a:	2d02      	cmp	r5, #2
 8109a8c:	f47f af26 	bne.w	81098dc <_scanf_float+0x60>
 8109a90:	2503      	movs	r5, #3
 8109a92:	e7b7      	b.n	8109a04 <_scanf_float+0x188>
 8109a94:	2d06      	cmp	r5, #6
 8109a96:	f47f af21 	bne.w	81098dc <_scanf_float+0x60>
 8109a9a:	2507      	movs	r5, #7
 8109a9c:	e7b2      	b.n	8109a04 <_scanf_float+0x188>
 8109a9e:	6822      	ldr	r2, [r4, #0]
 8109aa0:	0591      	lsls	r1, r2, #22
 8109aa2:	f57f af1b 	bpl.w	81098dc <_scanf_float+0x60>
 8109aa6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8109aaa:	6022      	str	r2, [r4, #0]
 8109aac:	f8cd 9004 	str.w	r9, [sp, #4]
 8109ab0:	e7a8      	b.n	8109a04 <_scanf_float+0x188>
 8109ab2:	6822      	ldr	r2, [r4, #0]
 8109ab4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8109ab8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8109abc:	d006      	beq.n	8109acc <_scanf_float+0x250>
 8109abe:	0550      	lsls	r0, r2, #21
 8109ac0:	f57f af0c 	bpl.w	81098dc <_scanf_float+0x60>
 8109ac4:	f1b9 0f00 	cmp.w	r9, #0
 8109ac8:	f43f af0f 	beq.w	81098ea <_scanf_float+0x6e>
 8109acc:	0591      	lsls	r1, r2, #22
 8109ace:	bf58      	it	pl
 8109ad0:	9901      	ldrpl	r1, [sp, #4]
 8109ad2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8109ad6:	bf58      	it	pl
 8109ad8:	eba9 0101 	subpl.w	r1, r9, r1
 8109adc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8109ae0:	bf58      	it	pl
 8109ae2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8109ae6:	6022      	str	r2, [r4, #0]
 8109ae8:	f04f 0900 	mov.w	r9, #0
 8109aec:	e78a      	b.n	8109a04 <_scanf_float+0x188>
 8109aee:	f04f 0a03 	mov.w	sl, #3
 8109af2:	e787      	b.n	8109a04 <_scanf_float+0x188>
 8109af4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8109af8:	4639      	mov	r1, r7
 8109afa:	4640      	mov	r0, r8
 8109afc:	4798      	blx	r3
 8109afe:	2800      	cmp	r0, #0
 8109b00:	f43f aedf 	beq.w	81098c2 <_scanf_float+0x46>
 8109b04:	e6ea      	b.n	81098dc <_scanf_float+0x60>
 8109b06:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8109b0a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8109b0e:	463a      	mov	r2, r7
 8109b10:	4640      	mov	r0, r8
 8109b12:	4798      	blx	r3
 8109b14:	6923      	ldr	r3, [r4, #16]
 8109b16:	3b01      	subs	r3, #1
 8109b18:	6123      	str	r3, [r4, #16]
 8109b1a:	e6ec      	b.n	81098f6 <_scanf_float+0x7a>
 8109b1c:	1e6b      	subs	r3, r5, #1
 8109b1e:	2b06      	cmp	r3, #6
 8109b20:	d825      	bhi.n	8109b6e <_scanf_float+0x2f2>
 8109b22:	2d02      	cmp	r5, #2
 8109b24:	d836      	bhi.n	8109b94 <_scanf_float+0x318>
 8109b26:	455e      	cmp	r6, fp
 8109b28:	f67f aee8 	bls.w	81098fc <_scanf_float+0x80>
 8109b2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8109b30:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8109b34:	463a      	mov	r2, r7
 8109b36:	4640      	mov	r0, r8
 8109b38:	4798      	blx	r3
 8109b3a:	6923      	ldr	r3, [r4, #16]
 8109b3c:	3b01      	subs	r3, #1
 8109b3e:	6123      	str	r3, [r4, #16]
 8109b40:	e7f1      	b.n	8109b26 <_scanf_float+0x2aa>
 8109b42:	9802      	ldr	r0, [sp, #8]
 8109b44:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8109b48:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8109b4c:	9002      	str	r0, [sp, #8]
 8109b4e:	463a      	mov	r2, r7
 8109b50:	4640      	mov	r0, r8
 8109b52:	4798      	blx	r3
 8109b54:	6923      	ldr	r3, [r4, #16]
 8109b56:	3b01      	subs	r3, #1
 8109b58:	6123      	str	r3, [r4, #16]
 8109b5a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8109b5e:	fa5f fa8a 	uxtb.w	sl, sl
 8109b62:	f1ba 0f02 	cmp.w	sl, #2
 8109b66:	d1ec      	bne.n	8109b42 <_scanf_float+0x2c6>
 8109b68:	3d03      	subs	r5, #3
 8109b6a:	b2ed      	uxtb	r5, r5
 8109b6c:	1b76      	subs	r6, r6, r5
 8109b6e:	6823      	ldr	r3, [r4, #0]
 8109b70:	05da      	lsls	r2, r3, #23
 8109b72:	d52f      	bpl.n	8109bd4 <_scanf_float+0x358>
 8109b74:	055b      	lsls	r3, r3, #21
 8109b76:	d510      	bpl.n	8109b9a <_scanf_float+0x31e>
 8109b78:	455e      	cmp	r6, fp
 8109b7a:	f67f aebf 	bls.w	81098fc <_scanf_float+0x80>
 8109b7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8109b82:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8109b86:	463a      	mov	r2, r7
 8109b88:	4640      	mov	r0, r8
 8109b8a:	4798      	blx	r3
 8109b8c:	6923      	ldr	r3, [r4, #16]
 8109b8e:	3b01      	subs	r3, #1
 8109b90:	6123      	str	r3, [r4, #16]
 8109b92:	e7f1      	b.n	8109b78 <_scanf_float+0x2fc>
 8109b94:	46aa      	mov	sl, r5
 8109b96:	9602      	str	r6, [sp, #8]
 8109b98:	e7df      	b.n	8109b5a <_scanf_float+0x2de>
 8109b9a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8109b9e:	6923      	ldr	r3, [r4, #16]
 8109ba0:	2965      	cmp	r1, #101	; 0x65
 8109ba2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8109ba6:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8109baa:	6123      	str	r3, [r4, #16]
 8109bac:	d00c      	beq.n	8109bc8 <_scanf_float+0x34c>
 8109bae:	2945      	cmp	r1, #69	; 0x45
 8109bb0:	d00a      	beq.n	8109bc8 <_scanf_float+0x34c>
 8109bb2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8109bb6:	463a      	mov	r2, r7
 8109bb8:	4640      	mov	r0, r8
 8109bba:	4798      	blx	r3
 8109bbc:	6923      	ldr	r3, [r4, #16]
 8109bbe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8109bc2:	3b01      	subs	r3, #1
 8109bc4:	1eb5      	subs	r5, r6, #2
 8109bc6:	6123      	str	r3, [r4, #16]
 8109bc8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8109bcc:	463a      	mov	r2, r7
 8109bce:	4640      	mov	r0, r8
 8109bd0:	4798      	blx	r3
 8109bd2:	462e      	mov	r6, r5
 8109bd4:	6825      	ldr	r5, [r4, #0]
 8109bd6:	f015 0510 	ands.w	r5, r5, #16
 8109bda:	d158      	bne.n	8109c8e <_scanf_float+0x412>
 8109bdc:	7035      	strb	r5, [r6, #0]
 8109bde:	6823      	ldr	r3, [r4, #0]
 8109be0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8109be4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8109be8:	d11c      	bne.n	8109c24 <_scanf_float+0x3a8>
 8109bea:	9b01      	ldr	r3, [sp, #4]
 8109bec:	454b      	cmp	r3, r9
 8109bee:	eba3 0209 	sub.w	r2, r3, r9
 8109bf2:	d124      	bne.n	8109c3e <_scanf_float+0x3c2>
 8109bf4:	2200      	movs	r2, #0
 8109bf6:	4659      	mov	r1, fp
 8109bf8:	4640      	mov	r0, r8
 8109bfa:	f000 ff79 	bl	810aaf0 <_strtod_r>
 8109bfe:	9b03      	ldr	r3, [sp, #12]
 8109c00:	6821      	ldr	r1, [r4, #0]
 8109c02:	681b      	ldr	r3, [r3, #0]
 8109c04:	f011 0f02 	tst.w	r1, #2
 8109c08:	ec57 6b10 	vmov	r6, r7, d0
 8109c0c:	f103 0204 	add.w	r2, r3, #4
 8109c10:	d020      	beq.n	8109c54 <_scanf_float+0x3d8>
 8109c12:	9903      	ldr	r1, [sp, #12]
 8109c14:	600a      	str	r2, [r1, #0]
 8109c16:	681b      	ldr	r3, [r3, #0]
 8109c18:	e9c3 6700 	strd	r6, r7, [r3]
 8109c1c:	68e3      	ldr	r3, [r4, #12]
 8109c1e:	3301      	adds	r3, #1
 8109c20:	60e3      	str	r3, [r4, #12]
 8109c22:	e66c      	b.n	81098fe <_scanf_float+0x82>
 8109c24:	9b04      	ldr	r3, [sp, #16]
 8109c26:	2b00      	cmp	r3, #0
 8109c28:	d0e4      	beq.n	8109bf4 <_scanf_float+0x378>
 8109c2a:	9905      	ldr	r1, [sp, #20]
 8109c2c:	230a      	movs	r3, #10
 8109c2e:	462a      	mov	r2, r5
 8109c30:	3101      	adds	r1, #1
 8109c32:	4640      	mov	r0, r8
 8109c34:	f000 ffe4 	bl	810ac00 <_strtol_r>
 8109c38:	9b04      	ldr	r3, [sp, #16]
 8109c3a:	9e05      	ldr	r6, [sp, #20]
 8109c3c:	1ac2      	subs	r2, r0, r3
 8109c3e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8109c42:	429e      	cmp	r6, r3
 8109c44:	bf28      	it	cs
 8109c46:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8109c4a:	4912      	ldr	r1, [pc, #72]	; (8109c94 <_scanf_float+0x418>)
 8109c4c:	4630      	mov	r0, r6
 8109c4e:	f000 f825 	bl	8109c9c <siprintf>
 8109c52:	e7cf      	b.n	8109bf4 <_scanf_float+0x378>
 8109c54:	f011 0f04 	tst.w	r1, #4
 8109c58:	9903      	ldr	r1, [sp, #12]
 8109c5a:	600a      	str	r2, [r1, #0]
 8109c5c:	d1db      	bne.n	8109c16 <_scanf_float+0x39a>
 8109c5e:	f8d3 8000 	ldr.w	r8, [r3]
 8109c62:	ee10 2a10 	vmov	r2, s0
 8109c66:	ee10 0a10 	vmov	r0, s0
 8109c6a:	463b      	mov	r3, r7
 8109c6c:	4639      	mov	r1, r7
 8109c6e:	f7f6 ffe5 	bl	8100c3c <__aeabi_dcmpun>
 8109c72:	b128      	cbz	r0, 8109c80 <_scanf_float+0x404>
 8109c74:	4808      	ldr	r0, [pc, #32]	; (8109c98 <_scanf_float+0x41c>)
 8109c76:	f001 f86f 	bl	810ad58 <nanf>
 8109c7a:	ed88 0a00 	vstr	s0, [r8]
 8109c7e:	e7cd      	b.n	8109c1c <_scanf_float+0x3a0>
 8109c80:	4630      	mov	r0, r6
 8109c82:	4639      	mov	r1, r7
 8109c84:	f7f7 f838 	bl	8100cf8 <__aeabi_d2f>
 8109c88:	f8c8 0000 	str.w	r0, [r8]
 8109c8c:	e7c6      	b.n	8109c1c <_scanf_float+0x3a0>
 8109c8e:	2500      	movs	r5, #0
 8109c90:	e635      	b.n	81098fe <_scanf_float+0x82>
 8109c92:	bf00      	nop
 8109c94:	0810e7bc 	.word	0x0810e7bc
 8109c98:	0810e9cc 	.word	0x0810e9cc

08109c9c <siprintf>:
 8109c9c:	b40e      	push	{r1, r2, r3}
 8109c9e:	b500      	push	{lr}
 8109ca0:	b09c      	sub	sp, #112	; 0x70
 8109ca2:	ab1d      	add	r3, sp, #116	; 0x74
 8109ca4:	9002      	str	r0, [sp, #8]
 8109ca6:	9006      	str	r0, [sp, #24]
 8109ca8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8109cac:	4809      	ldr	r0, [pc, #36]	; (8109cd4 <siprintf+0x38>)
 8109cae:	9107      	str	r1, [sp, #28]
 8109cb0:	9104      	str	r1, [sp, #16]
 8109cb2:	4909      	ldr	r1, [pc, #36]	; (8109cd8 <siprintf+0x3c>)
 8109cb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8109cb8:	9105      	str	r1, [sp, #20]
 8109cba:	6800      	ldr	r0, [r0, #0]
 8109cbc:	9301      	str	r3, [sp, #4]
 8109cbe:	a902      	add	r1, sp, #8
 8109cc0:	f002 fa9a 	bl	810c1f8 <_svfiprintf_r>
 8109cc4:	9b02      	ldr	r3, [sp, #8]
 8109cc6:	2200      	movs	r2, #0
 8109cc8:	701a      	strb	r2, [r3, #0]
 8109cca:	b01c      	add	sp, #112	; 0x70
 8109ccc:	f85d eb04 	ldr.w	lr, [sp], #4
 8109cd0:	b003      	add	sp, #12
 8109cd2:	4770      	bx	lr
 8109cd4:	100001d4 	.word	0x100001d4
 8109cd8:	ffff0208 	.word	0xffff0208

08109cdc <srand>:
 8109cdc:	b538      	push	{r3, r4, r5, lr}
 8109cde:	4b10      	ldr	r3, [pc, #64]	; (8109d20 <srand+0x44>)
 8109ce0:	681d      	ldr	r5, [r3, #0]
 8109ce2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8109ce4:	4604      	mov	r4, r0
 8109ce6:	b9b3      	cbnz	r3, 8109d16 <srand+0x3a>
 8109ce8:	2018      	movs	r0, #24
 8109cea:	f002 fb83 	bl	810c3f4 <malloc>
 8109cee:	4602      	mov	r2, r0
 8109cf0:	6328      	str	r0, [r5, #48]	; 0x30
 8109cf2:	b920      	cbnz	r0, 8109cfe <srand+0x22>
 8109cf4:	4b0b      	ldr	r3, [pc, #44]	; (8109d24 <srand+0x48>)
 8109cf6:	480c      	ldr	r0, [pc, #48]	; (8109d28 <srand+0x4c>)
 8109cf8:	2146      	movs	r1, #70	; 0x46
 8109cfa:	f001 f833 	bl	810ad64 <__assert_func>
 8109cfe:	490b      	ldr	r1, [pc, #44]	; (8109d2c <srand+0x50>)
 8109d00:	4b0b      	ldr	r3, [pc, #44]	; (8109d30 <srand+0x54>)
 8109d02:	e9c0 1300 	strd	r1, r3, [r0]
 8109d06:	4b0b      	ldr	r3, [pc, #44]	; (8109d34 <srand+0x58>)
 8109d08:	6083      	str	r3, [r0, #8]
 8109d0a:	230b      	movs	r3, #11
 8109d0c:	8183      	strh	r3, [r0, #12]
 8109d0e:	2100      	movs	r1, #0
 8109d10:	2001      	movs	r0, #1
 8109d12:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8109d16:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8109d18:	2200      	movs	r2, #0
 8109d1a:	611c      	str	r4, [r3, #16]
 8109d1c:	615a      	str	r2, [r3, #20]
 8109d1e:	bd38      	pop	{r3, r4, r5, pc}
 8109d20:	100001d4 	.word	0x100001d4
 8109d24:	0810e7c1 	.word	0x0810e7c1
 8109d28:	0810e7d8 	.word	0x0810e7d8
 8109d2c:	abcd330e 	.word	0xabcd330e
 8109d30:	e66d1234 	.word	0xe66d1234
 8109d34:	0005deec 	.word	0x0005deec

08109d38 <rand>:
 8109d38:	4b16      	ldr	r3, [pc, #88]	; (8109d94 <rand+0x5c>)
 8109d3a:	b510      	push	{r4, lr}
 8109d3c:	681c      	ldr	r4, [r3, #0]
 8109d3e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8109d40:	b9b3      	cbnz	r3, 8109d70 <rand+0x38>
 8109d42:	2018      	movs	r0, #24
 8109d44:	f002 fb56 	bl	810c3f4 <malloc>
 8109d48:	4602      	mov	r2, r0
 8109d4a:	6320      	str	r0, [r4, #48]	; 0x30
 8109d4c:	b920      	cbnz	r0, 8109d58 <rand+0x20>
 8109d4e:	4b12      	ldr	r3, [pc, #72]	; (8109d98 <rand+0x60>)
 8109d50:	4812      	ldr	r0, [pc, #72]	; (8109d9c <rand+0x64>)
 8109d52:	2152      	movs	r1, #82	; 0x52
 8109d54:	f001 f806 	bl	810ad64 <__assert_func>
 8109d58:	4911      	ldr	r1, [pc, #68]	; (8109da0 <rand+0x68>)
 8109d5a:	4b12      	ldr	r3, [pc, #72]	; (8109da4 <rand+0x6c>)
 8109d5c:	e9c0 1300 	strd	r1, r3, [r0]
 8109d60:	4b11      	ldr	r3, [pc, #68]	; (8109da8 <rand+0x70>)
 8109d62:	6083      	str	r3, [r0, #8]
 8109d64:	230b      	movs	r3, #11
 8109d66:	8183      	strh	r3, [r0, #12]
 8109d68:	2100      	movs	r1, #0
 8109d6a:	2001      	movs	r0, #1
 8109d6c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8109d70:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8109d72:	480e      	ldr	r0, [pc, #56]	; (8109dac <rand+0x74>)
 8109d74:	690b      	ldr	r3, [r1, #16]
 8109d76:	694c      	ldr	r4, [r1, #20]
 8109d78:	4a0d      	ldr	r2, [pc, #52]	; (8109db0 <rand+0x78>)
 8109d7a:	4358      	muls	r0, r3
 8109d7c:	fb02 0004 	mla	r0, r2, r4, r0
 8109d80:	fba3 3202 	umull	r3, r2, r3, r2
 8109d84:	3301      	adds	r3, #1
 8109d86:	eb40 0002 	adc.w	r0, r0, r2
 8109d8a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8109d8e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8109d92:	bd10      	pop	{r4, pc}
 8109d94:	100001d4 	.word	0x100001d4
 8109d98:	0810e7c1 	.word	0x0810e7c1
 8109d9c:	0810e7d8 	.word	0x0810e7d8
 8109da0:	abcd330e 	.word	0xabcd330e
 8109da4:	e66d1234 	.word	0xe66d1234
 8109da8:	0005deec 	.word	0x0005deec
 8109dac:	5851f42d 	.word	0x5851f42d
 8109db0:	4c957f2d 	.word	0x4c957f2d

08109db4 <std>:
 8109db4:	2300      	movs	r3, #0
 8109db6:	b510      	push	{r4, lr}
 8109db8:	4604      	mov	r4, r0
 8109dba:	e9c0 3300 	strd	r3, r3, [r0]
 8109dbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8109dc2:	6083      	str	r3, [r0, #8]
 8109dc4:	8181      	strh	r1, [r0, #12]
 8109dc6:	6643      	str	r3, [r0, #100]	; 0x64
 8109dc8:	81c2      	strh	r2, [r0, #14]
 8109dca:	6183      	str	r3, [r0, #24]
 8109dcc:	4619      	mov	r1, r3
 8109dce:	2208      	movs	r2, #8
 8109dd0:	305c      	adds	r0, #92	; 0x5c
 8109dd2:	f000 ff47 	bl	810ac64 <memset>
 8109dd6:	4b05      	ldr	r3, [pc, #20]	; (8109dec <std+0x38>)
 8109dd8:	6263      	str	r3, [r4, #36]	; 0x24
 8109dda:	4b05      	ldr	r3, [pc, #20]	; (8109df0 <std+0x3c>)
 8109ddc:	62a3      	str	r3, [r4, #40]	; 0x28
 8109dde:	4b05      	ldr	r3, [pc, #20]	; (8109df4 <std+0x40>)
 8109de0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8109de2:	4b05      	ldr	r3, [pc, #20]	; (8109df8 <std+0x44>)
 8109de4:	6224      	str	r4, [r4, #32]
 8109de6:	6323      	str	r3, [r4, #48]	; 0x30
 8109de8:	bd10      	pop	{r4, pc}
 8109dea:	bf00      	nop
 8109dec:	0810d037 	.word	0x0810d037
 8109df0:	0810d059 	.word	0x0810d059
 8109df4:	0810d091 	.word	0x0810d091
 8109df8:	0810d0b5 	.word	0x0810d0b5

08109dfc <stdio_exit_handler>:
 8109dfc:	4a02      	ldr	r2, [pc, #8]	; (8109e08 <stdio_exit_handler+0xc>)
 8109dfe:	4903      	ldr	r1, [pc, #12]	; (8109e0c <stdio_exit_handler+0x10>)
 8109e00:	4803      	ldr	r0, [pc, #12]	; (8109e10 <stdio_exit_handler+0x14>)
 8109e02:	f000 beff 	b.w	810ac04 <_fwalk_sglue>
 8109e06:	bf00      	nop
 8109e08:	10000010 	.word	0x10000010
 8109e0c:	0810c675 	.word	0x0810c675
 8109e10:	10000188 	.word	0x10000188

08109e14 <cleanup_stdio>:
 8109e14:	6841      	ldr	r1, [r0, #4]
 8109e16:	4b0c      	ldr	r3, [pc, #48]	; (8109e48 <cleanup_stdio+0x34>)
 8109e18:	4299      	cmp	r1, r3
 8109e1a:	b510      	push	{r4, lr}
 8109e1c:	4604      	mov	r4, r0
 8109e1e:	d001      	beq.n	8109e24 <cleanup_stdio+0x10>
 8109e20:	f002 fc28 	bl	810c674 <_fflush_r>
 8109e24:	68a1      	ldr	r1, [r4, #8]
 8109e26:	4b09      	ldr	r3, [pc, #36]	; (8109e4c <cleanup_stdio+0x38>)
 8109e28:	4299      	cmp	r1, r3
 8109e2a:	d002      	beq.n	8109e32 <cleanup_stdio+0x1e>
 8109e2c:	4620      	mov	r0, r4
 8109e2e:	f002 fc21 	bl	810c674 <_fflush_r>
 8109e32:	68e1      	ldr	r1, [r4, #12]
 8109e34:	4b06      	ldr	r3, [pc, #24]	; (8109e50 <cleanup_stdio+0x3c>)
 8109e36:	4299      	cmp	r1, r3
 8109e38:	d004      	beq.n	8109e44 <cleanup_stdio+0x30>
 8109e3a:	4620      	mov	r0, r4
 8109e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8109e40:	f002 bc18 	b.w	810c674 <_fflush_r>
 8109e44:	bd10      	pop	{r4, pc}
 8109e46:	bf00      	nop
 8109e48:	10000378 	.word	0x10000378
 8109e4c:	100003e0 	.word	0x100003e0
 8109e50:	10000448 	.word	0x10000448

08109e54 <global_stdio_init.part.0>:
 8109e54:	b510      	push	{r4, lr}
 8109e56:	4b0b      	ldr	r3, [pc, #44]	; (8109e84 <global_stdio_init.part.0+0x30>)
 8109e58:	4c0b      	ldr	r4, [pc, #44]	; (8109e88 <global_stdio_init.part.0+0x34>)
 8109e5a:	4a0c      	ldr	r2, [pc, #48]	; (8109e8c <global_stdio_init.part.0+0x38>)
 8109e5c:	601a      	str	r2, [r3, #0]
 8109e5e:	4620      	mov	r0, r4
 8109e60:	2200      	movs	r2, #0
 8109e62:	2104      	movs	r1, #4
 8109e64:	f7ff ffa6 	bl	8109db4 <std>
 8109e68:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8109e6c:	2201      	movs	r2, #1
 8109e6e:	2109      	movs	r1, #9
 8109e70:	f7ff ffa0 	bl	8109db4 <std>
 8109e74:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8109e78:	2202      	movs	r2, #2
 8109e7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8109e7e:	2112      	movs	r1, #18
 8109e80:	f7ff bf98 	b.w	8109db4 <std>
 8109e84:	100004b0 	.word	0x100004b0
 8109e88:	10000378 	.word	0x10000378
 8109e8c:	08109dfd 	.word	0x08109dfd

08109e90 <__sfp_lock_acquire>:
 8109e90:	4801      	ldr	r0, [pc, #4]	; (8109e98 <__sfp_lock_acquire+0x8>)
 8109e92:	f000 bf49 	b.w	810ad28 <__retarget_lock_acquire_recursive>
 8109e96:	bf00      	nop
 8109e98:	100004b5 	.word	0x100004b5

08109e9c <__sfp_lock_release>:
 8109e9c:	4801      	ldr	r0, [pc, #4]	; (8109ea4 <__sfp_lock_release+0x8>)
 8109e9e:	f000 bf44 	b.w	810ad2a <__retarget_lock_release_recursive>
 8109ea2:	bf00      	nop
 8109ea4:	100004b5 	.word	0x100004b5

08109ea8 <__sinit>:
 8109ea8:	b510      	push	{r4, lr}
 8109eaa:	4604      	mov	r4, r0
 8109eac:	f7ff fff0 	bl	8109e90 <__sfp_lock_acquire>
 8109eb0:	6a23      	ldr	r3, [r4, #32]
 8109eb2:	b11b      	cbz	r3, 8109ebc <__sinit+0x14>
 8109eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8109eb8:	f7ff bff0 	b.w	8109e9c <__sfp_lock_release>
 8109ebc:	4b04      	ldr	r3, [pc, #16]	; (8109ed0 <__sinit+0x28>)
 8109ebe:	6223      	str	r3, [r4, #32]
 8109ec0:	4b04      	ldr	r3, [pc, #16]	; (8109ed4 <__sinit+0x2c>)
 8109ec2:	681b      	ldr	r3, [r3, #0]
 8109ec4:	2b00      	cmp	r3, #0
 8109ec6:	d1f5      	bne.n	8109eb4 <__sinit+0xc>
 8109ec8:	f7ff ffc4 	bl	8109e54 <global_stdio_init.part.0>
 8109ecc:	e7f2      	b.n	8109eb4 <__sinit+0xc>
 8109ece:	bf00      	nop
 8109ed0:	08109e15 	.word	0x08109e15
 8109ed4:	100004b0 	.word	0x100004b0

08109ed8 <sulp>:
 8109ed8:	b570      	push	{r4, r5, r6, lr}
 8109eda:	4604      	mov	r4, r0
 8109edc:	460d      	mov	r5, r1
 8109ede:	ec45 4b10 	vmov	d0, r4, r5
 8109ee2:	4616      	mov	r6, r2
 8109ee4:	f002 ff66 	bl	810cdb4 <__ulp>
 8109ee8:	ec51 0b10 	vmov	r0, r1, d0
 8109eec:	b17e      	cbz	r6, 8109f0e <sulp+0x36>
 8109eee:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8109ef2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8109ef6:	2b00      	cmp	r3, #0
 8109ef8:	dd09      	ble.n	8109f0e <sulp+0x36>
 8109efa:	051b      	lsls	r3, r3, #20
 8109efc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8109f00:	2400      	movs	r4, #0
 8109f02:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8109f06:	4622      	mov	r2, r4
 8109f08:	462b      	mov	r3, r5
 8109f0a:	f7f6 fbfd 	bl	8100708 <__aeabi_dmul>
 8109f0e:	bd70      	pop	{r4, r5, r6, pc}

08109f10 <_strtod_l>:
 8109f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109f14:	ed2d 8b02 	vpush	{d8}
 8109f18:	b09b      	sub	sp, #108	; 0x6c
 8109f1a:	4604      	mov	r4, r0
 8109f1c:	9213      	str	r2, [sp, #76]	; 0x4c
 8109f1e:	2200      	movs	r2, #0
 8109f20:	9216      	str	r2, [sp, #88]	; 0x58
 8109f22:	460d      	mov	r5, r1
 8109f24:	f04f 0800 	mov.w	r8, #0
 8109f28:	f04f 0900 	mov.w	r9, #0
 8109f2c:	460a      	mov	r2, r1
 8109f2e:	9215      	str	r2, [sp, #84]	; 0x54
 8109f30:	7811      	ldrb	r1, [r2, #0]
 8109f32:	292b      	cmp	r1, #43	; 0x2b
 8109f34:	d04c      	beq.n	8109fd0 <_strtod_l+0xc0>
 8109f36:	d83a      	bhi.n	8109fae <_strtod_l+0x9e>
 8109f38:	290d      	cmp	r1, #13
 8109f3a:	d834      	bhi.n	8109fa6 <_strtod_l+0x96>
 8109f3c:	2908      	cmp	r1, #8
 8109f3e:	d834      	bhi.n	8109faa <_strtod_l+0x9a>
 8109f40:	2900      	cmp	r1, #0
 8109f42:	d03d      	beq.n	8109fc0 <_strtod_l+0xb0>
 8109f44:	2200      	movs	r2, #0
 8109f46:	920a      	str	r2, [sp, #40]	; 0x28
 8109f48:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8109f4a:	7832      	ldrb	r2, [r6, #0]
 8109f4c:	2a30      	cmp	r2, #48	; 0x30
 8109f4e:	f040 80b4 	bne.w	810a0ba <_strtod_l+0x1aa>
 8109f52:	7872      	ldrb	r2, [r6, #1]
 8109f54:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8109f58:	2a58      	cmp	r2, #88	; 0x58
 8109f5a:	d170      	bne.n	810a03e <_strtod_l+0x12e>
 8109f5c:	9302      	str	r3, [sp, #8]
 8109f5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8109f60:	9301      	str	r3, [sp, #4]
 8109f62:	ab16      	add	r3, sp, #88	; 0x58
 8109f64:	9300      	str	r3, [sp, #0]
 8109f66:	4a8e      	ldr	r2, [pc, #568]	; (810a1a0 <_strtod_l+0x290>)
 8109f68:	ab17      	add	r3, sp, #92	; 0x5c
 8109f6a:	a915      	add	r1, sp, #84	; 0x54
 8109f6c:	4620      	mov	r0, r4
 8109f6e:	f001 fdf9 	bl	810bb64 <__gethex>
 8109f72:	f010 070f 	ands.w	r7, r0, #15
 8109f76:	4605      	mov	r5, r0
 8109f78:	d005      	beq.n	8109f86 <_strtod_l+0x76>
 8109f7a:	2f06      	cmp	r7, #6
 8109f7c:	d12a      	bne.n	8109fd4 <_strtod_l+0xc4>
 8109f7e:	3601      	adds	r6, #1
 8109f80:	2300      	movs	r3, #0
 8109f82:	9615      	str	r6, [sp, #84]	; 0x54
 8109f84:	930a      	str	r3, [sp, #40]	; 0x28
 8109f86:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8109f88:	2b00      	cmp	r3, #0
 8109f8a:	f040 857f 	bne.w	810aa8c <_strtod_l+0xb7c>
 8109f8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8109f90:	b1db      	cbz	r3, 8109fca <_strtod_l+0xba>
 8109f92:	4642      	mov	r2, r8
 8109f94:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8109f98:	ec43 2b10 	vmov	d0, r2, r3
 8109f9c:	b01b      	add	sp, #108	; 0x6c
 8109f9e:	ecbd 8b02 	vpop	{d8}
 8109fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109fa6:	2920      	cmp	r1, #32
 8109fa8:	d1cc      	bne.n	8109f44 <_strtod_l+0x34>
 8109faa:	3201      	adds	r2, #1
 8109fac:	e7bf      	b.n	8109f2e <_strtod_l+0x1e>
 8109fae:	292d      	cmp	r1, #45	; 0x2d
 8109fb0:	d1c8      	bne.n	8109f44 <_strtod_l+0x34>
 8109fb2:	2101      	movs	r1, #1
 8109fb4:	910a      	str	r1, [sp, #40]	; 0x28
 8109fb6:	1c51      	adds	r1, r2, #1
 8109fb8:	9115      	str	r1, [sp, #84]	; 0x54
 8109fba:	7852      	ldrb	r2, [r2, #1]
 8109fbc:	2a00      	cmp	r2, #0
 8109fbe:	d1c3      	bne.n	8109f48 <_strtod_l+0x38>
 8109fc0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8109fc2:	9515      	str	r5, [sp, #84]	; 0x54
 8109fc4:	2b00      	cmp	r3, #0
 8109fc6:	f040 855f 	bne.w	810aa88 <_strtod_l+0xb78>
 8109fca:	4642      	mov	r2, r8
 8109fcc:	464b      	mov	r3, r9
 8109fce:	e7e3      	b.n	8109f98 <_strtod_l+0x88>
 8109fd0:	2100      	movs	r1, #0
 8109fd2:	e7ef      	b.n	8109fb4 <_strtod_l+0xa4>
 8109fd4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8109fd6:	b13a      	cbz	r2, 8109fe8 <_strtod_l+0xd8>
 8109fd8:	2135      	movs	r1, #53	; 0x35
 8109fda:	a818      	add	r0, sp, #96	; 0x60
 8109fdc:	f002 ffe7 	bl	810cfae <__copybits>
 8109fe0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8109fe2:	4620      	mov	r0, r4
 8109fe4:	f002 fbba 	bl	810c75c <_Bfree>
 8109fe8:	3f01      	subs	r7, #1
 8109fea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8109fec:	2f04      	cmp	r7, #4
 8109fee:	d806      	bhi.n	8109ffe <_strtod_l+0xee>
 8109ff0:	e8df f007 	tbb	[pc, r7]
 8109ff4:	201d0314 	.word	0x201d0314
 8109ff8:	14          	.byte	0x14
 8109ff9:	00          	.byte	0x00
 8109ffa:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8109ffe:	05e9      	lsls	r1, r5, #23
 810a000:	bf48      	it	mi
 810a002:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 810a006:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 810a00a:	0d1b      	lsrs	r3, r3, #20
 810a00c:	051b      	lsls	r3, r3, #20
 810a00e:	2b00      	cmp	r3, #0
 810a010:	d1b9      	bne.n	8109f86 <_strtod_l+0x76>
 810a012:	f000 fe5f 	bl	810acd4 <__errno>
 810a016:	2322      	movs	r3, #34	; 0x22
 810a018:	6003      	str	r3, [r0, #0]
 810a01a:	e7b4      	b.n	8109f86 <_strtod_l+0x76>
 810a01c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 810a020:	f202 4233 	addw	r2, r2, #1075	; 0x433
 810a024:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 810a028:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 810a02c:	e7e7      	b.n	8109ffe <_strtod_l+0xee>
 810a02e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 810a1a8 <_strtod_l+0x298>
 810a032:	e7e4      	b.n	8109ffe <_strtod_l+0xee>
 810a034:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 810a038:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 810a03c:	e7df      	b.n	8109ffe <_strtod_l+0xee>
 810a03e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810a040:	1c5a      	adds	r2, r3, #1
 810a042:	9215      	str	r2, [sp, #84]	; 0x54
 810a044:	785b      	ldrb	r3, [r3, #1]
 810a046:	2b30      	cmp	r3, #48	; 0x30
 810a048:	d0f9      	beq.n	810a03e <_strtod_l+0x12e>
 810a04a:	2b00      	cmp	r3, #0
 810a04c:	d09b      	beq.n	8109f86 <_strtod_l+0x76>
 810a04e:	2301      	movs	r3, #1
 810a050:	f04f 0a00 	mov.w	sl, #0
 810a054:	9304      	str	r3, [sp, #16]
 810a056:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810a058:	930b      	str	r3, [sp, #44]	; 0x2c
 810a05a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 810a05e:	46d3      	mov	fp, sl
 810a060:	220a      	movs	r2, #10
 810a062:	9815      	ldr	r0, [sp, #84]	; 0x54
 810a064:	7806      	ldrb	r6, [r0, #0]
 810a066:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 810a06a:	b2d9      	uxtb	r1, r3
 810a06c:	2909      	cmp	r1, #9
 810a06e:	d926      	bls.n	810a0be <_strtod_l+0x1ae>
 810a070:	494c      	ldr	r1, [pc, #304]	; (810a1a4 <_strtod_l+0x294>)
 810a072:	2201      	movs	r2, #1
 810a074:	f000 fde4 	bl	810ac40 <strncmp>
 810a078:	2800      	cmp	r0, #0
 810a07a:	d030      	beq.n	810a0de <_strtod_l+0x1ce>
 810a07c:	2000      	movs	r0, #0
 810a07e:	4632      	mov	r2, r6
 810a080:	9005      	str	r0, [sp, #20]
 810a082:	465e      	mov	r6, fp
 810a084:	4603      	mov	r3, r0
 810a086:	2a65      	cmp	r2, #101	; 0x65
 810a088:	d001      	beq.n	810a08e <_strtod_l+0x17e>
 810a08a:	2a45      	cmp	r2, #69	; 0x45
 810a08c:	d113      	bne.n	810a0b6 <_strtod_l+0x1a6>
 810a08e:	b91e      	cbnz	r6, 810a098 <_strtod_l+0x188>
 810a090:	9a04      	ldr	r2, [sp, #16]
 810a092:	4302      	orrs	r2, r0
 810a094:	d094      	beq.n	8109fc0 <_strtod_l+0xb0>
 810a096:	2600      	movs	r6, #0
 810a098:	9d15      	ldr	r5, [sp, #84]	; 0x54
 810a09a:	1c6a      	adds	r2, r5, #1
 810a09c:	9215      	str	r2, [sp, #84]	; 0x54
 810a09e:	786a      	ldrb	r2, [r5, #1]
 810a0a0:	2a2b      	cmp	r2, #43	; 0x2b
 810a0a2:	d074      	beq.n	810a18e <_strtod_l+0x27e>
 810a0a4:	2a2d      	cmp	r2, #45	; 0x2d
 810a0a6:	d078      	beq.n	810a19a <_strtod_l+0x28a>
 810a0a8:	f04f 0c00 	mov.w	ip, #0
 810a0ac:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 810a0b0:	2909      	cmp	r1, #9
 810a0b2:	d97f      	bls.n	810a1b4 <_strtod_l+0x2a4>
 810a0b4:	9515      	str	r5, [sp, #84]	; 0x54
 810a0b6:	2700      	movs	r7, #0
 810a0b8:	e09e      	b.n	810a1f8 <_strtod_l+0x2e8>
 810a0ba:	2300      	movs	r3, #0
 810a0bc:	e7c8      	b.n	810a050 <_strtod_l+0x140>
 810a0be:	f1bb 0f08 	cmp.w	fp, #8
 810a0c2:	bfd8      	it	le
 810a0c4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 810a0c6:	f100 0001 	add.w	r0, r0, #1
 810a0ca:	bfda      	itte	le
 810a0cc:	fb02 3301 	mlale	r3, r2, r1, r3
 810a0d0:	9309      	strle	r3, [sp, #36]	; 0x24
 810a0d2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 810a0d6:	f10b 0b01 	add.w	fp, fp, #1
 810a0da:	9015      	str	r0, [sp, #84]	; 0x54
 810a0dc:	e7c1      	b.n	810a062 <_strtod_l+0x152>
 810a0de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810a0e0:	1c5a      	adds	r2, r3, #1
 810a0e2:	9215      	str	r2, [sp, #84]	; 0x54
 810a0e4:	785a      	ldrb	r2, [r3, #1]
 810a0e6:	f1bb 0f00 	cmp.w	fp, #0
 810a0ea:	d037      	beq.n	810a15c <_strtod_l+0x24c>
 810a0ec:	9005      	str	r0, [sp, #20]
 810a0ee:	465e      	mov	r6, fp
 810a0f0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 810a0f4:	2b09      	cmp	r3, #9
 810a0f6:	d912      	bls.n	810a11e <_strtod_l+0x20e>
 810a0f8:	2301      	movs	r3, #1
 810a0fa:	e7c4      	b.n	810a086 <_strtod_l+0x176>
 810a0fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810a0fe:	1c5a      	adds	r2, r3, #1
 810a100:	9215      	str	r2, [sp, #84]	; 0x54
 810a102:	785a      	ldrb	r2, [r3, #1]
 810a104:	3001      	adds	r0, #1
 810a106:	2a30      	cmp	r2, #48	; 0x30
 810a108:	d0f8      	beq.n	810a0fc <_strtod_l+0x1ec>
 810a10a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 810a10e:	2b08      	cmp	r3, #8
 810a110:	f200 84c1 	bhi.w	810aa96 <_strtod_l+0xb86>
 810a114:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810a116:	9005      	str	r0, [sp, #20]
 810a118:	2000      	movs	r0, #0
 810a11a:	930b      	str	r3, [sp, #44]	; 0x2c
 810a11c:	4606      	mov	r6, r0
 810a11e:	3a30      	subs	r2, #48	; 0x30
 810a120:	f100 0301 	add.w	r3, r0, #1
 810a124:	d014      	beq.n	810a150 <_strtod_l+0x240>
 810a126:	9905      	ldr	r1, [sp, #20]
 810a128:	4419      	add	r1, r3
 810a12a:	9105      	str	r1, [sp, #20]
 810a12c:	4633      	mov	r3, r6
 810a12e:	eb00 0c06 	add.w	ip, r0, r6
 810a132:	210a      	movs	r1, #10
 810a134:	4563      	cmp	r3, ip
 810a136:	d113      	bne.n	810a160 <_strtod_l+0x250>
 810a138:	1833      	adds	r3, r6, r0
 810a13a:	2b08      	cmp	r3, #8
 810a13c:	f106 0601 	add.w	r6, r6, #1
 810a140:	4406      	add	r6, r0
 810a142:	dc1a      	bgt.n	810a17a <_strtod_l+0x26a>
 810a144:	9909      	ldr	r1, [sp, #36]	; 0x24
 810a146:	230a      	movs	r3, #10
 810a148:	fb03 2301 	mla	r3, r3, r1, r2
 810a14c:	9309      	str	r3, [sp, #36]	; 0x24
 810a14e:	2300      	movs	r3, #0
 810a150:	9a15      	ldr	r2, [sp, #84]	; 0x54
 810a152:	1c51      	adds	r1, r2, #1
 810a154:	9115      	str	r1, [sp, #84]	; 0x54
 810a156:	7852      	ldrb	r2, [r2, #1]
 810a158:	4618      	mov	r0, r3
 810a15a:	e7c9      	b.n	810a0f0 <_strtod_l+0x1e0>
 810a15c:	4658      	mov	r0, fp
 810a15e:	e7d2      	b.n	810a106 <_strtod_l+0x1f6>
 810a160:	2b08      	cmp	r3, #8
 810a162:	f103 0301 	add.w	r3, r3, #1
 810a166:	dc03      	bgt.n	810a170 <_strtod_l+0x260>
 810a168:	9f09      	ldr	r7, [sp, #36]	; 0x24
 810a16a:	434f      	muls	r7, r1
 810a16c:	9709      	str	r7, [sp, #36]	; 0x24
 810a16e:	e7e1      	b.n	810a134 <_strtod_l+0x224>
 810a170:	2b10      	cmp	r3, #16
 810a172:	bfd8      	it	le
 810a174:	fb01 fa0a 	mulle.w	sl, r1, sl
 810a178:	e7dc      	b.n	810a134 <_strtod_l+0x224>
 810a17a:	2e10      	cmp	r6, #16
 810a17c:	bfdc      	itt	le
 810a17e:	230a      	movle	r3, #10
 810a180:	fb03 2a0a 	mlale	sl, r3, sl, r2
 810a184:	e7e3      	b.n	810a14e <_strtod_l+0x23e>
 810a186:	2300      	movs	r3, #0
 810a188:	9305      	str	r3, [sp, #20]
 810a18a:	2301      	movs	r3, #1
 810a18c:	e780      	b.n	810a090 <_strtod_l+0x180>
 810a18e:	f04f 0c00 	mov.w	ip, #0
 810a192:	1caa      	adds	r2, r5, #2
 810a194:	9215      	str	r2, [sp, #84]	; 0x54
 810a196:	78aa      	ldrb	r2, [r5, #2]
 810a198:	e788      	b.n	810a0ac <_strtod_l+0x19c>
 810a19a:	f04f 0c01 	mov.w	ip, #1
 810a19e:	e7f8      	b.n	810a192 <_strtod_l+0x282>
 810a1a0:	0810e834 	.word	0x0810e834
 810a1a4:	0810e830 	.word	0x0810e830
 810a1a8:	7ff00000 	.word	0x7ff00000
 810a1ac:	9a15      	ldr	r2, [sp, #84]	; 0x54
 810a1ae:	1c51      	adds	r1, r2, #1
 810a1b0:	9115      	str	r1, [sp, #84]	; 0x54
 810a1b2:	7852      	ldrb	r2, [r2, #1]
 810a1b4:	2a30      	cmp	r2, #48	; 0x30
 810a1b6:	d0f9      	beq.n	810a1ac <_strtod_l+0x29c>
 810a1b8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 810a1bc:	2908      	cmp	r1, #8
 810a1be:	f63f af7a 	bhi.w	810a0b6 <_strtod_l+0x1a6>
 810a1c2:	3a30      	subs	r2, #48	; 0x30
 810a1c4:	9208      	str	r2, [sp, #32]
 810a1c6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 810a1c8:	920c      	str	r2, [sp, #48]	; 0x30
 810a1ca:	9a15      	ldr	r2, [sp, #84]	; 0x54
 810a1cc:	1c57      	adds	r7, r2, #1
 810a1ce:	9715      	str	r7, [sp, #84]	; 0x54
 810a1d0:	7852      	ldrb	r2, [r2, #1]
 810a1d2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 810a1d6:	f1be 0f09 	cmp.w	lr, #9
 810a1da:	d938      	bls.n	810a24e <_strtod_l+0x33e>
 810a1dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 810a1de:	1a7f      	subs	r7, r7, r1
 810a1e0:	2f08      	cmp	r7, #8
 810a1e2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 810a1e6:	dc03      	bgt.n	810a1f0 <_strtod_l+0x2e0>
 810a1e8:	9908      	ldr	r1, [sp, #32]
 810a1ea:	428f      	cmp	r7, r1
 810a1ec:	bfa8      	it	ge
 810a1ee:	460f      	movge	r7, r1
 810a1f0:	f1bc 0f00 	cmp.w	ip, #0
 810a1f4:	d000      	beq.n	810a1f8 <_strtod_l+0x2e8>
 810a1f6:	427f      	negs	r7, r7
 810a1f8:	2e00      	cmp	r6, #0
 810a1fa:	d14f      	bne.n	810a29c <_strtod_l+0x38c>
 810a1fc:	9904      	ldr	r1, [sp, #16]
 810a1fe:	4301      	orrs	r1, r0
 810a200:	f47f aec1 	bne.w	8109f86 <_strtod_l+0x76>
 810a204:	2b00      	cmp	r3, #0
 810a206:	f47f aedb 	bne.w	8109fc0 <_strtod_l+0xb0>
 810a20a:	2a69      	cmp	r2, #105	; 0x69
 810a20c:	d029      	beq.n	810a262 <_strtod_l+0x352>
 810a20e:	dc26      	bgt.n	810a25e <_strtod_l+0x34e>
 810a210:	2a49      	cmp	r2, #73	; 0x49
 810a212:	d026      	beq.n	810a262 <_strtod_l+0x352>
 810a214:	2a4e      	cmp	r2, #78	; 0x4e
 810a216:	f47f aed3 	bne.w	8109fc0 <_strtod_l+0xb0>
 810a21a:	499b      	ldr	r1, [pc, #620]	; (810a488 <_strtod_l+0x578>)
 810a21c:	a815      	add	r0, sp, #84	; 0x54
 810a21e:	f001 fee1 	bl	810bfe4 <__match>
 810a222:	2800      	cmp	r0, #0
 810a224:	f43f aecc 	beq.w	8109fc0 <_strtod_l+0xb0>
 810a228:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810a22a:	781b      	ldrb	r3, [r3, #0]
 810a22c:	2b28      	cmp	r3, #40	; 0x28
 810a22e:	d12f      	bne.n	810a290 <_strtod_l+0x380>
 810a230:	4996      	ldr	r1, [pc, #600]	; (810a48c <_strtod_l+0x57c>)
 810a232:	aa18      	add	r2, sp, #96	; 0x60
 810a234:	a815      	add	r0, sp, #84	; 0x54
 810a236:	f001 fee9 	bl	810c00c <__hexnan>
 810a23a:	2805      	cmp	r0, #5
 810a23c:	d128      	bne.n	810a290 <_strtod_l+0x380>
 810a23e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 810a240:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 810a244:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 810a248:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 810a24c:	e69b      	b.n	8109f86 <_strtod_l+0x76>
 810a24e:	9f08      	ldr	r7, [sp, #32]
 810a250:	210a      	movs	r1, #10
 810a252:	fb01 2107 	mla	r1, r1, r7, r2
 810a256:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 810a25a:	9208      	str	r2, [sp, #32]
 810a25c:	e7b5      	b.n	810a1ca <_strtod_l+0x2ba>
 810a25e:	2a6e      	cmp	r2, #110	; 0x6e
 810a260:	e7d9      	b.n	810a216 <_strtod_l+0x306>
 810a262:	498b      	ldr	r1, [pc, #556]	; (810a490 <_strtod_l+0x580>)
 810a264:	a815      	add	r0, sp, #84	; 0x54
 810a266:	f001 febd 	bl	810bfe4 <__match>
 810a26a:	2800      	cmp	r0, #0
 810a26c:	f43f aea8 	beq.w	8109fc0 <_strtod_l+0xb0>
 810a270:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810a272:	4988      	ldr	r1, [pc, #544]	; (810a494 <_strtod_l+0x584>)
 810a274:	3b01      	subs	r3, #1
 810a276:	a815      	add	r0, sp, #84	; 0x54
 810a278:	9315      	str	r3, [sp, #84]	; 0x54
 810a27a:	f001 feb3 	bl	810bfe4 <__match>
 810a27e:	b910      	cbnz	r0, 810a286 <_strtod_l+0x376>
 810a280:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810a282:	3301      	adds	r3, #1
 810a284:	9315      	str	r3, [sp, #84]	; 0x54
 810a286:	f8df 921c 	ldr.w	r9, [pc, #540]	; 810a4a4 <_strtod_l+0x594>
 810a28a:	f04f 0800 	mov.w	r8, #0
 810a28e:	e67a      	b.n	8109f86 <_strtod_l+0x76>
 810a290:	4881      	ldr	r0, [pc, #516]	; (810a498 <_strtod_l+0x588>)
 810a292:	f000 fd59 	bl	810ad48 <nan>
 810a296:	ec59 8b10 	vmov	r8, r9, d0
 810a29a:	e674      	b.n	8109f86 <_strtod_l+0x76>
 810a29c:	9b05      	ldr	r3, [sp, #20]
 810a29e:	9809      	ldr	r0, [sp, #36]	; 0x24
 810a2a0:	1afb      	subs	r3, r7, r3
 810a2a2:	f1bb 0f00 	cmp.w	fp, #0
 810a2a6:	bf08      	it	eq
 810a2a8:	46b3      	moveq	fp, r6
 810a2aa:	2e10      	cmp	r6, #16
 810a2ac:	9308      	str	r3, [sp, #32]
 810a2ae:	4635      	mov	r5, r6
 810a2b0:	bfa8      	it	ge
 810a2b2:	2510      	movge	r5, #16
 810a2b4:	f7f6 f9ae 	bl	8100614 <__aeabi_ui2d>
 810a2b8:	2e09      	cmp	r6, #9
 810a2ba:	4680      	mov	r8, r0
 810a2bc:	4689      	mov	r9, r1
 810a2be:	dd13      	ble.n	810a2e8 <_strtod_l+0x3d8>
 810a2c0:	4b76      	ldr	r3, [pc, #472]	; (810a49c <_strtod_l+0x58c>)
 810a2c2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 810a2c6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 810a2ca:	f7f6 fa1d 	bl	8100708 <__aeabi_dmul>
 810a2ce:	4680      	mov	r8, r0
 810a2d0:	4650      	mov	r0, sl
 810a2d2:	4689      	mov	r9, r1
 810a2d4:	f7f6 f99e 	bl	8100614 <__aeabi_ui2d>
 810a2d8:	4602      	mov	r2, r0
 810a2da:	460b      	mov	r3, r1
 810a2dc:	4640      	mov	r0, r8
 810a2de:	4649      	mov	r1, r9
 810a2e0:	f7f6 f85c 	bl	810039c <__adddf3>
 810a2e4:	4680      	mov	r8, r0
 810a2e6:	4689      	mov	r9, r1
 810a2e8:	2e0f      	cmp	r6, #15
 810a2ea:	dc38      	bgt.n	810a35e <_strtod_l+0x44e>
 810a2ec:	9b08      	ldr	r3, [sp, #32]
 810a2ee:	2b00      	cmp	r3, #0
 810a2f0:	f43f ae49 	beq.w	8109f86 <_strtod_l+0x76>
 810a2f4:	dd24      	ble.n	810a340 <_strtod_l+0x430>
 810a2f6:	2b16      	cmp	r3, #22
 810a2f8:	dc0b      	bgt.n	810a312 <_strtod_l+0x402>
 810a2fa:	4968      	ldr	r1, [pc, #416]	; (810a49c <_strtod_l+0x58c>)
 810a2fc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810a300:	e9d1 0100 	ldrd	r0, r1, [r1]
 810a304:	4642      	mov	r2, r8
 810a306:	464b      	mov	r3, r9
 810a308:	f7f6 f9fe 	bl	8100708 <__aeabi_dmul>
 810a30c:	4680      	mov	r8, r0
 810a30e:	4689      	mov	r9, r1
 810a310:	e639      	b.n	8109f86 <_strtod_l+0x76>
 810a312:	9a08      	ldr	r2, [sp, #32]
 810a314:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 810a318:	4293      	cmp	r3, r2
 810a31a:	db20      	blt.n	810a35e <_strtod_l+0x44e>
 810a31c:	4c5f      	ldr	r4, [pc, #380]	; (810a49c <_strtod_l+0x58c>)
 810a31e:	f1c6 060f 	rsb	r6, r6, #15
 810a322:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 810a326:	4642      	mov	r2, r8
 810a328:	464b      	mov	r3, r9
 810a32a:	e9d1 0100 	ldrd	r0, r1, [r1]
 810a32e:	f7f6 f9eb 	bl	8100708 <__aeabi_dmul>
 810a332:	9b08      	ldr	r3, [sp, #32]
 810a334:	1b9e      	subs	r6, r3, r6
 810a336:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 810a33a:	e9d4 2300 	ldrd	r2, r3, [r4]
 810a33e:	e7e3      	b.n	810a308 <_strtod_l+0x3f8>
 810a340:	9b08      	ldr	r3, [sp, #32]
 810a342:	3316      	adds	r3, #22
 810a344:	db0b      	blt.n	810a35e <_strtod_l+0x44e>
 810a346:	9b05      	ldr	r3, [sp, #20]
 810a348:	1bdf      	subs	r7, r3, r7
 810a34a:	4b54      	ldr	r3, [pc, #336]	; (810a49c <_strtod_l+0x58c>)
 810a34c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 810a350:	e9d7 2300 	ldrd	r2, r3, [r7]
 810a354:	4640      	mov	r0, r8
 810a356:	4649      	mov	r1, r9
 810a358:	f7f6 fb00 	bl	810095c <__aeabi_ddiv>
 810a35c:	e7d6      	b.n	810a30c <_strtod_l+0x3fc>
 810a35e:	9b08      	ldr	r3, [sp, #32]
 810a360:	1b75      	subs	r5, r6, r5
 810a362:	441d      	add	r5, r3
 810a364:	2d00      	cmp	r5, #0
 810a366:	dd70      	ble.n	810a44a <_strtod_l+0x53a>
 810a368:	f015 030f 	ands.w	r3, r5, #15
 810a36c:	d00a      	beq.n	810a384 <_strtod_l+0x474>
 810a36e:	494b      	ldr	r1, [pc, #300]	; (810a49c <_strtod_l+0x58c>)
 810a370:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810a374:	4642      	mov	r2, r8
 810a376:	464b      	mov	r3, r9
 810a378:	e9d1 0100 	ldrd	r0, r1, [r1]
 810a37c:	f7f6 f9c4 	bl	8100708 <__aeabi_dmul>
 810a380:	4680      	mov	r8, r0
 810a382:	4689      	mov	r9, r1
 810a384:	f035 050f 	bics.w	r5, r5, #15
 810a388:	d04d      	beq.n	810a426 <_strtod_l+0x516>
 810a38a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 810a38e:	dd22      	ble.n	810a3d6 <_strtod_l+0x4c6>
 810a390:	2500      	movs	r5, #0
 810a392:	46ab      	mov	fp, r5
 810a394:	9509      	str	r5, [sp, #36]	; 0x24
 810a396:	9505      	str	r5, [sp, #20]
 810a398:	2322      	movs	r3, #34	; 0x22
 810a39a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 810a4a4 <_strtod_l+0x594>
 810a39e:	6023      	str	r3, [r4, #0]
 810a3a0:	f04f 0800 	mov.w	r8, #0
 810a3a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810a3a6:	2b00      	cmp	r3, #0
 810a3a8:	f43f aded 	beq.w	8109f86 <_strtod_l+0x76>
 810a3ac:	9916      	ldr	r1, [sp, #88]	; 0x58
 810a3ae:	4620      	mov	r0, r4
 810a3b0:	f002 f9d4 	bl	810c75c <_Bfree>
 810a3b4:	9905      	ldr	r1, [sp, #20]
 810a3b6:	4620      	mov	r0, r4
 810a3b8:	f002 f9d0 	bl	810c75c <_Bfree>
 810a3bc:	4659      	mov	r1, fp
 810a3be:	4620      	mov	r0, r4
 810a3c0:	f002 f9cc 	bl	810c75c <_Bfree>
 810a3c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 810a3c6:	4620      	mov	r0, r4
 810a3c8:	f002 f9c8 	bl	810c75c <_Bfree>
 810a3cc:	4629      	mov	r1, r5
 810a3ce:	4620      	mov	r0, r4
 810a3d0:	f002 f9c4 	bl	810c75c <_Bfree>
 810a3d4:	e5d7      	b.n	8109f86 <_strtod_l+0x76>
 810a3d6:	4b32      	ldr	r3, [pc, #200]	; (810a4a0 <_strtod_l+0x590>)
 810a3d8:	9304      	str	r3, [sp, #16]
 810a3da:	2300      	movs	r3, #0
 810a3dc:	112d      	asrs	r5, r5, #4
 810a3de:	4640      	mov	r0, r8
 810a3e0:	4649      	mov	r1, r9
 810a3e2:	469a      	mov	sl, r3
 810a3e4:	2d01      	cmp	r5, #1
 810a3e6:	dc21      	bgt.n	810a42c <_strtod_l+0x51c>
 810a3e8:	b10b      	cbz	r3, 810a3ee <_strtod_l+0x4de>
 810a3ea:	4680      	mov	r8, r0
 810a3ec:	4689      	mov	r9, r1
 810a3ee:	492c      	ldr	r1, [pc, #176]	; (810a4a0 <_strtod_l+0x590>)
 810a3f0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 810a3f4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 810a3f8:	4642      	mov	r2, r8
 810a3fa:	464b      	mov	r3, r9
 810a3fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 810a400:	f7f6 f982 	bl	8100708 <__aeabi_dmul>
 810a404:	4b27      	ldr	r3, [pc, #156]	; (810a4a4 <_strtod_l+0x594>)
 810a406:	460a      	mov	r2, r1
 810a408:	400b      	ands	r3, r1
 810a40a:	4927      	ldr	r1, [pc, #156]	; (810a4a8 <_strtod_l+0x598>)
 810a40c:	428b      	cmp	r3, r1
 810a40e:	4680      	mov	r8, r0
 810a410:	d8be      	bhi.n	810a390 <_strtod_l+0x480>
 810a412:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 810a416:	428b      	cmp	r3, r1
 810a418:	bf86      	itte	hi
 810a41a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 810a4ac <_strtod_l+0x59c>
 810a41e:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 810a422:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 810a426:	2300      	movs	r3, #0
 810a428:	9304      	str	r3, [sp, #16]
 810a42a:	e07b      	b.n	810a524 <_strtod_l+0x614>
 810a42c:	07ea      	lsls	r2, r5, #31
 810a42e:	d505      	bpl.n	810a43c <_strtod_l+0x52c>
 810a430:	9b04      	ldr	r3, [sp, #16]
 810a432:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a436:	f7f6 f967 	bl	8100708 <__aeabi_dmul>
 810a43a:	2301      	movs	r3, #1
 810a43c:	9a04      	ldr	r2, [sp, #16]
 810a43e:	3208      	adds	r2, #8
 810a440:	f10a 0a01 	add.w	sl, sl, #1
 810a444:	106d      	asrs	r5, r5, #1
 810a446:	9204      	str	r2, [sp, #16]
 810a448:	e7cc      	b.n	810a3e4 <_strtod_l+0x4d4>
 810a44a:	d0ec      	beq.n	810a426 <_strtod_l+0x516>
 810a44c:	426d      	negs	r5, r5
 810a44e:	f015 020f 	ands.w	r2, r5, #15
 810a452:	d00a      	beq.n	810a46a <_strtod_l+0x55a>
 810a454:	4b11      	ldr	r3, [pc, #68]	; (810a49c <_strtod_l+0x58c>)
 810a456:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810a45a:	4640      	mov	r0, r8
 810a45c:	4649      	mov	r1, r9
 810a45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a462:	f7f6 fa7b 	bl	810095c <__aeabi_ddiv>
 810a466:	4680      	mov	r8, r0
 810a468:	4689      	mov	r9, r1
 810a46a:	112d      	asrs	r5, r5, #4
 810a46c:	d0db      	beq.n	810a426 <_strtod_l+0x516>
 810a46e:	2d1f      	cmp	r5, #31
 810a470:	dd1e      	ble.n	810a4b0 <_strtod_l+0x5a0>
 810a472:	2500      	movs	r5, #0
 810a474:	46ab      	mov	fp, r5
 810a476:	9509      	str	r5, [sp, #36]	; 0x24
 810a478:	9505      	str	r5, [sp, #20]
 810a47a:	2322      	movs	r3, #34	; 0x22
 810a47c:	f04f 0800 	mov.w	r8, #0
 810a480:	f04f 0900 	mov.w	r9, #0
 810a484:	6023      	str	r3, [r4, #0]
 810a486:	e78d      	b.n	810a3a4 <_strtod_l+0x494>
 810a488:	0810e795 	.word	0x0810e795
 810a48c:	0810e848 	.word	0x0810e848
 810a490:	0810e78d 	.word	0x0810e78d
 810a494:	0810e9d0 	.word	0x0810e9d0
 810a498:	0810e9cc 	.word	0x0810e9cc
 810a49c:	0810eb38 	.word	0x0810eb38
 810a4a0:	0810eb10 	.word	0x0810eb10
 810a4a4:	7ff00000 	.word	0x7ff00000
 810a4a8:	7ca00000 	.word	0x7ca00000
 810a4ac:	7fefffff 	.word	0x7fefffff
 810a4b0:	f015 0310 	ands.w	r3, r5, #16
 810a4b4:	bf18      	it	ne
 810a4b6:	236a      	movne	r3, #106	; 0x6a
 810a4b8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 810a85c <_strtod_l+0x94c>
 810a4bc:	9304      	str	r3, [sp, #16]
 810a4be:	4640      	mov	r0, r8
 810a4c0:	4649      	mov	r1, r9
 810a4c2:	2300      	movs	r3, #0
 810a4c4:	07ea      	lsls	r2, r5, #31
 810a4c6:	d504      	bpl.n	810a4d2 <_strtod_l+0x5c2>
 810a4c8:	e9da 2300 	ldrd	r2, r3, [sl]
 810a4cc:	f7f6 f91c 	bl	8100708 <__aeabi_dmul>
 810a4d0:	2301      	movs	r3, #1
 810a4d2:	106d      	asrs	r5, r5, #1
 810a4d4:	f10a 0a08 	add.w	sl, sl, #8
 810a4d8:	d1f4      	bne.n	810a4c4 <_strtod_l+0x5b4>
 810a4da:	b10b      	cbz	r3, 810a4e0 <_strtod_l+0x5d0>
 810a4dc:	4680      	mov	r8, r0
 810a4de:	4689      	mov	r9, r1
 810a4e0:	9b04      	ldr	r3, [sp, #16]
 810a4e2:	b1bb      	cbz	r3, 810a514 <_strtod_l+0x604>
 810a4e4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 810a4e8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 810a4ec:	2b00      	cmp	r3, #0
 810a4ee:	4649      	mov	r1, r9
 810a4f0:	dd10      	ble.n	810a514 <_strtod_l+0x604>
 810a4f2:	2b1f      	cmp	r3, #31
 810a4f4:	f340 811e 	ble.w	810a734 <_strtod_l+0x824>
 810a4f8:	2b34      	cmp	r3, #52	; 0x34
 810a4fa:	bfde      	ittt	le
 810a4fc:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 810a500:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 810a504:	4093      	lslle	r3, r2
 810a506:	f04f 0800 	mov.w	r8, #0
 810a50a:	bfcc      	ite	gt
 810a50c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 810a510:	ea03 0901 	andle.w	r9, r3, r1
 810a514:	2200      	movs	r2, #0
 810a516:	2300      	movs	r3, #0
 810a518:	4640      	mov	r0, r8
 810a51a:	4649      	mov	r1, r9
 810a51c:	f7f6 fb5c 	bl	8100bd8 <__aeabi_dcmpeq>
 810a520:	2800      	cmp	r0, #0
 810a522:	d1a6      	bne.n	810a472 <_strtod_l+0x562>
 810a524:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810a526:	9300      	str	r3, [sp, #0]
 810a528:	990b      	ldr	r1, [sp, #44]	; 0x2c
 810a52a:	4633      	mov	r3, r6
 810a52c:	465a      	mov	r2, fp
 810a52e:	4620      	mov	r0, r4
 810a530:	f002 f97c 	bl	810c82c <__s2b>
 810a534:	9009      	str	r0, [sp, #36]	; 0x24
 810a536:	2800      	cmp	r0, #0
 810a538:	f43f af2a 	beq.w	810a390 <_strtod_l+0x480>
 810a53c:	9a08      	ldr	r2, [sp, #32]
 810a53e:	9b05      	ldr	r3, [sp, #20]
 810a540:	2a00      	cmp	r2, #0
 810a542:	eba3 0307 	sub.w	r3, r3, r7
 810a546:	bfa8      	it	ge
 810a548:	2300      	movge	r3, #0
 810a54a:	930c      	str	r3, [sp, #48]	; 0x30
 810a54c:	2500      	movs	r5, #0
 810a54e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 810a552:	9312      	str	r3, [sp, #72]	; 0x48
 810a554:	46ab      	mov	fp, r5
 810a556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810a558:	4620      	mov	r0, r4
 810a55a:	6859      	ldr	r1, [r3, #4]
 810a55c:	f002 f8be 	bl	810c6dc <_Balloc>
 810a560:	9005      	str	r0, [sp, #20]
 810a562:	2800      	cmp	r0, #0
 810a564:	f43f af18 	beq.w	810a398 <_strtod_l+0x488>
 810a568:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810a56a:	691a      	ldr	r2, [r3, #16]
 810a56c:	3202      	adds	r2, #2
 810a56e:	f103 010c 	add.w	r1, r3, #12
 810a572:	0092      	lsls	r2, r2, #2
 810a574:	300c      	adds	r0, #12
 810a576:	f000 fbd9 	bl	810ad2c <memcpy>
 810a57a:	ec49 8b10 	vmov	d0, r8, r9
 810a57e:	aa18      	add	r2, sp, #96	; 0x60
 810a580:	a917      	add	r1, sp, #92	; 0x5c
 810a582:	4620      	mov	r0, r4
 810a584:	f002 fc86 	bl	810ce94 <__d2b>
 810a588:	ec49 8b18 	vmov	d8, r8, r9
 810a58c:	9016      	str	r0, [sp, #88]	; 0x58
 810a58e:	2800      	cmp	r0, #0
 810a590:	f43f af02 	beq.w	810a398 <_strtod_l+0x488>
 810a594:	2101      	movs	r1, #1
 810a596:	4620      	mov	r0, r4
 810a598:	f002 f9e0 	bl	810c95c <__i2b>
 810a59c:	4683      	mov	fp, r0
 810a59e:	2800      	cmp	r0, #0
 810a5a0:	f43f aefa 	beq.w	810a398 <_strtod_l+0x488>
 810a5a4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 810a5a6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 810a5a8:	2e00      	cmp	r6, #0
 810a5aa:	bfab      	itete	ge
 810a5ac:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 810a5ae:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 810a5b0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 810a5b2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 810a5b6:	bfac      	ite	ge
 810a5b8:	eb06 0a03 	addge.w	sl, r6, r3
 810a5bc:	1b9f      	sublt	r7, r3, r6
 810a5be:	9b04      	ldr	r3, [sp, #16]
 810a5c0:	1af6      	subs	r6, r6, r3
 810a5c2:	4416      	add	r6, r2
 810a5c4:	4ba0      	ldr	r3, [pc, #640]	; (810a848 <_strtod_l+0x938>)
 810a5c6:	3e01      	subs	r6, #1
 810a5c8:	429e      	cmp	r6, r3
 810a5ca:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 810a5ce:	f280 80c4 	bge.w	810a75a <_strtod_l+0x84a>
 810a5d2:	1b9b      	subs	r3, r3, r6
 810a5d4:	2b1f      	cmp	r3, #31
 810a5d6:	eba2 0203 	sub.w	r2, r2, r3
 810a5da:	f04f 0101 	mov.w	r1, #1
 810a5de:	f300 80b0 	bgt.w	810a742 <_strtod_l+0x832>
 810a5e2:	fa01 f303 	lsl.w	r3, r1, r3
 810a5e6:	930e      	str	r3, [sp, #56]	; 0x38
 810a5e8:	2300      	movs	r3, #0
 810a5ea:	930d      	str	r3, [sp, #52]	; 0x34
 810a5ec:	eb0a 0602 	add.w	r6, sl, r2
 810a5f0:	9b04      	ldr	r3, [sp, #16]
 810a5f2:	45b2      	cmp	sl, r6
 810a5f4:	4417      	add	r7, r2
 810a5f6:	441f      	add	r7, r3
 810a5f8:	4653      	mov	r3, sl
 810a5fa:	bfa8      	it	ge
 810a5fc:	4633      	movge	r3, r6
 810a5fe:	42bb      	cmp	r3, r7
 810a600:	bfa8      	it	ge
 810a602:	463b      	movge	r3, r7
 810a604:	2b00      	cmp	r3, #0
 810a606:	bfc2      	ittt	gt
 810a608:	1af6      	subgt	r6, r6, r3
 810a60a:	1aff      	subgt	r7, r7, r3
 810a60c:	ebaa 0a03 	subgt.w	sl, sl, r3
 810a610:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810a612:	2b00      	cmp	r3, #0
 810a614:	dd17      	ble.n	810a646 <_strtod_l+0x736>
 810a616:	4659      	mov	r1, fp
 810a618:	461a      	mov	r2, r3
 810a61a:	4620      	mov	r0, r4
 810a61c:	f002 fa5e 	bl	810cadc <__pow5mult>
 810a620:	4683      	mov	fp, r0
 810a622:	2800      	cmp	r0, #0
 810a624:	f43f aeb8 	beq.w	810a398 <_strtod_l+0x488>
 810a628:	4601      	mov	r1, r0
 810a62a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 810a62c:	4620      	mov	r0, r4
 810a62e:	f002 f9ab 	bl	810c988 <__multiply>
 810a632:	900b      	str	r0, [sp, #44]	; 0x2c
 810a634:	2800      	cmp	r0, #0
 810a636:	f43f aeaf 	beq.w	810a398 <_strtod_l+0x488>
 810a63a:	9916      	ldr	r1, [sp, #88]	; 0x58
 810a63c:	4620      	mov	r0, r4
 810a63e:	f002 f88d 	bl	810c75c <_Bfree>
 810a642:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810a644:	9316      	str	r3, [sp, #88]	; 0x58
 810a646:	2e00      	cmp	r6, #0
 810a648:	f300 808c 	bgt.w	810a764 <_strtod_l+0x854>
 810a64c:	9b08      	ldr	r3, [sp, #32]
 810a64e:	2b00      	cmp	r3, #0
 810a650:	dd08      	ble.n	810a664 <_strtod_l+0x754>
 810a652:	9a12      	ldr	r2, [sp, #72]	; 0x48
 810a654:	9905      	ldr	r1, [sp, #20]
 810a656:	4620      	mov	r0, r4
 810a658:	f002 fa40 	bl	810cadc <__pow5mult>
 810a65c:	9005      	str	r0, [sp, #20]
 810a65e:	2800      	cmp	r0, #0
 810a660:	f43f ae9a 	beq.w	810a398 <_strtod_l+0x488>
 810a664:	2f00      	cmp	r7, #0
 810a666:	dd08      	ble.n	810a67a <_strtod_l+0x76a>
 810a668:	9905      	ldr	r1, [sp, #20]
 810a66a:	463a      	mov	r2, r7
 810a66c:	4620      	mov	r0, r4
 810a66e:	f002 fa8f 	bl	810cb90 <__lshift>
 810a672:	9005      	str	r0, [sp, #20]
 810a674:	2800      	cmp	r0, #0
 810a676:	f43f ae8f 	beq.w	810a398 <_strtod_l+0x488>
 810a67a:	f1ba 0f00 	cmp.w	sl, #0
 810a67e:	dd08      	ble.n	810a692 <_strtod_l+0x782>
 810a680:	4659      	mov	r1, fp
 810a682:	4652      	mov	r2, sl
 810a684:	4620      	mov	r0, r4
 810a686:	f002 fa83 	bl	810cb90 <__lshift>
 810a68a:	4683      	mov	fp, r0
 810a68c:	2800      	cmp	r0, #0
 810a68e:	f43f ae83 	beq.w	810a398 <_strtod_l+0x488>
 810a692:	9a05      	ldr	r2, [sp, #20]
 810a694:	9916      	ldr	r1, [sp, #88]	; 0x58
 810a696:	4620      	mov	r0, r4
 810a698:	f002 fb02 	bl	810cca0 <__mdiff>
 810a69c:	4605      	mov	r5, r0
 810a69e:	2800      	cmp	r0, #0
 810a6a0:	f43f ae7a 	beq.w	810a398 <_strtod_l+0x488>
 810a6a4:	68c3      	ldr	r3, [r0, #12]
 810a6a6:	930b      	str	r3, [sp, #44]	; 0x2c
 810a6a8:	2300      	movs	r3, #0
 810a6aa:	60c3      	str	r3, [r0, #12]
 810a6ac:	4659      	mov	r1, fp
 810a6ae:	f002 fadb 	bl	810cc68 <__mcmp>
 810a6b2:	2800      	cmp	r0, #0
 810a6b4:	da60      	bge.n	810a778 <_strtod_l+0x868>
 810a6b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810a6b8:	ea53 0308 	orrs.w	r3, r3, r8
 810a6bc:	f040 8084 	bne.w	810a7c8 <_strtod_l+0x8b8>
 810a6c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810a6c4:	2b00      	cmp	r3, #0
 810a6c6:	d17f      	bne.n	810a7c8 <_strtod_l+0x8b8>
 810a6c8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 810a6cc:	0d1b      	lsrs	r3, r3, #20
 810a6ce:	051b      	lsls	r3, r3, #20
 810a6d0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 810a6d4:	d978      	bls.n	810a7c8 <_strtod_l+0x8b8>
 810a6d6:	696b      	ldr	r3, [r5, #20]
 810a6d8:	b913      	cbnz	r3, 810a6e0 <_strtod_l+0x7d0>
 810a6da:	692b      	ldr	r3, [r5, #16]
 810a6dc:	2b01      	cmp	r3, #1
 810a6de:	dd73      	ble.n	810a7c8 <_strtod_l+0x8b8>
 810a6e0:	4629      	mov	r1, r5
 810a6e2:	2201      	movs	r2, #1
 810a6e4:	4620      	mov	r0, r4
 810a6e6:	f002 fa53 	bl	810cb90 <__lshift>
 810a6ea:	4659      	mov	r1, fp
 810a6ec:	4605      	mov	r5, r0
 810a6ee:	f002 fabb 	bl	810cc68 <__mcmp>
 810a6f2:	2800      	cmp	r0, #0
 810a6f4:	dd68      	ble.n	810a7c8 <_strtod_l+0x8b8>
 810a6f6:	9904      	ldr	r1, [sp, #16]
 810a6f8:	4a54      	ldr	r2, [pc, #336]	; (810a84c <_strtod_l+0x93c>)
 810a6fa:	464b      	mov	r3, r9
 810a6fc:	2900      	cmp	r1, #0
 810a6fe:	f000 8084 	beq.w	810a80a <_strtod_l+0x8fa>
 810a702:	ea02 0109 	and.w	r1, r2, r9
 810a706:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 810a70a:	dc7e      	bgt.n	810a80a <_strtod_l+0x8fa>
 810a70c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 810a710:	f77f aeb3 	ble.w	810a47a <_strtod_l+0x56a>
 810a714:	4b4e      	ldr	r3, [pc, #312]	; (810a850 <_strtod_l+0x940>)
 810a716:	4640      	mov	r0, r8
 810a718:	4649      	mov	r1, r9
 810a71a:	2200      	movs	r2, #0
 810a71c:	f7f5 fff4 	bl	8100708 <__aeabi_dmul>
 810a720:	4b4a      	ldr	r3, [pc, #296]	; (810a84c <_strtod_l+0x93c>)
 810a722:	400b      	ands	r3, r1
 810a724:	4680      	mov	r8, r0
 810a726:	4689      	mov	r9, r1
 810a728:	2b00      	cmp	r3, #0
 810a72a:	f47f ae3f 	bne.w	810a3ac <_strtod_l+0x49c>
 810a72e:	2322      	movs	r3, #34	; 0x22
 810a730:	6023      	str	r3, [r4, #0]
 810a732:	e63b      	b.n	810a3ac <_strtod_l+0x49c>
 810a734:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810a738:	fa02 f303 	lsl.w	r3, r2, r3
 810a73c:	ea03 0808 	and.w	r8, r3, r8
 810a740:	e6e8      	b.n	810a514 <_strtod_l+0x604>
 810a742:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 810a746:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 810a74a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 810a74e:	36e2      	adds	r6, #226	; 0xe2
 810a750:	fa01 f306 	lsl.w	r3, r1, r6
 810a754:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 810a758:	e748      	b.n	810a5ec <_strtod_l+0x6dc>
 810a75a:	2100      	movs	r1, #0
 810a75c:	2301      	movs	r3, #1
 810a75e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 810a762:	e743      	b.n	810a5ec <_strtod_l+0x6dc>
 810a764:	9916      	ldr	r1, [sp, #88]	; 0x58
 810a766:	4632      	mov	r2, r6
 810a768:	4620      	mov	r0, r4
 810a76a:	f002 fa11 	bl	810cb90 <__lshift>
 810a76e:	9016      	str	r0, [sp, #88]	; 0x58
 810a770:	2800      	cmp	r0, #0
 810a772:	f47f af6b 	bne.w	810a64c <_strtod_l+0x73c>
 810a776:	e60f      	b.n	810a398 <_strtod_l+0x488>
 810a778:	46ca      	mov	sl, r9
 810a77a:	d171      	bne.n	810a860 <_strtod_l+0x950>
 810a77c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810a77e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810a782:	b352      	cbz	r2, 810a7da <_strtod_l+0x8ca>
 810a784:	4a33      	ldr	r2, [pc, #204]	; (810a854 <_strtod_l+0x944>)
 810a786:	4293      	cmp	r3, r2
 810a788:	d12a      	bne.n	810a7e0 <_strtod_l+0x8d0>
 810a78a:	9b04      	ldr	r3, [sp, #16]
 810a78c:	4641      	mov	r1, r8
 810a78e:	b1fb      	cbz	r3, 810a7d0 <_strtod_l+0x8c0>
 810a790:	4b2e      	ldr	r3, [pc, #184]	; (810a84c <_strtod_l+0x93c>)
 810a792:	ea09 0303 	and.w	r3, r9, r3
 810a796:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 810a79a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810a79e:	d81a      	bhi.n	810a7d6 <_strtod_l+0x8c6>
 810a7a0:	0d1b      	lsrs	r3, r3, #20
 810a7a2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 810a7a6:	fa02 f303 	lsl.w	r3, r2, r3
 810a7aa:	4299      	cmp	r1, r3
 810a7ac:	d118      	bne.n	810a7e0 <_strtod_l+0x8d0>
 810a7ae:	4b2a      	ldr	r3, [pc, #168]	; (810a858 <_strtod_l+0x948>)
 810a7b0:	459a      	cmp	sl, r3
 810a7b2:	d102      	bne.n	810a7ba <_strtod_l+0x8aa>
 810a7b4:	3101      	adds	r1, #1
 810a7b6:	f43f adef 	beq.w	810a398 <_strtod_l+0x488>
 810a7ba:	4b24      	ldr	r3, [pc, #144]	; (810a84c <_strtod_l+0x93c>)
 810a7bc:	ea0a 0303 	and.w	r3, sl, r3
 810a7c0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 810a7c4:	f04f 0800 	mov.w	r8, #0
 810a7c8:	9b04      	ldr	r3, [sp, #16]
 810a7ca:	2b00      	cmp	r3, #0
 810a7cc:	d1a2      	bne.n	810a714 <_strtod_l+0x804>
 810a7ce:	e5ed      	b.n	810a3ac <_strtod_l+0x49c>
 810a7d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 810a7d4:	e7e9      	b.n	810a7aa <_strtod_l+0x89a>
 810a7d6:	4613      	mov	r3, r2
 810a7d8:	e7e7      	b.n	810a7aa <_strtod_l+0x89a>
 810a7da:	ea53 0308 	orrs.w	r3, r3, r8
 810a7de:	d08a      	beq.n	810a6f6 <_strtod_l+0x7e6>
 810a7e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810a7e2:	b1e3      	cbz	r3, 810a81e <_strtod_l+0x90e>
 810a7e4:	ea13 0f0a 	tst.w	r3, sl
 810a7e8:	d0ee      	beq.n	810a7c8 <_strtod_l+0x8b8>
 810a7ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810a7ec:	9a04      	ldr	r2, [sp, #16]
 810a7ee:	4640      	mov	r0, r8
 810a7f0:	4649      	mov	r1, r9
 810a7f2:	b1c3      	cbz	r3, 810a826 <_strtod_l+0x916>
 810a7f4:	f7ff fb70 	bl	8109ed8 <sulp>
 810a7f8:	4602      	mov	r2, r0
 810a7fa:	460b      	mov	r3, r1
 810a7fc:	ec51 0b18 	vmov	r0, r1, d8
 810a800:	f7f5 fdcc 	bl	810039c <__adddf3>
 810a804:	4680      	mov	r8, r0
 810a806:	4689      	mov	r9, r1
 810a808:	e7de      	b.n	810a7c8 <_strtod_l+0x8b8>
 810a80a:	4013      	ands	r3, r2
 810a80c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 810a810:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 810a814:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 810a818:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 810a81c:	e7d4      	b.n	810a7c8 <_strtod_l+0x8b8>
 810a81e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810a820:	ea13 0f08 	tst.w	r3, r8
 810a824:	e7e0      	b.n	810a7e8 <_strtod_l+0x8d8>
 810a826:	f7ff fb57 	bl	8109ed8 <sulp>
 810a82a:	4602      	mov	r2, r0
 810a82c:	460b      	mov	r3, r1
 810a82e:	ec51 0b18 	vmov	r0, r1, d8
 810a832:	f7f5 fdb1 	bl	8100398 <__aeabi_dsub>
 810a836:	2200      	movs	r2, #0
 810a838:	2300      	movs	r3, #0
 810a83a:	4680      	mov	r8, r0
 810a83c:	4689      	mov	r9, r1
 810a83e:	f7f6 f9cb 	bl	8100bd8 <__aeabi_dcmpeq>
 810a842:	2800      	cmp	r0, #0
 810a844:	d0c0      	beq.n	810a7c8 <_strtod_l+0x8b8>
 810a846:	e618      	b.n	810a47a <_strtod_l+0x56a>
 810a848:	fffffc02 	.word	0xfffffc02
 810a84c:	7ff00000 	.word	0x7ff00000
 810a850:	39500000 	.word	0x39500000
 810a854:	000fffff 	.word	0x000fffff
 810a858:	7fefffff 	.word	0x7fefffff
 810a85c:	0810e860 	.word	0x0810e860
 810a860:	4659      	mov	r1, fp
 810a862:	4628      	mov	r0, r5
 810a864:	f002 fb70 	bl	810cf48 <__ratio>
 810a868:	ec57 6b10 	vmov	r6, r7, d0
 810a86c:	ee10 0a10 	vmov	r0, s0
 810a870:	2200      	movs	r2, #0
 810a872:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 810a876:	4639      	mov	r1, r7
 810a878:	f7f6 f9c2 	bl	8100c00 <__aeabi_dcmple>
 810a87c:	2800      	cmp	r0, #0
 810a87e:	d071      	beq.n	810a964 <_strtod_l+0xa54>
 810a880:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810a882:	2b00      	cmp	r3, #0
 810a884:	d17c      	bne.n	810a980 <_strtod_l+0xa70>
 810a886:	f1b8 0f00 	cmp.w	r8, #0
 810a88a:	d15a      	bne.n	810a942 <_strtod_l+0xa32>
 810a88c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810a890:	2b00      	cmp	r3, #0
 810a892:	d15d      	bne.n	810a950 <_strtod_l+0xa40>
 810a894:	4b90      	ldr	r3, [pc, #576]	; (810aad8 <_strtod_l+0xbc8>)
 810a896:	2200      	movs	r2, #0
 810a898:	4630      	mov	r0, r6
 810a89a:	4639      	mov	r1, r7
 810a89c:	f7f6 f9a6 	bl	8100bec <__aeabi_dcmplt>
 810a8a0:	2800      	cmp	r0, #0
 810a8a2:	d15c      	bne.n	810a95e <_strtod_l+0xa4e>
 810a8a4:	4630      	mov	r0, r6
 810a8a6:	4639      	mov	r1, r7
 810a8a8:	4b8c      	ldr	r3, [pc, #560]	; (810aadc <_strtod_l+0xbcc>)
 810a8aa:	2200      	movs	r2, #0
 810a8ac:	f7f5 ff2c 	bl	8100708 <__aeabi_dmul>
 810a8b0:	4606      	mov	r6, r0
 810a8b2:	460f      	mov	r7, r1
 810a8b4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 810a8b8:	9606      	str	r6, [sp, #24]
 810a8ba:	9307      	str	r3, [sp, #28]
 810a8bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810a8c0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 810a8c4:	4b86      	ldr	r3, [pc, #536]	; (810aae0 <_strtod_l+0xbd0>)
 810a8c6:	ea0a 0303 	and.w	r3, sl, r3
 810a8ca:	930d      	str	r3, [sp, #52]	; 0x34
 810a8cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810a8ce:	4b85      	ldr	r3, [pc, #532]	; (810aae4 <_strtod_l+0xbd4>)
 810a8d0:	429a      	cmp	r2, r3
 810a8d2:	f040 8090 	bne.w	810a9f6 <_strtod_l+0xae6>
 810a8d6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 810a8da:	ec49 8b10 	vmov	d0, r8, r9
 810a8de:	f002 fa69 	bl	810cdb4 <__ulp>
 810a8e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810a8e6:	ec51 0b10 	vmov	r0, r1, d0
 810a8ea:	f7f5 ff0d 	bl	8100708 <__aeabi_dmul>
 810a8ee:	4642      	mov	r2, r8
 810a8f0:	464b      	mov	r3, r9
 810a8f2:	f7f5 fd53 	bl	810039c <__adddf3>
 810a8f6:	460b      	mov	r3, r1
 810a8f8:	4979      	ldr	r1, [pc, #484]	; (810aae0 <_strtod_l+0xbd0>)
 810a8fa:	4a7b      	ldr	r2, [pc, #492]	; (810aae8 <_strtod_l+0xbd8>)
 810a8fc:	4019      	ands	r1, r3
 810a8fe:	4291      	cmp	r1, r2
 810a900:	4680      	mov	r8, r0
 810a902:	d944      	bls.n	810a98e <_strtod_l+0xa7e>
 810a904:	ee18 2a90 	vmov	r2, s17
 810a908:	4b78      	ldr	r3, [pc, #480]	; (810aaec <_strtod_l+0xbdc>)
 810a90a:	429a      	cmp	r2, r3
 810a90c:	d104      	bne.n	810a918 <_strtod_l+0xa08>
 810a90e:	ee18 3a10 	vmov	r3, s16
 810a912:	3301      	adds	r3, #1
 810a914:	f43f ad40 	beq.w	810a398 <_strtod_l+0x488>
 810a918:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 810aaec <_strtod_l+0xbdc>
 810a91c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 810a920:	9916      	ldr	r1, [sp, #88]	; 0x58
 810a922:	4620      	mov	r0, r4
 810a924:	f001 ff1a 	bl	810c75c <_Bfree>
 810a928:	9905      	ldr	r1, [sp, #20]
 810a92a:	4620      	mov	r0, r4
 810a92c:	f001 ff16 	bl	810c75c <_Bfree>
 810a930:	4659      	mov	r1, fp
 810a932:	4620      	mov	r0, r4
 810a934:	f001 ff12 	bl	810c75c <_Bfree>
 810a938:	4629      	mov	r1, r5
 810a93a:	4620      	mov	r0, r4
 810a93c:	f001 ff0e 	bl	810c75c <_Bfree>
 810a940:	e609      	b.n	810a556 <_strtod_l+0x646>
 810a942:	f1b8 0f01 	cmp.w	r8, #1
 810a946:	d103      	bne.n	810a950 <_strtod_l+0xa40>
 810a948:	f1b9 0f00 	cmp.w	r9, #0
 810a94c:	f43f ad95 	beq.w	810a47a <_strtod_l+0x56a>
 810a950:	ed9f 7b55 	vldr	d7, [pc, #340]	; 810aaa8 <_strtod_l+0xb98>
 810a954:	4f60      	ldr	r7, [pc, #384]	; (810aad8 <_strtod_l+0xbc8>)
 810a956:	ed8d 7b06 	vstr	d7, [sp, #24]
 810a95a:	2600      	movs	r6, #0
 810a95c:	e7ae      	b.n	810a8bc <_strtod_l+0x9ac>
 810a95e:	4f5f      	ldr	r7, [pc, #380]	; (810aadc <_strtod_l+0xbcc>)
 810a960:	2600      	movs	r6, #0
 810a962:	e7a7      	b.n	810a8b4 <_strtod_l+0x9a4>
 810a964:	4b5d      	ldr	r3, [pc, #372]	; (810aadc <_strtod_l+0xbcc>)
 810a966:	4630      	mov	r0, r6
 810a968:	4639      	mov	r1, r7
 810a96a:	2200      	movs	r2, #0
 810a96c:	f7f5 fecc 	bl	8100708 <__aeabi_dmul>
 810a970:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810a972:	4606      	mov	r6, r0
 810a974:	460f      	mov	r7, r1
 810a976:	2b00      	cmp	r3, #0
 810a978:	d09c      	beq.n	810a8b4 <_strtod_l+0x9a4>
 810a97a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 810a97e:	e79d      	b.n	810a8bc <_strtod_l+0x9ac>
 810a980:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 810aab0 <_strtod_l+0xba0>
 810a984:	ed8d 7b06 	vstr	d7, [sp, #24]
 810a988:	ec57 6b17 	vmov	r6, r7, d7
 810a98c:	e796      	b.n	810a8bc <_strtod_l+0x9ac>
 810a98e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 810a992:	9b04      	ldr	r3, [sp, #16]
 810a994:	46ca      	mov	sl, r9
 810a996:	2b00      	cmp	r3, #0
 810a998:	d1c2      	bne.n	810a920 <_strtod_l+0xa10>
 810a99a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 810a99e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810a9a0:	0d1b      	lsrs	r3, r3, #20
 810a9a2:	051b      	lsls	r3, r3, #20
 810a9a4:	429a      	cmp	r2, r3
 810a9a6:	d1bb      	bne.n	810a920 <_strtod_l+0xa10>
 810a9a8:	4630      	mov	r0, r6
 810a9aa:	4639      	mov	r1, r7
 810a9ac:	f7f6 fa0c 	bl	8100dc8 <__aeabi_d2lz>
 810a9b0:	f7f5 fe7c 	bl	81006ac <__aeabi_l2d>
 810a9b4:	4602      	mov	r2, r0
 810a9b6:	460b      	mov	r3, r1
 810a9b8:	4630      	mov	r0, r6
 810a9ba:	4639      	mov	r1, r7
 810a9bc:	f7f5 fcec 	bl	8100398 <__aeabi_dsub>
 810a9c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810a9c2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810a9c6:	ea43 0308 	orr.w	r3, r3, r8
 810a9ca:	4313      	orrs	r3, r2
 810a9cc:	4606      	mov	r6, r0
 810a9ce:	460f      	mov	r7, r1
 810a9d0:	d054      	beq.n	810aa7c <_strtod_l+0xb6c>
 810a9d2:	a339      	add	r3, pc, #228	; (adr r3, 810aab8 <_strtod_l+0xba8>)
 810a9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a9d8:	f7f6 f908 	bl	8100bec <__aeabi_dcmplt>
 810a9dc:	2800      	cmp	r0, #0
 810a9de:	f47f ace5 	bne.w	810a3ac <_strtod_l+0x49c>
 810a9e2:	a337      	add	r3, pc, #220	; (adr r3, 810aac0 <_strtod_l+0xbb0>)
 810a9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a9e8:	4630      	mov	r0, r6
 810a9ea:	4639      	mov	r1, r7
 810a9ec:	f7f6 f91c 	bl	8100c28 <__aeabi_dcmpgt>
 810a9f0:	2800      	cmp	r0, #0
 810a9f2:	d095      	beq.n	810a920 <_strtod_l+0xa10>
 810a9f4:	e4da      	b.n	810a3ac <_strtod_l+0x49c>
 810a9f6:	9b04      	ldr	r3, [sp, #16]
 810a9f8:	b333      	cbz	r3, 810aa48 <_strtod_l+0xb38>
 810a9fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810a9fc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 810aa00:	d822      	bhi.n	810aa48 <_strtod_l+0xb38>
 810aa02:	a331      	add	r3, pc, #196	; (adr r3, 810aac8 <_strtod_l+0xbb8>)
 810aa04:	e9d3 2300 	ldrd	r2, r3, [r3]
 810aa08:	4630      	mov	r0, r6
 810aa0a:	4639      	mov	r1, r7
 810aa0c:	f7f6 f8f8 	bl	8100c00 <__aeabi_dcmple>
 810aa10:	b1a0      	cbz	r0, 810aa3c <_strtod_l+0xb2c>
 810aa12:	4639      	mov	r1, r7
 810aa14:	4630      	mov	r0, r6
 810aa16:	f7f6 f94f 	bl	8100cb8 <__aeabi_d2uiz>
 810aa1a:	2801      	cmp	r0, #1
 810aa1c:	bf38      	it	cc
 810aa1e:	2001      	movcc	r0, #1
 810aa20:	f7f5 fdf8 	bl	8100614 <__aeabi_ui2d>
 810aa24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810aa26:	4606      	mov	r6, r0
 810aa28:	460f      	mov	r7, r1
 810aa2a:	bb23      	cbnz	r3, 810aa76 <_strtod_l+0xb66>
 810aa2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810aa30:	9010      	str	r0, [sp, #64]	; 0x40
 810aa32:	9311      	str	r3, [sp, #68]	; 0x44
 810aa34:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 810aa38:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 810aa3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810aa3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810aa40:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 810aa44:	1a9b      	subs	r3, r3, r2
 810aa46:	930f      	str	r3, [sp, #60]	; 0x3c
 810aa48:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 810aa4c:	eeb0 0a48 	vmov.f32	s0, s16
 810aa50:	eef0 0a68 	vmov.f32	s1, s17
 810aa54:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 810aa58:	f002 f9ac 	bl	810cdb4 <__ulp>
 810aa5c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 810aa60:	ec53 2b10 	vmov	r2, r3, d0
 810aa64:	f7f5 fe50 	bl	8100708 <__aeabi_dmul>
 810aa68:	ec53 2b18 	vmov	r2, r3, d8
 810aa6c:	f7f5 fc96 	bl	810039c <__adddf3>
 810aa70:	4680      	mov	r8, r0
 810aa72:	4689      	mov	r9, r1
 810aa74:	e78d      	b.n	810a992 <_strtod_l+0xa82>
 810aa76:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 810aa7a:	e7db      	b.n	810aa34 <_strtod_l+0xb24>
 810aa7c:	a314      	add	r3, pc, #80	; (adr r3, 810aad0 <_strtod_l+0xbc0>)
 810aa7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810aa82:	f7f6 f8b3 	bl	8100bec <__aeabi_dcmplt>
 810aa86:	e7b3      	b.n	810a9f0 <_strtod_l+0xae0>
 810aa88:	2300      	movs	r3, #0
 810aa8a:	930a      	str	r3, [sp, #40]	; 0x28
 810aa8c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 810aa8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810aa90:	6013      	str	r3, [r2, #0]
 810aa92:	f7ff ba7c 	b.w	8109f8e <_strtod_l+0x7e>
 810aa96:	2a65      	cmp	r2, #101	; 0x65
 810aa98:	f43f ab75 	beq.w	810a186 <_strtod_l+0x276>
 810aa9c:	2a45      	cmp	r2, #69	; 0x45
 810aa9e:	f43f ab72 	beq.w	810a186 <_strtod_l+0x276>
 810aaa2:	2301      	movs	r3, #1
 810aaa4:	f7ff bbaa 	b.w	810a1fc <_strtod_l+0x2ec>
 810aaa8:	00000000 	.word	0x00000000
 810aaac:	bff00000 	.word	0xbff00000
 810aab0:	00000000 	.word	0x00000000
 810aab4:	3ff00000 	.word	0x3ff00000
 810aab8:	94a03595 	.word	0x94a03595
 810aabc:	3fdfffff 	.word	0x3fdfffff
 810aac0:	35afe535 	.word	0x35afe535
 810aac4:	3fe00000 	.word	0x3fe00000
 810aac8:	ffc00000 	.word	0xffc00000
 810aacc:	41dfffff 	.word	0x41dfffff
 810aad0:	94a03595 	.word	0x94a03595
 810aad4:	3fcfffff 	.word	0x3fcfffff
 810aad8:	3ff00000 	.word	0x3ff00000
 810aadc:	3fe00000 	.word	0x3fe00000
 810aae0:	7ff00000 	.word	0x7ff00000
 810aae4:	7fe00000 	.word	0x7fe00000
 810aae8:	7c9fffff 	.word	0x7c9fffff
 810aaec:	7fefffff 	.word	0x7fefffff

0810aaf0 <_strtod_r>:
 810aaf0:	4b01      	ldr	r3, [pc, #4]	; (810aaf8 <_strtod_r+0x8>)
 810aaf2:	f7ff ba0d 	b.w	8109f10 <_strtod_l>
 810aaf6:	bf00      	nop
 810aaf8:	1000001c 	.word	0x1000001c

0810aafc <_strtol_l.constprop.0>:
 810aafc:	2b01      	cmp	r3, #1
 810aafe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810ab02:	d001      	beq.n	810ab08 <_strtol_l.constprop.0+0xc>
 810ab04:	2b24      	cmp	r3, #36	; 0x24
 810ab06:	d906      	bls.n	810ab16 <_strtol_l.constprop.0+0x1a>
 810ab08:	f000 f8e4 	bl	810acd4 <__errno>
 810ab0c:	2316      	movs	r3, #22
 810ab0e:	6003      	str	r3, [r0, #0]
 810ab10:	2000      	movs	r0, #0
 810ab12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810ab16:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 810abfc <_strtol_l.constprop.0+0x100>
 810ab1a:	460d      	mov	r5, r1
 810ab1c:	462e      	mov	r6, r5
 810ab1e:	f815 4b01 	ldrb.w	r4, [r5], #1
 810ab22:	f81c 7004 	ldrb.w	r7, [ip, r4]
 810ab26:	f017 0708 	ands.w	r7, r7, #8
 810ab2a:	d1f7      	bne.n	810ab1c <_strtol_l.constprop.0+0x20>
 810ab2c:	2c2d      	cmp	r4, #45	; 0x2d
 810ab2e:	d132      	bne.n	810ab96 <_strtol_l.constprop.0+0x9a>
 810ab30:	782c      	ldrb	r4, [r5, #0]
 810ab32:	2701      	movs	r7, #1
 810ab34:	1cb5      	adds	r5, r6, #2
 810ab36:	2b00      	cmp	r3, #0
 810ab38:	d05b      	beq.n	810abf2 <_strtol_l.constprop.0+0xf6>
 810ab3a:	2b10      	cmp	r3, #16
 810ab3c:	d109      	bne.n	810ab52 <_strtol_l.constprop.0+0x56>
 810ab3e:	2c30      	cmp	r4, #48	; 0x30
 810ab40:	d107      	bne.n	810ab52 <_strtol_l.constprop.0+0x56>
 810ab42:	782c      	ldrb	r4, [r5, #0]
 810ab44:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 810ab48:	2c58      	cmp	r4, #88	; 0x58
 810ab4a:	d14d      	bne.n	810abe8 <_strtol_l.constprop.0+0xec>
 810ab4c:	786c      	ldrb	r4, [r5, #1]
 810ab4e:	2310      	movs	r3, #16
 810ab50:	3502      	adds	r5, #2
 810ab52:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 810ab56:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 810ab5a:	f04f 0e00 	mov.w	lr, #0
 810ab5e:	fbb8 f9f3 	udiv	r9, r8, r3
 810ab62:	4676      	mov	r6, lr
 810ab64:	fb03 8a19 	mls	sl, r3, r9, r8
 810ab68:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 810ab6c:	f1bc 0f09 	cmp.w	ip, #9
 810ab70:	d816      	bhi.n	810aba0 <_strtol_l.constprop.0+0xa4>
 810ab72:	4664      	mov	r4, ip
 810ab74:	42a3      	cmp	r3, r4
 810ab76:	dd24      	ble.n	810abc2 <_strtol_l.constprop.0+0xc6>
 810ab78:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 810ab7c:	d008      	beq.n	810ab90 <_strtol_l.constprop.0+0x94>
 810ab7e:	45b1      	cmp	r9, r6
 810ab80:	d31c      	bcc.n	810abbc <_strtol_l.constprop.0+0xc0>
 810ab82:	d101      	bne.n	810ab88 <_strtol_l.constprop.0+0x8c>
 810ab84:	45a2      	cmp	sl, r4
 810ab86:	db19      	blt.n	810abbc <_strtol_l.constprop.0+0xc0>
 810ab88:	fb06 4603 	mla	r6, r6, r3, r4
 810ab8c:	f04f 0e01 	mov.w	lr, #1
 810ab90:	f815 4b01 	ldrb.w	r4, [r5], #1
 810ab94:	e7e8      	b.n	810ab68 <_strtol_l.constprop.0+0x6c>
 810ab96:	2c2b      	cmp	r4, #43	; 0x2b
 810ab98:	bf04      	itt	eq
 810ab9a:	782c      	ldrbeq	r4, [r5, #0]
 810ab9c:	1cb5      	addeq	r5, r6, #2
 810ab9e:	e7ca      	b.n	810ab36 <_strtol_l.constprop.0+0x3a>
 810aba0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 810aba4:	f1bc 0f19 	cmp.w	ip, #25
 810aba8:	d801      	bhi.n	810abae <_strtol_l.constprop.0+0xb2>
 810abaa:	3c37      	subs	r4, #55	; 0x37
 810abac:	e7e2      	b.n	810ab74 <_strtol_l.constprop.0+0x78>
 810abae:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 810abb2:	f1bc 0f19 	cmp.w	ip, #25
 810abb6:	d804      	bhi.n	810abc2 <_strtol_l.constprop.0+0xc6>
 810abb8:	3c57      	subs	r4, #87	; 0x57
 810abba:	e7db      	b.n	810ab74 <_strtol_l.constprop.0+0x78>
 810abbc:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 810abc0:	e7e6      	b.n	810ab90 <_strtol_l.constprop.0+0x94>
 810abc2:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 810abc6:	d105      	bne.n	810abd4 <_strtol_l.constprop.0+0xd8>
 810abc8:	2322      	movs	r3, #34	; 0x22
 810abca:	6003      	str	r3, [r0, #0]
 810abcc:	4646      	mov	r6, r8
 810abce:	b942      	cbnz	r2, 810abe2 <_strtol_l.constprop.0+0xe6>
 810abd0:	4630      	mov	r0, r6
 810abd2:	e79e      	b.n	810ab12 <_strtol_l.constprop.0+0x16>
 810abd4:	b107      	cbz	r7, 810abd8 <_strtol_l.constprop.0+0xdc>
 810abd6:	4276      	negs	r6, r6
 810abd8:	2a00      	cmp	r2, #0
 810abda:	d0f9      	beq.n	810abd0 <_strtol_l.constprop.0+0xd4>
 810abdc:	f1be 0f00 	cmp.w	lr, #0
 810abe0:	d000      	beq.n	810abe4 <_strtol_l.constprop.0+0xe8>
 810abe2:	1e69      	subs	r1, r5, #1
 810abe4:	6011      	str	r1, [r2, #0]
 810abe6:	e7f3      	b.n	810abd0 <_strtol_l.constprop.0+0xd4>
 810abe8:	2430      	movs	r4, #48	; 0x30
 810abea:	2b00      	cmp	r3, #0
 810abec:	d1b1      	bne.n	810ab52 <_strtol_l.constprop.0+0x56>
 810abee:	2308      	movs	r3, #8
 810abf0:	e7af      	b.n	810ab52 <_strtol_l.constprop.0+0x56>
 810abf2:	2c30      	cmp	r4, #48	; 0x30
 810abf4:	d0a5      	beq.n	810ab42 <_strtol_l.constprop.0+0x46>
 810abf6:	230a      	movs	r3, #10
 810abf8:	e7ab      	b.n	810ab52 <_strtol_l.constprop.0+0x56>
 810abfa:	bf00      	nop
 810abfc:	0810e891 	.word	0x0810e891

0810ac00 <_strtol_r>:
 810ac00:	f7ff bf7c 	b.w	810aafc <_strtol_l.constprop.0>

0810ac04 <_fwalk_sglue>:
 810ac04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810ac08:	4607      	mov	r7, r0
 810ac0a:	4688      	mov	r8, r1
 810ac0c:	4614      	mov	r4, r2
 810ac0e:	2600      	movs	r6, #0
 810ac10:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 810ac14:	f1b9 0901 	subs.w	r9, r9, #1
 810ac18:	d505      	bpl.n	810ac26 <_fwalk_sglue+0x22>
 810ac1a:	6824      	ldr	r4, [r4, #0]
 810ac1c:	2c00      	cmp	r4, #0
 810ac1e:	d1f7      	bne.n	810ac10 <_fwalk_sglue+0xc>
 810ac20:	4630      	mov	r0, r6
 810ac22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810ac26:	89ab      	ldrh	r3, [r5, #12]
 810ac28:	2b01      	cmp	r3, #1
 810ac2a:	d907      	bls.n	810ac3c <_fwalk_sglue+0x38>
 810ac2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 810ac30:	3301      	adds	r3, #1
 810ac32:	d003      	beq.n	810ac3c <_fwalk_sglue+0x38>
 810ac34:	4629      	mov	r1, r5
 810ac36:	4638      	mov	r0, r7
 810ac38:	47c0      	blx	r8
 810ac3a:	4306      	orrs	r6, r0
 810ac3c:	3568      	adds	r5, #104	; 0x68
 810ac3e:	e7e9      	b.n	810ac14 <_fwalk_sglue+0x10>

0810ac40 <strncmp>:
 810ac40:	b510      	push	{r4, lr}
 810ac42:	b16a      	cbz	r2, 810ac60 <strncmp+0x20>
 810ac44:	3901      	subs	r1, #1
 810ac46:	1884      	adds	r4, r0, r2
 810ac48:	f810 2b01 	ldrb.w	r2, [r0], #1
 810ac4c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 810ac50:	429a      	cmp	r2, r3
 810ac52:	d103      	bne.n	810ac5c <strncmp+0x1c>
 810ac54:	42a0      	cmp	r0, r4
 810ac56:	d001      	beq.n	810ac5c <strncmp+0x1c>
 810ac58:	2a00      	cmp	r2, #0
 810ac5a:	d1f5      	bne.n	810ac48 <strncmp+0x8>
 810ac5c:	1ad0      	subs	r0, r2, r3
 810ac5e:	bd10      	pop	{r4, pc}
 810ac60:	4610      	mov	r0, r2
 810ac62:	e7fc      	b.n	810ac5e <strncmp+0x1e>

0810ac64 <memset>:
 810ac64:	4402      	add	r2, r0
 810ac66:	4603      	mov	r3, r0
 810ac68:	4293      	cmp	r3, r2
 810ac6a:	d100      	bne.n	810ac6e <memset+0xa>
 810ac6c:	4770      	bx	lr
 810ac6e:	f803 1b01 	strb.w	r1, [r3], #1
 810ac72:	e7f9      	b.n	810ac68 <memset+0x4>

0810ac74 <time>:
 810ac74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 810ac76:	4b0b      	ldr	r3, [pc, #44]	; (810aca4 <time+0x30>)
 810ac78:	2200      	movs	r2, #0
 810ac7a:	4669      	mov	r1, sp
 810ac7c:	4604      	mov	r4, r0
 810ac7e:	6818      	ldr	r0, [r3, #0]
 810ac80:	f000 f816 	bl	810acb0 <_gettimeofday_r>
 810ac84:	2800      	cmp	r0, #0
 810ac86:	bfbe      	ittt	lt
 810ac88:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 810ac8c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 810ac90:	e9cd 2300 	strdlt	r2, r3, [sp]
 810ac94:	e9dd 0100 	ldrd	r0, r1, [sp]
 810ac98:	b10c      	cbz	r4, 810ac9e <time+0x2a>
 810ac9a:	e9c4 0100 	strd	r0, r1, [r4]
 810ac9e:	b004      	add	sp, #16
 810aca0:	bd10      	pop	{r4, pc}
 810aca2:	bf00      	nop
 810aca4:	100001d4 	.word	0x100001d4

0810aca8 <_localeconv_r>:
 810aca8:	4800      	ldr	r0, [pc, #0]	; (810acac <_localeconv_r+0x4>)
 810acaa:	4770      	bx	lr
 810acac:	1000010c 	.word	0x1000010c

0810acb0 <_gettimeofday_r>:
 810acb0:	b538      	push	{r3, r4, r5, lr}
 810acb2:	4d07      	ldr	r5, [pc, #28]	; (810acd0 <_gettimeofday_r+0x20>)
 810acb4:	2300      	movs	r3, #0
 810acb6:	4604      	mov	r4, r0
 810acb8:	4608      	mov	r0, r1
 810acba:	4611      	mov	r1, r2
 810acbc:	602b      	str	r3, [r5, #0]
 810acbe:	f003 fd07 	bl	810e6d0 <_gettimeofday>
 810acc2:	1c43      	adds	r3, r0, #1
 810acc4:	d102      	bne.n	810accc <_gettimeofday_r+0x1c>
 810acc6:	682b      	ldr	r3, [r5, #0]
 810acc8:	b103      	cbz	r3, 810accc <_gettimeofday_r+0x1c>
 810acca:	6023      	str	r3, [r4, #0]
 810accc:	bd38      	pop	{r3, r4, r5, pc}
 810acce:	bf00      	nop
 810acd0:	100004c0 	.word	0x100004c0

0810acd4 <__errno>:
 810acd4:	4b01      	ldr	r3, [pc, #4]	; (810acdc <__errno+0x8>)
 810acd6:	6818      	ldr	r0, [r3, #0]
 810acd8:	4770      	bx	lr
 810acda:	bf00      	nop
 810acdc:	100001d4 	.word	0x100001d4

0810ace0 <__libc_init_array>:
 810ace0:	b570      	push	{r4, r5, r6, lr}
 810ace2:	4d0d      	ldr	r5, [pc, #52]	; (810ad18 <__libc_init_array+0x38>)
 810ace4:	4c0d      	ldr	r4, [pc, #52]	; (810ad1c <__libc_init_array+0x3c>)
 810ace6:	1b64      	subs	r4, r4, r5
 810ace8:	10a4      	asrs	r4, r4, #2
 810acea:	2600      	movs	r6, #0
 810acec:	42a6      	cmp	r6, r4
 810acee:	d109      	bne.n	810ad04 <__libc_init_array+0x24>
 810acf0:	4d0b      	ldr	r5, [pc, #44]	; (810ad20 <__libc_init_array+0x40>)
 810acf2:	4c0c      	ldr	r4, [pc, #48]	; (810ad24 <__libc_init_array+0x44>)
 810acf4:	f003 fcf4 	bl	810e6e0 <_init>
 810acf8:	1b64      	subs	r4, r4, r5
 810acfa:	10a4      	asrs	r4, r4, #2
 810acfc:	2600      	movs	r6, #0
 810acfe:	42a6      	cmp	r6, r4
 810ad00:	d105      	bne.n	810ad0e <__libc_init_array+0x2e>
 810ad02:	bd70      	pop	{r4, r5, r6, pc}
 810ad04:	f855 3b04 	ldr.w	r3, [r5], #4
 810ad08:	4798      	blx	r3
 810ad0a:	3601      	adds	r6, #1
 810ad0c:	e7ee      	b.n	810acec <__libc_init_array+0xc>
 810ad0e:	f855 3b04 	ldr.w	r3, [r5], #4
 810ad12:	4798      	blx	r3
 810ad14:	3601      	adds	r6, #1
 810ad16:	e7f2      	b.n	810acfe <__libc_init_array+0x1e>
 810ad18:	0810ec48 	.word	0x0810ec48
 810ad1c:	0810ec48 	.word	0x0810ec48
 810ad20:	0810ec48 	.word	0x0810ec48
 810ad24:	0810ec4c 	.word	0x0810ec4c

0810ad28 <__retarget_lock_acquire_recursive>:
 810ad28:	4770      	bx	lr

0810ad2a <__retarget_lock_release_recursive>:
 810ad2a:	4770      	bx	lr

0810ad2c <memcpy>:
 810ad2c:	440a      	add	r2, r1
 810ad2e:	4291      	cmp	r1, r2
 810ad30:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 810ad34:	d100      	bne.n	810ad38 <memcpy+0xc>
 810ad36:	4770      	bx	lr
 810ad38:	b510      	push	{r4, lr}
 810ad3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 810ad3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 810ad42:	4291      	cmp	r1, r2
 810ad44:	d1f9      	bne.n	810ad3a <memcpy+0xe>
 810ad46:	bd10      	pop	{r4, pc}

0810ad48 <nan>:
 810ad48:	ed9f 0b01 	vldr	d0, [pc, #4]	; 810ad50 <nan+0x8>
 810ad4c:	4770      	bx	lr
 810ad4e:	bf00      	nop
 810ad50:	00000000 	.word	0x00000000
 810ad54:	7ff80000 	.word	0x7ff80000

0810ad58 <nanf>:
 810ad58:	ed9f 0a01 	vldr	s0, [pc, #4]	; 810ad60 <nanf+0x8>
 810ad5c:	4770      	bx	lr
 810ad5e:	bf00      	nop
 810ad60:	7fc00000 	.word	0x7fc00000

0810ad64 <__assert_func>:
 810ad64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 810ad66:	4614      	mov	r4, r2
 810ad68:	461a      	mov	r2, r3
 810ad6a:	4b09      	ldr	r3, [pc, #36]	; (810ad90 <__assert_func+0x2c>)
 810ad6c:	681b      	ldr	r3, [r3, #0]
 810ad6e:	4605      	mov	r5, r0
 810ad70:	68d8      	ldr	r0, [r3, #12]
 810ad72:	b14c      	cbz	r4, 810ad88 <__assert_func+0x24>
 810ad74:	4b07      	ldr	r3, [pc, #28]	; (810ad94 <__assert_func+0x30>)
 810ad76:	9100      	str	r1, [sp, #0]
 810ad78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 810ad7c:	4906      	ldr	r1, [pc, #24]	; (810ad98 <__assert_func+0x34>)
 810ad7e:	462b      	mov	r3, r5
 810ad80:	f002 f99c 	bl	810d0bc <fiprintf>
 810ad84:	f002 fa58 	bl	810d238 <abort>
 810ad88:	4b04      	ldr	r3, [pc, #16]	; (810ad9c <__assert_func+0x38>)
 810ad8a:	461c      	mov	r4, r3
 810ad8c:	e7f3      	b.n	810ad76 <__assert_func+0x12>
 810ad8e:	bf00      	nop
 810ad90:	100001d4 	.word	0x100001d4
 810ad94:	0810e991 	.word	0x0810e991
 810ad98:	0810e99e 	.word	0x0810e99e
 810ad9c:	0810e9cc 	.word	0x0810e9cc

0810ada0 <quorem>:
 810ada0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ada4:	6903      	ldr	r3, [r0, #16]
 810ada6:	690c      	ldr	r4, [r1, #16]
 810ada8:	42a3      	cmp	r3, r4
 810adaa:	4607      	mov	r7, r0
 810adac:	db7e      	blt.n	810aeac <quorem+0x10c>
 810adae:	3c01      	subs	r4, #1
 810adb0:	f101 0814 	add.w	r8, r1, #20
 810adb4:	f100 0514 	add.w	r5, r0, #20
 810adb8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810adbc:	9301      	str	r3, [sp, #4]
 810adbe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 810adc2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810adc6:	3301      	adds	r3, #1
 810adc8:	429a      	cmp	r2, r3
 810adca:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 810adce:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 810add2:	fbb2 f6f3 	udiv	r6, r2, r3
 810add6:	d331      	bcc.n	810ae3c <quorem+0x9c>
 810add8:	f04f 0e00 	mov.w	lr, #0
 810addc:	4640      	mov	r0, r8
 810adde:	46ac      	mov	ip, r5
 810ade0:	46f2      	mov	sl, lr
 810ade2:	f850 2b04 	ldr.w	r2, [r0], #4
 810ade6:	b293      	uxth	r3, r2
 810ade8:	fb06 e303 	mla	r3, r6, r3, lr
 810adec:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 810adf0:	0c1a      	lsrs	r2, r3, #16
 810adf2:	b29b      	uxth	r3, r3
 810adf4:	ebaa 0303 	sub.w	r3, sl, r3
 810adf8:	f8dc a000 	ldr.w	sl, [ip]
 810adfc:	fa13 f38a 	uxtah	r3, r3, sl
 810ae00:	fb06 220e 	mla	r2, r6, lr, r2
 810ae04:	9300      	str	r3, [sp, #0]
 810ae06:	9b00      	ldr	r3, [sp, #0]
 810ae08:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 810ae0c:	b292      	uxth	r2, r2
 810ae0e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 810ae12:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810ae16:	f8bd 3000 	ldrh.w	r3, [sp]
 810ae1a:	4581      	cmp	r9, r0
 810ae1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810ae20:	f84c 3b04 	str.w	r3, [ip], #4
 810ae24:	ea4f 4a22 	mov.w	sl, r2, asr #16
 810ae28:	d2db      	bcs.n	810ade2 <quorem+0x42>
 810ae2a:	f855 300b 	ldr.w	r3, [r5, fp]
 810ae2e:	b92b      	cbnz	r3, 810ae3c <quorem+0x9c>
 810ae30:	9b01      	ldr	r3, [sp, #4]
 810ae32:	3b04      	subs	r3, #4
 810ae34:	429d      	cmp	r5, r3
 810ae36:	461a      	mov	r2, r3
 810ae38:	d32c      	bcc.n	810ae94 <quorem+0xf4>
 810ae3a:	613c      	str	r4, [r7, #16]
 810ae3c:	4638      	mov	r0, r7
 810ae3e:	f001 ff13 	bl	810cc68 <__mcmp>
 810ae42:	2800      	cmp	r0, #0
 810ae44:	db22      	blt.n	810ae8c <quorem+0xec>
 810ae46:	3601      	adds	r6, #1
 810ae48:	4629      	mov	r1, r5
 810ae4a:	2000      	movs	r0, #0
 810ae4c:	f858 2b04 	ldr.w	r2, [r8], #4
 810ae50:	f8d1 c000 	ldr.w	ip, [r1]
 810ae54:	b293      	uxth	r3, r2
 810ae56:	1ac3      	subs	r3, r0, r3
 810ae58:	0c12      	lsrs	r2, r2, #16
 810ae5a:	fa13 f38c 	uxtah	r3, r3, ip
 810ae5e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 810ae62:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810ae66:	b29b      	uxth	r3, r3
 810ae68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810ae6c:	45c1      	cmp	r9, r8
 810ae6e:	f841 3b04 	str.w	r3, [r1], #4
 810ae72:	ea4f 4022 	mov.w	r0, r2, asr #16
 810ae76:	d2e9      	bcs.n	810ae4c <quorem+0xac>
 810ae78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810ae7c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810ae80:	b922      	cbnz	r2, 810ae8c <quorem+0xec>
 810ae82:	3b04      	subs	r3, #4
 810ae84:	429d      	cmp	r5, r3
 810ae86:	461a      	mov	r2, r3
 810ae88:	d30a      	bcc.n	810aea0 <quorem+0x100>
 810ae8a:	613c      	str	r4, [r7, #16]
 810ae8c:	4630      	mov	r0, r6
 810ae8e:	b003      	add	sp, #12
 810ae90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810ae94:	6812      	ldr	r2, [r2, #0]
 810ae96:	3b04      	subs	r3, #4
 810ae98:	2a00      	cmp	r2, #0
 810ae9a:	d1ce      	bne.n	810ae3a <quorem+0x9a>
 810ae9c:	3c01      	subs	r4, #1
 810ae9e:	e7c9      	b.n	810ae34 <quorem+0x94>
 810aea0:	6812      	ldr	r2, [r2, #0]
 810aea2:	3b04      	subs	r3, #4
 810aea4:	2a00      	cmp	r2, #0
 810aea6:	d1f0      	bne.n	810ae8a <quorem+0xea>
 810aea8:	3c01      	subs	r4, #1
 810aeaa:	e7eb      	b.n	810ae84 <quorem+0xe4>
 810aeac:	2000      	movs	r0, #0
 810aeae:	e7ee      	b.n	810ae8e <quorem+0xee>

0810aeb0 <_dtoa_r>:
 810aeb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810aeb4:	ed2d 8b04 	vpush	{d8-d9}
 810aeb8:	69c5      	ldr	r5, [r0, #28]
 810aeba:	b093      	sub	sp, #76	; 0x4c
 810aebc:	ed8d 0b02 	vstr	d0, [sp, #8]
 810aec0:	ec57 6b10 	vmov	r6, r7, d0
 810aec4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 810aec8:	9107      	str	r1, [sp, #28]
 810aeca:	4604      	mov	r4, r0
 810aecc:	920a      	str	r2, [sp, #40]	; 0x28
 810aece:	930d      	str	r3, [sp, #52]	; 0x34
 810aed0:	b975      	cbnz	r5, 810aef0 <_dtoa_r+0x40>
 810aed2:	2010      	movs	r0, #16
 810aed4:	f001 fa8e 	bl	810c3f4 <malloc>
 810aed8:	4602      	mov	r2, r0
 810aeda:	61e0      	str	r0, [r4, #28]
 810aedc:	b920      	cbnz	r0, 810aee8 <_dtoa_r+0x38>
 810aede:	4bae      	ldr	r3, [pc, #696]	; (810b198 <_dtoa_r+0x2e8>)
 810aee0:	21ef      	movs	r1, #239	; 0xef
 810aee2:	48ae      	ldr	r0, [pc, #696]	; (810b19c <_dtoa_r+0x2ec>)
 810aee4:	f7ff ff3e 	bl	810ad64 <__assert_func>
 810aee8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 810aeec:	6005      	str	r5, [r0, #0]
 810aeee:	60c5      	str	r5, [r0, #12]
 810aef0:	69e3      	ldr	r3, [r4, #28]
 810aef2:	6819      	ldr	r1, [r3, #0]
 810aef4:	b151      	cbz	r1, 810af0c <_dtoa_r+0x5c>
 810aef6:	685a      	ldr	r2, [r3, #4]
 810aef8:	604a      	str	r2, [r1, #4]
 810aefa:	2301      	movs	r3, #1
 810aefc:	4093      	lsls	r3, r2
 810aefe:	608b      	str	r3, [r1, #8]
 810af00:	4620      	mov	r0, r4
 810af02:	f001 fc2b 	bl	810c75c <_Bfree>
 810af06:	69e3      	ldr	r3, [r4, #28]
 810af08:	2200      	movs	r2, #0
 810af0a:	601a      	str	r2, [r3, #0]
 810af0c:	1e3b      	subs	r3, r7, #0
 810af0e:	bfbb      	ittet	lt
 810af10:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 810af14:	9303      	strlt	r3, [sp, #12]
 810af16:	2300      	movge	r3, #0
 810af18:	2201      	movlt	r2, #1
 810af1a:	bfac      	ite	ge
 810af1c:	f8c8 3000 	strge.w	r3, [r8]
 810af20:	f8c8 2000 	strlt.w	r2, [r8]
 810af24:	4b9e      	ldr	r3, [pc, #632]	; (810b1a0 <_dtoa_r+0x2f0>)
 810af26:	f8dd 800c 	ldr.w	r8, [sp, #12]
 810af2a:	ea33 0308 	bics.w	r3, r3, r8
 810af2e:	d11b      	bne.n	810af68 <_dtoa_r+0xb8>
 810af30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810af32:	f242 730f 	movw	r3, #9999	; 0x270f
 810af36:	6013      	str	r3, [r2, #0]
 810af38:	f3c8 0313 	ubfx	r3, r8, #0, #20
 810af3c:	4333      	orrs	r3, r6
 810af3e:	f000 8593 	beq.w	810ba68 <_dtoa_r+0xbb8>
 810af42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810af44:	b963      	cbnz	r3, 810af60 <_dtoa_r+0xb0>
 810af46:	4b97      	ldr	r3, [pc, #604]	; (810b1a4 <_dtoa_r+0x2f4>)
 810af48:	e027      	b.n	810af9a <_dtoa_r+0xea>
 810af4a:	4b97      	ldr	r3, [pc, #604]	; (810b1a8 <_dtoa_r+0x2f8>)
 810af4c:	9300      	str	r3, [sp, #0]
 810af4e:	3308      	adds	r3, #8
 810af50:	9a21      	ldr	r2, [sp, #132]	; 0x84
 810af52:	6013      	str	r3, [r2, #0]
 810af54:	9800      	ldr	r0, [sp, #0]
 810af56:	b013      	add	sp, #76	; 0x4c
 810af58:	ecbd 8b04 	vpop	{d8-d9}
 810af5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810af60:	4b90      	ldr	r3, [pc, #576]	; (810b1a4 <_dtoa_r+0x2f4>)
 810af62:	9300      	str	r3, [sp, #0]
 810af64:	3303      	adds	r3, #3
 810af66:	e7f3      	b.n	810af50 <_dtoa_r+0xa0>
 810af68:	ed9d 7b02 	vldr	d7, [sp, #8]
 810af6c:	2200      	movs	r2, #0
 810af6e:	ec51 0b17 	vmov	r0, r1, d7
 810af72:	eeb0 8a47 	vmov.f32	s16, s14
 810af76:	eef0 8a67 	vmov.f32	s17, s15
 810af7a:	2300      	movs	r3, #0
 810af7c:	f7f5 fe2c 	bl	8100bd8 <__aeabi_dcmpeq>
 810af80:	4681      	mov	r9, r0
 810af82:	b160      	cbz	r0, 810af9e <_dtoa_r+0xee>
 810af84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810af86:	2301      	movs	r3, #1
 810af88:	6013      	str	r3, [r2, #0]
 810af8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810af8c:	2b00      	cmp	r3, #0
 810af8e:	f000 8568 	beq.w	810ba62 <_dtoa_r+0xbb2>
 810af92:	4b86      	ldr	r3, [pc, #536]	; (810b1ac <_dtoa_r+0x2fc>)
 810af94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 810af96:	6013      	str	r3, [r2, #0]
 810af98:	3b01      	subs	r3, #1
 810af9a:	9300      	str	r3, [sp, #0]
 810af9c:	e7da      	b.n	810af54 <_dtoa_r+0xa4>
 810af9e:	aa10      	add	r2, sp, #64	; 0x40
 810afa0:	a911      	add	r1, sp, #68	; 0x44
 810afa2:	4620      	mov	r0, r4
 810afa4:	eeb0 0a48 	vmov.f32	s0, s16
 810afa8:	eef0 0a68 	vmov.f32	s1, s17
 810afac:	f001 ff72 	bl	810ce94 <__d2b>
 810afb0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 810afb4:	4682      	mov	sl, r0
 810afb6:	2d00      	cmp	r5, #0
 810afb8:	d07f      	beq.n	810b0ba <_dtoa_r+0x20a>
 810afba:	ee18 3a90 	vmov	r3, s17
 810afbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810afc2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 810afc6:	ec51 0b18 	vmov	r0, r1, d8
 810afca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 810afce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 810afd2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 810afd6:	4619      	mov	r1, r3
 810afd8:	2200      	movs	r2, #0
 810afda:	4b75      	ldr	r3, [pc, #468]	; (810b1b0 <_dtoa_r+0x300>)
 810afdc:	f7f5 f9dc 	bl	8100398 <__aeabi_dsub>
 810afe0:	a367      	add	r3, pc, #412	; (adr r3, 810b180 <_dtoa_r+0x2d0>)
 810afe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 810afe6:	f7f5 fb8f 	bl	8100708 <__aeabi_dmul>
 810afea:	a367      	add	r3, pc, #412	; (adr r3, 810b188 <_dtoa_r+0x2d8>)
 810afec:	e9d3 2300 	ldrd	r2, r3, [r3]
 810aff0:	f7f5 f9d4 	bl	810039c <__adddf3>
 810aff4:	4606      	mov	r6, r0
 810aff6:	4628      	mov	r0, r5
 810aff8:	460f      	mov	r7, r1
 810affa:	f7f5 fb1b 	bl	8100634 <__aeabi_i2d>
 810affe:	a364      	add	r3, pc, #400	; (adr r3, 810b190 <_dtoa_r+0x2e0>)
 810b000:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b004:	f7f5 fb80 	bl	8100708 <__aeabi_dmul>
 810b008:	4602      	mov	r2, r0
 810b00a:	460b      	mov	r3, r1
 810b00c:	4630      	mov	r0, r6
 810b00e:	4639      	mov	r1, r7
 810b010:	f7f5 f9c4 	bl	810039c <__adddf3>
 810b014:	4606      	mov	r6, r0
 810b016:	460f      	mov	r7, r1
 810b018:	f7f5 fe26 	bl	8100c68 <__aeabi_d2iz>
 810b01c:	2200      	movs	r2, #0
 810b01e:	4683      	mov	fp, r0
 810b020:	2300      	movs	r3, #0
 810b022:	4630      	mov	r0, r6
 810b024:	4639      	mov	r1, r7
 810b026:	f7f5 fde1 	bl	8100bec <__aeabi_dcmplt>
 810b02a:	b148      	cbz	r0, 810b040 <_dtoa_r+0x190>
 810b02c:	4658      	mov	r0, fp
 810b02e:	f7f5 fb01 	bl	8100634 <__aeabi_i2d>
 810b032:	4632      	mov	r2, r6
 810b034:	463b      	mov	r3, r7
 810b036:	f7f5 fdcf 	bl	8100bd8 <__aeabi_dcmpeq>
 810b03a:	b908      	cbnz	r0, 810b040 <_dtoa_r+0x190>
 810b03c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 810b040:	f1bb 0f16 	cmp.w	fp, #22
 810b044:	d857      	bhi.n	810b0f6 <_dtoa_r+0x246>
 810b046:	4b5b      	ldr	r3, [pc, #364]	; (810b1b4 <_dtoa_r+0x304>)
 810b048:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 810b04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b050:	ec51 0b18 	vmov	r0, r1, d8
 810b054:	f7f5 fdca 	bl	8100bec <__aeabi_dcmplt>
 810b058:	2800      	cmp	r0, #0
 810b05a:	d04e      	beq.n	810b0fa <_dtoa_r+0x24a>
 810b05c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 810b060:	2300      	movs	r3, #0
 810b062:	930c      	str	r3, [sp, #48]	; 0x30
 810b064:	9b10      	ldr	r3, [sp, #64]	; 0x40
 810b066:	1b5b      	subs	r3, r3, r5
 810b068:	1e5a      	subs	r2, r3, #1
 810b06a:	bf45      	ittet	mi
 810b06c:	f1c3 0301 	rsbmi	r3, r3, #1
 810b070:	9305      	strmi	r3, [sp, #20]
 810b072:	2300      	movpl	r3, #0
 810b074:	2300      	movmi	r3, #0
 810b076:	9206      	str	r2, [sp, #24]
 810b078:	bf54      	ite	pl
 810b07a:	9305      	strpl	r3, [sp, #20]
 810b07c:	9306      	strmi	r3, [sp, #24]
 810b07e:	f1bb 0f00 	cmp.w	fp, #0
 810b082:	db3c      	blt.n	810b0fe <_dtoa_r+0x24e>
 810b084:	9b06      	ldr	r3, [sp, #24]
 810b086:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 810b08a:	445b      	add	r3, fp
 810b08c:	9306      	str	r3, [sp, #24]
 810b08e:	2300      	movs	r3, #0
 810b090:	9308      	str	r3, [sp, #32]
 810b092:	9b07      	ldr	r3, [sp, #28]
 810b094:	2b09      	cmp	r3, #9
 810b096:	d868      	bhi.n	810b16a <_dtoa_r+0x2ba>
 810b098:	2b05      	cmp	r3, #5
 810b09a:	bfc4      	itt	gt
 810b09c:	3b04      	subgt	r3, #4
 810b09e:	9307      	strgt	r3, [sp, #28]
 810b0a0:	9b07      	ldr	r3, [sp, #28]
 810b0a2:	f1a3 0302 	sub.w	r3, r3, #2
 810b0a6:	bfcc      	ite	gt
 810b0a8:	2500      	movgt	r5, #0
 810b0aa:	2501      	movle	r5, #1
 810b0ac:	2b03      	cmp	r3, #3
 810b0ae:	f200 8085 	bhi.w	810b1bc <_dtoa_r+0x30c>
 810b0b2:	e8df f003 	tbb	[pc, r3]
 810b0b6:	3b2e      	.short	0x3b2e
 810b0b8:	5839      	.short	0x5839
 810b0ba:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 810b0be:	441d      	add	r5, r3
 810b0c0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 810b0c4:	2b20      	cmp	r3, #32
 810b0c6:	bfc1      	itttt	gt
 810b0c8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 810b0cc:	fa08 f803 	lslgt.w	r8, r8, r3
 810b0d0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 810b0d4:	fa26 f303 	lsrgt.w	r3, r6, r3
 810b0d8:	bfd6      	itet	le
 810b0da:	f1c3 0320 	rsble	r3, r3, #32
 810b0de:	ea48 0003 	orrgt.w	r0, r8, r3
 810b0e2:	fa06 f003 	lslle.w	r0, r6, r3
 810b0e6:	f7f5 fa95 	bl	8100614 <__aeabi_ui2d>
 810b0ea:	2201      	movs	r2, #1
 810b0ec:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 810b0f0:	3d01      	subs	r5, #1
 810b0f2:	920e      	str	r2, [sp, #56]	; 0x38
 810b0f4:	e76f      	b.n	810afd6 <_dtoa_r+0x126>
 810b0f6:	2301      	movs	r3, #1
 810b0f8:	e7b3      	b.n	810b062 <_dtoa_r+0x1b2>
 810b0fa:	900c      	str	r0, [sp, #48]	; 0x30
 810b0fc:	e7b2      	b.n	810b064 <_dtoa_r+0x1b4>
 810b0fe:	9b05      	ldr	r3, [sp, #20]
 810b100:	eba3 030b 	sub.w	r3, r3, fp
 810b104:	9305      	str	r3, [sp, #20]
 810b106:	f1cb 0300 	rsb	r3, fp, #0
 810b10a:	9308      	str	r3, [sp, #32]
 810b10c:	2300      	movs	r3, #0
 810b10e:	930b      	str	r3, [sp, #44]	; 0x2c
 810b110:	e7bf      	b.n	810b092 <_dtoa_r+0x1e2>
 810b112:	2300      	movs	r3, #0
 810b114:	9309      	str	r3, [sp, #36]	; 0x24
 810b116:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b118:	2b00      	cmp	r3, #0
 810b11a:	dc52      	bgt.n	810b1c2 <_dtoa_r+0x312>
 810b11c:	2301      	movs	r3, #1
 810b11e:	9301      	str	r3, [sp, #4]
 810b120:	9304      	str	r3, [sp, #16]
 810b122:	461a      	mov	r2, r3
 810b124:	920a      	str	r2, [sp, #40]	; 0x28
 810b126:	e00b      	b.n	810b140 <_dtoa_r+0x290>
 810b128:	2301      	movs	r3, #1
 810b12a:	e7f3      	b.n	810b114 <_dtoa_r+0x264>
 810b12c:	2300      	movs	r3, #0
 810b12e:	9309      	str	r3, [sp, #36]	; 0x24
 810b130:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b132:	445b      	add	r3, fp
 810b134:	9301      	str	r3, [sp, #4]
 810b136:	3301      	adds	r3, #1
 810b138:	2b01      	cmp	r3, #1
 810b13a:	9304      	str	r3, [sp, #16]
 810b13c:	bfb8      	it	lt
 810b13e:	2301      	movlt	r3, #1
 810b140:	69e0      	ldr	r0, [r4, #28]
 810b142:	2100      	movs	r1, #0
 810b144:	2204      	movs	r2, #4
 810b146:	f102 0614 	add.w	r6, r2, #20
 810b14a:	429e      	cmp	r6, r3
 810b14c:	d93d      	bls.n	810b1ca <_dtoa_r+0x31a>
 810b14e:	6041      	str	r1, [r0, #4]
 810b150:	4620      	mov	r0, r4
 810b152:	f001 fac3 	bl	810c6dc <_Balloc>
 810b156:	9000      	str	r0, [sp, #0]
 810b158:	2800      	cmp	r0, #0
 810b15a:	d139      	bne.n	810b1d0 <_dtoa_r+0x320>
 810b15c:	4b16      	ldr	r3, [pc, #88]	; (810b1b8 <_dtoa_r+0x308>)
 810b15e:	4602      	mov	r2, r0
 810b160:	f240 11af 	movw	r1, #431	; 0x1af
 810b164:	e6bd      	b.n	810aee2 <_dtoa_r+0x32>
 810b166:	2301      	movs	r3, #1
 810b168:	e7e1      	b.n	810b12e <_dtoa_r+0x27e>
 810b16a:	2501      	movs	r5, #1
 810b16c:	2300      	movs	r3, #0
 810b16e:	9307      	str	r3, [sp, #28]
 810b170:	9509      	str	r5, [sp, #36]	; 0x24
 810b172:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 810b176:	9301      	str	r3, [sp, #4]
 810b178:	9304      	str	r3, [sp, #16]
 810b17a:	2200      	movs	r2, #0
 810b17c:	2312      	movs	r3, #18
 810b17e:	e7d1      	b.n	810b124 <_dtoa_r+0x274>
 810b180:	636f4361 	.word	0x636f4361
 810b184:	3fd287a7 	.word	0x3fd287a7
 810b188:	8b60c8b3 	.word	0x8b60c8b3
 810b18c:	3fc68a28 	.word	0x3fc68a28
 810b190:	509f79fb 	.word	0x509f79fb
 810b194:	3fd34413 	.word	0x3fd34413
 810b198:	0810e7c1 	.word	0x0810e7c1
 810b19c:	0810e9da 	.word	0x0810e9da
 810b1a0:	7ff00000 	.word	0x7ff00000
 810b1a4:	0810e9d6 	.word	0x0810e9d6
 810b1a8:	0810e9cd 	.word	0x0810e9cd
 810b1ac:	0810e799 	.word	0x0810e799
 810b1b0:	3ff80000 	.word	0x3ff80000
 810b1b4:	0810eb38 	.word	0x0810eb38
 810b1b8:	0810ea32 	.word	0x0810ea32
 810b1bc:	2301      	movs	r3, #1
 810b1be:	9309      	str	r3, [sp, #36]	; 0x24
 810b1c0:	e7d7      	b.n	810b172 <_dtoa_r+0x2c2>
 810b1c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b1c4:	9301      	str	r3, [sp, #4]
 810b1c6:	9304      	str	r3, [sp, #16]
 810b1c8:	e7ba      	b.n	810b140 <_dtoa_r+0x290>
 810b1ca:	3101      	adds	r1, #1
 810b1cc:	0052      	lsls	r2, r2, #1
 810b1ce:	e7ba      	b.n	810b146 <_dtoa_r+0x296>
 810b1d0:	69e3      	ldr	r3, [r4, #28]
 810b1d2:	9a00      	ldr	r2, [sp, #0]
 810b1d4:	601a      	str	r2, [r3, #0]
 810b1d6:	9b04      	ldr	r3, [sp, #16]
 810b1d8:	2b0e      	cmp	r3, #14
 810b1da:	f200 80a8 	bhi.w	810b32e <_dtoa_r+0x47e>
 810b1de:	2d00      	cmp	r5, #0
 810b1e0:	f000 80a5 	beq.w	810b32e <_dtoa_r+0x47e>
 810b1e4:	f1bb 0f00 	cmp.w	fp, #0
 810b1e8:	dd38      	ble.n	810b25c <_dtoa_r+0x3ac>
 810b1ea:	4bc0      	ldr	r3, [pc, #768]	; (810b4ec <_dtoa_r+0x63c>)
 810b1ec:	f00b 020f 	and.w	r2, fp, #15
 810b1f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810b1f4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 810b1f8:	e9d3 6700 	ldrd	r6, r7, [r3]
 810b1fc:	ea4f 182b 	mov.w	r8, fp, asr #4
 810b200:	d019      	beq.n	810b236 <_dtoa_r+0x386>
 810b202:	4bbb      	ldr	r3, [pc, #748]	; (810b4f0 <_dtoa_r+0x640>)
 810b204:	ec51 0b18 	vmov	r0, r1, d8
 810b208:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 810b20c:	f7f5 fba6 	bl	810095c <__aeabi_ddiv>
 810b210:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810b214:	f008 080f 	and.w	r8, r8, #15
 810b218:	2503      	movs	r5, #3
 810b21a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 810b4f0 <_dtoa_r+0x640>
 810b21e:	f1b8 0f00 	cmp.w	r8, #0
 810b222:	d10a      	bne.n	810b23a <_dtoa_r+0x38a>
 810b224:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810b228:	4632      	mov	r2, r6
 810b22a:	463b      	mov	r3, r7
 810b22c:	f7f5 fb96 	bl	810095c <__aeabi_ddiv>
 810b230:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810b234:	e02b      	b.n	810b28e <_dtoa_r+0x3de>
 810b236:	2502      	movs	r5, #2
 810b238:	e7ef      	b.n	810b21a <_dtoa_r+0x36a>
 810b23a:	f018 0f01 	tst.w	r8, #1
 810b23e:	d008      	beq.n	810b252 <_dtoa_r+0x3a2>
 810b240:	4630      	mov	r0, r6
 810b242:	4639      	mov	r1, r7
 810b244:	e9d9 2300 	ldrd	r2, r3, [r9]
 810b248:	f7f5 fa5e 	bl	8100708 <__aeabi_dmul>
 810b24c:	3501      	adds	r5, #1
 810b24e:	4606      	mov	r6, r0
 810b250:	460f      	mov	r7, r1
 810b252:	ea4f 0868 	mov.w	r8, r8, asr #1
 810b256:	f109 0908 	add.w	r9, r9, #8
 810b25a:	e7e0      	b.n	810b21e <_dtoa_r+0x36e>
 810b25c:	f000 809f 	beq.w	810b39e <_dtoa_r+0x4ee>
 810b260:	f1cb 0600 	rsb	r6, fp, #0
 810b264:	4ba1      	ldr	r3, [pc, #644]	; (810b4ec <_dtoa_r+0x63c>)
 810b266:	4fa2      	ldr	r7, [pc, #648]	; (810b4f0 <_dtoa_r+0x640>)
 810b268:	f006 020f 	and.w	r2, r6, #15
 810b26c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810b270:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b274:	ec51 0b18 	vmov	r0, r1, d8
 810b278:	f7f5 fa46 	bl	8100708 <__aeabi_dmul>
 810b27c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810b280:	1136      	asrs	r6, r6, #4
 810b282:	2300      	movs	r3, #0
 810b284:	2502      	movs	r5, #2
 810b286:	2e00      	cmp	r6, #0
 810b288:	d17e      	bne.n	810b388 <_dtoa_r+0x4d8>
 810b28a:	2b00      	cmp	r3, #0
 810b28c:	d1d0      	bne.n	810b230 <_dtoa_r+0x380>
 810b28e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810b290:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 810b294:	2b00      	cmp	r3, #0
 810b296:	f000 8084 	beq.w	810b3a2 <_dtoa_r+0x4f2>
 810b29a:	4b96      	ldr	r3, [pc, #600]	; (810b4f4 <_dtoa_r+0x644>)
 810b29c:	2200      	movs	r2, #0
 810b29e:	4640      	mov	r0, r8
 810b2a0:	4649      	mov	r1, r9
 810b2a2:	f7f5 fca3 	bl	8100bec <__aeabi_dcmplt>
 810b2a6:	2800      	cmp	r0, #0
 810b2a8:	d07b      	beq.n	810b3a2 <_dtoa_r+0x4f2>
 810b2aa:	9b04      	ldr	r3, [sp, #16]
 810b2ac:	2b00      	cmp	r3, #0
 810b2ae:	d078      	beq.n	810b3a2 <_dtoa_r+0x4f2>
 810b2b0:	9b01      	ldr	r3, [sp, #4]
 810b2b2:	2b00      	cmp	r3, #0
 810b2b4:	dd39      	ble.n	810b32a <_dtoa_r+0x47a>
 810b2b6:	4b90      	ldr	r3, [pc, #576]	; (810b4f8 <_dtoa_r+0x648>)
 810b2b8:	2200      	movs	r2, #0
 810b2ba:	4640      	mov	r0, r8
 810b2bc:	4649      	mov	r1, r9
 810b2be:	f7f5 fa23 	bl	8100708 <__aeabi_dmul>
 810b2c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810b2c6:	9e01      	ldr	r6, [sp, #4]
 810b2c8:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 810b2cc:	3501      	adds	r5, #1
 810b2ce:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 810b2d2:	4628      	mov	r0, r5
 810b2d4:	f7f5 f9ae 	bl	8100634 <__aeabi_i2d>
 810b2d8:	4642      	mov	r2, r8
 810b2da:	464b      	mov	r3, r9
 810b2dc:	f7f5 fa14 	bl	8100708 <__aeabi_dmul>
 810b2e0:	4b86      	ldr	r3, [pc, #536]	; (810b4fc <_dtoa_r+0x64c>)
 810b2e2:	2200      	movs	r2, #0
 810b2e4:	f7f5 f85a 	bl	810039c <__adddf3>
 810b2e8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 810b2ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810b2f0:	9303      	str	r3, [sp, #12]
 810b2f2:	2e00      	cmp	r6, #0
 810b2f4:	d158      	bne.n	810b3a8 <_dtoa_r+0x4f8>
 810b2f6:	4b82      	ldr	r3, [pc, #520]	; (810b500 <_dtoa_r+0x650>)
 810b2f8:	2200      	movs	r2, #0
 810b2fa:	4640      	mov	r0, r8
 810b2fc:	4649      	mov	r1, r9
 810b2fe:	f7f5 f84b 	bl	8100398 <__aeabi_dsub>
 810b302:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810b306:	4680      	mov	r8, r0
 810b308:	4689      	mov	r9, r1
 810b30a:	f7f5 fc8d 	bl	8100c28 <__aeabi_dcmpgt>
 810b30e:	2800      	cmp	r0, #0
 810b310:	f040 8296 	bne.w	810b840 <_dtoa_r+0x990>
 810b314:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 810b318:	4640      	mov	r0, r8
 810b31a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810b31e:	4649      	mov	r1, r9
 810b320:	f7f5 fc64 	bl	8100bec <__aeabi_dcmplt>
 810b324:	2800      	cmp	r0, #0
 810b326:	f040 8289 	bne.w	810b83c <_dtoa_r+0x98c>
 810b32a:	ed8d 8b02 	vstr	d8, [sp, #8]
 810b32e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 810b330:	2b00      	cmp	r3, #0
 810b332:	f2c0 814e 	blt.w	810b5d2 <_dtoa_r+0x722>
 810b336:	f1bb 0f0e 	cmp.w	fp, #14
 810b33a:	f300 814a 	bgt.w	810b5d2 <_dtoa_r+0x722>
 810b33e:	4b6b      	ldr	r3, [pc, #428]	; (810b4ec <_dtoa_r+0x63c>)
 810b340:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 810b344:	e9d3 8900 	ldrd	r8, r9, [r3]
 810b348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b34a:	2b00      	cmp	r3, #0
 810b34c:	f280 80dc 	bge.w	810b508 <_dtoa_r+0x658>
 810b350:	9b04      	ldr	r3, [sp, #16]
 810b352:	2b00      	cmp	r3, #0
 810b354:	f300 80d8 	bgt.w	810b508 <_dtoa_r+0x658>
 810b358:	f040 826f 	bne.w	810b83a <_dtoa_r+0x98a>
 810b35c:	4b68      	ldr	r3, [pc, #416]	; (810b500 <_dtoa_r+0x650>)
 810b35e:	2200      	movs	r2, #0
 810b360:	4640      	mov	r0, r8
 810b362:	4649      	mov	r1, r9
 810b364:	f7f5 f9d0 	bl	8100708 <__aeabi_dmul>
 810b368:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810b36c:	f7f5 fc52 	bl	8100c14 <__aeabi_dcmpge>
 810b370:	9e04      	ldr	r6, [sp, #16]
 810b372:	4637      	mov	r7, r6
 810b374:	2800      	cmp	r0, #0
 810b376:	f040 8245 	bne.w	810b804 <_dtoa_r+0x954>
 810b37a:	9d00      	ldr	r5, [sp, #0]
 810b37c:	2331      	movs	r3, #49	; 0x31
 810b37e:	f805 3b01 	strb.w	r3, [r5], #1
 810b382:	f10b 0b01 	add.w	fp, fp, #1
 810b386:	e241      	b.n	810b80c <_dtoa_r+0x95c>
 810b388:	07f2      	lsls	r2, r6, #31
 810b38a:	d505      	bpl.n	810b398 <_dtoa_r+0x4e8>
 810b38c:	e9d7 2300 	ldrd	r2, r3, [r7]
 810b390:	f7f5 f9ba 	bl	8100708 <__aeabi_dmul>
 810b394:	3501      	adds	r5, #1
 810b396:	2301      	movs	r3, #1
 810b398:	1076      	asrs	r6, r6, #1
 810b39a:	3708      	adds	r7, #8
 810b39c:	e773      	b.n	810b286 <_dtoa_r+0x3d6>
 810b39e:	2502      	movs	r5, #2
 810b3a0:	e775      	b.n	810b28e <_dtoa_r+0x3de>
 810b3a2:	9e04      	ldr	r6, [sp, #16]
 810b3a4:	465f      	mov	r7, fp
 810b3a6:	e792      	b.n	810b2ce <_dtoa_r+0x41e>
 810b3a8:	9900      	ldr	r1, [sp, #0]
 810b3aa:	4b50      	ldr	r3, [pc, #320]	; (810b4ec <_dtoa_r+0x63c>)
 810b3ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 810b3b0:	4431      	add	r1, r6
 810b3b2:	9102      	str	r1, [sp, #8]
 810b3b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 810b3b6:	eeb0 9a47 	vmov.f32	s18, s14
 810b3ba:	eef0 9a67 	vmov.f32	s19, s15
 810b3be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 810b3c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 810b3c6:	2900      	cmp	r1, #0
 810b3c8:	d044      	beq.n	810b454 <_dtoa_r+0x5a4>
 810b3ca:	494e      	ldr	r1, [pc, #312]	; (810b504 <_dtoa_r+0x654>)
 810b3cc:	2000      	movs	r0, #0
 810b3ce:	f7f5 fac5 	bl	810095c <__aeabi_ddiv>
 810b3d2:	ec53 2b19 	vmov	r2, r3, d9
 810b3d6:	f7f4 ffdf 	bl	8100398 <__aeabi_dsub>
 810b3da:	9d00      	ldr	r5, [sp, #0]
 810b3dc:	ec41 0b19 	vmov	d9, r0, r1
 810b3e0:	4649      	mov	r1, r9
 810b3e2:	4640      	mov	r0, r8
 810b3e4:	f7f5 fc40 	bl	8100c68 <__aeabi_d2iz>
 810b3e8:	4606      	mov	r6, r0
 810b3ea:	f7f5 f923 	bl	8100634 <__aeabi_i2d>
 810b3ee:	4602      	mov	r2, r0
 810b3f0:	460b      	mov	r3, r1
 810b3f2:	4640      	mov	r0, r8
 810b3f4:	4649      	mov	r1, r9
 810b3f6:	f7f4 ffcf 	bl	8100398 <__aeabi_dsub>
 810b3fa:	3630      	adds	r6, #48	; 0x30
 810b3fc:	f805 6b01 	strb.w	r6, [r5], #1
 810b400:	ec53 2b19 	vmov	r2, r3, d9
 810b404:	4680      	mov	r8, r0
 810b406:	4689      	mov	r9, r1
 810b408:	f7f5 fbf0 	bl	8100bec <__aeabi_dcmplt>
 810b40c:	2800      	cmp	r0, #0
 810b40e:	d164      	bne.n	810b4da <_dtoa_r+0x62a>
 810b410:	4642      	mov	r2, r8
 810b412:	464b      	mov	r3, r9
 810b414:	4937      	ldr	r1, [pc, #220]	; (810b4f4 <_dtoa_r+0x644>)
 810b416:	2000      	movs	r0, #0
 810b418:	f7f4 ffbe 	bl	8100398 <__aeabi_dsub>
 810b41c:	ec53 2b19 	vmov	r2, r3, d9
 810b420:	f7f5 fbe4 	bl	8100bec <__aeabi_dcmplt>
 810b424:	2800      	cmp	r0, #0
 810b426:	f040 80b6 	bne.w	810b596 <_dtoa_r+0x6e6>
 810b42a:	9b02      	ldr	r3, [sp, #8]
 810b42c:	429d      	cmp	r5, r3
 810b42e:	f43f af7c 	beq.w	810b32a <_dtoa_r+0x47a>
 810b432:	4b31      	ldr	r3, [pc, #196]	; (810b4f8 <_dtoa_r+0x648>)
 810b434:	ec51 0b19 	vmov	r0, r1, d9
 810b438:	2200      	movs	r2, #0
 810b43a:	f7f5 f965 	bl	8100708 <__aeabi_dmul>
 810b43e:	4b2e      	ldr	r3, [pc, #184]	; (810b4f8 <_dtoa_r+0x648>)
 810b440:	ec41 0b19 	vmov	d9, r0, r1
 810b444:	2200      	movs	r2, #0
 810b446:	4640      	mov	r0, r8
 810b448:	4649      	mov	r1, r9
 810b44a:	f7f5 f95d 	bl	8100708 <__aeabi_dmul>
 810b44e:	4680      	mov	r8, r0
 810b450:	4689      	mov	r9, r1
 810b452:	e7c5      	b.n	810b3e0 <_dtoa_r+0x530>
 810b454:	ec51 0b17 	vmov	r0, r1, d7
 810b458:	f7f5 f956 	bl	8100708 <__aeabi_dmul>
 810b45c:	9b02      	ldr	r3, [sp, #8]
 810b45e:	9d00      	ldr	r5, [sp, #0]
 810b460:	930f      	str	r3, [sp, #60]	; 0x3c
 810b462:	ec41 0b19 	vmov	d9, r0, r1
 810b466:	4649      	mov	r1, r9
 810b468:	4640      	mov	r0, r8
 810b46a:	f7f5 fbfd 	bl	8100c68 <__aeabi_d2iz>
 810b46e:	4606      	mov	r6, r0
 810b470:	f7f5 f8e0 	bl	8100634 <__aeabi_i2d>
 810b474:	3630      	adds	r6, #48	; 0x30
 810b476:	4602      	mov	r2, r0
 810b478:	460b      	mov	r3, r1
 810b47a:	4640      	mov	r0, r8
 810b47c:	4649      	mov	r1, r9
 810b47e:	f7f4 ff8b 	bl	8100398 <__aeabi_dsub>
 810b482:	f805 6b01 	strb.w	r6, [r5], #1
 810b486:	9b02      	ldr	r3, [sp, #8]
 810b488:	429d      	cmp	r5, r3
 810b48a:	4680      	mov	r8, r0
 810b48c:	4689      	mov	r9, r1
 810b48e:	f04f 0200 	mov.w	r2, #0
 810b492:	d124      	bne.n	810b4de <_dtoa_r+0x62e>
 810b494:	4b1b      	ldr	r3, [pc, #108]	; (810b504 <_dtoa_r+0x654>)
 810b496:	ec51 0b19 	vmov	r0, r1, d9
 810b49a:	f7f4 ff7f 	bl	810039c <__adddf3>
 810b49e:	4602      	mov	r2, r0
 810b4a0:	460b      	mov	r3, r1
 810b4a2:	4640      	mov	r0, r8
 810b4a4:	4649      	mov	r1, r9
 810b4a6:	f7f5 fbbf 	bl	8100c28 <__aeabi_dcmpgt>
 810b4aa:	2800      	cmp	r0, #0
 810b4ac:	d173      	bne.n	810b596 <_dtoa_r+0x6e6>
 810b4ae:	ec53 2b19 	vmov	r2, r3, d9
 810b4b2:	4914      	ldr	r1, [pc, #80]	; (810b504 <_dtoa_r+0x654>)
 810b4b4:	2000      	movs	r0, #0
 810b4b6:	f7f4 ff6f 	bl	8100398 <__aeabi_dsub>
 810b4ba:	4602      	mov	r2, r0
 810b4bc:	460b      	mov	r3, r1
 810b4be:	4640      	mov	r0, r8
 810b4c0:	4649      	mov	r1, r9
 810b4c2:	f7f5 fb93 	bl	8100bec <__aeabi_dcmplt>
 810b4c6:	2800      	cmp	r0, #0
 810b4c8:	f43f af2f 	beq.w	810b32a <_dtoa_r+0x47a>
 810b4cc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 810b4ce:	1e6b      	subs	r3, r5, #1
 810b4d0:	930f      	str	r3, [sp, #60]	; 0x3c
 810b4d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 810b4d6:	2b30      	cmp	r3, #48	; 0x30
 810b4d8:	d0f8      	beq.n	810b4cc <_dtoa_r+0x61c>
 810b4da:	46bb      	mov	fp, r7
 810b4dc:	e04a      	b.n	810b574 <_dtoa_r+0x6c4>
 810b4de:	4b06      	ldr	r3, [pc, #24]	; (810b4f8 <_dtoa_r+0x648>)
 810b4e0:	f7f5 f912 	bl	8100708 <__aeabi_dmul>
 810b4e4:	4680      	mov	r8, r0
 810b4e6:	4689      	mov	r9, r1
 810b4e8:	e7bd      	b.n	810b466 <_dtoa_r+0x5b6>
 810b4ea:	bf00      	nop
 810b4ec:	0810eb38 	.word	0x0810eb38
 810b4f0:	0810eb10 	.word	0x0810eb10
 810b4f4:	3ff00000 	.word	0x3ff00000
 810b4f8:	40240000 	.word	0x40240000
 810b4fc:	401c0000 	.word	0x401c0000
 810b500:	40140000 	.word	0x40140000
 810b504:	3fe00000 	.word	0x3fe00000
 810b508:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 810b50c:	9d00      	ldr	r5, [sp, #0]
 810b50e:	4642      	mov	r2, r8
 810b510:	464b      	mov	r3, r9
 810b512:	4630      	mov	r0, r6
 810b514:	4639      	mov	r1, r7
 810b516:	f7f5 fa21 	bl	810095c <__aeabi_ddiv>
 810b51a:	f7f5 fba5 	bl	8100c68 <__aeabi_d2iz>
 810b51e:	9001      	str	r0, [sp, #4]
 810b520:	f7f5 f888 	bl	8100634 <__aeabi_i2d>
 810b524:	4642      	mov	r2, r8
 810b526:	464b      	mov	r3, r9
 810b528:	f7f5 f8ee 	bl	8100708 <__aeabi_dmul>
 810b52c:	4602      	mov	r2, r0
 810b52e:	460b      	mov	r3, r1
 810b530:	4630      	mov	r0, r6
 810b532:	4639      	mov	r1, r7
 810b534:	f7f4 ff30 	bl	8100398 <__aeabi_dsub>
 810b538:	9e01      	ldr	r6, [sp, #4]
 810b53a:	9f04      	ldr	r7, [sp, #16]
 810b53c:	3630      	adds	r6, #48	; 0x30
 810b53e:	f805 6b01 	strb.w	r6, [r5], #1
 810b542:	9e00      	ldr	r6, [sp, #0]
 810b544:	1bae      	subs	r6, r5, r6
 810b546:	42b7      	cmp	r7, r6
 810b548:	4602      	mov	r2, r0
 810b54a:	460b      	mov	r3, r1
 810b54c:	d134      	bne.n	810b5b8 <_dtoa_r+0x708>
 810b54e:	f7f4 ff25 	bl	810039c <__adddf3>
 810b552:	4642      	mov	r2, r8
 810b554:	464b      	mov	r3, r9
 810b556:	4606      	mov	r6, r0
 810b558:	460f      	mov	r7, r1
 810b55a:	f7f5 fb65 	bl	8100c28 <__aeabi_dcmpgt>
 810b55e:	b9c8      	cbnz	r0, 810b594 <_dtoa_r+0x6e4>
 810b560:	4642      	mov	r2, r8
 810b562:	464b      	mov	r3, r9
 810b564:	4630      	mov	r0, r6
 810b566:	4639      	mov	r1, r7
 810b568:	f7f5 fb36 	bl	8100bd8 <__aeabi_dcmpeq>
 810b56c:	b110      	cbz	r0, 810b574 <_dtoa_r+0x6c4>
 810b56e:	9b01      	ldr	r3, [sp, #4]
 810b570:	07db      	lsls	r3, r3, #31
 810b572:	d40f      	bmi.n	810b594 <_dtoa_r+0x6e4>
 810b574:	4651      	mov	r1, sl
 810b576:	4620      	mov	r0, r4
 810b578:	f001 f8f0 	bl	810c75c <_Bfree>
 810b57c:	2300      	movs	r3, #0
 810b57e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810b580:	702b      	strb	r3, [r5, #0]
 810b582:	f10b 0301 	add.w	r3, fp, #1
 810b586:	6013      	str	r3, [r2, #0]
 810b588:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810b58a:	2b00      	cmp	r3, #0
 810b58c:	f43f ace2 	beq.w	810af54 <_dtoa_r+0xa4>
 810b590:	601d      	str	r5, [r3, #0]
 810b592:	e4df      	b.n	810af54 <_dtoa_r+0xa4>
 810b594:	465f      	mov	r7, fp
 810b596:	462b      	mov	r3, r5
 810b598:	461d      	mov	r5, r3
 810b59a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810b59e:	2a39      	cmp	r2, #57	; 0x39
 810b5a0:	d106      	bne.n	810b5b0 <_dtoa_r+0x700>
 810b5a2:	9a00      	ldr	r2, [sp, #0]
 810b5a4:	429a      	cmp	r2, r3
 810b5a6:	d1f7      	bne.n	810b598 <_dtoa_r+0x6e8>
 810b5a8:	9900      	ldr	r1, [sp, #0]
 810b5aa:	2230      	movs	r2, #48	; 0x30
 810b5ac:	3701      	adds	r7, #1
 810b5ae:	700a      	strb	r2, [r1, #0]
 810b5b0:	781a      	ldrb	r2, [r3, #0]
 810b5b2:	3201      	adds	r2, #1
 810b5b4:	701a      	strb	r2, [r3, #0]
 810b5b6:	e790      	b.n	810b4da <_dtoa_r+0x62a>
 810b5b8:	4ba3      	ldr	r3, [pc, #652]	; (810b848 <_dtoa_r+0x998>)
 810b5ba:	2200      	movs	r2, #0
 810b5bc:	f7f5 f8a4 	bl	8100708 <__aeabi_dmul>
 810b5c0:	2200      	movs	r2, #0
 810b5c2:	2300      	movs	r3, #0
 810b5c4:	4606      	mov	r6, r0
 810b5c6:	460f      	mov	r7, r1
 810b5c8:	f7f5 fb06 	bl	8100bd8 <__aeabi_dcmpeq>
 810b5cc:	2800      	cmp	r0, #0
 810b5ce:	d09e      	beq.n	810b50e <_dtoa_r+0x65e>
 810b5d0:	e7d0      	b.n	810b574 <_dtoa_r+0x6c4>
 810b5d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810b5d4:	2a00      	cmp	r2, #0
 810b5d6:	f000 80ca 	beq.w	810b76e <_dtoa_r+0x8be>
 810b5da:	9a07      	ldr	r2, [sp, #28]
 810b5dc:	2a01      	cmp	r2, #1
 810b5de:	f300 80ad 	bgt.w	810b73c <_dtoa_r+0x88c>
 810b5e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810b5e4:	2a00      	cmp	r2, #0
 810b5e6:	f000 80a5 	beq.w	810b734 <_dtoa_r+0x884>
 810b5ea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 810b5ee:	9e08      	ldr	r6, [sp, #32]
 810b5f0:	9d05      	ldr	r5, [sp, #20]
 810b5f2:	9a05      	ldr	r2, [sp, #20]
 810b5f4:	441a      	add	r2, r3
 810b5f6:	9205      	str	r2, [sp, #20]
 810b5f8:	9a06      	ldr	r2, [sp, #24]
 810b5fa:	2101      	movs	r1, #1
 810b5fc:	441a      	add	r2, r3
 810b5fe:	4620      	mov	r0, r4
 810b600:	9206      	str	r2, [sp, #24]
 810b602:	f001 f9ab 	bl	810c95c <__i2b>
 810b606:	4607      	mov	r7, r0
 810b608:	b165      	cbz	r5, 810b624 <_dtoa_r+0x774>
 810b60a:	9b06      	ldr	r3, [sp, #24]
 810b60c:	2b00      	cmp	r3, #0
 810b60e:	dd09      	ble.n	810b624 <_dtoa_r+0x774>
 810b610:	42ab      	cmp	r3, r5
 810b612:	9a05      	ldr	r2, [sp, #20]
 810b614:	bfa8      	it	ge
 810b616:	462b      	movge	r3, r5
 810b618:	1ad2      	subs	r2, r2, r3
 810b61a:	9205      	str	r2, [sp, #20]
 810b61c:	9a06      	ldr	r2, [sp, #24]
 810b61e:	1aed      	subs	r5, r5, r3
 810b620:	1ad3      	subs	r3, r2, r3
 810b622:	9306      	str	r3, [sp, #24]
 810b624:	9b08      	ldr	r3, [sp, #32]
 810b626:	b1f3      	cbz	r3, 810b666 <_dtoa_r+0x7b6>
 810b628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810b62a:	2b00      	cmp	r3, #0
 810b62c:	f000 80a3 	beq.w	810b776 <_dtoa_r+0x8c6>
 810b630:	2e00      	cmp	r6, #0
 810b632:	dd10      	ble.n	810b656 <_dtoa_r+0x7a6>
 810b634:	4639      	mov	r1, r7
 810b636:	4632      	mov	r2, r6
 810b638:	4620      	mov	r0, r4
 810b63a:	f001 fa4f 	bl	810cadc <__pow5mult>
 810b63e:	4652      	mov	r2, sl
 810b640:	4601      	mov	r1, r0
 810b642:	4607      	mov	r7, r0
 810b644:	4620      	mov	r0, r4
 810b646:	f001 f99f 	bl	810c988 <__multiply>
 810b64a:	4651      	mov	r1, sl
 810b64c:	4680      	mov	r8, r0
 810b64e:	4620      	mov	r0, r4
 810b650:	f001 f884 	bl	810c75c <_Bfree>
 810b654:	46c2      	mov	sl, r8
 810b656:	9b08      	ldr	r3, [sp, #32]
 810b658:	1b9a      	subs	r2, r3, r6
 810b65a:	d004      	beq.n	810b666 <_dtoa_r+0x7b6>
 810b65c:	4651      	mov	r1, sl
 810b65e:	4620      	mov	r0, r4
 810b660:	f001 fa3c 	bl	810cadc <__pow5mult>
 810b664:	4682      	mov	sl, r0
 810b666:	2101      	movs	r1, #1
 810b668:	4620      	mov	r0, r4
 810b66a:	f001 f977 	bl	810c95c <__i2b>
 810b66e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810b670:	2b00      	cmp	r3, #0
 810b672:	4606      	mov	r6, r0
 810b674:	f340 8081 	ble.w	810b77a <_dtoa_r+0x8ca>
 810b678:	461a      	mov	r2, r3
 810b67a:	4601      	mov	r1, r0
 810b67c:	4620      	mov	r0, r4
 810b67e:	f001 fa2d 	bl	810cadc <__pow5mult>
 810b682:	9b07      	ldr	r3, [sp, #28]
 810b684:	2b01      	cmp	r3, #1
 810b686:	4606      	mov	r6, r0
 810b688:	dd7a      	ble.n	810b780 <_dtoa_r+0x8d0>
 810b68a:	f04f 0800 	mov.w	r8, #0
 810b68e:	6933      	ldr	r3, [r6, #16]
 810b690:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 810b694:	6918      	ldr	r0, [r3, #16]
 810b696:	f001 f913 	bl	810c8c0 <__hi0bits>
 810b69a:	f1c0 0020 	rsb	r0, r0, #32
 810b69e:	9b06      	ldr	r3, [sp, #24]
 810b6a0:	4418      	add	r0, r3
 810b6a2:	f010 001f 	ands.w	r0, r0, #31
 810b6a6:	f000 8094 	beq.w	810b7d2 <_dtoa_r+0x922>
 810b6aa:	f1c0 0320 	rsb	r3, r0, #32
 810b6ae:	2b04      	cmp	r3, #4
 810b6b0:	f340 8085 	ble.w	810b7be <_dtoa_r+0x90e>
 810b6b4:	9b05      	ldr	r3, [sp, #20]
 810b6b6:	f1c0 001c 	rsb	r0, r0, #28
 810b6ba:	4403      	add	r3, r0
 810b6bc:	9305      	str	r3, [sp, #20]
 810b6be:	9b06      	ldr	r3, [sp, #24]
 810b6c0:	4403      	add	r3, r0
 810b6c2:	4405      	add	r5, r0
 810b6c4:	9306      	str	r3, [sp, #24]
 810b6c6:	9b05      	ldr	r3, [sp, #20]
 810b6c8:	2b00      	cmp	r3, #0
 810b6ca:	dd05      	ble.n	810b6d8 <_dtoa_r+0x828>
 810b6cc:	4651      	mov	r1, sl
 810b6ce:	461a      	mov	r2, r3
 810b6d0:	4620      	mov	r0, r4
 810b6d2:	f001 fa5d 	bl	810cb90 <__lshift>
 810b6d6:	4682      	mov	sl, r0
 810b6d8:	9b06      	ldr	r3, [sp, #24]
 810b6da:	2b00      	cmp	r3, #0
 810b6dc:	dd05      	ble.n	810b6ea <_dtoa_r+0x83a>
 810b6de:	4631      	mov	r1, r6
 810b6e0:	461a      	mov	r2, r3
 810b6e2:	4620      	mov	r0, r4
 810b6e4:	f001 fa54 	bl	810cb90 <__lshift>
 810b6e8:	4606      	mov	r6, r0
 810b6ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810b6ec:	2b00      	cmp	r3, #0
 810b6ee:	d072      	beq.n	810b7d6 <_dtoa_r+0x926>
 810b6f0:	4631      	mov	r1, r6
 810b6f2:	4650      	mov	r0, sl
 810b6f4:	f001 fab8 	bl	810cc68 <__mcmp>
 810b6f8:	2800      	cmp	r0, #0
 810b6fa:	da6c      	bge.n	810b7d6 <_dtoa_r+0x926>
 810b6fc:	2300      	movs	r3, #0
 810b6fe:	4651      	mov	r1, sl
 810b700:	220a      	movs	r2, #10
 810b702:	4620      	mov	r0, r4
 810b704:	f001 f84c 	bl	810c7a0 <__multadd>
 810b708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810b70a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 810b70e:	4682      	mov	sl, r0
 810b710:	2b00      	cmp	r3, #0
 810b712:	f000 81b0 	beq.w	810ba76 <_dtoa_r+0xbc6>
 810b716:	2300      	movs	r3, #0
 810b718:	4639      	mov	r1, r7
 810b71a:	220a      	movs	r2, #10
 810b71c:	4620      	mov	r0, r4
 810b71e:	f001 f83f 	bl	810c7a0 <__multadd>
 810b722:	9b01      	ldr	r3, [sp, #4]
 810b724:	2b00      	cmp	r3, #0
 810b726:	4607      	mov	r7, r0
 810b728:	f300 8096 	bgt.w	810b858 <_dtoa_r+0x9a8>
 810b72c:	9b07      	ldr	r3, [sp, #28]
 810b72e:	2b02      	cmp	r3, #2
 810b730:	dc59      	bgt.n	810b7e6 <_dtoa_r+0x936>
 810b732:	e091      	b.n	810b858 <_dtoa_r+0x9a8>
 810b734:	9b10      	ldr	r3, [sp, #64]	; 0x40
 810b736:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 810b73a:	e758      	b.n	810b5ee <_dtoa_r+0x73e>
 810b73c:	9b04      	ldr	r3, [sp, #16]
 810b73e:	1e5e      	subs	r6, r3, #1
 810b740:	9b08      	ldr	r3, [sp, #32]
 810b742:	42b3      	cmp	r3, r6
 810b744:	bfbf      	itttt	lt
 810b746:	9b08      	ldrlt	r3, [sp, #32]
 810b748:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 810b74a:	9608      	strlt	r6, [sp, #32]
 810b74c:	1af3      	sublt	r3, r6, r3
 810b74e:	bfb4      	ite	lt
 810b750:	18d2      	addlt	r2, r2, r3
 810b752:	1b9e      	subge	r6, r3, r6
 810b754:	9b04      	ldr	r3, [sp, #16]
 810b756:	bfbc      	itt	lt
 810b758:	920b      	strlt	r2, [sp, #44]	; 0x2c
 810b75a:	2600      	movlt	r6, #0
 810b75c:	2b00      	cmp	r3, #0
 810b75e:	bfb7      	itett	lt
 810b760:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 810b764:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 810b768:	1a9d      	sublt	r5, r3, r2
 810b76a:	2300      	movlt	r3, #0
 810b76c:	e741      	b.n	810b5f2 <_dtoa_r+0x742>
 810b76e:	9e08      	ldr	r6, [sp, #32]
 810b770:	9d05      	ldr	r5, [sp, #20]
 810b772:	9f09      	ldr	r7, [sp, #36]	; 0x24
 810b774:	e748      	b.n	810b608 <_dtoa_r+0x758>
 810b776:	9a08      	ldr	r2, [sp, #32]
 810b778:	e770      	b.n	810b65c <_dtoa_r+0x7ac>
 810b77a:	9b07      	ldr	r3, [sp, #28]
 810b77c:	2b01      	cmp	r3, #1
 810b77e:	dc19      	bgt.n	810b7b4 <_dtoa_r+0x904>
 810b780:	9b02      	ldr	r3, [sp, #8]
 810b782:	b9bb      	cbnz	r3, 810b7b4 <_dtoa_r+0x904>
 810b784:	9b03      	ldr	r3, [sp, #12]
 810b786:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810b78a:	b99b      	cbnz	r3, 810b7b4 <_dtoa_r+0x904>
 810b78c:	9b03      	ldr	r3, [sp, #12]
 810b78e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 810b792:	0d1b      	lsrs	r3, r3, #20
 810b794:	051b      	lsls	r3, r3, #20
 810b796:	b183      	cbz	r3, 810b7ba <_dtoa_r+0x90a>
 810b798:	9b05      	ldr	r3, [sp, #20]
 810b79a:	3301      	adds	r3, #1
 810b79c:	9305      	str	r3, [sp, #20]
 810b79e:	9b06      	ldr	r3, [sp, #24]
 810b7a0:	3301      	adds	r3, #1
 810b7a2:	9306      	str	r3, [sp, #24]
 810b7a4:	f04f 0801 	mov.w	r8, #1
 810b7a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810b7aa:	2b00      	cmp	r3, #0
 810b7ac:	f47f af6f 	bne.w	810b68e <_dtoa_r+0x7de>
 810b7b0:	2001      	movs	r0, #1
 810b7b2:	e774      	b.n	810b69e <_dtoa_r+0x7ee>
 810b7b4:	f04f 0800 	mov.w	r8, #0
 810b7b8:	e7f6      	b.n	810b7a8 <_dtoa_r+0x8f8>
 810b7ba:	4698      	mov	r8, r3
 810b7bc:	e7f4      	b.n	810b7a8 <_dtoa_r+0x8f8>
 810b7be:	d082      	beq.n	810b6c6 <_dtoa_r+0x816>
 810b7c0:	9a05      	ldr	r2, [sp, #20]
 810b7c2:	331c      	adds	r3, #28
 810b7c4:	441a      	add	r2, r3
 810b7c6:	9205      	str	r2, [sp, #20]
 810b7c8:	9a06      	ldr	r2, [sp, #24]
 810b7ca:	441a      	add	r2, r3
 810b7cc:	441d      	add	r5, r3
 810b7ce:	9206      	str	r2, [sp, #24]
 810b7d0:	e779      	b.n	810b6c6 <_dtoa_r+0x816>
 810b7d2:	4603      	mov	r3, r0
 810b7d4:	e7f4      	b.n	810b7c0 <_dtoa_r+0x910>
 810b7d6:	9b04      	ldr	r3, [sp, #16]
 810b7d8:	2b00      	cmp	r3, #0
 810b7da:	dc37      	bgt.n	810b84c <_dtoa_r+0x99c>
 810b7dc:	9b07      	ldr	r3, [sp, #28]
 810b7de:	2b02      	cmp	r3, #2
 810b7e0:	dd34      	ble.n	810b84c <_dtoa_r+0x99c>
 810b7e2:	9b04      	ldr	r3, [sp, #16]
 810b7e4:	9301      	str	r3, [sp, #4]
 810b7e6:	9b01      	ldr	r3, [sp, #4]
 810b7e8:	b963      	cbnz	r3, 810b804 <_dtoa_r+0x954>
 810b7ea:	4631      	mov	r1, r6
 810b7ec:	2205      	movs	r2, #5
 810b7ee:	4620      	mov	r0, r4
 810b7f0:	f000 ffd6 	bl	810c7a0 <__multadd>
 810b7f4:	4601      	mov	r1, r0
 810b7f6:	4606      	mov	r6, r0
 810b7f8:	4650      	mov	r0, sl
 810b7fa:	f001 fa35 	bl	810cc68 <__mcmp>
 810b7fe:	2800      	cmp	r0, #0
 810b800:	f73f adbb 	bgt.w	810b37a <_dtoa_r+0x4ca>
 810b804:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b806:	9d00      	ldr	r5, [sp, #0]
 810b808:	ea6f 0b03 	mvn.w	fp, r3
 810b80c:	f04f 0800 	mov.w	r8, #0
 810b810:	4631      	mov	r1, r6
 810b812:	4620      	mov	r0, r4
 810b814:	f000 ffa2 	bl	810c75c <_Bfree>
 810b818:	2f00      	cmp	r7, #0
 810b81a:	f43f aeab 	beq.w	810b574 <_dtoa_r+0x6c4>
 810b81e:	f1b8 0f00 	cmp.w	r8, #0
 810b822:	d005      	beq.n	810b830 <_dtoa_r+0x980>
 810b824:	45b8      	cmp	r8, r7
 810b826:	d003      	beq.n	810b830 <_dtoa_r+0x980>
 810b828:	4641      	mov	r1, r8
 810b82a:	4620      	mov	r0, r4
 810b82c:	f000 ff96 	bl	810c75c <_Bfree>
 810b830:	4639      	mov	r1, r7
 810b832:	4620      	mov	r0, r4
 810b834:	f000 ff92 	bl	810c75c <_Bfree>
 810b838:	e69c      	b.n	810b574 <_dtoa_r+0x6c4>
 810b83a:	2600      	movs	r6, #0
 810b83c:	4637      	mov	r7, r6
 810b83e:	e7e1      	b.n	810b804 <_dtoa_r+0x954>
 810b840:	46bb      	mov	fp, r7
 810b842:	4637      	mov	r7, r6
 810b844:	e599      	b.n	810b37a <_dtoa_r+0x4ca>
 810b846:	bf00      	nop
 810b848:	40240000 	.word	0x40240000
 810b84c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810b84e:	2b00      	cmp	r3, #0
 810b850:	f000 80c8 	beq.w	810b9e4 <_dtoa_r+0xb34>
 810b854:	9b04      	ldr	r3, [sp, #16]
 810b856:	9301      	str	r3, [sp, #4]
 810b858:	2d00      	cmp	r5, #0
 810b85a:	dd05      	ble.n	810b868 <_dtoa_r+0x9b8>
 810b85c:	4639      	mov	r1, r7
 810b85e:	462a      	mov	r2, r5
 810b860:	4620      	mov	r0, r4
 810b862:	f001 f995 	bl	810cb90 <__lshift>
 810b866:	4607      	mov	r7, r0
 810b868:	f1b8 0f00 	cmp.w	r8, #0
 810b86c:	d05b      	beq.n	810b926 <_dtoa_r+0xa76>
 810b86e:	6879      	ldr	r1, [r7, #4]
 810b870:	4620      	mov	r0, r4
 810b872:	f000 ff33 	bl	810c6dc <_Balloc>
 810b876:	4605      	mov	r5, r0
 810b878:	b928      	cbnz	r0, 810b886 <_dtoa_r+0x9d6>
 810b87a:	4b83      	ldr	r3, [pc, #524]	; (810ba88 <_dtoa_r+0xbd8>)
 810b87c:	4602      	mov	r2, r0
 810b87e:	f240 21ef 	movw	r1, #751	; 0x2ef
 810b882:	f7ff bb2e 	b.w	810aee2 <_dtoa_r+0x32>
 810b886:	693a      	ldr	r2, [r7, #16]
 810b888:	3202      	adds	r2, #2
 810b88a:	0092      	lsls	r2, r2, #2
 810b88c:	f107 010c 	add.w	r1, r7, #12
 810b890:	300c      	adds	r0, #12
 810b892:	f7ff fa4b 	bl	810ad2c <memcpy>
 810b896:	2201      	movs	r2, #1
 810b898:	4629      	mov	r1, r5
 810b89a:	4620      	mov	r0, r4
 810b89c:	f001 f978 	bl	810cb90 <__lshift>
 810b8a0:	9b00      	ldr	r3, [sp, #0]
 810b8a2:	3301      	adds	r3, #1
 810b8a4:	9304      	str	r3, [sp, #16]
 810b8a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 810b8aa:	4413      	add	r3, r2
 810b8ac:	9308      	str	r3, [sp, #32]
 810b8ae:	9b02      	ldr	r3, [sp, #8]
 810b8b0:	f003 0301 	and.w	r3, r3, #1
 810b8b4:	46b8      	mov	r8, r7
 810b8b6:	9306      	str	r3, [sp, #24]
 810b8b8:	4607      	mov	r7, r0
 810b8ba:	9b04      	ldr	r3, [sp, #16]
 810b8bc:	4631      	mov	r1, r6
 810b8be:	3b01      	subs	r3, #1
 810b8c0:	4650      	mov	r0, sl
 810b8c2:	9301      	str	r3, [sp, #4]
 810b8c4:	f7ff fa6c 	bl	810ada0 <quorem>
 810b8c8:	4641      	mov	r1, r8
 810b8ca:	9002      	str	r0, [sp, #8]
 810b8cc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 810b8d0:	4650      	mov	r0, sl
 810b8d2:	f001 f9c9 	bl	810cc68 <__mcmp>
 810b8d6:	463a      	mov	r2, r7
 810b8d8:	9005      	str	r0, [sp, #20]
 810b8da:	4631      	mov	r1, r6
 810b8dc:	4620      	mov	r0, r4
 810b8de:	f001 f9df 	bl	810cca0 <__mdiff>
 810b8e2:	68c2      	ldr	r2, [r0, #12]
 810b8e4:	4605      	mov	r5, r0
 810b8e6:	bb02      	cbnz	r2, 810b92a <_dtoa_r+0xa7a>
 810b8e8:	4601      	mov	r1, r0
 810b8ea:	4650      	mov	r0, sl
 810b8ec:	f001 f9bc 	bl	810cc68 <__mcmp>
 810b8f0:	4602      	mov	r2, r0
 810b8f2:	4629      	mov	r1, r5
 810b8f4:	4620      	mov	r0, r4
 810b8f6:	9209      	str	r2, [sp, #36]	; 0x24
 810b8f8:	f000 ff30 	bl	810c75c <_Bfree>
 810b8fc:	9b07      	ldr	r3, [sp, #28]
 810b8fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810b900:	9d04      	ldr	r5, [sp, #16]
 810b902:	ea43 0102 	orr.w	r1, r3, r2
 810b906:	9b06      	ldr	r3, [sp, #24]
 810b908:	4319      	orrs	r1, r3
 810b90a:	d110      	bne.n	810b92e <_dtoa_r+0xa7e>
 810b90c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 810b910:	d029      	beq.n	810b966 <_dtoa_r+0xab6>
 810b912:	9b05      	ldr	r3, [sp, #20]
 810b914:	2b00      	cmp	r3, #0
 810b916:	dd02      	ble.n	810b91e <_dtoa_r+0xa6e>
 810b918:	9b02      	ldr	r3, [sp, #8]
 810b91a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 810b91e:	9b01      	ldr	r3, [sp, #4]
 810b920:	f883 9000 	strb.w	r9, [r3]
 810b924:	e774      	b.n	810b810 <_dtoa_r+0x960>
 810b926:	4638      	mov	r0, r7
 810b928:	e7ba      	b.n	810b8a0 <_dtoa_r+0x9f0>
 810b92a:	2201      	movs	r2, #1
 810b92c:	e7e1      	b.n	810b8f2 <_dtoa_r+0xa42>
 810b92e:	9b05      	ldr	r3, [sp, #20]
 810b930:	2b00      	cmp	r3, #0
 810b932:	db04      	blt.n	810b93e <_dtoa_r+0xa8e>
 810b934:	9907      	ldr	r1, [sp, #28]
 810b936:	430b      	orrs	r3, r1
 810b938:	9906      	ldr	r1, [sp, #24]
 810b93a:	430b      	orrs	r3, r1
 810b93c:	d120      	bne.n	810b980 <_dtoa_r+0xad0>
 810b93e:	2a00      	cmp	r2, #0
 810b940:	dded      	ble.n	810b91e <_dtoa_r+0xa6e>
 810b942:	4651      	mov	r1, sl
 810b944:	2201      	movs	r2, #1
 810b946:	4620      	mov	r0, r4
 810b948:	f001 f922 	bl	810cb90 <__lshift>
 810b94c:	4631      	mov	r1, r6
 810b94e:	4682      	mov	sl, r0
 810b950:	f001 f98a 	bl	810cc68 <__mcmp>
 810b954:	2800      	cmp	r0, #0
 810b956:	dc03      	bgt.n	810b960 <_dtoa_r+0xab0>
 810b958:	d1e1      	bne.n	810b91e <_dtoa_r+0xa6e>
 810b95a:	f019 0f01 	tst.w	r9, #1
 810b95e:	d0de      	beq.n	810b91e <_dtoa_r+0xa6e>
 810b960:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 810b964:	d1d8      	bne.n	810b918 <_dtoa_r+0xa68>
 810b966:	9a01      	ldr	r2, [sp, #4]
 810b968:	2339      	movs	r3, #57	; 0x39
 810b96a:	7013      	strb	r3, [r2, #0]
 810b96c:	462b      	mov	r3, r5
 810b96e:	461d      	mov	r5, r3
 810b970:	3b01      	subs	r3, #1
 810b972:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 810b976:	2a39      	cmp	r2, #57	; 0x39
 810b978:	d06c      	beq.n	810ba54 <_dtoa_r+0xba4>
 810b97a:	3201      	adds	r2, #1
 810b97c:	701a      	strb	r2, [r3, #0]
 810b97e:	e747      	b.n	810b810 <_dtoa_r+0x960>
 810b980:	2a00      	cmp	r2, #0
 810b982:	dd07      	ble.n	810b994 <_dtoa_r+0xae4>
 810b984:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 810b988:	d0ed      	beq.n	810b966 <_dtoa_r+0xab6>
 810b98a:	9a01      	ldr	r2, [sp, #4]
 810b98c:	f109 0301 	add.w	r3, r9, #1
 810b990:	7013      	strb	r3, [r2, #0]
 810b992:	e73d      	b.n	810b810 <_dtoa_r+0x960>
 810b994:	9b04      	ldr	r3, [sp, #16]
 810b996:	9a08      	ldr	r2, [sp, #32]
 810b998:	f803 9c01 	strb.w	r9, [r3, #-1]
 810b99c:	4293      	cmp	r3, r2
 810b99e:	d043      	beq.n	810ba28 <_dtoa_r+0xb78>
 810b9a0:	4651      	mov	r1, sl
 810b9a2:	2300      	movs	r3, #0
 810b9a4:	220a      	movs	r2, #10
 810b9a6:	4620      	mov	r0, r4
 810b9a8:	f000 fefa 	bl	810c7a0 <__multadd>
 810b9ac:	45b8      	cmp	r8, r7
 810b9ae:	4682      	mov	sl, r0
 810b9b0:	f04f 0300 	mov.w	r3, #0
 810b9b4:	f04f 020a 	mov.w	r2, #10
 810b9b8:	4641      	mov	r1, r8
 810b9ba:	4620      	mov	r0, r4
 810b9bc:	d107      	bne.n	810b9ce <_dtoa_r+0xb1e>
 810b9be:	f000 feef 	bl	810c7a0 <__multadd>
 810b9c2:	4680      	mov	r8, r0
 810b9c4:	4607      	mov	r7, r0
 810b9c6:	9b04      	ldr	r3, [sp, #16]
 810b9c8:	3301      	adds	r3, #1
 810b9ca:	9304      	str	r3, [sp, #16]
 810b9cc:	e775      	b.n	810b8ba <_dtoa_r+0xa0a>
 810b9ce:	f000 fee7 	bl	810c7a0 <__multadd>
 810b9d2:	4639      	mov	r1, r7
 810b9d4:	4680      	mov	r8, r0
 810b9d6:	2300      	movs	r3, #0
 810b9d8:	220a      	movs	r2, #10
 810b9da:	4620      	mov	r0, r4
 810b9dc:	f000 fee0 	bl	810c7a0 <__multadd>
 810b9e0:	4607      	mov	r7, r0
 810b9e2:	e7f0      	b.n	810b9c6 <_dtoa_r+0xb16>
 810b9e4:	9b04      	ldr	r3, [sp, #16]
 810b9e6:	9301      	str	r3, [sp, #4]
 810b9e8:	9d00      	ldr	r5, [sp, #0]
 810b9ea:	4631      	mov	r1, r6
 810b9ec:	4650      	mov	r0, sl
 810b9ee:	f7ff f9d7 	bl	810ada0 <quorem>
 810b9f2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 810b9f6:	9b00      	ldr	r3, [sp, #0]
 810b9f8:	f805 9b01 	strb.w	r9, [r5], #1
 810b9fc:	1aea      	subs	r2, r5, r3
 810b9fe:	9b01      	ldr	r3, [sp, #4]
 810ba00:	4293      	cmp	r3, r2
 810ba02:	dd07      	ble.n	810ba14 <_dtoa_r+0xb64>
 810ba04:	4651      	mov	r1, sl
 810ba06:	2300      	movs	r3, #0
 810ba08:	220a      	movs	r2, #10
 810ba0a:	4620      	mov	r0, r4
 810ba0c:	f000 fec8 	bl	810c7a0 <__multadd>
 810ba10:	4682      	mov	sl, r0
 810ba12:	e7ea      	b.n	810b9ea <_dtoa_r+0xb3a>
 810ba14:	9b01      	ldr	r3, [sp, #4]
 810ba16:	2b00      	cmp	r3, #0
 810ba18:	bfc8      	it	gt
 810ba1a:	461d      	movgt	r5, r3
 810ba1c:	9b00      	ldr	r3, [sp, #0]
 810ba1e:	bfd8      	it	le
 810ba20:	2501      	movle	r5, #1
 810ba22:	441d      	add	r5, r3
 810ba24:	f04f 0800 	mov.w	r8, #0
 810ba28:	4651      	mov	r1, sl
 810ba2a:	2201      	movs	r2, #1
 810ba2c:	4620      	mov	r0, r4
 810ba2e:	f001 f8af 	bl	810cb90 <__lshift>
 810ba32:	4631      	mov	r1, r6
 810ba34:	4682      	mov	sl, r0
 810ba36:	f001 f917 	bl	810cc68 <__mcmp>
 810ba3a:	2800      	cmp	r0, #0
 810ba3c:	dc96      	bgt.n	810b96c <_dtoa_r+0xabc>
 810ba3e:	d102      	bne.n	810ba46 <_dtoa_r+0xb96>
 810ba40:	f019 0f01 	tst.w	r9, #1
 810ba44:	d192      	bne.n	810b96c <_dtoa_r+0xabc>
 810ba46:	462b      	mov	r3, r5
 810ba48:	461d      	mov	r5, r3
 810ba4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810ba4e:	2a30      	cmp	r2, #48	; 0x30
 810ba50:	d0fa      	beq.n	810ba48 <_dtoa_r+0xb98>
 810ba52:	e6dd      	b.n	810b810 <_dtoa_r+0x960>
 810ba54:	9a00      	ldr	r2, [sp, #0]
 810ba56:	429a      	cmp	r2, r3
 810ba58:	d189      	bne.n	810b96e <_dtoa_r+0xabe>
 810ba5a:	f10b 0b01 	add.w	fp, fp, #1
 810ba5e:	2331      	movs	r3, #49	; 0x31
 810ba60:	e796      	b.n	810b990 <_dtoa_r+0xae0>
 810ba62:	4b0a      	ldr	r3, [pc, #40]	; (810ba8c <_dtoa_r+0xbdc>)
 810ba64:	f7ff ba99 	b.w	810af9a <_dtoa_r+0xea>
 810ba68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810ba6a:	2b00      	cmp	r3, #0
 810ba6c:	f47f aa6d 	bne.w	810af4a <_dtoa_r+0x9a>
 810ba70:	4b07      	ldr	r3, [pc, #28]	; (810ba90 <_dtoa_r+0xbe0>)
 810ba72:	f7ff ba92 	b.w	810af9a <_dtoa_r+0xea>
 810ba76:	9b01      	ldr	r3, [sp, #4]
 810ba78:	2b00      	cmp	r3, #0
 810ba7a:	dcb5      	bgt.n	810b9e8 <_dtoa_r+0xb38>
 810ba7c:	9b07      	ldr	r3, [sp, #28]
 810ba7e:	2b02      	cmp	r3, #2
 810ba80:	f73f aeb1 	bgt.w	810b7e6 <_dtoa_r+0x936>
 810ba84:	e7b0      	b.n	810b9e8 <_dtoa_r+0xb38>
 810ba86:	bf00      	nop
 810ba88:	0810ea32 	.word	0x0810ea32
 810ba8c:	0810e798 	.word	0x0810e798
 810ba90:	0810e9cd 	.word	0x0810e9cd

0810ba94 <rshift>:
 810ba94:	6903      	ldr	r3, [r0, #16]
 810ba96:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 810ba9a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810ba9e:	ea4f 1261 	mov.w	r2, r1, asr #5
 810baa2:	f100 0414 	add.w	r4, r0, #20
 810baa6:	dd45      	ble.n	810bb34 <rshift+0xa0>
 810baa8:	f011 011f 	ands.w	r1, r1, #31
 810baac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 810bab0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 810bab4:	d10c      	bne.n	810bad0 <rshift+0x3c>
 810bab6:	f100 0710 	add.w	r7, r0, #16
 810baba:	4629      	mov	r1, r5
 810babc:	42b1      	cmp	r1, r6
 810babe:	d334      	bcc.n	810bb2a <rshift+0x96>
 810bac0:	1a9b      	subs	r3, r3, r2
 810bac2:	009b      	lsls	r3, r3, #2
 810bac4:	1eea      	subs	r2, r5, #3
 810bac6:	4296      	cmp	r6, r2
 810bac8:	bf38      	it	cc
 810baca:	2300      	movcc	r3, #0
 810bacc:	4423      	add	r3, r4
 810bace:	e015      	b.n	810bafc <rshift+0x68>
 810bad0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 810bad4:	f1c1 0820 	rsb	r8, r1, #32
 810bad8:	40cf      	lsrs	r7, r1
 810bada:	f105 0e04 	add.w	lr, r5, #4
 810bade:	46a1      	mov	r9, r4
 810bae0:	4576      	cmp	r6, lr
 810bae2:	46f4      	mov	ip, lr
 810bae4:	d815      	bhi.n	810bb12 <rshift+0x7e>
 810bae6:	1a9a      	subs	r2, r3, r2
 810bae8:	0092      	lsls	r2, r2, #2
 810baea:	3a04      	subs	r2, #4
 810baec:	3501      	adds	r5, #1
 810baee:	42ae      	cmp	r6, r5
 810baf0:	bf38      	it	cc
 810baf2:	2200      	movcc	r2, #0
 810baf4:	18a3      	adds	r3, r4, r2
 810baf6:	50a7      	str	r7, [r4, r2]
 810baf8:	b107      	cbz	r7, 810bafc <rshift+0x68>
 810bafa:	3304      	adds	r3, #4
 810bafc:	1b1a      	subs	r2, r3, r4
 810bafe:	42a3      	cmp	r3, r4
 810bb00:	ea4f 02a2 	mov.w	r2, r2, asr #2
 810bb04:	bf08      	it	eq
 810bb06:	2300      	moveq	r3, #0
 810bb08:	6102      	str	r2, [r0, #16]
 810bb0a:	bf08      	it	eq
 810bb0c:	6143      	streq	r3, [r0, #20]
 810bb0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810bb12:	f8dc c000 	ldr.w	ip, [ip]
 810bb16:	fa0c fc08 	lsl.w	ip, ip, r8
 810bb1a:	ea4c 0707 	orr.w	r7, ip, r7
 810bb1e:	f849 7b04 	str.w	r7, [r9], #4
 810bb22:	f85e 7b04 	ldr.w	r7, [lr], #4
 810bb26:	40cf      	lsrs	r7, r1
 810bb28:	e7da      	b.n	810bae0 <rshift+0x4c>
 810bb2a:	f851 cb04 	ldr.w	ip, [r1], #4
 810bb2e:	f847 cf04 	str.w	ip, [r7, #4]!
 810bb32:	e7c3      	b.n	810babc <rshift+0x28>
 810bb34:	4623      	mov	r3, r4
 810bb36:	e7e1      	b.n	810bafc <rshift+0x68>

0810bb38 <__hexdig_fun>:
 810bb38:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 810bb3c:	2b09      	cmp	r3, #9
 810bb3e:	d802      	bhi.n	810bb46 <__hexdig_fun+0xe>
 810bb40:	3820      	subs	r0, #32
 810bb42:	b2c0      	uxtb	r0, r0
 810bb44:	4770      	bx	lr
 810bb46:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 810bb4a:	2b05      	cmp	r3, #5
 810bb4c:	d801      	bhi.n	810bb52 <__hexdig_fun+0x1a>
 810bb4e:	3847      	subs	r0, #71	; 0x47
 810bb50:	e7f7      	b.n	810bb42 <__hexdig_fun+0xa>
 810bb52:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 810bb56:	2b05      	cmp	r3, #5
 810bb58:	d801      	bhi.n	810bb5e <__hexdig_fun+0x26>
 810bb5a:	3827      	subs	r0, #39	; 0x27
 810bb5c:	e7f1      	b.n	810bb42 <__hexdig_fun+0xa>
 810bb5e:	2000      	movs	r0, #0
 810bb60:	4770      	bx	lr
	...

0810bb64 <__gethex>:
 810bb64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810bb68:	4617      	mov	r7, r2
 810bb6a:	680a      	ldr	r2, [r1, #0]
 810bb6c:	b085      	sub	sp, #20
 810bb6e:	f102 0b02 	add.w	fp, r2, #2
 810bb72:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 810bb76:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 810bb7a:	4681      	mov	r9, r0
 810bb7c:	468a      	mov	sl, r1
 810bb7e:	9302      	str	r3, [sp, #8]
 810bb80:	32fe      	adds	r2, #254	; 0xfe
 810bb82:	eb02 030b 	add.w	r3, r2, fp
 810bb86:	46d8      	mov	r8, fp
 810bb88:	f81b 0b01 	ldrb.w	r0, [fp], #1
 810bb8c:	9301      	str	r3, [sp, #4]
 810bb8e:	2830      	cmp	r0, #48	; 0x30
 810bb90:	d0f7      	beq.n	810bb82 <__gethex+0x1e>
 810bb92:	f7ff ffd1 	bl	810bb38 <__hexdig_fun>
 810bb96:	4604      	mov	r4, r0
 810bb98:	2800      	cmp	r0, #0
 810bb9a:	d138      	bne.n	810bc0e <__gethex+0xaa>
 810bb9c:	49a7      	ldr	r1, [pc, #668]	; (810be3c <__gethex+0x2d8>)
 810bb9e:	2201      	movs	r2, #1
 810bba0:	4640      	mov	r0, r8
 810bba2:	f7ff f84d 	bl	810ac40 <strncmp>
 810bba6:	4606      	mov	r6, r0
 810bba8:	2800      	cmp	r0, #0
 810bbaa:	d169      	bne.n	810bc80 <__gethex+0x11c>
 810bbac:	f898 0001 	ldrb.w	r0, [r8, #1]
 810bbb0:	465d      	mov	r5, fp
 810bbb2:	f7ff ffc1 	bl	810bb38 <__hexdig_fun>
 810bbb6:	2800      	cmp	r0, #0
 810bbb8:	d064      	beq.n	810bc84 <__gethex+0x120>
 810bbba:	465a      	mov	r2, fp
 810bbbc:	7810      	ldrb	r0, [r2, #0]
 810bbbe:	2830      	cmp	r0, #48	; 0x30
 810bbc0:	4690      	mov	r8, r2
 810bbc2:	f102 0201 	add.w	r2, r2, #1
 810bbc6:	d0f9      	beq.n	810bbbc <__gethex+0x58>
 810bbc8:	f7ff ffb6 	bl	810bb38 <__hexdig_fun>
 810bbcc:	2301      	movs	r3, #1
 810bbce:	fab0 f480 	clz	r4, r0
 810bbd2:	0964      	lsrs	r4, r4, #5
 810bbd4:	465e      	mov	r6, fp
 810bbd6:	9301      	str	r3, [sp, #4]
 810bbd8:	4642      	mov	r2, r8
 810bbda:	4615      	mov	r5, r2
 810bbdc:	3201      	adds	r2, #1
 810bbde:	7828      	ldrb	r0, [r5, #0]
 810bbe0:	f7ff ffaa 	bl	810bb38 <__hexdig_fun>
 810bbe4:	2800      	cmp	r0, #0
 810bbe6:	d1f8      	bne.n	810bbda <__gethex+0x76>
 810bbe8:	4994      	ldr	r1, [pc, #592]	; (810be3c <__gethex+0x2d8>)
 810bbea:	2201      	movs	r2, #1
 810bbec:	4628      	mov	r0, r5
 810bbee:	f7ff f827 	bl	810ac40 <strncmp>
 810bbf2:	b978      	cbnz	r0, 810bc14 <__gethex+0xb0>
 810bbf4:	b946      	cbnz	r6, 810bc08 <__gethex+0xa4>
 810bbf6:	1c6e      	adds	r6, r5, #1
 810bbf8:	4632      	mov	r2, r6
 810bbfa:	4615      	mov	r5, r2
 810bbfc:	3201      	adds	r2, #1
 810bbfe:	7828      	ldrb	r0, [r5, #0]
 810bc00:	f7ff ff9a 	bl	810bb38 <__hexdig_fun>
 810bc04:	2800      	cmp	r0, #0
 810bc06:	d1f8      	bne.n	810bbfa <__gethex+0x96>
 810bc08:	1b73      	subs	r3, r6, r5
 810bc0a:	009e      	lsls	r6, r3, #2
 810bc0c:	e004      	b.n	810bc18 <__gethex+0xb4>
 810bc0e:	2400      	movs	r4, #0
 810bc10:	4626      	mov	r6, r4
 810bc12:	e7e1      	b.n	810bbd8 <__gethex+0x74>
 810bc14:	2e00      	cmp	r6, #0
 810bc16:	d1f7      	bne.n	810bc08 <__gethex+0xa4>
 810bc18:	782b      	ldrb	r3, [r5, #0]
 810bc1a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 810bc1e:	2b50      	cmp	r3, #80	; 0x50
 810bc20:	d13d      	bne.n	810bc9e <__gethex+0x13a>
 810bc22:	786b      	ldrb	r3, [r5, #1]
 810bc24:	2b2b      	cmp	r3, #43	; 0x2b
 810bc26:	d02f      	beq.n	810bc88 <__gethex+0x124>
 810bc28:	2b2d      	cmp	r3, #45	; 0x2d
 810bc2a:	d031      	beq.n	810bc90 <__gethex+0x12c>
 810bc2c:	1c69      	adds	r1, r5, #1
 810bc2e:	f04f 0b00 	mov.w	fp, #0
 810bc32:	7808      	ldrb	r0, [r1, #0]
 810bc34:	f7ff ff80 	bl	810bb38 <__hexdig_fun>
 810bc38:	1e42      	subs	r2, r0, #1
 810bc3a:	b2d2      	uxtb	r2, r2
 810bc3c:	2a18      	cmp	r2, #24
 810bc3e:	d82e      	bhi.n	810bc9e <__gethex+0x13a>
 810bc40:	f1a0 0210 	sub.w	r2, r0, #16
 810bc44:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 810bc48:	f7ff ff76 	bl	810bb38 <__hexdig_fun>
 810bc4c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 810bc50:	fa5f fc8c 	uxtb.w	ip, ip
 810bc54:	f1bc 0f18 	cmp.w	ip, #24
 810bc58:	d91d      	bls.n	810bc96 <__gethex+0x132>
 810bc5a:	f1bb 0f00 	cmp.w	fp, #0
 810bc5e:	d000      	beq.n	810bc62 <__gethex+0xfe>
 810bc60:	4252      	negs	r2, r2
 810bc62:	4416      	add	r6, r2
 810bc64:	f8ca 1000 	str.w	r1, [sl]
 810bc68:	b1dc      	cbz	r4, 810bca2 <__gethex+0x13e>
 810bc6a:	9b01      	ldr	r3, [sp, #4]
 810bc6c:	2b00      	cmp	r3, #0
 810bc6e:	bf14      	ite	ne
 810bc70:	f04f 0800 	movne.w	r8, #0
 810bc74:	f04f 0806 	moveq.w	r8, #6
 810bc78:	4640      	mov	r0, r8
 810bc7a:	b005      	add	sp, #20
 810bc7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810bc80:	4645      	mov	r5, r8
 810bc82:	4626      	mov	r6, r4
 810bc84:	2401      	movs	r4, #1
 810bc86:	e7c7      	b.n	810bc18 <__gethex+0xb4>
 810bc88:	f04f 0b00 	mov.w	fp, #0
 810bc8c:	1ca9      	adds	r1, r5, #2
 810bc8e:	e7d0      	b.n	810bc32 <__gethex+0xce>
 810bc90:	f04f 0b01 	mov.w	fp, #1
 810bc94:	e7fa      	b.n	810bc8c <__gethex+0x128>
 810bc96:	230a      	movs	r3, #10
 810bc98:	fb03 0002 	mla	r0, r3, r2, r0
 810bc9c:	e7d0      	b.n	810bc40 <__gethex+0xdc>
 810bc9e:	4629      	mov	r1, r5
 810bca0:	e7e0      	b.n	810bc64 <__gethex+0x100>
 810bca2:	eba5 0308 	sub.w	r3, r5, r8
 810bca6:	3b01      	subs	r3, #1
 810bca8:	4621      	mov	r1, r4
 810bcaa:	2b07      	cmp	r3, #7
 810bcac:	dc0a      	bgt.n	810bcc4 <__gethex+0x160>
 810bcae:	4648      	mov	r0, r9
 810bcb0:	f000 fd14 	bl	810c6dc <_Balloc>
 810bcb4:	4604      	mov	r4, r0
 810bcb6:	b940      	cbnz	r0, 810bcca <__gethex+0x166>
 810bcb8:	4b61      	ldr	r3, [pc, #388]	; (810be40 <__gethex+0x2dc>)
 810bcba:	4602      	mov	r2, r0
 810bcbc:	21e4      	movs	r1, #228	; 0xe4
 810bcbe:	4861      	ldr	r0, [pc, #388]	; (810be44 <__gethex+0x2e0>)
 810bcc0:	f7ff f850 	bl	810ad64 <__assert_func>
 810bcc4:	3101      	adds	r1, #1
 810bcc6:	105b      	asrs	r3, r3, #1
 810bcc8:	e7ef      	b.n	810bcaa <__gethex+0x146>
 810bcca:	f100 0a14 	add.w	sl, r0, #20
 810bcce:	2300      	movs	r3, #0
 810bcd0:	495a      	ldr	r1, [pc, #360]	; (810be3c <__gethex+0x2d8>)
 810bcd2:	f8cd a004 	str.w	sl, [sp, #4]
 810bcd6:	469b      	mov	fp, r3
 810bcd8:	45a8      	cmp	r8, r5
 810bcda:	d342      	bcc.n	810bd62 <__gethex+0x1fe>
 810bcdc:	9801      	ldr	r0, [sp, #4]
 810bcde:	f840 bb04 	str.w	fp, [r0], #4
 810bce2:	eba0 000a 	sub.w	r0, r0, sl
 810bce6:	1080      	asrs	r0, r0, #2
 810bce8:	6120      	str	r0, [r4, #16]
 810bcea:	ea4f 1840 	mov.w	r8, r0, lsl #5
 810bcee:	4658      	mov	r0, fp
 810bcf0:	f000 fde6 	bl	810c8c0 <__hi0bits>
 810bcf4:	683d      	ldr	r5, [r7, #0]
 810bcf6:	eba8 0000 	sub.w	r0, r8, r0
 810bcfa:	42a8      	cmp	r0, r5
 810bcfc:	dd59      	ble.n	810bdb2 <__gethex+0x24e>
 810bcfe:	eba0 0805 	sub.w	r8, r0, r5
 810bd02:	4641      	mov	r1, r8
 810bd04:	4620      	mov	r0, r4
 810bd06:	f001 f975 	bl	810cff4 <__any_on>
 810bd0a:	4683      	mov	fp, r0
 810bd0c:	b1b8      	cbz	r0, 810bd3e <__gethex+0x1da>
 810bd0e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 810bd12:	1159      	asrs	r1, r3, #5
 810bd14:	f003 021f 	and.w	r2, r3, #31
 810bd18:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 810bd1c:	f04f 0b01 	mov.w	fp, #1
 810bd20:	fa0b f202 	lsl.w	r2, fp, r2
 810bd24:	420a      	tst	r2, r1
 810bd26:	d00a      	beq.n	810bd3e <__gethex+0x1da>
 810bd28:	455b      	cmp	r3, fp
 810bd2a:	dd06      	ble.n	810bd3a <__gethex+0x1d6>
 810bd2c:	f1a8 0102 	sub.w	r1, r8, #2
 810bd30:	4620      	mov	r0, r4
 810bd32:	f001 f95f 	bl	810cff4 <__any_on>
 810bd36:	2800      	cmp	r0, #0
 810bd38:	d138      	bne.n	810bdac <__gethex+0x248>
 810bd3a:	f04f 0b02 	mov.w	fp, #2
 810bd3e:	4641      	mov	r1, r8
 810bd40:	4620      	mov	r0, r4
 810bd42:	f7ff fea7 	bl	810ba94 <rshift>
 810bd46:	4446      	add	r6, r8
 810bd48:	68bb      	ldr	r3, [r7, #8]
 810bd4a:	42b3      	cmp	r3, r6
 810bd4c:	da41      	bge.n	810bdd2 <__gethex+0x26e>
 810bd4e:	4621      	mov	r1, r4
 810bd50:	4648      	mov	r0, r9
 810bd52:	f000 fd03 	bl	810c75c <_Bfree>
 810bd56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810bd58:	2300      	movs	r3, #0
 810bd5a:	6013      	str	r3, [r2, #0]
 810bd5c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 810bd60:	e78a      	b.n	810bc78 <__gethex+0x114>
 810bd62:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 810bd66:	2a2e      	cmp	r2, #46	; 0x2e
 810bd68:	d014      	beq.n	810bd94 <__gethex+0x230>
 810bd6a:	2b20      	cmp	r3, #32
 810bd6c:	d106      	bne.n	810bd7c <__gethex+0x218>
 810bd6e:	9b01      	ldr	r3, [sp, #4]
 810bd70:	f843 bb04 	str.w	fp, [r3], #4
 810bd74:	f04f 0b00 	mov.w	fp, #0
 810bd78:	9301      	str	r3, [sp, #4]
 810bd7a:	465b      	mov	r3, fp
 810bd7c:	7828      	ldrb	r0, [r5, #0]
 810bd7e:	9303      	str	r3, [sp, #12]
 810bd80:	f7ff feda 	bl	810bb38 <__hexdig_fun>
 810bd84:	9b03      	ldr	r3, [sp, #12]
 810bd86:	f000 000f 	and.w	r0, r0, #15
 810bd8a:	4098      	lsls	r0, r3
 810bd8c:	ea4b 0b00 	orr.w	fp, fp, r0
 810bd90:	3304      	adds	r3, #4
 810bd92:	e7a1      	b.n	810bcd8 <__gethex+0x174>
 810bd94:	45a8      	cmp	r8, r5
 810bd96:	d8e8      	bhi.n	810bd6a <__gethex+0x206>
 810bd98:	2201      	movs	r2, #1
 810bd9a:	4628      	mov	r0, r5
 810bd9c:	9303      	str	r3, [sp, #12]
 810bd9e:	f7fe ff4f 	bl	810ac40 <strncmp>
 810bda2:	4926      	ldr	r1, [pc, #152]	; (810be3c <__gethex+0x2d8>)
 810bda4:	9b03      	ldr	r3, [sp, #12]
 810bda6:	2800      	cmp	r0, #0
 810bda8:	d1df      	bne.n	810bd6a <__gethex+0x206>
 810bdaa:	e795      	b.n	810bcd8 <__gethex+0x174>
 810bdac:	f04f 0b03 	mov.w	fp, #3
 810bdb0:	e7c5      	b.n	810bd3e <__gethex+0x1da>
 810bdb2:	da0b      	bge.n	810bdcc <__gethex+0x268>
 810bdb4:	eba5 0800 	sub.w	r8, r5, r0
 810bdb8:	4621      	mov	r1, r4
 810bdba:	4642      	mov	r2, r8
 810bdbc:	4648      	mov	r0, r9
 810bdbe:	f000 fee7 	bl	810cb90 <__lshift>
 810bdc2:	eba6 0608 	sub.w	r6, r6, r8
 810bdc6:	4604      	mov	r4, r0
 810bdc8:	f100 0a14 	add.w	sl, r0, #20
 810bdcc:	f04f 0b00 	mov.w	fp, #0
 810bdd0:	e7ba      	b.n	810bd48 <__gethex+0x1e4>
 810bdd2:	687b      	ldr	r3, [r7, #4]
 810bdd4:	42b3      	cmp	r3, r6
 810bdd6:	dd73      	ble.n	810bec0 <__gethex+0x35c>
 810bdd8:	1b9e      	subs	r6, r3, r6
 810bdda:	42b5      	cmp	r5, r6
 810bddc:	dc34      	bgt.n	810be48 <__gethex+0x2e4>
 810bdde:	68fb      	ldr	r3, [r7, #12]
 810bde0:	2b02      	cmp	r3, #2
 810bde2:	d023      	beq.n	810be2c <__gethex+0x2c8>
 810bde4:	2b03      	cmp	r3, #3
 810bde6:	d025      	beq.n	810be34 <__gethex+0x2d0>
 810bde8:	2b01      	cmp	r3, #1
 810bdea:	d115      	bne.n	810be18 <__gethex+0x2b4>
 810bdec:	42b5      	cmp	r5, r6
 810bdee:	d113      	bne.n	810be18 <__gethex+0x2b4>
 810bdf0:	2d01      	cmp	r5, #1
 810bdf2:	d10b      	bne.n	810be0c <__gethex+0x2a8>
 810bdf4:	9a02      	ldr	r2, [sp, #8]
 810bdf6:	687b      	ldr	r3, [r7, #4]
 810bdf8:	6013      	str	r3, [r2, #0]
 810bdfa:	2301      	movs	r3, #1
 810bdfc:	6123      	str	r3, [r4, #16]
 810bdfe:	f8ca 3000 	str.w	r3, [sl]
 810be02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810be04:	f04f 0862 	mov.w	r8, #98	; 0x62
 810be08:	601c      	str	r4, [r3, #0]
 810be0a:	e735      	b.n	810bc78 <__gethex+0x114>
 810be0c:	1e69      	subs	r1, r5, #1
 810be0e:	4620      	mov	r0, r4
 810be10:	f001 f8f0 	bl	810cff4 <__any_on>
 810be14:	2800      	cmp	r0, #0
 810be16:	d1ed      	bne.n	810bdf4 <__gethex+0x290>
 810be18:	4621      	mov	r1, r4
 810be1a:	4648      	mov	r0, r9
 810be1c:	f000 fc9e 	bl	810c75c <_Bfree>
 810be20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810be22:	2300      	movs	r3, #0
 810be24:	6013      	str	r3, [r2, #0]
 810be26:	f04f 0850 	mov.w	r8, #80	; 0x50
 810be2a:	e725      	b.n	810bc78 <__gethex+0x114>
 810be2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810be2e:	2b00      	cmp	r3, #0
 810be30:	d1f2      	bne.n	810be18 <__gethex+0x2b4>
 810be32:	e7df      	b.n	810bdf4 <__gethex+0x290>
 810be34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810be36:	2b00      	cmp	r3, #0
 810be38:	d1dc      	bne.n	810bdf4 <__gethex+0x290>
 810be3a:	e7ed      	b.n	810be18 <__gethex+0x2b4>
 810be3c:	0810e830 	.word	0x0810e830
 810be40:	0810ea32 	.word	0x0810ea32
 810be44:	0810ea43 	.word	0x0810ea43
 810be48:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 810be4c:	f1bb 0f00 	cmp.w	fp, #0
 810be50:	d133      	bne.n	810beba <__gethex+0x356>
 810be52:	f1b8 0f00 	cmp.w	r8, #0
 810be56:	d004      	beq.n	810be62 <__gethex+0x2fe>
 810be58:	4641      	mov	r1, r8
 810be5a:	4620      	mov	r0, r4
 810be5c:	f001 f8ca 	bl	810cff4 <__any_on>
 810be60:	4683      	mov	fp, r0
 810be62:	ea4f 1268 	mov.w	r2, r8, asr #5
 810be66:	2301      	movs	r3, #1
 810be68:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 810be6c:	f008 081f 	and.w	r8, r8, #31
 810be70:	fa03 f308 	lsl.w	r3, r3, r8
 810be74:	4213      	tst	r3, r2
 810be76:	4631      	mov	r1, r6
 810be78:	4620      	mov	r0, r4
 810be7a:	bf18      	it	ne
 810be7c:	f04b 0b02 	orrne.w	fp, fp, #2
 810be80:	1bad      	subs	r5, r5, r6
 810be82:	f7ff fe07 	bl	810ba94 <rshift>
 810be86:	687e      	ldr	r6, [r7, #4]
 810be88:	f04f 0802 	mov.w	r8, #2
 810be8c:	f1bb 0f00 	cmp.w	fp, #0
 810be90:	d04a      	beq.n	810bf28 <__gethex+0x3c4>
 810be92:	68fb      	ldr	r3, [r7, #12]
 810be94:	2b02      	cmp	r3, #2
 810be96:	d016      	beq.n	810bec6 <__gethex+0x362>
 810be98:	2b03      	cmp	r3, #3
 810be9a:	d018      	beq.n	810bece <__gethex+0x36a>
 810be9c:	2b01      	cmp	r3, #1
 810be9e:	d109      	bne.n	810beb4 <__gethex+0x350>
 810bea0:	f01b 0f02 	tst.w	fp, #2
 810bea4:	d006      	beq.n	810beb4 <__gethex+0x350>
 810bea6:	f8da 3000 	ldr.w	r3, [sl]
 810beaa:	ea4b 0b03 	orr.w	fp, fp, r3
 810beae:	f01b 0f01 	tst.w	fp, #1
 810beb2:	d10f      	bne.n	810bed4 <__gethex+0x370>
 810beb4:	f048 0810 	orr.w	r8, r8, #16
 810beb8:	e036      	b.n	810bf28 <__gethex+0x3c4>
 810beba:	f04f 0b01 	mov.w	fp, #1
 810bebe:	e7d0      	b.n	810be62 <__gethex+0x2fe>
 810bec0:	f04f 0801 	mov.w	r8, #1
 810bec4:	e7e2      	b.n	810be8c <__gethex+0x328>
 810bec6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810bec8:	f1c3 0301 	rsb	r3, r3, #1
 810becc:	930f      	str	r3, [sp, #60]	; 0x3c
 810bece:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810bed0:	2b00      	cmp	r3, #0
 810bed2:	d0ef      	beq.n	810beb4 <__gethex+0x350>
 810bed4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 810bed8:	f104 0214 	add.w	r2, r4, #20
 810bedc:	ea4f 038b 	mov.w	r3, fp, lsl #2
 810bee0:	9301      	str	r3, [sp, #4]
 810bee2:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 810bee6:	2300      	movs	r3, #0
 810bee8:	4694      	mov	ip, r2
 810beea:	f852 1b04 	ldr.w	r1, [r2], #4
 810beee:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 810bef2:	d01e      	beq.n	810bf32 <__gethex+0x3ce>
 810bef4:	3101      	adds	r1, #1
 810bef6:	f8cc 1000 	str.w	r1, [ip]
 810befa:	f1b8 0f02 	cmp.w	r8, #2
 810befe:	f104 0214 	add.w	r2, r4, #20
 810bf02:	d13d      	bne.n	810bf80 <__gethex+0x41c>
 810bf04:	683b      	ldr	r3, [r7, #0]
 810bf06:	3b01      	subs	r3, #1
 810bf08:	42ab      	cmp	r3, r5
 810bf0a:	d10b      	bne.n	810bf24 <__gethex+0x3c0>
 810bf0c:	1169      	asrs	r1, r5, #5
 810bf0e:	2301      	movs	r3, #1
 810bf10:	f005 051f 	and.w	r5, r5, #31
 810bf14:	fa03 f505 	lsl.w	r5, r3, r5
 810bf18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810bf1c:	421d      	tst	r5, r3
 810bf1e:	bf18      	it	ne
 810bf20:	f04f 0801 	movne.w	r8, #1
 810bf24:	f048 0820 	orr.w	r8, r8, #32
 810bf28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810bf2a:	601c      	str	r4, [r3, #0]
 810bf2c:	9b02      	ldr	r3, [sp, #8]
 810bf2e:	601e      	str	r6, [r3, #0]
 810bf30:	e6a2      	b.n	810bc78 <__gethex+0x114>
 810bf32:	4290      	cmp	r0, r2
 810bf34:	f842 3c04 	str.w	r3, [r2, #-4]
 810bf38:	d8d6      	bhi.n	810bee8 <__gethex+0x384>
 810bf3a:	68a2      	ldr	r2, [r4, #8]
 810bf3c:	4593      	cmp	fp, r2
 810bf3e:	db17      	blt.n	810bf70 <__gethex+0x40c>
 810bf40:	6861      	ldr	r1, [r4, #4]
 810bf42:	4648      	mov	r0, r9
 810bf44:	3101      	adds	r1, #1
 810bf46:	f000 fbc9 	bl	810c6dc <_Balloc>
 810bf4a:	4682      	mov	sl, r0
 810bf4c:	b918      	cbnz	r0, 810bf56 <__gethex+0x3f2>
 810bf4e:	4b1b      	ldr	r3, [pc, #108]	; (810bfbc <__gethex+0x458>)
 810bf50:	4602      	mov	r2, r0
 810bf52:	2184      	movs	r1, #132	; 0x84
 810bf54:	e6b3      	b.n	810bcbe <__gethex+0x15a>
 810bf56:	6922      	ldr	r2, [r4, #16]
 810bf58:	3202      	adds	r2, #2
 810bf5a:	f104 010c 	add.w	r1, r4, #12
 810bf5e:	0092      	lsls	r2, r2, #2
 810bf60:	300c      	adds	r0, #12
 810bf62:	f7fe fee3 	bl	810ad2c <memcpy>
 810bf66:	4621      	mov	r1, r4
 810bf68:	4648      	mov	r0, r9
 810bf6a:	f000 fbf7 	bl	810c75c <_Bfree>
 810bf6e:	4654      	mov	r4, sl
 810bf70:	6922      	ldr	r2, [r4, #16]
 810bf72:	1c51      	adds	r1, r2, #1
 810bf74:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 810bf78:	6121      	str	r1, [r4, #16]
 810bf7a:	2101      	movs	r1, #1
 810bf7c:	6151      	str	r1, [r2, #20]
 810bf7e:	e7bc      	b.n	810befa <__gethex+0x396>
 810bf80:	6921      	ldr	r1, [r4, #16]
 810bf82:	4559      	cmp	r1, fp
 810bf84:	dd0b      	ble.n	810bf9e <__gethex+0x43a>
 810bf86:	2101      	movs	r1, #1
 810bf88:	4620      	mov	r0, r4
 810bf8a:	f7ff fd83 	bl	810ba94 <rshift>
 810bf8e:	68bb      	ldr	r3, [r7, #8]
 810bf90:	3601      	adds	r6, #1
 810bf92:	42b3      	cmp	r3, r6
 810bf94:	f6ff aedb 	blt.w	810bd4e <__gethex+0x1ea>
 810bf98:	f04f 0801 	mov.w	r8, #1
 810bf9c:	e7c2      	b.n	810bf24 <__gethex+0x3c0>
 810bf9e:	f015 051f 	ands.w	r5, r5, #31
 810bfa2:	d0f9      	beq.n	810bf98 <__gethex+0x434>
 810bfa4:	9b01      	ldr	r3, [sp, #4]
 810bfa6:	441a      	add	r2, r3
 810bfa8:	f1c5 0520 	rsb	r5, r5, #32
 810bfac:	f852 0c04 	ldr.w	r0, [r2, #-4]
 810bfb0:	f000 fc86 	bl	810c8c0 <__hi0bits>
 810bfb4:	42a8      	cmp	r0, r5
 810bfb6:	dbe6      	blt.n	810bf86 <__gethex+0x422>
 810bfb8:	e7ee      	b.n	810bf98 <__gethex+0x434>
 810bfba:	bf00      	nop
 810bfbc:	0810ea32 	.word	0x0810ea32

0810bfc0 <L_shift>:
 810bfc0:	f1c2 0208 	rsb	r2, r2, #8
 810bfc4:	0092      	lsls	r2, r2, #2
 810bfc6:	b570      	push	{r4, r5, r6, lr}
 810bfc8:	f1c2 0620 	rsb	r6, r2, #32
 810bfcc:	6843      	ldr	r3, [r0, #4]
 810bfce:	6804      	ldr	r4, [r0, #0]
 810bfd0:	fa03 f506 	lsl.w	r5, r3, r6
 810bfd4:	432c      	orrs	r4, r5
 810bfd6:	40d3      	lsrs	r3, r2
 810bfd8:	6004      	str	r4, [r0, #0]
 810bfda:	f840 3f04 	str.w	r3, [r0, #4]!
 810bfde:	4288      	cmp	r0, r1
 810bfe0:	d3f4      	bcc.n	810bfcc <L_shift+0xc>
 810bfe2:	bd70      	pop	{r4, r5, r6, pc}

0810bfe4 <__match>:
 810bfe4:	b530      	push	{r4, r5, lr}
 810bfe6:	6803      	ldr	r3, [r0, #0]
 810bfe8:	3301      	adds	r3, #1
 810bfea:	f811 4b01 	ldrb.w	r4, [r1], #1
 810bfee:	b914      	cbnz	r4, 810bff6 <__match+0x12>
 810bff0:	6003      	str	r3, [r0, #0]
 810bff2:	2001      	movs	r0, #1
 810bff4:	bd30      	pop	{r4, r5, pc}
 810bff6:	f813 2b01 	ldrb.w	r2, [r3], #1
 810bffa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 810bffe:	2d19      	cmp	r5, #25
 810c000:	bf98      	it	ls
 810c002:	3220      	addls	r2, #32
 810c004:	42a2      	cmp	r2, r4
 810c006:	d0f0      	beq.n	810bfea <__match+0x6>
 810c008:	2000      	movs	r0, #0
 810c00a:	e7f3      	b.n	810bff4 <__match+0x10>

0810c00c <__hexnan>:
 810c00c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c010:	680b      	ldr	r3, [r1, #0]
 810c012:	6801      	ldr	r1, [r0, #0]
 810c014:	115e      	asrs	r6, r3, #5
 810c016:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 810c01a:	f013 031f 	ands.w	r3, r3, #31
 810c01e:	b087      	sub	sp, #28
 810c020:	bf18      	it	ne
 810c022:	3604      	addne	r6, #4
 810c024:	2500      	movs	r5, #0
 810c026:	1f37      	subs	r7, r6, #4
 810c028:	4682      	mov	sl, r0
 810c02a:	4690      	mov	r8, r2
 810c02c:	9301      	str	r3, [sp, #4]
 810c02e:	f846 5c04 	str.w	r5, [r6, #-4]
 810c032:	46b9      	mov	r9, r7
 810c034:	463c      	mov	r4, r7
 810c036:	9502      	str	r5, [sp, #8]
 810c038:	46ab      	mov	fp, r5
 810c03a:	784a      	ldrb	r2, [r1, #1]
 810c03c:	1c4b      	adds	r3, r1, #1
 810c03e:	9303      	str	r3, [sp, #12]
 810c040:	b342      	cbz	r2, 810c094 <__hexnan+0x88>
 810c042:	4610      	mov	r0, r2
 810c044:	9105      	str	r1, [sp, #20]
 810c046:	9204      	str	r2, [sp, #16]
 810c048:	f7ff fd76 	bl	810bb38 <__hexdig_fun>
 810c04c:	2800      	cmp	r0, #0
 810c04e:	d14f      	bne.n	810c0f0 <__hexnan+0xe4>
 810c050:	9a04      	ldr	r2, [sp, #16]
 810c052:	9905      	ldr	r1, [sp, #20]
 810c054:	2a20      	cmp	r2, #32
 810c056:	d818      	bhi.n	810c08a <__hexnan+0x7e>
 810c058:	9b02      	ldr	r3, [sp, #8]
 810c05a:	459b      	cmp	fp, r3
 810c05c:	dd13      	ble.n	810c086 <__hexnan+0x7a>
 810c05e:	454c      	cmp	r4, r9
 810c060:	d206      	bcs.n	810c070 <__hexnan+0x64>
 810c062:	2d07      	cmp	r5, #7
 810c064:	dc04      	bgt.n	810c070 <__hexnan+0x64>
 810c066:	462a      	mov	r2, r5
 810c068:	4649      	mov	r1, r9
 810c06a:	4620      	mov	r0, r4
 810c06c:	f7ff ffa8 	bl	810bfc0 <L_shift>
 810c070:	4544      	cmp	r4, r8
 810c072:	d950      	bls.n	810c116 <__hexnan+0x10a>
 810c074:	2300      	movs	r3, #0
 810c076:	f1a4 0904 	sub.w	r9, r4, #4
 810c07a:	f844 3c04 	str.w	r3, [r4, #-4]
 810c07e:	f8cd b008 	str.w	fp, [sp, #8]
 810c082:	464c      	mov	r4, r9
 810c084:	461d      	mov	r5, r3
 810c086:	9903      	ldr	r1, [sp, #12]
 810c088:	e7d7      	b.n	810c03a <__hexnan+0x2e>
 810c08a:	2a29      	cmp	r2, #41	; 0x29
 810c08c:	d155      	bne.n	810c13a <__hexnan+0x12e>
 810c08e:	3102      	adds	r1, #2
 810c090:	f8ca 1000 	str.w	r1, [sl]
 810c094:	f1bb 0f00 	cmp.w	fp, #0
 810c098:	d04f      	beq.n	810c13a <__hexnan+0x12e>
 810c09a:	454c      	cmp	r4, r9
 810c09c:	d206      	bcs.n	810c0ac <__hexnan+0xa0>
 810c09e:	2d07      	cmp	r5, #7
 810c0a0:	dc04      	bgt.n	810c0ac <__hexnan+0xa0>
 810c0a2:	462a      	mov	r2, r5
 810c0a4:	4649      	mov	r1, r9
 810c0a6:	4620      	mov	r0, r4
 810c0a8:	f7ff ff8a 	bl	810bfc0 <L_shift>
 810c0ac:	4544      	cmp	r4, r8
 810c0ae:	d934      	bls.n	810c11a <__hexnan+0x10e>
 810c0b0:	f1a8 0204 	sub.w	r2, r8, #4
 810c0b4:	4623      	mov	r3, r4
 810c0b6:	f853 1b04 	ldr.w	r1, [r3], #4
 810c0ba:	f842 1f04 	str.w	r1, [r2, #4]!
 810c0be:	429f      	cmp	r7, r3
 810c0c0:	d2f9      	bcs.n	810c0b6 <__hexnan+0xaa>
 810c0c2:	1b3b      	subs	r3, r7, r4
 810c0c4:	f023 0303 	bic.w	r3, r3, #3
 810c0c8:	3304      	adds	r3, #4
 810c0ca:	3e03      	subs	r6, #3
 810c0cc:	3401      	adds	r4, #1
 810c0ce:	42a6      	cmp	r6, r4
 810c0d0:	bf38      	it	cc
 810c0d2:	2304      	movcc	r3, #4
 810c0d4:	4443      	add	r3, r8
 810c0d6:	2200      	movs	r2, #0
 810c0d8:	f843 2b04 	str.w	r2, [r3], #4
 810c0dc:	429f      	cmp	r7, r3
 810c0de:	d2fb      	bcs.n	810c0d8 <__hexnan+0xcc>
 810c0e0:	683b      	ldr	r3, [r7, #0]
 810c0e2:	b91b      	cbnz	r3, 810c0ec <__hexnan+0xe0>
 810c0e4:	4547      	cmp	r7, r8
 810c0e6:	d126      	bne.n	810c136 <__hexnan+0x12a>
 810c0e8:	2301      	movs	r3, #1
 810c0ea:	603b      	str	r3, [r7, #0]
 810c0ec:	2005      	movs	r0, #5
 810c0ee:	e025      	b.n	810c13c <__hexnan+0x130>
 810c0f0:	3501      	adds	r5, #1
 810c0f2:	2d08      	cmp	r5, #8
 810c0f4:	f10b 0b01 	add.w	fp, fp, #1
 810c0f8:	dd06      	ble.n	810c108 <__hexnan+0xfc>
 810c0fa:	4544      	cmp	r4, r8
 810c0fc:	d9c3      	bls.n	810c086 <__hexnan+0x7a>
 810c0fe:	2300      	movs	r3, #0
 810c100:	f844 3c04 	str.w	r3, [r4, #-4]
 810c104:	2501      	movs	r5, #1
 810c106:	3c04      	subs	r4, #4
 810c108:	6822      	ldr	r2, [r4, #0]
 810c10a:	f000 000f 	and.w	r0, r0, #15
 810c10e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 810c112:	6020      	str	r0, [r4, #0]
 810c114:	e7b7      	b.n	810c086 <__hexnan+0x7a>
 810c116:	2508      	movs	r5, #8
 810c118:	e7b5      	b.n	810c086 <__hexnan+0x7a>
 810c11a:	9b01      	ldr	r3, [sp, #4]
 810c11c:	2b00      	cmp	r3, #0
 810c11e:	d0df      	beq.n	810c0e0 <__hexnan+0xd4>
 810c120:	f1c3 0320 	rsb	r3, r3, #32
 810c124:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810c128:	40da      	lsrs	r2, r3
 810c12a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 810c12e:	4013      	ands	r3, r2
 810c130:	f846 3c04 	str.w	r3, [r6, #-4]
 810c134:	e7d4      	b.n	810c0e0 <__hexnan+0xd4>
 810c136:	3f04      	subs	r7, #4
 810c138:	e7d2      	b.n	810c0e0 <__hexnan+0xd4>
 810c13a:	2004      	movs	r0, #4
 810c13c:	b007      	add	sp, #28
 810c13e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810c142 <__ssputs_r>:
 810c142:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810c146:	688e      	ldr	r6, [r1, #8]
 810c148:	461f      	mov	r7, r3
 810c14a:	42be      	cmp	r6, r7
 810c14c:	680b      	ldr	r3, [r1, #0]
 810c14e:	4682      	mov	sl, r0
 810c150:	460c      	mov	r4, r1
 810c152:	4690      	mov	r8, r2
 810c154:	d82c      	bhi.n	810c1b0 <__ssputs_r+0x6e>
 810c156:	898a      	ldrh	r2, [r1, #12]
 810c158:	f412 6f90 	tst.w	r2, #1152	; 0x480
 810c15c:	d026      	beq.n	810c1ac <__ssputs_r+0x6a>
 810c15e:	6965      	ldr	r5, [r4, #20]
 810c160:	6909      	ldr	r1, [r1, #16]
 810c162:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 810c166:	eba3 0901 	sub.w	r9, r3, r1
 810c16a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 810c16e:	1c7b      	adds	r3, r7, #1
 810c170:	444b      	add	r3, r9
 810c172:	106d      	asrs	r5, r5, #1
 810c174:	429d      	cmp	r5, r3
 810c176:	bf38      	it	cc
 810c178:	461d      	movcc	r5, r3
 810c17a:	0553      	lsls	r3, r2, #21
 810c17c:	d527      	bpl.n	810c1ce <__ssputs_r+0x8c>
 810c17e:	4629      	mov	r1, r5
 810c180:	f000 f960 	bl	810c444 <_malloc_r>
 810c184:	4606      	mov	r6, r0
 810c186:	b360      	cbz	r0, 810c1e2 <__ssputs_r+0xa0>
 810c188:	6921      	ldr	r1, [r4, #16]
 810c18a:	464a      	mov	r2, r9
 810c18c:	f7fe fdce 	bl	810ad2c <memcpy>
 810c190:	89a3      	ldrh	r3, [r4, #12]
 810c192:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 810c196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810c19a:	81a3      	strh	r3, [r4, #12]
 810c19c:	6126      	str	r6, [r4, #16]
 810c19e:	6165      	str	r5, [r4, #20]
 810c1a0:	444e      	add	r6, r9
 810c1a2:	eba5 0509 	sub.w	r5, r5, r9
 810c1a6:	6026      	str	r6, [r4, #0]
 810c1a8:	60a5      	str	r5, [r4, #8]
 810c1aa:	463e      	mov	r6, r7
 810c1ac:	42be      	cmp	r6, r7
 810c1ae:	d900      	bls.n	810c1b2 <__ssputs_r+0x70>
 810c1b0:	463e      	mov	r6, r7
 810c1b2:	6820      	ldr	r0, [r4, #0]
 810c1b4:	4632      	mov	r2, r6
 810c1b6:	4641      	mov	r1, r8
 810c1b8:	f000 ffce 	bl	810d158 <memmove>
 810c1bc:	68a3      	ldr	r3, [r4, #8]
 810c1be:	1b9b      	subs	r3, r3, r6
 810c1c0:	60a3      	str	r3, [r4, #8]
 810c1c2:	6823      	ldr	r3, [r4, #0]
 810c1c4:	4433      	add	r3, r6
 810c1c6:	6023      	str	r3, [r4, #0]
 810c1c8:	2000      	movs	r0, #0
 810c1ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810c1ce:	462a      	mov	r2, r5
 810c1d0:	f000 ff86 	bl	810d0e0 <_realloc_r>
 810c1d4:	4606      	mov	r6, r0
 810c1d6:	2800      	cmp	r0, #0
 810c1d8:	d1e0      	bne.n	810c19c <__ssputs_r+0x5a>
 810c1da:	6921      	ldr	r1, [r4, #16]
 810c1dc:	4650      	mov	r0, sl
 810c1de:	f001 f849 	bl	810d274 <_free_r>
 810c1e2:	230c      	movs	r3, #12
 810c1e4:	f8ca 3000 	str.w	r3, [sl]
 810c1e8:	89a3      	ldrh	r3, [r4, #12]
 810c1ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810c1ee:	81a3      	strh	r3, [r4, #12]
 810c1f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810c1f4:	e7e9      	b.n	810c1ca <__ssputs_r+0x88>
	...

0810c1f8 <_svfiprintf_r>:
 810c1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c1fc:	4698      	mov	r8, r3
 810c1fe:	898b      	ldrh	r3, [r1, #12]
 810c200:	061b      	lsls	r3, r3, #24
 810c202:	b09d      	sub	sp, #116	; 0x74
 810c204:	4607      	mov	r7, r0
 810c206:	460d      	mov	r5, r1
 810c208:	4614      	mov	r4, r2
 810c20a:	d50e      	bpl.n	810c22a <_svfiprintf_r+0x32>
 810c20c:	690b      	ldr	r3, [r1, #16]
 810c20e:	b963      	cbnz	r3, 810c22a <_svfiprintf_r+0x32>
 810c210:	2140      	movs	r1, #64	; 0x40
 810c212:	f000 f917 	bl	810c444 <_malloc_r>
 810c216:	6028      	str	r0, [r5, #0]
 810c218:	6128      	str	r0, [r5, #16]
 810c21a:	b920      	cbnz	r0, 810c226 <_svfiprintf_r+0x2e>
 810c21c:	230c      	movs	r3, #12
 810c21e:	603b      	str	r3, [r7, #0]
 810c220:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810c224:	e0d0      	b.n	810c3c8 <_svfiprintf_r+0x1d0>
 810c226:	2340      	movs	r3, #64	; 0x40
 810c228:	616b      	str	r3, [r5, #20]
 810c22a:	2300      	movs	r3, #0
 810c22c:	9309      	str	r3, [sp, #36]	; 0x24
 810c22e:	2320      	movs	r3, #32
 810c230:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810c234:	f8cd 800c 	str.w	r8, [sp, #12]
 810c238:	2330      	movs	r3, #48	; 0x30
 810c23a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 810c3e0 <_svfiprintf_r+0x1e8>
 810c23e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810c242:	f04f 0901 	mov.w	r9, #1
 810c246:	4623      	mov	r3, r4
 810c248:	469a      	mov	sl, r3
 810c24a:	f813 2b01 	ldrb.w	r2, [r3], #1
 810c24e:	b10a      	cbz	r2, 810c254 <_svfiprintf_r+0x5c>
 810c250:	2a25      	cmp	r2, #37	; 0x25
 810c252:	d1f9      	bne.n	810c248 <_svfiprintf_r+0x50>
 810c254:	ebba 0b04 	subs.w	fp, sl, r4
 810c258:	d00b      	beq.n	810c272 <_svfiprintf_r+0x7a>
 810c25a:	465b      	mov	r3, fp
 810c25c:	4622      	mov	r2, r4
 810c25e:	4629      	mov	r1, r5
 810c260:	4638      	mov	r0, r7
 810c262:	f7ff ff6e 	bl	810c142 <__ssputs_r>
 810c266:	3001      	adds	r0, #1
 810c268:	f000 80a9 	beq.w	810c3be <_svfiprintf_r+0x1c6>
 810c26c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810c26e:	445a      	add	r2, fp
 810c270:	9209      	str	r2, [sp, #36]	; 0x24
 810c272:	f89a 3000 	ldrb.w	r3, [sl]
 810c276:	2b00      	cmp	r3, #0
 810c278:	f000 80a1 	beq.w	810c3be <_svfiprintf_r+0x1c6>
 810c27c:	2300      	movs	r3, #0
 810c27e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810c282:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810c286:	f10a 0a01 	add.w	sl, sl, #1
 810c28a:	9304      	str	r3, [sp, #16]
 810c28c:	9307      	str	r3, [sp, #28]
 810c28e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810c292:	931a      	str	r3, [sp, #104]	; 0x68
 810c294:	4654      	mov	r4, sl
 810c296:	2205      	movs	r2, #5
 810c298:	f814 1b01 	ldrb.w	r1, [r4], #1
 810c29c:	4850      	ldr	r0, [pc, #320]	; (810c3e0 <_svfiprintf_r+0x1e8>)
 810c29e:	f7f4 f81f 	bl	81002e0 <memchr>
 810c2a2:	9a04      	ldr	r2, [sp, #16]
 810c2a4:	b9d8      	cbnz	r0, 810c2de <_svfiprintf_r+0xe6>
 810c2a6:	06d0      	lsls	r0, r2, #27
 810c2a8:	bf44      	itt	mi
 810c2aa:	2320      	movmi	r3, #32
 810c2ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810c2b0:	0711      	lsls	r1, r2, #28
 810c2b2:	bf44      	itt	mi
 810c2b4:	232b      	movmi	r3, #43	; 0x2b
 810c2b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810c2ba:	f89a 3000 	ldrb.w	r3, [sl]
 810c2be:	2b2a      	cmp	r3, #42	; 0x2a
 810c2c0:	d015      	beq.n	810c2ee <_svfiprintf_r+0xf6>
 810c2c2:	9a07      	ldr	r2, [sp, #28]
 810c2c4:	4654      	mov	r4, sl
 810c2c6:	2000      	movs	r0, #0
 810c2c8:	f04f 0c0a 	mov.w	ip, #10
 810c2cc:	4621      	mov	r1, r4
 810c2ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 810c2d2:	3b30      	subs	r3, #48	; 0x30
 810c2d4:	2b09      	cmp	r3, #9
 810c2d6:	d94d      	bls.n	810c374 <_svfiprintf_r+0x17c>
 810c2d8:	b1b0      	cbz	r0, 810c308 <_svfiprintf_r+0x110>
 810c2da:	9207      	str	r2, [sp, #28]
 810c2dc:	e014      	b.n	810c308 <_svfiprintf_r+0x110>
 810c2de:	eba0 0308 	sub.w	r3, r0, r8
 810c2e2:	fa09 f303 	lsl.w	r3, r9, r3
 810c2e6:	4313      	orrs	r3, r2
 810c2e8:	9304      	str	r3, [sp, #16]
 810c2ea:	46a2      	mov	sl, r4
 810c2ec:	e7d2      	b.n	810c294 <_svfiprintf_r+0x9c>
 810c2ee:	9b03      	ldr	r3, [sp, #12]
 810c2f0:	1d19      	adds	r1, r3, #4
 810c2f2:	681b      	ldr	r3, [r3, #0]
 810c2f4:	9103      	str	r1, [sp, #12]
 810c2f6:	2b00      	cmp	r3, #0
 810c2f8:	bfbb      	ittet	lt
 810c2fa:	425b      	neglt	r3, r3
 810c2fc:	f042 0202 	orrlt.w	r2, r2, #2
 810c300:	9307      	strge	r3, [sp, #28]
 810c302:	9307      	strlt	r3, [sp, #28]
 810c304:	bfb8      	it	lt
 810c306:	9204      	strlt	r2, [sp, #16]
 810c308:	7823      	ldrb	r3, [r4, #0]
 810c30a:	2b2e      	cmp	r3, #46	; 0x2e
 810c30c:	d10c      	bne.n	810c328 <_svfiprintf_r+0x130>
 810c30e:	7863      	ldrb	r3, [r4, #1]
 810c310:	2b2a      	cmp	r3, #42	; 0x2a
 810c312:	d134      	bne.n	810c37e <_svfiprintf_r+0x186>
 810c314:	9b03      	ldr	r3, [sp, #12]
 810c316:	1d1a      	adds	r2, r3, #4
 810c318:	681b      	ldr	r3, [r3, #0]
 810c31a:	9203      	str	r2, [sp, #12]
 810c31c:	2b00      	cmp	r3, #0
 810c31e:	bfb8      	it	lt
 810c320:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 810c324:	3402      	adds	r4, #2
 810c326:	9305      	str	r3, [sp, #20]
 810c328:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 810c3f0 <_svfiprintf_r+0x1f8>
 810c32c:	7821      	ldrb	r1, [r4, #0]
 810c32e:	2203      	movs	r2, #3
 810c330:	4650      	mov	r0, sl
 810c332:	f7f3 ffd5 	bl	81002e0 <memchr>
 810c336:	b138      	cbz	r0, 810c348 <_svfiprintf_r+0x150>
 810c338:	9b04      	ldr	r3, [sp, #16]
 810c33a:	eba0 000a 	sub.w	r0, r0, sl
 810c33e:	2240      	movs	r2, #64	; 0x40
 810c340:	4082      	lsls	r2, r0
 810c342:	4313      	orrs	r3, r2
 810c344:	3401      	adds	r4, #1
 810c346:	9304      	str	r3, [sp, #16]
 810c348:	f814 1b01 	ldrb.w	r1, [r4], #1
 810c34c:	4825      	ldr	r0, [pc, #148]	; (810c3e4 <_svfiprintf_r+0x1ec>)
 810c34e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810c352:	2206      	movs	r2, #6
 810c354:	f7f3 ffc4 	bl	81002e0 <memchr>
 810c358:	2800      	cmp	r0, #0
 810c35a:	d038      	beq.n	810c3ce <_svfiprintf_r+0x1d6>
 810c35c:	4b22      	ldr	r3, [pc, #136]	; (810c3e8 <_svfiprintf_r+0x1f0>)
 810c35e:	bb1b      	cbnz	r3, 810c3a8 <_svfiprintf_r+0x1b0>
 810c360:	9b03      	ldr	r3, [sp, #12]
 810c362:	3307      	adds	r3, #7
 810c364:	f023 0307 	bic.w	r3, r3, #7
 810c368:	3308      	adds	r3, #8
 810c36a:	9303      	str	r3, [sp, #12]
 810c36c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810c36e:	4433      	add	r3, r6
 810c370:	9309      	str	r3, [sp, #36]	; 0x24
 810c372:	e768      	b.n	810c246 <_svfiprintf_r+0x4e>
 810c374:	fb0c 3202 	mla	r2, ip, r2, r3
 810c378:	460c      	mov	r4, r1
 810c37a:	2001      	movs	r0, #1
 810c37c:	e7a6      	b.n	810c2cc <_svfiprintf_r+0xd4>
 810c37e:	2300      	movs	r3, #0
 810c380:	3401      	adds	r4, #1
 810c382:	9305      	str	r3, [sp, #20]
 810c384:	4619      	mov	r1, r3
 810c386:	f04f 0c0a 	mov.w	ip, #10
 810c38a:	4620      	mov	r0, r4
 810c38c:	f810 2b01 	ldrb.w	r2, [r0], #1
 810c390:	3a30      	subs	r2, #48	; 0x30
 810c392:	2a09      	cmp	r2, #9
 810c394:	d903      	bls.n	810c39e <_svfiprintf_r+0x1a6>
 810c396:	2b00      	cmp	r3, #0
 810c398:	d0c6      	beq.n	810c328 <_svfiprintf_r+0x130>
 810c39a:	9105      	str	r1, [sp, #20]
 810c39c:	e7c4      	b.n	810c328 <_svfiprintf_r+0x130>
 810c39e:	fb0c 2101 	mla	r1, ip, r1, r2
 810c3a2:	4604      	mov	r4, r0
 810c3a4:	2301      	movs	r3, #1
 810c3a6:	e7f0      	b.n	810c38a <_svfiprintf_r+0x192>
 810c3a8:	ab03      	add	r3, sp, #12
 810c3aa:	9300      	str	r3, [sp, #0]
 810c3ac:	462a      	mov	r2, r5
 810c3ae:	4b0f      	ldr	r3, [pc, #60]	; (810c3ec <_svfiprintf_r+0x1f4>)
 810c3b0:	a904      	add	r1, sp, #16
 810c3b2:	4638      	mov	r0, r7
 810c3b4:	f7fc fe9c 	bl	81090f0 <_printf_float>
 810c3b8:	1c42      	adds	r2, r0, #1
 810c3ba:	4606      	mov	r6, r0
 810c3bc:	d1d6      	bne.n	810c36c <_svfiprintf_r+0x174>
 810c3be:	89ab      	ldrh	r3, [r5, #12]
 810c3c0:	065b      	lsls	r3, r3, #25
 810c3c2:	f53f af2d 	bmi.w	810c220 <_svfiprintf_r+0x28>
 810c3c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 810c3c8:	b01d      	add	sp, #116	; 0x74
 810c3ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c3ce:	ab03      	add	r3, sp, #12
 810c3d0:	9300      	str	r3, [sp, #0]
 810c3d2:	462a      	mov	r2, r5
 810c3d4:	4b05      	ldr	r3, [pc, #20]	; (810c3ec <_svfiprintf_r+0x1f4>)
 810c3d6:	a904      	add	r1, sp, #16
 810c3d8:	4638      	mov	r0, r7
 810c3da:	f7fd f92d 	bl	8109638 <_printf_i>
 810c3de:	e7eb      	b.n	810c3b8 <_svfiprintf_r+0x1c0>
 810c3e0:	0810eaa3 	.word	0x0810eaa3
 810c3e4:	0810eaad 	.word	0x0810eaad
 810c3e8:	081090f1 	.word	0x081090f1
 810c3ec:	0810c143 	.word	0x0810c143
 810c3f0:	0810eaa9 	.word	0x0810eaa9

0810c3f4 <malloc>:
 810c3f4:	4b02      	ldr	r3, [pc, #8]	; (810c400 <malloc+0xc>)
 810c3f6:	4601      	mov	r1, r0
 810c3f8:	6818      	ldr	r0, [r3, #0]
 810c3fa:	f000 b823 	b.w	810c444 <_malloc_r>
 810c3fe:	bf00      	nop
 810c400:	100001d4 	.word	0x100001d4

0810c404 <sbrk_aligned>:
 810c404:	b570      	push	{r4, r5, r6, lr}
 810c406:	4e0e      	ldr	r6, [pc, #56]	; (810c440 <sbrk_aligned+0x3c>)
 810c408:	460c      	mov	r4, r1
 810c40a:	6831      	ldr	r1, [r6, #0]
 810c40c:	4605      	mov	r5, r0
 810c40e:	b911      	cbnz	r1, 810c416 <sbrk_aligned+0x12>
 810c410:	f000 fef0 	bl	810d1f4 <_sbrk_r>
 810c414:	6030      	str	r0, [r6, #0]
 810c416:	4621      	mov	r1, r4
 810c418:	4628      	mov	r0, r5
 810c41a:	f000 feeb 	bl	810d1f4 <_sbrk_r>
 810c41e:	1c43      	adds	r3, r0, #1
 810c420:	d00a      	beq.n	810c438 <sbrk_aligned+0x34>
 810c422:	1cc4      	adds	r4, r0, #3
 810c424:	f024 0403 	bic.w	r4, r4, #3
 810c428:	42a0      	cmp	r0, r4
 810c42a:	d007      	beq.n	810c43c <sbrk_aligned+0x38>
 810c42c:	1a21      	subs	r1, r4, r0
 810c42e:	4628      	mov	r0, r5
 810c430:	f000 fee0 	bl	810d1f4 <_sbrk_r>
 810c434:	3001      	adds	r0, #1
 810c436:	d101      	bne.n	810c43c <sbrk_aligned+0x38>
 810c438:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 810c43c:	4620      	mov	r0, r4
 810c43e:	bd70      	pop	{r4, r5, r6, pc}
 810c440:	100004bc 	.word	0x100004bc

0810c444 <_malloc_r>:
 810c444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810c448:	1ccd      	adds	r5, r1, #3
 810c44a:	f025 0503 	bic.w	r5, r5, #3
 810c44e:	3508      	adds	r5, #8
 810c450:	2d0c      	cmp	r5, #12
 810c452:	bf38      	it	cc
 810c454:	250c      	movcc	r5, #12
 810c456:	2d00      	cmp	r5, #0
 810c458:	4607      	mov	r7, r0
 810c45a:	db01      	blt.n	810c460 <_malloc_r+0x1c>
 810c45c:	42a9      	cmp	r1, r5
 810c45e:	d905      	bls.n	810c46c <_malloc_r+0x28>
 810c460:	230c      	movs	r3, #12
 810c462:	603b      	str	r3, [r7, #0]
 810c464:	2600      	movs	r6, #0
 810c466:	4630      	mov	r0, r6
 810c468:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810c46c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 810c540 <_malloc_r+0xfc>
 810c470:	f000 f928 	bl	810c6c4 <__malloc_lock>
 810c474:	f8d8 3000 	ldr.w	r3, [r8]
 810c478:	461c      	mov	r4, r3
 810c47a:	bb5c      	cbnz	r4, 810c4d4 <_malloc_r+0x90>
 810c47c:	4629      	mov	r1, r5
 810c47e:	4638      	mov	r0, r7
 810c480:	f7ff ffc0 	bl	810c404 <sbrk_aligned>
 810c484:	1c43      	adds	r3, r0, #1
 810c486:	4604      	mov	r4, r0
 810c488:	d155      	bne.n	810c536 <_malloc_r+0xf2>
 810c48a:	f8d8 4000 	ldr.w	r4, [r8]
 810c48e:	4626      	mov	r6, r4
 810c490:	2e00      	cmp	r6, #0
 810c492:	d145      	bne.n	810c520 <_malloc_r+0xdc>
 810c494:	2c00      	cmp	r4, #0
 810c496:	d048      	beq.n	810c52a <_malloc_r+0xe6>
 810c498:	6823      	ldr	r3, [r4, #0]
 810c49a:	4631      	mov	r1, r6
 810c49c:	4638      	mov	r0, r7
 810c49e:	eb04 0903 	add.w	r9, r4, r3
 810c4a2:	f000 fea7 	bl	810d1f4 <_sbrk_r>
 810c4a6:	4581      	cmp	r9, r0
 810c4a8:	d13f      	bne.n	810c52a <_malloc_r+0xe6>
 810c4aa:	6821      	ldr	r1, [r4, #0]
 810c4ac:	1a6d      	subs	r5, r5, r1
 810c4ae:	4629      	mov	r1, r5
 810c4b0:	4638      	mov	r0, r7
 810c4b2:	f7ff ffa7 	bl	810c404 <sbrk_aligned>
 810c4b6:	3001      	adds	r0, #1
 810c4b8:	d037      	beq.n	810c52a <_malloc_r+0xe6>
 810c4ba:	6823      	ldr	r3, [r4, #0]
 810c4bc:	442b      	add	r3, r5
 810c4be:	6023      	str	r3, [r4, #0]
 810c4c0:	f8d8 3000 	ldr.w	r3, [r8]
 810c4c4:	2b00      	cmp	r3, #0
 810c4c6:	d038      	beq.n	810c53a <_malloc_r+0xf6>
 810c4c8:	685a      	ldr	r2, [r3, #4]
 810c4ca:	42a2      	cmp	r2, r4
 810c4cc:	d12b      	bne.n	810c526 <_malloc_r+0xe2>
 810c4ce:	2200      	movs	r2, #0
 810c4d0:	605a      	str	r2, [r3, #4]
 810c4d2:	e00f      	b.n	810c4f4 <_malloc_r+0xb0>
 810c4d4:	6822      	ldr	r2, [r4, #0]
 810c4d6:	1b52      	subs	r2, r2, r5
 810c4d8:	d41f      	bmi.n	810c51a <_malloc_r+0xd6>
 810c4da:	2a0b      	cmp	r2, #11
 810c4dc:	d917      	bls.n	810c50e <_malloc_r+0xca>
 810c4de:	1961      	adds	r1, r4, r5
 810c4e0:	42a3      	cmp	r3, r4
 810c4e2:	6025      	str	r5, [r4, #0]
 810c4e4:	bf18      	it	ne
 810c4e6:	6059      	strne	r1, [r3, #4]
 810c4e8:	6863      	ldr	r3, [r4, #4]
 810c4ea:	bf08      	it	eq
 810c4ec:	f8c8 1000 	streq.w	r1, [r8]
 810c4f0:	5162      	str	r2, [r4, r5]
 810c4f2:	604b      	str	r3, [r1, #4]
 810c4f4:	4638      	mov	r0, r7
 810c4f6:	f104 060b 	add.w	r6, r4, #11
 810c4fa:	f000 f8e9 	bl	810c6d0 <__malloc_unlock>
 810c4fe:	f026 0607 	bic.w	r6, r6, #7
 810c502:	1d23      	adds	r3, r4, #4
 810c504:	1af2      	subs	r2, r6, r3
 810c506:	d0ae      	beq.n	810c466 <_malloc_r+0x22>
 810c508:	1b9b      	subs	r3, r3, r6
 810c50a:	50a3      	str	r3, [r4, r2]
 810c50c:	e7ab      	b.n	810c466 <_malloc_r+0x22>
 810c50e:	42a3      	cmp	r3, r4
 810c510:	6862      	ldr	r2, [r4, #4]
 810c512:	d1dd      	bne.n	810c4d0 <_malloc_r+0x8c>
 810c514:	f8c8 2000 	str.w	r2, [r8]
 810c518:	e7ec      	b.n	810c4f4 <_malloc_r+0xb0>
 810c51a:	4623      	mov	r3, r4
 810c51c:	6864      	ldr	r4, [r4, #4]
 810c51e:	e7ac      	b.n	810c47a <_malloc_r+0x36>
 810c520:	4634      	mov	r4, r6
 810c522:	6876      	ldr	r6, [r6, #4]
 810c524:	e7b4      	b.n	810c490 <_malloc_r+0x4c>
 810c526:	4613      	mov	r3, r2
 810c528:	e7cc      	b.n	810c4c4 <_malloc_r+0x80>
 810c52a:	230c      	movs	r3, #12
 810c52c:	603b      	str	r3, [r7, #0]
 810c52e:	4638      	mov	r0, r7
 810c530:	f000 f8ce 	bl	810c6d0 <__malloc_unlock>
 810c534:	e797      	b.n	810c466 <_malloc_r+0x22>
 810c536:	6025      	str	r5, [r4, #0]
 810c538:	e7dc      	b.n	810c4f4 <_malloc_r+0xb0>
 810c53a:	605b      	str	r3, [r3, #4]
 810c53c:	deff      	udf	#255	; 0xff
 810c53e:	bf00      	nop
 810c540:	100004b8 	.word	0x100004b8

0810c544 <__ascii_mbtowc>:
 810c544:	b082      	sub	sp, #8
 810c546:	b901      	cbnz	r1, 810c54a <__ascii_mbtowc+0x6>
 810c548:	a901      	add	r1, sp, #4
 810c54a:	b142      	cbz	r2, 810c55e <__ascii_mbtowc+0x1a>
 810c54c:	b14b      	cbz	r3, 810c562 <__ascii_mbtowc+0x1e>
 810c54e:	7813      	ldrb	r3, [r2, #0]
 810c550:	600b      	str	r3, [r1, #0]
 810c552:	7812      	ldrb	r2, [r2, #0]
 810c554:	1e10      	subs	r0, r2, #0
 810c556:	bf18      	it	ne
 810c558:	2001      	movne	r0, #1
 810c55a:	b002      	add	sp, #8
 810c55c:	4770      	bx	lr
 810c55e:	4610      	mov	r0, r2
 810c560:	e7fb      	b.n	810c55a <__ascii_mbtowc+0x16>
 810c562:	f06f 0001 	mvn.w	r0, #1
 810c566:	e7f8      	b.n	810c55a <__ascii_mbtowc+0x16>

0810c568 <__sflush_r>:
 810c568:	898a      	ldrh	r2, [r1, #12]
 810c56a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810c56e:	4605      	mov	r5, r0
 810c570:	0710      	lsls	r0, r2, #28
 810c572:	460c      	mov	r4, r1
 810c574:	d458      	bmi.n	810c628 <__sflush_r+0xc0>
 810c576:	684b      	ldr	r3, [r1, #4]
 810c578:	2b00      	cmp	r3, #0
 810c57a:	dc05      	bgt.n	810c588 <__sflush_r+0x20>
 810c57c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 810c57e:	2b00      	cmp	r3, #0
 810c580:	dc02      	bgt.n	810c588 <__sflush_r+0x20>
 810c582:	2000      	movs	r0, #0
 810c584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810c588:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810c58a:	2e00      	cmp	r6, #0
 810c58c:	d0f9      	beq.n	810c582 <__sflush_r+0x1a>
 810c58e:	2300      	movs	r3, #0
 810c590:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 810c594:	682f      	ldr	r7, [r5, #0]
 810c596:	6a21      	ldr	r1, [r4, #32]
 810c598:	602b      	str	r3, [r5, #0]
 810c59a:	d032      	beq.n	810c602 <__sflush_r+0x9a>
 810c59c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 810c59e:	89a3      	ldrh	r3, [r4, #12]
 810c5a0:	075a      	lsls	r2, r3, #29
 810c5a2:	d505      	bpl.n	810c5b0 <__sflush_r+0x48>
 810c5a4:	6863      	ldr	r3, [r4, #4]
 810c5a6:	1ac0      	subs	r0, r0, r3
 810c5a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 810c5aa:	b10b      	cbz	r3, 810c5b0 <__sflush_r+0x48>
 810c5ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 810c5ae:	1ac0      	subs	r0, r0, r3
 810c5b0:	2300      	movs	r3, #0
 810c5b2:	4602      	mov	r2, r0
 810c5b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810c5b6:	6a21      	ldr	r1, [r4, #32]
 810c5b8:	4628      	mov	r0, r5
 810c5ba:	47b0      	blx	r6
 810c5bc:	1c43      	adds	r3, r0, #1
 810c5be:	89a3      	ldrh	r3, [r4, #12]
 810c5c0:	d106      	bne.n	810c5d0 <__sflush_r+0x68>
 810c5c2:	6829      	ldr	r1, [r5, #0]
 810c5c4:	291d      	cmp	r1, #29
 810c5c6:	d82b      	bhi.n	810c620 <__sflush_r+0xb8>
 810c5c8:	4a29      	ldr	r2, [pc, #164]	; (810c670 <__sflush_r+0x108>)
 810c5ca:	410a      	asrs	r2, r1
 810c5cc:	07d6      	lsls	r6, r2, #31
 810c5ce:	d427      	bmi.n	810c620 <__sflush_r+0xb8>
 810c5d0:	2200      	movs	r2, #0
 810c5d2:	6062      	str	r2, [r4, #4]
 810c5d4:	04d9      	lsls	r1, r3, #19
 810c5d6:	6922      	ldr	r2, [r4, #16]
 810c5d8:	6022      	str	r2, [r4, #0]
 810c5da:	d504      	bpl.n	810c5e6 <__sflush_r+0x7e>
 810c5dc:	1c42      	adds	r2, r0, #1
 810c5de:	d101      	bne.n	810c5e4 <__sflush_r+0x7c>
 810c5e0:	682b      	ldr	r3, [r5, #0]
 810c5e2:	b903      	cbnz	r3, 810c5e6 <__sflush_r+0x7e>
 810c5e4:	6560      	str	r0, [r4, #84]	; 0x54
 810c5e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810c5e8:	602f      	str	r7, [r5, #0]
 810c5ea:	2900      	cmp	r1, #0
 810c5ec:	d0c9      	beq.n	810c582 <__sflush_r+0x1a>
 810c5ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810c5f2:	4299      	cmp	r1, r3
 810c5f4:	d002      	beq.n	810c5fc <__sflush_r+0x94>
 810c5f6:	4628      	mov	r0, r5
 810c5f8:	f000 fe3c 	bl	810d274 <_free_r>
 810c5fc:	2000      	movs	r0, #0
 810c5fe:	6360      	str	r0, [r4, #52]	; 0x34
 810c600:	e7c0      	b.n	810c584 <__sflush_r+0x1c>
 810c602:	2301      	movs	r3, #1
 810c604:	4628      	mov	r0, r5
 810c606:	47b0      	blx	r6
 810c608:	1c41      	adds	r1, r0, #1
 810c60a:	d1c8      	bne.n	810c59e <__sflush_r+0x36>
 810c60c:	682b      	ldr	r3, [r5, #0]
 810c60e:	2b00      	cmp	r3, #0
 810c610:	d0c5      	beq.n	810c59e <__sflush_r+0x36>
 810c612:	2b1d      	cmp	r3, #29
 810c614:	d001      	beq.n	810c61a <__sflush_r+0xb2>
 810c616:	2b16      	cmp	r3, #22
 810c618:	d101      	bne.n	810c61e <__sflush_r+0xb6>
 810c61a:	602f      	str	r7, [r5, #0]
 810c61c:	e7b1      	b.n	810c582 <__sflush_r+0x1a>
 810c61e:	89a3      	ldrh	r3, [r4, #12]
 810c620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810c624:	81a3      	strh	r3, [r4, #12]
 810c626:	e7ad      	b.n	810c584 <__sflush_r+0x1c>
 810c628:	690f      	ldr	r7, [r1, #16]
 810c62a:	2f00      	cmp	r7, #0
 810c62c:	d0a9      	beq.n	810c582 <__sflush_r+0x1a>
 810c62e:	0793      	lsls	r3, r2, #30
 810c630:	680e      	ldr	r6, [r1, #0]
 810c632:	bf08      	it	eq
 810c634:	694b      	ldreq	r3, [r1, #20]
 810c636:	600f      	str	r7, [r1, #0]
 810c638:	bf18      	it	ne
 810c63a:	2300      	movne	r3, #0
 810c63c:	eba6 0807 	sub.w	r8, r6, r7
 810c640:	608b      	str	r3, [r1, #8]
 810c642:	f1b8 0f00 	cmp.w	r8, #0
 810c646:	dd9c      	ble.n	810c582 <__sflush_r+0x1a>
 810c648:	6a21      	ldr	r1, [r4, #32]
 810c64a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 810c64c:	4643      	mov	r3, r8
 810c64e:	463a      	mov	r2, r7
 810c650:	4628      	mov	r0, r5
 810c652:	47b0      	blx	r6
 810c654:	2800      	cmp	r0, #0
 810c656:	dc06      	bgt.n	810c666 <__sflush_r+0xfe>
 810c658:	89a3      	ldrh	r3, [r4, #12]
 810c65a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810c65e:	81a3      	strh	r3, [r4, #12]
 810c660:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810c664:	e78e      	b.n	810c584 <__sflush_r+0x1c>
 810c666:	4407      	add	r7, r0
 810c668:	eba8 0800 	sub.w	r8, r8, r0
 810c66c:	e7e9      	b.n	810c642 <__sflush_r+0xda>
 810c66e:	bf00      	nop
 810c670:	dfbffffe 	.word	0xdfbffffe

0810c674 <_fflush_r>:
 810c674:	b538      	push	{r3, r4, r5, lr}
 810c676:	690b      	ldr	r3, [r1, #16]
 810c678:	4605      	mov	r5, r0
 810c67a:	460c      	mov	r4, r1
 810c67c:	b913      	cbnz	r3, 810c684 <_fflush_r+0x10>
 810c67e:	2500      	movs	r5, #0
 810c680:	4628      	mov	r0, r5
 810c682:	bd38      	pop	{r3, r4, r5, pc}
 810c684:	b118      	cbz	r0, 810c68e <_fflush_r+0x1a>
 810c686:	6a03      	ldr	r3, [r0, #32]
 810c688:	b90b      	cbnz	r3, 810c68e <_fflush_r+0x1a>
 810c68a:	f7fd fc0d 	bl	8109ea8 <__sinit>
 810c68e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810c692:	2b00      	cmp	r3, #0
 810c694:	d0f3      	beq.n	810c67e <_fflush_r+0xa>
 810c696:	6e62      	ldr	r2, [r4, #100]	; 0x64
 810c698:	07d0      	lsls	r0, r2, #31
 810c69a:	d404      	bmi.n	810c6a6 <_fflush_r+0x32>
 810c69c:	0599      	lsls	r1, r3, #22
 810c69e:	d402      	bmi.n	810c6a6 <_fflush_r+0x32>
 810c6a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810c6a2:	f7fe fb41 	bl	810ad28 <__retarget_lock_acquire_recursive>
 810c6a6:	4628      	mov	r0, r5
 810c6a8:	4621      	mov	r1, r4
 810c6aa:	f7ff ff5d 	bl	810c568 <__sflush_r>
 810c6ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810c6b0:	07da      	lsls	r2, r3, #31
 810c6b2:	4605      	mov	r5, r0
 810c6b4:	d4e4      	bmi.n	810c680 <_fflush_r+0xc>
 810c6b6:	89a3      	ldrh	r3, [r4, #12]
 810c6b8:	059b      	lsls	r3, r3, #22
 810c6ba:	d4e1      	bmi.n	810c680 <_fflush_r+0xc>
 810c6bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810c6be:	f7fe fb34 	bl	810ad2a <__retarget_lock_release_recursive>
 810c6c2:	e7dd      	b.n	810c680 <_fflush_r+0xc>

0810c6c4 <__malloc_lock>:
 810c6c4:	4801      	ldr	r0, [pc, #4]	; (810c6cc <__malloc_lock+0x8>)
 810c6c6:	f7fe bb2f 	b.w	810ad28 <__retarget_lock_acquire_recursive>
 810c6ca:	bf00      	nop
 810c6cc:	100004b4 	.word	0x100004b4

0810c6d0 <__malloc_unlock>:
 810c6d0:	4801      	ldr	r0, [pc, #4]	; (810c6d8 <__malloc_unlock+0x8>)
 810c6d2:	f7fe bb2a 	b.w	810ad2a <__retarget_lock_release_recursive>
 810c6d6:	bf00      	nop
 810c6d8:	100004b4 	.word	0x100004b4

0810c6dc <_Balloc>:
 810c6dc:	b570      	push	{r4, r5, r6, lr}
 810c6de:	69c6      	ldr	r6, [r0, #28]
 810c6e0:	4604      	mov	r4, r0
 810c6e2:	460d      	mov	r5, r1
 810c6e4:	b976      	cbnz	r6, 810c704 <_Balloc+0x28>
 810c6e6:	2010      	movs	r0, #16
 810c6e8:	f7ff fe84 	bl	810c3f4 <malloc>
 810c6ec:	4602      	mov	r2, r0
 810c6ee:	61e0      	str	r0, [r4, #28]
 810c6f0:	b920      	cbnz	r0, 810c6fc <_Balloc+0x20>
 810c6f2:	4b18      	ldr	r3, [pc, #96]	; (810c754 <_Balloc+0x78>)
 810c6f4:	4818      	ldr	r0, [pc, #96]	; (810c758 <_Balloc+0x7c>)
 810c6f6:	216b      	movs	r1, #107	; 0x6b
 810c6f8:	f7fe fb34 	bl	810ad64 <__assert_func>
 810c6fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810c700:	6006      	str	r6, [r0, #0]
 810c702:	60c6      	str	r6, [r0, #12]
 810c704:	69e6      	ldr	r6, [r4, #28]
 810c706:	68f3      	ldr	r3, [r6, #12]
 810c708:	b183      	cbz	r3, 810c72c <_Balloc+0x50>
 810c70a:	69e3      	ldr	r3, [r4, #28]
 810c70c:	68db      	ldr	r3, [r3, #12]
 810c70e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 810c712:	b9b8      	cbnz	r0, 810c744 <_Balloc+0x68>
 810c714:	2101      	movs	r1, #1
 810c716:	fa01 f605 	lsl.w	r6, r1, r5
 810c71a:	1d72      	adds	r2, r6, #5
 810c71c:	0092      	lsls	r2, r2, #2
 810c71e:	4620      	mov	r0, r4
 810c720:	f000 fd91 	bl	810d246 <_calloc_r>
 810c724:	b160      	cbz	r0, 810c740 <_Balloc+0x64>
 810c726:	e9c0 5601 	strd	r5, r6, [r0, #4]
 810c72a:	e00e      	b.n	810c74a <_Balloc+0x6e>
 810c72c:	2221      	movs	r2, #33	; 0x21
 810c72e:	2104      	movs	r1, #4
 810c730:	4620      	mov	r0, r4
 810c732:	f000 fd88 	bl	810d246 <_calloc_r>
 810c736:	69e3      	ldr	r3, [r4, #28]
 810c738:	60f0      	str	r0, [r6, #12]
 810c73a:	68db      	ldr	r3, [r3, #12]
 810c73c:	2b00      	cmp	r3, #0
 810c73e:	d1e4      	bne.n	810c70a <_Balloc+0x2e>
 810c740:	2000      	movs	r0, #0
 810c742:	bd70      	pop	{r4, r5, r6, pc}
 810c744:	6802      	ldr	r2, [r0, #0]
 810c746:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 810c74a:	2300      	movs	r3, #0
 810c74c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 810c750:	e7f7      	b.n	810c742 <_Balloc+0x66>
 810c752:	bf00      	nop
 810c754:	0810e7c1 	.word	0x0810e7c1
 810c758:	0810eab4 	.word	0x0810eab4

0810c75c <_Bfree>:
 810c75c:	b570      	push	{r4, r5, r6, lr}
 810c75e:	69c6      	ldr	r6, [r0, #28]
 810c760:	4605      	mov	r5, r0
 810c762:	460c      	mov	r4, r1
 810c764:	b976      	cbnz	r6, 810c784 <_Bfree+0x28>
 810c766:	2010      	movs	r0, #16
 810c768:	f7ff fe44 	bl	810c3f4 <malloc>
 810c76c:	4602      	mov	r2, r0
 810c76e:	61e8      	str	r0, [r5, #28]
 810c770:	b920      	cbnz	r0, 810c77c <_Bfree+0x20>
 810c772:	4b09      	ldr	r3, [pc, #36]	; (810c798 <_Bfree+0x3c>)
 810c774:	4809      	ldr	r0, [pc, #36]	; (810c79c <_Bfree+0x40>)
 810c776:	218f      	movs	r1, #143	; 0x8f
 810c778:	f7fe faf4 	bl	810ad64 <__assert_func>
 810c77c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810c780:	6006      	str	r6, [r0, #0]
 810c782:	60c6      	str	r6, [r0, #12]
 810c784:	b13c      	cbz	r4, 810c796 <_Bfree+0x3a>
 810c786:	69eb      	ldr	r3, [r5, #28]
 810c788:	6862      	ldr	r2, [r4, #4]
 810c78a:	68db      	ldr	r3, [r3, #12]
 810c78c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 810c790:	6021      	str	r1, [r4, #0]
 810c792:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 810c796:	bd70      	pop	{r4, r5, r6, pc}
 810c798:	0810e7c1 	.word	0x0810e7c1
 810c79c:	0810eab4 	.word	0x0810eab4

0810c7a0 <__multadd>:
 810c7a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810c7a4:	690d      	ldr	r5, [r1, #16]
 810c7a6:	4607      	mov	r7, r0
 810c7a8:	460c      	mov	r4, r1
 810c7aa:	461e      	mov	r6, r3
 810c7ac:	f101 0c14 	add.w	ip, r1, #20
 810c7b0:	2000      	movs	r0, #0
 810c7b2:	f8dc 3000 	ldr.w	r3, [ip]
 810c7b6:	b299      	uxth	r1, r3
 810c7b8:	fb02 6101 	mla	r1, r2, r1, r6
 810c7bc:	0c1e      	lsrs	r6, r3, #16
 810c7be:	0c0b      	lsrs	r3, r1, #16
 810c7c0:	fb02 3306 	mla	r3, r2, r6, r3
 810c7c4:	b289      	uxth	r1, r1
 810c7c6:	3001      	adds	r0, #1
 810c7c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 810c7cc:	4285      	cmp	r5, r0
 810c7ce:	f84c 1b04 	str.w	r1, [ip], #4
 810c7d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 810c7d6:	dcec      	bgt.n	810c7b2 <__multadd+0x12>
 810c7d8:	b30e      	cbz	r6, 810c81e <__multadd+0x7e>
 810c7da:	68a3      	ldr	r3, [r4, #8]
 810c7dc:	42ab      	cmp	r3, r5
 810c7de:	dc19      	bgt.n	810c814 <__multadd+0x74>
 810c7e0:	6861      	ldr	r1, [r4, #4]
 810c7e2:	4638      	mov	r0, r7
 810c7e4:	3101      	adds	r1, #1
 810c7e6:	f7ff ff79 	bl	810c6dc <_Balloc>
 810c7ea:	4680      	mov	r8, r0
 810c7ec:	b928      	cbnz	r0, 810c7fa <__multadd+0x5a>
 810c7ee:	4602      	mov	r2, r0
 810c7f0:	4b0c      	ldr	r3, [pc, #48]	; (810c824 <__multadd+0x84>)
 810c7f2:	480d      	ldr	r0, [pc, #52]	; (810c828 <__multadd+0x88>)
 810c7f4:	21ba      	movs	r1, #186	; 0xba
 810c7f6:	f7fe fab5 	bl	810ad64 <__assert_func>
 810c7fa:	6922      	ldr	r2, [r4, #16]
 810c7fc:	3202      	adds	r2, #2
 810c7fe:	f104 010c 	add.w	r1, r4, #12
 810c802:	0092      	lsls	r2, r2, #2
 810c804:	300c      	adds	r0, #12
 810c806:	f7fe fa91 	bl	810ad2c <memcpy>
 810c80a:	4621      	mov	r1, r4
 810c80c:	4638      	mov	r0, r7
 810c80e:	f7ff ffa5 	bl	810c75c <_Bfree>
 810c812:	4644      	mov	r4, r8
 810c814:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 810c818:	3501      	adds	r5, #1
 810c81a:	615e      	str	r6, [r3, #20]
 810c81c:	6125      	str	r5, [r4, #16]
 810c81e:	4620      	mov	r0, r4
 810c820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810c824:	0810ea32 	.word	0x0810ea32
 810c828:	0810eab4 	.word	0x0810eab4

0810c82c <__s2b>:
 810c82c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810c830:	460c      	mov	r4, r1
 810c832:	4615      	mov	r5, r2
 810c834:	461f      	mov	r7, r3
 810c836:	2209      	movs	r2, #9
 810c838:	3308      	adds	r3, #8
 810c83a:	4606      	mov	r6, r0
 810c83c:	fb93 f3f2 	sdiv	r3, r3, r2
 810c840:	2100      	movs	r1, #0
 810c842:	2201      	movs	r2, #1
 810c844:	429a      	cmp	r2, r3
 810c846:	db09      	blt.n	810c85c <__s2b+0x30>
 810c848:	4630      	mov	r0, r6
 810c84a:	f7ff ff47 	bl	810c6dc <_Balloc>
 810c84e:	b940      	cbnz	r0, 810c862 <__s2b+0x36>
 810c850:	4602      	mov	r2, r0
 810c852:	4b19      	ldr	r3, [pc, #100]	; (810c8b8 <__s2b+0x8c>)
 810c854:	4819      	ldr	r0, [pc, #100]	; (810c8bc <__s2b+0x90>)
 810c856:	21d3      	movs	r1, #211	; 0xd3
 810c858:	f7fe fa84 	bl	810ad64 <__assert_func>
 810c85c:	0052      	lsls	r2, r2, #1
 810c85e:	3101      	adds	r1, #1
 810c860:	e7f0      	b.n	810c844 <__s2b+0x18>
 810c862:	9b08      	ldr	r3, [sp, #32]
 810c864:	6143      	str	r3, [r0, #20]
 810c866:	2d09      	cmp	r5, #9
 810c868:	f04f 0301 	mov.w	r3, #1
 810c86c:	6103      	str	r3, [r0, #16]
 810c86e:	dd16      	ble.n	810c89e <__s2b+0x72>
 810c870:	f104 0909 	add.w	r9, r4, #9
 810c874:	46c8      	mov	r8, r9
 810c876:	442c      	add	r4, r5
 810c878:	f818 3b01 	ldrb.w	r3, [r8], #1
 810c87c:	4601      	mov	r1, r0
 810c87e:	3b30      	subs	r3, #48	; 0x30
 810c880:	220a      	movs	r2, #10
 810c882:	4630      	mov	r0, r6
 810c884:	f7ff ff8c 	bl	810c7a0 <__multadd>
 810c888:	45a0      	cmp	r8, r4
 810c88a:	d1f5      	bne.n	810c878 <__s2b+0x4c>
 810c88c:	f1a5 0408 	sub.w	r4, r5, #8
 810c890:	444c      	add	r4, r9
 810c892:	1b2d      	subs	r5, r5, r4
 810c894:	1963      	adds	r3, r4, r5
 810c896:	42bb      	cmp	r3, r7
 810c898:	db04      	blt.n	810c8a4 <__s2b+0x78>
 810c89a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810c89e:	340a      	adds	r4, #10
 810c8a0:	2509      	movs	r5, #9
 810c8a2:	e7f6      	b.n	810c892 <__s2b+0x66>
 810c8a4:	f814 3b01 	ldrb.w	r3, [r4], #1
 810c8a8:	4601      	mov	r1, r0
 810c8aa:	3b30      	subs	r3, #48	; 0x30
 810c8ac:	220a      	movs	r2, #10
 810c8ae:	4630      	mov	r0, r6
 810c8b0:	f7ff ff76 	bl	810c7a0 <__multadd>
 810c8b4:	e7ee      	b.n	810c894 <__s2b+0x68>
 810c8b6:	bf00      	nop
 810c8b8:	0810ea32 	.word	0x0810ea32
 810c8bc:	0810eab4 	.word	0x0810eab4

0810c8c0 <__hi0bits>:
 810c8c0:	0c03      	lsrs	r3, r0, #16
 810c8c2:	041b      	lsls	r3, r3, #16
 810c8c4:	b9d3      	cbnz	r3, 810c8fc <__hi0bits+0x3c>
 810c8c6:	0400      	lsls	r0, r0, #16
 810c8c8:	2310      	movs	r3, #16
 810c8ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 810c8ce:	bf04      	itt	eq
 810c8d0:	0200      	lsleq	r0, r0, #8
 810c8d2:	3308      	addeq	r3, #8
 810c8d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 810c8d8:	bf04      	itt	eq
 810c8da:	0100      	lsleq	r0, r0, #4
 810c8dc:	3304      	addeq	r3, #4
 810c8de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 810c8e2:	bf04      	itt	eq
 810c8e4:	0080      	lsleq	r0, r0, #2
 810c8e6:	3302      	addeq	r3, #2
 810c8e8:	2800      	cmp	r0, #0
 810c8ea:	db05      	blt.n	810c8f8 <__hi0bits+0x38>
 810c8ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 810c8f0:	f103 0301 	add.w	r3, r3, #1
 810c8f4:	bf08      	it	eq
 810c8f6:	2320      	moveq	r3, #32
 810c8f8:	4618      	mov	r0, r3
 810c8fa:	4770      	bx	lr
 810c8fc:	2300      	movs	r3, #0
 810c8fe:	e7e4      	b.n	810c8ca <__hi0bits+0xa>

0810c900 <__lo0bits>:
 810c900:	6803      	ldr	r3, [r0, #0]
 810c902:	f013 0207 	ands.w	r2, r3, #7
 810c906:	d00c      	beq.n	810c922 <__lo0bits+0x22>
 810c908:	07d9      	lsls	r1, r3, #31
 810c90a:	d422      	bmi.n	810c952 <__lo0bits+0x52>
 810c90c:	079a      	lsls	r2, r3, #30
 810c90e:	bf49      	itett	mi
 810c910:	085b      	lsrmi	r3, r3, #1
 810c912:	089b      	lsrpl	r3, r3, #2
 810c914:	6003      	strmi	r3, [r0, #0]
 810c916:	2201      	movmi	r2, #1
 810c918:	bf5c      	itt	pl
 810c91a:	6003      	strpl	r3, [r0, #0]
 810c91c:	2202      	movpl	r2, #2
 810c91e:	4610      	mov	r0, r2
 810c920:	4770      	bx	lr
 810c922:	b299      	uxth	r1, r3
 810c924:	b909      	cbnz	r1, 810c92a <__lo0bits+0x2a>
 810c926:	0c1b      	lsrs	r3, r3, #16
 810c928:	2210      	movs	r2, #16
 810c92a:	b2d9      	uxtb	r1, r3
 810c92c:	b909      	cbnz	r1, 810c932 <__lo0bits+0x32>
 810c92e:	3208      	adds	r2, #8
 810c930:	0a1b      	lsrs	r3, r3, #8
 810c932:	0719      	lsls	r1, r3, #28
 810c934:	bf04      	itt	eq
 810c936:	091b      	lsreq	r3, r3, #4
 810c938:	3204      	addeq	r2, #4
 810c93a:	0799      	lsls	r1, r3, #30
 810c93c:	bf04      	itt	eq
 810c93e:	089b      	lsreq	r3, r3, #2
 810c940:	3202      	addeq	r2, #2
 810c942:	07d9      	lsls	r1, r3, #31
 810c944:	d403      	bmi.n	810c94e <__lo0bits+0x4e>
 810c946:	085b      	lsrs	r3, r3, #1
 810c948:	f102 0201 	add.w	r2, r2, #1
 810c94c:	d003      	beq.n	810c956 <__lo0bits+0x56>
 810c94e:	6003      	str	r3, [r0, #0]
 810c950:	e7e5      	b.n	810c91e <__lo0bits+0x1e>
 810c952:	2200      	movs	r2, #0
 810c954:	e7e3      	b.n	810c91e <__lo0bits+0x1e>
 810c956:	2220      	movs	r2, #32
 810c958:	e7e1      	b.n	810c91e <__lo0bits+0x1e>
	...

0810c95c <__i2b>:
 810c95c:	b510      	push	{r4, lr}
 810c95e:	460c      	mov	r4, r1
 810c960:	2101      	movs	r1, #1
 810c962:	f7ff febb 	bl	810c6dc <_Balloc>
 810c966:	4602      	mov	r2, r0
 810c968:	b928      	cbnz	r0, 810c976 <__i2b+0x1a>
 810c96a:	4b05      	ldr	r3, [pc, #20]	; (810c980 <__i2b+0x24>)
 810c96c:	4805      	ldr	r0, [pc, #20]	; (810c984 <__i2b+0x28>)
 810c96e:	f240 1145 	movw	r1, #325	; 0x145
 810c972:	f7fe f9f7 	bl	810ad64 <__assert_func>
 810c976:	2301      	movs	r3, #1
 810c978:	6144      	str	r4, [r0, #20]
 810c97a:	6103      	str	r3, [r0, #16]
 810c97c:	bd10      	pop	{r4, pc}
 810c97e:	bf00      	nop
 810c980:	0810ea32 	.word	0x0810ea32
 810c984:	0810eab4 	.word	0x0810eab4

0810c988 <__multiply>:
 810c988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c98c:	4691      	mov	r9, r2
 810c98e:	690a      	ldr	r2, [r1, #16]
 810c990:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810c994:	429a      	cmp	r2, r3
 810c996:	bfb8      	it	lt
 810c998:	460b      	movlt	r3, r1
 810c99a:	460c      	mov	r4, r1
 810c99c:	bfbc      	itt	lt
 810c99e:	464c      	movlt	r4, r9
 810c9a0:	4699      	movlt	r9, r3
 810c9a2:	6927      	ldr	r7, [r4, #16]
 810c9a4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 810c9a8:	68a3      	ldr	r3, [r4, #8]
 810c9aa:	6861      	ldr	r1, [r4, #4]
 810c9ac:	eb07 060a 	add.w	r6, r7, sl
 810c9b0:	42b3      	cmp	r3, r6
 810c9b2:	b085      	sub	sp, #20
 810c9b4:	bfb8      	it	lt
 810c9b6:	3101      	addlt	r1, #1
 810c9b8:	f7ff fe90 	bl	810c6dc <_Balloc>
 810c9bc:	b930      	cbnz	r0, 810c9cc <__multiply+0x44>
 810c9be:	4602      	mov	r2, r0
 810c9c0:	4b44      	ldr	r3, [pc, #272]	; (810cad4 <__multiply+0x14c>)
 810c9c2:	4845      	ldr	r0, [pc, #276]	; (810cad8 <__multiply+0x150>)
 810c9c4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 810c9c8:	f7fe f9cc 	bl	810ad64 <__assert_func>
 810c9cc:	f100 0514 	add.w	r5, r0, #20
 810c9d0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 810c9d4:	462b      	mov	r3, r5
 810c9d6:	2200      	movs	r2, #0
 810c9d8:	4543      	cmp	r3, r8
 810c9da:	d321      	bcc.n	810ca20 <__multiply+0x98>
 810c9dc:	f104 0314 	add.w	r3, r4, #20
 810c9e0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 810c9e4:	f109 0314 	add.w	r3, r9, #20
 810c9e8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 810c9ec:	9202      	str	r2, [sp, #8]
 810c9ee:	1b3a      	subs	r2, r7, r4
 810c9f0:	3a15      	subs	r2, #21
 810c9f2:	f022 0203 	bic.w	r2, r2, #3
 810c9f6:	3204      	adds	r2, #4
 810c9f8:	f104 0115 	add.w	r1, r4, #21
 810c9fc:	428f      	cmp	r7, r1
 810c9fe:	bf38      	it	cc
 810ca00:	2204      	movcc	r2, #4
 810ca02:	9201      	str	r2, [sp, #4]
 810ca04:	9a02      	ldr	r2, [sp, #8]
 810ca06:	9303      	str	r3, [sp, #12]
 810ca08:	429a      	cmp	r2, r3
 810ca0a:	d80c      	bhi.n	810ca26 <__multiply+0x9e>
 810ca0c:	2e00      	cmp	r6, #0
 810ca0e:	dd03      	ble.n	810ca18 <__multiply+0x90>
 810ca10:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 810ca14:	2b00      	cmp	r3, #0
 810ca16:	d05b      	beq.n	810cad0 <__multiply+0x148>
 810ca18:	6106      	str	r6, [r0, #16]
 810ca1a:	b005      	add	sp, #20
 810ca1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810ca20:	f843 2b04 	str.w	r2, [r3], #4
 810ca24:	e7d8      	b.n	810c9d8 <__multiply+0x50>
 810ca26:	f8b3 a000 	ldrh.w	sl, [r3]
 810ca2a:	f1ba 0f00 	cmp.w	sl, #0
 810ca2e:	d024      	beq.n	810ca7a <__multiply+0xf2>
 810ca30:	f104 0e14 	add.w	lr, r4, #20
 810ca34:	46a9      	mov	r9, r5
 810ca36:	f04f 0c00 	mov.w	ip, #0
 810ca3a:	f85e 2b04 	ldr.w	r2, [lr], #4
 810ca3e:	f8d9 1000 	ldr.w	r1, [r9]
 810ca42:	fa1f fb82 	uxth.w	fp, r2
 810ca46:	b289      	uxth	r1, r1
 810ca48:	fb0a 110b 	mla	r1, sl, fp, r1
 810ca4c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 810ca50:	f8d9 2000 	ldr.w	r2, [r9]
 810ca54:	4461      	add	r1, ip
 810ca56:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 810ca5a:	fb0a c20b 	mla	r2, sl, fp, ip
 810ca5e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 810ca62:	b289      	uxth	r1, r1
 810ca64:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 810ca68:	4577      	cmp	r7, lr
 810ca6a:	f849 1b04 	str.w	r1, [r9], #4
 810ca6e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 810ca72:	d8e2      	bhi.n	810ca3a <__multiply+0xb2>
 810ca74:	9a01      	ldr	r2, [sp, #4]
 810ca76:	f845 c002 	str.w	ip, [r5, r2]
 810ca7a:	9a03      	ldr	r2, [sp, #12]
 810ca7c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 810ca80:	3304      	adds	r3, #4
 810ca82:	f1b9 0f00 	cmp.w	r9, #0
 810ca86:	d021      	beq.n	810cacc <__multiply+0x144>
 810ca88:	6829      	ldr	r1, [r5, #0]
 810ca8a:	f104 0c14 	add.w	ip, r4, #20
 810ca8e:	46ae      	mov	lr, r5
 810ca90:	f04f 0a00 	mov.w	sl, #0
 810ca94:	f8bc b000 	ldrh.w	fp, [ip]
 810ca98:	f8be 2002 	ldrh.w	r2, [lr, #2]
 810ca9c:	fb09 220b 	mla	r2, r9, fp, r2
 810caa0:	4452      	add	r2, sl
 810caa2:	b289      	uxth	r1, r1
 810caa4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 810caa8:	f84e 1b04 	str.w	r1, [lr], #4
 810caac:	f85c 1b04 	ldr.w	r1, [ip], #4
 810cab0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 810cab4:	f8be 1000 	ldrh.w	r1, [lr]
 810cab8:	fb09 110a 	mla	r1, r9, sl, r1
 810cabc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 810cac0:	4567      	cmp	r7, ip
 810cac2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 810cac6:	d8e5      	bhi.n	810ca94 <__multiply+0x10c>
 810cac8:	9a01      	ldr	r2, [sp, #4]
 810caca:	50a9      	str	r1, [r5, r2]
 810cacc:	3504      	adds	r5, #4
 810cace:	e799      	b.n	810ca04 <__multiply+0x7c>
 810cad0:	3e01      	subs	r6, #1
 810cad2:	e79b      	b.n	810ca0c <__multiply+0x84>
 810cad4:	0810ea32 	.word	0x0810ea32
 810cad8:	0810eab4 	.word	0x0810eab4

0810cadc <__pow5mult>:
 810cadc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810cae0:	4615      	mov	r5, r2
 810cae2:	f012 0203 	ands.w	r2, r2, #3
 810cae6:	4606      	mov	r6, r0
 810cae8:	460f      	mov	r7, r1
 810caea:	d007      	beq.n	810cafc <__pow5mult+0x20>
 810caec:	4c25      	ldr	r4, [pc, #148]	; (810cb84 <__pow5mult+0xa8>)
 810caee:	3a01      	subs	r2, #1
 810caf0:	2300      	movs	r3, #0
 810caf2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 810caf6:	f7ff fe53 	bl	810c7a0 <__multadd>
 810cafa:	4607      	mov	r7, r0
 810cafc:	10ad      	asrs	r5, r5, #2
 810cafe:	d03d      	beq.n	810cb7c <__pow5mult+0xa0>
 810cb00:	69f4      	ldr	r4, [r6, #28]
 810cb02:	b97c      	cbnz	r4, 810cb24 <__pow5mult+0x48>
 810cb04:	2010      	movs	r0, #16
 810cb06:	f7ff fc75 	bl	810c3f4 <malloc>
 810cb0a:	4602      	mov	r2, r0
 810cb0c:	61f0      	str	r0, [r6, #28]
 810cb0e:	b928      	cbnz	r0, 810cb1c <__pow5mult+0x40>
 810cb10:	4b1d      	ldr	r3, [pc, #116]	; (810cb88 <__pow5mult+0xac>)
 810cb12:	481e      	ldr	r0, [pc, #120]	; (810cb8c <__pow5mult+0xb0>)
 810cb14:	f240 11b3 	movw	r1, #435	; 0x1b3
 810cb18:	f7fe f924 	bl	810ad64 <__assert_func>
 810cb1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810cb20:	6004      	str	r4, [r0, #0]
 810cb22:	60c4      	str	r4, [r0, #12]
 810cb24:	f8d6 801c 	ldr.w	r8, [r6, #28]
 810cb28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 810cb2c:	b94c      	cbnz	r4, 810cb42 <__pow5mult+0x66>
 810cb2e:	f240 2171 	movw	r1, #625	; 0x271
 810cb32:	4630      	mov	r0, r6
 810cb34:	f7ff ff12 	bl	810c95c <__i2b>
 810cb38:	2300      	movs	r3, #0
 810cb3a:	f8c8 0008 	str.w	r0, [r8, #8]
 810cb3e:	4604      	mov	r4, r0
 810cb40:	6003      	str	r3, [r0, #0]
 810cb42:	f04f 0900 	mov.w	r9, #0
 810cb46:	07eb      	lsls	r3, r5, #31
 810cb48:	d50a      	bpl.n	810cb60 <__pow5mult+0x84>
 810cb4a:	4639      	mov	r1, r7
 810cb4c:	4622      	mov	r2, r4
 810cb4e:	4630      	mov	r0, r6
 810cb50:	f7ff ff1a 	bl	810c988 <__multiply>
 810cb54:	4639      	mov	r1, r7
 810cb56:	4680      	mov	r8, r0
 810cb58:	4630      	mov	r0, r6
 810cb5a:	f7ff fdff 	bl	810c75c <_Bfree>
 810cb5e:	4647      	mov	r7, r8
 810cb60:	106d      	asrs	r5, r5, #1
 810cb62:	d00b      	beq.n	810cb7c <__pow5mult+0xa0>
 810cb64:	6820      	ldr	r0, [r4, #0]
 810cb66:	b938      	cbnz	r0, 810cb78 <__pow5mult+0x9c>
 810cb68:	4622      	mov	r2, r4
 810cb6a:	4621      	mov	r1, r4
 810cb6c:	4630      	mov	r0, r6
 810cb6e:	f7ff ff0b 	bl	810c988 <__multiply>
 810cb72:	6020      	str	r0, [r4, #0]
 810cb74:	f8c0 9000 	str.w	r9, [r0]
 810cb78:	4604      	mov	r4, r0
 810cb7a:	e7e4      	b.n	810cb46 <__pow5mult+0x6a>
 810cb7c:	4638      	mov	r0, r7
 810cb7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810cb82:	bf00      	nop
 810cb84:	0810ec00 	.word	0x0810ec00
 810cb88:	0810e7c1 	.word	0x0810e7c1
 810cb8c:	0810eab4 	.word	0x0810eab4

0810cb90 <__lshift>:
 810cb90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810cb94:	460c      	mov	r4, r1
 810cb96:	6849      	ldr	r1, [r1, #4]
 810cb98:	6923      	ldr	r3, [r4, #16]
 810cb9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 810cb9e:	68a3      	ldr	r3, [r4, #8]
 810cba0:	4607      	mov	r7, r0
 810cba2:	4691      	mov	r9, r2
 810cba4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 810cba8:	f108 0601 	add.w	r6, r8, #1
 810cbac:	42b3      	cmp	r3, r6
 810cbae:	db0b      	blt.n	810cbc8 <__lshift+0x38>
 810cbb0:	4638      	mov	r0, r7
 810cbb2:	f7ff fd93 	bl	810c6dc <_Balloc>
 810cbb6:	4605      	mov	r5, r0
 810cbb8:	b948      	cbnz	r0, 810cbce <__lshift+0x3e>
 810cbba:	4602      	mov	r2, r0
 810cbbc:	4b28      	ldr	r3, [pc, #160]	; (810cc60 <__lshift+0xd0>)
 810cbbe:	4829      	ldr	r0, [pc, #164]	; (810cc64 <__lshift+0xd4>)
 810cbc0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 810cbc4:	f7fe f8ce 	bl	810ad64 <__assert_func>
 810cbc8:	3101      	adds	r1, #1
 810cbca:	005b      	lsls	r3, r3, #1
 810cbcc:	e7ee      	b.n	810cbac <__lshift+0x1c>
 810cbce:	2300      	movs	r3, #0
 810cbd0:	f100 0114 	add.w	r1, r0, #20
 810cbd4:	f100 0210 	add.w	r2, r0, #16
 810cbd8:	4618      	mov	r0, r3
 810cbda:	4553      	cmp	r3, sl
 810cbdc:	db33      	blt.n	810cc46 <__lshift+0xb6>
 810cbde:	6920      	ldr	r0, [r4, #16]
 810cbe0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810cbe4:	f104 0314 	add.w	r3, r4, #20
 810cbe8:	f019 091f 	ands.w	r9, r9, #31
 810cbec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 810cbf0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 810cbf4:	d02b      	beq.n	810cc4e <__lshift+0xbe>
 810cbf6:	f1c9 0e20 	rsb	lr, r9, #32
 810cbfa:	468a      	mov	sl, r1
 810cbfc:	2200      	movs	r2, #0
 810cbfe:	6818      	ldr	r0, [r3, #0]
 810cc00:	fa00 f009 	lsl.w	r0, r0, r9
 810cc04:	4310      	orrs	r0, r2
 810cc06:	f84a 0b04 	str.w	r0, [sl], #4
 810cc0a:	f853 2b04 	ldr.w	r2, [r3], #4
 810cc0e:	459c      	cmp	ip, r3
 810cc10:	fa22 f20e 	lsr.w	r2, r2, lr
 810cc14:	d8f3      	bhi.n	810cbfe <__lshift+0x6e>
 810cc16:	ebac 0304 	sub.w	r3, ip, r4
 810cc1a:	3b15      	subs	r3, #21
 810cc1c:	f023 0303 	bic.w	r3, r3, #3
 810cc20:	3304      	adds	r3, #4
 810cc22:	f104 0015 	add.w	r0, r4, #21
 810cc26:	4584      	cmp	ip, r0
 810cc28:	bf38      	it	cc
 810cc2a:	2304      	movcc	r3, #4
 810cc2c:	50ca      	str	r2, [r1, r3]
 810cc2e:	b10a      	cbz	r2, 810cc34 <__lshift+0xa4>
 810cc30:	f108 0602 	add.w	r6, r8, #2
 810cc34:	3e01      	subs	r6, #1
 810cc36:	4638      	mov	r0, r7
 810cc38:	612e      	str	r6, [r5, #16]
 810cc3a:	4621      	mov	r1, r4
 810cc3c:	f7ff fd8e 	bl	810c75c <_Bfree>
 810cc40:	4628      	mov	r0, r5
 810cc42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810cc46:	f842 0f04 	str.w	r0, [r2, #4]!
 810cc4a:	3301      	adds	r3, #1
 810cc4c:	e7c5      	b.n	810cbda <__lshift+0x4a>
 810cc4e:	3904      	subs	r1, #4
 810cc50:	f853 2b04 	ldr.w	r2, [r3], #4
 810cc54:	f841 2f04 	str.w	r2, [r1, #4]!
 810cc58:	459c      	cmp	ip, r3
 810cc5a:	d8f9      	bhi.n	810cc50 <__lshift+0xc0>
 810cc5c:	e7ea      	b.n	810cc34 <__lshift+0xa4>
 810cc5e:	bf00      	nop
 810cc60:	0810ea32 	.word	0x0810ea32
 810cc64:	0810eab4 	.word	0x0810eab4

0810cc68 <__mcmp>:
 810cc68:	b530      	push	{r4, r5, lr}
 810cc6a:	6902      	ldr	r2, [r0, #16]
 810cc6c:	690c      	ldr	r4, [r1, #16]
 810cc6e:	1b12      	subs	r2, r2, r4
 810cc70:	d10e      	bne.n	810cc90 <__mcmp+0x28>
 810cc72:	f100 0314 	add.w	r3, r0, #20
 810cc76:	3114      	adds	r1, #20
 810cc78:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 810cc7c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 810cc80:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 810cc84:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 810cc88:	42a5      	cmp	r5, r4
 810cc8a:	d003      	beq.n	810cc94 <__mcmp+0x2c>
 810cc8c:	d305      	bcc.n	810cc9a <__mcmp+0x32>
 810cc8e:	2201      	movs	r2, #1
 810cc90:	4610      	mov	r0, r2
 810cc92:	bd30      	pop	{r4, r5, pc}
 810cc94:	4283      	cmp	r3, r0
 810cc96:	d3f3      	bcc.n	810cc80 <__mcmp+0x18>
 810cc98:	e7fa      	b.n	810cc90 <__mcmp+0x28>
 810cc9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810cc9e:	e7f7      	b.n	810cc90 <__mcmp+0x28>

0810cca0 <__mdiff>:
 810cca0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810cca4:	460c      	mov	r4, r1
 810cca6:	4606      	mov	r6, r0
 810cca8:	4611      	mov	r1, r2
 810ccaa:	4620      	mov	r0, r4
 810ccac:	4690      	mov	r8, r2
 810ccae:	f7ff ffdb 	bl	810cc68 <__mcmp>
 810ccb2:	1e05      	subs	r5, r0, #0
 810ccb4:	d110      	bne.n	810ccd8 <__mdiff+0x38>
 810ccb6:	4629      	mov	r1, r5
 810ccb8:	4630      	mov	r0, r6
 810ccba:	f7ff fd0f 	bl	810c6dc <_Balloc>
 810ccbe:	b930      	cbnz	r0, 810ccce <__mdiff+0x2e>
 810ccc0:	4b3a      	ldr	r3, [pc, #232]	; (810cdac <__mdiff+0x10c>)
 810ccc2:	4602      	mov	r2, r0
 810ccc4:	f240 2137 	movw	r1, #567	; 0x237
 810ccc8:	4839      	ldr	r0, [pc, #228]	; (810cdb0 <__mdiff+0x110>)
 810ccca:	f7fe f84b 	bl	810ad64 <__assert_func>
 810ccce:	2301      	movs	r3, #1
 810ccd0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 810ccd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810ccd8:	bfa4      	itt	ge
 810ccda:	4643      	movge	r3, r8
 810ccdc:	46a0      	movge	r8, r4
 810ccde:	4630      	mov	r0, r6
 810cce0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 810cce4:	bfa6      	itte	ge
 810cce6:	461c      	movge	r4, r3
 810cce8:	2500      	movge	r5, #0
 810ccea:	2501      	movlt	r5, #1
 810ccec:	f7ff fcf6 	bl	810c6dc <_Balloc>
 810ccf0:	b920      	cbnz	r0, 810ccfc <__mdiff+0x5c>
 810ccf2:	4b2e      	ldr	r3, [pc, #184]	; (810cdac <__mdiff+0x10c>)
 810ccf4:	4602      	mov	r2, r0
 810ccf6:	f240 2145 	movw	r1, #581	; 0x245
 810ccfa:	e7e5      	b.n	810ccc8 <__mdiff+0x28>
 810ccfc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 810cd00:	6926      	ldr	r6, [r4, #16]
 810cd02:	60c5      	str	r5, [r0, #12]
 810cd04:	f104 0914 	add.w	r9, r4, #20
 810cd08:	f108 0514 	add.w	r5, r8, #20
 810cd0c:	f100 0e14 	add.w	lr, r0, #20
 810cd10:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 810cd14:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 810cd18:	f108 0210 	add.w	r2, r8, #16
 810cd1c:	46f2      	mov	sl, lr
 810cd1e:	2100      	movs	r1, #0
 810cd20:	f859 3b04 	ldr.w	r3, [r9], #4
 810cd24:	f852 bf04 	ldr.w	fp, [r2, #4]!
 810cd28:	fa11 f88b 	uxtah	r8, r1, fp
 810cd2c:	b299      	uxth	r1, r3
 810cd2e:	0c1b      	lsrs	r3, r3, #16
 810cd30:	eba8 0801 	sub.w	r8, r8, r1
 810cd34:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 810cd38:	eb03 4328 	add.w	r3, r3, r8, asr #16
 810cd3c:	fa1f f888 	uxth.w	r8, r8
 810cd40:	1419      	asrs	r1, r3, #16
 810cd42:	454e      	cmp	r6, r9
 810cd44:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 810cd48:	f84a 3b04 	str.w	r3, [sl], #4
 810cd4c:	d8e8      	bhi.n	810cd20 <__mdiff+0x80>
 810cd4e:	1b33      	subs	r3, r6, r4
 810cd50:	3b15      	subs	r3, #21
 810cd52:	f023 0303 	bic.w	r3, r3, #3
 810cd56:	3304      	adds	r3, #4
 810cd58:	3415      	adds	r4, #21
 810cd5a:	42a6      	cmp	r6, r4
 810cd5c:	bf38      	it	cc
 810cd5e:	2304      	movcc	r3, #4
 810cd60:	441d      	add	r5, r3
 810cd62:	4473      	add	r3, lr
 810cd64:	469e      	mov	lr, r3
 810cd66:	462e      	mov	r6, r5
 810cd68:	4566      	cmp	r6, ip
 810cd6a:	d30e      	bcc.n	810cd8a <__mdiff+0xea>
 810cd6c:	f10c 0203 	add.w	r2, ip, #3
 810cd70:	1b52      	subs	r2, r2, r5
 810cd72:	f022 0203 	bic.w	r2, r2, #3
 810cd76:	3d03      	subs	r5, #3
 810cd78:	45ac      	cmp	ip, r5
 810cd7a:	bf38      	it	cc
 810cd7c:	2200      	movcc	r2, #0
 810cd7e:	4413      	add	r3, r2
 810cd80:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 810cd84:	b17a      	cbz	r2, 810cda6 <__mdiff+0x106>
 810cd86:	6107      	str	r7, [r0, #16]
 810cd88:	e7a4      	b.n	810ccd4 <__mdiff+0x34>
 810cd8a:	f856 8b04 	ldr.w	r8, [r6], #4
 810cd8e:	fa11 f288 	uxtah	r2, r1, r8
 810cd92:	1414      	asrs	r4, r2, #16
 810cd94:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 810cd98:	b292      	uxth	r2, r2
 810cd9a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 810cd9e:	f84e 2b04 	str.w	r2, [lr], #4
 810cda2:	1421      	asrs	r1, r4, #16
 810cda4:	e7e0      	b.n	810cd68 <__mdiff+0xc8>
 810cda6:	3f01      	subs	r7, #1
 810cda8:	e7ea      	b.n	810cd80 <__mdiff+0xe0>
 810cdaa:	bf00      	nop
 810cdac:	0810ea32 	.word	0x0810ea32
 810cdb0:	0810eab4 	.word	0x0810eab4

0810cdb4 <__ulp>:
 810cdb4:	b082      	sub	sp, #8
 810cdb6:	ed8d 0b00 	vstr	d0, [sp]
 810cdba:	9a01      	ldr	r2, [sp, #4]
 810cdbc:	4b0f      	ldr	r3, [pc, #60]	; (810cdfc <__ulp+0x48>)
 810cdbe:	4013      	ands	r3, r2
 810cdc0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 810cdc4:	2b00      	cmp	r3, #0
 810cdc6:	dc08      	bgt.n	810cdda <__ulp+0x26>
 810cdc8:	425b      	negs	r3, r3
 810cdca:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 810cdce:	ea4f 5223 	mov.w	r2, r3, asr #20
 810cdd2:	da04      	bge.n	810cdde <__ulp+0x2a>
 810cdd4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 810cdd8:	4113      	asrs	r3, r2
 810cdda:	2200      	movs	r2, #0
 810cddc:	e008      	b.n	810cdf0 <__ulp+0x3c>
 810cdde:	f1a2 0314 	sub.w	r3, r2, #20
 810cde2:	2b1e      	cmp	r3, #30
 810cde4:	bfda      	itte	le
 810cde6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 810cdea:	40da      	lsrle	r2, r3
 810cdec:	2201      	movgt	r2, #1
 810cdee:	2300      	movs	r3, #0
 810cdf0:	4619      	mov	r1, r3
 810cdf2:	4610      	mov	r0, r2
 810cdf4:	ec41 0b10 	vmov	d0, r0, r1
 810cdf8:	b002      	add	sp, #8
 810cdfa:	4770      	bx	lr
 810cdfc:	7ff00000 	.word	0x7ff00000

0810ce00 <__b2d>:
 810ce00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810ce04:	6906      	ldr	r6, [r0, #16]
 810ce06:	f100 0814 	add.w	r8, r0, #20
 810ce0a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 810ce0e:	1f37      	subs	r7, r6, #4
 810ce10:	f856 2c04 	ldr.w	r2, [r6, #-4]
 810ce14:	4610      	mov	r0, r2
 810ce16:	f7ff fd53 	bl	810c8c0 <__hi0bits>
 810ce1a:	f1c0 0320 	rsb	r3, r0, #32
 810ce1e:	280a      	cmp	r0, #10
 810ce20:	600b      	str	r3, [r1, #0]
 810ce22:	491b      	ldr	r1, [pc, #108]	; (810ce90 <__b2d+0x90>)
 810ce24:	dc15      	bgt.n	810ce52 <__b2d+0x52>
 810ce26:	f1c0 0c0b 	rsb	ip, r0, #11
 810ce2a:	fa22 f30c 	lsr.w	r3, r2, ip
 810ce2e:	45b8      	cmp	r8, r7
 810ce30:	ea43 0501 	orr.w	r5, r3, r1
 810ce34:	bf34      	ite	cc
 810ce36:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 810ce3a:	2300      	movcs	r3, #0
 810ce3c:	3015      	adds	r0, #21
 810ce3e:	fa02 f000 	lsl.w	r0, r2, r0
 810ce42:	fa23 f30c 	lsr.w	r3, r3, ip
 810ce46:	4303      	orrs	r3, r0
 810ce48:	461c      	mov	r4, r3
 810ce4a:	ec45 4b10 	vmov	d0, r4, r5
 810ce4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810ce52:	45b8      	cmp	r8, r7
 810ce54:	bf3a      	itte	cc
 810ce56:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 810ce5a:	f1a6 0708 	subcc.w	r7, r6, #8
 810ce5e:	2300      	movcs	r3, #0
 810ce60:	380b      	subs	r0, #11
 810ce62:	d012      	beq.n	810ce8a <__b2d+0x8a>
 810ce64:	f1c0 0120 	rsb	r1, r0, #32
 810ce68:	fa23 f401 	lsr.w	r4, r3, r1
 810ce6c:	4082      	lsls	r2, r0
 810ce6e:	4322      	orrs	r2, r4
 810ce70:	4547      	cmp	r7, r8
 810ce72:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 810ce76:	bf8c      	ite	hi
 810ce78:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 810ce7c:	2200      	movls	r2, #0
 810ce7e:	4083      	lsls	r3, r0
 810ce80:	40ca      	lsrs	r2, r1
 810ce82:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 810ce86:	4313      	orrs	r3, r2
 810ce88:	e7de      	b.n	810ce48 <__b2d+0x48>
 810ce8a:	ea42 0501 	orr.w	r5, r2, r1
 810ce8e:	e7db      	b.n	810ce48 <__b2d+0x48>
 810ce90:	3ff00000 	.word	0x3ff00000

0810ce94 <__d2b>:
 810ce94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 810ce98:	460f      	mov	r7, r1
 810ce9a:	2101      	movs	r1, #1
 810ce9c:	ec59 8b10 	vmov	r8, r9, d0
 810cea0:	4616      	mov	r6, r2
 810cea2:	f7ff fc1b 	bl	810c6dc <_Balloc>
 810cea6:	4604      	mov	r4, r0
 810cea8:	b930      	cbnz	r0, 810ceb8 <__d2b+0x24>
 810ceaa:	4602      	mov	r2, r0
 810ceac:	4b24      	ldr	r3, [pc, #144]	; (810cf40 <__d2b+0xac>)
 810ceae:	4825      	ldr	r0, [pc, #148]	; (810cf44 <__d2b+0xb0>)
 810ceb0:	f240 310f 	movw	r1, #783	; 0x30f
 810ceb4:	f7fd ff56 	bl	810ad64 <__assert_func>
 810ceb8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 810cebc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810cec0:	bb2d      	cbnz	r5, 810cf0e <__d2b+0x7a>
 810cec2:	9301      	str	r3, [sp, #4]
 810cec4:	f1b8 0300 	subs.w	r3, r8, #0
 810cec8:	d026      	beq.n	810cf18 <__d2b+0x84>
 810ceca:	4668      	mov	r0, sp
 810cecc:	9300      	str	r3, [sp, #0]
 810cece:	f7ff fd17 	bl	810c900 <__lo0bits>
 810ced2:	e9dd 1200 	ldrd	r1, r2, [sp]
 810ced6:	b1e8      	cbz	r0, 810cf14 <__d2b+0x80>
 810ced8:	f1c0 0320 	rsb	r3, r0, #32
 810cedc:	fa02 f303 	lsl.w	r3, r2, r3
 810cee0:	430b      	orrs	r3, r1
 810cee2:	40c2      	lsrs	r2, r0
 810cee4:	6163      	str	r3, [r4, #20]
 810cee6:	9201      	str	r2, [sp, #4]
 810cee8:	9b01      	ldr	r3, [sp, #4]
 810ceea:	61a3      	str	r3, [r4, #24]
 810ceec:	2b00      	cmp	r3, #0
 810ceee:	bf14      	ite	ne
 810cef0:	2202      	movne	r2, #2
 810cef2:	2201      	moveq	r2, #1
 810cef4:	6122      	str	r2, [r4, #16]
 810cef6:	b1bd      	cbz	r5, 810cf28 <__d2b+0x94>
 810cef8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 810cefc:	4405      	add	r5, r0
 810cefe:	603d      	str	r5, [r7, #0]
 810cf00:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 810cf04:	6030      	str	r0, [r6, #0]
 810cf06:	4620      	mov	r0, r4
 810cf08:	b003      	add	sp, #12
 810cf0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810cf0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810cf12:	e7d6      	b.n	810cec2 <__d2b+0x2e>
 810cf14:	6161      	str	r1, [r4, #20]
 810cf16:	e7e7      	b.n	810cee8 <__d2b+0x54>
 810cf18:	a801      	add	r0, sp, #4
 810cf1a:	f7ff fcf1 	bl	810c900 <__lo0bits>
 810cf1e:	9b01      	ldr	r3, [sp, #4]
 810cf20:	6163      	str	r3, [r4, #20]
 810cf22:	3020      	adds	r0, #32
 810cf24:	2201      	movs	r2, #1
 810cf26:	e7e5      	b.n	810cef4 <__d2b+0x60>
 810cf28:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 810cf2c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 810cf30:	6038      	str	r0, [r7, #0]
 810cf32:	6918      	ldr	r0, [r3, #16]
 810cf34:	f7ff fcc4 	bl	810c8c0 <__hi0bits>
 810cf38:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 810cf3c:	e7e2      	b.n	810cf04 <__d2b+0x70>
 810cf3e:	bf00      	nop
 810cf40:	0810ea32 	.word	0x0810ea32
 810cf44:	0810eab4 	.word	0x0810eab4

0810cf48 <__ratio>:
 810cf48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810cf4c:	4688      	mov	r8, r1
 810cf4e:	4669      	mov	r1, sp
 810cf50:	4681      	mov	r9, r0
 810cf52:	f7ff ff55 	bl	810ce00 <__b2d>
 810cf56:	a901      	add	r1, sp, #4
 810cf58:	4640      	mov	r0, r8
 810cf5a:	ec55 4b10 	vmov	r4, r5, d0
 810cf5e:	f7ff ff4f 	bl	810ce00 <__b2d>
 810cf62:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810cf66:	f8d8 2010 	ldr.w	r2, [r8, #16]
 810cf6a:	eba3 0c02 	sub.w	ip, r3, r2
 810cf6e:	e9dd 3200 	ldrd	r3, r2, [sp]
 810cf72:	1a9b      	subs	r3, r3, r2
 810cf74:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 810cf78:	ec51 0b10 	vmov	r0, r1, d0
 810cf7c:	2b00      	cmp	r3, #0
 810cf7e:	bfd6      	itet	le
 810cf80:	460a      	movle	r2, r1
 810cf82:	462a      	movgt	r2, r5
 810cf84:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 810cf88:	468b      	mov	fp, r1
 810cf8a:	462f      	mov	r7, r5
 810cf8c:	bfd4      	ite	le
 810cf8e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 810cf92:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 810cf96:	4620      	mov	r0, r4
 810cf98:	ee10 2a10 	vmov	r2, s0
 810cf9c:	465b      	mov	r3, fp
 810cf9e:	4639      	mov	r1, r7
 810cfa0:	f7f3 fcdc 	bl	810095c <__aeabi_ddiv>
 810cfa4:	ec41 0b10 	vmov	d0, r0, r1
 810cfa8:	b003      	add	sp, #12
 810cfaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810cfae <__copybits>:
 810cfae:	3901      	subs	r1, #1
 810cfb0:	b570      	push	{r4, r5, r6, lr}
 810cfb2:	1149      	asrs	r1, r1, #5
 810cfb4:	6914      	ldr	r4, [r2, #16]
 810cfb6:	3101      	adds	r1, #1
 810cfb8:	f102 0314 	add.w	r3, r2, #20
 810cfbc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 810cfc0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 810cfc4:	1f05      	subs	r5, r0, #4
 810cfc6:	42a3      	cmp	r3, r4
 810cfc8:	d30c      	bcc.n	810cfe4 <__copybits+0x36>
 810cfca:	1aa3      	subs	r3, r4, r2
 810cfcc:	3b11      	subs	r3, #17
 810cfce:	f023 0303 	bic.w	r3, r3, #3
 810cfd2:	3211      	adds	r2, #17
 810cfd4:	42a2      	cmp	r2, r4
 810cfd6:	bf88      	it	hi
 810cfd8:	2300      	movhi	r3, #0
 810cfda:	4418      	add	r0, r3
 810cfdc:	2300      	movs	r3, #0
 810cfde:	4288      	cmp	r0, r1
 810cfe0:	d305      	bcc.n	810cfee <__copybits+0x40>
 810cfe2:	bd70      	pop	{r4, r5, r6, pc}
 810cfe4:	f853 6b04 	ldr.w	r6, [r3], #4
 810cfe8:	f845 6f04 	str.w	r6, [r5, #4]!
 810cfec:	e7eb      	b.n	810cfc6 <__copybits+0x18>
 810cfee:	f840 3b04 	str.w	r3, [r0], #4
 810cff2:	e7f4      	b.n	810cfde <__copybits+0x30>

0810cff4 <__any_on>:
 810cff4:	f100 0214 	add.w	r2, r0, #20
 810cff8:	6900      	ldr	r0, [r0, #16]
 810cffa:	114b      	asrs	r3, r1, #5
 810cffc:	4298      	cmp	r0, r3
 810cffe:	b510      	push	{r4, lr}
 810d000:	db11      	blt.n	810d026 <__any_on+0x32>
 810d002:	dd0a      	ble.n	810d01a <__any_on+0x26>
 810d004:	f011 011f 	ands.w	r1, r1, #31
 810d008:	d007      	beq.n	810d01a <__any_on+0x26>
 810d00a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 810d00e:	fa24 f001 	lsr.w	r0, r4, r1
 810d012:	fa00 f101 	lsl.w	r1, r0, r1
 810d016:	428c      	cmp	r4, r1
 810d018:	d10b      	bne.n	810d032 <__any_on+0x3e>
 810d01a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 810d01e:	4293      	cmp	r3, r2
 810d020:	d803      	bhi.n	810d02a <__any_on+0x36>
 810d022:	2000      	movs	r0, #0
 810d024:	bd10      	pop	{r4, pc}
 810d026:	4603      	mov	r3, r0
 810d028:	e7f7      	b.n	810d01a <__any_on+0x26>
 810d02a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810d02e:	2900      	cmp	r1, #0
 810d030:	d0f5      	beq.n	810d01e <__any_on+0x2a>
 810d032:	2001      	movs	r0, #1
 810d034:	e7f6      	b.n	810d024 <__any_on+0x30>

0810d036 <__sread>:
 810d036:	b510      	push	{r4, lr}
 810d038:	460c      	mov	r4, r1
 810d03a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810d03e:	f000 f8c7 	bl	810d1d0 <_read_r>
 810d042:	2800      	cmp	r0, #0
 810d044:	bfab      	itete	ge
 810d046:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 810d048:	89a3      	ldrhlt	r3, [r4, #12]
 810d04a:	181b      	addge	r3, r3, r0
 810d04c:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 810d050:	bfac      	ite	ge
 810d052:	6563      	strge	r3, [r4, #84]	; 0x54
 810d054:	81a3      	strhlt	r3, [r4, #12]
 810d056:	bd10      	pop	{r4, pc}

0810d058 <__swrite>:
 810d058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810d05c:	461f      	mov	r7, r3
 810d05e:	898b      	ldrh	r3, [r1, #12]
 810d060:	05db      	lsls	r3, r3, #23
 810d062:	4605      	mov	r5, r0
 810d064:	460c      	mov	r4, r1
 810d066:	4616      	mov	r6, r2
 810d068:	d505      	bpl.n	810d076 <__swrite+0x1e>
 810d06a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810d06e:	2302      	movs	r3, #2
 810d070:	2200      	movs	r2, #0
 810d072:	f000 f89b 	bl	810d1ac <_lseek_r>
 810d076:	89a3      	ldrh	r3, [r4, #12]
 810d078:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810d07c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 810d080:	81a3      	strh	r3, [r4, #12]
 810d082:	4632      	mov	r2, r6
 810d084:	463b      	mov	r3, r7
 810d086:	4628      	mov	r0, r5
 810d088:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810d08c:	f000 b8c2 	b.w	810d214 <_write_r>

0810d090 <__sseek>:
 810d090:	b510      	push	{r4, lr}
 810d092:	460c      	mov	r4, r1
 810d094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810d098:	f000 f888 	bl	810d1ac <_lseek_r>
 810d09c:	1c43      	adds	r3, r0, #1
 810d09e:	89a3      	ldrh	r3, [r4, #12]
 810d0a0:	bf15      	itete	ne
 810d0a2:	6560      	strne	r0, [r4, #84]	; 0x54
 810d0a4:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 810d0a8:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 810d0ac:	81a3      	strheq	r3, [r4, #12]
 810d0ae:	bf18      	it	ne
 810d0b0:	81a3      	strhne	r3, [r4, #12]
 810d0b2:	bd10      	pop	{r4, pc}

0810d0b4 <__sclose>:
 810d0b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810d0b8:	f000 b868 	b.w	810d18c <_close_r>

0810d0bc <fiprintf>:
 810d0bc:	b40e      	push	{r1, r2, r3}
 810d0be:	b503      	push	{r0, r1, lr}
 810d0c0:	4601      	mov	r1, r0
 810d0c2:	ab03      	add	r3, sp, #12
 810d0c4:	4805      	ldr	r0, [pc, #20]	; (810d0dc <fiprintf+0x20>)
 810d0c6:	f853 2b04 	ldr.w	r2, [r3], #4
 810d0ca:	6800      	ldr	r0, [r0, #0]
 810d0cc:	9301      	str	r3, [sp, #4]
 810d0ce:	f000 f947 	bl	810d360 <_vfiprintf_r>
 810d0d2:	b002      	add	sp, #8
 810d0d4:	f85d eb04 	ldr.w	lr, [sp], #4
 810d0d8:	b003      	add	sp, #12
 810d0da:	4770      	bx	lr
 810d0dc:	100001d4 	.word	0x100001d4

0810d0e0 <_realloc_r>:
 810d0e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810d0e4:	4680      	mov	r8, r0
 810d0e6:	4614      	mov	r4, r2
 810d0e8:	460e      	mov	r6, r1
 810d0ea:	b921      	cbnz	r1, 810d0f6 <_realloc_r+0x16>
 810d0ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810d0f0:	4611      	mov	r1, r2
 810d0f2:	f7ff b9a7 	b.w	810c444 <_malloc_r>
 810d0f6:	b92a      	cbnz	r2, 810d104 <_realloc_r+0x24>
 810d0f8:	f000 f8bc 	bl	810d274 <_free_r>
 810d0fc:	4625      	mov	r5, r4
 810d0fe:	4628      	mov	r0, r5
 810d100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810d104:	f000 fa46 	bl	810d594 <_malloc_usable_size_r>
 810d108:	4284      	cmp	r4, r0
 810d10a:	4607      	mov	r7, r0
 810d10c:	d802      	bhi.n	810d114 <_realloc_r+0x34>
 810d10e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 810d112:	d812      	bhi.n	810d13a <_realloc_r+0x5a>
 810d114:	4621      	mov	r1, r4
 810d116:	4640      	mov	r0, r8
 810d118:	f7ff f994 	bl	810c444 <_malloc_r>
 810d11c:	4605      	mov	r5, r0
 810d11e:	2800      	cmp	r0, #0
 810d120:	d0ed      	beq.n	810d0fe <_realloc_r+0x1e>
 810d122:	42bc      	cmp	r4, r7
 810d124:	4622      	mov	r2, r4
 810d126:	4631      	mov	r1, r6
 810d128:	bf28      	it	cs
 810d12a:	463a      	movcs	r2, r7
 810d12c:	f7fd fdfe 	bl	810ad2c <memcpy>
 810d130:	4631      	mov	r1, r6
 810d132:	4640      	mov	r0, r8
 810d134:	f000 f89e 	bl	810d274 <_free_r>
 810d138:	e7e1      	b.n	810d0fe <_realloc_r+0x1e>
 810d13a:	4635      	mov	r5, r6
 810d13c:	e7df      	b.n	810d0fe <_realloc_r+0x1e>

0810d13e <__ascii_wctomb>:
 810d13e:	b149      	cbz	r1, 810d154 <__ascii_wctomb+0x16>
 810d140:	2aff      	cmp	r2, #255	; 0xff
 810d142:	bf85      	ittet	hi
 810d144:	238a      	movhi	r3, #138	; 0x8a
 810d146:	6003      	strhi	r3, [r0, #0]
 810d148:	700a      	strbls	r2, [r1, #0]
 810d14a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 810d14e:	bf98      	it	ls
 810d150:	2001      	movls	r0, #1
 810d152:	4770      	bx	lr
 810d154:	4608      	mov	r0, r1
 810d156:	4770      	bx	lr

0810d158 <memmove>:
 810d158:	4288      	cmp	r0, r1
 810d15a:	b510      	push	{r4, lr}
 810d15c:	eb01 0402 	add.w	r4, r1, r2
 810d160:	d902      	bls.n	810d168 <memmove+0x10>
 810d162:	4284      	cmp	r4, r0
 810d164:	4623      	mov	r3, r4
 810d166:	d807      	bhi.n	810d178 <memmove+0x20>
 810d168:	1e43      	subs	r3, r0, #1
 810d16a:	42a1      	cmp	r1, r4
 810d16c:	d008      	beq.n	810d180 <memmove+0x28>
 810d16e:	f811 2b01 	ldrb.w	r2, [r1], #1
 810d172:	f803 2f01 	strb.w	r2, [r3, #1]!
 810d176:	e7f8      	b.n	810d16a <memmove+0x12>
 810d178:	4402      	add	r2, r0
 810d17a:	4601      	mov	r1, r0
 810d17c:	428a      	cmp	r2, r1
 810d17e:	d100      	bne.n	810d182 <memmove+0x2a>
 810d180:	bd10      	pop	{r4, pc}
 810d182:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810d186:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810d18a:	e7f7      	b.n	810d17c <memmove+0x24>

0810d18c <_close_r>:
 810d18c:	b538      	push	{r3, r4, r5, lr}
 810d18e:	4d06      	ldr	r5, [pc, #24]	; (810d1a8 <_close_r+0x1c>)
 810d190:	2300      	movs	r3, #0
 810d192:	4604      	mov	r4, r0
 810d194:	4608      	mov	r0, r1
 810d196:	602b      	str	r3, [r5, #0]
 810d198:	f7f5 f811 	bl	81021be <_close>
 810d19c:	1c43      	adds	r3, r0, #1
 810d19e:	d102      	bne.n	810d1a6 <_close_r+0x1a>
 810d1a0:	682b      	ldr	r3, [r5, #0]
 810d1a2:	b103      	cbz	r3, 810d1a6 <_close_r+0x1a>
 810d1a4:	6023      	str	r3, [r4, #0]
 810d1a6:	bd38      	pop	{r3, r4, r5, pc}
 810d1a8:	100004c0 	.word	0x100004c0

0810d1ac <_lseek_r>:
 810d1ac:	b538      	push	{r3, r4, r5, lr}
 810d1ae:	4d07      	ldr	r5, [pc, #28]	; (810d1cc <_lseek_r+0x20>)
 810d1b0:	4604      	mov	r4, r0
 810d1b2:	4608      	mov	r0, r1
 810d1b4:	4611      	mov	r1, r2
 810d1b6:	2200      	movs	r2, #0
 810d1b8:	602a      	str	r2, [r5, #0]
 810d1ba:	461a      	mov	r2, r3
 810d1bc:	f7f5 f826 	bl	810220c <_lseek>
 810d1c0:	1c43      	adds	r3, r0, #1
 810d1c2:	d102      	bne.n	810d1ca <_lseek_r+0x1e>
 810d1c4:	682b      	ldr	r3, [r5, #0]
 810d1c6:	b103      	cbz	r3, 810d1ca <_lseek_r+0x1e>
 810d1c8:	6023      	str	r3, [r4, #0]
 810d1ca:	bd38      	pop	{r3, r4, r5, pc}
 810d1cc:	100004c0 	.word	0x100004c0

0810d1d0 <_read_r>:
 810d1d0:	b538      	push	{r3, r4, r5, lr}
 810d1d2:	4d07      	ldr	r5, [pc, #28]	; (810d1f0 <_read_r+0x20>)
 810d1d4:	4604      	mov	r4, r0
 810d1d6:	4608      	mov	r0, r1
 810d1d8:	4611      	mov	r1, r2
 810d1da:	2200      	movs	r2, #0
 810d1dc:	602a      	str	r2, [r5, #0]
 810d1de:	461a      	mov	r2, r3
 810d1e0:	f7f4 ffb2 	bl	8102148 <_read>
 810d1e4:	1c43      	adds	r3, r0, #1
 810d1e6:	d102      	bne.n	810d1ee <_read_r+0x1e>
 810d1e8:	682b      	ldr	r3, [r5, #0]
 810d1ea:	b103      	cbz	r3, 810d1ee <_read_r+0x1e>
 810d1ec:	6023      	str	r3, [r4, #0]
 810d1ee:	bd38      	pop	{r3, r4, r5, pc}
 810d1f0:	100004c0 	.word	0x100004c0

0810d1f4 <_sbrk_r>:
 810d1f4:	b538      	push	{r3, r4, r5, lr}
 810d1f6:	4d06      	ldr	r5, [pc, #24]	; (810d210 <_sbrk_r+0x1c>)
 810d1f8:	2300      	movs	r3, #0
 810d1fa:	4604      	mov	r4, r0
 810d1fc:	4608      	mov	r0, r1
 810d1fe:	602b      	str	r3, [r5, #0]
 810d200:	f7f5 f812 	bl	8102228 <_sbrk>
 810d204:	1c43      	adds	r3, r0, #1
 810d206:	d102      	bne.n	810d20e <_sbrk_r+0x1a>
 810d208:	682b      	ldr	r3, [r5, #0]
 810d20a:	b103      	cbz	r3, 810d20e <_sbrk_r+0x1a>
 810d20c:	6023      	str	r3, [r4, #0]
 810d20e:	bd38      	pop	{r3, r4, r5, pc}
 810d210:	100004c0 	.word	0x100004c0

0810d214 <_write_r>:
 810d214:	b538      	push	{r3, r4, r5, lr}
 810d216:	4d07      	ldr	r5, [pc, #28]	; (810d234 <_write_r+0x20>)
 810d218:	4604      	mov	r4, r0
 810d21a:	4608      	mov	r0, r1
 810d21c:	4611      	mov	r1, r2
 810d21e:	2200      	movs	r2, #0
 810d220:	602a      	str	r2, [r5, #0]
 810d222:	461a      	mov	r2, r3
 810d224:	f7f4 ffaf 	bl	8102186 <_write>
 810d228:	1c43      	adds	r3, r0, #1
 810d22a:	d102      	bne.n	810d232 <_write_r+0x1e>
 810d22c:	682b      	ldr	r3, [r5, #0]
 810d22e:	b103      	cbz	r3, 810d232 <_write_r+0x1e>
 810d230:	6023      	str	r3, [r4, #0]
 810d232:	bd38      	pop	{r3, r4, r5, pc}
 810d234:	100004c0 	.word	0x100004c0

0810d238 <abort>:
 810d238:	b508      	push	{r3, lr}
 810d23a:	2006      	movs	r0, #6
 810d23c:	f000 faf4 	bl	810d828 <raise>
 810d240:	2001      	movs	r0, #1
 810d242:	f7f4 ff77 	bl	8102134 <_exit>

0810d246 <_calloc_r>:
 810d246:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810d248:	fba1 2402 	umull	r2, r4, r1, r2
 810d24c:	b94c      	cbnz	r4, 810d262 <_calloc_r+0x1c>
 810d24e:	4611      	mov	r1, r2
 810d250:	9201      	str	r2, [sp, #4]
 810d252:	f7ff f8f7 	bl	810c444 <_malloc_r>
 810d256:	9a01      	ldr	r2, [sp, #4]
 810d258:	4605      	mov	r5, r0
 810d25a:	b930      	cbnz	r0, 810d26a <_calloc_r+0x24>
 810d25c:	4628      	mov	r0, r5
 810d25e:	b003      	add	sp, #12
 810d260:	bd30      	pop	{r4, r5, pc}
 810d262:	220c      	movs	r2, #12
 810d264:	6002      	str	r2, [r0, #0]
 810d266:	2500      	movs	r5, #0
 810d268:	e7f8      	b.n	810d25c <_calloc_r+0x16>
 810d26a:	4621      	mov	r1, r4
 810d26c:	f7fd fcfa 	bl	810ac64 <memset>
 810d270:	e7f4      	b.n	810d25c <_calloc_r+0x16>
	...

0810d274 <_free_r>:
 810d274:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810d276:	2900      	cmp	r1, #0
 810d278:	d044      	beq.n	810d304 <_free_r+0x90>
 810d27a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810d27e:	9001      	str	r0, [sp, #4]
 810d280:	2b00      	cmp	r3, #0
 810d282:	f1a1 0404 	sub.w	r4, r1, #4
 810d286:	bfb8      	it	lt
 810d288:	18e4      	addlt	r4, r4, r3
 810d28a:	f7ff fa1b 	bl	810c6c4 <__malloc_lock>
 810d28e:	4a1e      	ldr	r2, [pc, #120]	; (810d308 <_free_r+0x94>)
 810d290:	9801      	ldr	r0, [sp, #4]
 810d292:	6813      	ldr	r3, [r2, #0]
 810d294:	b933      	cbnz	r3, 810d2a4 <_free_r+0x30>
 810d296:	6063      	str	r3, [r4, #4]
 810d298:	6014      	str	r4, [r2, #0]
 810d29a:	b003      	add	sp, #12
 810d29c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 810d2a0:	f7ff ba16 	b.w	810c6d0 <__malloc_unlock>
 810d2a4:	42a3      	cmp	r3, r4
 810d2a6:	d908      	bls.n	810d2ba <_free_r+0x46>
 810d2a8:	6825      	ldr	r5, [r4, #0]
 810d2aa:	1961      	adds	r1, r4, r5
 810d2ac:	428b      	cmp	r3, r1
 810d2ae:	bf01      	itttt	eq
 810d2b0:	6819      	ldreq	r1, [r3, #0]
 810d2b2:	685b      	ldreq	r3, [r3, #4]
 810d2b4:	1949      	addeq	r1, r1, r5
 810d2b6:	6021      	streq	r1, [r4, #0]
 810d2b8:	e7ed      	b.n	810d296 <_free_r+0x22>
 810d2ba:	461a      	mov	r2, r3
 810d2bc:	685b      	ldr	r3, [r3, #4]
 810d2be:	b10b      	cbz	r3, 810d2c4 <_free_r+0x50>
 810d2c0:	42a3      	cmp	r3, r4
 810d2c2:	d9fa      	bls.n	810d2ba <_free_r+0x46>
 810d2c4:	6811      	ldr	r1, [r2, #0]
 810d2c6:	1855      	adds	r5, r2, r1
 810d2c8:	42a5      	cmp	r5, r4
 810d2ca:	d10b      	bne.n	810d2e4 <_free_r+0x70>
 810d2cc:	6824      	ldr	r4, [r4, #0]
 810d2ce:	4421      	add	r1, r4
 810d2d0:	1854      	adds	r4, r2, r1
 810d2d2:	42a3      	cmp	r3, r4
 810d2d4:	6011      	str	r1, [r2, #0]
 810d2d6:	d1e0      	bne.n	810d29a <_free_r+0x26>
 810d2d8:	681c      	ldr	r4, [r3, #0]
 810d2da:	685b      	ldr	r3, [r3, #4]
 810d2dc:	6053      	str	r3, [r2, #4]
 810d2de:	440c      	add	r4, r1
 810d2e0:	6014      	str	r4, [r2, #0]
 810d2e2:	e7da      	b.n	810d29a <_free_r+0x26>
 810d2e4:	d902      	bls.n	810d2ec <_free_r+0x78>
 810d2e6:	230c      	movs	r3, #12
 810d2e8:	6003      	str	r3, [r0, #0]
 810d2ea:	e7d6      	b.n	810d29a <_free_r+0x26>
 810d2ec:	6825      	ldr	r5, [r4, #0]
 810d2ee:	1961      	adds	r1, r4, r5
 810d2f0:	428b      	cmp	r3, r1
 810d2f2:	bf04      	itt	eq
 810d2f4:	6819      	ldreq	r1, [r3, #0]
 810d2f6:	685b      	ldreq	r3, [r3, #4]
 810d2f8:	6063      	str	r3, [r4, #4]
 810d2fa:	bf04      	itt	eq
 810d2fc:	1949      	addeq	r1, r1, r5
 810d2fe:	6021      	streq	r1, [r4, #0]
 810d300:	6054      	str	r4, [r2, #4]
 810d302:	e7ca      	b.n	810d29a <_free_r+0x26>
 810d304:	b003      	add	sp, #12
 810d306:	bd30      	pop	{r4, r5, pc}
 810d308:	100004b8 	.word	0x100004b8

0810d30c <__sfputc_r>:
 810d30c:	6893      	ldr	r3, [r2, #8]
 810d30e:	3b01      	subs	r3, #1
 810d310:	2b00      	cmp	r3, #0
 810d312:	b410      	push	{r4}
 810d314:	6093      	str	r3, [r2, #8]
 810d316:	da08      	bge.n	810d32a <__sfputc_r+0x1e>
 810d318:	6994      	ldr	r4, [r2, #24]
 810d31a:	42a3      	cmp	r3, r4
 810d31c:	db01      	blt.n	810d322 <__sfputc_r+0x16>
 810d31e:	290a      	cmp	r1, #10
 810d320:	d103      	bne.n	810d32a <__sfputc_r+0x1e>
 810d322:	f85d 4b04 	ldr.w	r4, [sp], #4
 810d326:	f000 b93d 	b.w	810d5a4 <__swbuf_r>
 810d32a:	6813      	ldr	r3, [r2, #0]
 810d32c:	1c58      	adds	r0, r3, #1
 810d32e:	6010      	str	r0, [r2, #0]
 810d330:	7019      	strb	r1, [r3, #0]
 810d332:	4608      	mov	r0, r1
 810d334:	f85d 4b04 	ldr.w	r4, [sp], #4
 810d338:	4770      	bx	lr

0810d33a <__sfputs_r>:
 810d33a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810d33c:	4606      	mov	r6, r0
 810d33e:	460f      	mov	r7, r1
 810d340:	4614      	mov	r4, r2
 810d342:	18d5      	adds	r5, r2, r3
 810d344:	42ac      	cmp	r4, r5
 810d346:	d101      	bne.n	810d34c <__sfputs_r+0x12>
 810d348:	2000      	movs	r0, #0
 810d34a:	e007      	b.n	810d35c <__sfputs_r+0x22>
 810d34c:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d350:	463a      	mov	r2, r7
 810d352:	4630      	mov	r0, r6
 810d354:	f7ff ffda 	bl	810d30c <__sfputc_r>
 810d358:	1c43      	adds	r3, r0, #1
 810d35a:	d1f3      	bne.n	810d344 <__sfputs_r+0xa>
 810d35c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0810d360 <_vfiprintf_r>:
 810d360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d364:	460d      	mov	r5, r1
 810d366:	b09d      	sub	sp, #116	; 0x74
 810d368:	4614      	mov	r4, r2
 810d36a:	4698      	mov	r8, r3
 810d36c:	4606      	mov	r6, r0
 810d36e:	b118      	cbz	r0, 810d378 <_vfiprintf_r+0x18>
 810d370:	6a03      	ldr	r3, [r0, #32]
 810d372:	b90b      	cbnz	r3, 810d378 <_vfiprintf_r+0x18>
 810d374:	f7fc fd98 	bl	8109ea8 <__sinit>
 810d378:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810d37a:	07d9      	lsls	r1, r3, #31
 810d37c:	d405      	bmi.n	810d38a <_vfiprintf_r+0x2a>
 810d37e:	89ab      	ldrh	r3, [r5, #12]
 810d380:	059a      	lsls	r2, r3, #22
 810d382:	d402      	bmi.n	810d38a <_vfiprintf_r+0x2a>
 810d384:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810d386:	f7fd fccf 	bl	810ad28 <__retarget_lock_acquire_recursive>
 810d38a:	89ab      	ldrh	r3, [r5, #12]
 810d38c:	071b      	lsls	r3, r3, #28
 810d38e:	d501      	bpl.n	810d394 <_vfiprintf_r+0x34>
 810d390:	692b      	ldr	r3, [r5, #16]
 810d392:	b99b      	cbnz	r3, 810d3bc <_vfiprintf_r+0x5c>
 810d394:	4629      	mov	r1, r5
 810d396:	4630      	mov	r0, r6
 810d398:	f000 f942 	bl	810d620 <__swsetup_r>
 810d39c:	b170      	cbz	r0, 810d3bc <_vfiprintf_r+0x5c>
 810d39e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810d3a0:	07dc      	lsls	r4, r3, #31
 810d3a2:	d504      	bpl.n	810d3ae <_vfiprintf_r+0x4e>
 810d3a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810d3a8:	b01d      	add	sp, #116	; 0x74
 810d3aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810d3ae:	89ab      	ldrh	r3, [r5, #12]
 810d3b0:	0598      	lsls	r0, r3, #22
 810d3b2:	d4f7      	bmi.n	810d3a4 <_vfiprintf_r+0x44>
 810d3b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810d3b6:	f7fd fcb8 	bl	810ad2a <__retarget_lock_release_recursive>
 810d3ba:	e7f3      	b.n	810d3a4 <_vfiprintf_r+0x44>
 810d3bc:	2300      	movs	r3, #0
 810d3be:	9309      	str	r3, [sp, #36]	; 0x24
 810d3c0:	2320      	movs	r3, #32
 810d3c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810d3c6:	f8cd 800c 	str.w	r8, [sp, #12]
 810d3ca:	2330      	movs	r3, #48	; 0x30
 810d3cc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 810d580 <_vfiprintf_r+0x220>
 810d3d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810d3d4:	f04f 0901 	mov.w	r9, #1
 810d3d8:	4623      	mov	r3, r4
 810d3da:	469a      	mov	sl, r3
 810d3dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 810d3e0:	b10a      	cbz	r2, 810d3e6 <_vfiprintf_r+0x86>
 810d3e2:	2a25      	cmp	r2, #37	; 0x25
 810d3e4:	d1f9      	bne.n	810d3da <_vfiprintf_r+0x7a>
 810d3e6:	ebba 0b04 	subs.w	fp, sl, r4
 810d3ea:	d00b      	beq.n	810d404 <_vfiprintf_r+0xa4>
 810d3ec:	465b      	mov	r3, fp
 810d3ee:	4622      	mov	r2, r4
 810d3f0:	4629      	mov	r1, r5
 810d3f2:	4630      	mov	r0, r6
 810d3f4:	f7ff ffa1 	bl	810d33a <__sfputs_r>
 810d3f8:	3001      	adds	r0, #1
 810d3fa:	f000 80a9 	beq.w	810d550 <_vfiprintf_r+0x1f0>
 810d3fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810d400:	445a      	add	r2, fp
 810d402:	9209      	str	r2, [sp, #36]	; 0x24
 810d404:	f89a 3000 	ldrb.w	r3, [sl]
 810d408:	2b00      	cmp	r3, #0
 810d40a:	f000 80a1 	beq.w	810d550 <_vfiprintf_r+0x1f0>
 810d40e:	2300      	movs	r3, #0
 810d410:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810d414:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810d418:	f10a 0a01 	add.w	sl, sl, #1
 810d41c:	9304      	str	r3, [sp, #16]
 810d41e:	9307      	str	r3, [sp, #28]
 810d420:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810d424:	931a      	str	r3, [sp, #104]	; 0x68
 810d426:	4654      	mov	r4, sl
 810d428:	2205      	movs	r2, #5
 810d42a:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d42e:	4854      	ldr	r0, [pc, #336]	; (810d580 <_vfiprintf_r+0x220>)
 810d430:	f7f2 ff56 	bl	81002e0 <memchr>
 810d434:	9a04      	ldr	r2, [sp, #16]
 810d436:	b9d8      	cbnz	r0, 810d470 <_vfiprintf_r+0x110>
 810d438:	06d1      	lsls	r1, r2, #27
 810d43a:	bf44      	itt	mi
 810d43c:	2320      	movmi	r3, #32
 810d43e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810d442:	0713      	lsls	r3, r2, #28
 810d444:	bf44      	itt	mi
 810d446:	232b      	movmi	r3, #43	; 0x2b
 810d448:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810d44c:	f89a 3000 	ldrb.w	r3, [sl]
 810d450:	2b2a      	cmp	r3, #42	; 0x2a
 810d452:	d015      	beq.n	810d480 <_vfiprintf_r+0x120>
 810d454:	9a07      	ldr	r2, [sp, #28]
 810d456:	4654      	mov	r4, sl
 810d458:	2000      	movs	r0, #0
 810d45a:	f04f 0c0a 	mov.w	ip, #10
 810d45e:	4621      	mov	r1, r4
 810d460:	f811 3b01 	ldrb.w	r3, [r1], #1
 810d464:	3b30      	subs	r3, #48	; 0x30
 810d466:	2b09      	cmp	r3, #9
 810d468:	d94d      	bls.n	810d506 <_vfiprintf_r+0x1a6>
 810d46a:	b1b0      	cbz	r0, 810d49a <_vfiprintf_r+0x13a>
 810d46c:	9207      	str	r2, [sp, #28]
 810d46e:	e014      	b.n	810d49a <_vfiprintf_r+0x13a>
 810d470:	eba0 0308 	sub.w	r3, r0, r8
 810d474:	fa09 f303 	lsl.w	r3, r9, r3
 810d478:	4313      	orrs	r3, r2
 810d47a:	9304      	str	r3, [sp, #16]
 810d47c:	46a2      	mov	sl, r4
 810d47e:	e7d2      	b.n	810d426 <_vfiprintf_r+0xc6>
 810d480:	9b03      	ldr	r3, [sp, #12]
 810d482:	1d19      	adds	r1, r3, #4
 810d484:	681b      	ldr	r3, [r3, #0]
 810d486:	9103      	str	r1, [sp, #12]
 810d488:	2b00      	cmp	r3, #0
 810d48a:	bfbb      	ittet	lt
 810d48c:	425b      	neglt	r3, r3
 810d48e:	f042 0202 	orrlt.w	r2, r2, #2
 810d492:	9307      	strge	r3, [sp, #28]
 810d494:	9307      	strlt	r3, [sp, #28]
 810d496:	bfb8      	it	lt
 810d498:	9204      	strlt	r2, [sp, #16]
 810d49a:	7823      	ldrb	r3, [r4, #0]
 810d49c:	2b2e      	cmp	r3, #46	; 0x2e
 810d49e:	d10c      	bne.n	810d4ba <_vfiprintf_r+0x15a>
 810d4a0:	7863      	ldrb	r3, [r4, #1]
 810d4a2:	2b2a      	cmp	r3, #42	; 0x2a
 810d4a4:	d134      	bne.n	810d510 <_vfiprintf_r+0x1b0>
 810d4a6:	9b03      	ldr	r3, [sp, #12]
 810d4a8:	1d1a      	adds	r2, r3, #4
 810d4aa:	681b      	ldr	r3, [r3, #0]
 810d4ac:	9203      	str	r2, [sp, #12]
 810d4ae:	2b00      	cmp	r3, #0
 810d4b0:	bfb8      	it	lt
 810d4b2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 810d4b6:	3402      	adds	r4, #2
 810d4b8:	9305      	str	r3, [sp, #20]
 810d4ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 810d590 <_vfiprintf_r+0x230>
 810d4be:	7821      	ldrb	r1, [r4, #0]
 810d4c0:	2203      	movs	r2, #3
 810d4c2:	4650      	mov	r0, sl
 810d4c4:	f7f2 ff0c 	bl	81002e0 <memchr>
 810d4c8:	b138      	cbz	r0, 810d4da <_vfiprintf_r+0x17a>
 810d4ca:	9b04      	ldr	r3, [sp, #16]
 810d4cc:	eba0 000a 	sub.w	r0, r0, sl
 810d4d0:	2240      	movs	r2, #64	; 0x40
 810d4d2:	4082      	lsls	r2, r0
 810d4d4:	4313      	orrs	r3, r2
 810d4d6:	3401      	adds	r4, #1
 810d4d8:	9304      	str	r3, [sp, #16]
 810d4da:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d4de:	4829      	ldr	r0, [pc, #164]	; (810d584 <_vfiprintf_r+0x224>)
 810d4e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810d4e4:	2206      	movs	r2, #6
 810d4e6:	f7f2 fefb 	bl	81002e0 <memchr>
 810d4ea:	2800      	cmp	r0, #0
 810d4ec:	d03f      	beq.n	810d56e <_vfiprintf_r+0x20e>
 810d4ee:	4b26      	ldr	r3, [pc, #152]	; (810d588 <_vfiprintf_r+0x228>)
 810d4f0:	bb1b      	cbnz	r3, 810d53a <_vfiprintf_r+0x1da>
 810d4f2:	9b03      	ldr	r3, [sp, #12]
 810d4f4:	3307      	adds	r3, #7
 810d4f6:	f023 0307 	bic.w	r3, r3, #7
 810d4fa:	3308      	adds	r3, #8
 810d4fc:	9303      	str	r3, [sp, #12]
 810d4fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810d500:	443b      	add	r3, r7
 810d502:	9309      	str	r3, [sp, #36]	; 0x24
 810d504:	e768      	b.n	810d3d8 <_vfiprintf_r+0x78>
 810d506:	fb0c 3202 	mla	r2, ip, r2, r3
 810d50a:	460c      	mov	r4, r1
 810d50c:	2001      	movs	r0, #1
 810d50e:	e7a6      	b.n	810d45e <_vfiprintf_r+0xfe>
 810d510:	2300      	movs	r3, #0
 810d512:	3401      	adds	r4, #1
 810d514:	9305      	str	r3, [sp, #20]
 810d516:	4619      	mov	r1, r3
 810d518:	f04f 0c0a 	mov.w	ip, #10
 810d51c:	4620      	mov	r0, r4
 810d51e:	f810 2b01 	ldrb.w	r2, [r0], #1
 810d522:	3a30      	subs	r2, #48	; 0x30
 810d524:	2a09      	cmp	r2, #9
 810d526:	d903      	bls.n	810d530 <_vfiprintf_r+0x1d0>
 810d528:	2b00      	cmp	r3, #0
 810d52a:	d0c6      	beq.n	810d4ba <_vfiprintf_r+0x15a>
 810d52c:	9105      	str	r1, [sp, #20]
 810d52e:	e7c4      	b.n	810d4ba <_vfiprintf_r+0x15a>
 810d530:	fb0c 2101 	mla	r1, ip, r1, r2
 810d534:	4604      	mov	r4, r0
 810d536:	2301      	movs	r3, #1
 810d538:	e7f0      	b.n	810d51c <_vfiprintf_r+0x1bc>
 810d53a:	ab03      	add	r3, sp, #12
 810d53c:	9300      	str	r3, [sp, #0]
 810d53e:	462a      	mov	r2, r5
 810d540:	4b12      	ldr	r3, [pc, #72]	; (810d58c <_vfiprintf_r+0x22c>)
 810d542:	a904      	add	r1, sp, #16
 810d544:	4630      	mov	r0, r6
 810d546:	f7fb fdd3 	bl	81090f0 <_printf_float>
 810d54a:	4607      	mov	r7, r0
 810d54c:	1c78      	adds	r0, r7, #1
 810d54e:	d1d6      	bne.n	810d4fe <_vfiprintf_r+0x19e>
 810d550:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810d552:	07d9      	lsls	r1, r3, #31
 810d554:	d405      	bmi.n	810d562 <_vfiprintf_r+0x202>
 810d556:	89ab      	ldrh	r3, [r5, #12]
 810d558:	059a      	lsls	r2, r3, #22
 810d55a:	d402      	bmi.n	810d562 <_vfiprintf_r+0x202>
 810d55c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810d55e:	f7fd fbe4 	bl	810ad2a <__retarget_lock_release_recursive>
 810d562:	89ab      	ldrh	r3, [r5, #12]
 810d564:	065b      	lsls	r3, r3, #25
 810d566:	f53f af1d 	bmi.w	810d3a4 <_vfiprintf_r+0x44>
 810d56a:	9809      	ldr	r0, [sp, #36]	; 0x24
 810d56c:	e71c      	b.n	810d3a8 <_vfiprintf_r+0x48>
 810d56e:	ab03      	add	r3, sp, #12
 810d570:	9300      	str	r3, [sp, #0]
 810d572:	462a      	mov	r2, r5
 810d574:	4b05      	ldr	r3, [pc, #20]	; (810d58c <_vfiprintf_r+0x22c>)
 810d576:	a904      	add	r1, sp, #16
 810d578:	4630      	mov	r0, r6
 810d57a:	f7fc f85d 	bl	8109638 <_printf_i>
 810d57e:	e7e4      	b.n	810d54a <_vfiprintf_r+0x1ea>
 810d580:	0810eaa3 	.word	0x0810eaa3
 810d584:	0810eaad 	.word	0x0810eaad
 810d588:	081090f1 	.word	0x081090f1
 810d58c:	0810d33b 	.word	0x0810d33b
 810d590:	0810eaa9 	.word	0x0810eaa9

0810d594 <_malloc_usable_size_r>:
 810d594:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810d598:	1f18      	subs	r0, r3, #4
 810d59a:	2b00      	cmp	r3, #0
 810d59c:	bfbc      	itt	lt
 810d59e:	580b      	ldrlt	r3, [r1, r0]
 810d5a0:	18c0      	addlt	r0, r0, r3
 810d5a2:	4770      	bx	lr

0810d5a4 <__swbuf_r>:
 810d5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810d5a6:	460e      	mov	r6, r1
 810d5a8:	4614      	mov	r4, r2
 810d5aa:	4605      	mov	r5, r0
 810d5ac:	b118      	cbz	r0, 810d5b6 <__swbuf_r+0x12>
 810d5ae:	6a03      	ldr	r3, [r0, #32]
 810d5b0:	b90b      	cbnz	r3, 810d5b6 <__swbuf_r+0x12>
 810d5b2:	f7fc fc79 	bl	8109ea8 <__sinit>
 810d5b6:	69a3      	ldr	r3, [r4, #24]
 810d5b8:	60a3      	str	r3, [r4, #8]
 810d5ba:	89a3      	ldrh	r3, [r4, #12]
 810d5bc:	071a      	lsls	r2, r3, #28
 810d5be:	d525      	bpl.n	810d60c <__swbuf_r+0x68>
 810d5c0:	6923      	ldr	r3, [r4, #16]
 810d5c2:	b31b      	cbz	r3, 810d60c <__swbuf_r+0x68>
 810d5c4:	6823      	ldr	r3, [r4, #0]
 810d5c6:	6922      	ldr	r2, [r4, #16]
 810d5c8:	1a98      	subs	r0, r3, r2
 810d5ca:	6963      	ldr	r3, [r4, #20]
 810d5cc:	b2f6      	uxtb	r6, r6
 810d5ce:	4283      	cmp	r3, r0
 810d5d0:	4637      	mov	r7, r6
 810d5d2:	dc04      	bgt.n	810d5de <__swbuf_r+0x3a>
 810d5d4:	4621      	mov	r1, r4
 810d5d6:	4628      	mov	r0, r5
 810d5d8:	f7ff f84c 	bl	810c674 <_fflush_r>
 810d5dc:	b9e0      	cbnz	r0, 810d618 <__swbuf_r+0x74>
 810d5de:	68a3      	ldr	r3, [r4, #8]
 810d5e0:	3b01      	subs	r3, #1
 810d5e2:	60a3      	str	r3, [r4, #8]
 810d5e4:	6823      	ldr	r3, [r4, #0]
 810d5e6:	1c5a      	adds	r2, r3, #1
 810d5e8:	6022      	str	r2, [r4, #0]
 810d5ea:	701e      	strb	r6, [r3, #0]
 810d5ec:	6962      	ldr	r2, [r4, #20]
 810d5ee:	1c43      	adds	r3, r0, #1
 810d5f0:	429a      	cmp	r2, r3
 810d5f2:	d004      	beq.n	810d5fe <__swbuf_r+0x5a>
 810d5f4:	89a3      	ldrh	r3, [r4, #12]
 810d5f6:	07db      	lsls	r3, r3, #31
 810d5f8:	d506      	bpl.n	810d608 <__swbuf_r+0x64>
 810d5fa:	2e0a      	cmp	r6, #10
 810d5fc:	d104      	bne.n	810d608 <__swbuf_r+0x64>
 810d5fe:	4621      	mov	r1, r4
 810d600:	4628      	mov	r0, r5
 810d602:	f7ff f837 	bl	810c674 <_fflush_r>
 810d606:	b938      	cbnz	r0, 810d618 <__swbuf_r+0x74>
 810d608:	4638      	mov	r0, r7
 810d60a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810d60c:	4621      	mov	r1, r4
 810d60e:	4628      	mov	r0, r5
 810d610:	f000 f806 	bl	810d620 <__swsetup_r>
 810d614:	2800      	cmp	r0, #0
 810d616:	d0d5      	beq.n	810d5c4 <__swbuf_r+0x20>
 810d618:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 810d61c:	e7f4      	b.n	810d608 <__swbuf_r+0x64>
	...

0810d620 <__swsetup_r>:
 810d620:	b538      	push	{r3, r4, r5, lr}
 810d622:	4b2a      	ldr	r3, [pc, #168]	; (810d6cc <__swsetup_r+0xac>)
 810d624:	4605      	mov	r5, r0
 810d626:	6818      	ldr	r0, [r3, #0]
 810d628:	460c      	mov	r4, r1
 810d62a:	b118      	cbz	r0, 810d634 <__swsetup_r+0x14>
 810d62c:	6a03      	ldr	r3, [r0, #32]
 810d62e:	b90b      	cbnz	r3, 810d634 <__swsetup_r+0x14>
 810d630:	f7fc fc3a 	bl	8109ea8 <__sinit>
 810d634:	89a3      	ldrh	r3, [r4, #12]
 810d636:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810d63a:	0718      	lsls	r0, r3, #28
 810d63c:	d422      	bmi.n	810d684 <__swsetup_r+0x64>
 810d63e:	06d9      	lsls	r1, r3, #27
 810d640:	d407      	bmi.n	810d652 <__swsetup_r+0x32>
 810d642:	2309      	movs	r3, #9
 810d644:	602b      	str	r3, [r5, #0]
 810d646:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 810d64a:	81a3      	strh	r3, [r4, #12]
 810d64c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810d650:	e034      	b.n	810d6bc <__swsetup_r+0x9c>
 810d652:	0758      	lsls	r0, r3, #29
 810d654:	d512      	bpl.n	810d67c <__swsetup_r+0x5c>
 810d656:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810d658:	b141      	cbz	r1, 810d66c <__swsetup_r+0x4c>
 810d65a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810d65e:	4299      	cmp	r1, r3
 810d660:	d002      	beq.n	810d668 <__swsetup_r+0x48>
 810d662:	4628      	mov	r0, r5
 810d664:	f7ff fe06 	bl	810d274 <_free_r>
 810d668:	2300      	movs	r3, #0
 810d66a:	6363      	str	r3, [r4, #52]	; 0x34
 810d66c:	89a3      	ldrh	r3, [r4, #12]
 810d66e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 810d672:	81a3      	strh	r3, [r4, #12]
 810d674:	2300      	movs	r3, #0
 810d676:	6063      	str	r3, [r4, #4]
 810d678:	6923      	ldr	r3, [r4, #16]
 810d67a:	6023      	str	r3, [r4, #0]
 810d67c:	89a3      	ldrh	r3, [r4, #12]
 810d67e:	f043 0308 	orr.w	r3, r3, #8
 810d682:	81a3      	strh	r3, [r4, #12]
 810d684:	6923      	ldr	r3, [r4, #16]
 810d686:	b94b      	cbnz	r3, 810d69c <__swsetup_r+0x7c>
 810d688:	89a3      	ldrh	r3, [r4, #12]
 810d68a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 810d68e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810d692:	d003      	beq.n	810d69c <__swsetup_r+0x7c>
 810d694:	4621      	mov	r1, r4
 810d696:	4628      	mov	r0, r5
 810d698:	f000 f840 	bl	810d71c <__smakebuf_r>
 810d69c:	89a0      	ldrh	r0, [r4, #12]
 810d69e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810d6a2:	f010 0301 	ands.w	r3, r0, #1
 810d6a6:	d00a      	beq.n	810d6be <__swsetup_r+0x9e>
 810d6a8:	2300      	movs	r3, #0
 810d6aa:	60a3      	str	r3, [r4, #8]
 810d6ac:	6963      	ldr	r3, [r4, #20]
 810d6ae:	425b      	negs	r3, r3
 810d6b0:	61a3      	str	r3, [r4, #24]
 810d6b2:	6923      	ldr	r3, [r4, #16]
 810d6b4:	b943      	cbnz	r3, 810d6c8 <__swsetup_r+0xa8>
 810d6b6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 810d6ba:	d1c4      	bne.n	810d646 <__swsetup_r+0x26>
 810d6bc:	bd38      	pop	{r3, r4, r5, pc}
 810d6be:	0781      	lsls	r1, r0, #30
 810d6c0:	bf58      	it	pl
 810d6c2:	6963      	ldrpl	r3, [r4, #20]
 810d6c4:	60a3      	str	r3, [r4, #8]
 810d6c6:	e7f4      	b.n	810d6b2 <__swsetup_r+0x92>
 810d6c8:	2000      	movs	r0, #0
 810d6ca:	e7f7      	b.n	810d6bc <__swsetup_r+0x9c>
 810d6cc:	100001d4 	.word	0x100001d4

0810d6d0 <__swhatbuf_r>:
 810d6d0:	b570      	push	{r4, r5, r6, lr}
 810d6d2:	460c      	mov	r4, r1
 810d6d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810d6d8:	2900      	cmp	r1, #0
 810d6da:	b096      	sub	sp, #88	; 0x58
 810d6dc:	4615      	mov	r5, r2
 810d6de:	461e      	mov	r6, r3
 810d6e0:	da0d      	bge.n	810d6fe <__swhatbuf_r+0x2e>
 810d6e2:	89a3      	ldrh	r3, [r4, #12]
 810d6e4:	f013 0f80 	tst.w	r3, #128	; 0x80
 810d6e8:	f04f 0100 	mov.w	r1, #0
 810d6ec:	bf0c      	ite	eq
 810d6ee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 810d6f2:	2340      	movne	r3, #64	; 0x40
 810d6f4:	2000      	movs	r0, #0
 810d6f6:	6031      	str	r1, [r6, #0]
 810d6f8:	602b      	str	r3, [r5, #0]
 810d6fa:	b016      	add	sp, #88	; 0x58
 810d6fc:	bd70      	pop	{r4, r5, r6, pc}
 810d6fe:	466a      	mov	r2, sp
 810d700:	f000 f848 	bl	810d794 <_fstat_r>
 810d704:	2800      	cmp	r0, #0
 810d706:	dbec      	blt.n	810d6e2 <__swhatbuf_r+0x12>
 810d708:	9901      	ldr	r1, [sp, #4]
 810d70a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 810d70e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 810d712:	4259      	negs	r1, r3
 810d714:	4159      	adcs	r1, r3
 810d716:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810d71a:	e7eb      	b.n	810d6f4 <__swhatbuf_r+0x24>

0810d71c <__smakebuf_r>:
 810d71c:	898b      	ldrh	r3, [r1, #12]
 810d71e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 810d720:	079d      	lsls	r5, r3, #30
 810d722:	4606      	mov	r6, r0
 810d724:	460c      	mov	r4, r1
 810d726:	d507      	bpl.n	810d738 <__smakebuf_r+0x1c>
 810d728:	f104 0347 	add.w	r3, r4, #71	; 0x47
 810d72c:	6023      	str	r3, [r4, #0]
 810d72e:	6123      	str	r3, [r4, #16]
 810d730:	2301      	movs	r3, #1
 810d732:	6163      	str	r3, [r4, #20]
 810d734:	b002      	add	sp, #8
 810d736:	bd70      	pop	{r4, r5, r6, pc}
 810d738:	ab01      	add	r3, sp, #4
 810d73a:	466a      	mov	r2, sp
 810d73c:	f7ff ffc8 	bl	810d6d0 <__swhatbuf_r>
 810d740:	9900      	ldr	r1, [sp, #0]
 810d742:	4605      	mov	r5, r0
 810d744:	4630      	mov	r0, r6
 810d746:	f7fe fe7d 	bl	810c444 <_malloc_r>
 810d74a:	b948      	cbnz	r0, 810d760 <__smakebuf_r+0x44>
 810d74c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810d750:	059a      	lsls	r2, r3, #22
 810d752:	d4ef      	bmi.n	810d734 <__smakebuf_r+0x18>
 810d754:	f023 0303 	bic.w	r3, r3, #3
 810d758:	f043 0302 	orr.w	r3, r3, #2
 810d75c:	81a3      	strh	r3, [r4, #12]
 810d75e:	e7e3      	b.n	810d728 <__smakebuf_r+0xc>
 810d760:	89a3      	ldrh	r3, [r4, #12]
 810d762:	6020      	str	r0, [r4, #0]
 810d764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810d768:	81a3      	strh	r3, [r4, #12]
 810d76a:	9b00      	ldr	r3, [sp, #0]
 810d76c:	6163      	str	r3, [r4, #20]
 810d76e:	9b01      	ldr	r3, [sp, #4]
 810d770:	6120      	str	r0, [r4, #16]
 810d772:	b15b      	cbz	r3, 810d78c <__smakebuf_r+0x70>
 810d774:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810d778:	4630      	mov	r0, r6
 810d77a:	f000 f81d 	bl	810d7b8 <_isatty_r>
 810d77e:	b128      	cbz	r0, 810d78c <__smakebuf_r+0x70>
 810d780:	89a3      	ldrh	r3, [r4, #12]
 810d782:	f023 0303 	bic.w	r3, r3, #3
 810d786:	f043 0301 	orr.w	r3, r3, #1
 810d78a:	81a3      	strh	r3, [r4, #12]
 810d78c:	89a3      	ldrh	r3, [r4, #12]
 810d78e:	431d      	orrs	r5, r3
 810d790:	81a5      	strh	r5, [r4, #12]
 810d792:	e7cf      	b.n	810d734 <__smakebuf_r+0x18>

0810d794 <_fstat_r>:
 810d794:	b538      	push	{r3, r4, r5, lr}
 810d796:	4d07      	ldr	r5, [pc, #28]	; (810d7b4 <_fstat_r+0x20>)
 810d798:	2300      	movs	r3, #0
 810d79a:	4604      	mov	r4, r0
 810d79c:	4608      	mov	r0, r1
 810d79e:	4611      	mov	r1, r2
 810d7a0:	602b      	str	r3, [r5, #0]
 810d7a2:	f7f4 fd18 	bl	81021d6 <_fstat>
 810d7a6:	1c43      	adds	r3, r0, #1
 810d7a8:	d102      	bne.n	810d7b0 <_fstat_r+0x1c>
 810d7aa:	682b      	ldr	r3, [r5, #0]
 810d7ac:	b103      	cbz	r3, 810d7b0 <_fstat_r+0x1c>
 810d7ae:	6023      	str	r3, [r4, #0]
 810d7b0:	bd38      	pop	{r3, r4, r5, pc}
 810d7b2:	bf00      	nop
 810d7b4:	100004c0 	.word	0x100004c0

0810d7b8 <_isatty_r>:
 810d7b8:	b538      	push	{r3, r4, r5, lr}
 810d7ba:	4d06      	ldr	r5, [pc, #24]	; (810d7d4 <_isatty_r+0x1c>)
 810d7bc:	2300      	movs	r3, #0
 810d7be:	4604      	mov	r4, r0
 810d7c0:	4608      	mov	r0, r1
 810d7c2:	602b      	str	r3, [r5, #0]
 810d7c4:	f7f4 fd17 	bl	81021f6 <_isatty>
 810d7c8:	1c43      	adds	r3, r0, #1
 810d7ca:	d102      	bne.n	810d7d2 <_isatty_r+0x1a>
 810d7cc:	682b      	ldr	r3, [r5, #0]
 810d7ce:	b103      	cbz	r3, 810d7d2 <_isatty_r+0x1a>
 810d7d0:	6023      	str	r3, [r4, #0]
 810d7d2:	bd38      	pop	{r3, r4, r5, pc}
 810d7d4:	100004c0 	.word	0x100004c0

0810d7d8 <_raise_r>:
 810d7d8:	291f      	cmp	r1, #31
 810d7da:	b538      	push	{r3, r4, r5, lr}
 810d7dc:	4604      	mov	r4, r0
 810d7de:	460d      	mov	r5, r1
 810d7e0:	d904      	bls.n	810d7ec <_raise_r+0x14>
 810d7e2:	2316      	movs	r3, #22
 810d7e4:	6003      	str	r3, [r0, #0]
 810d7e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810d7ea:	bd38      	pop	{r3, r4, r5, pc}
 810d7ec:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 810d7ee:	b112      	cbz	r2, 810d7f6 <_raise_r+0x1e>
 810d7f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810d7f4:	b94b      	cbnz	r3, 810d80a <_raise_r+0x32>
 810d7f6:	4620      	mov	r0, r4
 810d7f8:	f000 f830 	bl	810d85c <_getpid_r>
 810d7fc:	462a      	mov	r2, r5
 810d7fe:	4601      	mov	r1, r0
 810d800:	4620      	mov	r0, r4
 810d802:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810d806:	f000 b817 	b.w	810d838 <_kill_r>
 810d80a:	2b01      	cmp	r3, #1
 810d80c:	d00a      	beq.n	810d824 <_raise_r+0x4c>
 810d80e:	1c59      	adds	r1, r3, #1
 810d810:	d103      	bne.n	810d81a <_raise_r+0x42>
 810d812:	2316      	movs	r3, #22
 810d814:	6003      	str	r3, [r0, #0]
 810d816:	2001      	movs	r0, #1
 810d818:	e7e7      	b.n	810d7ea <_raise_r+0x12>
 810d81a:	2400      	movs	r4, #0
 810d81c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 810d820:	4628      	mov	r0, r5
 810d822:	4798      	blx	r3
 810d824:	2000      	movs	r0, #0
 810d826:	e7e0      	b.n	810d7ea <_raise_r+0x12>

0810d828 <raise>:
 810d828:	4b02      	ldr	r3, [pc, #8]	; (810d834 <raise+0xc>)
 810d82a:	4601      	mov	r1, r0
 810d82c:	6818      	ldr	r0, [r3, #0]
 810d82e:	f7ff bfd3 	b.w	810d7d8 <_raise_r>
 810d832:	bf00      	nop
 810d834:	100001d4 	.word	0x100001d4

0810d838 <_kill_r>:
 810d838:	b538      	push	{r3, r4, r5, lr}
 810d83a:	4d07      	ldr	r5, [pc, #28]	; (810d858 <_kill_r+0x20>)
 810d83c:	2300      	movs	r3, #0
 810d83e:	4604      	mov	r4, r0
 810d840:	4608      	mov	r0, r1
 810d842:	4611      	mov	r1, r2
 810d844:	602b      	str	r3, [r5, #0]
 810d846:	f7f4 fc65 	bl	8102114 <_kill>
 810d84a:	1c43      	adds	r3, r0, #1
 810d84c:	d102      	bne.n	810d854 <_kill_r+0x1c>
 810d84e:	682b      	ldr	r3, [r5, #0]
 810d850:	b103      	cbz	r3, 810d854 <_kill_r+0x1c>
 810d852:	6023      	str	r3, [r4, #0]
 810d854:	bd38      	pop	{r3, r4, r5, pc}
 810d856:	bf00      	nop
 810d858:	100004c0 	.word	0x100004c0

0810d85c <_getpid_r>:
 810d85c:	f7f4 bc52 	b.w	8102104 <_getpid>

0810d860 <pow>:
 810d860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810d862:	ed2d 8b02 	vpush	{d8}
 810d866:	eeb0 8a40 	vmov.f32	s16, s0
 810d86a:	eef0 8a60 	vmov.f32	s17, s1
 810d86e:	ec55 4b11 	vmov	r4, r5, d1
 810d872:	f000 f871 	bl	810d958 <__ieee754_pow>
 810d876:	4622      	mov	r2, r4
 810d878:	462b      	mov	r3, r5
 810d87a:	4620      	mov	r0, r4
 810d87c:	4629      	mov	r1, r5
 810d87e:	ec57 6b10 	vmov	r6, r7, d0
 810d882:	f7f3 f9db 	bl	8100c3c <__aeabi_dcmpun>
 810d886:	2800      	cmp	r0, #0
 810d888:	d13b      	bne.n	810d902 <pow+0xa2>
 810d88a:	ec51 0b18 	vmov	r0, r1, d8
 810d88e:	2200      	movs	r2, #0
 810d890:	2300      	movs	r3, #0
 810d892:	f7f3 f9a1 	bl	8100bd8 <__aeabi_dcmpeq>
 810d896:	b1b8      	cbz	r0, 810d8c8 <pow+0x68>
 810d898:	2200      	movs	r2, #0
 810d89a:	2300      	movs	r3, #0
 810d89c:	4620      	mov	r0, r4
 810d89e:	4629      	mov	r1, r5
 810d8a0:	f7f3 f99a 	bl	8100bd8 <__aeabi_dcmpeq>
 810d8a4:	2800      	cmp	r0, #0
 810d8a6:	d146      	bne.n	810d936 <pow+0xd6>
 810d8a8:	ec45 4b10 	vmov	d0, r4, r5
 810d8ac:	f000 f848 	bl	810d940 <finite>
 810d8b0:	b338      	cbz	r0, 810d902 <pow+0xa2>
 810d8b2:	2200      	movs	r2, #0
 810d8b4:	2300      	movs	r3, #0
 810d8b6:	4620      	mov	r0, r4
 810d8b8:	4629      	mov	r1, r5
 810d8ba:	f7f3 f997 	bl	8100bec <__aeabi_dcmplt>
 810d8be:	b300      	cbz	r0, 810d902 <pow+0xa2>
 810d8c0:	f7fd fa08 	bl	810acd4 <__errno>
 810d8c4:	2322      	movs	r3, #34	; 0x22
 810d8c6:	e01b      	b.n	810d900 <pow+0xa0>
 810d8c8:	ec47 6b10 	vmov	d0, r6, r7
 810d8cc:	f000 f838 	bl	810d940 <finite>
 810d8d0:	b9e0      	cbnz	r0, 810d90c <pow+0xac>
 810d8d2:	eeb0 0a48 	vmov.f32	s0, s16
 810d8d6:	eef0 0a68 	vmov.f32	s1, s17
 810d8da:	f000 f831 	bl	810d940 <finite>
 810d8de:	b1a8      	cbz	r0, 810d90c <pow+0xac>
 810d8e0:	ec45 4b10 	vmov	d0, r4, r5
 810d8e4:	f000 f82c 	bl	810d940 <finite>
 810d8e8:	b180      	cbz	r0, 810d90c <pow+0xac>
 810d8ea:	4632      	mov	r2, r6
 810d8ec:	463b      	mov	r3, r7
 810d8ee:	4630      	mov	r0, r6
 810d8f0:	4639      	mov	r1, r7
 810d8f2:	f7f3 f9a3 	bl	8100c3c <__aeabi_dcmpun>
 810d8f6:	2800      	cmp	r0, #0
 810d8f8:	d0e2      	beq.n	810d8c0 <pow+0x60>
 810d8fa:	f7fd f9eb 	bl	810acd4 <__errno>
 810d8fe:	2321      	movs	r3, #33	; 0x21
 810d900:	6003      	str	r3, [r0, #0]
 810d902:	ecbd 8b02 	vpop	{d8}
 810d906:	ec47 6b10 	vmov	d0, r6, r7
 810d90a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810d90c:	2200      	movs	r2, #0
 810d90e:	2300      	movs	r3, #0
 810d910:	4630      	mov	r0, r6
 810d912:	4639      	mov	r1, r7
 810d914:	f7f3 f960 	bl	8100bd8 <__aeabi_dcmpeq>
 810d918:	2800      	cmp	r0, #0
 810d91a:	d0f2      	beq.n	810d902 <pow+0xa2>
 810d91c:	eeb0 0a48 	vmov.f32	s0, s16
 810d920:	eef0 0a68 	vmov.f32	s1, s17
 810d924:	f000 f80c 	bl	810d940 <finite>
 810d928:	2800      	cmp	r0, #0
 810d92a:	d0ea      	beq.n	810d902 <pow+0xa2>
 810d92c:	ec45 4b10 	vmov	d0, r4, r5
 810d930:	f000 f806 	bl	810d940 <finite>
 810d934:	e7c3      	b.n	810d8be <pow+0x5e>
 810d936:	4f01      	ldr	r7, [pc, #4]	; (810d93c <pow+0xdc>)
 810d938:	2600      	movs	r6, #0
 810d93a:	e7e2      	b.n	810d902 <pow+0xa2>
 810d93c:	3ff00000 	.word	0x3ff00000

0810d940 <finite>:
 810d940:	b082      	sub	sp, #8
 810d942:	ed8d 0b00 	vstr	d0, [sp]
 810d946:	9801      	ldr	r0, [sp, #4]
 810d948:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 810d94c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 810d950:	0fc0      	lsrs	r0, r0, #31
 810d952:	b002      	add	sp, #8
 810d954:	4770      	bx	lr
	...

0810d958 <__ieee754_pow>:
 810d958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d95c:	ed2d 8b06 	vpush	{d8-d10}
 810d960:	b089      	sub	sp, #36	; 0x24
 810d962:	ed8d 1b00 	vstr	d1, [sp]
 810d966:	e9dd 2900 	ldrd	r2, r9, [sp]
 810d96a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 810d96e:	ea58 0102 	orrs.w	r1, r8, r2
 810d972:	ec57 6b10 	vmov	r6, r7, d0
 810d976:	d115      	bne.n	810d9a4 <__ieee754_pow+0x4c>
 810d978:	19b3      	adds	r3, r6, r6
 810d97a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 810d97e:	4152      	adcs	r2, r2
 810d980:	4299      	cmp	r1, r3
 810d982:	4b89      	ldr	r3, [pc, #548]	; (810dba8 <__ieee754_pow+0x250>)
 810d984:	4193      	sbcs	r3, r2
 810d986:	f080 84d1 	bcs.w	810e32c <__ieee754_pow+0x9d4>
 810d98a:	e9dd 2300 	ldrd	r2, r3, [sp]
 810d98e:	4630      	mov	r0, r6
 810d990:	4639      	mov	r1, r7
 810d992:	f7f2 fd03 	bl	810039c <__adddf3>
 810d996:	ec41 0b10 	vmov	d0, r0, r1
 810d99a:	b009      	add	sp, #36	; 0x24
 810d99c:	ecbd 8b06 	vpop	{d8-d10}
 810d9a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810d9a4:	4b81      	ldr	r3, [pc, #516]	; (810dbac <__ieee754_pow+0x254>)
 810d9a6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 810d9aa:	429c      	cmp	r4, r3
 810d9ac:	ee10 aa10 	vmov	sl, s0
 810d9b0:	463d      	mov	r5, r7
 810d9b2:	dc06      	bgt.n	810d9c2 <__ieee754_pow+0x6a>
 810d9b4:	d101      	bne.n	810d9ba <__ieee754_pow+0x62>
 810d9b6:	2e00      	cmp	r6, #0
 810d9b8:	d1e7      	bne.n	810d98a <__ieee754_pow+0x32>
 810d9ba:	4598      	cmp	r8, r3
 810d9bc:	dc01      	bgt.n	810d9c2 <__ieee754_pow+0x6a>
 810d9be:	d10f      	bne.n	810d9e0 <__ieee754_pow+0x88>
 810d9c0:	b172      	cbz	r2, 810d9e0 <__ieee754_pow+0x88>
 810d9c2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 810d9c6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 810d9ca:	ea55 050a 	orrs.w	r5, r5, sl
 810d9ce:	d1dc      	bne.n	810d98a <__ieee754_pow+0x32>
 810d9d0:	e9dd 3200 	ldrd	r3, r2, [sp]
 810d9d4:	18db      	adds	r3, r3, r3
 810d9d6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 810d9da:	4152      	adcs	r2, r2
 810d9dc:	429d      	cmp	r5, r3
 810d9de:	e7d0      	b.n	810d982 <__ieee754_pow+0x2a>
 810d9e0:	2d00      	cmp	r5, #0
 810d9e2:	da3b      	bge.n	810da5c <__ieee754_pow+0x104>
 810d9e4:	4b72      	ldr	r3, [pc, #456]	; (810dbb0 <__ieee754_pow+0x258>)
 810d9e6:	4598      	cmp	r8, r3
 810d9e8:	dc51      	bgt.n	810da8e <__ieee754_pow+0x136>
 810d9ea:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 810d9ee:	4598      	cmp	r8, r3
 810d9f0:	f340 84ab 	ble.w	810e34a <__ieee754_pow+0x9f2>
 810d9f4:	ea4f 5328 	mov.w	r3, r8, asr #20
 810d9f8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 810d9fc:	2b14      	cmp	r3, #20
 810d9fe:	dd0f      	ble.n	810da20 <__ieee754_pow+0xc8>
 810da00:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 810da04:	fa22 f103 	lsr.w	r1, r2, r3
 810da08:	fa01 f303 	lsl.w	r3, r1, r3
 810da0c:	4293      	cmp	r3, r2
 810da0e:	f040 849c 	bne.w	810e34a <__ieee754_pow+0x9f2>
 810da12:	f001 0101 	and.w	r1, r1, #1
 810da16:	f1c1 0302 	rsb	r3, r1, #2
 810da1a:	9304      	str	r3, [sp, #16]
 810da1c:	b182      	cbz	r2, 810da40 <__ieee754_pow+0xe8>
 810da1e:	e05f      	b.n	810dae0 <__ieee754_pow+0x188>
 810da20:	2a00      	cmp	r2, #0
 810da22:	d15b      	bne.n	810dadc <__ieee754_pow+0x184>
 810da24:	f1c3 0314 	rsb	r3, r3, #20
 810da28:	fa48 f103 	asr.w	r1, r8, r3
 810da2c:	fa01 f303 	lsl.w	r3, r1, r3
 810da30:	4543      	cmp	r3, r8
 810da32:	f040 8487 	bne.w	810e344 <__ieee754_pow+0x9ec>
 810da36:	f001 0101 	and.w	r1, r1, #1
 810da3a:	f1c1 0302 	rsb	r3, r1, #2
 810da3e:	9304      	str	r3, [sp, #16]
 810da40:	4b5c      	ldr	r3, [pc, #368]	; (810dbb4 <__ieee754_pow+0x25c>)
 810da42:	4598      	cmp	r8, r3
 810da44:	d132      	bne.n	810daac <__ieee754_pow+0x154>
 810da46:	f1b9 0f00 	cmp.w	r9, #0
 810da4a:	f280 8477 	bge.w	810e33c <__ieee754_pow+0x9e4>
 810da4e:	4959      	ldr	r1, [pc, #356]	; (810dbb4 <__ieee754_pow+0x25c>)
 810da50:	4632      	mov	r2, r6
 810da52:	463b      	mov	r3, r7
 810da54:	2000      	movs	r0, #0
 810da56:	f7f2 ff81 	bl	810095c <__aeabi_ddiv>
 810da5a:	e79c      	b.n	810d996 <__ieee754_pow+0x3e>
 810da5c:	2300      	movs	r3, #0
 810da5e:	9304      	str	r3, [sp, #16]
 810da60:	2a00      	cmp	r2, #0
 810da62:	d13d      	bne.n	810dae0 <__ieee754_pow+0x188>
 810da64:	4b51      	ldr	r3, [pc, #324]	; (810dbac <__ieee754_pow+0x254>)
 810da66:	4598      	cmp	r8, r3
 810da68:	d1ea      	bne.n	810da40 <__ieee754_pow+0xe8>
 810da6a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 810da6e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 810da72:	ea53 030a 	orrs.w	r3, r3, sl
 810da76:	f000 8459 	beq.w	810e32c <__ieee754_pow+0x9d4>
 810da7a:	4b4f      	ldr	r3, [pc, #316]	; (810dbb8 <__ieee754_pow+0x260>)
 810da7c:	429c      	cmp	r4, r3
 810da7e:	dd08      	ble.n	810da92 <__ieee754_pow+0x13a>
 810da80:	f1b9 0f00 	cmp.w	r9, #0
 810da84:	f2c0 8456 	blt.w	810e334 <__ieee754_pow+0x9dc>
 810da88:	e9dd 0100 	ldrd	r0, r1, [sp]
 810da8c:	e783      	b.n	810d996 <__ieee754_pow+0x3e>
 810da8e:	2302      	movs	r3, #2
 810da90:	e7e5      	b.n	810da5e <__ieee754_pow+0x106>
 810da92:	f1b9 0f00 	cmp.w	r9, #0
 810da96:	f04f 0000 	mov.w	r0, #0
 810da9a:	f04f 0100 	mov.w	r1, #0
 810da9e:	f6bf af7a 	bge.w	810d996 <__ieee754_pow+0x3e>
 810daa2:	e9dd 0300 	ldrd	r0, r3, [sp]
 810daa6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 810daaa:	e774      	b.n	810d996 <__ieee754_pow+0x3e>
 810daac:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 810dab0:	d106      	bne.n	810dac0 <__ieee754_pow+0x168>
 810dab2:	4632      	mov	r2, r6
 810dab4:	463b      	mov	r3, r7
 810dab6:	4630      	mov	r0, r6
 810dab8:	4639      	mov	r1, r7
 810daba:	f7f2 fe25 	bl	8100708 <__aeabi_dmul>
 810dabe:	e76a      	b.n	810d996 <__ieee754_pow+0x3e>
 810dac0:	4b3e      	ldr	r3, [pc, #248]	; (810dbbc <__ieee754_pow+0x264>)
 810dac2:	4599      	cmp	r9, r3
 810dac4:	d10c      	bne.n	810dae0 <__ieee754_pow+0x188>
 810dac6:	2d00      	cmp	r5, #0
 810dac8:	db0a      	blt.n	810dae0 <__ieee754_pow+0x188>
 810daca:	ec47 6b10 	vmov	d0, r6, r7
 810dace:	b009      	add	sp, #36	; 0x24
 810dad0:	ecbd 8b06 	vpop	{d8-d10}
 810dad4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810dad8:	f000 bd20 	b.w	810e51c <__ieee754_sqrt>
 810dadc:	2300      	movs	r3, #0
 810dade:	9304      	str	r3, [sp, #16]
 810dae0:	ec47 6b10 	vmov	d0, r6, r7
 810dae4:	f000 fc92 	bl	810e40c <fabs>
 810dae8:	ec51 0b10 	vmov	r0, r1, d0
 810daec:	f1ba 0f00 	cmp.w	sl, #0
 810daf0:	d129      	bne.n	810db46 <__ieee754_pow+0x1ee>
 810daf2:	b124      	cbz	r4, 810dafe <__ieee754_pow+0x1a6>
 810daf4:	4b2f      	ldr	r3, [pc, #188]	; (810dbb4 <__ieee754_pow+0x25c>)
 810daf6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 810dafa:	429a      	cmp	r2, r3
 810dafc:	d123      	bne.n	810db46 <__ieee754_pow+0x1ee>
 810dafe:	f1b9 0f00 	cmp.w	r9, #0
 810db02:	da05      	bge.n	810db10 <__ieee754_pow+0x1b8>
 810db04:	4602      	mov	r2, r0
 810db06:	460b      	mov	r3, r1
 810db08:	2000      	movs	r0, #0
 810db0a:	492a      	ldr	r1, [pc, #168]	; (810dbb4 <__ieee754_pow+0x25c>)
 810db0c:	f7f2 ff26 	bl	810095c <__aeabi_ddiv>
 810db10:	2d00      	cmp	r5, #0
 810db12:	f6bf af40 	bge.w	810d996 <__ieee754_pow+0x3e>
 810db16:	9b04      	ldr	r3, [sp, #16]
 810db18:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 810db1c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 810db20:	431c      	orrs	r4, r3
 810db22:	d108      	bne.n	810db36 <__ieee754_pow+0x1de>
 810db24:	4602      	mov	r2, r0
 810db26:	460b      	mov	r3, r1
 810db28:	4610      	mov	r0, r2
 810db2a:	4619      	mov	r1, r3
 810db2c:	f7f2 fc34 	bl	8100398 <__aeabi_dsub>
 810db30:	4602      	mov	r2, r0
 810db32:	460b      	mov	r3, r1
 810db34:	e78f      	b.n	810da56 <__ieee754_pow+0xfe>
 810db36:	9b04      	ldr	r3, [sp, #16]
 810db38:	2b01      	cmp	r3, #1
 810db3a:	f47f af2c 	bne.w	810d996 <__ieee754_pow+0x3e>
 810db3e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810db42:	4619      	mov	r1, r3
 810db44:	e727      	b.n	810d996 <__ieee754_pow+0x3e>
 810db46:	0feb      	lsrs	r3, r5, #31
 810db48:	3b01      	subs	r3, #1
 810db4a:	9306      	str	r3, [sp, #24]
 810db4c:	9a06      	ldr	r2, [sp, #24]
 810db4e:	9b04      	ldr	r3, [sp, #16]
 810db50:	4313      	orrs	r3, r2
 810db52:	d102      	bne.n	810db5a <__ieee754_pow+0x202>
 810db54:	4632      	mov	r2, r6
 810db56:	463b      	mov	r3, r7
 810db58:	e7e6      	b.n	810db28 <__ieee754_pow+0x1d0>
 810db5a:	4b19      	ldr	r3, [pc, #100]	; (810dbc0 <__ieee754_pow+0x268>)
 810db5c:	4598      	cmp	r8, r3
 810db5e:	f340 80fb 	ble.w	810dd58 <__ieee754_pow+0x400>
 810db62:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 810db66:	4598      	cmp	r8, r3
 810db68:	4b13      	ldr	r3, [pc, #76]	; (810dbb8 <__ieee754_pow+0x260>)
 810db6a:	dd0c      	ble.n	810db86 <__ieee754_pow+0x22e>
 810db6c:	429c      	cmp	r4, r3
 810db6e:	dc0f      	bgt.n	810db90 <__ieee754_pow+0x238>
 810db70:	f1b9 0f00 	cmp.w	r9, #0
 810db74:	da0f      	bge.n	810db96 <__ieee754_pow+0x23e>
 810db76:	2000      	movs	r0, #0
 810db78:	b009      	add	sp, #36	; 0x24
 810db7a:	ecbd 8b06 	vpop	{d8-d10}
 810db7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810db82:	f000 bc3a 	b.w	810e3fa <__math_oflow>
 810db86:	429c      	cmp	r4, r3
 810db88:	dbf2      	blt.n	810db70 <__ieee754_pow+0x218>
 810db8a:	4b0a      	ldr	r3, [pc, #40]	; (810dbb4 <__ieee754_pow+0x25c>)
 810db8c:	429c      	cmp	r4, r3
 810db8e:	dd19      	ble.n	810dbc4 <__ieee754_pow+0x26c>
 810db90:	f1b9 0f00 	cmp.w	r9, #0
 810db94:	dcef      	bgt.n	810db76 <__ieee754_pow+0x21e>
 810db96:	2000      	movs	r0, #0
 810db98:	b009      	add	sp, #36	; 0x24
 810db9a:	ecbd 8b06 	vpop	{d8-d10}
 810db9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810dba2:	f000 bc21 	b.w	810e3e8 <__math_uflow>
 810dba6:	bf00      	nop
 810dba8:	fff00000 	.word	0xfff00000
 810dbac:	7ff00000 	.word	0x7ff00000
 810dbb0:	433fffff 	.word	0x433fffff
 810dbb4:	3ff00000 	.word	0x3ff00000
 810dbb8:	3fefffff 	.word	0x3fefffff
 810dbbc:	3fe00000 	.word	0x3fe00000
 810dbc0:	41e00000 	.word	0x41e00000
 810dbc4:	4b60      	ldr	r3, [pc, #384]	; (810dd48 <__ieee754_pow+0x3f0>)
 810dbc6:	2200      	movs	r2, #0
 810dbc8:	f7f2 fbe6 	bl	8100398 <__aeabi_dsub>
 810dbcc:	a354      	add	r3, pc, #336	; (adr r3, 810dd20 <__ieee754_pow+0x3c8>)
 810dbce:	e9d3 2300 	ldrd	r2, r3, [r3]
 810dbd2:	4604      	mov	r4, r0
 810dbd4:	460d      	mov	r5, r1
 810dbd6:	f7f2 fd97 	bl	8100708 <__aeabi_dmul>
 810dbda:	a353      	add	r3, pc, #332	; (adr r3, 810dd28 <__ieee754_pow+0x3d0>)
 810dbdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 810dbe0:	4606      	mov	r6, r0
 810dbe2:	460f      	mov	r7, r1
 810dbe4:	4620      	mov	r0, r4
 810dbe6:	4629      	mov	r1, r5
 810dbe8:	f7f2 fd8e 	bl	8100708 <__aeabi_dmul>
 810dbec:	4b57      	ldr	r3, [pc, #348]	; (810dd4c <__ieee754_pow+0x3f4>)
 810dbee:	4682      	mov	sl, r0
 810dbf0:	468b      	mov	fp, r1
 810dbf2:	2200      	movs	r2, #0
 810dbf4:	4620      	mov	r0, r4
 810dbf6:	4629      	mov	r1, r5
 810dbf8:	f7f2 fd86 	bl	8100708 <__aeabi_dmul>
 810dbfc:	4602      	mov	r2, r0
 810dbfe:	460b      	mov	r3, r1
 810dc00:	a14b      	add	r1, pc, #300	; (adr r1, 810dd30 <__ieee754_pow+0x3d8>)
 810dc02:	e9d1 0100 	ldrd	r0, r1, [r1]
 810dc06:	f7f2 fbc7 	bl	8100398 <__aeabi_dsub>
 810dc0a:	4622      	mov	r2, r4
 810dc0c:	462b      	mov	r3, r5
 810dc0e:	f7f2 fd7b 	bl	8100708 <__aeabi_dmul>
 810dc12:	4602      	mov	r2, r0
 810dc14:	460b      	mov	r3, r1
 810dc16:	2000      	movs	r0, #0
 810dc18:	494d      	ldr	r1, [pc, #308]	; (810dd50 <__ieee754_pow+0x3f8>)
 810dc1a:	f7f2 fbbd 	bl	8100398 <__aeabi_dsub>
 810dc1e:	4622      	mov	r2, r4
 810dc20:	4680      	mov	r8, r0
 810dc22:	4689      	mov	r9, r1
 810dc24:	462b      	mov	r3, r5
 810dc26:	4620      	mov	r0, r4
 810dc28:	4629      	mov	r1, r5
 810dc2a:	f7f2 fd6d 	bl	8100708 <__aeabi_dmul>
 810dc2e:	4602      	mov	r2, r0
 810dc30:	460b      	mov	r3, r1
 810dc32:	4640      	mov	r0, r8
 810dc34:	4649      	mov	r1, r9
 810dc36:	f7f2 fd67 	bl	8100708 <__aeabi_dmul>
 810dc3a:	a33f      	add	r3, pc, #252	; (adr r3, 810dd38 <__ieee754_pow+0x3e0>)
 810dc3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810dc40:	f7f2 fd62 	bl	8100708 <__aeabi_dmul>
 810dc44:	4602      	mov	r2, r0
 810dc46:	460b      	mov	r3, r1
 810dc48:	4650      	mov	r0, sl
 810dc4a:	4659      	mov	r1, fp
 810dc4c:	f7f2 fba4 	bl	8100398 <__aeabi_dsub>
 810dc50:	4602      	mov	r2, r0
 810dc52:	460b      	mov	r3, r1
 810dc54:	4680      	mov	r8, r0
 810dc56:	4689      	mov	r9, r1
 810dc58:	4630      	mov	r0, r6
 810dc5a:	4639      	mov	r1, r7
 810dc5c:	f7f2 fb9e 	bl	810039c <__adddf3>
 810dc60:	2000      	movs	r0, #0
 810dc62:	4632      	mov	r2, r6
 810dc64:	463b      	mov	r3, r7
 810dc66:	4604      	mov	r4, r0
 810dc68:	460d      	mov	r5, r1
 810dc6a:	f7f2 fb95 	bl	8100398 <__aeabi_dsub>
 810dc6e:	4602      	mov	r2, r0
 810dc70:	460b      	mov	r3, r1
 810dc72:	4640      	mov	r0, r8
 810dc74:	4649      	mov	r1, r9
 810dc76:	f7f2 fb8f 	bl	8100398 <__aeabi_dsub>
 810dc7a:	9b04      	ldr	r3, [sp, #16]
 810dc7c:	9a06      	ldr	r2, [sp, #24]
 810dc7e:	3b01      	subs	r3, #1
 810dc80:	4313      	orrs	r3, r2
 810dc82:	4682      	mov	sl, r0
 810dc84:	468b      	mov	fp, r1
 810dc86:	f040 81e7 	bne.w	810e058 <__ieee754_pow+0x700>
 810dc8a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 810dd40 <__ieee754_pow+0x3e8>
 810dc8e:	eeb0 8a47 	vmov.f32	s16, s14
 810dc92:	eef0 8a67 	vmov.f32	s17, s15
 810dc96:	e9dd 6700 	ldrd	r6, r7, [sp]
 810dc9a:	2600      	movs	r6, #0
 810dc9c:	4632      	mov	r2, r6
 810dc9e:	463b      	mov	r3, r7
 810dca0:	e9dd 0100 	ldrd	r0, r1, [sp]
 810dca4:	f7f2 fb78 	bl	8100398 <__aeabi_dsub>
 810dca8:	4622      	mov	r2, r4
 810dcaa:	462b      	mov	r3, r5
 810dcac:	f7f2 fd2c 	bl	8100708 <__aeabi_dmul>
 810dcb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 810dcb4:	4680      	mov	r8, r0
 810dcb6:	4689      	mov	r9, r1
 810dcb8:	4650      	mov	r0, sl
 810dcba:	4659      	mov	r1, fp
 810dcbc:	f7f2 fd24 	bl	8100708 <__aeabi_dmul>
 810dcc0:	4602      	mov	r2, r0
 810dcc2:	460b      	mov	r3, r1
 810dcc4:	4640      	mov	r0, r8
 810dcc6:	4649      	mov	r1, r9
 810dcc8:	f7f2 fb68 	bl	810039c <__adddf3>
 810dccc:	4632      	mov	r2, r6
 810dcce:	463b      	mov	r3, r7
 810dcd0:	4680      	mov	r8, r0
 810dcd2:	4689      	mov	r9, r1
 810dcd4:	4620      	mov	r0, r4
 810dcd6:	4629      	mov	r1, r5
 810dcd8:	f7f2 fd16 	bl	8100708 <__aeabi_dmul>
 810dcdc:	460b      	mov	r3, r1
 810dcde:	4604      	mov	r4, r0
 810dce0:	460d      	mov	r5, r1
 810dce2:	4602      	mov	r2, r0
 810dce4:	4649      	mov	r1, r9
 810dce6:	4640      	mov	r0, r8
 810dce8:	f7f2 fb58 	bl	810039c <__adddf3>
 810dcec:	4b19      	ldr	r3, [pc, #100]	; (810dd54 <__ieee754_pow+0x3fc>)
 810dcee:	4299      	cmp	r1, r3
 810dcf0:	ec45 4b19 	vmov	d9, r4, r5
 810dcf4:	4606      	mov	r6, r0
 810dcf6:	460f      	mov	r7, r1
 810dcf8:	468b      	mov	fp, r1
 810dcfa:	f340 82f0 	ble.w	810e2de <__ieee754_pow+0x986>
 810dcfe:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 810dd02:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 810dd06:	4303      	orrs	r3, r0
 810dd08:	f000 81e4 	beq.w	810e0d4 <__ieee754_pow+0x77c>
 810dd0c:	ec51 0b18 	vmov	r0, r1, d8
 810dd10:	2200      	movs	r2, #0
 810dd12:	2300      	movs	r3, #0
 810dd14:	f7f2 ff6a 	bl	8100bec <__aeabi_dcmplt>
 810dd18:	3800      	subs	r0, #0
 810dd1a:	bf18      	it	ne
 810dd1c:	2001      	movne	r0, #1
 810dd1e:	e72b      	b.n	810db78 <__ieee754_pow+0x220>
 810dd20:	60000000 	.word	0x60000000
 810dd24:	3ff71547 	.word	0x3ff71547
 810dd28:	f85ddf44 	.word	0xf85ddf44
 810dd2c:	3e54ae0b 	.word	0x3e54ae0b
 810dd30:	55555555 	.word	0x55555555
 810dd34:	3fd55555 	.word	0x3fd55555
 810dd38:	652b82fe 	.word	0x652b82fe
 810dd3c:	3ff71547 	.word	0x3ff71547
 810dd40:	00000000 	.word	0x00000000
 810dd44:	bff00000 	.word	0xbff00000
 810dd48:	3ff00000 	.word	0x3ff00000
 810dd4c:	3fd00000 	.word	0x3fd00000
 810dd50:	3fe00000 	.word	0x3fe00000
 810dd54:	408fffff 	.word	0x408fffff
 810dd58:	4bd5      	ldr	r3, [pc, #852]	; (810e0b0 <__ieee754_pow+0x758>)
 810dd5a:	402b      	ands	r3, r5
 810dd5c:	2200      	movs	r2, #0
 810dd5e:	b92b      	cbnz	r3, 810dd6c <__ieee754_pow+0x414>
 810dd60:	4bd4      	ldr	r3, [pc, #848]	; (810e0b4 <__ieee754_pow+0x75c>)
 810dd62:	f7f2 fcd1 	bl	8100708 <__aeabi_dmul>
 810dd66:	f06f 0234 	mvn.w	r2, #52	; 0x34
 810dd6a:	460c      	mov	r4, r1
 810dd6c:	1523      	asrs	r3, r4, #20
 810dd6e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 810dd72:	4413      	add	r3, r2
 810dd74:	9305      	str	r3, [sp, #20]
 810dd76:	4bd0      	ldr	r3, [pc, #832]	; (810e0b8 <__ieee754_pow+0x760>)
 810dd78:	f3c4 0413 	ubfx	r4, r4, #0, #20
 810dd7c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 810dd80:	429c      	cmp	r4, r3
 810dd82:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 810dd86:	dd08      	ble.n	810dd9a <__ieee754_pow+0x442>
 810dd88:	4bcc      	ldr	r3, [pc, #816]	; (810e0bc <__ieee754_pow+0x764>)
 810dd8a:	429c      	cmp	r4, r3
 810dd8c:	f340 8162 	ble.w	810e054 <__ieee754_pow+0x6fc>
 810dd90:	9b05      	ldr	r3, [sp, #20]
 810dd92:	3301      	adds	r3, #1
 810dd94:	9305      	str	r3, [sp, #20]
 810dd96:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 810dd9a:	2400      	movs	r4, #0
 810dd9c:	00e3      	lsls	r3, r4, #3
 810dd9e:	9307      	str	r3, [sp, #28]
 810dda0:	4bc7      	ldr	r3, [pc, #796]	; (810e0c0 <__ieee754_pow+0x768>)
 810dda2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 810dda6:	ed93 7b00 	vldr	d7, [r3]
 810ddaa:	4629      	mov	r1, r5
 810ddac:	ec53 2b17 	vmov	r2, r3, d7
 810ddb0:	eeb0 9a47 	vmov.f32	s18, s14
 810ddb4:	eef0 9a67 	vmov.f32	s19, s15
 810ddb8:	4682      	mov	sl, r0
 810ddba:	f7f2 faed 	bl	8100398 <__aeabi_dsub>
 810ddbe:	4652      	mov	r2, sl
 810ddc0:	4606      	mov	r6, r0
 810ddc2:	460f      	mov	r7, r1
 810ddc4:	462b      	mov	r3, r5
 810ddc6:	ec51 0b19 	vmov	r0, r1, d9
 810ddca:	f7f2 fae7 	bl	810039c <__adddf3>
 810ddce:	4602      	mov	r2, r0
 810ddd0:	460b      	mov	r3, r1
 810ddd2:	2000      	movs	r0, #0
 810ddd4:	49bb      	ldr	r1, [pc, #748]	; (810e0c4 <__ieee754_pow+0x76c>)
 810ddd6:	f7f2 fdc1 	bl	810095c <__aeabi_ddiv>
 810ddda:	ec41 0b1a 	vmov	d10, r0, r1
 810ddde:	4602      	mov	r2, r0
 810dde0:	460b      	mov	r3, r1
 810dde2:	4630      	mov	r0, r6
 810dde4:	4639      	mov	r1, r7
 810dde6:	f7f2 fc8f 	bl	8100708 <__aeabi_dmul>
 810ddea:	2300      	movs	r3, #0
 810ddec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810ddf0:	9302      	str	r3, [sp, #8]
 810ddf2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 810ddf6:	46ab      	mov	fp, r5
 810ddf8:	106d      	asrs	r5, r5, #1
 810ddfa:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 810ddfe:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 810de02:	ec41 0b18 	vmov	d8, r0, r1
 810de06:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 810de0a:	2200      	movs	r2, #0
 810de0c:	4640      	mov	r0, r8
 810de0e:	4649      	mov	r1, r9
 810de10:	4614      	mov	r4, r2
 810de12:	461d      	mov	r5, r3
 810de14:	f7f2 fc78 	bl	8100708 <__aeabi_dmul>
 810de18:	4602      	mov	r2, r0
 810de1a:	460b      	mov	r3, r1
 810de1c:	4630      	mov	r0, r6
 810de1e:	4639      	mov	r1, r7
 810de20:	f7f2 faba 	bl	8100398 <__aeabi_dsub>
 810de24:	ec53 2b19 	vmov	r2, r3, d9
 810de28:	4606      	mov	r6, r0
 810de2a:	460f      	mov	r7, r1
 810de2c:	4620      	mov	r0, r4
 810de2e:	4629      	mov	r1, r5
 810de30:	f7f2 fab2 	bl	8100398 <__aeabi_dsub>
 810de34:	4602      	mov	r2, r0
 810de36:	460b      	mov	r3, r1
 810de38:	4650      	mov	r0, sl
 810de3a:	4659      	mov	r1, fp
 810de3c:	f7f2 faac 	bl	8100398 <__aeabi_dsub>
 810de40:	4642      	mov	r2, r8
 810de42:	464b      	mov	r3, r9
 810de44:	f7f2 fc60 	bl	8100708 <__aeabi_dmul>
 810de48:	4602      	mov	r2, r0
 810de4a:	460b      	mov	r3, r1
 810de4c:	4630      	mov	r0, r6
 810de4e:	4639      	mov	r1, r7
 810de50:	f7f2 faa2 	bl	8100398 <__aeabi_dsub>
 810de54:	ec53 2b1a 	vmov	r2, r3, d10
 810de58:	f7f2 fc56 	bl	8100708 <__aeabi_dmul>
 810de5c:	ec53 2b18 	vmov	r2, r3, d8
 810de60:	ec41 0b19 	vmov	d9, r0, r1
 810de64:	ec51 0b18 	vmov	r0, r1, d8
 810de68:	f7f2 fc4e 	bl	8100708 <__aeabi_dmul>
 810de6c:	a37c      	add	r3, pc, #496	; (adr r3, 810e060 <__ieee754_pow+0x708>)
 810de6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810de72:	4604      	mov	r4, r0
 810de74:	460d      	mov	r5, r1
 810de76:	f7f2 fc47 	bl	8100708 <__aeabi_dmul>
 810de7a:	a37b      	add	r3, pc, #492	; (adr r3, 810e068 <__ieee754_pow+0x710>)
 810de7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810de80:	f7f2 fa8c 	bl	810039c <__adddf3>
 810de84:	4622      	mov	r2, r4
 810de86:	462b      	mov	r3, r5
 810de88:	f7f2 fc3e 	bl	8100708 <__aeabi_dmul>
 810de8c:	a378      	add	r3, pc, #480	; (adr r3, 810e070 <__ieee754_pow+0x718>)
 810de8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810de92:	f7f2 fa83 	bl	810039c <__adddf3>
 810de96:	4622      	mov	r2, r4
 810de98:	462b      	mov	r3, r5
 810de9a:	f7f2 fc35 	bl	8100708 <__aeabi_dmul>
 810de9e:	a376      	add	r3, pc, #472	; (adr r3, 810e078 <__ieee754_pow+0x720>)
 810dea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810dea4:	f7f2 fa7a 	bl	810039c <__adddf3>
 810dea8:	4622      	mov	r2, r4
 810deaa:	462b      	mov	r3, r5
 810deac:	f7f2 fc2c 	bl	8100708 <__aeabi_dmul>
 810deb0:	a373      	add	r3, pc, #460	; (adr r3, 810e080 <__ieee754_pow+0x728>)
 810deb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 810deb6:	f7f2 fa71 	bl	810039c <__adddf3>
 810deba:	4622      	mov	r2, r4
 810debc:	462b      	mov	r3, r5
 810debe:	f7f2 fc23 	bl	8100708 <__aeabi_dmul>
 810dec2:	a371      	add	r3, pc, #452	; (adr r3, 810e088 <__ieee754_pow+0x730>)
 810dec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810dec8:	f7f2 fa68 	bl	810039c <__adddf3>
 810decc:	4622      	mov	r2, r4
 810dece:	4606      	mov	r6, r0
 810ded0:	460f      	mov	r7, r1
 810ded2:	462b      	mov	r3, r5
 810ded4:	4620      	mov	r0, r4
 810ded6:	4629      	mov	r1, r5
 810ded8:	f7f2 fc16 	bl	8100708 <__aeabi_dmul>
 810dedc:	4602      	mov	r2, r0
 810dede:	460b      	mov	r3, r1
 810dee0:	4630      	mov	r0, r6
 810dee2:	4639      	mov	r1, r7
 810dee4:	f7f2 fc10 	bl	8100708 <__aeabi_dmul>
 810dee8:	4642      	mov	r2, r8
 810deea:	4604      	mov	r4, r0
 810deec:	460d      	mov	r5, r1
 810deee:	464b      	mov	r3, r9
 810def0:	ec51 0b18 	vmov	r0, r1, d8
 810def4:	f7f2 fa52 	bl	810039c <__adddf3>
 810def8:	ec53 2b19 	vmov	r2, r3, d9
 810defc:	f7f2 fc04 	bl	8100708 <__aeabi_dmul>
 810df00:	4622      	mov	r2, r4
 810df02:	462b      	mov	r3, r5
 810df04:	f7f2 fa4a 	bl	810039c <__adddf3>
 810df08:	4642      	mov	r2, r8
 810df0a:	4682      	mov	sl, r0
 810df0c:	468b      	mov	fp, r1
 810df0e:	464b      	mov	r3, r9
 810df10:	4640      	mov	r0, r8
 810df12:	4649      	mov	r1, r9
 810df14:	f7f2 fbf8 	bl	8100708 <__aeabi_dmul>
 810df18:	4b6b      	ldr	r3, [pc, #428]	; (810e0c8 <__ieee754_pow+0x770>)
 810df1a:	2200      	movs	r2, #0
 810df1c:	4606      	mov	r6, r0
 810df1e:	460f      	mov	r7, r1
 810df20:	f7f2 fa3c 	bl	810039c <__adddf3>
 810df24:	4652      	mov	r2, sl
 810df26:	465b      	mov	r3, fp
 810df28:	f7f2 fa38 	bl	810039c <__adddf3>
 810df2c:	2000      	movs	r0, #0
 810df2e:	4604      	mov	r4, r0
 810df30:	460d      	mov	r5, r1
 810df32:	4602      	mov	r2, r0
 810df34:	460b      	mov	r3, r1
 810df36:	4640      	mov	r0, r8
 810df38:	4649      	mov	r1, r9
 810df3a:	f7f2 fbe5 	bl	8100708 <__aeabi_dmul>
 810df3e:	4b62      	ldr	r3, [pc, #392]	; (810e0c8 <__ieee754_pow+0x770>)
 810df40:	4680      	mov	r8, r0
 810df42:	4689      	mov	r9, r1
 810df44:	2200      	movs	r2, #0
 810df46:	4620      	mov	r0, r4
 810df48:	4629      	mov	r1, r5
 810df4a:	f7f2 fa25 	bl	8100398 <__aeabi_dsub>
 810df4e:	4632      	mov	r2, r6
 810df50:	463b      	mov	r3, r7
 810df52:	f7f2 fa21 	bl	8100398 <__aeabi_dsub>
 810df56:	4602      	mov	r2, r0
 810df58:	460b      	mov	r3, r1
 810df5a:	4650      	mov	r0, sl
 810df5c:	4659      	mov	r1, fp
 810df5e:	f7f2 fa1b 	bl	8100398 <__aeabi_dsub>
 810df62:	ec53 2b18 	vmov	r2, r3, d8
 810df66:	f7f2 fbcf 	bl	8100708 <__aeabi_dmul>
 810df6a:	4622      	mov	r2, r4
 810df6c:	4606      	mov	r6, r0
 810df6e:	460f      	mov	r7, r1
 810df70:	462b      	mov	r3, r5
 810df72:	ec51 0b19 	vmov	r0, r1, d9
 810df76:	f7f2 fbc7 	bl	8100708 <__aeabi_dmul>
 810df7a:	4602      	mov	r2, r0
 810df7c:	460b      	mov	r3, r1
 810df7e:	4630      	mov	r0, r6
 810df80:	4639      	mov	r1, r7
 810df82:	f7f2 fa0b 	bl	810039c <__adddf3>
 810df86:	4606      	mov	r6, r0
 810df88:	460f      	mov	r7, r1
 810df8a:	4602      	mov	r2, r0
 810df8c:	460b      	mov	r3, r1
 810df8e:	4640      	mov	r0, r8
 810df90:	4649      	mov	r1, r9
 810df92:	f7f2 fa03 	bl	810039c <__adddf3>
 810df96:	a33e      	add	r3, pc, #248	; (adr r3, 810e090 <__ieee754_pow+0x738>)
 810df98:	e9d3 2300 	ldrd	r2, r3, [r3]
 810df9c:	2000      	movs	r0, #0
 810df9e:	4604      	mov	r4, r0
 810dfa0:	460d      	mov	r5, r1
 810dfa2:	f7f2 fbb1 	bl	8100708 <__aeabi_dmul>
 810dfa6:	4642      	mov	r2, r8
 810dfa8:	ec41 0b18 	vmov	d8, r0, r1
 810dfac:	464b      	mov	r3, r9
 810dfae:	4620      	mov	r0, r4
 810dfb0:	4629      	mov	r1, r5
 810dfb2:	f7f2 f9f1 	bl	8100398 <__aeabi_dsub>
 810dfb6:	4602      	mov	r2, r0
 810dfb8:	460b      	mov	r3, r1
 810dfba:	4630      	mov	r0, r6
 810dfbc:	4639      	mov	r1, r7
 810dfbe:	f7f2 f9eb 	bl	8100398 <__aeabi_dsub>
 810dfc2:	a335      	add	r3, pc, #212	; (adr r3, 810e098 <__ieee754_pow+0x740>)
 810dfc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810dfc8:	f7f2 fb9e 	bl	8100708 <__aeabi_dmul>
 810dfcc:	a334      	add	r3, pc, #208	; (adr r3, 810e0a0 <__ieee754_pow+0x748>)
 810dfce:	e9d3 2300 	ldrd	r2, r3, [r3]
 810dfd2:	4606      	mov	r6, r0
 810dfd4:	460f      	mov	r7, r1
 810dfd6:	4620      	mov	r0, r4
 810dfd8:	4629      	mov	r1, r5
 810dfda:	f7f2 fb95 	bl	8100708 <__aeabi_dmul>
 810dfde:	4602      	mov	r2, r0
 810dfe0:	460b      	mov	r3, r1
 810dfe2:	4630      	mov	r0, r6
 810dfe4:	4639      	mov	r1, r7
 810dfe6:	f7f2 f9d9 	bl	810039c <__adddf3>
 810dfea:	9a07      	ldr	r2, [sp, #28]
 810dfec:	4b37      	ldr	r3, [pc, #220]	; (810e0cc <__ieee754_pow+0x774>)
 810dfee:	4413      	add	r3, r2
 810dff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810dff4:	f7f2 f9d2 	bl	810039c <__adddf3>
 810dff8:	4682      	mov	sl, r0
 810dffa:	9805      	ldr	r0, [sp, #20]
 810dffc:	468b      	mov	fp, r1
 810dffe:	f7f2 fb19 	bl	8100634 <__aeabi_i2d>
 810e002:	9a07      	ldr	r2, [sp, #28]
 810e004:	4b32      	ldr	r3, [pc, #200]	; (810e0d0 <__ieee754_pow+0x778>)
 810e006:	4413      	add	r3, r2
 810e008:	e9d3 8900 	ldrd	r8, r9, [r3]
 810e00c:	4606      	mov	r6, r0
 810e00e:	460f      	mov	r7, r1
 810e010:	4652      	mov	r2, sl
 810e012:	465b      	mov	r3, fp
 810e014:	ec51 0b18 	vmov	r0, r1, d8
 810e018:	f7f2 f9c0 	bl	810039c <__adddf3>
 810e01c:	4642      	mov	r2, r8
 810e01e:	464b      	mov	r3, r9
 810e020:	f7f2 f9bc 	bl	810039c <__adddf3>
 810e024:	4632      	mov	r2, r6
 810e026:	463b      	mov	r3, r7
 810e028:	f7f2 f9b8 	bl	810039c <__adddf3>
 810e02c:	2000      	movs	r0, #0
 810e02e:	4632      	mov	r2, r6
 810e030:	463b      	mov	r3, r7
 810e032:	4604      	mov	r4, r0
 810e034:	460d      	mov	r5, r1
 810e036:	f7f2 f9af 	bl	8100398 <__aeabi_dsub>
 810e03a:	4642      	mov	r2, r8
 810e03c:	464b      	mov	r3, r9
 810e03e:	f7f2 f9ab 	bl	8100398 <__aeabi_dsub>
 810e042:	ec53 2b18 	vmov	r2, r3, d8
 810e046:	f7f2 f9a7 	bl	8100398 <__aeabi_dsub>
 810e04a:	4602      	mov	r2, r0
 810e04c:	460b      	mov	r3, r1
 810e04e:	4650      	mov	r0, sl
 810e050:	4659      	mov	r1, fp
 810e052:	e610      	b.n	810dc76 <__ieee754_pow+0x31e>
 810e054:	2401      	movs	r4, #1
 810e056:	e6a1      	b.n	810dd9c <__ieee754_pow+0x444>
 810e058:	ed9f 7b13 	vldr	d7, [pc, #76]	; 810e0a8 <__ieee754_pow+0x750>
 810e05c:	e617      	b.n	810dc8e <__ieee754_pow+0x336>
 810e05e:	bf00      	nop
 810e060:	4a454eef 	.word	0x4a454eef
 810e064:	3fca7e28 	.word	0x3fca7e28
 810e068:	93c9db65 	.word	0x93c9db65
 810e06c:	3fcd864a 	.word	0x3fcd864a
 810e070:	a91d4101 	.word	0xa91d4101
 810e074:	3fd17460 	.word	0x3fd17460
 810e078:	518f264d 	.word	0x518f264d
 810e07c:	3fd55555 	.word	0x3fd55555
 810e080:	db6fabff 	.word	0xdb6fabff
 810e084:	3fdb6db6 	.word	0x3fdb6db6
 810e088:	33333303 	.word	0x33333303
 810e08c:	3fe33333 	.word	0x3fe33333
 810e090:	e0000000 	.word	0xe0000000
 810e094:	3feec709 	.word	0x3feec709
 810e098:	dc3a03fd 	.word	0xdc3a03fd
 810e09c:	3feec709 	.word	0x3feec709
 810e0a0:	145b01f5 	.word	0x145b01f5
 810e0a4:	be3e2fe0 	.word	0xbe3e2fe0
 810e0a8:	00000000 	.word	0x00000000
 810e0ac:	3ff00000 	.word	0x3ff00000
 810e0b0:	7ff00000 	.word	0x7ff00000
 810e0b4:	43400000 	.word	0x43400000
 810e0b8:	0003988e 	.word	0x0003988e
 810e0bc:	000bb679 	.word	0x000bb679
 810e0c0:	0810ec10 	.word	0x0810ec10
 810e0c4:	3ff00000 	.word	0x3ff00000
 810e0c8:	40080000 	.word	0x40080000
 810e0cc:	0810ec30 	.word	0x0810ec30
 810e0d0:	0810ec20 	.word	0x0810ec20
 810e0d4:	a3b3      	add	r3, pc, #716	; (adr r3, 810e3a4 <__ieee754_pow+0xa4c>)
 810e0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e0da:	4640      	mov	r0, r8
 810e0dc:	4649      	mov	r1, r9
 810e0de:	f7f2 f95d 	bl	810039c <__adddf3>
 810e0e2:	4622      	mov	r2, r4
 810e0e4:	ec41 0b1a 	vmov	d10, r0, r1
 810e0e8:	462b      	mov	r3, r5
 810e0ea:	4630      	mov	r0, r6
 810e0ec:	4639      	mov	r1, r7
 810e0ee:	f7f2 f953 	bl	8100398 <__aeabi_dsub>
 810e0f2:	4602      	mov	r2, r0
 810e0f4:	460b      	mov	r3, r1
 810e0f6:	ec51 0b1a 	vmov	r0, r1, d10
 810e0fa:	f7f2 fd95 	bl	8100c28 <__aeabi_dcmpgt>
 810e0fe:	2800      	cmp	r0, #0
 810e100:	f47f ae04 	bne.w	810dd0c <__ieee754_pow+0x3b4>
 810e104:	4aa2      	ldr	r2, [pc, #648]	; (810e390 <__ieee754_pow+0xa38>)
 810e106:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 810e10a:	4293      	cmp	r3, r2
 810e10c:	f340 8107 	ble.w	810e31e <__ieee754_pow+0x9c6>
 810e110:	151b      	asrs	r3, r3, #20
 810e112:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 810e116:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 810e11a:	fa4a fa03 	asr.w	sl, sl, r3
 810e11e:	44da      	add	sl, fp
 810e120:	f3ca 510a 	ubfx	r1, sl, #20, #11
 810e124:	489b      	ldr	r0, [pc, #620]	; (810e394 <__ieee754_pow+0xa3c>)
 810e126:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 810e12a:	4108      	asrs	r0, r1
 810e12c:	ea00 030a 	and.w	r3, r0, sl
 810e130:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 810e134:	f1c1 0114 	rsb	r1, r1, #20
 810e138:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 810e13c:	fa4a fa01 	asr.w	sl, sl, r1
 810e140:	f1bb 0f00 	cmp.w	fp, #0
 810e144:	f04f 0200 	mov.w	r2, #0
 810e148:	4620      	mov	r0, r4
 810e14a:	4629      	mov	r1, r5
 810e14c:	bfb8      	it	lt
 810e14e:	f1ca 0a00 	rsblt	sl, sl, #0
 810e152:	f7f2 f921 	bl	8100398 <__aeabi_dsub>
 810e156:	ec41 0b19 	vmov	d9, r0, r1
 810e15a:	4642      	mov	r2, r8
 810e15c:	464b      	mov	r3, r9
 810e15e:	ec51 0b19 	vmov	r0, r1, d9
 810e162:	f7f2 f91b 	bl	810039c <__adddf3>
 810e166:	a37a      	add	r3, pc, #488	; (adr r3, 810e350 <__ieee754_pow+0x9f8>)
 810e168:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e16c:	2000      	movs	r0, #0
 810e16e:	4604      	mov	r4, r0
 810e170:	460d      	mov	r5, r1
 810e172:	f7f2 fac9 	bl	8100708 <__aeabi_dmul>
 810e176:	ec53 2b19 	vmov	r2, r3, d9
 810e17a:	4606      	mov	r6, r0
 810e17c:	460f      	mov	r7, r1
 810e17e:	4620      	mov	r0, r4
 810e180:	4629      	mov	r1, r5
 810e182:	f7f2 f909 	bl	8100398 <__aeabi_dsub>
 810e186:	4602      	mov	r2, r0
 810e188:	460b      	mov	r3, r1
 810e18a:	4640      	mov	r0, r8
 810e18c:	4649      	mov	r1, r9
 810e18e:	f7f2 f903 	bl	8100398 <__aeabi_dsub>
 810e192:	a371      	add	r3, pc, #452	; (adr r3, 810e358 <__ieee754_pow+0xa00>)
 810e194:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e198:	f7f2 fab6 	bl	8100708 <__aeabi_dmul>
 810e19c:	a370      	add	r3, pc, #448	; (adr r3, 810e360 <__ieee754_pow+0xa08>)
 810e19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e1a2:	4680      	mov	r8, r0
 810e1a4:	4689      	mov	r9, r1
 810e1a6:	4620      	mov	r0, r4
 810e1a8:	4629      	mov	r1, r5
 810e1aa:	f7f2 faad 	bl	8100708 <__aeabi_dmul>
 810e1ae:	4602      	mov	r2, r0
 810e1b0:	460b      	mov	r3, r1
 810e1b2:	4640      	mov	r0, r8
 810e1b4:	4649      	mov	r1, r9
 810e1b6:	f7f2 f8f1 	bl	810039c <__adddf3>
 810e1ba:	4604      	mov	r4, r0
 810e1bc:	460d      	mov	r5, r1
 810e1be:	4602      	mov	r2, r0
 810e1c0:	460b      	mov	r3, r1
 810e1c2:	4630      	mov	r0, r6
 810e1c4:	4639      	mov	r1, r7
 810e1c6:	f7f2 f8e9 	bl	810039c <__adddf3>
 810e1ca:	4632      	mov	r2, r6
 810e1cc:	463b      	mov	r3, r7
 810e1ce:	4680      	mov	r8, r0
 810e1d0:	4689      	mov	r9, r1
 810e1d2:	f7f2 f8e1 	bl	8100398 <__aeabi_dsub>
 810e1d6:	4602      	mov	r2, r0
 810e1d8:	460b      	mov	r3, r1
 810e1da:	4620      	mov	r0, r4
 810e1dc:	4629      	mov	r1, r5
 810e1de:	f7f2 f8db 	bl	8100398 <__aeabi_dsub>
 810e1e2:	4642      	mov	r2, r8
 810e1e4:	4606      	mov	r6, r0
 810e1e6:	460f      	mov	r7, r1
 810e1e8:	464b      	mov	r3, r9
 810e1ea:	4640      	mov	r0, r8
 810e1ec:	4649      	mov	r1, r9
 810e1ee:	f7f2 fa8b 	bl	8100708 <__aeabi_dmul>
 810e1f2:	a35d      	add	r3, pc, #372	; (adr r3, 810e368 <__ieee754_pow+0xa10>)
 810e1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e1f8:	4604      	mov	r4, r0
 810e1fa:	460d      	mov	r5, r1
 810e1fc:	f7f2 fa84 	bl	8100708 <__aeabi_dmul>
 810e200:	a35b      	add	r3, pc, #364	; (adr r3, 810e370 <__ieee754_pow+0xa18>)
 810e202:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e206:	f7f2 f8c7 	bl	8100398 <__aeabi_dsub>
 810e20a:	4622      	mov	r2, r4
 810e20c:	462b      	mov	r3, r5
 810e20e:	f7f2 fa7b 	bl	8100708 <__aeabi_dmul>
 810e212:	a359      	add	r3, pc, #356	; (adr r3, 810e378 <__ieee754_pow+0xa20>)
 810e214:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e218:	f7f2 f8c0 	bl	810039c <__adddf3>
 810e21c:	4622      	mov	r2, r4
 810e21e:	462b      	mov	r3, r5
 810e220:	f7f2 fa72 	bl	8100708 <__aeabi_dmul>
 810e224:	a356      	add	r3, pc, #344	; (adr r3, 810e380 <__ieee754_pow+0xa28>)
 810e226:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e22a:	f7f2 f8b5 	bl	8100398 <__aeabi_dsub>
 810e22e:	4622      	mov	r2, r4
 810e230:	462b      	mov	r3, r5
 810e232:	f7f2 fa69 	bl	8100708 <__aeabi_dmul>
 810e236:	a354      	add	r3, pc, #336	; (adr r3, 810e388 <__ieee754_pow+0xa30>)
 810e238:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e23c:	f7f2 f8ae 	bl	810039c <__adddf3>
 810e240:	4622      	mov	r2, r4
 810e242:	462b      	mov	r3, r5
 810e244:	f7f2 fa60 	bl	8100708 <__aeabi_dmul>
 810e248:	4602      	mov	r2, r0
 810e24a:	460b      	mov	r3, r1
 810e24c:	4640      	mov	r0, r8
 810e24e:	4649      	mov	r1, r9
 810e250:	f7f2 f8a2 	bl	8100398 <__aeabi_dsub>
 810e254:	4604      	mov	r4, r0
 810e256:	460d      	mov	r5, r1
 810e258:	4602      	mov	r2, r0
 810e25a:	460b      	mov	r3, r1
 810e25c:	4640      	mov	r0, r8
 810e25e:	4649      	mov	r1, r9
 810e260:	f7f2 fa52 	bl	8100708 <__aeabi_dmul>
 810e264:	2200      	movs	r2, #0
 810e266:	ec41 0b19 	vmov	d9, r0, r1
 810e26a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 810e26e:	4620      	mov	r0, r4
 810e270:	4629      	mov	r1, r5
 810e272:	f7f2 f891 	bl	8100398 <__aeabi_dsub>
 810e276:	4602      	mov	r2, r0
 810e278:	460b      	mov	r3, r1
 810e27a:	ec51 0b19 	vmov	r0, r1, d9
 810e27e:	f7f2 fb6d 	bl	810095c <__aeabi_ddiv>
 810e282:	4632      	mov	r2, r6
 810e284:	4604      	mov	r4, r0
 810e286:	460d      	mov	r5, r1
 810e288:	463b      	mov	r3, r7
 810e28a:	4640      	mov	r0, r8
 810e28c:	4649      	mov	r1, r9
 810e28e:	f7f2 fa3b 	bl	8100708 <__aeabi_dmul>
 810e292:	4632      	mov	r2, r6
 810e294:	463b      	mov	r3, r7
 810e296:	f7f2 f881 	bl	810039c <__adddf3>
 810e29a:	4602      	mov	r2, r0
 810e29c:	460b      	mov	r3, r1
 810e29e:	4620      	mov	r0, r4
 810e2a0:	4629      	mov	r1, r5
 810e2a2:	f7f2 f879 	bl	8100398 <__aeabi_dsub>
 810e2a6:	4642      	mov	r2, r8
 810e2a8:	464b      	mov	r3, r9
 810e2aa:	f7f2 f875 	bl	8100398 <__aeabi_dsub>
 810e2ae:	460b      	mov	r3, r1
 810e2b0:	4602      	mov	r2, r0
 810e2b2:	4939      	ldr	r1, [pc, #228]	; (810e398 <__ieee754_pow+0xa40>)
 810e2b4:	2000      	movs	r0, #0
 810e2b6:	f7f2 f86f 	bl	8100398 <__aeabi_dsub>
 810e2ba:	ec41 0b10 	vmov	d0, r0, r1
 810e2be:	ee10 3a90 	vmov	r3, s1
 810e2c2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 810e2c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810e2ca:	da2b      	bge.n	810e324 <__ieee754_pow+0x9cc>
 810e2cc:	4650      	mov	r0, sl
 810e2ce:	f000 f8a7 	bl	810e420 <scalbn>
 810e2d2:	ec51 0b10 	vmov	r0, r1, d0
 810e2d6:	ec53 2b18 	vmov	r2, r3, d8
 810e2da:	f7ff bbee 	b.w	810daba <__ieee754_pow+0x162>
 810e2de:	4b2f      	ldr	r3, [pc, #188]	; (810e39c <__ieee754_pow+0xa44>)
 810e2e0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 810e2e4:	429e      	cmp	r6, r3
 810e2e6:	f77f af0d 	ble.w	810e104 <__ieee754_pow+0x7ac>
 810e2ea:	4b2d      	ldr	r3, [pc, #180]	; (810e3a0 <__ieee754_pow+0xa48>)
 810e2ec:	440b      	add	r3, r1
 810e2ee:	4303      	orrs	r3, r0
 810e2f0:	d009      	beq.n	810e306 <__ieee754_pow+0x9ae>
 810e2f2:	ec51 0b18 	vmov	r0, r1, d8
 810e2f6:	2200      	movs	r2, #0
 810e2f8:	2300      	movs	r3, #0
 810e2fa:	f7f2 fc77 	bl	8100bec <__aeabi_dcmplt>
 810e2fe:	3800      	subs	r0, #0
 810e300:	bf18      	it	ne
 810e302:	2001      	movne	r0, #1
 810e304:	e448      	b.n	810db98 <__ieee754_pow+0x240>
 810e306:	4622      	mov	r2, r4
 810e308:	462b      	mov	r3, r5
 810e30a:	f7f2 f845 	bl	8100398 <__aeabi_dsub>
 810e30e:	4642      	mov	r2, r8
 810e310:	464b      	mov	r3, r9
 810e312:	f7f2 fc7f 	bl	8100c14 <__aeabi_dcmpge>
 810e316:	2800      	cmp	r0, #0
 810e318:	f43f aef4 	beq.w	810e104 <__ieee754_pow+0x7ac>
 810e31c:	e7e9      	b.n	810e2f2 <__ieee754_pow+0x99a>
 810e31e:	f04f 0a00 	mov.w	sl, #0
 810e322:	e71a      	b.n	810e15a <__ieee754_pow+0x802>
 810e324:	ec51 0b10 	vmov	r0, r1, d0
 810e328:	4619      	mov	r1, r3
 810e32a:	e7d4      	b.n	810e2d6 <__ieee754_pow+0x97e>
 810e32c:	491a      	ldr	r1, [pc, #104]	; (810e398 <__ieee754_pow+0xa40>)
 810e32e:	2000      	movs	r0, #0
 810e330:	f7ff bb31 	b.w	810d996 <__ieee754_pow+0x3e>
 810e334:	2000      	movs	r0, #0
 810e336:	2100      	movs	r1, #0
 810e338:	f7ff bb2d 	b.w	810d996 <__ieee754_pow+0x3e>
 810e33c:	4630      	mov	r0, r6
 810e33e:	4639      	mov	r1, r7
 810e340:	f7ff bb29 	b.w	810d996 <__ieee754_pow+0x3e>
 810e344:	9204      	str	r2, [sp, #16]
 810e346:	f7ff bb7b 	b.w	810da40 <__ieee754_pow+0xe8>
 810e34a:	2300      	movs	r3, #0
 810e34c:	f7ff bb65 	b.w	810da1a <__ieee754_pow+0xc2>
 810e350:	00000000 	.word	0x00000000
 810e354:	3fe62e43 	.word	0x3fe62e43
 810e358:	fefa39ef 	.word	0xfefa39ef
 810e35c:	3fe62e42 	.word	0x3fe62e42
 810e360:	0ca86c39 	.word	0x0ca86c39
 810e364:	be205c61 	.word	0xbe205c61
 810e368:	72bea4d0 	.word	0x72bea4d0
 810e36c:	3e663769 	.word	0x3e663769
 810e370:	c5d26bf1 	.word	0xc5d26bf1
 810e374:	3ebbbd41 	.word	0x3ebbbd41
 810e378:	af25de2c 	.word	0xaf25de2c
 810e37c:	3f11566a 	.word	0x3f11566a
 810e380:	16bebd93 	.word	0x16bebd93
 810e384:	3f66c16c 	.word	0x3f66c16c
 810e388:	5555553e 	.word	0x5555553e
 810e38c:	3fc55555 	.word	0x3fc55555
 810e390:	3fe00000 	.word	0x3fe00000
 810e394:	fff00000 	.word	0xfff00000
 810e398:	3ff00000 	.word	0x3ff00000
 810e39c:	4090cbff 	.word	0x4090cbff
 810e3a0:	3f6f3400 	.word	0x3f6f3400
 810e3a4:	652b82fe 	.word	0x652b82fe
 810e3a8:	3c971547 	.word	0x3c971547

0810e3ac <with_errno>:
 810e3ac:	b570      	push	{r4, r5, r6, lr}
 810e3ae:	4604      	mov	r4, r0
 810e3b0:	460d      	mov	r5, r1
 810e3b2:	4616      	mov	r6, r2
 810e3b4:	f7fc fc8e 	bl	810acd4 <__errno>
 810e3b8:	4629      	mov	r1, r5
 810e3ba:	6006      	str	r6, [r0, #0]
 810e3bc:	4620      	mov	r0, r4
 810e3be:	bd70      	pop	{r4, r5, r6, pc}

0810e3c0 <xflow>:
 810e3c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810e3c2:	4614      	mov	r4, r2
 810e3c4:	461d      	mov	r5, r3
 810e3c6:	b108      	cbz	r0, 810e3cc <xflow+0xc>
 810e3c8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 810e3cc:	e9cd 2300 	strd	r2, r3, [sp]
 810e3d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 810e3d4:	4620      	mov	r0, r4
 810e3d6:	4629      	mov	r1, r5
 810e3d8:	f7f2 f996 	bl	8100708 <__aeabi_dmul>
 810e3dc:	2222      	movs	r2, #34	; 0x22
 810e3de:	b003      	add	sp, #12
 810e3e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 810e3e4:	f7ff bfe2 	b.w	810e3ac <with_errno>

0810e3e8 <__math_uflow>:
 810e3e8:	b508      	push	{r3, lr}
 810e3ea:	2200      	movs	r2, #0
 810e3ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 810e3f0:	f7ff ffe6 	bl	810e3c0 <xflow>
 810e3f4:	ec41 0b10 	vmov	d0, r0, r1
 810e3f8:	bd08      	pop	{r3, pc}

0810e3fa <__math_oflow>:
 810e3fa:	b508      	push	{r3, lr}
 810e3fc:	2200      	movs	r2, #0
 810e3fe:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 810e402:	f7ff ffdd 	bl	810e3c0 <xflow>
 810e406:	ec41 0b10 	vmov	d0, r0, r1
 810e40a:	bd08      	pop	{r3, pc}

0810e40c <fabs>:
 810e40c:	ec51 0b10 	vmov	r0, r1, d0
 810e410:	ee10 2a10 	vmov	r2, s0
 810e414:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 810e418:	ec43 2b10 	vmov	d0, r2, r3
 810e41c:	4770      	bx	lr
	...

0810e420 <scalbn>:
 810e420:	b570      	push	{r4, r5, r6, lr}
 810e422:	ec55 4b10 	vmov	r4, r5, d0
 810e426:	f3c5 510a 	ubfx	r1, r5, #20, #11
 810e42a:	4606      	mov	r6, r0
 810e42c:	462b      	mov	r3, r5
 810e42e:	b999      	cbnz	r1, 810e458 <scalbn+0x38>
 810e430:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 810e434:	4323      	orrs	r3, r4
 810e436:	d03f      	beq.n	810e4b8 <scalbn+0x98>
 810e438:	4b35      	ldr	r3, [pc, #212]	; (810e510 <scalbn+0xf0>)
 810e43a:	4629      	mov	r1, r5
 810e43c:	ee10 0a10 	vmov	r0, s0
 810e440:	2200      	movs	r2, #0
 810e442:	f7f2 f961 	bl	8100708 <__aeabi_dmul>
 810e446:	4b33      	ldr	r3, [pc, #204]	; (810e514 <scalbn+0xf4>)
 810e448:	429e      	cmp	r6, r3
 810e44a:	4604      	mov	r4, r0
 810e44c:	460d      	mov	r5, r1
 810e44e:	da10      	bge.n	810e472 <scalbn+0x52>
 810e450:	a327      	add	r3, pc, #156	; (adr r3, 810e4f0 <scalbn+0xd0>)
 810e452:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e456:	e01f      	b.n	810e498 <scalbn+0x78>
 810e458:	f240 72ff 	movw	r2, #2047	; 0x7ff
 810e45c:	4291      	cmp	r1, r2
 810e45e:	d10c      	bne.n	810e47a <scalbn+0x5a>
 810e460:	ee10 2a10 	vmov	r2, s0
 810e464:	4620      	mov	r0, r4
 810e466:	4629      	mov	r1, r5
 810e468:	f7f1 ff98 	bl	810039c <__adddf3>
 810e46c:	4604      	mov	r4, r0
 810e46e:	460d      	mov	r5, r1
 810e470:	e022      	b.n	810e4b8 <scalbn+0x98>
 810e472:	460b      	mov	r3, r1
 810e474:	f3c1 510a 	ubfx	r1, r1, #20, #11
 810e478:	3936      	subs	r1, #54	; 0x36
 810e47a:	f24c 3250 	movw	r2, #50000	; 0xc350
 810e47e:	4296      	cmp	r6, r2
 810e480:	dd0d      	ble.n	810e49e <scalbn+0x7e>
 810e482:	2d00      	cmp	r5, #0
 810e484:	a11c      	add	r1, pc, #112	; (adr r1, 810e4f8 <scalbn+0xd8>)
 810e486:	e9d1 0100 	ldrd	r0, r1, [r1]
 810e48a:	da02      	bge.n	810e492 <scalbn+0x72>
 810e48c:	a11c      	add	r1, pc, #112	; (adr r1, 810e500 <scalbn+0xe0>)
 810e48e:	e9d1 0100 	ldrd	r0, r1, [r1]
 810e492:	a319      	add	r3, pc, #100	; (adr r3, 810e4f8 <scalbn+0xd8>)
 810e494:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e498:	f7f2 f936 	bl	8100708 <__aeabi_dmul>
 810e49c:	e7e6      	b.n	810e46c <scalbn+0x4c>
 810e49e:	1872      	adds	r2, r6, r1
 810e4a0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 810e4a4:	428a      	cmp	r2, r1
 810e4a6:	dcec      	bgt.n	810e482 <scalbn+0x62>
 810e4a8:	2a00      	cmp	r2, #0
 810e4aa:	dd08      	ble.n	810e4be <scalbn+0x9e>
 810e4ac:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 810e4b0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 810e4b4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 810e4b8:	ec45 4b10 	vmov	d0, r4, r5
 810e4bc:	bd70      	pop	{r4, r5, r6, pc}
 810e4be:	f112 0f35 	cmn.w	r2, #53	; 0x35
 810e4c2:	da08      	bge.n	810e4d6 <scalbn+0xb6>
 810e4c4:	2d00      	cmp	r5, #0
 810e4c6:	a10a      	add	r1, pc, #40	; (adr r1, 810e4f0 <scalbn+0xd0>)
 810e4c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 810e4cc:	dac0      	bge.n	810e450 <scalbn+0x30>
 810e4ce:	a10e      	add	r1, pc, #56	; (adr r1, 810e508 <scalbn+0xe8>)
 810e4d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 810e4d4:	e7bc      	b.n	810e450 <scalbn+0x30>
 810e4d6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 810e4da:	3236      	adds	r2, #54	; 0x36
 810e4dc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 810e4e0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 810e4e4:	4620      	mov	r0, r4
 810e4e6:	4b0c      	ldr	r3, [pc, #48]	; (810e518 <scalbn+0xf8>)
 810e4e8:	2200      	movs	r2, #0
 810e4ea:	e7d5      	b.n	810e498 <scalbn+0x78>
 810e4ec:	f3af 8000 	nop.w
 810e4f0:	c2f8f359 	.word	0xc2f8f359
 810e4f4:	01a56e1f 	.word	0x01a56e1f
 810e4f8:	8800759c 	.word	0x8800759c
 810e4fc:	7e37e43c 	.word	0x7e37e43c
 810e500:	8800759c 	.word	0x8800759c
 810e504:	fe37e43c 	.word	0xfe37e43c
 810e508:	c2f8f359 	.word	0xc2f8f359
 810e50c:	81a56e1f 	.word	0x81a56e1f
 810e510:	43500000 	.word	0x43500000
 810e514:	ffff3cb0 	.word	0xffff3cb0
 810e518:	3c900000 	.word	0x3c900000

0810e51c <__ieee754_sqrt>:
 810e51c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810e520:	ec55 4b10 	vmov	r4, r5, d0
 810e524:	4e67      	ldr	r6, [pc, #412]	; (810e6c4 <__ieee754_sqrt+0x1a8>)
 810e526:	43ae      	bics	r6, r5
 810e528:	ee10 0a10 	vmov	r0, s0
 810e52c:	ee10 2a10 	vmov	r2, s0
 810e530:	4629      	mov	r1, r5
 810e532:	462b      	mov	r3, r5
 810e534:	d10d      	bne.n	810e552 <__ieee754_sqrt+0x36>
 810e536:	f7f2 f8e7 	bl	8100708 <__aeabi_dmul>
 810e53a:	4602      	mov	r2, r0
 810e53c:	460b      	mov	r3, r1
 810e53e:	4620      	mov	r0, r4
 810e540:	4629      	mov	r1, r5
 810e542:	f7f1 ff2b 	bl	810039c <__adddf3>
 810e546:	4604      	mov	r4, r0
 810e548:	460d      	mov	r5, r1
 810e54a:	ec45 4b10 	vmov	d0, r4, r5
 810e54e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810e552:	2d00      	cmp	r5, #0
 810e554:	dc0b      	bgt.n	810e56e <__ieee754_sqrt+0x52>
 810e556:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 810e55a:	4326      	orrs	r6, r4
 810e55c:	d0f5      	beq.n	810e54a <__ieee754_sqrt+0x2e>
 810e55e:	b135      	cbz	r5, 810e56e <__ieee754_sqrt+0x52>
 810e560:	f7f1 ff1a 	bl	8100398 <__aeabi_dsub>
 810e564:	4602      	mov	r2, r0
 810e566:	460b      	mov	r3, r1
 810e568:	f7f2 f9f8 	bl	810095c <__aeabi_ddiv>
 810e56c:	e7eb      	b.n	810e546 <__ieee754_sqrt+0x2a>
 810e56e:	1509      	asrs	r1, r1, #20
 810e570:	f000 808d 	beq.w	810e68e <__ieee754_sqrt+0x172>
 810e574:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810e578:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 810e57c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810e580:	07c9      	lsls	r1, r1, #31
 810e582:	bf5c      	itt	pl
 810e584:	005b      	lslpl	r3, r3, #1
 810e586:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 810e58a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 810e58e:	bf58      	it	pl
 810e590:	0052      	lslpl	r2, r2, #1
 810e592:	2500      	movs	r5, #0
 810e594:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 810e598:	1076      	asrs	r6, r6, #1
 810e59a:	0052      	lsls	r2, r2, #1
 810e59c:	f04f 0e16 	mov.w	lr, #22
 810e5a0:	46ac      	mov	ip, r5
 810e5a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 810e5a6:	eb0c 0001 	add.w	r0, ip, r1
 810e5aa:	4298      	cmp	r0, r3
 810e5ac:	bfde      	ittt	le
 810e5ae:	1a1b      	suble	r3, r3, r0
 810e5b0:	eb00 0c01 	addle.w	ip, r0, r1
 810e5b4:	186d      	addle	r5, r5, r1
 810e5b6:	005b      	lsls	r3, r3, #1
 810e5b8:	f1be 0e01 	subs.w	lr, lr, #1
 810e5bc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 810e5c0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 810e5c4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 810e5c8:	d1ed      	bne.n	810e5a6 <__ieee754_sqrt+0x8a>
 810e5ca:	4674      	mov	r4, lr
 810e5cc:	2720      	movs	r7, #32
 810e5ce:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 810e5d2:	4563      	cmp	r3, ip
 810e5d4:	eb01 000e 	add.w	r0, r1, lr
 810e5d8:	dc02      	bgt.n	810e5e0 <__ieee754_sqrt+0xc4>
 810e5da:	d113      	bne.n	810e604 <__ieee754_sqrt+0xe8>
 810e5dc:	4290      	cmp	r0, r2
 810e5de:	d811      	bhi.n	810e604 <__ieee754_sqrt+0xe8>
 810e5e0:	2800      	cmp	r0, #0
 810e5e2:	eb00 0e01 	add.w	lr, r0, r1
 810e5e6:	da57      	bge.n	810e698 <__ieee754_sqrt+0x17c>
 810e5e8:	f1be 0f00 	cmp.w	lr, #0
 810e5ec:	db54      	blt.n	810e698 <__ieee754_sqrt+0x17c>
 810e5ee:	f10c 0801 	add.w	r8, ip, #1
 810e5f2:	eba3 030c 	sub.w	r3, r3, ip
 810e5f6:	4290      	cmp	r0, r2
 810e5f8:	bf88      	it	hi
 810e5fa:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 810e5fe:	1a12      	subs	r2, r2, r0
 810e600:	440c      	add	r4, r1
 810e602:	46c4      	mov	ip, r8
 810e604:	005b      	lsls	r3, r3, #1
 810e606:	3f01      	subs	r7, #1
 810e608:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 810e60c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 810e610:	ea4f 0242 	mov.w	r2, r2, lsl #1
 810e614:	d1dd      	bne.n	810e5d2 <__ieee754_sqrt+0xb6>
 810e616:	4313      	orrs	r3, r2
 810e618:	d01b      	beq.n	810e652 <__ieee754_sqrt+0x136>
 810e61a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 810e6c8 <__ieee754_sqrt+0x1ac>
 810e61e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 810e6cc <__ieee754_sqrt+0x1b0>
 810e622:	e9da 0100 	ldrd	r0, r1, [sl]
 810e626:	e9db 2300 	ldrd	r2, r3, [fp]
 810e62a:	f7f1 feb5 	bl	8100398 <__aeabi_dsub>
 810e62e:	e9da 8900 	ldrd	r8, r9, [sl]
 810e632:	4602      	mov	r2, r0
 810e634:	460b      	mov	r3, r1
 810e636:	4640      	mov	r0, r8
 810e638:	4649      	mov	r1, r9
 810e63a:	f7f2 fae1 	bl	8100c00 <__aeabi_dcmple>
 810e63e:	b140      	cbz	r0, 810e652 <__ieee754_sqrt+0x136>
 810e640:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 810e644:	e9da 0100 	ldrd	r0, r1, [sl]
 810e648:	e9db 2300 	ldrd	r2, r3, [fp]
 810e64c:	d126      	bne.n	810e69c <__ieee754_sqrt+0x180>
 810e64e:	3501      	adds	r5, #1
 810e650:	463c      	mov	r4, r7
 810e652:	106a      	asrs	r2, r5, #1
 810e654:	0863      	lsrs	r3, r4, #1
 810e656:	07e9      	lsls	r1, r5, #31
 810e658:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 810e65c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 810e660:	bf48      	it	mi
 810e662:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 810e666:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 810e66a:	461c      	mov	r4, r3
 810e66c:	e76d      	b.n	810e54a <__ieee754_sqrt+0x2e>
 810e66e:	0ad3      	lsrs	r3, r2, #11
 810e670:	3815      	subs	r0, #21
 810e672:	0552      	lsls	r2, r2, #21
 810e674:	2b00      	cmp	r3, #0
 810e676:	d0fa      	beq.n	810e66e <__ieee754_sqrt+0x152>
 810e678:	02dc      	lsls	r4, r3, #11
 810e67a:	d50a      	bpl.n	810e692 <__ieee754_sqrt+0x176>
 810e67c:	f1c1 0420 	rsb	r4, r1, #32
 810e680:	fa22 f404 	lsr.w	r4, r2, r4
 810e684:	1e4d      	subs	r5, r1, #1
 810e686:	408a      	lsls	r2, r1
 810e688:	4323      	orrs	r3, r4
 810e68a:	1b41      	subs	r1, r0, r5
 810e68c:	e772      	b.n	810e574 <__ieee754_sqrt+0x58>
 810e68e:	4608      	mov	r0, r1
 810e690:	e7f0      	b.n	810e674 <__ieee754_sqrt+0x158>
 810e692:	005b      	lsls	r3, r3, #1
 810e694:	3101      	adds	r1, #1
 810e696:	e7ef      	b.n	810e678 <__ieee754_sqrt+0x15c>
 810e698:	46e0      	mov	r8, ip
 810e69a:	e7aa      	b.n	810e5f2 <__ieee754_sqrt+0xd6>
 810e69c:	f7f1 fe7e 	bl	810039c <__adddf3>
 810e6a0:	e9da 8900 	ldrd	r8, r9, [sl]
 810e6a4:	4602      	mov	r2, r0
 810e6a6:	460b      	mov	r3, r1
 810e6a8:	4640      	mov	r0, r8
 810e6aa:	4649      	mov	r1, r9
 810e6ac:	f7f2 fa9e 	bl	8100bec <__aeabi_dcmplt>
 810e6b0:	b120      	cbz	r0, 810e6bc <__ieee754_sqrt+0x1a0>
 810e6b2:	1ca0      	adds	r0, r4, #2
 810e6b4:	bf08      	it	eq
 810e6b6:	3501      	addeq	r5, #1
 810e6b8:	3402      	adds	r4, #2
 810e6ba:	e7ca      	b.n	810e652 <__ieee754_sqrt+0x136>
 810e6bc:	3401      	adds	r4, #1
 810e6be:	f024 0401 	bic.w	r4, r4, #1
 810e6c2:	e7c6      	b.n	810e652 <__ieee754_sqrt+0x136>
 810e6c4:	7ff00000 	.word	0x7ff00000
 810e6c8:	100001d8 	.word	0x100001d8
 810e6cc:	100001e0 	.word	0x100001e0

0810e6d0 <_gettimeofday>:
 810e6d0:	4b02      	ldr	r3, [pc, #8]	; (810e6dc <_gettimeofday+0xc>)
 810e6d2:	2258      	movs	r2, #88	; 0x58
 810e6d4:	601a      	str	r2, [r3, #0]
 810e6d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810e6da:	4770      	bx	lr
 810e6dc:	100004c0 	.word	0x100004c0

0810e6e0 <_init>:
 810e6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810e6e2:	bf00      	nop
 810e6e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810e6e6:	bc08      	pop	{r3}
 810e6e8:	469e      	mov	lr, r3
 810e6ea:	4770      	bx	lr

0810e6ec <_fini>:
 810e6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810e6ee:	bf00      	nop
 810e6f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810e6f2:	bc08      	pop	{r3}
 810e6f4:	469e      	mov	lr, r3
 810e6f6:	4770      	bx	lr
