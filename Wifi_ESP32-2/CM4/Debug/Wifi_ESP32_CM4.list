
Wifi_ESP32_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e460  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000548  0810e700  0810e700  0001e700  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810ec48  0810ec48  0001ec48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810ec50  0810ec50  0001ec50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810ec54  0810ec54  0001ec54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e8  10000000  0810ec58  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002dc  100001e8  0810ee40  000201e8  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  100004c4  0810ee40  000204c4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001804f  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002bf3  00000000  00000000  000382aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001270  00000000  00000000  0003aea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000e76  00000000  00000000  0003c110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003bc34  00000000  00000000  0003cf86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00018a93  00000000  00000000  00078bba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0018b14a  00000000  00000000  0009164d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00006664  00000000  00000000  0021c798  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000071  00000000  00000000  00222dfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	100001e8 	.word	0x100001e8
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810e6e8 	.word	0x0810e6e8

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	100001ec 	.word	0x100001ec
 81002dc:	0810e6e8 	.word	0x0810e6e8

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <strlen>:
 8100380:	4603      	mov	r3, r0
 8100382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8100386:	2a00      	cmp	r2, #0
 8100388:	d1fb      	bne.n	8100382 <strlen+0x2>
 810038a:	1a18      	subs	r0, r3, r0
 810038c:	3801      	subs	r0, #1
 810038e:	4770      	bx	lr

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	; 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2uiz>:
 8100cb8:	004a      	lsls	r2, r1, #1
 8100cba:	d211      	bcs.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100cc0:	d211      	bcs.n	8100ce6 <__aeabi_d2uiz+0x2e>
 8100cc2:	d50d      	bpl.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100ccc:	d40e      	bmi.n	8100cec <__aeabi_d2uiz+0x34>
 8100cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cda:	fa23 f002 	lsr.w	r0, r3, r2
 8100cde:	4770      	bx	lr
 8100ce0:	f04f 0000 	mov.w	r0, #0
 8100ce4:	4770      	bx	lr
 8100ce6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cea:	d102      	bne.n	8100cf2 <__aeabi_d2uiz+0x3a>
 8100cec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8100cf0:	4770      	bx	lr
 8100cf2:	f04f 0000 	mov.w	r0, #0
 8100cf6:	4770      	bx	lr

08100cf8 <__aeabi_d2f>:
 8100cf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100d00:	bf24      	itt	cs
 8100d02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100d06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100d0a:	d90d      	bls.n	8100d28 <__aeabi_d2f+0x30>
 8100d0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100d10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100d1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d20:	bf08      	it	eq
 8100d22:	f020 0001 	biceq.w	r0, r0, #1
 8100d26:	4770      	bx	lr
 8100d28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100d2c:	d121      	bne.n	8100d72 <__aeabi_d2f+0x7a>
 8100d2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100d32:	bfbc      	itt	lt
 8100d34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100d38:	4770      	bxlt	lr
 8100d3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100d3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d42:	f1c2 0218 	rsb	r2, r2, #24
 8100d46:	f1c2 0c20 	rsb	ip, r2, #32
 8100d4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d4e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d52:	bf18      	it	ne
 8100d54:	f040 0001 	orrne.w	r0, r0, #1
 8100d58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d64:	ea40 000c 	orr.w	r0, r0, ip
 8100d68:	fa23 f302 	lsr.w	r3, r3, r2
 8100d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d70:	e7cc      	b.n	8100d0c <__aeabi_d2f+0x14>
 8100d72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d76:	d107      	bne.n	8100d88 <__aeabi_d2f+0x90>
 8100d78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d7c:	bf1e      	ittt	ne
 8100d7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100d82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100d86:	4770      	bxne	lr
 8100d88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100d94:	4770      	bx	lr
 8100d96:	bf00      	nop

08100d98 <__aeabi_uldivmod>:
 8100d98:	b953      	cbnz	r3, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9a:	b94a      	cbnz	r2, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9c:	2900      	cmp	r1, #0
 8100d9e:	bf08      	it	eq
 8100da0:	2800      	cmpeq	r0, #0
 8100da2:	bf1c      	itt	ne
 8100da4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8100da8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8100dac:	f000 b9a6 	b.w	81010fc <__aeabi_idiv0>
 8100db0:	f1ad 0c08 	sub.w	ip, sp, #8
 8100db4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100db8:	f000 f83c 	bl	8100e34 <__udivmoddi4>
 8100dbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100dc4:	b004      	add	sp, #16
 8100dc6:	4770      	bx	lr

08100dc8 <__aeabi_d2lz>:
 8100dc8:	b538      	push	{r3, r4, r5, lr}
 8100dca:	2200      	movs	r2, #0
 8100dcc:	2300      	movs	r3, #0
 8100dce:	4604      	mov	r4, r0
 8100dd0:	460d      	mov	r5, r1
 8100dd2:	f7ff ff0b 	bl	8100bec <__aeabi_dcmplt>
 8100dd6:	b928      	cbnz	r0, 8100de4 <__aeabi_d2lz+0x1c>
 8100dd8:	4620      	mov	r0, r4
 8100dda:	4629      	mov	r1, r5
 8100ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100de0:	f000 b80a 	b.w	8100df8 <__aeabi_d2ulz>
 8100de4:	4620      	mov	r0, r4
 8100de6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8100dea:	f000 f805 	bl	8100df8 <__aeabi_d2ulz>
 8100dee:	4240      	negs	r0, r0
 8100df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100df4:	bd38      	pop	{r3, r4, r5, pc}
 8100df6:	bf00      	nop

08100df8 <__aeabi_d2ulz>:
 8100df8:	b5d0      	push	{r4, r6, r7, lr}
 8100dfa:	4b0c      	ldr	r3, [pc, #48]	; (8100e2c <__aeabi_d2ulz+0x34>)
 8100dfc:	2200      	movs	r2, #0
 8100dfe:	4606      	mov	r6, r0
 8100e00:	460f      	mov	r7, r1
 8100e02:	f7ff fc81 	bl	8100708 <__aeabi_dmul>
 8100e06:	f7ff ff57 	bl	8100cb8 <__aeabi_d2uiz>
 8100e0a:	4604      	mov	r4, r0
 8100e0c:	f7ff fc02 	bl	8100614 <__aeabi_ui2d>
 8100e10:	4b07      	ldr	r3, [pc, #28]	; (8100e30 <__aeabi_d2ulz+0x38>)
 8100e12:	2200      	movs	r2, #0
 8100e14:	f7ff fc78 	bl	8100708 <__aeabi_dmul>
 8100e18:	4602      	mov	r2, r0
 8100e1a:	460b      	mov	r3, r1
 8100e1c:	4630      	mov	r0, r6
 8100e1e:	4639      	mov	r1, r7
 8100e20:	f7ff faba 	bl	8100398 <__aeabi_dsub>
 8100e24:	f7ff ff48 	bl	8100cb8 <__aeabi_d2uiz>
 8100e28:	4621      	mov	r1, r4
 8100e2a:	bdd0      	pop	{r4, r6, r7, pc}
 8100e2c:	3df00000 	.word	0x3df00000
 8100e30:	41f00000 	.word	0x41f00000

08100e34 <__udivmoddi4>:
 8100e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100e38:	9e08      	ldr	r6, [sp, #32]
 8100e3a:	460d      	mov	r5, r1
 8100e3c:	4604      	mov	r4, r0
 8100e3e:	460f      	mov	r7, r1
 8100e40:	2b00      	cmp	r3, #0
 8100e42:	d14a      	bne.n	8100eda <__udivmoddi4+0xa6>
 8100e44:	428a      	cmp	r2, r1
 8100e46:	4694      	mov	ip, r2
 8100e48:	d965      	bls.n	8100f16 <__udivmoddi4+0xe2>
 8100e4a:	fab2 f382 	clz	r3, r2
 8100e4e:	b143      	cbz	r3, 8100e62 <__udivmoddi4+0x2e>
 8100e50:	fa02 fc03 	lsl.w	ip, r2, r3
 8100e54:	f1c3 0220 	rsb	r2, r3, #32
 8100e58:	409f      	lsls	r7, r3
 8100e5a:	fa20 f202 	lsr.w	r2, r0, r2
 8100e5e:	4317      	orrs	r7, r2
 8100e60:	409c      	lsls	r4, r3
 8100e62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8100e66:	fa1f f58c 	uxth.w	r5, ip
 8100e6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8100e6e:	0c22      	lsrs	r2, r4, #16
 8100e70:	fb0e 7711 	mls	r7, lr, r1, r7
 8100e74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8100e78:	fb01 f005 	mul.w	r0, r1, r5
 8100e7c:	4290      	cmp	r0, r2
 8100e7e:	d90a      	bls.n	8100e96 <__udivmoddi4+0x62>
 8100e80:	eb1c 0202 	adds.w	r2, ip, r2
 8100e84:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8100e88:	f080 811c 	bcs.w	81010c4 <__udivmoddi4+0x290>
 8100e8c:	4290      	cmp	r0, r2
 8100e8e:	f240 8119 	bls.w	81010c4 <__udivmoddi4+0x290>
 8100e92:	3902      	subs	r1, #2
 8100e94:	4462      	add	r2, ip
 8100e96:	1a12      	subs	r2, r2, r0
 8100e98:	b2a4      	uxth	r4, r4
 8100e9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8100e9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8100ea2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8100ea6:	fb00 f505 	mul.w	r5, r0, r5
 8100eaa:	42a5      	cmp	r5, r4
 8100eac:	d90a      	bls.n	8100ec4 <__udivmoddi4+0x90>
 8100eae:	eb1c 0404 	adds.w	r4, ip, r4
 8100eb2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8100eb6:	f080 8107 	bcs.w	81010c8 <__udivmoddi4+0x294>
 8100eba:	42a5      	cmp	r5, r4
 8100ebc:	f240 8104 	bls.w	81010c8 <__udivmoddi4+0x294>
 8100ec0:	4464      	add	r4, ip
 8100ec2:	3802      	subs	r0, #2
 8100ec4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8100ec8:	1b64      	subs	r4, r4, r5
 8100eca:	2100      	movs	r1, #0
 8100ecc:	b11e      	cbz	r6, 8100ed6 <__udivmoddi4+0xa2>
 8100ece:	40dc      	lsrs	r4, r3
 8100ed0:	2300      	movs	r3, #0
 8100ed2:	e9c6 4300 	strd	r4, r3, [r6]
 8100ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100eda:	428b      	cmp	r3, r1
 8100edc:	d908      	bls.n	8100ef0 <__udivmoddi4+0xbc>
 8100ede:	2e00      	cmp	r6, #0
 8100ee0:	f000 80ed 	beq.w	81010be <__udivmoddi4+0x28a>
 8100ee4:	2100      	movs	r1, #0
 8100ee6:	e9c6 0500 	strd	r0, r5, [r6]
 8100eea:	4608      	mov	r0, r1
 8100eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ef0:	fab3 f183 	clz	r1, r3
 8100ef4:	2900      	cmp	r1, #0
 8100ef6:	d149      	bne.n	8100f8c <__udivmoddi4+0x158>
 8100ef8:	42ab      	cmp	r3, r5
 8100efa:	d302      	bcc.n	8100f02 <__udivmoddi4+0xce>
 8100efc:	4282      	cmp	r2, r0
 8100efe:	f200 80f8 	bhi.w	81010f2 <__udivmoddi4+0x2be>
 8100f02:	1a84      	subs	r4, r0, r2
 8100f04:	eb65 0203 	sbc.w	r2, r5, r3
 8100f08:	2001      	movs	r0, #1
 8100f0a:	4617      	mov	r7, r2
 8100f0c:	2e00      	cmp	r6, #0
 8100f0e:	d0e2      	beq.n	8100ed6 <__udivmoddi4+0xa2>
 8100f10:	e9c6 4700 	strd	r4, r7, [r6]
 8100f14:	e7df      	b.n	8100ed6 <__udivmoddi4+0xa2>
 8100f16:	b902      	cbnz	r2, 8100f1a <__udivmoddi4+0xe6>
 8100f18:	deff      	udf	#255	; 0xff
 8100f1a:	fab2 f382 	clz	r3, r2
 8100f1e:	2b00      	cmp	r3, #0
 8100f20:	f040 8090 	bne.w	8101044 <__udivmoddi4+0x210>
 8100f24:	1a8a      	subs	r2, r1, r2
 8100f26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100f2a:	fa1f fe8c 	uxth.w	lr, ip
 8100f2e:	2101      	movs	r1, #1
 8100f30:	fbb2 f5f7 	udiv	r5, r2, r7
 8100f34:	fb07 2015 	mls	r0, r7, r5, r2
 8100f38:	0c22      	lsrs	r2, r4, #16
 8100f3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8100f3e:	fb0e f005 	mul.w	r0, lr, r5
 8100f42:	4290      	cmp	r0, r2
 8100f44:	d908      	bls.n	8100f58 <__udivmoddi4+0x124>
 8100f46:	eb1c 0202 	adds.w	r2, ip, r2
 8100f4a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8100f4e:	d202      	bcs.n	8100f56 <__udivmoddi4+0x122>
 8100f50:	4290      	cmp	r0, r2
 8100f52:	f200 80cb 	bhi.w	81010ec <__udivmoddi4+0x2b8>
 8100f56:	4645      	mov	r5, r8
 8100f58:	1a12      	subs	r2, r2, r0
 8100f5a:	b2a4      	uxth	r4, r4
 8100f5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8100f60:	fb07 2210 	mls	r2, r7, r0, r2
 8100f64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8100f68:	fb0e fe00 	mul.w	lr, lr, r0
 8100f6c:	45a6      	cmp	lr, r4
 8100f6e:	d908      	bls.n	8100f82 <__udivmoddi4+0x14e>
 8100f70:	eb1c 0404 	adds.w	r4, ip, r4
 8100f74:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8100f78:	d202      	bcs.n	8100f80 <__udivmoddi4+0x14c>
 8100f7a:	45a6      	cmp	lr, r4
 8100f7c:	f200 80bb 	bhi.w	81010f6 <__udivmoddi4+0x2c2>
 8100f80:	4610      	mov	r0, r2
 8100f82:	eba4 040e 	sub.w	r4, r4, lr
 8100f86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8100f8a:	e79f      	b.n	8100ecc <__udivmoddi4+0x98>
 8100f8c:	f1c1 0720 	rsb	r7, r1, #32
 8100f90:	408b      	lsls	r3, r1
 8100f92:	fa22 fc07 	lsr.w	ip, r2, r7
 8100f96:	ea4c 0c03 	orr.w	ip, ip, r3
 8100f9a:	fa05 f401 	lsl.w	r4, r5, r1
 8100f9e:	fa20 f307 	lsr.w	r3, r0, r7
 8100fa2:	40fd      	lsrs	r5, r7
 8100fa4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8100fa8:	4323      	orrs	r3, r4
 8100faa:	fbb5 f8f9 	udiv	r8, r5, r9
 8100fae:	fa1f fe8c 	uxth.w	lr, ip
 8100fb2:	fb09 5518 	mls	r5, r9, r8, r5
 8100fb6:	0c1c      	lsrs	r4, r3, #16
 8100fb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8100fbc:	fb08 f50e 	mul.w	r5, r8, lr
 8100fc0:	42a5      	cmp	r5, r4
 8100fc2:	fa02 f201 	lsl.w	r2, r2, r1
 8100fc6:	fa00 f001 	lsl.w	r0, r0, r1
 8100fca:	d90b      	bls.n	8100fe4 <__udivmoddi4+0x1b0>
 8100fcc:	eb1c 0404 	adds.w	r4, ip, r4
 8100fd0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8100fd4:	f080 8088 	bcs.w	81010e8 <__udivmoddi4+0x2b4>
 8100fd8:	42a5      	cmp	r5, r4
 8100fda:	f240 8085 	bls.w	81010e8 <__udivmoddi4+0x2b4>
 8100fde:	f1a8 0802 	sub.w	r8, r8, #2
 8100fe2:	4464      	add	r4, ip
 8100fe4:	1b64      	subs	r4, r4, r5
 8100fe6:	b29d      	uxth	r5, r3
 8100fe8:	fbb4 f3f9 	udiv	r3, r4, r9
 8100fec:	fb09 4413 	mls	r4, r9, r3, r4
 8100ff0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8100ff4:	fb03 fe0e 	mul.w	lr, r3, lr
 8100ff8:	45a6      	cmp	lr, r4
 8100ffa:	d908      	bls.n	810100e <__udivmoddi4+0x1da>
 8100ffc:	eb1c 0404 	adds.w	r4, ip, r4
 8101000:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8101004:	d26c      	bcs.n	81010e0 <__udivmoddi4+0x2ac>
 8101006:	45a6      	cmp	lr, r4
 8101008:	d96a      	bls.n	81010e0 <__udivmoddi4+0x2ac>
 810100a:	3b02      	subs	r3, #2
 810100c:	4464      	add	r4, ip
 810100e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8101012:	fba3 9502 	umull	r9, r5, r3, r2
 8101016:	eba4 040e 	sub.w	r4, r4, lr
 810101a:	42ac      	cmp	r4, r5
 810101c:	46c8      	mov	r8, r9
 810101e:	46ae      	mov	lr, r5
 8101020:	d356      	bcc.n	81010d0 <__udivmoddi4+0x29c>
 8101022:	d053      	beq.n	81010cc <__udivmoddi4+0x298>
 8101024:	b156      	cbz	r6, 810103c <__udivmoddi4+0x208>
 8101026:	ebb0 0208 	subs.w	r2, r0, r8
 810102a:	eb64 040e 	sbc.w	r4, r4, lr
 810102e:	fa04 f707 	lsl.w	r7, r4, r7
 8101032:	40ca      	lsrs	r2, r1
 8101034:	40cc      	lsrs	r4, r1
 8101036:	4317      	orrs	r7, r2
 8101038:	e9c6 7400 	strd	r7, r4, [r6]
 810103c:	4618      	mov	r0, r3
 810103e:	2100      	movs	r1, #0
 8101040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8101044:	f1c3 0120 	rsb	r1, r3, #32
 8101048:	fa02 fc03 	lsl.w	ip, r2, r3
 810104c:	fa20 f201 	lsr.w	r2, r0, r1
 8101050:	fa25 f101 	lsr.w	r1, r5, r1
 8101054:	409d      	lsls	r5, r3
 8101056:	432a      	orrs	r2, r5
 8101058:	ea4f 471c 	mov.w	r7, ip, lsr #16
 810105c:	fa1f fe8c 	uxth.w	lr, ip
 8101060:	fbb1 f0f7 	udiv	r0, r1, r7
 8101064:	fb07 1510 	mls	r5, r7, r0, r1
 8101068:	0c11      	lsrs	r1, r2, #16
 810106a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 810106e:	fb00 f50e 	mul.w	r5, r0, lr
 8101072:	428d      	cmp	r5, r1
 8101074:	fa04 f403 	lsl.w	r4, r4, r3
 8101078:	d908      	bls.n	810108c <__udivmoddi4+0x258>
 810107a:	eb1c 0101 	adds.w	r1, ip, r1
 810107e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8101082:	d22f      	bcs.n	81010e4 <__udivmoddi4+0x2b0>
 8101084:	428d      	cmp	r5, r1
 8101086:	d92d      	bls.n	81010e4 <__udivmoddi4+0x2b0>
 8101088:	3802      	subs	r0, #2
 810108a:	4461      	add	r1, ip
 810108c:	1b49      	subs	r1, r1, r5
 810108e:	b292      	uxth	r2, r2
 8101090:	fbb1 f5f7 	udiv	r5, r1, r7
 8101094:	fb07 1115 	mls	r1, r7, r5, r1
 8101098:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 810109c:	fb05 f10e 	mul.w	r1, r5, lr
 81010a0:	4291      	cmp	r1, r2
 81010a2:	d908      	bls.n	81010b6 <__udivmoddi4+0x282>
 81010a4:	eb1c 0202 	adds.w	r2, ip, r2
 81010a8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 81010ac:	d216      	bcs.n	81010dc <__udivmoddi4+0x2a8>
 81010ae:	4291      	cmp	r1, r2
 81010b0:	d914      	bls.n	81010dc <__udivmoddi4+0x2a8>
 81010b2:	3d02      	subs	r5, #2
 81010b4:	4462      	add	r2, ip
 81010b6:	1a52      	subs	r2, r2, r1
 81010b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 81010bc:	e738      	b.n	8100f30 <__udivmoddi4+0xfc>
 81010be:	4631      	mov	r1, r6
 81010c0:	4630      	mov	r0, r6
 81010c2:	e708      	b.n	8100ed6 <__udivmoddi4+0xa2>
 81010c4:	4639      	mov	r1, r7
 81010c6:	e6e6      	b.n	8100e96 <__udivmoddi4+0x62>
 81010c8:	4610      	mov	r0, r2
 81010ca:	e6fb      	b.n	8100ec4 <__udivmoddi4+0x90>
 81010cc:	4548      	cmp	r0, r9
 81010ce:	d2a9      	bcs.n	8101024 <__udivmoddi4+0x1f0>
 81010d0:	ebb9 0802 	subs.w	r8, r9, r2
 81010d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 81010d8:	3b01      	subs	r3, #1
 81010da:	e7a3      	b.n	8101024 <__udivmoddi4+0x1f0>
 81010dc:	4645      	mov	r5, r8
 81010de:	e7ea      	b.n	81010b6 <__udivmoddi4+0x282>
 81010e0:	462b      	mov	r3, r5
 81010e2:	e794      	b.n	810100e <__udivmoddi4+0x1da>
 81010e4:	4640      	mov	r0, r8
 81010e6:	e7d1      	b.n	810108c <__udivmoddi4+0x258>
 81010e8:	46d0      	mov	r8, sl
 81010ea:	e77b      	b.n	8100fe4 <__udivmoddi4+0x1b0>
 81010ec:	3d02      	subs	r5, #2
 81010ee:	4462      	add	r2, ip
 81010f0:	e732      	b.n	8100f58 <__udivmoddi4+0x124>
 81010f2:	4608      	mov	r0, r1
 81010f4:	e70a      	b.n	8100f0c <__udivmoddi4+0xd8>
 81010f6:	4464      	add	r4, ip
 81010f8:	3802      	subs	r0, #2
 81010fa:	e742      	b.n	8100f82 <__udivmoddi4+0x14e>

081010fc <__aeabi_idiv0>:
 81010fc:	4770      	bx	lr
 81010fe:	bf00      	nop

08101100 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8101100:	b480      	push	{r7}
 8101102:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8101104:	4b09      	ldr	r3, [pc, #36]	; (810112c <SystemInit+0x2c>)
 8101106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810110a:	4a08      	ldr	r2, [pc, #32]	; (810112c <SystemInit+0x2c>)
 810110c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8101110:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8101114:	4b05      	ldr	r3, [pc, #20]	; (810112c <SystemInit+0x2c>)
 8101116:	691b      	ldr	r3, [r3, #16]
 8101118:	4a04      	ldr	r2, [pc, #16]	; (810112c <SystemInit+0x2c>)
 810111a:	f043 0310 	orr.w	r3, r3, #16
 810111e:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8101120:	bf00      	nop
 8101122:	46bd      	mov	sp, r7
 8101124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101128:	4770      	bx	lr
 810112a:	bf00      	nop
 810112c:	e000ed00 	.word	0xe000ed00

08101130 <ftoa>:
	0.0000000005,		// 9
	0.00000000005		// 10
};

char * ftoa(double f, char * buf, int precision)
{
 8101130:	b5b0      	push	{r4, r5, r7, lr}
 8101132:	b08a      	sub	sp, #40	; 0x28
 8101134:	af00      	add	r7, sp, #0
 8101136:	ed87 0b02 	vstr	d0, [r7, #8]
 810113a:	6078      	str	r0, [r7, #4]
 810113c:	6039      	str	r1, [r7, #0]
	char * ptr = buf;
 810113e:	687b      	ldr	r3, [r7, #4]
 8101140:	627b      	str	r3, [r7, #36]	; 0x24
	char * p = ptr;
 8101142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101144:	623b      	str	r3, [r7, #32]
	char * p1;
	char c;
	long intPart;

	// check precision bounds
	if (precision > MAX_PRECISION)
 8101146:	683b      	ldr	r3, [r7, #0]
 8101148:	2b0a      	cmp	r3, #10
 810114a:	dd01      	ble.n	8101150 <ftoa+0x20>
		precision = MAX_PRECISION;
 810114c:	230a      	movs	r3, #10
 810114e:	603b      	str	r3, [r7, #0]

	// sign stuff
	if (f < 0)
 8101150:	f04f 0200 	mov.w	r2, #0
 8101154:	f04f 0300 	mov.w	r3, #0
 8101158:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810115c:	f7ff fd46 	bl	8100bec <__aeabi_dcmplt>
 8101160:	4603      	mov	r3, r0
 8101162:	2b00      	cmp	r3, #0
 8101164:	d00a      	beq.n	810117c <ftoa+0x4c>
	{
		f = -f;
 8101166:	68bc      	ldr	r4, [r7, #8]
 8101168:	68fb      	ldr	r3, [r7, #12]
 810116a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 810116e:	e9c7 4502 	strd	r4, r5, [r7, #8]
		*ptr++ = '-';
 8101172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101174:	1c5a      	adds	r2, r3, #1
 8101176:	627a      	str	r2, [r7, #36]	; 0x24
 8101178:	222d      	movs	r2, #45	; 0x2d
 810117a:	701a      	strb	r2, [r3, #0]
	}

	if (precision < 0)  // negative precision == automatic precision guess
 810117c:	683b      	ldr	r3, [r7, #0]
 810117e:	2b00      	cmp	r3, #0
 8101180:	da4f      	bge.n	8101222 <ftoa+0xf2>
	{
		if (f < 1.0) precision = 6;
 8101182:	f04f 0200 	mov.w	r2, #0
 8101186:	4b7c      	ldr	r3, [pc, #496]	; (8101378 <ftoa+0x248>)
 8101188:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810118c:	f7ff fd2e 	bl	8100bec <__aeabi_dcmplt>
 8101190:	4603      	mov	r3, r0
 8101192:	2b00      	cmp	r3, #0
 8101194:	d002      	beq.n	810119c <ftoa+0x6c>
 8101196:	2306      	movs	r3, #6
 8101198:	603b      	str	r3, [r7, #0]
 810119a:	e042      	b.n	8101222 <ftoa+0xf2>
		else if (f < 10.0) precision = 5;
 810119c:	f04f 0200 	mov.w	r2, #0
 81011a0:	4b76      	ldr	r3, [pc, #472]	; (810137c <ftoa+0x24c>)
 81011a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 81011a6:	f7ff fd21 	bl	8100bec <__aeabi_dcmplt>
 81011aa:	4603      	mov	r3, r0
 81011ac:	2b00      	cmp	r3, #0
 81011ae:	d002      	beq.n	81011b6 <ftoa+0x86>
 81011b0:	2305      	movs	r3, #5
 81011b2:	603b      	str	r3, [r7, #0]
 81011b4:	e035      	b.n	8101222 <ftoa+0xf2>
		else if (f < 100.0) precision = 4;
 81011b6:	f04f 0200 	mov.w	r2, #0
 81011ba:	4b71      	ldr	r3, [pc, #452]	; (8101380 <ftoa+0x250>)
 81011bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 81011c0:	f7ff fd14 	bl	8100bec <__aeabi_dcmplt>
 81011c4:	4603      	mov	r3, r0
 81011c6:	2b00      	cmp	r3, #0
 81011c8:	d002      	beq.n	81011d0 <ftoa+0xa0>
 81011ca:	2304      	movs	r3, #4
 81011cc:	603b      	str	r3, [r7, #0]
 81011ce:	e028      	b.n	8101222 <ftoa+0xf2>
		else if (f < 1000.0) precision = 3;
 81011d0:	f04f 0200 	mov.w	r2, #0
 81011d4:	4b6b      	ldr	r3, [pc, #428]	; (8101384 <ftoa+0x254>)
 81011d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 81011da:	f7ff fd07 	bl	8100bec <__aeabi_dcmplt>
 81011de:	4603      	mov	r3, r0
 81011e0:	2b00      	cmp	r3, #0
 81011e2:	d002      	beq.n	81011ea <ftoa+0xba>
 81011e4:	2303      	movs	r3, #3
 81011e6:	603b      	str	r3, [r7, #0]
 81011e8:	e01b      	b.n	8101222 <ftoa+0xf2>
		else if (f < 10000.0) precision = 2;
 81011ea:	a35f      	add	r3, pc, #380	; (adr r3, 8101368 <ftoa+0x238>)
 81011ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 81011f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 81011f4:	f7ff fcfa 	bl	8100bec <__aeabi_dcmplt>
 81011f8:	4603      	mov	r3, r0
 81011fa:	2b00      	cmp	r3, #0
 81011fc:	d002      	beq.n	8101204 <ftoa+0xd4>
 81011fe:	2302      	movs	r3, #2
 8101200:	603b      	str	r3, [r7, #0]
 8101202:	e00e      	b.n	8101222 <ftoa+0xf2>
		else if (f < 100000.0) precision = 1;
 8101204:	a35a      	add	r3, pc, #360	; (adr r3, 8101370 <ftoa+0x240>)
 8101206:	e9d3 2300 	ldrd	r2, r3, [r3]
 810120a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810120e:	f7ff fced 	bl	8100bec <__aeabi_dcmplt>
 8101212:	4603      	mov	r3, r0
 8101214:	2b00      	cmp	r3, #0
 8101216:	d002      	beq.n	810121e <ftoa+0xee>
 8101218:	2301      	movs	r3, #1
 810121a:	603b      	str	r3, [r7, #0]
 810121c:	e001      	b.n	8101222 <ftoa+0xf2>
		else precision = 0;
 810121e:	2300      	movs	r3, #0
 8101220:	603b      	str	r3, [r7, #0]
	}

	// round value according the precision
	if (precision)
 8101222:	683b      	ldr	r3, [r7, #0]
 8101224:	2b00      	cmp	r3, #0
 8101226:	d00d      	beq.n	8101244 <ftoa+0x114>
		f += rounders[precision];
 8101228:	4a57      	ldr	r2, [pc, #348]	; (8101388 <ftoa+0x258>)
 810122a:	683b      	ldr	r3, [r7, #0]
 810122c:	00db      	lsls	r3, r3, #3
 810122e:	4413      	add	r3, r2
 8101230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101234:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8101238:	f7ff f8b0 	bl	810039c <__adddf3>
 810123c:	4602      	mov	r2, r0
 810123e:	460b      	mov	r3, r1
 8101240:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// integer part...
	intPart = f;
 8101244:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8101248:	f7ff fd0e 	bl	8100c68 <__aeabi_d2iz>
 810124c:	4603      	mov	r3, r0
 810124e:	61fb      	str	r3, [r7, #28]
	f -= intPart;
 8101250:	69f8      	ldr	r0, [r7, #28]
 8101252:	f7ff f9ef 	bl	8100634 <__aeabi_i2d>
 8101256:	4602      	mov	r2, r0
 8101258:	460b      	mov	r3, r1
 810125a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810125e:	f7ff f89b 	bl	8100398 <__aeabi_dsub>
 8101262:	4602      	mov	r2, r0
 8101264:	460b      	mov	r3, r1
 8101266:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if (!intPart)
 810126a:	69fb      	ldr	r3, [r7, #28]
 810126c:	2b00      	cmp	r3, #0
 810126e:	d105      	bne.n	810127c <ftoa+0x14c>
		*ptr++ = '0';
 8101270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101272:	1c5a      	adds	r2, r3, #1
 8101274:	627a      	str	r2, [r7, #36]	; 0x24
 8101276:	2230      	movs	r2, #48	; 0x30
 8101278:	701a      	strb	r2, [r3, #0]
 810127a:	e038      	b.n	81012ee <ftoa+0x1be>
	else
	{
		// save start pointer
		p = ptr;
 810127c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810127e:	623b      	str	r3, [r7, #32]

		// convert (reverse order)
		while (intPart)
 8101280:	e01a      	b.n	81012b8 <ftoa+0x188>
		{
			*p++ = '0' + intPart % 10;
 8101282:	69fa      	ldr	r2, [r7, #28]
 8101284:	4b41      	ldr	r3, [pc, #260]	; (810138c <ftoa+0x25c>)
 8101286:	fb83 1302 	smull	r1, r3, r3, r2
 810128a:	1099      	asrs	r1, r3, #2
 810128c:	17d3      	asrs	r3, r2, #31
 810128e:	1ac9      	subs	r1, r1, r3
 8101290:	460b      	mov	r3, r1
 8101292:	009b      	lsls	r3, r3, #2
 8101294:	440b      	add	r3, r1
 8101296:	005b      	lsls	r3, r3, #1
 8101298:	1ad1      	subs	r1, r2, r3
 810129a:	b2ca      	uxtb	r2, r1
 810129c:	6a3b      	ldr	r3, [r7, #32]
 810129e:	1c59      	adds	r1, r3, #1
 81012a0:	6239      	str	r1, [r7, #32]
 81012a2:	3230      	adds	r2, #48	; 0x30
 81012a4:	b2d2      	uxtb	r2, r2
 81012a6:	701a      	strb	r2, [r3, #0]
			intPart /= 10;
 81012a8:	69fb      	ldr	r3, [r7, #28]
 81012aa:	4a38      	ldr	r2, [pc, #224]	; (810138c <ftoa+0x25c>)
 81012ac:	fb82 1203 	smull	r1, r2, r2, r3
 81012b0:	1092      	asrs	r2, r2, #2
 81012b2:	17db      	asrs	r3, r3, #31
 81012b4:	1ad3      	subs	r3, r2, r3
 81012b6:	61fb      	str	r3, [r7, #28]
		while (intPart)
 81012b8:	69fb      	ldr	r3, [r7, #28]
 81012ba:	2b00      	cmp	r3, #0
 81012bc:	d1e1      	bne.n	8101282 <ftoa+0x152>
		}

		// save end pos
		p1 = p;
 81012be:	6a3b      	ldr	r3, [r7, #32]
 81012c0:	61bb      	str	r3, [r7, #24]

		// reverse result
		while (p > ptr)
 81012c2:	e00e      	b.n	81012e2 <ftoa+0x1b2>
		{
			c = *--p;
 81012c4:	6a3b      	ldr	r3, [r7, #32]
 81012c6:	3b01      	subs	r3, #1
 81012c8:	623b      	str	r3, [r7, #32]
 81012ca:	6a3b      	ldr	r3, [r7, #32]
 81012cc:	781b      	ldrb	r3, [r3, #0]
 81012ce:	75fb      	strb	r3, [r7, #23]
			*p = *ptr;
 81012d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81012d2:	781a      	ldrb	r2, [r3, #0]
 81012d4:	6a3b      	ldr	r3, [r7, #32]
 81012d6:	701a      	strb	r2, [r3, #0]
			*ptr++ = c;
 81012d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81012da:	1c5a      	adds	r2, r3, #1
 81012dc:	627a      	str	r2, [r7, #36]	; 0x24
 81012de:	7dfa      	ldrb	r2, [r7, #23]
 81012e0:	701a      	strb	r2, [r3, #0]
		while (p > ptr)
 81012e2:	6a3a      	ldr	r2, [r7, #32]
 81012e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81012e6:	429a      	cmp	r2, r3
 81012e8:	d8ec      	bhi.n	81012c4 <ftoa+0x194>
		}

		// restore end pos
		ptr = p1;
 81012ea:	69bb      	ldr	r3, [r7, #24]
 81012ec:	627b      	str	r3, [r7, #36]	; 0x24
	}

	// decimal part
	if (precision)
 81012ee:	683b      	ldr	r3, [r7, #0]
 81012f0:	2b00      	cmp	r3, #0
 81012f2:	d030      	beq.n	8101356 <ftoa+0x226>
	{
		// place decimal point
		*ptr++ = '.';
 81012f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81012f6:	1c5a      	adds	r2, r3, #1
 81012f8:	627a      	str	r2, [r7, #36]	; 0x24
 81012fa:	222e      	movs	r2, #46	; 0x2e
 81012fc:	701a      	strb	r2, [r3, #0]

		// convert
		while (precision--)
 81012fe:	e025      	b.n	810134c <ftoa+0x21c>
		{
			f *= 10.0;
 8101300:	f04f 0200 	mov.w	r2, #0
 8101304:	4b1d      	ldr	r3, [pc, #116]	; (810137c <ftoa+0x24c>)
 8101306:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810130a:	f7ff f9fd 	bl	8100708 <__aeabi_dmul>
 810130e:	4602      	mov	r2, r0
 8101310:	460b      	mov	r3, r1
 8101312:	e9c7 2302 	strd	r2, r3, [r7, #8]
			c = f;
 8101316:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810131a:	f7ff fccd 	bl	8100cb8 <__aeabi_d2uiz>
 810131e:	4603      	mov	r3, r0
 8101320:	75fb      	strb	r3, [r7, #23]
			*ptr++ = '0' + c;
 8101322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101324:	1c5a      	adds	r2, r3, #1
 8101326:	627a      	str	r2, [r7, #36]	; 0x24
 8101328:	7dfa      	ldrb	r2, [r7, #23]
 810132a:	3230      	adds	r2, #48	; 0x30
 810132c:	b2d2      	uxtb	r2, r2
 810132e:	701a      	strb	r2, [r3, #0]
			f -= c;
 8101330:	7dfb      	ldrb	r3, [r7, #23]
 8101332:	4618      	mov	r0, r3
 8101334:	f7ff f97e 	bl	8100634 <__aeabi_i2d>
 8101338:	4602      	mov	r2, r0
 810133a:	460b      	mov	r3, r1
 810133c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8101340:	f7ff f82a 	bl	8100398 <__aeabi_dsub>
 8101344:	4602      	mov	r2, r0
 8101346:	460b      	mov	r3, r1
 8101348:	e9c7 2302 	strd	r2, r3, [r7, #8]
		while (precision--)
 810134c:	683b      	ldr	r3, [r7, #0]
 810134e:	1e5a      	subs	r2, r3, #1
 8101350:	603a      	str	r2, [r7, #0]
 8101352:	2b00      	cmp	r3, #0
 8101354:	d1d4      	bne.n	8101300 <ftoa+0x1d0>
		}
	}

	// terminating zero
	*ptr = 0;
 8101356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101358:	2200      	movs	r2, #0
 810135a:	701a      	strb	r2, [r3, #0]

	return buf;
 810135c:	687b      	ldr	r3, [r7, #4]
}
 810135e:	4618      	mov	r0, r3
 8101360:	3728      	adds	r7, #40	; 0x28
 8101362:	46bd      	mov	sp, r7
 8101364:	bdb0      	pop	{r4, r5, r7, pc}
 8101366:	bf00      	nop
 8101368:	00000000 	.word	0x00000000
 810136c:	40c38800 	.word	0x40c38800
 8101370:	00000000 	.word	0x00000000
 8101374:	40f86a00 	.word	0x40f86a00
 8101378:	3ff00000 	.word	0x3ff00000
 810137c:	40240000 	.word	0x40240000
 8101380:	40590000 	.word	0x40590000
 8101384:	408f4000 	.word	0x408f4000
 8101388:	0810e710 	.word	0x0810e710
 810138c:	66666667 	.word	0x66666667

08101390 <clearCommand>:
 * Function name: clearBuffer
 * Description : Clear the buffer array
 * Argument : none
 * Return value : none
 **********************************************/
void clearCommand(uint8_t data[]) {
 8101390:	b480      	push	{r7}
 8101392:	b085      	sub	sp, #20
 8101394:	af00      	add	r7, sp, #0
 8101396:	6078      	str	r0, [r7, #4]
	int i;
	for (i = 0; i < sizeof(data); i++) {
 8101398:	2300      	movs	r3, #0
 810139a:	60fb      	str	r3, [r7, #12]
 810139c:	e007      	b.n	81013ae <clearCommand+0x1e>
		data[i] = 0;
 810139e:	68fb      	ldr	r3, [r7, #12]
 81013a0:	687a      	ldr	r2, [r7, #4]
 81013a2:	4413      	add	r3, r2
 81013a4:	2200      	movs	r2, #0
 81013a6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < sizeof(data); i++) {
 81013a8:	68fb      	ldr	r3, [r7, #12]
 81013aa:	3301      	adds	r3, #1
 81013ac:	60fb      	str	r3, [r7, #12]
 81013ae:	68fb      	ldr	r3, [r7, #12]
 81013b0:	2b03      	cmp	r3, #3
 81013b2:	d9f4      	bls.n	810139e <clearCommand+0xe>
	}
}
 81013b4:	bf00      	nop
 81013b6:	bf00      	nop
 81013b8:	3714      	adds	r7, #20
 81013ba:	46bd      	mov	sp, r7
 81013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013c0:	4770      	bx	lr
	...

081013c4 <parseCommand>:
 * Function name: parseCommand
 * Description : Parse the received command
 * Argument : none
 * Return value : Char* pointing to the parsed command
 **********************************************/
void parseCommand(char *data) {
 81013c4:	b480      	push	{r7}
 81013c6:	b083      	sub	sp, #12
 81013c8:	af00      	add	r7, sp, #0
 81013ca:	6078      	str	r0, [r7, #4]
	if (data[2]) {
 81013cc:	687b      	ldr	r3, [r7, #4]
 81013ce:	3302      	adds	r3, #2
 81013d0:	781b      	ldrb	r3, [r3, #0]
 81013d2:	2b00      	cmp	r3, #0
 81013d4:	d02f      	beq.n	8101436 <parseCommand+0x72>
		switch (data[2]) {
 81013d6:	687b      	ldr	r3, [r7, #4]
 81013d8:	3302      	adds	r3, #2
 81013da:	781b      	ldrb	r3, [r3, #0]
 81013dc:	3b44      	subs	r3, #68	; 0x44
 81013de:	2b0a      	cmp	r3, #10
 81013e0:	d828      	bhi.n	8101434 <parseCommand+0x70>
 81013e2:	a201      	add	r2, pc, #4	; (adr r2, 81013e8 <parseCommand+0x24>)
 81013e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81013e8:	0810142d 	.word	0x0810142d
 81013ec:	08101425 	.word	0x08101425
 81013f0:	0810141d 	.word	0x0810141d
 81013f4:	08101435 	.word	0x08101435
 81013f8:	08101435 	.word	0x08101435
 81013fc:	08101435 	.word	0x08101435
 8101400:	08101435 	.word	0x08101435
 8101404:	08101435 	.word	0x08101435
 8101408:	08101435 	.word	0x08101435
 810140c:	08101435 	.word	0x08101435
 8101410:	08101415 	.word	0x08101415
		case 'N': {
			TX_Flag_DSTART = 1;
 8101414:	4b0b      	ldr	r3, [pc, #44]	; (8101444 <parseCommand+0x80>)
 8101416:	2201      	movs	r2, #1
 8101418:	601a      	str	r2, [r3, #0]
		}
			break;
 810141a:	e00c      	b.n	8101436 <parseCommand+0x72>

		case 'F': {
			TX_Flag_DSTART = 0;
 810141c:	4b09      	ldr	r3, [pc, #36]	; (8101444 <parseCommand+0x80>)
 810141e:	2200      	movs	r2, #0
 8101420:	601a      	str	r2, [r3, #0]
		}
			break;
 8101422:	e008      	b.n	8101436 <parseCommand+0x72>

		case 'E': {
			TX_Flag_DSEND = 1;
 8101424:	4b08      	ldr	r3, [pc, #32]	; (8101448 <parseCommand+0x84>)
 8101426:	2201      	movs	r2, #1
 8101428:	601a      	str	r2, [r3, #0]
		}
			break;
 810142a:	e004      	b.n	8101436 <parseCommand+0x72>

		case 'D': {
			TX_Flag_DSEND = 0;
 810142c:	4b06      	ldr	r3, [pc, #24]	; (8101448 <parseCommand+0x84>)
 810142e:	2200      	movs	r2, #0
 8101430:	601a      	str	r2, [r3, #0]
		}
			break;
 8101432:	e000      	b.n	8101436 <parseCommand+0x72>

		default:
			break;
 8101434:	bf00      	nop
		}
	}
}
 8101436:	bf00      	nop
 8101438:	370c      	adds	r7, #12
 810143a:	46bd      	mov	sp, r7
 810143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101440:	4770      	bx	lr
 8101442:	bf00      	nop
 8101444:	10000204 	.word	0x10000204
 8101448:	10000208 	.word	0x10000208

0810144c <HAL_UART_TxCpltCallback>:

uint8_t pc_buffer[20]; //dimensione della stringa inviata (letta sul file .txt su Matlab)
double duty_1 = 0, duty_2 = 0, duty_3 = 0, duty_4 = 0;

/* Callback per la trasmissione che si attiva una volta che tutti i dati sono pronti per l'invio*/ //(l'ESP trasmette alla scheda)
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 810144c:	b480      	push	{r7}
 810144e:	b083      	sub	sp, #12
 8101450:	af00      	add	r7, sp, #0
 8101452:	6078      	str	r0, [r7, #4]

}
 8101454:	bf00      	nop
 8101456:	370c      	adds	r7, #12
 8101458:	46bd      	mov	sp, r7
 810145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810145e:	4770      	bx	lr

08101460 <HAL_UART_RxCpltCallback>:

/* Callback per la ricezione che si attiva una volta ricevuti tutti i dati*/ //(l'ESP riceve da Matlab)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8101460:	b580      	push	{r7, lr}
 8101462:	b082      	sub	sp, #8
 8101464:	af00      	add	r7, sp, #0
 8101466:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart2, rxBuff, sizeof(rxBuff));
 8101468:	2204      	movs	r2, #4
 810146a:	4904      	ldr	r1, [pc, #16]	; (810147c <HAL_UART_RxCpltCallback+0x1c>)
 810146c:	4804      	ldr	r0, [pc, #16]	; (8101480 <HAL_UART_RxCpltCallback+0x20>)
 810146e:	f005 f989 	bl	8106784 <HAL_UART_Receive_IT>
}
 8101472:	bf00      	nop
 8101474:	3708      	adds	r7, #8
 8101476:	46bd      	mov	sp, r7
 8101478:	bd80      	pop	{r7, pc}
 810147a:	bf00      	nop
 810147c:	10000334 	.word	0x10000334
 8101480:	100002a4 	.word	0x100002a4
 8101484:	00000000 	.word	0x00000000

08101488 <getFixedArray>:

void getFixedArray(double num, int nInt, int nDec, uint8_t *result) {
 8101488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810148c:	b08f      	sub	sp, #60	; 0x3c
 810148e:	af00      	add	r7, sp, #0
 8101490:	ed87 0b04 	vstr	d0, [r7, #16]
 8101494:	60f8      	str	r0, [r7, #12]
 8101496:	60b9      	str	r1, [r7, #8]
 8101498:	607a      	str	r2, [r7, #4]
 810149a:	466b      	mov	r3, sp
 810149c:	461e      	mov	r6, r3
	int p = 0;
 810149e:	2300      	movs	r3, #0
 81014a0:	627b      	str	r3, [r7, #36]	; 0x24
	for (int i=0; ; i++) {
 81014a2:	2300      	movs	r3, #0
 81014a4:	637b      	str	r3, [r7, #52]	; 0x34
		int r = (int) num/pow(10,i);
 81014a6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 81014aa:	f7ff fbdd 	bl	8100c68 <__aeabi_d2iz>
 81014ae:	4603      	mov	r3, r0
 81014b0:	4618      	mov	r0, r3
 81014b2:	f7ff f8bf 	bl	8100634 <__aeabi_i2d>
 81014b6:	4682      	mov	sl, r0
 81014b8:	468b      	mov	fp, r1
 81014ba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 81014bc:	f7ff f8ba 	bl	8100634 <__aeabi_i2d>
 81014c0:	4602      	mov	r2, r0
 81014c2:	460b      	mov	r3, r1
 81014c4:	ec43 2b11 	vmov	d1, r2, r3
 81014c8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8101600 <getFixedArray+0x178>
 81014cc:	f00c f9cc 	bl	810d868 <pow>
 81014d0:	ec53 2b10 	vmov	r2, r3, d0
 81014d4:	4650      	mov	r0, sl
 81014d6:	4659      	mov	r1, fp
 81014d8:	f7ff fa40 	bl	810095c <__aeabi_ddiv>
 81014dc:	4602      	mov	r2, r0
 81014de:	460b      	mov	r3, r1
 81014e0:	4610      	mov	r0, r2
 81014e2:	4619      	mov	r1, r3
 81014e4:	f7ff fbc0 	bl	8100c68 <__aeabi_d2iz>
 81014e8:	4603      	mov	r3, r0
 81014ea:	623b      	str	r3, [r7, #32]
		if (r == 0) {
 81014ec:	6a3b      	ldr	r3, [r7, #32]
 81014ee:	2b00      	cmp	r3, #0
 81014f0:	d13a      	bne.n	8101568 <getFixedArray+0xe0>
			p = i;
 81014f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81014f4:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 81014f6:	bf00      	nop
		}
	}
	char temp[nInt+nDec+1];
 81014f8:	68fa      	ldr	r2, [r7, #12]
 81014fa:	68bb      	ldr	r3, [r7, #8]
 81014fc:	4413      	add	r3, r2
 81014fe:	1c59      	adds	r1, r3, #1
 8101500:	1e4b      	subs	r3, r1, #1
 8101502:	61fb      	str	r3, [r7, #28]
 8101504:	460a      	mov	r2, r1
 8101506:	2300      	movs	r3, #0
 8101508:	4614      	mov	r4, r2
 810150a:	461d      	mov	r5, r3
 810150c:	f04f 0200 	mov.w	r2, #0
 8101510:	f04f 0300 	mov.w	r3, #0
 8101514:	00eb      	lsls	r3, r5, #3
 8101516:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 810151a:	00e2      	lsls	r2, r4, #3
 810151c:	460a      	mov	r2, r1
 810151e:	2300      	movs	r3, #0
 8101520:	4690      	mov	r8, r2
 8101522:	4699      	mov	r9, r3
 8101524:	f04f 0200 	mov.w	r2, #0
 8101528:	f04f 0300 	mov.w	r3, #0
 810152c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8101530:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8101534:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8101538:	460b      	mov	r3, r1
 810153a:	3307      	adds	r3, #7
 810153c:	08db      	lsrs	r3, r3, #3
 810153e:	00db      	lsls	r3, r3, #3
 8101540:	ebad 0d03 	sub.w	sp, sp, r3
 8101544:	466b      	mov	r3, sp
 8101546:	3300      	adds	r3, #0
 8101548:	61bb      	str	r3, [r7, #24]
	ftoa(num, temp, nInt+nDec+1);
 810154a:	68fa      	ldr	r2, [r7, #12]
 810154c:	68bb      	ldr	r3, [r7, #8]
 810154e:	4413      	add	r3, r2
 8101550:	3301      	adds	r3, #1
 8101552:	4619      	mov	r1, r3
 8101554:	69b8      	ldr	r0, [r7, #24]
 8101556:	ed97 0b04 	vldr	d0, [r7, #16]
 810155a:	f7ff fde9 	bl	8101130 <ftoa>
	int j=0;
 810155e:	2300      	movs	r3, #0
 8101560:	633b      	str	r3, [r7, #48]	; 0x30
	for (int i=0; i<nInt; i++) {
 8101562:	2300      	movs	r3, #0
 8101564:	62fb      	str	r3, [r7, #44]	; 0x2c
 8101566:	e01e      	b.n	81015a6 <getFixedArray+0x11e>
	for (int i=0; ; i++) {
 8101568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810156a:	3301      	adds	r3, #1
 810156c:	637b      	str	r3, [r7, #52]	; 0x34
 810156e:	e79a      	b.n	81014a6 <getFixedArray+0x1e>
		if (nInt-p-i <= 0) {
 8101570:	68fa      	ldr	r2, [r7, #12]
 8101572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101574:	1ad2      	subs	r2, r2, r3
 8101576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101578:	1ad3      	subs	r3, r2, r3
 810157a:	2b00      	cmp	r3, #0
 810157c:	dc0b      	bgt.n	8101596 <getFixedArray+0x10e>
			result[i] = temp[j];
 810157e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101580:	687a      	ldr	r2, [r7, #4]
 8101582:	4413      	add	r3, r2
 8101584:	69b9      	ldr	r1, [r7, #24]
 8101586:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8101588:	440a      	add	r2, r1
 810158a:	7812      	ldrb	r2, [r2, #0]
 810158c:	701a      	strb	r2, [r3, #0]
			j++;
 810158e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101590:	3301      	adds	r3, #1
 8101592:	633b      	str	r3, [r7, #48]	; 0x30
 8101594:	e004      	b.n	81015a0 <getFixedArray+0x118>
		} else {
			result[i] = '0';
 8101596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101598:	687a      	ldr	r2, [r7, #4]
 810159a:	4413      	add	r3, r2
 810159c:	2230      	movs	r2, #48	; 0x30
 810159e:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<nInt; i++) {
 81015a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81015a2:	3301      	adds	r3, #1
 81015a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 81015a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 81015a8:	68fb      	ldr	r3, [r7, #12]
 81015aa:	429a      	cmp	r2, r3
 81015ac:	dbe0      	blt.n	8101570 <getFixedArray+0xe8>
		}
	}
	if (p==0)
 81015ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81015b0:	2b00      	cmp	r3, #0
 81015b2:	d102      	bne.n	81015ba <getFixedArray+0x132>
		j++;
 81015b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81015b6:	3301      	adds	r3, #1
 81015b8:	633b      	str	r3, [r7, #48]	; 0x30
	j++;
 81015ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81015bc:	3301      	adds	r3, #1
 81015be:	633b      	str	r3, [r7, #48]	; 0x30
	for (int i=nInt; i<nInt+nDec; i++) {
 81015c0:	68fb      	ldr	r3, [r7, #12]
 81015c2:	62bb      	str	r3, [r7, #40]	; 0x28
 81015c4:	e00d      	b.n	81015e2 <getFixedArray+0x15a>
		result[i] = temp[j];
 81015c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81015c8:	687a      	ldr	r2, [r7, #4]
 81015ca:	4413      	add	r3, r2
 81015cc:	69b9      	ldr	r1, [r7, #24]
 81015ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81015d0:	440a      	add	r2, r1
 81015d2:	7812      	ldrb	r2, [r2, #0]
 81015d4:	701a      	strb	r2, [r3, #0]
		j++;
 81015d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81015d8:	3301      	adds	r3, #1
 81015da:	633b      	str	r3, [r7, #48]	; 0x30
	for (int i=nInt; i<nInt+nDec; i++) {
 81015dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81015de:	3301      	adds	r3, #1
 81015e0:	62bb      	str	r3, [r7, #40]	; 0x28
 81015e2:	68fa      	ldr	r2, [r7, #12]
 81015e4:	68bb      	ldr	r3, [r7, #8]
 81015e6:	4413      	add	r3, r2
 81015e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 81015ea:	429a      	cmp	r2, r3
 81015ec:	dbeb      	blt.n	81015c6 <getFixedArray+0x13e>
 81015ee:	46b5      	mov	sp, r6
	}
}
 81015f0:	bf00      	nop
 81015f2:	373c      	adds	r7, #60	; 0x3c
 81015f4:	46bd      	mov	sp, r7
 81015f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81015fa:	bf00      	nop
 81015fc:	f3af 8000 	nop.w
 8101600:	00000000 	.word	0x00000000
 8101604:	40240000 	.word	0x40240000

08101608 <generateRandomNumber>:

double generateRandomNumber(int min, int max) {
 8101608:	b5b0      	push	{r4, r5, r7, lr}
 810160a:	b084      	sub	sp, #16
 810160c:	af00      	add	r7, sp, #0
 810160e:	6078      	str	r0, [r7, #4]
 8101610:	6039      	str	r1, [r7, #0]
	double scale = rand() / (double) RAND_MAX; /* [0, 1.0] */
 8101612:	f008 fb95 	bl	8109d40 <rand>
 8101616:	4603      	mov	r3, r0
 8101618:	4618      	mov	r0, r3
 810161a:	f7ff f80b 	bl	8100634 <__aeabi_i2d>
 810161e:	a314      	add	r3, pc, #80	; (adr r3, 8101670 <generateRandomNumber+0x68>)
 8101620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101624:	f7ff f99a 	bl	810095c <__aeabi_ddiv>
 8101628:	4602      	mov	r2, r0
 810162a:	460b      	mov	r3, r1
 810162c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return (double) min + scale * (double) (max - min); /* [min, max] */
 8101630:	6878      	ldr	r0, [r7, #4]
 8101632:	f7fe ffff 	bl	8100634 <__aeabi_i2d>
 8101636:	4604      	mov	r4, r0
 8101638:	460d      	mov	r5, r1
 810163a:	683a      	ldr	r2, [r7, #0]
 810163c:	687b      	ldr	r3, [r7, #4]
 810163e:	1ad3      	subs	r3, r2, r3
 8101640:	4618      	mov	r0, r3
 8101642:	f7fe fff7 	bl	8100634 <__aeabi_i2d>
 8101646:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 810164a:	f7ff f85d 	bl	8100708 <__aeabi_dmul>
 810164e:	4602      	mov	r2, r0
 8101650:	460b      	mov	r3, r1
 8101652:	4620      	mov	r0, r4
 8101654:	4629      	mov	r1, r5
 8101656:	f7fe fea1 	bl	810039c <__adddf3>
 810165a:	4602      	mov	r2, r0
 810165c:	460b      	mov	r3, r1
 810165e:	ec43 2b17 	vmov	d7, r2, r3
}
 8101662:	eeb0 0a47 	vmov.f32	s0, s14
 8101666:	eef0 0a67 	vmov.f32	s1, s15
 810166a:	3710      	adds	r7, #16
 810166c:	46bd      	mov	sp, r7
 810166e:	bdb0      	pop	{r4, r5, r7, pc}
 8101670:	ffc00000 	.word	0xffc00000
 8101674:	41dfffff 	.word	0x41dfffff

08101678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8101678:	b580      	push	{r7, lr}
 810167a:	b082      	sub	sp, #8
 810167c:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 810167e:	4b90      	ldr	r3, [pc, #576]	; (81018c0 <main+0x248>)
 8101680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101684:	4a8e      	ldr	r2, [pc, #568]	; (81018c0 <main+0x248>)
 8101686:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810168a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810168e:	4b8c      	ldr	r3, [pc, #560]	; (81018c0 <main+0x248>)
 8101690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8101698:	603b      	str	r3, [r7, #0]
 810169a:	683b      	ldr	r3, [r7, #0]
	/* Activate HSEM notification for Cortex-M4*/
	HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810169c:	2001      	movs	r0, #1
 810169e:	f001 ff2d 	bl	81034fc <HAL_HSEM_ActivateNotification>
	/*
	 Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
	 perform system initialization (system clock config, external memory configuration.. )
	 */
	HAL_PWREx_ClearPendingEvent();
 81016a2:	f001 ffb7 	bl	8103614 <HAL_PWREx_ClearPendingEvent>
	HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE,
 81016a6:	2201      	movs	r2, #1
 81016a8:	2102      	movs	r1, #2
 81016aa:	2000      	movs	r0, #0
 81016ac:	f001 ff38 	bl	8103520 <HAL_PWREx_EnterSTOPMode>
	PWR_D2_DOMAIN);
	/* Clear HSEM flag */
	__HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81016b0:	4b84      	ldr	r3, [pc, #528]	; (81018c4 <main+0x24c>)
 81016b2:	681b      	ldr	r3, [r3, #0]
 81016b4:	091b      	lsrs	r3, r3, #4
 81016b6:	f003 030f 	and.w	r3, r3, #15
 81016ba:	2b07      	cmp	r3, #7
 81016bc:	d108      	bne.n	81016d0 <main+0x58>
 81016be:	4b82      	ldr	r3, [pc, #520]	; (81018c8 <main+0x250>)
 81016c0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 81016c4:	4a80      	ldr	r2, [pc, #512]	; (81018c8 <main+0x250>)
 81016c6:	f043 0301 	orr.w	r3, r3, #1
 81016ca:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 81016ce:	e007      	b.n	81016e0 <main+0x68>
 81016d0:	4b7d      	ldr	r3, [pc, #500]	; (81018c8 <main+0x250>)
 81016d2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 81016d6:	4a7c      	ldr	r2, [pc, #496]	; (81018c8 <main+0x250>)
 81016d8:	f043 0301 	orr.w	r3, r3, #1
 81016dc:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81016e0:	f000 fe06 	bl	81022f0 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81016e4:	f000 fa40 	bl	8101b68 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 81016e8:	f000 f9f2 	bl	8101ad0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 81016ec:	f000 f90a 	bl	8101904 <MX_TIM2_Init>
  MX_TIM3_Init();
 81016f0:	f000 f956 	bl	81019a0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart2, rxBuff, sizeof(rxBuff));
 81016f4:	2204      	movs	r2, #4
 81016f6:	4975      	ldr	r1, [pc, #468]	; (81018cc <main+0x254>)
 81016f8:	4875      	ldr	r0, [pc, #468]	; (81018d0 <main+0x258>)
 81016fa:	f005 f843 	bl	8106784 <HAL_UART_Receive_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 81016fe:	4875      	ldr	r0, [pc, #468]	; (81018d4 <main+0x25c>)
 8101700:	f003 fd2e 	bl	8105160 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8101704:	2100      	movs	r1, #0
 8101706:	4874      	ldr	r0, [pc, #464]	; (81018d8 <main+0x260>)
 8101708:	f003 fe04 	bl	8105314 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 810170c:	2104      	movs	r1, #4
 810170e:	4872      	ldr	r0, [pc, #456]	; (81018d8 <main+0x260>)
 8101710:	f003 fe00 	bl	8105314 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8101714:	2108      	movs	r1, #8
 8101716:	4870      	ldr	r0, [pc, #448]	; (81018d8 <main+0x260>)
 8101718:	f003 fdfc 	bl	8105314 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 810171c:	210c      	movs	r1, #12
 810171e:	486e      	ldr	r0, [pc, #440]	; (81018d8 <main+0x260>)
 8101720:	f003 fdf8 	bl	8105314 <HAL_TIM_PWM_Start>
	srand(time(NULL));
 8101724:	2000      	movs	r0, #0
 8101726:	f009 faa9 	bl	810ac7c <time>
 810172a:	4603      	mov	r3, r0
 810172c:	4618      	mov	r0, r3
 810172e:	f008 fad9 	bl	8109ce4 <srand>
	int i = 0;
 8101732:	2300      	movs	r3, #0
 8101734:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		TIM3->CCR1= 999 - i%1000;
 8101736:	687a      	ldr	r2, [r7, #4]
 8101738:	4b68      	ldr	r3, [pc, #416]	; (81018dc <main+0x264>)
 810173a:	fb83 1302 	smull	r1, r3, r3, r2
 810173e:	1199      	asrs	r1, r3, #6
 8101740:	17d3      	asrs	r3, r2, #31
 8101742:	1acb      	subs	r3, r1, r3
 8101744:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8101748:	fb01 f303 	mul.w	r3, r1, r3
 810174c:	1ad3      	subs	r3, r2, r3
 810174e:	f5c3 7379 	rsb	r3, r3, #996	; 0x3e4
 8101752:	3303      	adds	r3, #3
 8101754:	4a62      	ldr	r2, [pc, #392]	; (81018e0 <main+0x268>)
 8101756:	6353      	str	r3, [r2, #52]	; 0x34
		TIM3->CCR2= 999 - i%1000;
 8101758:	687a      	ldr	r2, [r7, #4]
 810175a:	4b60      	ldr	r3, [pc, #384]	; (81018dc <main+0x264>)
 810175c:	fb83 1302 	smull	r1, r3, r3, r2
 8101760:	1199      	asrs	r1, r3, #6
 8101762:	17d3      	asrs	r3, r2, #31
 8101764:	1acb      	subs	r3, r1, r3
 8101766:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 810176a:	fb01 f303 	mul.w	r3, r1, r3
 810176e:	1ad3      	subs	r3, r2, r3
 8101770:	f5c3 7379 	rsb	r3, r3, #996	; 0x3e4
 8101774:	3303      	adds	r3, #3
 8101776:	4a5a      	ldr	r2, [pc, #360]	; (81018e0 <main+0x268>)
 8101778:	6393      	str	r3, [r2, #56]	; 0x38
		TIM3->CCR3= 999 - i%1000;
 810177a:	687a      	ldr	r2, [r7, #4]
 810177c:	4b57      	ldr	r3, [pc, #348]	; (81018dc <main+0x264>)
 810177e:	fb83 1302 	smull	r1, r3, r3, r2
 8101782:	1199      	asrs	r1, r3, #6
 8101784:	17d3      	asrs	r3, r2, #31
 8101786:	1acb      	subs	r3, r1, r3
 8101788:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 810178c:	fb01 f303 	mul.w	r3, r1, r3
 8101790:	1ad3      	subs	r3, r2, r3
 8101792:	f5c3 7379 	rsb	r3, r3, #996	; 0x3e4
 8101796:	3303      	adds	r3, #3
 8101798:	4a51      	ldr	r2, [pc, #324]	; (81018e0 <main+0x268>)
 810179a:	63d3      	str	r3, [r2, #60]	; 0x3c
		TIM3->CCR4= 999 - i%1000;
 810179c:	687a      	ldr	r2, [r7, #4]
 810179e:	4b4f      	ldr	r3, [pc, #316]	; (81018dc <main+0x264>)
 81017a0:	fb83 1302 	smull	r1, r3, r3, r2
 81017a4:	1199      	asrs	r1, r3, #6
 81017a6:	17d3      	asrs	r3, r2, #31
 81017a8:	1acb      	subs	r3, r1, r3
 81017aa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 81017ae:	fb01 f303 	mul.w	r3, r1, r3
 81017b2:	1ad3      	subs	r3, r2, r3
 81017b4:	f5c3 7379 	rsb	r3, r3, #996	; 0x3e4
 81017b8:	3303      	adds	r3, #3
 81017ba:	4a49      	ldr	r2, [pc, #292]	; (81018e0 <main+0x268>)
 81017bc:	6413      	str	r3, [r2, #64]	; 0x40
		duty_1 = (double) (i%1000) / 1000;
 81017be:	687b      	ldr	r3, [r7, #4]
 81017c0:	4a46      	ldr	r2, [pc, #280]	; (81018dc <main+0x264>)
 81017c2:	fb82 1203 	smull	r1, r2, r2, r3
 81017c6:	1191      	asrs	r1, r2, #6
 81017c8:	17da      	asrs	r2, r3, #31
 81017ca:	1a8a      	subs	r2, r1, r2
 81017cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 81017d0:	fb01 f202 	mul.w	r2, r1, r2
 81017d4:	1a9a      	subs	r2, r3, r2
 81017d6:	4610      	mov	r0, r2
 81017d8:	f7fe ff2c 	bl	8100634 <__aeabi_i2d>
 81017dc:	f04f 0200 	mov.w	r2, #0
 81017e0:	4b40      	ldr	r3, [pc, #256]	; (81018e4 <main+0x26c>)
 81017e2:	f7ff f8bb 	bl	810095c <__aeabi_ddiv>
 81017e6:	4602      	mov	r2, r0
 81017e8:	460b      	mov	r3, r1
 81017ea:	493f      	ldr	r1, [pc, #252]	; (81018e8 <main+0x270>)
 81017ec:	e9c1 2300 	strd	r2, r3, [r1]
		duty_2 = (double) (i%1000) / 1000;
 81017f0:	687b      	ldr	r3, [r7, #4]
 81017f2:	4a3a      	ldr	r2, [pc, #232]	; (81018dc <main+0x264>)
 81017f4:	fb82 1203 	smull	r1, r2, r2, r3
 81017f8:	1191      	asrs	r1, r2, #6
 81017fa:	17da      	asrs	r2, r3, #31
 81017fc:	1a8a      	subs	r2, r1, r2
 81017fe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8101802:	fb01 f202 	mul.w	r2, r1, r2
 8101806:	1a9a      	subs	r2, r3, r2
 8101808:	4610      	mov	r0, r2
 810180a:	f7fe ff13 	bl	8100634 <__aeabi_i2d>
 810180e:	f04f 0200 	mov.w	r2, #0
 8101812:	4b34      	ldr	r3, [pc, #208]	; (81018e4 <main+0x26c>)
 8101814:	f7ff f8a2 	bl	810095c <__aeabi_ddiv>
 8101818:	4602      	mov	r2, r0
 810181a:	460b      	mov	r3, r1
 810181c:	4933      	ldr	r1, [pc, #204]	; (81018ec <main+0x274>)
 810181e:	e9c1 2300 	strd	r2, r3, [r1]
		duty_3 = (double) (i%1000) / 1000;
 8101822:	687b      	ldr	r3, [r7, #4]
 8101824:	4a2d      	ldr	r2, [pc, #180]	; (81018dc <main+0x264>)
 8101826:	fb82 1203 	smull	r1, r2, r2, r3
 810182a:	1191      	asrs	r1, r2, #6
 810182c:	17da      	asrs	r2, r3, #31
 810182e:	1a8a      	subs	r2, r1, r2
 8101830:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8101834:	fb01 f202 	mul.w	r2, r1, r2
 8101838:	1a9a      	subs	r2, r3, r2
 810183a:	4610      	mov	r0, r2
 810183c:	f7fe fefa 	bl	8100634 <__aeabi_i2d>
 8101840:	f04f 0200 	mov.w	r2, #0
 8101844:	4b27      	ldr	r3, [pc, #156]	; (81018e4 <main+0x26c>)
 8101846:	f7ff f889 	bl	810095c <__aeabi_ddiv>
 810184a:	4602      	mov	r2, r0
 810184c:	460b      	mov	r3, r1
 810184e:	4928      	ldr	r1, [pc, #160]	; (81018f0 <main+0x278>)
 8101850:	e9c1 2300 	strd	r2, r3, [r1]
		duty_4 = (double) (i%1000) / 1000;
 8101854:	687b      	ldr	r3, [r7, #4]
 8101856:	4a21      	ldr	r2, [pc, #132]	; (81018dc <main+0x264>)
 8101858:	fb82 1203 	smull	r1, r2, r2, r3
 810185c:	1191      	asrs	r1, r2, #6
 810185e:	17da      	asrs	r2, r3, #31
 8101860:	1a8a      	subs	r2, r1, r2
 8101862:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8101866:	fb01 f202 	mul.w	r2, r1, r2
 810186a:	1a9a      	subs	r2, r3, r2
 810186c:	4610      	mov	r0, r2
 810186e:	f7fe fee1 	bl	8100634 <__aeabi_i2d>
 8101872:	f04f 0200 	mov.w	r2, #0
 8101876:	4b1b      	ldr	r3, [pc, #108]	; (81018e4 <main+0x26c>)
 8101878:	f7ff f870 	bl	810095c <__aeabi_ddiv>
 810187c:	4602      	mov	r2, r0
 810187e:	460b      	mov	r3, r1
 8101880:	491c      	ldr	r1, [pc, #112]	; (81018f4 <main+0x27c>)
 8101882:	e9c1 2300 	strd	r2, r3, [r1]
		i++;
 8101886:	687b      	ldr	r3, [r7, #4]
 8101888:	3301      	adds	r3, #1
 810188a:	607b      	str	r3, [r7, #4]

		if (TX_Flag_DSTOP) {
			//spegnimento dei motori
		}

		if (TX_Flag_DSEND) {
 810188c:	4b1a      	ldr	r3, [pc, #104]	; (81018f8 <main+0x280>)
 810188e:	681b      	ldr	r3, [r3, #0]
 8101890:	2b00      	cmp	r3, #0
 8101892:	d00a      	beq.n	81018aa <main+0x232>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); //accensione led verde (se c'è trasmissione)
 8101894:	2201      	movs	r2, #1
 8101896:	2101      	movs	r1, #1
 8101898:	4818      	ldr	r0, [pc, #96]	; (81018fc <main+0x284>)
 810189a:	f001 fe15 	bl	81034c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET); //spegnimento led verde (se non c'è trasmissione)
 810189e:	2200      	movs	r2, #0
 81018a0:	2102      	movs	r1, #2
 81018a2:	4817      	ldr	r0, [pc, #92]	; (8101900 <main+0x288>)
 81018a4:	f001 fe10 	bl	81034c8 <HAL_GPIO_WritePin>
 81018a8:	e745      	b.n	8101736 <main+0xbe>
		} else {
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET); //accensione led verde (se c'è trasmissione)
 81018aa:	2201      	movs	r2, #1
 81018ac:	2102      	movs	r1, #2
 81018ae:	4814      	ldr	r0, [pc, #80]	; (8101900 <main+0x288>)
 81018b0:	f001 fe0a 	bl	81034c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); //spegnimento led verde (se non c'è trasmissione)
 81018b4:	2200      	movs	r2, #0
 81018b6:	2101      	movs	r1, #1
 81018b8:	4810      	ldr	r0, [pc, #64]	; (81018fc <main+0x284>)
 81018ba:	f001 fe05 	bl	81034c8 <HAL_GPIO_WritePin>
		TIM3->CCR1= 999 - i%1000;
 81018be:	e73a      	b.n	8101736 <main+0xbe>
 81018c0:	58024400 	.word	0x58024400
 81018c4:	e000ed00 	.word	0xe000ed00
 81018c8:	58026400 	.word	0x58026400
 81018cc:	10000334 	.word	0x10000334
 81018d0:	100002a4 	.word	0x100002a4
 81018d4:	1000020c 	.word	0x1000020c
 81018d8:	10000258 	.word	0x10000258
 81018dc:	10624dd3 	.word	0x10624dd3
 81018e0:	40000400 	.word	0x40000400
 81018e4:	408f4000 	.word	0x408f4000
 81018e8:	10000350 	.word	0x10000350
 81018ec:	10000358 	.word	0x10000358
 81018f0:	10000360 	.word	0x10000360
 81018f4:	10000368 	.word	0x10000368
 81018f8:	10000208 	.word	0x10000208
 81018fc:	58020400 	.word	0x58020400
 8101900:	58021000 	.word	0x58021000

08101904 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8101904:	b580      	push	{r7, lr}
 8101906:	b088      	sub	sp, #32
 8101908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 810190a:	f107 0310 	add.w	r3, r7, #16
 810190e:	2200      	movs	r2, #0
 8101910:	601a      	str	r2, [r3, #0]
 8101912:	605a      	str	r2, [r3, #4]
 8101914:	609a      	str	r2, [r3, #8]
 8101916:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8101918:	1d3b      	adds	r3, r7, #4
 810191a:	2200      	movs	r2, #0
 810191c:	601a      	str	r2, [r3, #0]
 810191e:	605a      	str	r2, [r3, #4]
 8101920:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8101922:	4b1e      	ldr	r3, [pc, #120]	; (810199c <MX_TIM2_Init+0x98>)
 8101924:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8101928:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24000-1;
 810192a:	4b1c      	ldr	r3, [pc, #112]	; (810199c <MX_TIM2_Init+0x98>)
 810192c:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 8101930:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8101932:	4b1a      	ldr	r3, [pc, #104]	; (810199c <MX_TIM2_Init+0x98>)
 8101934:	2200      	movs	r2, #0
 8101936:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8101938:	4b18      	ldr	r3, [pc, #96]	; (810199c <MX_TIM2_Init+0x98>)
 810193a:	f240 32e7 	movw	r2, #999	; 0x3e7
 810193e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8101940:	4b16      	ldr	r3, [pc, #88]	; (810199c <MX_TIM2_Init+0x98>)
 8101942:	2200      	movs	r2, #0
 8101944:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8101946:	4b15      	ldr	r3, [pc, #84]	; (810199c <MX_TIM2_Init+0x98>)
 8101948:	2200      	movs	r2, #0
 810194a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 810194c:	4813      	ldr	r0, [pc, #76]	; (810199c <MX_TIM2_Init+0x98>)
 810194e:	f003 fbaf 	bl	81050b0 <HAL_TIM_Base_Init>
 8101952:	4603      	mov	r3, r0
 8101954:	2b00      	cmp	r3, #0
 8101956:	d001      	beq.n	810195c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8101958:	f000 fa2c 	bl	8101db4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 810195c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8101960:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8101962:	f107 0310 	add.w	r3, r7, #16
 8101966:	4619      	mov	r1, r3
 8101968:	480c      	ldr	r0, [pc, #48]	; (810199c <MX_TIM2_Init+0x98>)
 810196a:	f004 f815 	bl	8105998 <HAL_TIM_ConfigClockSource>
 810196e:	4603      	mov	r3, r0
 8101970:	2b00      	cmp	r3, #0
 8101972:	d001      	beq.n	8101978 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8101974:	f000 fa1e 	bl	8101db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8101978:	2300      	movs	r3, #0
 810197a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 810197c:	2300      	movs	r3, #0
 810197e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8101980:	1d3b      	adds	r3, r7, #4
 8101982:	4619      	mov	r1, r3
 8101984:	4805      	ldr	r0, [pc, #20]	; (810199c <MX_TIM2_Init+0x98>)
 8101986:	f004 fd59 	bl	810643c <HAL_TIMEx_MasterConfigSynchronization>
 810198a:	4603      	mov	r3, r0
 810198c:	2b00      	cmp	r3, #0
 810198e:	d001      	beq.n	8101994 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8101990:	f000 fa10 	bl	8101db4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8101994:	bf00      	nop
 8101996:	3720      	adds	r7, #32
 8101998:	46bd      	mov	sp, r7
 810199a:	bd80      	pop	{r7, pc}
 810199c:	1000020c 	.word	0x1000020c

081019a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 81019a0:	b580      	push	{r7, lr}
 81019a2:	b08e      	sub	sp, #56	; 0x38
 81019a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 81019a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 81019aa:	2200      	movs	r2, #0
 81019ac:	601a      	str	r2, [r3, #0]
 81019ae:	605a      	str	r2, [r3, #4]
 81019b0:	609a      	str	r2, [r3, #8]
 81019b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81019b4:	f107 031c 	add.w	r3, r7, #28
 81019b8:	2200      	movs	r2, #0
 81019ba:	601a      	str	r2, [r3, #0]
 81019bc:	605a      	str	r2, [r3, #4]
 81019be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 81019c0:	463b      	mov	r3, r7
 81019c2:	2200      	movs	r2, #0
 81019c4:	601a      	str	r2, [r3, #0]
 81019c6:	605a      	str	r2, [r3, #4]
 81019c8:	609a      	str	r2, [r3, #8]
 81019ca:	60da      	str	r2, [r3, #12]
 81019cc:	611a      	str	r2, [r3, #16]
 81019ce:	615a      	str	r2, [r3, #20]
 81019d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 81019d2:	4b3d      	ldr	r3, [pc, #244]	; (8101ac8 <MX_TIM3_Init+0x128>)
 81019d4:	4a3d      	ldr	r2, [pc, #244]	; (8101acc <MX_TIM3_Init+0x12c>)
 81019d6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 240-1;
 81019d8:	4b3b      	ldr	r3, [pc, #236]	; (8101ac8 <MX_TIM3_Init+0x128>)
 81019da:	22ef      	movs	r2, #239	; 0xef
 81019dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 81019de:	4b3a      	ldr	r3, [pc, #232]	; (8101ac8 <MX_TIM3_Init+0x128>)
 81019e0:	2200      	movs	r2, #0
 81019e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 81019e4:	4b38      	ldr	r3, [pc, #224]	; (8101ac8 <MX_TIM3_Init+0x128>)
 81019e6:	f240 32e7 	movw	r2, #999	; 0x3e7
 81019ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81019ec:	4b36      	ldr	r3, [pc, #216]	; (8101ac8 <MX_TIM3_Init+0x128>)
 81019ee:	2200      	movs	r2, #0
 81019f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81019f2:	4b35      	ldr	r3, [pc, #212]	; (8101ac8 <MX_TIM3_Init+0x128>)
 81019f4:	2200      	movs	r2, #0
 81019f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 81019f8:	4833      	ldr	r0, [pc, #204]	; (8101ac8 <MX_TIM3_Init+0x128>)
 81019fa:	f003 fb59 	bl	81050b0 <HAL_TIM_Base_Init>
 81019fe:	4603      	mov	r3, r0
 8101a00:	2b00      	cmp	r3, #0
 8101a02:	d001      	beq.n	8101a08 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8101a04:	f000 f9d6 	bl	8101db4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8101a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8101a0c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8101a0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8101a12:	4619      	mov	r1, r3
 8101a14:	482c      	ldr	r0, [pc, #176]	; (8101ac8 <MX_TIM3_Init+0x128>)
 8101a16:	f003 ffbf 	bl	8105998 <HAL_TIM_ConfigClockSource>
 8101a1a:	4603      	mov	r3, r0
 8101a1c:	2b00      	cmp	r3, #0
 8101a1e:	d001      	beq.n	8101a24 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8101a20:	f000 f9c8 	bl	8101db4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8101a24:	4828      	ldr	r0, [pc, #160]	; (8101ac8 <MX_TIM3_Init+0x128>)
 8101a26:	f003 fc13 	bl	8105250 <HAL_TIM_PWM_Init>
 8101a2a:	4603      	mov	r3, r0
 8101a2c:	2b00      	cmp	r3, #0
 8101a2e:	d001      	beq.n	8101a34 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8101a30:	f000 f9c0 	bl	8101db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8101a34:	2300      	movs	r3, #0
 8101a36:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8101a38:	2300      	movs	r3, #0
 8101a3a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8101a3c:	f107 031c 	add.w	r3, r7, #28
 8101a40:	4619      	mov	r1, r3
 8101a42:	4821      	ldr	r0, [pc, #132]	; (8101ac8 <MX_TIM3_Init+0x128>)
 8101a44:	f004 fcfa 	bl	810643c <HAL_TIMEx_MasterConfigSynchronization>
 8101a48:	4603      	mov	r3, r0
 8101a4a:	2b00      	cmp	r3, #0
 8101a4c:	d001      	beq.n	8101a52 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8101a4e:	f000 f9b1 	bl	8101db4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8101a52:	2360      	movs	r3, #96	; 0x60
 8101a54:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8101a56:	2300      	movs	r3, #0
 8101a58:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8101a5a:	2300      	movs	r3, #0
 8101a5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8101a5e:	2300      	movs	r3, #0
 8101a60:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8101a62:	463b      	mov	r3, r7
 8101a64:	2200      	movs	r2, #0
 8101a66:	4619      	mov	r1, r3
 8101a68:	4817      	ldr	r0, [pc, #92]	; (8101ac8 <MX_TIM3_Init+0x128>)
 8101a6a:	f003 fe81 	bl	8105770 <HAL_TIM_PWM_ConfigChannel>
 8101a6e:	4603      	mov	r3, r0
 8101a70:	2b00      	cmp	r3, #0
 8101a72:	d001      	beq.n	8101a78 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8101a74:	f000 f99e 	bl	8101db4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8101a78:	463b      	mov	r3, r7
 8101a7a:	2204      	movs	r2, #4
 8101a7c:	4619      	mov	r1, r3
 8101a7e:	4812      	ldr	r0, [pc, #72]	; (8101ac8 <MX_TIM3_Init+0x128>)
 8101a80:	f003 fe76 	bl	8105770 <HAL_TIM_PWM_ConfigChannel>
 8101a84:	4603      	mov	r3, r0
 8101a86:	2b00      	cmp	r3, #0
 8101a88:	d001      	beq.n	8101a8e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8101a8a:	f000 f993 	bl	8101db4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8101a8e:	463b      	mov	r3, r7
 8101a90:	2208      	movs	r2, #8
 8101a92:	4619      	mov	r1, r3
 8101a94:	480c      	ldr	r0, [pc, #48]	; (8101ac8 <MX_TIM3_Init+0x128>)
 8101a96:	f003 fe6b 	bl	8105770 <HAL_TIM_PWM_ConfigChannel>
 8101a9a:	4603      	mov	r3, r0
 8101a9c:	2b00      	cmp	r3, #0
 8101a9e:	d001      	beq.n	8101aa4 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8101aa0:	f000 f988 	bl	8101db4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8101aa4:	463b      	mov	r3, r7
 8101aa6:	220c      	movs	r2, #12
 8101aa8:	4619      	mov	r1, r3
 8101aaa:	4807      	ldr	r0, [pc, #28]	; (8101ac8 <MX_TIM3_Init+0x128>)
 8101aac:	f003 fe60 	bl	8105770 <HAL_TIM_PWM_ConfigChannel>
 8101ab0:	4603      	mov	r3, r0
 8101ab2:	2b00      	cmp	r3, #0
 8101ab4:	d001      	beq.n	8101aba <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8101ab6:	f000 f97d 	bl	8101db4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8101aba:	4803      	ldr	r0, [pc, #12]	; (8101ac8 <MX_TIM3_Init+0x128>)
 8101abc:	f000 f9d8 	bl	8101e70 <HAL_TIM_MspPostInit>

}
 8101ac0:	bf00      	nop
 8101ac2:	3738      	adds	r7, #56	; 0x38
 8101ac4:	46bd      	mov	sp, r7
 8101ac6:	bd80      	pop	{r7, pc}
 8101ac8:	10000258 	.word	0x10000258
 8101acc:	40000400 	.word	0x40000400

08101ad0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8101ad0:	b580      	push	{r7, lr}
 8101ad2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8101ad4:	4b22      	ldr	r3, [pc, #136]	; (8101b60 <MX_USART2_UART_Init+0x90>)
 8101ad6:	4a23      	ldr	r2, [pc, #140]	; (8101b64 <MX_USART2_UART_Init+0x94>)
 8101ad8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8101ada:	4b21      	ldr	r3, [pc, #132]	; (8101b60 <MX_USART2_UART_Init+0x90>)
 8101adc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8101ae0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8101ae2:	4b1f      	ldr	r3, [pc, #124]	; (8101b60 <MX_USART2_UART_Init+0x90>)
 8101ae4:	2200      	movs	r2, #0
 8101ae6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8101ae8:	4b1d      	ldr	r3, [pc, #116]	; (8101b60 <MX_USART2_UART_Init+0x90>)
 8101aea:	2200      	movs	r2, #0
 8101aec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8101aee:	4b1c      	ldr	r3, [pc, #112]	; (8101b60 <MX_USART2_UART_Init+0x90>)
 8101af0:	2200      	movs	r2, #0
 8101af2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8101af4:	4b1a      	ldr	r3, [pc, #104]	; (8101b60 <MX_USART2_UART_Init+0x90>)
 8101af6:	220c      	movs	r2, #12
 8101af8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8101afa:	4b19      	ldr	r3, [pc, #100]	; (8101b60 <MX_USART2_UART_Init+0x90>)
 8101afc:	2200      	movs	r2, #0
 8101afe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8101b00:	4b17      	ldr	r3, [pc, #92]	; (8101b60 <MX_USART2_UART_Init+0x90>)
 8101b02:	2200      	movs	r2, #0
 8101b04:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8101b06:	4b16      	ldr	r3, [pc, #88]	; (8101b60 <MX_USART2_UART_Init+0x90>)
 8101b08:	2200      	movs	r2, #0
 8101b0a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8101b0c:	4b14      	ldr	r3, [pc, #80]	; (8101b60 <MX_USART2_UART_Init+0x90>)
 8101b0e:	2200      	movs	r2, #0
 8101b10:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8101b12:	4b13      	ldr	r3, [pc, #76]	; (8101b60 <MX_USART2_UART_Init+0x90>)
 8101b14:	2200      	movs	r2, #0
 8101b16:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8101b18:	4811      	ldr	r0, [pc, #68]	; (8101b60 <MX_USART2_UART_Init+0x90>)
 8101b1a:	f004 fd3b 	bl	8106594 <HAL_UART_Init>
 8101b1e:	4603      	mov	r3, r0
 8101b20:	2b00      	cmp	r3, #0
 8101b22:	d001      	beq.n	8101b28 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8101b24:	f000 f946 	bl	8101db4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101b28:	2100      	movs	r1, #0
 8101b2a:	480d      	ldr	r0, [pc, #52]	; (8101b60 <MX_USART2_UART_Init+0x90>)
 8101b2c:	f007 f979 	bl	8108e22 <HAL_UARTEx_SetTxFifoThreshold>
 8101b30:	4603      	mov	r3, r0
 8101b32:	2b00      	cmp	r3, #0
 8101b34:	d001      	beq.n	8101b3a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8101b36:	f000 f93d 	bl	8101db4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101b3a:	2100      	movs	r1, #0
 8101b3c:	4808      	ldr	r0, [pc, #32]	; (8101b60 <MX_USART2_UART_Init+0x90>)
 8101b3e:	f007 f9ae 	bl	8108e9e <HAL_UARTEx_SetRxFifoThreshold>
 8101b42:	4603      	mov	r3, r0
 8101b44:	2b00      	cmp	r3, #0
 8101b46:	d001      	beq.n	8101b4c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8101b48:	f000 f934 	bl	8101db4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8101b4c:	4804      	ldr	r0, [pc, #16]	; (8101b60 <MX_USART2_UART_Init+0x90>)
 8101b4e:	f007 f92f 	bl	8108db0 <HAL_UARTEx_DisableFifoMode>
 8101b52:	4603      	mov	r3, r0
 8101b54:	2b00      	cmp	r3, #0
 8101b56:	d001      	beq.n	8101b5c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8101b58:	f000 f92c 	bl	8101db4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8101b5c:	bf00      	nop
 8101b5e:	bd80      	pop	{r7, pc}
 8101b60:	100002a4 	.word	0x100002a4
 8101b64:	40004400 	.word	0x40004400

08101b68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8101b68:	b580      	push	{r7, lr}
 8101b6a:	b08a      	sub	sp, #40	; 0x28
 8101b6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101b6e:	f107 0314 	add.w	r3, r7, #20
 8101b72:	2200      	movs	r2, #0
 8101b74:	601a      	str	r2, [r3, #0]
 8101b76:	605a      	str	r2, [r3, #4]
 8101b78:	609a      	str	r2, [r3, #8]
 8101b7a:	60da      	str	r2, [r3, #12]
 8101b7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8101b7e:	4b3a      	ldr	r3, [pc, #232]	; (8101c68 <MX_GPIO_Init+0x100>)
 8101b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b84:	4a38      	ldr	r2, [pc, #224]	; (8101c68 <MX_GPIO_Init+0x100>)
 8101b86:	f043 0301 	orr.w	r3, r3, #1
 8101b8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101b8e:	4b36      	ldr	r3, [pc, #216]	; (8101c68 <MX_GPIO_Init+0x100>)
 8101b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b94:	f003 0301 	and.w	r3, r3, #1
 8101b98:	613b      	str	r3, [r7, #16]
 8101b9a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8101b9c:	4b32      	ldr	r3, [pc, #200]	; (8101c68 <MX_GPIO_Init+0x100>)
 8101b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101ba2:	4a31      	ldr	r2, [pc, #196]	; (8101c68 <MX_GPIO_Init+0x100>)
 8101ba4:	f043 0302 	orr.w	r3, r3, #2
 8101ba8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101bac:	4b2e      	ldr	r3, [pc, #184]	; (8101c68 <MX_GPIO_Init+0x100>)
 8101bae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101bb2:	f003 0302 	and.w	r3, r3, #2
 8101bb6:	60fb      	str	r3, [r7, #12]
 8101bb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8101bba:	4b2b      	ldr	r3, [pc, #172]	; (8101c68 <MX_GPIO_Init+0x100>)
 8101bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101bc0:	4a29      	ldr	r2, [pc, #164]	; (8101c68 <MX_GPIO_Init+0x100>)
 8101bc2:	f043 0304 	orr.w	r3, r3, #4
 8101bc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101bca:	4b27      	ldr	r3, [pc, #156]	; (8101c68 <MX_GPIO_Init+0x100>)
 8101bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101bd0:	f003 0304 	and.w	r3, r3, #4
 8101bd4:	60bb      	str	r3, [r7, #8]
 8101bd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8101bd8:	4b23      	ldr	r3, [pc, #140]	; (8101c68 <MX_GPIO_Init+0x100>)
 8101bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101bde:	4a22      	ldr	r2, [pc, #136]	; (8101c68 <MX_GPIO_Init+0x100>)
 8101be0:	f043 0308 	orr.w	r3, r3, #8
 8101be4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101be8:	4b1f      	ldr	r3, [pc, #124]	; (8101c68 <MX_GPIO_Init+0x100>)
 8101bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101bee:	f003 0308 	and.w	r3, r3, #8
 8101bf2:	607b      	str	r3, [r7, #4]
 8101bf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8101bf6:	4b1c      	ldr	r3, [pc, #112]	; (8101c68 <MX_GPIO_Init+0x100>)
 8101bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101bfc:	4a1a      	ldr	r2, [pc, #104]	; (8101c68 <MX_GPIO_Init+0x100>)
 8101bfe:	f043 0310 	orr.w	r3, r3, #16
 8101c02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101c06:	4b18      	ldr	r3, [pc, #96]	; (8101c68 <MX_GPIO_Init+0x100>)
 8101c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c0c:	f003 0310 	and.w	r3, r3, #16
 8101c10:	603b      	str	r3, [r7, #0]
 8101c12:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8101c14:	2200      	movs	r2, #0
 8101c16:	2101      	movs	r1, #1
 8101c18:	4814      	ldr	r0, [pc, #80]	; (8101c6c <MX_GPIO_Init+0x104>)
 8101c1a:	f001 fc55 	bl	81034c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8101c1e:	2200      	movs	r2, #0
 8101c20:	2102      	movs	r1, #2
 8101c22:	4813      	ldr	r0, [pc, #76]	; (8101c70 <MX_GPIO_Init+0x108>)
 8101c24:	f001 fc50 	bl	81034c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8101c28:	2301      	movs	r3, #1
 8101c2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101c2c:	2301      	movs	r3, #1
 8101c2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101c30:	2300      	movs	r3, #0
 8101c32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101c34:	2300      	movs	r3, #0
 8101c36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101c38:	f107 0314 	add.w	r3, r7, #20
 8101c3c:	4619      	mov	r1, r3
 8101c3e:	480b      	ldr	r0, [pc, #44]	; (8101c6c <MX_GPIO_Init+0x104>)
 8101c40:	f001 fa92 	bl	8103168 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8101c44:	2302      	movs	r3, #2
 8101c46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101c48:	2301      	movs	r3, #1
 8101c4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101c4c:	2300      	movs	r3, #0
 8101c4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101c50:	2300      	movs	r3, #0
 8101c52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8101c54:	f107 0314 	add.w	r3, r7, #20
 8101c58:	4619      	mov	r1, r3
 8101c5a:	4805      	ldr	r0, [pc, #20]	; (8101c70 <MX_GPIO_Init+0x108>)
 8101c5c:	f001 fa84 	bl	8103168 <HAL_GPIO_Init>

}
 8101c60:	bf00      	nop
 8101c62:	3728      	adds	r7, #40	; 0x28
 8101c64:	46bd      	mov	sp, r7
 8101c66:	bd80      	pop	{r7, pc}
 8101c68:	58024400 	.word	0x58024400
 8101c6c:	58020400 	.word	0x58020400
 8101c70:	58021000 	.word	0x58021000

08101c74 <HAL_TIM_PeriodElapsedCallback>:
//questa callback trasmette
//ad ogni intervallo di tempo impostato dal timer htim2
//la stringa pc_buffer contenente tutti i dati di interesse del drone
//dall'esp alla seriale della scheda stm
//questo esempio serve per verificare che l'ESP funzioni correttamente
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8101c74:	b580      	push	{r7, lr}
 8101c76:	b082      	sub	sp, #8
 8101c78:	af00      	add	r7, sp, #0
 8101c7a:	6078      	str	r0, [r7, #4]
	// This callback is automatically called by the HAL on the UEV event
	parseCommand(rxBuff); //parse del comando inviato da MATLAB all'ESP
 8101c7c:	483e      	ldr	r0, [pc, #248]	; (8101d78 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8101c7e:	f7ff fba1 	bl	81013c4 <parseCommand>
	clearCommand(rxBuff); //pulizia del buffer di ricezione
 8101c82:	483d      	ldr	r0, [pc, #244]	; (8101d78 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8101c84:	f7ff fb84 	bl	8101390 <clearCommand>
	if (htim == &htim2) {
 8101c88:	687b      	ldr	r3, [r7, #4]
 8101c8a:	4a3c      	ldr	r2, [pc, #240]	; (8101d7c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8101c8c:	4293      	cmp	r3, r2
 8101c8e:	d16e      	bne.n	8101d6e <HAL_TIM_PeriodElapsedCallback+0xfa>
		if (TX_Flag_DSEND) {
 8101c90:	4b3b      	ldr	r3, [pc, #236]	; (8101d80 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8101c92:	681b      	ldr	r3, [r3, #0]
 8101c94:	2b00      	cmp	r3, #0
 8101c96:	d06a      	beq.n	8101d6e <HAL_TIM_PeriodElapsedCallback+0xfa>
			getFixedArray(generateRandomNumber(0, 360), 3, 1, &pc_buffer);
 8101c98:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8101c9c:	2000      	movs	r0, #0
 8101c9e:	f7ff fcb3 	bl	8101608 <generateRandomNumber>
 8101ca2:	eeb0 7a40 	vmov.f32	s14, s0
 8101ca6:	eef0 7a60 	vmov.f32	s15, s1
 8101caa:	4a36      	ldr	r2, [pc, #216]	; (8101d84 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8101cac:	2101      	movs	r1, #1
 8101cae:	2003      	movs	r0, #3
 8101cb0:	eeb0 0a47 	vmov.f32	s0, s14
 8101cb4:	eef0 0a67 	vmov.f32	s1, s15
 8101cb8:	f7ff fbe6 	bl	8101488 <getFixedArray>
			getFixedArray(generateRandomNumber(0, 360), 3, 1, &pc_buffer[4]);
 8101cbc:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8101cc0:	2000      	movs	r0, #0
 8101cc2:	f7ff fca1 	bl	8101608 <generateRandomNumber>
 8101cc6:	eeb0 7a40 	vmov.f32	s14, s0
 8101cca:	eef0 7a60 	vmov.f32	s15, s1
 8101cce:	4a2e      	ldr	r2, [pc, #184]	; (8101d88 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8101cd0:	2101      	movs	r1, #1
 8101cd2:	2003      	movs	r0, #3
 8101cd4:	eeb0 0a47 	vmov.f32	s0, s14
 8101cd8:	eef0 0a67 	vmov.f32	s1, s15
 8101cdc:	f7ff fbd4 	bl	8101488 <getFixedArray>
			getFixedArray(generateRandomNumber(0, 360), 3, 1, &pc_buffer[8]);
 8101ce0:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8101ce4:	2000      	movs	r0, #0
 8101ce6:	f7ff fc8f 	bl	8101608 <generateRandomNumber>
 8101cea:	eeb0 7a40 	vmov.f32	s14, s0
 8101cee:	eef0 7a60 	vmov.f32	s15, s1
 8101cf2:	4a26      	ldr	r2, [pc, #152]	; (8101d8c <HAL_TIM_PeriodElapsedCallback+0x118>)
 8101cf4:	2101      	movs	r1, #1
 8101cf6:	2003      	movs	r0, #3
 8101cf8:	eeb0 0a47 	vmov.f32	s0, s14
 8101cfc:	eef0 0a67 	vmov.f32	s1, s15
 8101d00:	f7ff fbc2 	bl	8101488 <getFixedArray>
			getFixedArray(duty_1, 1, 1, &pc_buffer[12]);
 8101d04:	4b22      	ldr	r3, [pc, #136]	; (8101d90 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8101d06:	ed93 7b00 	vldr	d7, [r3]
 8101d0a:	4a22      	ldr	r2, [pc, #136]	; (8101d94 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8101d0c:	2101      	movs	r1, #1
 8101d0e:	2001      	movs	r0, #1
 8101d10:	eeb0 0a47 	vmov.f32	s0, s14
 8101d14:	eef0 0a67 	vmov.f32	s1, s15
 8101d18:	f7ff fbb6 	bl	8101488 <getFixedArray>
			getFixedArray(duty_2, 1, 1, &pc_buffer[14]);
 8101d1c:	4b1e      	ldr	r3, [pc, #120]	; (8101d98 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8101d1e:	ed93 7b00 	vldr	d7, [r3]
 8101d22:	4a1e      	ldr	r2, [pc, #120]	; (8101d9c <HAL_TIM_PeriodElapsedCallback+0x128>)
 8101d24:	2101      	movs	r1, #1
 8101d26:	2001      	movs	r0, #1
 8101d28:	eeb0 0a47 	vmov.f32	s0, s14
 8101d2c:	eef0 0a67 	vmov.f32	s1, s15
 8101d30:	f7ff fbaa 	bl	8101488 <getFixedArray>
			getFixedArray(duty_3, 1, 1, &pc_buffer[16]);
 8101d34:	4b1a      	ldr	r3, [pc, #104]	; (8101da0 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8101d36:	ed93 7b00 	vldr	d7, [r3]
 8101d3a:	4a1a      	ldr	r2, [pc, #104]	; (8101da4 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8101d3c:	2101      	movs	r1, #1
 8101d3e:	2001      	movs	r0, #1
 8101d40:	eeb0 0a47 	vmov.f32	s0, s14
 8101d44:	eef0 0a67 	vmov.f32	s1, s15
 8101d48:	f7ff fb9e 	bl	8101488 <getFixedArray>
			getFixedArray(duty_4, 1, 1, &pc_buffer[18]);
 8101d4c:	4b16      	ldr	r3, [pc, #88]	; (8101da8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8101d4e:	ed93 7b00 	vldr	d7, [r3]
 8101d52:	4a16      	ldr	r2, [pc, #88]	; (8101dac <HAL_TIM_PeriodElapsedCallback+0x138>)
 8101d54:	2101      	movs	r1, #1
 8101d56:	2001      	movs	r0, #1
 8101d58:	eeb0 0a47 	vmov.f32	s0, s14
 8101d5c:	eef0 0a67 	vmov.f32	s1, s15
 8101d60:	f7ff fb92 	bl	8101488 <getFixedArray>
			HAL_UART_Transmit_IT(&huart2, pc_buffer, sizeof(pc_buffer));
 8101d64:	2214      	movs	r2, #20
 8101d66:	4907      	ldr	r1, [pc, #28]	; (8101d84 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8101d68:	4811      	ldr	r0, [pc, #68]	; (8101db0 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8101d6a:	f004 fc63 	bl	8106634 <HAL_UART_Transmit_IT>
		}
	}
}
 8101d6e:	bf00      	nop
 8101d70:	3708      	adds	r7, #8
 8101d72:	46bd      	mov	sp, r7
 8101d74:	bd80      	pop	{r7, pc}
 8101d76:	bf00      	nop
 8101d78:	10000334 	.word	0x10000334
 8101d7c:	1000020c 	.word	0x1000020c
 8101d80:	10000208 	.word	0x10000208
 8101d84:	10000338 	.word	0x10000338
 8101d88:	1000033c 	.word	0x1000033c
 8101d8c:	10000340 	.word	0x10000340
 8101d90:	10000350 	.word	0x10000350
 8101d94:	10000344 	.word	0x10000344
 8101d98:	10000358 	.word	0x10000358
 8101d9c:	10000346 	.word	0x10000346
 8101da0:	10000360 	.word	0x10000360
 8101da4:	10000348 	.word	0x10000348
 8101da8:	10000368 	.word	0x10000368
 8101dac:	1000034a 	.word	0x1000034a
 8101db0:	100002a4 	.word	0x100002a4

08101db4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101db4:	b480      	push	{r7}
 8101db6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8101db8:	b672      	cpsid	i
}
 8101dba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8101dbc:	e7fe      	b.n	8101dbc <Error_Handler+0x8>
	...

08101dc0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101dc0:	b480      	push	{r7}
 8101dc2:	b083      	sub	sp, #12
 8101dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101dc6:	4b0a      	ldr	r3, [pc, #40]	; (8101df0 <HAL_MspInit+0x30>)
 8101dc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101dcc:	4a08      	ldr	r2, [pc, #32]	; (8101df0 <HAL_MspInit+0x30>)
 8101dce:	f043 0302 	orr.w	r3, r3, #2
 8101dd2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101dd6:	4b06      	ldr	r3, [pc, #24]	; (8101df0 <HAL_MspInit+0x30>)
 8101dd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101ddc:	f003 0302 	and.w	r3, r3, #2
 8101de0:	607b      	str	r3, [r7, #4]
 8101de2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101de4:	bf00      	nop
 8101de6:	370c      	adds	r7, #12
 8101de8:	46bd      	mov	sp, r7
 8101dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101dee:	4770      	bx	lr
 8101df0:	58024400 	.word	0x58024400

08101df4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8101df4:	b580      	push	{r7, lr}
 8101df6:	b084      	sub	sp, #16
 8101df8:	af00      	add	r7, sp, #0
 8101dfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8101dfc:	687b      	ldr	r3, [r7, #4]
 8101dfe:	681b      	ldr	r3, [r3, #0]
 8101e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101e04:	d117      	bne.n	8101e36 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8101e06:	4b18      	ldr	r3, [pc, #96]	; (8101e68 <HAL_TIM_Base_MspInit+0x74>)
 8101e08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101e0c:	4a16      	ldr	r2, [pc, #88]	; (8101e68 <HAL_TIM_Base_MspInit+0x74>)
 8101e0e:	f043 0301 	orr.w	r3, r3, #1
 8101e12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101e16:	4b14      	ldr	r3, [pc, #80]	; (8101e68 <HAL_TIM_Base_MspInit+0x74>)
 8101e18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101e1c:	f003 0301 	and.w	r3, r3, #1
 8101e20:	60fb      	str	r3, [r7, #12]
 8101e22:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8101e24:	2200      	movs	r2, #0
 8101e26:	2100      	movs	r1, #0
 8101e28:	201c      	movs	r0, #28
 8101e2a:	f000 fbf0 	bl	810260e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8101e2e:	201c      	movs	r0, #28
 8101e30:	f000 fc07 	bl	8102642 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8101e34:	e013      	b.n	8101e5e <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM3)
 8101e36:	687b      	ldr	r3, [r7, #4]
 8101e38:	681b      	ldr	r3, [r3, #0]
 8101e3a:	4a0c      	ldr	r2, [pc, #48]	; (8101e6c <HAL_TIM_Base_MspInit+0x78>)
 8101e3c:	4293      	cmp	r3, r2
 8101e3e:	d10e      	bne.n	8101e5e <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8101e40:	4b09      	ldr	r3, [pc, #36]	; (8101e68 <HAL_TIM_Base_MspInit+0x74>)
 8101e42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101e46:	4a08      	ldr	r2, [pc, #32]	; (8101e68 <HAL_TIM_Base_MspInit+0x74>)
 8101e48:	f043 0302 	orr.w	r3, r3, #2
 8101e4c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101e50:	4b05      	ldr	r3, [pc, #20]	; (8101e68 <HAL_TIM_Base_MspInit+0x74>)
 8101e52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101e56:	f003 0302 	and.w	r3, r3, #2
 8101e5a:	60bb      	str	r3, [r7, #8]
 8101e5c:	68bb      	ldr	r3, [r7, #8]
}
 8101e5e:	bf00      	nop
 8101e60:	3710      	adds	r7, #16
 8101e62:	46bd      	mov	sp, r7
 8101e64:	bd80      	pop	{r7, pc}
 8101e66:	bf00      	nop
 8101e68:	58024400 	.word	0x58024400
 8101e6c:	40000400 	.word	0x40000400

08101e70 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8101e70:	b580      	push	{r7, lr}
 8101e72:	b08a      	sub	sp, #40	; 0x28
 8101e74:	af00      	add	r7, sp, #0
 8101e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101e78:	f107 0314 	add.w	r3, r7, #20
 8101e7c:	2200      	movs	r2, #0
 8101e7e:	601a      	str	r2, [r3, #0]
 8101e80:	605a      	str	r2, [r3, #4]
 8101e82:	609a      	str	r2, [r3, #8]
 8101e84:	60da      	str	r2, [r3, #12]
 8101e86:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8101e88:	687b      	ldr	r3, [r7, #4]
 8101e8a:	681b      	ldr	r3, [r3, #0]
 8101e8c:	4a32      	ldr	r2, [pc, #200]	; (8101f58 <HAL_TIM_MspPostInit+0xe8>)
 8101e8e:	4293      	cmp	r3, r2
 8101e90:	d15d      	bne.n	8101f4e <HAL_TIM_MspPostInit+0xde>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101e92:	4b32      	ldr	r3, [pc, #200]	; (8101f5c <HAL_TIM_MspPostInit+0xec>)
 8101e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101e98:	4a30      	ldr	r2, [pc, #192]	; (8101f5c <HAL_TIM_MspPostInit+0xec>)
 8101e9a:	f043 0301 	orr.w	r3, r3, #1
 8101e9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101ea2:	4b2e      	ldr	r3, [pc, #184]	; (8101f5c <HAL_TIM_MspPostInit+0xec>)
 8101ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101ea8:	f003 0301 	and.w	r3, r3, #1
 8101eac:	613b      	str	r3, [r7, #16]
 8101eae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101eb0:	4b2a      	ldr	r3, [pc, #168]	; (8101f5c <HAL_TIM_MspPostInit+0xec>)
 8101eb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101eb6:	4a29      	ldr	r2, [pc, #164]	; (8101f5c <HAL_TIM_MspPostInit+0xec>)
 8101eb8:	f043 0302 	orr.w	r3, r3, #2
 8101ebc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101ec0:	4b26      	ldr	r3, [pc, #152]	; (8101f5c <HAL_TIM_MspPostInit+0xec>)
 8101ec2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101ec6:	f003 0302 	and.w	r3, r3, #2
 8101eca:	60fb      	str	r3, [r7, #12]
 8101ecc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8101ece:	4b23      	ldr	r3, [pc, #140]	; (8101f5c <HAL_TIM_MspPostInit+0xec>)
 8101ed0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101ed4:	4a21      	ldr	r2, [pc, #132]	; (8101f5c <HAL_TIM_MspPostInit+0xec>)
 8101ed6:	f043 0304 	orr.w	r3, r3, #4
 8101eda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101ede:	4b1f      	ldr	r3, [pc, #124]	; (8101f5c <HAL_TIM_MspPostInit+0xec>)
 8101ee0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101ee4:	f003 0304 	and.w	r3, r3, #4
 8101ee8:	60bb      	str	r3, [r7, #8]
 8101eea:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TIM3_CH1
    PB1     ------> TIM3_CH4
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8101eec:	2340      	movs	r3, #64	; 0x40
 8101eee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101ef0:	2302      	movs	r3, #2
 8101ef2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101ef4:	2300      	movs	r3, #0
 8101ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101ef8:	2300      	movs	r3, #0
 8101efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8101efc:	2302      	movs	r3, #2
 8101efe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101f00:	f107 0314 	add.w	r3, r7, #20
 8101f04:	4619      	mov	r1, r3
 8101f06:	4816      	ldr	r0, [pc, #88]	; (8101f60 <HAL_TIM_MspPostInit+0xf0>)
 8101f08:	f001 f92e 	bl	8103168 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8101f0c:	2302      	movs	r3, #2
 8101f0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101f10:	2302      	movs	r3, #2
 8101f12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101f14:	2300      	movs	r3, #0
 8101f16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101f18:	2300      	movs	r3, #0
 8101f1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8101f1c:	2302      	movs	r3, #2
 8101f1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101f20:	f107 0314 	add.w	r3, r7, #20
 8101f24:	4619      	mov	r1, r3
 8101f26:	480f      	ldr	r0, [pc, #60]	; (8101f64 <HAL_TIM_MspPostInit+0xf4>)
 8101f28:	f001 f91e 	bl	8103168 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8101f2c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8101f30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101f32:	2302      	movs	r3, #2
 8101f34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101f36:	2300      	movs	r3, #0
 8101f38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101f3a:	2300      	movs	r3, #0
 8101f3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8101f3e:	2302      	movs	r3, #2
 8101f40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8101f42:	f107 0314 	add.w	r3, r7, #20
 8101f46:	4619      	mov	r1, r3
 8101f48:	4807      	ldr	r0, [pc, #28]	; (8101f68 <HAL_TIM_MspPostInit+0xf8>)
 8101f4a:	f001 f90d 	bl	8103168 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8101f4e:	bf00      	nop
 8101f50:	3728      	adds	r7, #40	; 0x28
 8101f52:	46bd      	mov	sp, r7
 8101f54:	bd80      	pop	{r7, pc}
 8101f56:	bf00      	nop
 8101f58:	40000400 	.word	0x40000400
 8101f5c:	58024400 	.word	0x58024400
 8101f60:	58020000 	.word	0x58020000
 8101f64:	58020400 	.word	0x58020400
 8101f68:	58020800 	.word	0x58020800

08101f6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8101f6c:	b580      	push	{r7, lr}
 8101f6e:	b0ba      	sub	sp, #232	; 0xe8
 8101f70:	af00      	add	r7, sp, #0
 8101f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101f74:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8101f78:	2200      	movs	r2, #0
 8101f7a:	601a      	str	r2, [r3, #0]
 8101f7c:	605a      	str	r2, [r3, #4]
 8101f7e:	609a      	str	r2, [r3, #8]
 8101f80:	60da      	str	r2, [r3, #12]
 8101f82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101f84:	f107 0318 	add.w	r3, r7, #24
 8101f88:	22bc      	movs	r2, #188	; 0xbc
 8101f8a:	2100      	movs	r1, #0
 8101f8c:	4618      	mov	r0, r3
 8101f8e:	f008 fe6d 	bl	810ac6c <memset>
  if(huart->Instance==USART2)
 8101f92:	687b      	ldr	r3, [r7, #4]
 8101f94:	681b      	ldr	r3, [r3, #0]
 8101f96:	4a3a      	ldr	r2, [pc, #232]	; (8102080 <HAL_UART_MspInit+0x114>)
 8101f98:	4293      	cmp	r3, r2
 8101f9a:	d16d      	bne.n	8102078 <HAL_UART_MspInit+0x10c>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8101f9c:	2302      	movs	r3, #2
 8101f9e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8101fa0:	2300      	movs	r3, #0
 8101fa2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101fa6:	f107 0318 	add.w	r3, r7, #24
 8101faa:	4618      	mov	r0, r3
 8101fac:	f001 fd18 	bl	81039e0 <HAL_RCCEx_PeriphCLKConfig>
 8101fb0:	4603      	mov	r3, r0
 8101fb2:	2b00      	cmp	r3, #0
 8101fb4:	d001      	beq.n	8101fba <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8101fb6:	f7ff fefd 	bl	8101db4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8101fba:	4b32      	ldr	r3, [pc, #200]	; (8102084 <HAL_UART_MspInit+0x118>)
 8101fbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101fc0:	4a30      	ldr	r2, [pc, #192]	; (8102084 <HAL_UART_MspInit+0x118>)
 8101fc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101fc6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101fca:	4b2e      	ldr	r3, [pc, #184]	; (8102084 <HAL_UART_MspInit+0x118>)
 8101fcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8101fd4:	617b      	str	r3, [r7, #20]
 8101fd6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101fd8:	4b2a      	ldr	r3, [pc, #168]	; (8102084 <HAL_UART_MspInit+0x118>)
 8101fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101fde:	4a29      	ldr	r2, [pc, #164]	; (8102084 <HAL_UART_MspInit+0x118>)
 8101fe0:	f043 0301 	orr.w	r3, r3, #1
 8101fe4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101fe8:	4b26      	ldr	r3, [pc, #152]	; (8102084 <HAL_UART_MspInit+0x118>)
 8101fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101fee:	f003 0301 	and.w	r3, r3, #1
 8101ff2:	613b      	str	r3, [r7, #16]
 8101ff4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101ff6:	4b23      	ldr	r3, [pc, #140]	; (8102084 <HAL_UART_MspInit+0x118>)
 8101ff8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101ffc:	4a21      	ldr	r2, [pc, #132]	; (8102084 <HAL_UART_MspInit+0x118>)
 8101ffe:	f043 0308 	orr.w	r3, r3, #8
 8102002:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102006:	4b1f      	ldr	r3, [pc, #124]	; (8102084 <HAL_UART_MspInit+0x118>)
 8102008:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810200c:	f003 0308 	and.w	r3, r3, #8
 8102010:	60fb      	str	r3, [r7, #12]
 8102012:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8102014:	2308      	movs	r3, #8
 8102016:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810201a:	2302      	movs	r3, #2
 810201c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102020:	2300      	movs	r3, #0
 8102022:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102026:	2300      	movs	r3, #0
 8102028:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 810202c:	2307      	movs	r3, #7
 810202e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8102032:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8102036:	4619      	mov	r1, r3
 8102038:	4813      	ldr	r0, [pc, #76]	; (8102088 <HAL_UART_MspInit+0x11c>)
 810203a:	f001 f895 	bl	8103168 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 810203e:	2320      	movs	r3, #32
 8102040:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102044:	2302      	movs	r3, #2
 8102046:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810204a:	2300      	movs	r3, #0
 810204c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102050:	2300      	movs	r3, #0
 8102052:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8102056:	2307      	movs	r3, #7
 8102058:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 810205c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8102060:	4619      	mov	r1, r3
 8102062:	480a      	ldr	r0, [pc, #40]	; (810208c <HAL_UART_MspInit+0x120>)
 8102064:	f001 f880 	bl	8103168 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8102068:	2200      	movs	r2, #0
 810206a:	2100      	movs	r1, #0
 810206c:	2026      	movs	r0, #38	; 0x26
 810206e:	f000 face 	bl	810260e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8102072:	2026      	movs	r0, #38	; 0x26
 8102074:	f000 fae5 	bl	8102642 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8102078:	bf00      	nop
 810207a:	37e8      	adds	r7, #232	; 0xe8
 810207c:	46bd      	mov	sp, r7
 810207e:	bd80      	pop	{r7, pc}
 8102080:	40004400 	.word	0x40004400
 8102084:	58024400 	.word	0x58024400
 8102088:	58020000 	.word	0x58020000
 810208c:	58020c00 	.word	0x58020c00

08102090 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8102090:	b480      	push	{r7}
 8102092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8102094:	e7fe      	b.n	8102094 <NMI_Handler+0x4>

08102096 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8102096:	b480      	push	{r7}
 8102098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 810209a:	e7fe      	b.n	810209a <HardFault_Handler+0x4>

0810209c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 810209c:	b480      	push	{r7}
 810209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81020a0:	e7fe      	b.n	81020a0 <MemManage_Handler+0x4>

081020a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81020a2:	b480      	push	{r7}
 81020a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81020a6:	e7fe      	b.n	81020a6 <BusFault_Handler+0x4>

081020a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81020a8:	b480      	push	{r7}
 81020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81020ac:	e7fe      	b.n	81020ac <UsageFault_Handler+0x4>

081020ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 81020ae:	b480      	push	{r7}
 81020b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 81020b2:	bf00      	nop
 81020b4:	46bd      	mov	sp, r7
 81020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020ba:	4770      	bx	lr

081020bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81020bc:	b480      	push	{r7}
 81020be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81020c0:	bf00      	nop
 81020c2:	46bd      	mov	sp, r7
 81020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020c8:	4770      	bx	lr

081020ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81020ca:	b480      	push	{r7}
 81020cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81020ce:	bf00      	nop
 81020d0:	46bd      	mov	sp, r7
 81020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020d6:	4770      	bx	lr

081020d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81020d8:	b580      	push	{r7, lr}
 81020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81020dc:	f000 f99c 	bl	8102418 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81020e0:	bf00      	nop
 81020e2:	bd80      	pop	{r7, pc}

081020e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 81020e4:	b580      	push	{r7, lr}
 81020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 81020e8:	4802      	ldr	r0, [pc, #8]	; (81020f4 <TIM2_IRQHandler+0x10>)
 81020ea:	f003 fa21 	bl	8105530 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 81020ee:	bf00      	nop
 81020f0:	bd80      	pop	{r7, pc}
 81020f2:	bf00      	nop
 81020f4:	1000020c 	.word	0x1000020c

081020f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 81020f8:	b580      	push	{r7, lr}
 81020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 81020fc:	4802      	ldr	r0, [pc, #8]	; (8102108 <USART2_IRQHandler+0x10>)
 81020fe:	f004 fb97 	bl	8106830 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8102102:	bf00      	nop
 8102104:	bd80      	pop	{r7, pc}
 8102106:	bf00      	nop
 8102108:	100002a4 	.word	0x100002a4

0810210c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 810210c:	b480      	push	{r7}
 810210e:	af00      	add	r7, sp, #0
	return 1;
 8102110:	2301      	movs	r3, #1
}
 8102112:	4618      	mov	r0, r3
 8102114:	46bd      	mov	sp, r7
 8102116:	f85d 7b04 	ldr.w	r7, [sp], #4
 810211a:	4770      	bx	lr

0810211c <_kill>:

int _kill(int pid, int sig)
{
 810211c:	b580      	push	{r7, lr}
 810211e:	b082      	sub	sp, #8
 8102120:	af00      	add	r7, sp, #0
 8102122:	6078      	str	r0, [r7, #4]
 8102124:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8102126:	f008 fdd9 	bl	810acdc <__errno>
 810212a:	4603      	mov	r3, r0
 810212c:	2216      	movs	r2, #22
 810212e:	601a      	str	r2, [r3, #0]
	return -1;
 8102130:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8102134:	4618      	mov	r0, r3
 8102136:	3708      	adds	r7, #8
 8102138:	46bd      	mov	sp, r7
 810213a:	bd80      	pop	{r7, pc}

0810213c <_exit>:

void _exit (int status)
{
 810213c:	b580      	push	{r7, lr}
 810213e:	b082      	sub	sp, #8
 8102140:	af00      	add	r7, sp, #0
 8102142:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8102144:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8102148:	6878      	ldr	r0, [r7, #4]
 810214a:	f7ff ffe7 	bl	810211c <_kill>
	while (1) {}		/* Make sure we hang here */
 810214e:	e7fe      	b.n	810214e <_exit+0x12>

08102150 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8102150:	b580      	push	{r7, lr}
 8102152:	b086      	sub	sp, #24
 8102154:	af00      	add	r7, sp, #0
 8102156:	60f8      	str	r0, [r7, #12]
 8102158:	60b9      	str	r1, [r7, #8]
 810215a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	len=1;
 810215c:	2301      	movs	r3, #1
 810215e:	607b      	str	r3, [r7, #4]

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8102160:	2300      	movs	r3, #0
 8102162:	617b      	str	r3, [r7, #20]
 8102164:	e00a      	b.n	810217c <_read+0x2c>
	{
		*ptr++ = __io_getchar();
 8102166:	f3af 8000 	nop.w
 810216a:	4601      	mov	r1, r0
 810216c:	68bb      	ldr	r3, [r7, #8]
 810216e:	1c5a      	adds	r2, r3, #1
 8102170:	60ba      	str	r2, [r7, #8]
 8102172:	b2ca      	uxtb	r2, r1
 8102174:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8102176:	697b      	ldr	r3, [r7, #20]
 8102178:	3301      	adds	r3, #1
 810217a:	617b      	str	r3, [r7, #20]
 810217c:	697a      	ldr	r2, [r7, #20]
 810217e:	687b      	ldr	r3, [r7, #4]
 8102180:	429a      	cmp	r2, r3
 8102182:	dbf0      	blt.n	8102166 <_read+0x16>
	}

return len;
 8102184:	687b      	ldr	r3, [r7, #4]
}
 8102186:	4618      	mov	r0, r3
 8102188:	3718      	adds	r7, #24
 810218a:	46bd      	mov	sp, r7
 810218c:	bd80      	pop	{r7, pc}

0810218e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 810218e:	b580      	push	{r7, lr}
 8102190:	b086      	sub	sp, #24
 8102192:	af00      	add	r7, sp, #0
 8102194:	60f8      	str	r0, [r7, #12]
 8102196:	60b9      	str	r1, [r7, #8]
 8102198:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 810219a:	2300      	movs	r3, #0
 810219c:	617b      	str	r3, [r7, #20]
 810219e:	e009      	b.n	81021b4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 81021a0:	68bb      	ldr	r3, [r7, #8]
 81021a2:	1c5a      	adds	r2, r3, #1
 81021a4:	60ba      	str	r2, [r7, #8]
 81021a6:	781b      	ldrb	r3, [r3, #0]
 81021a8:	4618      	mov	r0, r3
 81021aa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 81021ae:	697b      	ldr	r3, [r7, #20]
 81021b0:	3301      	adds	r3, #1
 81021b2:	617b      	str	r3, [r7, #20]
 81021b4:	697a      	ldr	r2, [r7, #20]
 81021b6:	687b      	ldr	r3, [r7, #4]
 81021b8:	429a      	cmp	r2, r3
 81021ba:	dbf1      	blt.n	81021a0 <_write+0x12>
	}
	return len;
 81021bc:	687b      	ldr	r3, [r7, #4]
}
 81021be:	4618      	mov	r0, r3
 81021c0:	3718      	adds	r7, #24
 81021c2:	46bd      	mov	sp, r7
 81021c4:	bd80      	pop	{r7, pc}

081021c6 <_close>:

int _close(int file)
{
 81021c6:	b480      	push	{r7}
 81021c8:	b083      	sub	sp, #12
 81021ca:	af00      	add	r7, sp, #0
 81021cc:	6078      	str	r0, [r7, #4]
	return -1;
 81021ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 81021d2:	4618      	mov	r0, r3
 81021d4:	370c      	adds	r7, #12
 81021d6:	46bd      	mov	sp, r7
 81021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021dc:	4770      	bx	lr

081021de <_fstat>:


int _fstat(int file, struct stat *st)
{
 81021de:	b480      	push	{r7}
 81021e0:	b083      	sub	sp, #12
 81021e2:	af00      	add	r7, sp, #0
 81021e4:	6078      	str	r0, [r7, #4]
 81021e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 81021e8:	683b      	ldr	r3, [r7, #0]
 81021ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 81021ee:	605a      	str	r2, [r3, #4]
	return 0;
 81021f0:	2300      	movs	r3, #0
}
 81021f2:	4618      	mov	r0, r3
 81021f4:	370c      	adds	r7, #12
 81021f6:	46bd      	mov	sp, r7
 81021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021fc:	4770      	bx	lr

081021fe <_isatty>:

int _isatty(int file)
{
 81021fe:	b480      	push	{r7}
 8102200:	b083      	sub	sp, #12
 8102202:	af00      	add	r7, sp, #0
 8102204:	6078      	str	r0, [r7, #4]
	return 1;
 8102206:	2301      	movs	r3, #1
}
 8102208:	4618      	mov	r0, r3
 810220a:	370c      	adds	r7, #12
 810220c:	46bd      	mov	sp, r7
 810220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102212:	4770      	bx	lr

08102214 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8102214:	b480      	push	{r7}
 8102216:	b085      	sub	sp, #20
 8102218:	af00      	add	r7, sp, #0
 810221a:	60f8      	str	r0, [r7, #12]
 810221c:	60b9      	str	r1, [r7, #8]
 810221e:	607a      	str	r2, [r7, #4]
	return 0;
 8102220:	2300      	movs	r3, #0
}
 8102222:	4618      	mov	r0, r3
 8102224:	3714      	adds	r7, #20
 8102226:	46bd      	mov	sp, r7
 8102228:	f85d 7b04 	ldr.w	r7, [sp], #4
 810222c:	4770      	bx	lr
	...

08102230 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8102230:	b580      	push	{r7, lr}
 8102232:	b086      	sub	sp, #24
 8102234:	af00      	add	r7, sp, #0
 8102236:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8102238:	4a14      	ldr	r2, [pc, #80]	; (810228c <_sbrk+0x5c>)
 810223a:	4b15      	ldr	r3, [pc, #84]	; (8102290 <_sbrk+0x60>)
 810223c:	1ad3      	subs	r3, r2, r3
 810223e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8102240:	697b      	ldr	r3, [r7, #20]
 8102242:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8102244:	4b13      	ldr	r3, [pc, #76]	; (8102294 <_sbrk+0x64>)
 8102246:	681b      	ldr	r3, [r3, #0]
 8102248:	2b00      	cmp	r3, #0
 810224a:	d102      	bne.n	8102252 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 810224c:	4b11      	ldr	r3, [pc, #68]	; (8102294 <_sbrk+0x64>)
 810224e:	4a12      	ldr	r2, [pc, #72]	; (8102298 <_sbrk+0x68>)
 8102250:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8102252:	4b10      	ldr	r3, [pc, #64]	; (8102294 <_sbrk+0x64>)
 8102254:	681a      	ldr	r2, [r3, #0]
 8102256:	687b      	ldr	r3, [r7, #4]
 8102258:	4413      	add	r3, r2
 810225a:	693a      	ldr	r2, [r7, #16]
 810225c:	429a      	cmp	r2, r3
 810225e:	d207      	bcs.n	8102270 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8102260:	f008 fd3c 	bl	810acdc <__errno>
 8102264:	4603      	mov	r3, r0
 8102266:	220c      	movs	r2, #12
 8102268:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 810226a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 810226e:	e009      	b.n	8102284 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8102270:	4b08      	ldr	r3, [pc, #32]	; (8102294 <_sbrk+0x64>)
 8102272:	681b      	ldr	r3, [r3, #0]
 8102274:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8102276:	4b07      	ldr	r3, [pc, #28]	; (8102294 <_sbrk+0x64>)
 8102278:	681a      	ldr	r2, [r3, #0]
 810227a:	687b      	ldr	r3, [r7, #4]
 810227c:	4413      	add	r3, r2
 810227e:	4a05      	ldr	r2, [pc, #20]	; (8102294 <_sbrk+0x64>)
 8102280:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8102282:	68fb      	ldr	r3, [r7, #12]
}
 8102284:	4618      	mov	r0, r3
 8102286:	3718      	adds	r7, #24
 8102288:	46bd      	mov	sp, r7
 810228a:	bd80      	pop	{r7, pc}
 810228c:	10048000 	.word	0x10048000
 8102290:	00000400 	.word	0x00000400
 8102294:	10000370 	.word	0x10000370
 8102298:	100004c8 	.word	0x100004c8

0810229c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 810229c:	f8df d034 	ldr.w	sp, [pc, #52]	; 81022d4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81022a0:	f7fe ff2e 	bl	8101100 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81022a4:	480c      	ldr	r0, [pc, #48]	; (81022d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81022a6:	490d      	ldr	r1, [pc, #52]	; (81022dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81022a8:	4a0d      	ldr	r2, [pc, #52]	; (81022e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81022aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81022ac:	e002      	b.n	81022b4 <LoopCopyDataInit>

081022ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81022ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81022b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81022b2:	3304      	adds	r3, #4

081022b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81022b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81022b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81022b8:	d3f9      	bcc.n	81022ae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81022ba:	4a0a      	ldr	r2, [pc, #40]	; (81022e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81022bc:	4c0a      	ldr	r4, [pc, #40]	; (81022e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 81022be:	2300      	movs	r3, #0
  b LoopFillZerobss
 81022c0:	e001      	b.n	81022c6 <LoopFillZerobss>

081022c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81022c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81022c4:	3204      	adds	r2, #4

081022c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81022c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81022c8:	d3fb      	bcc.n	81022c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81022ca:	f008 fd0d 	bl	810ace8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81022ce:	f7ff f9d3 	bl	8101678 <main>
  bx  lr
 81022d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81022d4:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81022d8:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81022dc:	100001e8 	.word	0x100001e8
  ldr r2, =_sidata
 81022e0:	0810ec58 	.word	0x0810ec58
  ldr r2, =_sbss
 81022e4:	100001e8 	.word	0x100001e8
  ldr r4, =_ebss
 81022e8:	100004c4 	.word	0x100004c4

081022ec <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81022ec:	e7fe      	b.n	81022ec <ADC3_IRQHandler>
	...

081022f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81022f0:	b580      	push	{r7, lr}
 81022f2:	b082      	sub	sp, #8
 81022f4:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81022f6:	4b28      	ldr	r3, [pc, #160]	; (8102398 <HAL_Init+0xa8>)
 81022f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81022fc:	4a26      	ldr	r2, [pc, #152]	; (8102398 <HAL_Init+0xa8>)
 81022fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8102302:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8102306:	4b24      	ldr	r3, [pc, #144]	; (8102398 <HAL_Init+0xa8>)
 8102308:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810230c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8102310:	603b      	str	r3, [r7, #0]
 8102312:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8102314:	4b21      	ldr	r3, [pc, #132]	; (810239c <HAL_Init+0xac>)
 8102316:	681b      	ldr	r3, [r3, #0]
 8102318:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 810231c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8102320:	4a1e      	ldr	r2, [pc, #120]	; (810239c <HAL_Init+0xac>)
 8102322:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8102326:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8102328:	4b1c      	ldr	r3, [pc, #112]	; (810239c <HAL_Init+0xac>)
 810232a:	681b      	ldr	r3, [r3, #0]
 810232c:	4a1b      	ldr	r2, [pc, #108]	; (810239c <HAL_Init+0xac>)
 810232e:	f043 0301 	orr.w	r3, r3, #1
 8102332:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8102334:	2003      	movs	r0, #3
 8102336:	f000 f95f 	bl	81025f8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810233a:	f001 f979 	bl	8103630 <HAL_RCC_GetSysClockFreq>
 810233e:	4602      	mov	r2, r0
 8102340:	4b15      	ldr	r3, [pc, #84]	; (8102398 <HAL_Init+0xa8>)
 8102342:	699b      	ldr	r3, [r3, #24]
 8102344:	0a1b      	lsrs	r3, r3, #8
 8102346:	f003 030f 	and.w	r3, r3, #15
 810234a:	4915      	ldr	r1, [pc, #84]	; (81023a0 <HAL_Init+0xb0>)
 810234c:	5ccb      	ldrb	r3, [r1, r3]
 810234e:	f003 031f 	and.w	r3, r3, #31
 8102352:	fa22 f303 	lsr.w	r3, r2, r3
 8102356:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102358:	4b0f      	ldr	r3, [pc, #60]	; (8102398 <HAL_Init+0xa8>)
 810235a:	699b      	ldr	r3, [r3, #24]
 810235c:	f003 030f 	and.w	r3, r3, #15
 8102360:	4a0f      	ldr	r2, [pc, #60]	; (81023a0 <HAL_Init+0xb0>)
 8102362:	5cd3      	ldrb	r3, [r2, r3]
 8102364:	f003 031f 	and.w	r3, r3, #31
 8102368:	687a      	ldr	r2, [r7, #4]
 810236a:	fa22 f303 	lsr.w	r3, r2, r3
 810236e:	4a0d      	ldr	r2, [pc, #52]	; (81023a4 <HAL_Init+0xb4>)
 8102370:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8102372:	4b0c      	ldr	r3, [pc, #48]	; (81023a4 <HAL_Init+0xb4>)
 8102374:	681b      	ldr	r3, [r3, #0]
 8102376:	4a0c      	ldr	r2, [pc, #48]	; (81023a8 <HAL_Init+0xb8>)
 8102378:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810237a:	2000      	movs	r0, #0
 810237c:	f000 f816 	bl	81023ac <HAL_InitTick>
 8102380:	4603      	mov	r3, r0
 8102382:	2b00      	cmp	r3, #0
 8102384:	d001      	beq.n	810238a <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8102386:	2301      	movs	r3, #1
 8102388:	e002      	b.n	8102390 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 810238a:	f7ff fd19 	bl	8101dc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810238e:	2300      	movs	r3, #0
}
 8102390:	4618      	mov	r0, r3
 8102392:	3708      	adds	r7, #8
 8102394:	46bd      	mov	sp, r7
 8102396:	bd80      	pop	{r7, pc}
 8102398:	58024400 	.word	0x58024400
 810239c:	40024400 	.word	0x40024400
 81023a0:	0810e700 	.word	0x0810e700
 81023a4:	10000004 	.word	0x10000004
 81023a8:	10000000 	.word	0x10000000

081023ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81023ac:	b580      	push	{r7, lr}
 81023ae:	b082      	sub	sp, #8
 81023b0:	af00      	add	r7, sp, #0
 81023b2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 81023b4:	4b15      	ldr	r3, [pc, #84]	; (810240c <HAL_InitTick+0x60>)
 81023b6:	781b      	ldrb	r3, [r3, #0]
 81023b8:	2b00      	cmp	r3, #0
 81023ba:	d101      	bne.n	81023c0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 81023bc:	2301      	movs	r3, #1
 81023be:	e021      	b.n	8102404 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 81023c0:	4b13      	ldr	r3, [pc, #76]	; (8102410 <HAL_InitTick+0x64>)
 81023c2:	681a      	ldr	r2, [r3, #0]
 81023c4:	4b11      	ldr	r3, [pc, #68]	; (810240c <HAL_InitTick+0x60>)
 81023c6:	781b      	ldrb	r3, [r3, #0]
 81023c8:	4619      	mov	r1, r3
 81023ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81023ce:	fbb3 f3f1 	udiv	r3, r3, r1
 81023d2:	fbb2 f3f3 	udiv	r3, r2, r3
 81023d6:	4618      	mov	r0, r3
 81023d8:	f000 f941 	bl	810265e <HAL_SYSTICK_Config>
 81023dc:	4603      	mov	r3, r0
 81023de:	2b00      	cmp	r3, #0
 81023e0:	d001      	beq.n	81023e6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 81023e2:	2301      	movs	r3, #1
 81023e4:	e00e      	b.n	8102404 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81023e6:	687b      	ldr	r3, [r7, #4]
 81023e8:	2b0f      	cmp	r3, #15
 81023ea:	d80a      	bhi.n	8102402 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 81023ec:	2200      	movs	r2, #0
 81023ee:	6879      	ldr	r1, [r7, #4]
 81023f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 81023f4:	f000 f90b 	bl	810260e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 81023f8:	4a06      	ldr	r2, [pc, #24]	; (8102414 <HAL_InitTick+0x68>)
 81023fa:	687b      	ldr	r3, [r7, #4]
 81023fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 81023fe:	2300      	movs	r3, #0
 8102400:	e000      	b.n	8102404 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8102402:	2301      	movs	r3, #1
}
 8102404:	4618      	mov	r0, r3
 8102406:	3708      	adds	r7, #8
 8102408:	46bd      	mov	sp, r7
 810240a:	bd80      	pop	{r7, pc}
 810240c:	1000000c 	.word	0x1000000c
 8102410:	10000000 	.word	0x10000000
 8102414:	10000008 	.word	0x10000008

08102418 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8102418:	b480      	push	{r7}
 810241a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 810241c:	4b06      	ldr	r3, [pc, #24]	; (8102438 <HAL_IncTick+0x20>)
 810241e:	781b      	ldrb	r3, [r3, #0]
 8102420:	461a      	mov	r2, r3
 8102422:	4b06      	ldr	r3, [pc, #24]	; (810243c <HAL_IncTick+0x24>)
 8102424:	681b      	ldr	r3, [r3, #0]
 8102426:	4413      	add	r3, r2
 8102428:	4a04      	ldr	r2, [pc, #16]	; (810243c <HAL_IncTick+0x24>)
 810242a:	6013      	str	r3, [r2, #0]
}
 810242c:	bf00      	nop
 810242e:	46bd      	mov	sp, r7
 8102430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102434:	4770      	bx	lr
 8102436:	bf00      	nop
 8102438:	1000000c 	.word	0x1000000c
 810243c:	10000374 	.word	0x10000374

08102440 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8102440:	b480      	push	{r7}
 8102442:	af00      	add	r7, sp, #0
  return uwTick;
 8102444:	4b03      	ldr	r3, [pc, #12]	; (8102454 <HAL_GetTick+0x14>)
 8102446:	681b      	ldr	r3, [r3, #0]
}
 8102448:	4618      	mov	r0, r3
 810244a:	46bd      	mov	sp, r7
 810244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102450:	4770      	bx	lr
 8102452:	bf00      	nop
 8102454:	10000374 	.word	0x10000374

08102458 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102458:	b480      	push	{r7}
 810245a:	b085      	sub	sp, #20
 810245c:	af00      	add	r7, sp, #0
 810245e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8102460:	687b      	ldr	r3, [r7, #4]
 8102462:	f003 0307 	and.w	r3, r3, #7
 8102466:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8102468:	4b0c      	ldr	r3, [pc, #48]	; (810249c <__NVIC_SetPriorityGrouping+0x44>)
 810246a:	68db      	ldr	r3, [r3, #12]
 810246c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810246e:	68ba      	ldr	r2, [r7, #8]
 8102470:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8102474:	4013      	ands	r3, r2
 8102476:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8102478:	68fb      	ldr	r3, [r7, #12]
 810247a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 810247c:	68bb      	ldr	r3, [r7, #8]
 810247e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8102480:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8102484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102488:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810248a:	4a04      	ldr	r2, [pc, #16]	; (810249c <__NVIC_SetPriorityGrouping+0x44>)
 810248c:	68bb      	ldr	r3, [r7, #8]
 810248e:	60d3      	str	r3, [r2, #12]
}
 8102490:	bf00      	nop
 8102492:	3714      	adds	r7, #20
 8102494:	46bd      	mov	sp, r7
 8102496:	f85d 7b04 	ldr.w	r7, [sp], #4
 810249a:	4770      	bx	lr
 810249c:	e000ed00 	.word	0xe000ed00

081024a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81024a0:	b480      	push	{r7}
 81024a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81024a4:	4b04      	ldr	r3, [pc, #16]	; (81024b8 <__NVIC_GetPriorityGrouping+0x18>)
 81024a6:	68db      	ldr	r3, [r3, #12]
 81024a8:	0a1b      	lsrs	r3, r3, #8
 81024aa:	f003 0307 	and.w	r3, r3, #7
}
 81024ae:	4618      	mov	r0, r3
 81024b0:	46bd      	mov	sp, r7
 81024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81024b6:	4770      	bx	lr
 81024b8:	e000ed00 	.word	0xe000ed00

081024bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81024bc:	b480      	push	{r7}
 81024be:	b083      	sub	sp, #12
 81024c0:	af00      	add	r7, sp, #0
 81024c2:	4603      	mov	r3, r0
 81024c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81024c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81024ca:	2b00      	cmp	r3, #0
 81024cc:	db0b      	blt.n	81024e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81024ce:	88fb      	ldrh	r3, [r7, #6]
 81024d0:	f003 021f 	and.w	r2, r3, #31
 81024d4:	4907      	ldr	r1, [pc, #28]	; (81024f4 <__NVIC_EnableIRQ+0x38>)
 81024d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81024da:	095b      	lsrs	r3, r3, #5
 81024dc:	2001      	movs	r0, #1
 81024de:	fa00 f202 	lsl.w	r2, r0, r2
 81024e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 81024e6:	bf00      	nop
 81024e8:	370c      	adds	r7, #12
 81024ea:	46bd      	mov	sp, r7
 81024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81024f0:	4770      	bx	lr
 81024f2:	bf00      	nop
 81024f4:	e000e100 	.word	0xe000e100

081024f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81024f8:	b480      	push	{r7}
 81024fa:	b083      	sub	sp, #12
 81024fc:	af00      	add	r7, sp, #0
 81024fe:	4603      	mov	r3, r0
 8102500:	6039      	str	r1, [r7, #0]
 8102502:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8102504:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102508:	2b00      	cmp	r3, #0
 810250a:	db0a      	blt.n	8102522 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810250c:	683b      	ldr	r3, [r7, #0]
 810250e:	b2da      	uxtb	r2, r3
 8102510:	490c      	ldr	r1, [pc, #48]	; (8102544 <__NVIC_SetPriority+0x4c>)
 8102512:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102516:	0112      	lsls	r2, r2, #4
 8102518:	b2d2      	uxtb	r2, r2
 810251a:	440b      	add	r3, r1
 810251c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8102520:	e00a      	b.n	8102538 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102522:	683b      	ldr	r3, [r7, #0]
 8102524:	b2da      	uxtb	r2, r3
 8102526:	4908      	ldr	r1, [pc, #32]	; (8102548 <__NVIC_SetPriority+0x50>)
 8102528:	88fb      	ldrh	r3, [r7, #6]
 810252a:	f003 030f 	and.w	r3, r3, #15
 810252e:	3b04      	subs	r3, #4
 8102530:	0112      	lsls	r2, r2, #4
 8102532:	b2d2      	uxtb	r2, r2
 8102534:	440b      	add	r3, r1
 8102536:	761a      	strb	r2, [r3, #24]
}
 8102538:	bf00      	nop
 810253a:	370c      	adds	r7, #12
 810253c:	46bd      	mov	sp, r7
 810253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102542:	4770      	bx	lr
 8102544:	e000e100 	.word	0xe000e100
 8102548:	e000ed00 	.word	0xe000ed00

0810254c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810254c:	b480      	push	{r7}
 810254e:	b089      	sub	sp, #36	; 0x24
 8102550:	af00      	add	r7, sp, #0
 8102552:	60f8      	str	r0, [r7, #12]
 8102554:	60b9      	str	r1, [r7, #8]
 8102556:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8102558:	68fb      	ldr	r3, [r7, #12]
 810255a:	f003 0307 	and.w	r3, r3, #7
 810255e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8102560:	69fb      	ldr	r3, [r7, #28]
 8102562:	f1c3 0307 	rsb	r3, r3, #7
 8102566:	2b04      	cmp	r3, #4
 8102568:	bf28      	it	cs
 810256a:	2304      	movcs	r3, #4
 810256c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810256e:	69fb      	ldr	r3, [r7, #28]
 8102570:	3304      	adds	r3, #4
 8102572:	2b06      	cmp	r3, #6
 8102574:	d902      	bls.n	810257c <NVIC_EncodePriority+0x30>
 8102576:	69fb      	ldr	r3, [r7, #28]
 8102578:	3b03      	subs	r3, #3
 810257a:	e000      	b.n	810257e <NVIC_EncodePriority+0x32>
 810257c:	2300      	movs	r3, #0
 810257e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102580:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8102584:	69bb      	ldr	r3, [r7, #24]
 8102586:	fa02 f303 	lsl.w	r3, r2, r3
 810258a:	43da      	mvns	r2, r3
 810258c:	68bb      	ldr	r3, [r7, #8]
 810258e:	401a      	ands	r2, r3
 8102590:	697b      	ldr	r3, [r7, #20]
 8102592:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8102594:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8102598:	697b      	ldr	r3, [r7, #20]
 810259a:	fa01 f303 	lsl.w	r3, r1, r3
 810259e:	43d9      	mvns	r1, r3
 81025a0:	687b      	ldr	r3, [r7, #4]
 81025a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81025a4:	4313      	orrs	r3, r2
         );
}
 81025a6:	4618      	mov	r0, r3
 81025a8:	3724      	adds	r7, #36	; 0x24
 81025aa:	46bd      	mov	sp, r7
 81025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81025b0:	4770      	bx	lr
	...

081025b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 81025b4:	b580      	push	{r7, lr}
 81025b6:	b082      	sub	sp, #8
 81025b8:	af00      	add	r7, sp, #0
 81025ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 81025bc:	687b      	ldr	r3, [r7, #4]
 81025be:	3b01      	subs	r3, #1
 81025c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81025c4:	d301      	bcc.n	81025ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 81025c6:	2301      	movs	r3, #1
 81025c8:	e00f      	b.n	81025ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 81025ca:	4a0a      	ldr	r2, [pc, #40]	; (81025f4 <SysTick_Config+0x40>)
 81025cc:	687b      	ldr	r3, [r7, #4]
 81025ce:	3b01      	subs	r3, #1
 81025d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 81025d2:	210f      	movs	r1, #15
 81025d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 81025d8:	f7ff ff8e 	bl	81024f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 81025dc:	4b05      	ldr	r3, [pc, #20]	; (81025f4 <SysTick_Config+0x40>)
 81025de:	2200      	movs	r2, #0
 81025e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 81025e2:	4b04      	ldr	r3, [pc, #16]	; (81025f4 <SysTick_Config+0x40>)
 81025e4:	2207      	movs	r2, #7
 81025e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 81025e8:	2300      	movs	r3, #0
}
 81025ea:	4618      	mov	r0, r3
 81025ec:	3708      	adds	r7, #8
 81025ee:	46bd      	mov	sp, r7
 81025f0:	bd80      	pop	{r7, pc}
 81025f2:	bf00      	nop
 81025f4:	e000e010 	.word	0xe000e010

081025f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81025f8:	b580      	push	{r7, lr}
 81025fa:	b082      	sub	sp, #8
 81025fc:	af00      	add	r7, sp, #0
 81025fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8102600:	6878      	ldr	r0, [r7, #4]
 8102602:	f7ff ff29 	bl	8102458 <__NVIC_SetPriorityGrouping>
}
 8102606:	bf00      	nop
 8102608:	3708      	adds	r7, #8
 810260a:	46bd      	mov	sp, r7
 810260c:	bd80      	pop	{r7, pc}

0810260e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810260e:	b580      	push	{r7, lr}
 8102610:	b086      	sub	sp, #24
 8102612:	af00      	add	r7, sp, #0
 8102614:	4603      	mov	r3, r0
 8102616:	60b9      	str	r1, [r7, #8]
 8102618:	607a      	str	r2, [r7, #4]
 810261a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 810261c:	f7ff ff40 	bl	81024a0 <__NVIC_GetPriorityGrouping>
 8102620:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8102622:	687a      	ldr	r2, [r7, #4]
 8102624:	68b9      	ldr	r1, [r7, #8]
 8102626:	6978      	ldr	r0, [r7, #20]
 8102628:	f7ff ff90 	bl	810254c <NVIC_EncodePriority>
 810262c:	4602      	mov	r2, r0
 810262e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8102632:	4611      	mov	r1, r2
 8102634:	4618      	mov	r0, r3
 8102636:	f7ff ff5f 	bl	81024f8 <__NVIC_SetPriority>
}
 810263a:	bf00      	nop
 810263c:	3718      	adds	r7, #24
 810263e:	46bd      	mov	sp, r7
 8102640:	bd80      	pop	{r7, pc}

08102642 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8102642:	b580      	push	{r7, lr}
 8102644:	b082      	sub	sp, #8
 8102646:	af00      	add	r7, sp, #0
 8102648:	4603      	mov	r3, r0
 810264a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 810264c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102650:	4618      	mov	r0, r3
 8102652:	f7ff ff33 	bl	81024bc <__NVIC_EnableIRQ>
}
 8102656:	bf00      	nop
 8102658:	3708      	adds	r7, #8
 810265a:	46bd      	mov	sp, r7
 810265c:	bd80      	pop	{r7, pc}

0810265e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 810265e:	b580      	push	{r7, lr}
 8102660:	b082      	sub	sp, #8
 8102662:	af00      	add	r7, sp, #0
 8102664:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8102666:	6878      	ldr	r0, [r7, #4]
 8102668:	f7ff ffa4 	bl	81025b4 <SysTick_Config>
 810266c:	4603      	mov	r3, r0
}
 810266e:	4618      	mov	r0, r3
 8102670:	3708      	adds	r7, #8
 8102672:	46bd      	mov	sp, r7
 8102674:	bd80      	pop	{r7, pc}
	...

08102678 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8102678:	b480      	push	{r7}
 810267a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 810267c:	4b07      	ldr	r3, [pc, #28]	; (810269c <HAL_GetCurrentCPUID+0x24>)
 810267e:	681b      	ldr	r3, [r3, #0]
 8102680:	091b      	lsrs	r3, r3, #4
 8102682:	f003 030f 	and.w	r3, r3, #15
 8102686:	2b07      	cmp	r3, #7
 8102688:	d101      	bne.n	810268e <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 810268a:	2303      	movs	r3, #3
 810268c:	e000      	b.n	8102690 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 810268e:	2301      	movs	r3, #1
  }
}
 8102690:	4618      	mov	r0, r3
 8102692:	46bd      	mov	sp, r7
 8102694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102698:	4770      	bx	lr
 810269a:	bf00      	nop
 810269c:	e000ed00 	.word	0xe000ed00

081026a0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 81026a0:	b580      	push	{r7, lr}
 81026a2:	b086      	sub	sp, #24
 81026a4:	af00      	add	r7, sp, #0
 81026a6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 81026a8:	f7ff feca 	bl	8102440 <HAL_GetTick>
 81026ac:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 81026ae:	687b      	ldr	r3, [r7, #4]
 81026b0:	2b00      	cmp	r3, #0
 81026b2:	d101      	bne.n	81026b8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 81026b4:	2301      	movs	r3, #1
 81026b6:	e2dc      	b.n	8102c72 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 81026b8:	687b      	ldr	r3, [r7, #4]
 81026ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 81026be:	b2db      	uxtb	r3, r3
 81026c0:	2b02      	cmp	r3, #2
 81026c2:	d008      	beq.n	81026d6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 81026c4:	687b      	ldr	r3, [r7, #4]
 81026c6:	2280      	movs	r2, #128	; 0x80
 81026c8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 81026ca:	687b      	ldr	r3, [r7, #4]
 81026cc:	2200      	movs	r2, #0
 81026ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 81026d2:	2301      	movs	r3, #1
 81026d4:	e2cd      	b.n	8102c72 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81026d6:	687b      	ldr	r3, [r7, #4]
 81026d8:	681b      	ldr	r3, [r3, #0]
 81026da:	4a76      	ldr	r2, [pc, #472]	; (81028b4 <HAL_DMA_Abort+0x214>)
 81026dc:	4293      	cmp	r3, r2
 81026de:	d04a      	beq.n	8102776 <HAL_DMA_Abort+0xd6>
 81026e0:	687b      	ldr	r3, [r7, #4]
 81026e2:	681b      	ldr	r3, [r3, #0]
 81026e4:	4a74      	ldr	r2, [pc, #464]	; (81028b8 <HAL_DMA_Abort+0x218>)
 81026e6:	4293      	cmp	r3, r2
 81026e8:	d045      	beq.n	8102776 <HAL_DMA_Abort+0xd6>
 81026ea:	687b      	ldr	r3, [r7, #4]
 81026ec:	681b      	ldr	r3, [r3, #0]
 81026ee:	4a73      	ldr	r2, [pc, #460]	; (81028bc <HAL_DMA_Abort+0x21c>)
 81026f0:	4293      	cmp	r3, r2
 81026f2:	d040      	beq.n	8102776 <HAL_DMA_Abort+0xd6>
 81026f4:	687b      	ldr	r3, [r7, #4]
 81026f6:	681b      	ldr	r3, [r3, #0]
 81026f8:	4a71      	ldr	r2, [pc, #452]	; (81028c0 <HAL_DMA_Abort+0x220>)
 81026fa:	4293      	cmp	r3, r2
 81026fc:	d03b      	beq.n	8102776 <HAL_DMA_Abort+0xd6>
 81026fe:	687b      	ldr	r3, [r7, #4]
 8102700:	681b      	ldr	r3, [r3, #0]
 8102702:	4a70      	ldr	r2, [pc, #448]	; (81028c4 <HAL_DMA_Abort+0x224>)
 8102704:	4293      	cmp	r3, r2
 8102706:	d036      	beq.n	8102776 <HAL_DMA_Abort+0xd6>
 8102708:	687b      	ldr	r3, [r7, #4]
 810270a:	681b      	ldr	r3, [r3, #0]
 810270c:	4a6e      	ldr	r2, [pc, #440]	; (81028c8 <HAL_DMA_Abort+0x228>)
 810270e:	4293      	cmp	r3, r2
 8102710:	d031      	beq.n	8102776 <HAL_DMA_Abort+0xd6>
 8102712:	687b      	ldr	r3, [r7, #4]
 8102714:	681b      	ldr	r3, [r3, #0]
 8102716:	4a6d      	ldr	r2, [pc, #436]	; (81028cc <HAL_DMA_Abort+0x22c>)
 8102718:	4293      	cmp	r3, r2
 810271a:	d02c      	beq.n	8102776 <HAL_DMA_Abort+0xd6>
 810271c:	687b      	ldr	r3, [r7, #4]
 810271e:	681b      	ldr	r3, [r3, #0]
 8102720:	4a6b      	ldr	r2, [pc, #428]	; (81028d0 <HAL_DMA_Abort+0x230>)
 8102722:	4293      	cmp	r3, r2
 8102724:	d027      	beq.n	8102776 <HAL_DMA_Abort+0xd6>
 8102726:	687b      	ldr	r3, [r7, #4]
 8102728:	681b      	ldr	r3, [r3, #0]
 810272a:	4a6a      	ldr	r2, [pc, #424]	; (81028d4 <HAL_DMA_Abort+0x234>)
 810272c:	4293      	cmp	r3, r2
 810272e:	d022      	beq.n	8102776 <HAL_DMA_Abort+0xd6>
 8102730:	687b      	ldr	r3, [r7, #4]
 8102732:	681b      	ldr	r3, [r3, #0]
 8102734:	4a68      	ldr	r2, [pc, #416]	; (81028d8 <HAL_DMA_Abort+0x238>)
 8102736:	4293      	cmp	r3, r2
 8102738:	d01d      	beq.n	8102776 <HAL_DMA_Abort+0xd6>
 810273a:	687b      	ldr	r3, [r7, #4]
 810273c:	681b      	ldr	r3, [r3, #0]
 810273e:	4a67      	ldr	r2, [pc, #412]	; (81028dc <HAL_DMA_Abort+0x23c>)
 8102740:	4293      	cmp	r3, r2
 8102742:	d018      	beq.n	8102776 <HAL_DMA_Abort+0xd6>
 8102744:	687b      	ldr	r3, [r7, #4]
 8102746:	681b      	ldr	r3, [r3, #0]
 8102748:	4a65      	ldr	r2, [pc, #404]	; (81028e0 <HAL_DMA_Abort+0x240>)
 810274a:	4293      	cmp	r3, r2
 810274c:	d013      	beq.n	8102776 <HAL_DMA_Abort+0xd6>
 810274e:	687b      	ldr	r3, [r7, #4]
 8102750:	681b      	ldr	r3, [r3, #0]
 8102752:	4a64      	ldr	r2, [pc, #400]	; (81028e4 <HAL_DMA_Abort+0x244>)
 8102754:	4293      	cmp	r3, r2
 8102756:	d00e      	beq.n	8102776 <HAL_DMA_Abort+0xd6>
 8102758:	687b      	ldr	r3, [r7, #4]
 810275a:	681b      	ldr	r3, [r3, #0]
 810275c:	4a62      	ldr	r2, [pc, #392]	; (81028e8 <HAL_DMA_Abort+0x248>)
 810275e:	4293      	cmp	r3, r2
 8102760:	d009      	beq.n	8102776 <HAL_DMA_Abort+0xd6>
 8102762:	687b      	ldr	r3, [r7, #4]
 8102764:	681b      	ldr	r3, [r3, #0]
 8102766:	4a61      	ldr	r2, [pc, #388]	; (81028ec <HAL_DMA_Abort+0x24c>)
 8102768:	4293      	cmp	r3, r2
 810276a:	d004      	beq.n	8102776 <HAL_DMA_Abort+0xd6>
 810276c:	687b      	ldr	r3, [r7, #4]
 810276e:	681b      	ldr	r3, [r3, #0]
 8102770:	4a5f      	ldr	r2, [pc, #380]	; (81028f0 <HAL_DMA_Abort+0x250>)
 8102772:	4293      	cmp	r3, r2
 8102774:	d101      	bne.n	810277a <HAL_DMA_Abort+0xda>
 8102776:	2301      	movs	r3, #1
 8102778:	e000      	b.n	810277c <HAL_DMA_Abort+0xdc>
 810277a:	2300      	movs	r3, #0
 810277c:	2b00      	cmp	r3, #0
 810277e:	d013      	beq.n	81027a8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8102780:	687b      	ldr	r3, [r7, #4]
 8102782:	681b      	ldr	r3, [r3, #0]
 8102784:	681a      	ldr	r2, [r3, #0]
 8102786:	687b      	ldr	r3, [r7, #4]
 8102788:	681b      	ldr	r3, [r3, #0]
 810278a:	f022 021e 	bic.w	r2, r2, #30
 810278e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8102790:	687b      	ldr	r3, [r7, #4]
 8102792:	681b      	ldr	r3, [r3, #0]
 8102794:	695a      	ldr	r2, [r3, #20]
 8102796:	687b      	ldr	r3, [r7, #4]
 8102798:	681b      	ldr	r3, [r3, #0]
 810279a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 810279e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 81027a0:	687b      	ldr	r3, [r7, #4]
 81027a2:	681b      	ldr	r3, [r3, #0]
 81027a4:	617b      	str	r3, [r7, #20]
 81027a6:	e00a      	b.n	81027be <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 81027a8:	687b      	ldr	r3, [r7, #4]
 81027aa:	681b      	ldr	r3, [r3, #0]
 81027ac:	681a      	ldr	r2, [r3, #0]
 81027ae:	687b      	ldr	r3, [r7, #4]
 81027b0:	681b      	ldr	r3, [r3, #0]
 81027b2:	f022 020e 	bic.w	r2, r2, #14
 81027b6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 81027b8:	687b      	ldr	r3, [r7, #4]
 81027ba:	681b      	ldr	r3, [r3, #0]
 81027bc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81027be:	687b      	ldr	r3, [r7, #4]
 81027c0:	681b      	ldr	r3, [r3, #0]
 81027c2:	4a3c      	ldr	r2, [pc, #240]	; (81028b4 <HAL_DMA_Abort+0x214>)
 81027c4:	4293      	cmp	r3, r2
 81027c6:	d072      	beq.n	81028ae <HAL_DMA_Abort+0x20e>
 81027c8:	687b      	ldr	r3, [r7, #4]
 81027ca:	681b      	ldr	r3, [r3, #0]
 81027cc:	4a3a      	ldr	r2, [pc, #232]	; (81028b8 <HAL_DMA_Abort+0x218>)
 81027ce:	4293      	cmp	r3, r2
 81027d0:	d06d      	beq.n	81028ae <HAL_DMA_Abort+0x20e>
 81027d2:	687b      	ldr	r3, [r7, #4]
 81027d4:	681b      	ldr	r3, [r3, #0]
 81027d6:	4a39      	ldr	r2, [pc, #228]	; (81028bc <HAL_DMA_Abort+0x21c>)
 81027d8:	4293      	cmp	r3, r2
 81027da:	d068      	beq.n	81028ae <HAL_DMA_Abort+0x20e>
 81027dc:	687b      	ldr	r3, [r7, #4]
 81027de:	681b      	ldr	r3, [r3, #0]
 81027e0:	4a37      	ldr	r2, [pc, #220]	; (81028c0 <HAL_DMA_Abort+0x220>)
 81027e2:	4293      	cmp	r3, r2
 81027e4:	d063      	beq.n	81028ae <HAL_DMA_Abort+0x20e>
 81027e6:	687b      	ldr	r3, [r7, #4]
 81027e8:	681b      	ldr	r3, [r3, #0]
 81027ea:	4a36      	ldr	r2, [pc, #216]	; (81028c4 <HAL_DMA_Abort+0x224>)
 81027ec:	4293      	cmp	r3, r2
 81027ee:	d05e      	beq.n	81028ae <HAL_DMA_Abort+0x20e>
 81027f0:	687b      	ldr	r3, [r7, #4]
 81027f2:	681b      	ldr	r3, [r3, #0]
 81027f4:	4a34      	ldr	r2, [pc, #208]	; (81028c8 <HAL_DMA_Abort+0x228>)
 81027f6:	4293      	cmp	r3, r2
 81027f8:	d059      	beq.n	81028ae <HAL_DMA_Abort+0x20e>
 81027fa:	687b      	ldr	r3, [r7, #4]
 81027fc:	681b      	ldr	r3, [r3, #0]
 81027fe:	4a33      	ldr	r2, [pc, #204]	; (81028cc <HAL_DMA_Abort+0x22c>)
 8102800:	4293      	cmp	r3, r2
 8102802:	d054      	beq.n	81028ae <HAL_DMA_Abort+0x20e>
 8102804:	687b      	ldr	r3, [r7, #4]
 8102806:	681b      	ldr	r3, [r3, #0]
 8102808:	4a31      	ldr	r2, [pc, #196]	; (81028d0 <HAL_DMA_Abort+0x230>)
 810280a:	4293      	cmp	r3, r2
 810280c:	d04f      	beq.n	81028ae <HAL_DMA_Abort+0x20e>
 810280e:	687b      	ldr	r3, [r7, #4]
 8102810:	681b      	ldr	r3, [r3, #0]
 8102812:	4a30      	ldr	r2, [pc, #192]	; (81028d4 <HAL_DMA_Abort+0x234>)
 8102814:	4293      	cmp	r3, r2
 8102816:	d04a      	beq.n	81028ae <HAL_DMA_Abort+0x20e>
 8102818:	687b      	ldr	r3, [r7, #4]
 810281a:	681b      	ldr	r3, [r3, #0]
 810281c:	4a2e      	ldr	r2, [pc, #184]	; (81028d8 <HAL_DMA_Abort+0x238>)
 810281e:	4293      	cmp	r3, r2
 8102820:	d045      	beq.n	81028ae <HAL_DMA_Abort+0x20e>
 8102822:	687b      	ldr	r3, [r7, #4]
 8102824:	681b      	ldr	r3, [r3, #0]
 8102826:	4a2d      	ldr	r2, [pc, #180]	; (81028dc <HAL_DMA_Abort+0x23c>)
 8102828:	4293      	cmp	r3, r2
 810282a:	d040      	beq.n	81028ae <HAL_DMA_Abort+0x20e>
 810282c:	687b      	ldr	r3, [r7, #4]
 810282e:	681b      	ldr	r3, [r3, #0]
 8102830:	4a2b      	ldr	r2, [pc, #172]	; (81028e0 <HAL_DMA_Abort+0x240>)
 8102832:	4293      	cmp	r3, r2
 8102834:	d03b      	beq.n	81028ae <HAL_DMA_Abort+0x20e>
 8102836:	687b      	ldr	r3, [r7, #4]
 8102838:	681b      	ldr	r3, [r3, #0]
 810283a:	4a2a      	ldr	r2, [pc, #168]	; (81028e4 <HAL_DMA_Abort+0x244>)
 810283c:	4293      	cmp	r3, r2
 810283e:	d036      	beq.n	81028ae <HAL_DMA_Abort+0x20e>
 8102840:	687b      	ldr	r3, [r7, #4]
 8102842:	681b      	ldr	r3, [r3, #0]
 8102844:	4a28      	ldr	r2, [pc, #160]	; (81028e8 <HAL_DMA_Abort+0x248>)
 8102846:	4293      	cmp	r3, r2
 8102848:	d031      	beq.n	81028ae <HAL_DMA_Abort+0x20e>
 810284a:	687b      	ldr	r3, [r7, #4]
 810284c:	681b      	ldr	r3, [r3, #0]
 810284e:	4a27      	ldr	r2, [pc, #156]	; (81028ec <HAL_DMA_Abort+0x24c>)
 8102850:	4293      	cmp	r3, r2
 8102852:	d02c      	beq.n	81028ae <HAL_DMA_Abort+0x20e>
 8102854:	687b      	ldr	r3, [r7, #4]
 8102856:	681b      	ldr	r3, [r3, #0]
 8102858:	4a25      	ldr	r2, [pc, #148]	; (81028f0 <HAL_DMA_Abort+0x250>)
 810285a:	4293      	cmp	r3, r2
 810285c:	d027      	beq.n	81028ae <HAL_DMA_Abort+0x20e>
 810285e:	687b      	ldr	r3, [r7, #4]
 8102860:	681b      	ldr	r3, [r3, #0]
 8102862:	4a24      	ldr	r2, [pc, #144]	; (81028f4 <HAL_DMA_Abort+0x254>)
 8102864:	4293      	cmp	r3, r2
 8102866:	d022      	beq.n	81028ae <HAL_DMA_Abort+0x20e>
 8102868:	687b      	ldr	r3, [r7, #4]
 810286a:	681b      	ldr	r3, [r3, #0]
 810286c:	4a22      	ldr	r2, [pc, #136]	; (81028f8 <HAL_DMA_Abort+0x258>)
 810286e:	4293      	cmp	r3, r2
 8102870:	d01d      	beq.n	81028ae <HAL_DMA_Abort+0x20e>
 8102872:	687b      	ldr	r3, [r7, #4]
 8102874:	681b      	ldr	r3, [r3, #0]
 8102876:	4a21      	ldr	r2, [pc, #132]	; (81028fc <HAL_DMA_Abort+0x25c>)
 8102878:	4293      	cmp	r3, r2
 810287a:	d018      	beq.n	81028ae <HAL_DMA_Abort+0x20e>
 810287c:	687b      	ldr	r3, [r7, #4]
 810287e:	681b      	ldr	r3, [r3, #0]
 8102880:	4a1f      	ldr	r2, [pc, #124]	; (8102900 <HAL_DMA_Abort+0x260>)
 8102882:	4293      	cmp	r3, r2
 8102884:	d013      	beq.n	81028ae <HAL_DMA_Abort+0x20e>
 8102886:	687b      	ldr	r3, [r7, #4]
 8102888:	681b      	ldr	r3, [r3, #0]
 810288a:	4a1e      	ldr	r2, [pc, #120]	; (8102904 <HAL_DMA_Abort+0x264>)
 810288c:	4293      	cmp	r3, r2
 810288e:	d00e      	beq.n	81028ae <HAL_DMA_Abort+0x20e>
 8102890:	687b      	ldr	r3, [r7, #4]
 8102892:	681b      	ldr	r3, [r3, #0]
 8102894:	4a1c      	ldr	r2, [pc, #112]	; (8102908 <HAL_DMA_Abort+0x268>)
 8102896:	4293      	cmp	r3, r2
 8102898:	d009      	beq.n	81028ae <HAL_DMA_Abort+0x20e>
 810289a:	687b      	ldr	r3, [r7, #4]
 810289c:	681b      	ldr	r3, [r3, #0]
 810289e:	4a1b      	ldr	r2, [pc, #108]	; (810290c <HAL_DMA_Abort+0x26c>)
 81028a0:	4293      	cmp	r3, r2
 81028a2:	d004      	beq.n	81028ae <HAL_DMA_Abort+0x20e>
 81028a4:	687b      	ldr	r3, [r7, #4]
 81028a6:	681b      	ldr	r3, [r3, #0]
 81028a8:	4a19      	ldr	r2, [pc, #100]	; (8102910 <HAL_DMA_Abort+0x270>)
 81028aa:	4293      	cmp	r3, r2
 81028ac:	d132      	bne.n	8102914 <HAL_DMA_Abort+0x274>
 81028ae:	2301      	movs	r3, #1
 81028b0:	e031      	b.n	8102916 <HAL_DMA_Abort+0x276>
 81028b2:	bf00      	nop
 81028b4:	40020010 	.word	0x40020010
 81028b8:	40020028 	.word	0x40020028
 81028bc:	40020040 	.word	0x40020040
 81028c0:	40020058 	.word	0x40020058
 81028c4:	40020070 	.word	0x40020070
 81028c8:	40020088 	.word	0x40020088
 81028cc:	400200a0 	.word	0x400200a0
 81028d0:	400200b8 	.word	0x400200b8
 81028d4:	40020410 	.word	0x40020410
 81028d8:	40020428 	.word	0x40020428
 81028dc:	40020440 	.word	0x40020440
 81028e0:	40020458 	.word	0x40020458
 81028e4:	40020470 	.word	0x40020470
 81028e8:	40020488 	.word	0x40020488
 81028ec:	400204a0 	.word	0x400204a0
 81028f0:	400204b8 	.word	0x400204b8
 81028f4:	58025408 	.word	0x58025408
 81028f8:	5802541c 	.word	0x5802541c
 81028fc:	58025430 	.word	0x58025430
 8102900:	58025444 	.word	0x58025444
 8102904:	58025458 	.word	0x58025458
 8102908:	5802546c 	.word	0x5802546c
 810290c:	58025480 	.word	0x58025480
 8102910:	58025494 	.word	0x58025494
 8102914:	2300      	movs	r3, #0
 8102916:	2b00      	cmp	r3, #0
 8102918:	d007      	beq.n	810292a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 810291a:	687b      	ldr	r3, [r7, #4]
 810291c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810291e:	681a      	ldr	r2, [r3, #0]
 8102920:	687b      	ldr	r3, [r7, #4]
 8102922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102924:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8102928:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 810292a:	687b      	ldr	r3, [r7, #4]
 810292c:	681b      	ldr	r3, [r3, #0]
 810292e:	4a6d      	ldr	r2, [pc, #436]	; (8102ae4 <HAL_DMA_Abort+0x444>)
 8102930:	4293      	cmp	r3, r2
 8102932:	d04a      	beq.n	81029ca <HAL_DMA_Abort+0x32a>
 8102934:	687b      	ldr	r3, [r7, #4]
 8102936:	681b      	ldr	r3, [r3, #0]
 8102938:	4a6b      	ldr	r2, [pc, #428]	; (8102ae8 <HAL_DMA_Abort+0x448>)
 810293a:	4293      	cmp	r3, r2
 810293c:	d045      	beq.n	81029ca <HAL_DMA_Abort+0x32a>
 810293e:	687b      	ldr	r3, [r7, #4]
 8102940:	681b      	ldr	r3, [r3, #0]
 8102942:	4a6a      	ldr	r2, [pc, #424]	; (8102aec <HAL_DMA_Abort+0x44c>)
 8102944:	4293      	cmp	r3, r2
 8102946:	d040      	beq.n	81029ca <HAL_DMA_Abort+0x32a>
 8102948:	687b      	ldr	r3, [r7, #4]
 810294a:	681b      	ldr	r3, [r3, #0]
 810294c:	4a68      	ldr	r2, [pc, #416]	; (8102af0 <HAL_DMA_Abort+0x450>)
 810294e:	4293      	cmp	r3, r2
 8102950:	d03b      	beq.n	81029ca <HAL_DMA_Abort+0x32a>
 8102952:	687b      	ldr	r3, [r7, #4]
 8102954:	681b      	ldr	r3, [r3, #0]
 8102956:	4a67      	ldr	r2, [pc, #412]	; (8102af4 <HAL_DMA_Abort+0x454>)
 8102958:	4293      	cmp	r3, r2
 810295a:	d036      	beq.n	81029ca <HAL_DMA_Abort+0x32a>
 810295c:	687b      	ldr	r3, [r7, #4]
 810295e:	681b      	ldr	r3, [r3, #0]
 8102960:	4a65      	ldr	r2, [pc, #404]	; (8102af8 <HAL_DMA_Abort+0x458>)
 8102962:	4293      	cmp	r3, r2
 8102964:	d031      	beq.n	81029ca <HAL_DMA_Abort+0x32a>
 8102966:	687b      	ldr	r3, [r7, #4]
 8102968:	681b      	ldr	r3, [r3, #0]
 810296a:	4a64      	ldr	r2, [pc, #400]	; (8102afc <HAL_DMA_Abort+0x45c>)
 810296c:	4293      	cmp	r3, r2
 810296e:	d02c      	beq.n	81029ca <HAL_DMA_Abort+0x32a>
 8102970:	687b      	ldr	r3, [r7, #4]
 8102972:	681b      	ldr	r3, [r3, #0]
 8102974:	4a62      	ldr	r2, [pc, #392]	; (8102b00 <HAL_DMA_Abort+0x460>)
 8102976:	4293      	cmp	r3, r2
 8102978:	d027      	beq.n	81029ca <HAL_DMA_Abort+0x32a>
 810297a:	687b      	ldr	r3, [r7, #4]
 810297c:	681b      	ldr	r3, [r3, #0]
 810297e:	4a61      	ldr	r2, [pc, #388]	; (8102b04 <HAL_DMA_Abort+0x464>)
 8102980:	4293      	cmp	r3, r2
 8102982:	d022      	beq.n	81029ca <HAL_DMA_Abort+0x32a>
 8102984:	687b      	ldr	r3, [r7, #4]
 8102986:	681b      	ldr	r3, [r3, #0]
 8102988:	4a5f      	ldr	r2, [pc, #380]	; (8102b08 <HAL_DMA_Abort+0x468>)
 810298a:	4293      	cmp	r3, r2
 810298c:	d01d      	beq.n	81029ca <HAL_DMA_Abort+0x32a>
 810298e:	687b      	ldr	r3, [r7, #4]
 8102990:	681b      	ldr	r3, [r3, #0]
 8102992:	4a5e      	ldr	r2, [pc, #376]	; (8102b0c <HAL_DMA_Abort+0x46c>)
 8102994:	4293      	cmp	r3, r2
 8102996:	d018      	beq.n	81029ca <HAL_DMA_Abort+0x32a>
 8102998:	687b      	ldr	r3, [r7, #4]
 810299a:	681b      	ldr	r3, [r3, #0]
 810299c:	4a5c      	ldr	r2, [pc, #368]	; (8102b10 <HAL_DMA_Abort+0x470>)
 810299e:	4293      	cmp	r3, r2
 81029a0:	d013      	beq.n	81029ca <HAL_DMA_Abort+0x32a>
 81029a2:	687b      	ldr	r3, [r7, #4]
 81029a4:	681b      	ldr	r3, [r3, #0]
 81029a6:	4a5b      	ldr	r2, [pc, #364]	; (8102b14 <HAL_DMA_Abort+0x474>)
 81029a8:	4293      	cmp	r3, r2
 81029aa:	d00e      	beq.n	81029ca <HAL_DMA_Abort+0x32a>
 81029ac:	687b      	ldr	r3, [r7, #4]
 81029ae:	681b      	ldr	r3, [r3, #0]
 81029b0:	4a59      	ldr	r2, [pc, #356]	; (8102b18 <HAL_DMA_Abort+0x478>)
 81029b2:	4293      	cmp	r3, r2
 81029b4:	d009      	beq.n	81029ca <HAL_DMA_Abort+0x32a>
 81029b6:	687b      	ldr	r3, [r7, #4]
 81029b8:	681b      	ldr	r3, [r3, #0]
 81029ba:	4a58      	ldr	r2, [pc, #352]	; (8102b1c <HAL_DMA_Abort+0x47c>)
 81029bc:	4293      	cmp	r3, r2
 81029be:	d004      	beq.n	81029ca <HAL_DMA_Abort+0x32a>
 81029c0:	687b      	ldr	r3, [r7, #4]
 81029c2:	681b      	ldr	r3, [r3, #0]
 81029c4:	4a56      	ldr	r2, [pc, #344]	; (8102b20 <HAL_DMA_Abort+0x480>)
 81029c6:	4293      	cmp	r3, r2
 81029c8:	d108      	bne.n	81029dc <HAL_DMA_Abort+0x33c>
 81029ca:	687b      	ldr	r3, [r7, #4]
 81029cc:	681b      	ldr	r3, [r3, #0]
 81029ce:	681a      	ldr	r2, [r3, #0]
 81029d0:	687b      	ldr	r3, [r7, #4]
 81029d2:	681b      	ldr	r3, [r3, #0]
 81029d4:	f022 0201 	bic.w	r2, r2, #1
 81029d8:	601a      	str	r2, [r3, #0]
 81029da:	e007      	b.n	81029ec <HAL_DMA_Abort+0x34c>
 81029dc:	687b      	ldr	r3, [r7, #4]
 81029de:	681b      	ldr	r3, [r3, #0]
 81029e0:	681a      	ldr	r2, [r3, #0]
 81029e2:	687b      	ldr	r3, [r7, #4]
 81029e4:	681b      	ldr	r3, [r3, #0]
 81029e6:	f022 0201 	bic.w	r2, r2, #1
 81029ea:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 81029ec:	e013      	b.n	8102a16 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 81029ee:	f7ff fd27 	bl	8102440 <HAL_GetTick>
 81029f2:	4602      	mov	r2, r0
 81029f4:	693b      	ldr	r3, [r7, #16]
 81029f6:	1ad3      	subs	r3, r2, r3
 81029f8:	2b05      	cmp	r3, #5
 81029fa:	d90c      	bls.n	8102a16 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 81029fc:	687b      	ldr	r3, [r7, #4]
 81029fe:	2220      	movs	r2, #32
 8102a00:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8102a02:	687b      	ldr	r3, [r7, #4]
 8102a04:	2203      	movs	r2, #3
 8102a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8102a0a:	687b      	ldr	r3, [r7, #4]
 8102a0c:	2200      	movs	r2, #0
 8102a0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8102a12:	2301      	movs	r3, #1
 8102a14:	e12d      	b.n	8102c72 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8102a16:	697b      	ldr	r3, [r7, #20]
 8102a18:	681b      	ldr	r3, [r3, #0]
 8102a1a:	f003 0301 	and.w	r3, r3, #1
 8102a1e:	2b00      	cmp	r3, #0
 8102a20:	d1e5      	bne.n	81029ee <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8102a22:	687b      	ldr	r3, [r7, #4]
 8102a24:	681b      	ldr	r3, [r3, #0]
 8102a26:	4a2f      	ldr	r2, [pc, #188]	; (8102ae4 <HAL_DMA_Abort+0x444>)
 8102a28:	4293      	cmp	r3, r2
 8102a2a:	d04a      	beq.n	8102ac2 <HAL_DMA_Abort+0x422>
 8102a2c:	687b      	ldr	r3, [r7, #4]
 8102a2e:	681b      	ldr	r3, [r3, #0]
 8102a30:	4a2d      	ldr	r2, [pc, #180]	; (8102ae8 <HAL_DMA_Abort+0x448>)
 8102a32:	4293      	cmp	r3, r2
 8102a34:	d045      	beq.n	8102ac2 <HAL_DMA_Abort+0x422>
 8102a36:	687b      	ldr	r3, [r7, #4]
 8102a38:	681b      	ldr	r3, [r3, #0]
 8102a3a:	4a2c      	ldr	r2, [pc, #176]	; (8102aec <HAL_DMA_Abort+0x44c>)
 8102a3c:	4293      	cmp	r3, r2
 8102a3e:	d040      	beq.n	8102ac2 <HAL_DMA_Abort+0x422>
 8102a40:	687b      	ldr	r3, [r7, #4]
 8102a42:	681b      	ldr	r3, [r3, #0]
 8102a44:	4a2a      	ldr	r2, [pc, #168]	; (8102af0 <HAL_DMA_Abort+0x450>)
 8102a46:	4293      	cmp	r3, r2
 8102a48:	d03b      	beq.n	8102ac2 <HAL_DMA_Abort+0x422>
 8102a4a:	687b      	ldr	r3, [r7, #4]
 8102a4c:	681b      	ldr	r3, [r3, #0]
 8102a4e:	4a29      	ldr	r2, [pc, #164]	; (8102af4 <HAL_DMA_Abort+0x454>)
 8102a50:	4293      	cmp	r3, r2
 8102a52:	d036      	beq.n	8102ac2 <HAL_DMA_Abort+0x422>
 8102a54:	687b      	ldr	r3, [r7, #4]
 8102a56:	681b      	ldr	r3, [r3, #0]
 8102a58:	4a27      	ldr	r2, [pc, #156]	; (8102af8 <HAL_DMA_Abort+0x458>)
 8102a5a:	4293      	cmp	r3, r2
 8102a5c:	d031      	beq.n	8102ac2 <HAL_DMA_Abort+0x422>
 8102a5e:	687b      	ldr	r3, [r7, #4]
 8102a60:	681b      	ldr	r3, [r3, #0]
 8102a62:	4a26      	ldr	r2, [pc, #152]	; (8102afc <HAL_DMA_Abort+0x45c>)
 8102a64:	4293      	cmp	r3, r2
 8102a66:	d02c      	beq.n	8102ac2 <HAL_DMA_Abort+0x422>
 8102a68:	687b      	ldr	r3, [r7, #4]
 8102a6a:	681b      	ldr	r3, [r3, #0]
 8102a6c:	4a24      	ldr	r2, [pc, #144]	; (8102b00 <HAL_DMA_Abort+0x460>)
 8102a6e:	4293      	cmp	r3, r2
 8102a70:	d027      	beq.n	8102ac2 <HAL_DMA_Abort+0x422>
 8102a72:	687b      	ldr	r3, [r7, #4]
 8102a74:	681b      	ldr	r3, [r3, #0]
 8102a76:	4a23      	ldr	r2, [pc, #140]	; (8102b04 <HAL_DMA_Abort+0x464>)
 8102a78:	4293      	cmp	r3, r2
 8102a7a:	d022      	beq.n	8102ac2 <HAL_DMA_Abort+0x422>
 8102a7c:	687b      	ldr	r3, [r7, #4]
 8102a7e:	681b      	ldr	r3, [r3, #0]
 8102a80:	4a21      	ldr	r2, [pc, #132]	; (8102b08 <HAL_DMA_Abort+0x468>)
 8102a82:	4293      	cmp	r3, r2
 8102a84:	d01d      	beq.n	8102ac2 <HAL_DMA_Abort+0x422>
 8102a86:	687b      	ldr	r3, [r7, #4]
 8102a88:	681b      	ldr	r3, [r3, #0]
 8102a8a:	4a20      	ldr	r2, [pc, #128]	; (8102b0c <HAL_DMA_Abort+0x46c>)
 8102a8c:	4293      	cmp	r3, r2
 8102a8e:	d018      	beq.n	8102ac2 <HAL_DMA_Abort+0x422>
 8102a90:	687b      	ldr	r3, [r7, #4]
 8102a92:	681b      	ldr	r3, [r3, #0]
 8102a94:	4a1e      	ldr	r2, [pc, #120]	; (8102b10 <HAL_DMA_Abort+0x470>)
 8102a96:	4293      	cmp	r3, r2
 8102a98:	d013      	beq.n	8102ac2 <HAL_DMA_Abort+0x422>
 8102a9a:	687b      	ldr	r3, [r7, #4]
 8102a9c:	681b      	ldr	r3, [r3, #0]
 8102a9e:	4a1d      	ldr	r2, [pc, #116]	; (8102b14 <HAL_DMA_Abort+0x474>)
 8102aa0:	4293      	cmp	r3, r2
 8102aa2:	d00e      	beq.n	8102ac2 <HAL_DMA_Abort+0x422>
 8102aa4:	687b      	ldr	r3, [r7, #4]
 8102aa6:	681b      	ldr	r3, [r3, #0]
 8102aa8:	4a1b      	ldr	r2, [pc, #108]	; (8102b18 <HAL_DMA_Abort+0x478>)
 8102aaa:	4293      	cmp	r3, r2
 8102aac:	d009      	beq.n	8102ac2 <HAL_DMA_Abort+0x422>
 8102aae:	687b      	ldr	r3, [r7, #4]
 8102ab0:	681b      	ldr	r3, [r3, #0]
 8102ab2:	4a1a      	ldr	r2, [pc, #104]	; (8102b1c <HAL_DMA_Abort+0x47c>)
 8102ab4:	4293      	cmp	r3, r2
 8102ab6:	d004      	beq.n	8102ac2 <HAL_DMA_Abort+0x422>
 8102ab8:	687b      	ldr	r3, [r7, #4]
 8102aba:	681b      	ldr	r3, [r3, #0]
 8102abc:	4a18      	ldr	r2, [pc, #96]	; (8102b20 <HAL_DMA_Abort+0x480>)
 8102abe:	4293      	cmp	r3, r2
 8102ac0:	d101      	bne.n	8102ac6 <HAL_DMA_Abort+0x426>
 8102ac2:	2301      	movs	r3, #1
 8102ac4:	e000      	b.n	8102ac8 <HAL_DMA_Abort+0x428>
 8102ac6:	2300      	movs	r3, #0
 8102ac8:	2b00      	cmp	r3, #0
 8102aca:	d02b      	beq.n	8102b24 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8102acc:	687b      	ldr	r3, [r7, #4]
 8102ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102ad0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8102ad2:	687b      	ldr	r3, [r7, #4]
 8102ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102ad6:	f003 031f 	and.w	r3, r3, #31
 8102ada:	223f      	movs	r2, #63	; 0x3f
 8102adc:	409a      	lsls	r2, r3
 8102ade:	68bb      	ldr	r3, [r7, #8]
 8102ae0:	609a      	str	r2, [r3, #8]
 8102ae2:	e02a      	b.n	8102b3a <HAL_DMA_Abort+0x49a>
 8102ae4:	40020010 	.word	0x40020010
 8102ae8:	40020028 	.word	0x40020028
 8102aec:	40020040 	.word	0x40020040
 8102af0:	40020058 	.word	0x40020058
 8102af4:	40020070 	.word	0x40020070
 8102af8:	40020088 	.word	0x40020088
 8102afc:	400200a0 	.word	0x400200a0
 8102b00:	400200b8 	.word	0x400200b8
 8102b04:	40020410 	.word	0x40020410
 8102b08:	40020428 	.word	0x40020428
 8102b0c:	40020440 	.word	0x40020440
 8102b10:	40020458 	.word	0x40020458
 8102b14:	40020470 	.word	0x40020470
 8102b18:	40020488 	.word	0x40020488
 8102b1c:	400204a0 	.word	0x400204a0
 8102b20:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8102b24:	687b      	ldr	r3, [r7, #4]
 8102b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102b28:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8102b2a:	687b      	ldr	r3, [r7, #4]
 8102b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102b2e:	f003 031f 	and.w	r3, r3, #31
 8102b32:	2201      	movs	r2, #1
 8102b34:	409a      	lsls	r2, r3
 8102b36:	68fb      	ldr	r3, [r7, #12]
 8102b38:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8102b3a:	687b      	ldr	r3, [r7, #4]
 8102b3c:	681b      	ldr	r3, [r3, #0]
 8102b3e:	4a4f      	ldr	r2, [pc, #316]	; (8102c7c <HAL_DMA_Abort+0x5dc>)
 8102b40:	4293      	cmp	r3, r2
 8102b42:	d072      	beq.n	8102c2a <HAL_DMA_Abort+0x58a>
 8102b44:	687b      	ldr	r3, [r7, #4]
 8102b46:	681b      	ldr	r3, [r3, #0]
 8102b48:	4a4d      	ldr	r2, [pc, #308]	; (8102c80 <HAL_DMA_Abort+0x5e0>)
 8102b4a:	4293      	cmp	r3, r2
 8102b4c:	d06d      	beq.n	8102c2a <HAL_DMA_Abort+0x58a>
 8102b4e:	687b      	ldr	r3, [r7, #4]
 8102b50:	681b      	ldr	r3, [r3, #0]
 8102b52:	4a4c      	ldr	r2, [pc, #304]	; (8102c84 <HAL_DMA_Abort+0x5e4>)
 8102b54:	4293      	cmp	r3, r2
 8102b56:	d068      	beq.n	8102c2a <HAL_DMA_Abort+0x58a>
 8102b58:	687b      	ldr	r3, [r7, #4]
 8102b5a:	681b      	ldr	r3, [r3, #0]
 8102b5c:	4a4a      	ldr	r2, [pc, #296]	; (8102c88 <HAL_DMA_Abort+0x5e8>)
 8102b5e:	4293      	cmp	r3, r2
 8102b60:	d063      	beq.n	8102c2a <HAL_DMA_Abort+0x58a>
 8102b62:	687b      	ldr	r3, [r7, #4]
 8102b64:	681b      	ldr	r3, [r3, #0]
 8102b66:	4a49      	ldr	r2, [pc, #292]	; (8102c8c <HAL_DMA_Abort+0x5ec>)
 8102b68:	4293      	cmp	r3, r2
 8102b6a:	d05e      	beq.n	8102c2a <HAL_DMA_Abort+0x58a>
 8102b6c:	687b      	ldr	r3, [r7, #4]
 8102b6e:	681b      	ldr	r3, [r3, #0]
 8102b70:	4a47      	ldr	r2, [pc, #284]	; (8102c90 <HAL_DMA_Abort+0x5f0>)
 8102b72:	4293      	cmp	r3, r2
 8102b74:	d059      	beq.n	8102c2a <HAL_DMA_Abort+0x58a>
 8102b76:	687b      	ldr	r3, [r7, #4]
 8102b78:	681b      	ldr	r3, [r3, #0]
 8102b7a:	4a46      	ldr	r2, [pc, #280]	; (8102c94 <HAL_DMA_Abort+0x5f4>)
 8102b7c:	4293      	cmp	r3, r2
 8102b7e:	d054      	beq.n	8102c2a <HAL_DMA_Abort+0x58a>
 8102b80:	687b      	ldr	r3, [r7, #4]
 8102b82:	681b      	ldr	r3, [r3, #0]
 8102b84:	4a44      	ldr	r2, [pc, #272]	; (8102c98 <HAL_DMA_Abort+0x5f8>)
 8102b86:	4293      	cmp	r3, r2
 8102b88:	d04f      	beq.n	8102c2a <HAL_DMA_Abort+0x58a>
 8102b8a:	687b      	ldr	r3, [r7, #4]
 8102b8c:	681b      	ldr	r3, [r3, #0]
 8102b8e:	4a43      	ldr	r2, [pc, #268]	; (8102c9c <HAL_DMA_Abort+0x5fc>)
 8102b90:	4293      	cmp	r3, r2
 8102b92:	d04a      	beq.n	8102c2a <HAL_DMA_Abort+0x58a>
 8102b94:	687b      	ldr	r3, [r7, #4]
 8102b96:	681b      	ldr	r3, [r3, #0]
 8102b98:	4a41      	ldr	r2, [pc, #260]	; (8102ca0 <HAL_DMA_Abort+0x600>)
 8102b9a:	4293      	cmp	r3, r2
 8102b9c:	d045      	beq.n	8102c2a <HAL_DMA_Abort+0x58a>
 8102b9e:	687b      	ldr	r3, [r7, #4]
 8102ba0:	681b      	ldr	r3, [r3, #0]
 8102ba2:	4a40      	ldr	r2, [pc, #256]	; (8102ca4 <HAL_DMA_Abort+0x604>)
 8102ba4:	4293      	cmp	r3, r2
 8102ba6:	d040      	beq.n	8102c2a <HAL_DMA_Abort+0x58a>
 8102ba8:	687b      	ldr	r3, [r7, #4]
 8102baa:	681b      	ldr	r3, [r3, #0]
 8102bac:	4a3e      	ldr	r2, [pc, #248]	; (8102ca8 <HAL_DMA_Abort+0x608>)
 8102bae:	4293      	cmp	r3, r2
 8102bb0:	d03b      	beq.n	8102c2a <HAL_DMA_Abort+0x58a>
 8102bb2:	687b      	ldr	r3, [r7, #4]
 8102bb4:	681b      	ldr	r3, [r3, #0]
 8102bb6:	4a3d      	ldr	r2, [pc, #244]	; (8102cac <HAL_DMA_Abort+0x60c>)
 8102bb8:	4293      	cmp	r3, r2
 8102bba:	d036      	beq.n	8102c2a <HAL_DMA_Abort+0x58a>
 8102bbc:	687b      	ldr	r3, [r7, #4]
 8102bbe:	681b      	ldr	r3, [r3, #0]
 8102bc0:	4a3b      	ldr	r2, [pc, #236]	; (8102cb0 <HAL_DMA_Abort+0x610>)
 8102bc2:	4293      	cmp	r3, r2
 8102bc4:	d031      	beq.n	8102c2a <HAL_DMA_Abort+0x58a>
 8102bc6:	687b      	ldr	r3, [r7, #4]
 8102bc8:	681b      	ldr	r3, [r3, #0]
 8102bca:	4a3a      	ldr	r2, [pc, #232]	; (8102cb4 <HAL_DMA_Abort+0x614>)
 8102bcc:	4293      	cmp	r3, r2
 8102bce:	d02c      	beq.n	8102c2a <HAL_DMA_Abort+0x58a>
 8102bd0:	687b      	ldr	r3, [r7, #4]
 8102bd2:	681b      	ldr	r3, [r3, #0]
 8102bd4:	4a38      	ldr	r2, [pc, #224]	; (8102cb8 <HAL_DMA_Abort+0x618>)
 8102bd6:	4293      	cmp	r3, r2
 8102bd8:	d027      	beq.n	8102c2a <HAL_DMA_Abort+0x58a>
 8102bda:	687b      	ldr	r3, [r7, #4]
 8102bdc:	681b      	ldr	r3, [r3, #0]
 8102bde:	4a37      	ldr	r2, [pc, #220]	; (8102cbc <HAL_DMA_Abort+0x61c>)
 8102be0:	4293      	cmp	r3, r2
 8102be2:	d022      	beq.n	8102c2a <HAL_DMA_Abort+0x58a>
 8102be4:	687b      	ldr	r3, [r7, #4]
 8102be6:	681b      	ldr	r3, [r3, #0]
 8102be8:	4a35      	ldr	r2, [pc, #212]	; (8102cc0 <HAL_DMA_Abort+0x620>)
 8102bea:	4293      	cmp	r3, r2
 8102bec:	d01d      	beq.n	8102c2a <HAL_DMA_Abort+0x58a>
 8102bee:	687b      	ldr	r3, [r7, #4]
 8102bf0:	681b      	ldr	r3, [r3, #0]
 8102bf2:	4a34      	ldr	r2, [pc, #208]	; (8102cc4 <HAL_DMA_Abort+0x624>)
 8102bf4:	4293      	cmp	r3, r2
 8102bf6:	d018      	beq.n	8102c2a <HAL_DMA_Abort+0x58a>
 8102bf8:	687b      	ldr	r3, [r7, #4]
 8102bfa:	681b      	ldr	r3, [r3, #0]
 8102bfc:	4a32      	ldr	r2, [pc, #200]	; (8102cc8 <HAL_DMA_Abort+0x628>)
 8102bfe:	4293      	cmp	r3, r2
 8102c00:	d013      	beq.n	8102c2a <HAL_DMA_Abort+0x58a>
 8102c02:	687b      	ldr	r3, [r7, #4]
 8102c04:	681b      	ldr	r3, [r3, #0]
 8102c06:	4a31      	ldr	r2, [pc, #196]	; (8102ccc <HAL_DMA_Abort+0x62c>)
 8102c08:	4293      	cmp	r3, r2
 8102c0a:	d00e      	beq.n	8102c2a <HAL_DMA_Abort+0x58a>
 8102c0c:	687b      	ldr	r3, [r7, #4]
 8102c0e:	681b      	ldr	r3, [r3, #0]
 8102c10:	4a2f      	ldr	r2, [pc, #188]	; (8102cd0 <HAL_DMA_Abort+0x630>)
 8102c12:	4293      	cmp	r3, r2
 8102c14:	d009      	beq.n	8102c2a <HAL_DMA_Abort+0x58a>
 8102c16:	687b      	ldr	r3, [r7, #4]
 8102c18:	681b      	ldr	r3, [r3, #0]
 8102c1a:	4a2e      	ldr	r2, [pc, #184]	; (8102cd4 <HAL_DMA_Abort+0x634>)
 8102c1c:	4293      	cmp	r3, r2
 8102c1e:	d004      	beq.n	8102c2a <HAL_DMA_Abort+0x58a>
 8102c20:	687b      	ldr	r3, [r7, #4]
 8102c22:	681b      	ldr	r3, [r3, #0]
 8102c24:	4a2c      	ldr	r2, [pc, #176]	; (8102cd8 <HAL_DMA_Abort+0x638>)
 8102c26:	4293      	cmp	r3, r2
 8102c28:	d101      	bne.n	8102c2e <HAL_DMA_Abort+0x58e>
 8102c2a:	2301      	movs	r3, #1
 8102c2c:	e000      	b.n	8102c30 <HAL_DMA_Abort+0x590>
 8102c2e:	2300      	movs	r3, #0
 8102c30:	2b00      	cmp	r3, #0
 8102c32:	d015      	beq.n	8102c60 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8102c34:	687b      	ldr	r3, [r7, #4]
 8102c36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102c38:	687a      	ldr	r2, [r7, #4]
 8102c3a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8102c3c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8102c3e:	687b      	ldr	r3, [r7, #4]
 8102c40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102c42:	2b00      	cmp	r3, #0
 8102c44:	d00c      	beq.n	8102c60 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8102c46:	687b      	ldr	r3, [r7, #4]
 8102c48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102c4a:	681a      	ldr	r2, [r3, #0]
 8102c4c:	687b      	ldr	r3, [r7, #4]
 8102c4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102c50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8102c54:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8102c56:	687b      	ldr	r3, [r7, #4]
 8102c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102c5a:	687a      	ldr	r2, [r7, #4]
 8102c5c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8102c5e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8102c60:	687b      	ldr	r3, [r7, #4]
 8102c62:	2201      	movs	r2, #1
 8102c64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8102c68:	687b      	ldr	r3, [r7, #4]
 8102c6a:	2200      	movs	r2, #0
 8102c6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8102c70:	2300      	movs	r3, #0
}
 8102c72:	4618      	mov	r0, r3
 8102c74:	3718      	adds	r7, #24
 8102c76:	46bd      	mov	sp, r7
 8102c78:	bd80      	pop	{r7, pc}
 8102c7a:	bf00      	nop
 8102c7c:	40020010 	.word	0x40020010
 8102c80:	40020028 	.word	0x40020028
 8102c84:	40020040 	.word	0x40020040
 8102c88:	40020058 	.word	0x40020058
 8102c8c:	40020070 	.word	0x40020070
 8102c90:	40020088 	.word	0x40020088
 8102c94:	400200a0 	.word	0x400200a0
 8102c98:	400200b8 	.word	0x400200b8
 8102c9c:	40020410 	.word	0x40020410
 8102ca0:	40020428 	.word	0x40020428
 8102ca4:	40020440 	.word	0x40020440
 8102ca8:	40020458 	.word	0x40020458
 8102cac:	40020470 	.word	0x40020470
 8102cb0:	40020488 	.word	0x40020488
 8102cb4:	400204a0 	.word	0x400204a0
 8102cb8:	400204b8 	.word	0x400204b8
 8102cbc:	58025408 	.word	0x58025408
 8102cc0:	5802541c 	.word	0x5802541c
 8102cc4:	58025430 	.word	0x58025430
 8102cc8:	58025444 	.word	0x58025444
 8102ccc:	58025458 	.word	0x58025458
 8102cd0:	5802546c 	.word	0x5802546c
 8102cd4:	58025480 	.word	0x58025480
 8102cd8:	58025494 	.word	0x58025494

08102cdc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8102cdc:	b580      	push	{r7, lr}
 8102cde:	b084      	sub	sp, #16
 8102ce0:	af00      	add	r7, sp, #0
 8102ce2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8102ce4:	687b      	ldr	r3, [r7, #4]
 8102ce6:	2b00      	cmp	r3, #0
 8102ce8:	d101      	bne.n	8102cee <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8102cea:	2301      	movs	r3, #1
 8102cec:	e237      	b.n	810315e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8102cee:	687b      	ldr	r3, [r7, #4]
 8102cf0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8102cf4:	b2db      	uxtb	r3, r3
 8102cf6:	2b02      	cmp	r3, #2
 8102cf8:	d004      	beq.n	8102d04 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8102cfa:	687b      	ldr	r3, [r7, #4]
 8102cfc:	2280      	movs	r2, #128	; 0x80
 8102cfe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8102d00:	2301      	movs	r3, #1
 8102d02:	e22c      	b.n	810315e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8102d04:	687b      	ldr	r3, [r7, #4]
 8102d06:	681b      	ldr	r3, [r3, #0]
 8102d08:	4a5c      	ldr	r2, [pc, #368]	; (8102e7c <HAL_DMA_Abort_IT+0x1a0>)
 8102d0a:	4293      	cmp	r3, r2
 8102d0c:	d04a      	beq.n	8102da4 <HAL_DMA_Abort_IT+0xc8>
 8102d0e:	687b      	ldr	r3, [r7, #4]
 8102d10:	681b      	ldr	r3, [r3, #0]
 8102d12:	4a5b      	ldr	r2, [pc, #364]	; (8102e80 <HAL_DMA_Abort_IT+0x1a4>)
 8102d14:	4293      	cmp	r3, r2
 8102d16:	d045      	beq.n	8102da4 <HAL_DMA_Abort_IT+0xc8>
 8102d18:	687b      	ldr	r3, [r7, #4]
 8102d1a:	681b      	ldr	r3, [r3, #0]
 8102d1c:	4a59      	ldr	r2, [pc, #356]	; (8102e84 <HAL_DMA_Abort_IT+0x1a8>)
 8102d1e:	4293      	cmp	r3, r2
 8102d20:	d040      	beq.n	8102da4 <HAL_DMA_Abort_IT+0xc8>
 8102d22:	687b      	ldr	r3, [r7, #4]
 8102d24:	681b      	ldr	r3, [r3, #0]
 8102d26:	4a58      	ldr	r2, [pc, #352]	; (8102e88 <HAL_DMA_Abort_IT+0x1ac>)
 8102d28:	4293      	cmp	r3, r2
 8102d2a:	d03b      	beq.n	8102da4 <HAL_DMA_Abort_IT+0xc8>
 8102d2c:	687b      	ldr	r3, [r7, #4]
 8102d2e:	681b      	ldr	r3, [r3, #0]
 8102d30:	4a56      	ldr	r2, [pc, #344]	; (8102e8c <HAL_DMA_Abort_IT+0x1b0>)
 8102d32:	4293      	cmp	r3, r2
 8102d34:	d036      	beq.n	8102da4 <HAL_DMA_Abort_IT+0xc8>
 8102d36:	687b      	ldr	r3, [r7, #4]
 8102d38:	681b      	ldr	r3, [r3, #0]
 8102d3a:	4a55      	ldr	r2, [pc, #340]	; (8102e90 <HAL_DMA_Abort_IT+0x1b4>)
 8102d3c:	4293      	cmp	r3, r2
 8102d3e:	d031      	beq.n	8102da4 <HAL_DMA_Abort_IT+0xc8>
 8102d40:	687b      	ldr	r3, [r7, #4]
 8102d42:	681b      	ldr	r3, [r3, #0]
 8102d44:	4a53      	ldr	r2, [pc, #332]	; (8102e94 <HAL_DMA_Abort_IT+0x1b8>)
 8102d46:	4293      	cmp	r3, r2
 8102d48:	d02c      	beq.n	8102da4 <HAL_DMA_Abort_IT+0xc8>
 8102d4a:	687b      	ldr	r3, [r7, #4]
 8102d4c:	681b      	ldr	r3, [r3, #0]
 8102d4e:	4a52      	ldr	r2, [pc, #328]	; (8102e98 <HAL_DMA_Abort_IT+0x1bc>)
 8102d50:	4293      	cmp	r3, r2
 8102d52:	d027      	beq.n	8102da4 <HAL_DMA_Abort_IT+0xc8>
 8102d54:	687b      	ldr	r3, [r7, #4]
 8102d56:	681b      	ldr	r3, [r3, #0]
 8102d58:	4a50      	ldr	r2, [pc, #320]	; (8102e9c <HAL_DMA_Abort_IT+0x1c0>)
 8102d5a:	4293      	cmp	r3, r2
 8102d5c:	d022      	beq.n	8102da4 <HAL_DMA_Abort_IT+0xc8>
 8102d5e:	687b      	ldr	r3, [r7, #4]
 8102d60:	681b      	ldr	r3, [r3, #0]
 8102d62:	4a4f      	ldr	r2, [pc, #316]	; (8102ea0 <HAL_DMA_Abort_IT+0x1c4>)
 8102d64:	4293      	cmp	r3, r2
 8102d66:	d01d      	beq.n	8102da4 <HAL_DMA_Abort_IT+0xc8>
 8102d68:	687b      	ldr	r3, [r7, #4]
 8102d6a:	681b      	ldr	r3, [r3, #0]
 8102d6c:	4a4d      	ldr	r2, [pc, #308]	; (8102ea4 <HAL_DMA_Abort_IT+0x1c8>)
 8102d6e:	4293      	cmp	r3, r2
 8102d70:	d018      	beq.n	8102da4 <HAL_DMA_Abort_IT+0xc8>
 8102d72:	687b      	ldr	r3, [r7, #4]
 8102d74:	681b      	ldr	r3, [r3, #0]
 8102d76:	4a4c      	ldr	r2, [pc, #304]	; (8102ea8 <HAL_DMA_Abort_IT+0x1cc>)
 8102d78:	4293      	cmp	r3, r2
 8102d7a:	d013      	beq.n	8102da4 <HAL_DMA_Abort_IT+0xc8>
 8102d7c:	687b      	ldr	r3, [r7, #4]
 8102d7e:	681b      	ldr	r3, [r3, #0]
 8102d80:	4a4a      	ldr	r2, [pc, #296]	; (8102eac <HAL_DMA_Abort_IT+0x1d0>)
 8102d82:	4293      	cmp	r3, r2
 8102d84:	d00e      	beq.n	8102da4 <HAL_DMA_Abort_IT+0xc8>
 8102d86:	687b      	ldr	r3, [r7, #4]
 8102d88:	681b      	ldr	r3, [r3, #0]
 8102d8a:	4a49      	ldr	r2, [pc, #292]	; (8102eb0 <HAL_DMA_Abort_IT+0x1d4>)
 8102d8c:	4293      	cmp	r3, r2
 8102d8e:	d009      	beq.n	8102da4 <HAL_DMA_Abort_IT+0xc8>
 8102d90:	687b      	ldr	r3, [r7, #4]
 8102d92:	681b      	ldr	r3, [r3, #0]
 8102d94:	4a47      	ldr	r2, [pc, #284]	; (8102eb4 <HAL_DMA_Abort_IT+0x1d8>)
 8102d96:	4293      	cmp	r3, r2
 8102d98:	d004      	beq.n	8102da4 <HAL_DMA_Abort_IT+0xc8>
 8102d9a:	687b      	ldr	r3, [r7, #4]
 8102d9c:	681b      	ldr	r3, [r3, #0]
 8102d9e:	4a46      	ldr	r2, [pc, #280]	; (8102eb8 <HAL_DMA_Abort_IT+0x1dc>)
 8102da0:	4293      	cmp	r3, r2
 8102da2:	d101      	bne.n	8102da8 <HAL_DMA_Abort_IT+0xcc>
 8102da4:	2301      	movs	r3, #1
 8102da6:	e000      	b.n	8102daa <HAL_DMA_Abort_IT+0xce>
 8102da8:	2300      	movs	r3, #0
 8102daa:	2b00      	cmp	r3, #0
 8102dac:	f000 8086 	beq.w	8102ebc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8102db0:	687b      	ldr	r3, [r7, #4]
 8102db2:	2204      	movs	r2, #4
 8102db4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8102db8:	687b      	ldr	r3, [r7, #4]
 8102dba:	681b      	ldr	r3, [r3, #0]
 8102dbc:	4a2f      	ldr	r2, [pc, #188]	; (8102e7c <HAL_DMA_Abort_IT+0x1a0>)
 8102dbe:	4293      	cmp	r3, r2
 8102dc0:	d04a      	beq.n	8102e58 <HAL_DMA_Abort_IT+0x17c>
 8102dc2:	687b      	ldr	r3, [r7, #4]
 8102dc4:	681b      	ldr	r3, [r3, #0]
 8102dc6:	4a2e      	ldr	r2, [pc, #184]	; (8102e80 <HAL_DMA_Abort_IT+0x1a4>)
 8102dc8:	4293      	cmp	r3, r2
 8102dca:	d045      	beq.n	8102e58 <HAL_DMA_Abort_IT+0x17c>
 8102dcc:	687b      	ldr	r3, [r7, #4]
 8102dce:	681b      	ldr	r3, [r3, #0]
 8102dd0:	4a2c      	ldr	r2, [pc, #176]	; (8102e84 <HAL_DMA_Abort_IT+0x1a8>)
 8102dd2:	4293      	cmp	r3, r2
 8102dd4:	d040      	beq.n	8102e58 <HAL_DMA_Abort_IT+0x17c>
 8102dd6:	687b      	ldr	r3, [r7, #4]
 8102dd8:	681b      	ldr	r3, [r3, #0]
 8102dda:	4a2b      	ldr	r2, [pc, #172]	; (8102e88 <HAL_DMA_Abort_IT+0x1ac>)
 8102ddc:	4293      	cmp	r3, r2
 8102dde:	d03b      	beq.n	8102e58 <HAL_DMA_Abort_IT+0x17c>
 8102de0:	687b      	ldr	r3, [r7, #4]
 8102de2:	681b      	ldr	r3, [r3, #0]
 8102de4:	4a29      	ldr	r2, [pc, #164]	; (8102e8c <HAL_DMA_Abort_IT+0x1b0>)
 8102de6:	4293      	cmp	r3, r2
 8102de8:	d036      	beq.n	8102e58 <HAL_DMA_Abort_IT+0x17c>
 8102dea:	687b      	ldr	r3, [r7, #4]
 8102dec:	681b      	ldr	r3, [r3, #0]
 8102dee:	4a28      	ldr	r2, [pc, #160]	; (8102e90 <HAL_DMA_Abort_IT+0x1b4>)
 8102df0:	4293      	cmp	r3, r2
 8102df2:	d031      	beq.n	8102e58 <HAL_DMA_Abort_IT+0x17c>
 8102df4:	687b      	ldr	r3, [r7, #4]
 8102df6:	681b      	ldr	r3, [r3, #0]
 8102df8:	4a26      	ldr	r2, [pc, #152]	; (8102e94 <HAL_DMA_Abort_IT+0x1b8>)
 8102dfa:	4293      	cmp	r3, r2
 8102dfc:	d02c      	beq.n	8102e58 <HAL_DMA_Abort_IT+0x17c>
 8102dfe:	687b      	ldr	r3, [r7, #4]
 8102e00:	681b      	ldr	r3, [r3, #0]
 8102e02:	4a25      	ldr	r2, [pc, #148]	; (8102e98 <HAL_DMA_Abort_IT+0x1bc>)
 8102e04:	4293      	cmp	r3, r2
 8102e06:	d027      	beq.n	8102e58 <HAL_DMA_Abort_IT+0x17c>
 8102e08:	687b      	ldr	r3, [r7, #4]
 8102e0a:	681b      	ldr	r3, [r3, #0]
 8102e0c:	4a23      	ldr	r2, [pc, #140]	; (8102e9c <HAL_DMA_Abort_IT+0x1c0>)
 8102e0e:	4293      	cmp	r3, r2
 8102e10:	d022      	beq.n	8102e58 <HAL_DMA_Abort_IT+0x17c>
 8102e12:	687b      	ldr	r3, [r7, #4]
 8102e14:	681b      	ldr	r3, [r3, #0]
 8102e16:	4a22      	ldr	r2, [pc, #136]	; (8102ea0 <HAL_DMA_Abort_IT+0x1c4>)
 8102e18:	4293      	cmp	r3, r2
 8102e1a:	d01d      	beq.n	8102e58 <HAL_DMA_Abort_IT+0x17c>
 8102e1c:	687b      	ldr	r3, [r7, #4]
 8102e1e:	681b      	ldr	r3, [r3, #0]
 8102e20:	4a20      	ldr	r2, [pc, #128]	; (8102ea4 <HAL_DMA_Abort_IT+0x1c8>)
 8102e22:	4293      	cmp	r3, r2
 8102e24:	d018      	beq.n	8102e58 <HAL_DMA_Abort_IT+0x17c>
 8102e26:	687b      	ldr	r3, [r7, #4]
 8102e28:	681b      	ldr	r3, [r3, #0]
 8102e2a:	4a1f      	ldr	r2, [pc, #124]	; (8102ea8 <HAL_DMA_Abort_IT+0x1cc>)
 8102e2c:	4293      	cmp	r3, r2
 8102e2e:	d013      	beq.n	8102e58 <HAL_DMA_Abort_IT+0x17c>
 8102e30:	687b      	ldr	r3, [r7, #4]
 8102e32:	681b      	ldr	r3, [r3, #0]
 8102e34:	4a1d      	ldr	r2, [pc, #116]	; (8102eac <HAL_DMA_Abort_IT+0x1d0>)
 8102e36:	4293      	cmp	r3, r2
 8102e38:	d00e      	beq.n	8102e58 <HAL_DMA_Abort_IT+0x17c>
 8102e3a:	687b      	ldr	r3, [r7, #4]
 8102e3c:	681b      	ldr	r3, [r3, #0]
 8102e3e:	4a1c      	ldr	r2, [pc, #112]	; (8102eb0 <HAL_DMA_Abort_IT+0x1d4>)
 8102e40:	4293      	cmp	r3, r2
 8102e42:	d009      	beq.n	8102e58 <HAL_DMA_Abort_IT+0x17c>
 8102e44:	687b      	ldr	r3, [r7, #4]
 8102e46:	681b      	ldr	r3, [r3, #0]
 8102e48:	4a1a      	ldr	r2, [pc, #104]	; (8102eb4 <HAL_DMA_Abort_IT+0x1d8>)
 8102e4a:	4293      	cmp	r3, r2
 8102e4c:	d004      	beq.n	8102e58 <HAL_DMA_Abort_IT+0x17c>
 8102e4e:	687b      	ldr	r3, [r7, #4]
 8102e50:	681b      	ldr	r3, [r3, #0]
 8102e52:	4a19      	ldr	r2, [pc, #100]	; (8102eb8 <HAL_DMA_Abort_IT+0x1dc>)
 8102e54:	4293      	cmp	r3, r2
 8102e56:	d108      	bne.n	8102e6a <HAL_DMA_Abort_IT+0x18e>
 8102e58:	687b      	ldr	r3, [r7, #4]
 8102e5a:	681b      	ldr	r3, [r3, #0]
 8102e5c:	681a      	ldr	r2, [r3, #0]
 8102e5e:	687b      	ldr	r3, [r7, #4]
 8102e60:	681b      	ldr	r3, [r3, #0]
 8102e62:	f022 0201 	bic.w	r2, r2, #1
 8102e66:	601a      	str	r2, [r3, #0]
 8102e68:	e178      	b.n	810315c <HAL_DMA_Abort_IT+0x480>
 8102e6a:	687b      	ldr	r3, [r7, #4]
 8102e6c:	681b      	ldr	r3, [r3, #0]
 8102e6e:	681a      	ldr	r2, [r3, #0]
 8102e70:	687b      	ldr	r3, [r7, #4]
 8102e72:	681b      	ldr	r3, [r3, #0]
 8102e74:	f022 0201 	bic.w	r2, r2, #1
 8102e78:	601a      	str	r2, [r3, #0]
 8102e7a:	e16f      	b.n	810315c <HAL_DMA_Abort_IT+0x480>
 8102e7c:	40020010 	.word	0x40020010
 8102e80:	40020028 	.word	0x40020028
 8102e84:	40020040 	.word	0x40020040
 8102e88:	40020058 	.word	0x40020058
 8102e8c:	40020070 	.word	0x40020070
 8102e90:	40020088 	.word	0x40020088
 8102e94:	400200a0 	.word	0x400200a0
 8102e98:	400200b8 	.word	0x400200b8
 8102e9c:	40020410 	.word	0x40020410
 8102ea0:	40020428 	.word	0x40020428
 8102ea4:	40020440 	.word	0x40020440
 8102ea8:	40020458 	.word	0x40020458
 8102eac:	40020470 	.word	0x40020470
 8102eb0:	40020488 	.word	0x40020488
 8102eb4:	400204a0 	.word	0x400204a0
 8102eb8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8102ebc:	687b      	ldr	r3, [r7, #4]
 8102ebe:	681b      	ldr	r3, [r3, #0]
 8102ec0:	681a      	ldr	r2, [r3, #0]
 8102ec2:	687b      	ldr	r3, [r7, #4]
 8102ec4:	681b      	ldr	r3, [r3, #0]
 8102ec6:	f022 020e 	bic.w	r2, r2, #14
 8102eca:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8102ecc:	687b      	ldr	r3, [r7, #4]
 8102ece:	681b      	ldr	r3, [r3, #0]
 8102ed0:	4a6c      	ldr	r2, [pc, #432]	; (8103084 <HAL_DMA_Abort_IT+0x3a8>)
 8102ed2:	4293      	cmp	r3, r2
 8102ed4:	d04a      	beq.n	8102f6c <HAL_DMA_Abort_IT+0x290>
 8102ed6:	687b      	ldr	r3, [r7, #4]
 8102ed8:	681b      	ldr	r3, [r3, #0]
 8102eda:	4a6b      	ldr	r2, [pc, #428]	; (8103088 <HAL_DMA_Abort_IT+0x3ac>)
 8102edc:	4293      	cmp	r3, r2
 8102ede:	d045      	beq.n	8102f6c <HAL_DMA_Abort_IT+0x290>
 8102ee0:	687b      	ldr	r3, [r7, #4]
 8102ee2:	681b      	ldr	r3, [r3, #0]
 8102ee4:	4a69      	ldr	r2, [pc, #420]	; (810308c <HAL_DMA_Abort_IT+0x3b0>)
 8102ee6:	4293      	cmp	r3, r2
 8102ee8:	d040      	beq.n	8102f6c <HAL_DMA_Abort_IT+0x290>
 8102eea:	687b      	ldr	r3, [r7, #4]
 8102eec:	681b      	ldr	r3, [r3, #0]
 8102eee:	4a68      	ldr	r2, [pc, #416]	; (8103090 <HAL_DMA_Abort_IT+0x3b4>)
 8102ef0:	4293      	cmp	r3, r2
 8102ef2:	d03b      	beq.n	8102f6c <HAL_DMA_Abort_IT+0x290>
 8102ef4:	687b      	ldr	r3, [r7, #4]
 8102ef6:	681b      	ldr	r3, [r3, #0]
 8102ef8:	4a66      	ldr	r2, [pc, #408]	; (8103094 <HAL_DMA_Abort_IT+0x3b8>)
 8102efa:	4293      	cmp	r3, r2
 8102efc:	d036      	beq.n	8102f6c <HAL_DMA_Abort_IT+0x290>
 8102efe:	687b      	ldr	r3, [r7, #4]
 8102f00:	681b      	ldr	r3, [r3, #0]
 8102f02:	4a65      	ldr	r2, [pc, #404]	; (8103098 <HAL_DMA_Abort_IT+0x3bc>)
 8102f04:	4293      	cmp	r3, r2
 8102f06:	d031      	beq.n	8102f6c <HAL_DMA_Abort_IT+0x290>
 8102f08:	687b      	ldr	r3, [r7, #4]
 8102f0a:	681b      	ldr	r3, [r3, #0]
 8102f0c:	4a63      	ldr	r2, [pc, #396]	; (810309c <HAL_DMA_Abort_IT+0x3c0>)
 8102f0e:	4293      	cmp	r3, r2
 8102f10:	d02c      	beq.n	8102f6c <HAL_DMA_Abort_IT+0x290>
 8102f12:	687b      	ldr	r3, [r7, #4]
 8102f14:	681b      	ldr	r3, [r3, #0]
 8102f16:	4a62      	ldr	r2, [pc, #392]	; (81030a0 <HAL_DMA_Abort_IT+0x3c4>)
 8102f18:	4293      	cmp	r3, r2
 8102f1a:	d027      	beq.n	8102f6c <HAL_DMA_Abort_IT+0x290>
 8102f1c:	687b      	ldr	r3, [r7, #4]
 8102f1e:	681b      	ldr	r3, [r3, #0]
 8102f20:	4a60      	ldr	r2, [pc, #384]	; (81030a4 <HAL_DMA_Abort_IT+0x3c8>)
 8102f22:	4293      	cmp	r3, r2
 8102f24:	d022      	beq.n	8102f6c <HAL_DMA_Abort_IT+0x290>
 8102f26:	687b      	ldr	r3, [r7, #4]
 8102f28:	681b      	ldr	r3, [r3, #0]
 8102f2a:	4a5f      	ldr	r2, [pc, #380]	; (81030a8 <HAL_DMA_Abort_IT+0x3cc>)
 8102f2c:	4293      	cmp	r3, r2
 8102f2e:	d01d      	beq.n	8102f6c <HAL_DMA_Abort_IT+0x290>
 8102f30:	687b      	ldr	r3, [r7, #4]
 8102f32:	681b      	ldr	r3, [r3, #0]
 8102f34:	4a5d      	ldr	r2, [pc, #372]	; (81030ac <HAL_DMA_Abort_IT+0x3d0>)
 8102f36:	4293      	cmp	r3, r2
 8102f38:	d018      	beq.n	8102f6c <HAL_DMA_Abort_IT+0x290>
 8102f3a:	687b      	ldr	r3, [r7, #4]
 8102f3c:	681b      	ldr	r3, [r3, #0]
 8102f3e:	4a5c      	ldr	r2, [pc, #368]	; (81030b0 <HAL_DMA_Abort_IT+0x3d4>)
 8102f40:	4293      	cmp	r3, r2
 8102f42:	d013      	beq.n	8102f6c <HAL_DMA_Abort_IT+0x290>
 8102f44:	687b      	ldr	r3, [r7, #4]
 8102f46:	681b      	ldr	r3, [r3, #0]
 8102f48:	4a5a      	ldr	r2, [pc, #360]	; (81030b4 <HAL_DMA_Abort_IT+0x3d8>)
 8102f4a:	4293      	cmp	r3, r2
 8102f4c:	d00e      	beq.n	8102f6c <HAL_DMA_Abort_IT+0x290>
 8102f4e:	687b      	ldr	r3, [r7, #4]
 8102f50:	681b      	ldr	r3, [r3, #0]
 8102f52:	4a59      	ldr	r2, [pc, #356]	; (81030b8 <HAL_DMA_Abort_IT+0x3dc>)
 8102f54:	4293      	cmp	r3, r2
 8102f56:	d009      	beq.n	8102f6c <HAL_DMA_Abort_IT+0x290>
 8102f58:	687b      	ldr	r3, [r7, #4]
 8102f5a:	681b      	ldr	r3, [r3, #0]
 8102f5c:	4a57      	ldr	r2, [pc, #348]	; (81030bc <HAL_DMA_Abort_IT+0x3e0>)
 8102f5e:	4293      	cmp	r3, r2
 8102f60:	d004      	beq.n	8102f6c <HAL_DMA_Abort_IT+0x290>
 8102f62:	687b      	ldr	r3, [r7, #4]
 8102f64:	681b      	ldr	r3, [r3, #0]
 8102f66:	4a56      	ldr	r2, [pc, #344]	; (81030c0 <HAL_DMA_Abort_IT+0x3e4>)
 8102f68:	4293      	cmp	r3, r2
 8102f6a:	d108      	bne.n	8102f7e <HAL_DMA_Abort_IT+0x2a2>
 8102f6c:	687b      	ldr	r3, [r7, #4]
 8102f6e:	681b      	ldr	r3, [r3, #0]
 8102f70:	681a      	ldr	r2, [r3, #0]
 8102f72:	687b      	ldr	r3, [r7, #4]
 8102f74:	681b      	ldr	r3, [r3, #0]
 8102f76:	f022 0201 	bic.w	r2, r2, #1
 8102f7a:	601a      	str	r2, [r3, #0]
 8102f7c:	e007      	b.n	8102f8e <HAL_DMA_Abort_IT+0x2b2>
 8102f7e:	687b      	ldr	r3, [r7, #4]
 8102f80:	681b      	ldr	r3, [r3, #0]
 8102f82:	681a      	ldr	r2, [r3, #0]
 8102f84:	687b      	ldr	r3, [r7, #4]
 8102f86:	681b      	ldr	r3, [r3, #0]
 8102f88:	f022 0201 	bic.w	r2, r2, #1
 8102f8c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8102f8e:	687b      	ldr	r3, [r7, #4]
 8102f90:	681b      	ldr	r3, [r3, #0]
 8102f92:	4a3c      	ldr	r2, [pc, #240]	; (8103084 <HAL_DMA_Abort_IT+0x3a8>)
 8102f94:	4293      	cmp	r3, r2
 8102f96:	d072      	beq.n	810307e <HAL_DMA_Abort_IT+0x3a2>
 8102f98:	687b      	ldr	r3, [r7, #4]
 8102f9a:	681b      	ldr	r3, [r3, #0]
 8102f9c:	4a3a      	ldr	r2, [pc, #232]	; (8103088 <HAL_DMA_Abort_IT+0x3ac>)
 8102f9e:	4293      	cmp	r3, r2
 8102fa0:	d06d      	beq.n	810307e <HAL_DMA_Abort_IT+0x3a2>
 8102fa2:	687b      	ldr	r3, [r7, #4]
 8102fa4:	681b      	ldr	r3, [r3, #0]
 8102fa6:	4a39      	ldr	r2, [pc, #228]	; (810308c <HAL_DMA_Abort_IT+0x3b0>)
 8102fa8:	4293      	cmp	r3, r2
 8102faa:	d068      	beq.n	810307e <HAL_DMA_Abort_IT+0x3a2>
 8102fac:	687b      	ldr	r3, [r7, #4]
 8102fae:	681b      	ldr	r3, [r3, #0]
 8102fb0:	4a37      	ldr	r2, [pc, #220]	; (8103090 <HAL_DMA_Abort_IT+0x3b4>)
 8102fb2:	4293      	cmp	r3, r2
 8102fb4:	d063      	beq.n	810307e <HAL_DMA_Abort_IT+0x3a2>
 8102fb6:	687b      	ldr	r3, [r7, #4]
 8102fb8:	681b      	ldr	r3, [r3, #0]
 8102fba:	4a36      	ldr	r2, [pc, #216]	; (8103094 <HAL_DMA_Abort_IT+0x3b8>)
 8102fbc:	4293      	cmp	r3, r2
 8102fbe:	d05e      	beq.n	810307e <HAL_DMA_Abort_IT+0x3a2>
 8102fc0:	687b      	ldr	r3, [r7, #4]
 8102fc2:	681b      	ldr	r3, [r3, #0]
 8102fc4:	4a34      	ldr	r2, [pc, #208]	; (8103098 <HAL_DMA_Abort_IT+0x3bc>)
 8102fc6:	4293      	cmp	r3, r2
 8102fc8:	d059      	beq.n	810307e <HAL_DMA_Abort_IT+0x3a2>
 8102fca:	687b      	ldr	r3, [r7, #4]
 8102fcc:	681b      	ldr	r3, [r3, #0]
 8102fce:	4a33      	ldr	r2, [pc, #204]	; (810309c <HAL_DMA_Abort_IT+0x3c0>)
 8102fd0:	4293      	cmp	r3, r2
 8102fd2:	d054      	beq.n	810307e <HAL_DMA_Abort_IT+0x3a2>
 8102fd4:	687b      	ldr	r3, [r7, #4]
 8102fd6:	681b      	ldr	r3, [r3, #0]
 8102fd8:	4a31      	ldr	r2, [pc, #196]	; (81030a0 <HAL_DMA_Abort_IT+0x3c4>)
 8102fda:	4293      	cmp	r3, r2
 8102fdc:	d04f      	beq.n	810307e <HAL_DMA_Abort_IT+0x3a2>
 8102fde:	687b      	ldr	r3, [r7, #4]
 8102fe0:	681b      	ldr	r3, [r3, #0]
 8102fe2:	4a30      	ldr	r2, [pc, #192]	; (81030a4 <HAL_DMA_Abort_IT+0x3c8>)
 8102fe4:	4293      	cmp	r3, r2
 8102fe6:	d04a      	beq.n	810307e <HAL_DMA_Abort_IT+0x3a2>
 8102fe8:	687b      	ldr	r3, [r7, #4]
 8102fea:	681b      	ldr	r3, [r3, #0]
 8102fec:	4a2e      	ldr	r2, [pc, #184]	; (81030a8 <HAL_DMA_Abort_IT+0x3cc>)
 8102fee:	4293      	cmp	r3, r2
 8102ff0:	d045      	beq.n	810307e <HAL_DMA_Abort_IT+0x3a2>
 8102ff2:	687b      	ldr	r3, [r7, #4]
 8102ff4:	681b      	ldr	r3, [r3, #0]
 8102ff6:	4a2d      	ldr	r2, [pc, #180]	; (81030ac <HAL_DMA_Abort_IT+0x3d0>)
 8102ff8:	4293      	cmp	r3, r2
 8102ffa:	d040      	beq.n	810307e <HAL_DMA_Abort_IT+0x3a2>
 8102ffc:	687b      	ldr	r3, [r7, #4]
 8102ffe:	681b      	ldr	r3, [r3, #0]
 8103000:	4a2b      	ldr	r2, [pc, #172]	; (81030b0 <HAL_DMA_Abort_IT+0x3d4>)
 8103002:	4293      	cmp	r3, r2
 8103004:	d03b      	beq.n	810307e <HAL_DMA_Abort_IT+0x3a2>
 8103006:	687b      	ldr	r3, [r7, #4]
 8103008:	681b      	ldr	r3, [r3, #0]
 810300a:	4a2a      	ldr	r2, [pc, #168]	; (81030b4 <HAL_DMA_Abort_IT+0x3d8>)
 810300c:	4293      	cmp	r3, r2
 810300e:	d036      	beq.n	810307e <HAL_DMA_Abort_IT+0x3a2>
 8103010:	687b      	ldr	r3, [r7, #4]
 8103012:	681b      	ldr	r3, [r3, #0]
 8103014:	4a28      	ldr	r2, [pc, #160]	; (81030b8 <HAL_DMA_Abort_IT+0x3dc>)
 8103016:	4293      	cmp	r3, r2
 8103018:	d031      	beq.n	810307e <HAL_DMA_Abort_IT+0x3a2>
 810301a:	687b      	ldr	r3, [r7, #4]
 810301c:	681b      	ldr	r3, [r3, #0]
 810301e:	4a27      	ldr	r2, [pc, #156]	; (81030bc <HAL_DMA_Abort_IT+0x3e0>)
 8103020:	4293      	cmp	r3, r2
 8103022:	d02c      	beq.n	810307e <HAL_DMA_Abort_IT+0x3a2>
 8103024:	687b      	ldr	r3, [r7, #4]
 8103026:	681b      	ldr	r3, [r3, #0]
 8103028:	4a25      	ldr	r2, [pc, #148]	; (81030c0 <HAL_DMA_Abort_IT+0x3e4>)
 810302a:	4293      	cmp	r3, r2
 810302c:	d027      	beq.n	810307e <HAL_DMA_Abort_IT+0x3a2>
 810302e:	687b      	ldr	r3, [r7, #4]
 8103030:	681b      	ldr	r3, [r3, #0]
 8103032:	4a24      	ldr	r2, [pc, #144]	; (81030c4 <HAL_DMA_Abort_IT+0x3e8>)
 8103034:	4293      	cmp	r3, r2
 8103036:	d022      	beq.n	810307e <HAL_DMA_Abort_IT+0x3a2>
 8103038:	687b      	ldr	r3, [r7, #4]
 810303a:	681b      	ldr	r3, [r3, #0]
 810303c:	4a22      	ldr	r2, [pc, #136]	; (81030c8 <HAL_DMA_Abort_IT+0x3ec>)
 810303e:	4293      	cmp	r3, r2
 8103040:	d01d      	beq.n	810307e <HAL_DMA_Abort_IT+0x3a2>
 8103042:	687b      	ldr	r3, [r7, #4]
 8103044:	681b      	ldr	r3, [r3, #0]
 8103046:	4a21      	ldr	r2, [pc, #132]	; (81030cc <HAL_DMA_Abort_IT+0x3f0>)
 8103048:	4293      	cmp	r3, r2
 810304a:	d018      	beq.n	810307e <HAL_DMA_Abort_IT+0x3a2>
 810304c:	687b      	ldr	r3, [r7, #4]
 810304e:	681b      	ldr	r3, [r3, #0]
 8103050:	4a1f      	ldr	r2, [pc, #124]	; (81030d0 <HAL_DMA_Abort_IT+0x3f4>)
 8103052:	4293      	cmp	r3, r2
 8103054:	d013      	beq.n	810307e <HAL_DMA_Abort_IT+0x3a2>
 8103056:	687b      	ldr	r3, [r7, #4]
 8103058:	681b      	ldr	r3, [r3, #0]
 810305a:	4a1e      	ldr	r2, [pc, #120]	; (81030d4 <HAL_DMA_Abort_IT+0x3f8>)
 810305c:	4293      	cmp	r3, r2
 810305e:	d00e      	beq.n	810307e <HAL_DMA_Abort_IT+0x3a2>
 8103060:	687b      	ldr	r3, [r7, #4]
 8103062:	681b      	ldr	r3, [r3, #0]
 8103064:	4a1c      	ldr	r2, [pc, #112]	; (81030d8 <HAL_DMA_Abort_IT+0x3fc>)
 8103066:	4293      	cmp	r3, r2
 8103068:	d009      	beq.n	810307e <HAL_DMA_Abort_IT+0x3a2>
 810306a:	687b      	ldr	r3, [r7, #4]
 810306c:	681b      	ldr	r3, [r3, #0]
 810306e:	4a1b      	ldr	r2, [pc, #108]	; (81030dc <HAL_DMA_Abort_IT+0x400>)
 8103070:	4293      	cmp	r3, r2
 8103072:	d004      	beq.n	810307e <HAL_DMA_Abort_IT+0x3a2>
 8103074:	687b      	ldr	r3, [r7, #4]
 8103076:	681b      	ldr	r3, [r3, #0]
 8103078:	4a19      	ldr	r2, [pc, #100]	; (81030e0 <HAL_DMA_Abort_IT+0x404>)
 810307a:	4293      	cmp	r3, r2
 810307c:	d132      	bne.n	81030e4 <HAL_DMA_Abort_IT+0x408>
 810307e:	2301      	movs	r3, #1
 8103080:	e031      	b.n	81030e6 <HAL_DMA_Abort_IT+0x40a>
 8103082:	bf00      	nop
 8103084:	40020010 	.word	0x40020010
 8103088:	40020028 	.word	0x40020028
 810308c:	40020040 	.word	0x40020040
 8103090:	40020058 	.word	0x40020058
 8103094:	40020070 	.word	0x40020070
 8103098:	40020088 	.word	0x40020088
 810309c:	400200a0 	.word	0x400200a0
 81030a0:	400200b8 	.word	0x400200b8
 81030a4:	40020410 	.word	0x40020410
 81030a8:	40020428 	.word	0x40020428
 81030ac:	40020440 	.word	0x40020440
 81030b0:	40020458 	.word	0x40020458
 81030b4:	40020470 	.word	0x40020470
 81030b8:	40020488 	.word	0x40020488
 81030bc:	400204a0 	.word	0x400204a0
 81030c0:	400204b8 	.word	0x400204b8
 81030c4:	58025408 	.word	0x58025408
 81030c8:	5802541c 	.word	0x5802541c
 81030cc:	58025430 	.word	0x58025430
 81030d0:	58025444 	.word	0x58025444
 81030d4:	58025458 	.word	0x58025458
 81030d8:	5802546c 	.word	0x5802546c
 81030dc:	58025480 	.word	0x58025480
 81030e0:	58025494 	.word	0x58025494
 81030e4:	2300      	movs	r3, #0
 81030e6:	2b00      	cmp	r3, #0
 81030e8:	d028      	beq.n	810313c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 81030ea:	687b      	ldr	r3, [r7, #4]
 81030ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81030ee:	681a      	ldr	r2, [r3, #0]
 81030f0:	687b      	ldr	r3, [r7, #4]
 81030f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81030f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 81030f8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 81030fa:	687b      	ldr	r3, [r7, #4]
 81030fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81030fe:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8103100:	687b      	ldr	r3, [r7, #4]
 8103102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103104:	f003 031f 	and.w	r3, r3, #31
 8103108:	2201      	movs	r2, #1
 810310a:	409a      	lsls	r2, r3
 810310c:	68fb      	ldr	r3, [r7, #12]
 810310e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8103110:	687b      	ldr	r3, [r7, #4]
 8103112:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103114:	687a      	ldr	r2, [r7, #4]
 8103116:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8103118:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 810311a:	687b      	ldr	r3, [r7, #4]
 810311c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810311e:	2b00      	cmp	r3, #0
 8103120:	d00c      	beq.n	810313c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8103122:	687b      	ldr	r3, [r7, #4]
 8103124:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103126:	681a      	ldr	r2, [r3, #0]
 8103128:	687b      	ldr	r3, [r7, #4]
 810312a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810312c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8103130:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8103132:	687b      	ldr	r3, [r7, #4]
 8103134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103136:	687a      	ldr	r2, [r7, #4]
 8103138:	6f52      	ldr	r2, [r2, #116]	; 0x74
 810313a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 810313c:	687b      	ldr	r3, [r7, #4]
 810313e:	2201      	movs	r2, #1
 8103140:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8103144:	687b      	ldr	r3, [r7, #4]
 8103146:	2200      	movs	r2, #0
 8103148:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 810314c:	687b      	ldr	r3, [r7, #4]
 810314e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103150:	2b00      	cmp	r3, #0
 8103152:	d003      	beq.n	810315c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8103154:	687b      	ldr	r3, [r7, #4]
 8103156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103158:	6878      	ldr	r0, [r7, #4]
 810315a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 810315c:	2300      	movs	r3, #0
}
 810315e:	4618      	mov	r0, r3
 8103160:	3710      	adds	r7, #16
 8103162:	46bd      	mov	sp, r7
 8103164:	bd80      	pop	{r7, pc}
 8103166:	bf00      	nop

08103168 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8103168:	b480      	push	{r7}
 810316a:	b089      	sub	sp, #36	; 0x24
 810316c:	af00      	add	r7, sp, #0
 810316e:	6078      	str	r0, [r7, #4]
 8103170:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8103172:	2300      	movs	r3, #0
 8103174:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8103176:	4b89      	ldr	r3, [pc, #548]	; (810339c <HAL_GPIO_Init+0x234>)
 8103178:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810317a:	e194      	b.n	81034a6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 810317c:	683b      	ldr	r3, [r7, #0]
 810317e:	681a      	ldr	r2, [r3, #0]
 8103180:	2101      	movs	r1, #1
 8103182:	69fb      	ldr	r3, [r7, #28]
 8103184:	fa01 f303 	lsl.w	r3, r1, r3
 8103188:	4013      	ands	r3, r2
 810318a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 810318c:	693b      	ldr	r3, [r7, #16]
 810318e:	2b00      	cmp	r3, #0
 8103190:	f000 8186 	beq.w	81034a0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8103194:	683b      	ldr	r3, [r7, #0]
 8103196:	685b      	ldr	r3, [r3, #4]
 8103198:	f003 0303 	and.w	r3, r3, #3
 810319c:	2b01      	cmp	r3, #1
 810319e:	d005      	beq.n	81031ac <HAL_GPIO_Init+0x44>
 81031a0:	683b      	ldr	r3, [r7, #0]
 81031a2:	685b      	ldr	r3, [r3, #4]
 81031a4:	f003 0303 	and.w	r3, r3, #3
 81031a8:	2b02      	cmp	r3, #2
 81031aa:	d130      	bne.n	810320e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 81031ac:	687b      	ldr	r3, [r7, #4]
 81031ae:	689b      	ldr	r3, [r3, #8]
 81031b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 81031b2:	69fb      	ldr	r3, [r7, #28]
 81031b4:	005b      	lsls	r3, r3, #1
 81031b6:	2203      	movs	r2, #3
 81031b8:	fa02 f303 	lsl.w	r3, r2, r3
 81031bc:	43db      	mvns	r3, r3
 81031be:	69ba      	ldr	r2, [r7, #24]
 81031c0:	4013      	ands	r3, r2
 81031c2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 81031c4:	683b      	ldr	r3, [r7, #0]
 81031c6:	68da      	ldr	r2, [r3, #12]
 81031c8:	69fb      	ldr	r3, [r7, #28]
 81031ca:	005b      	lsls	r3, r3, #1
 81031cc:	fa02 f303 	lsl.w	r3, r2, r3
 81031d0:	69ba      	ldr	r2, [r7, #24]
 81031d2:	4313      	orrs	r3, r2
 81031d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 81031d6:	687b      	ldr	r3, [r7, #4]
 81031d8:	69ba      	ldr	r2, [r7, #24]
 81031da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81031dc:	687b      	ldr	r3, [r7, #4]
 81031de:	685b      	ldr	r3, [r3, #4]
 81031e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81031e2:	2201      	movs	r2, #1
 81031e4:	69fb      	ldr	r3, [r7, #28]
 81031e6:	fa02 f303 	lsl.w	r3, r2, r3
 81031ea:	43db      	mvns	r3, r3
 81031ec:	69ba      	ldr	r2, [r7, #24]
 81031ee:	4013      	ands	r3, r2
 81031f0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 81031f2:	683b      	ldr	r3, [r7, #0]
 81031f4:	685b      	ldr	r3, [r3, #4]
 81031f6:	091b      	lsrs	r3, r3, #4
 81031f8:	f003 0201 	and.w	r2, r3, #1
 81031fc:	69fb      	ldr	r3, [r7, #28]
 81031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8103202:	69ba      	ldr	r2, [r7, #24]
 8103204:	4313      	orrs	r3, r2
 8103206:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8103208:	687b      	ldr	r3, [r7, #4]
 810320a:	69ba      	ldr	r2, [r7, #24]
 810320c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 810320e:	683b      	ldr	r3, [r7, #0]
 8103210:	685b      	ldr	r3, [r3, #4]
 8103212:	f003 0303 	and.w	r3, r3, #3
 8103216:	2b03      	cmp	r3, #3
 8103218:	d017      	beq.n	810324a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 810321a:	687b      	ldr	r3, [r7, #4]
 810321c:	68db      	ldr	r3, [r3, #12]
 810321e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8103220:	69fb      	ldr	r3, [r7, #28]
 8103222:	005b      	lsls	r3, r3, #1
 8103224:	2203      	movs	r2, #3
 8103226:	fa02 f303 	lsl.w	r3, r2, r3
 810322a:	43db      	mvns	r3, r3
 810322c:	69ba      	ldr	r2, [r7, #24]
 810322e:	4013      	ands	r3, r2
 8103230:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8103232:	683b      	ldr	r3, [r7, #0]
 8103234:	689a      	ldr	r2, [r3, #8]
 8103236:	69fb      	ldr	r3, [r7, #28]
 8103238:	005b      	lsls	r3, r3, #1
 810323a:	fa02 f303 	lsl.w	r3, r2, r3
 810323e:	69ba      	ldr	r2, [r7, #24]
 8103240:	4313      	orrs	r3, r2
 8103242:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8103244:	687b      	ldr	r3, [r7, #4]
 8103246:	69ba      	ldr	r2, [r7, #24]
 8103248:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 810324a:	683b      	ldr	r3, [r7, #0]
 810324c:	685b      	ldr	r3, [r3, #4]
 810324e:	f003 0303 	and.w	r3, r3, #3
 8103252:	2b02      	cmp	r3, #2
 8103254:	d123      	bne.n	810329e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8103256:	69fb      	ldr	r3, [r7, #28]
 8103258:	08da      	lsrs	r2, r3, #3
 810325a:	687b      	ldr	r3, [r7, #4]
 810325c:	3208      	adds	r2, #8
 810325e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8103262:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8103264:	69fb      	ldr	r3, [r7, #28]
 8103266:	f003 0307 	and.w	r3, r3, #7
 810326a:	009b      	lsls	r3, r3, #2
 810326c:	220f      	movs	r2, #15
 810326e:	fa02 f303 	lsl.w	r3, r2, r3
 8103272:	43db      	mvns	r3, r3
 8103274:	69ba      	ldr	r2, [r7, #24]
 8103276:	4013      	ands	r3, r2
 8103278:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810327a:	683b      	ldr	r3, [r7, #0]
 810327c:	691a      	ldr	r2, [r3, #16]
 810327e:	69fb      	ldr	r3, [r7, #28]
 8103280:	f003 0307 	and.w	r3, r3, #7
 8103284:	009b      	lsls	r3, r3, #2
 8103286:	fa02 f303 	lsl.w	r3, r2, r3
 810328a:	69ba      	ldr	r2, [r7, #24]
 810328c:	4313      	orrs	r3, r2
 810328e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8103290:	69fb      	ldr	r3, [r7, #28]
 8103292:	08da      	lsrs	r2, r3, #3
 8103294:	687b      	ldr	r3, [r7, #4]
 8103296:	3208      	adds	r2, #8
 8103298:	69b9      	ldr	r1, [r7, #24]
 810329a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 810329e:	687b      	ldr	r3, [r7, #4]
 81032a0:	681b      	ldr	r3, [r3, #0]
 81032a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 81032a4:	69fb      	ldr	r3, [r7, #28]
 81032a6:	005b      	lsls	r3, r3, #1
 81032a8:	2203      	movs	r2, #3
 81032aa:	fa02 f303 	lsl.w	r3, r2, r3
 81032ae:	43db      	mvns	r3, r3
 81032b0:	69ba      	ldr	r2, [r7, #24]
 81032b2:	4013      	ands	r3, r2
 81032b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81032b6:	683b      	ldr	r3, [r7, #0]
 81032b8:	685b      	ldr	r3, [r3, #4]
 81032ba:	f003 0203 	and.w	r2, r3, #3
 81032be:	69fb      	ldr	r3, [r7, #28]
 81032c0:	005b      	lsls	r3, r3, #1
 81032c2:	fa02 f303 	lsl.w	r3, r2, r3
 81032c6:	69ba      	ldr	r2, [r7, #24]
 81032c8:	4313      	orrs	r3, r2
 81032ca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81032cc:	687b      	ldr	r3, [r7, #4]
 81032ce:	69ba      	ldr	r2, [r7, #24]
 81032d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 81032d2:	683b      	ldr	r3, [r7, #0]
 81032d4:	685b      	ldr	r3, [r3, #4]
 81032d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 81032da:	2b00      	cmp	r3, #0
 81032dc:	f000 80e0 	beq.w	81034a0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81032e0:	4b2f      	ldr	r3, [pc, #188]	; (81033a0 <HAL_GPIO_Init+0x238>)
 81032e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81032e6:	4a2e      	ldr	r2, [pc, #184]	; (81033a0 <HAL_GPIO_Init+0x238>)
 81032e8:	f043 0302 	orr.w	r3, r3, #2
 81032ec:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81032f0:	4b2b      	ldr	r3, [pc, #172]	; (81033a0 <HAL_GPIO_Init+0x238>)
 81032f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81032f6:	f003 0302 	and.w	r3, r3, #2
 81032fa:	60fb      	str	r3, [r7, #12]
 81032fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 81032fe:	4a29      	ldr	r2, [pc, #164]	; (81033a4 <HAL_GPIO_Init+0x23c>)
 8103300:	69fb      	ldr	r3, [r7, #28]
 8103302:	089b      	lsrs	r3, r3, #2
 8103304:	3302      	adds	r3, #2
 8103306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810330a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 810330c:	69fb      	ldr	r3, [r7, #28]
 810330e:	f003 0303 	and.w	r3, r3, #3
 8103312:	009b      	lsls	r3, r3, #2
 8103314:	220f      	movs	r2, #15
 8103316:	fa02 f303 	lsl.w	r3, r2, r3
 810331a:	43db      	mvns	r3, r3
 810331c:	69ba      	ldr	r2, [r7, #24]
 810331e:	4013      	ands	r3, r2
 8103320:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8103322:	687b      	ldr	r3, [r7, #4]
 8103324:	4a20      	ldr	r2, [pc, #128]	; (81033a8 <HAL_GPIO_Init+0x240>)
 8103326:	4293      	cmp	r3, r2
 8103328:	d052      	beq.n	81033d0 <HAL_GPIO_Init+0x268>
 810332a:	687b      	ldr	r3, [r7, #4]
 810332c:	4a1f      	ldr	r2, [pc, #124]	; (81033ac <HAL_GPIO_Init+0x244>)
 810332e:	4293      	cmp	r3, r2
 8103330:	d031      	beq.n	8103396 <HAL_GPIO_Init+0x22e>
 8103332:	687b      	ldr	r3, [r7, #4]
 8103334:	4a1e      	ldr	r2, [pc, #120]	; (81033b0 <HAL_GPIO_Init+0x248>)
 8103336:	4293      	cmp	r3, r2
 8103338:	d02b      	beq.n	8103392 <HAL_GPIO_Init+0x22a>
 810333a:	687b      	ldr	r3, [r7, #4]
 810333c:	4a1d      	ldr	r2, [pc, #116]	; (81033b4 <HAL_GPIO_Init+0x24c>)
 810333e:	4293      	cmp	r3, r2
 8103340:	d025      	beq.n	810338e <HAL_GPIO_Init+0x226>
 8103342:	687b      	ldr	r3, [r7, #4]
 8103344:	4a1c      	ldr	r2, [pc, #112]	; (81033b8 <HAL_GPIO_Init+0x250>)
 8103346:	4293      	cmp	r3, r2
 8103348:	d01f      	beq.n	810338a <HAL_GPIO_Init+0x222>
 810334a:	687b      	ldr	r3, [r7, #4]
 810334c:	4a1b      	ldr	r2, [pc, #108]	; (81033bc <HAL_GPIO_Init+0x254>)
 810334e:	4293      	cmp	r3, r2
 8103350:	d019      	beq.n	8103386 <HAL_GPIO_Init+0x21e>
 8103352:	687b      	ldr	r3, [r7, #4]
 8103354:	4a1a      	ldr	r2, [pc, #104]	; (81033c0 <HAL_GPIO_Init+0x258>)
 8103356:	4293      	cmp	r3, r2
 8103358:	d013      	beq.n	8103382 <HAL_GPIO_Init+0x21a>
 810335a:	687b      	ldr	r3, [r7, #4]
 810335c:	4a19      	ldr	r2, [pc, #100]	; (81033c4 <HAL_GPIO_Init+0x25c>)
 810335e:	4293      	cmp	r3, r2
 8103360:	d00d      	beq.n	810337e <HAL_GPIO_Init+0x216>
 8103362:	687b      	ldr	r3, [r7, #4]
 8103364:	4a18      	ldr	r2, [pc, #96]	; (81033c8 <HAL_GPIO_Init+0x260>)
 8103366:	4293      	cmp	r3, r2
 8103368:	d007      	beq.n	810337a <HAL_GPIO_Init+0x212>
 810336a:	687b      	ldr	r3, [r7, #4]
 810336c:	4a17      	ldr	r2, [pc, #92]	; (81033cc <HAL_GPIO_Init+0x264>)
 810336e:	4293      	cmp	r3, r2
 8103370:	d101      	bne.n	8103376 <HAL_GPIO_Init+0x20e>
 8103372:	2309      	movs	r3, #9
 8103374:	e02d      	b.n	81033d2 <HAL_GPIO_Init+0x26a>
 8103376:	230a      	movs	r3, #10
 8103378:	e02b      	b.n	81033d2 <HAL_GPIO_Init+0x26a>
 810337a:	2308      	movs	r3, #8
 810337c:	e029      	b.n	81033d2 <HAL_GPIO_Init+0x26a>
 810337e:	2307      	movs	r3, #7
 8103380:	e027      	b.n	81033d2 <HAL_GPIO_Init+0x26a>
 8103382:	2306      	movs	r3, #6
 8103384:	e025      	b.n	81033d2 <HAL_GPIO_Init+0x26a>
 8103386:	2305      	movs	r3, #5
 8103388:	e023      	b.n	81033d2 <HAL_GPIO_Init+0x26a>
 810338a:	2304      	movs	r3, #4
 810338c:	e021      	b.n	81033d2 <HAL_GPIO_Init+0x26a>
 810338e:	2303      	movs	r3, #3
 8103390:	e01f      	b.n	81033d2 <HAL_GPIO_Init+0x26a>
 8103392:	2302      	movs	r3, #2
 8103394:	e01d      	b.n	81033d2 <HAL_GPIO_Init+0x26a>
 8103396:	2301      	movs	r3, #1
 8103398:	e01b      	b.n	81033d2 <HAL_GPIO_Init+0x26a>
 810339a:	bf00      	nop
 810339c:	580000c0 	.word	0x580000c0
 81033a0:	58024400 	.word	0x58024400
 81033a4:	58000400 	.word	0x58000400
 81033a8:	58020000 	.word	0x58020000
 81033ac:	58020400 	.word	0x58020400
 81033b0:	58020800 	.word	0x58020800
 81033b4:	58020c00 	.word	0x58020c00
 81033b8:	58021000 	.word	0x58021000
 81033bc:	58021400 	.word	0x58021400
 81033c0:	58021800 	.word	0x58021800
 81033c4:	58021c00 	.word	0x58021c00
 81033c8:	58022000 	.word	0x58022000
 81033cc:	58022400 	.word	0x58022400
 81033d0:	2300      	movs	r3, #0
 81033d2:	69fa      	ldr	r2, [r7, #28]
 81033d4:	f002 0203 	and.w	r2, r2, #3
 81033d8:	0092      	lsls	r2, r2, #2
 81033da:	4093      	lsls	r3, r2
 81033dc:	69ba      	ldr	r2, [r7, #24]
 81033de:	4313      	orrs	r3, r2
 81033e0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 81033e2:	4938      	ldr	r1, [pc, #224]	; (81034c4 <HAL_GPIO_Init+0x35c>)
 81033e4:	69fb      	ldr	r3, [r7, #28]
 81033e6:	089b      	lsrs	r3, r3, #2
 81033e8:	3302      	adds	r3, #2
 81033ea:	69ba      	ldr	r2, [r7, #24]
 81033ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 81033f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81033f4:	681b      	ldr	r3, [r3, #0]
 81033f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81033f8:	693b      	ldr	r3, [r7, #16]
 81033fa:	43db      	mvns	r3, r3
 81033fc:	69ba      	ldr	r2, [r7, #24]
 81033fe:	4013      	ands	r3, r2
 8103400:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8103402:	683b      	ldr	r3, [r7, #0]
 8103404:	685b      	ldr	r3, [r3, #4]
 8103406:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810340a:	2b00      	cmp	r3, #0
 810340c:	d003      	beq.n	8103416 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 810340e:	69ba      	ldr	r2, [r7, #24]
 8103410:	693b      	ldr	r3, [r7, #16]
 8103412:	4313      	orrs	r3, r2
 8103414:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8103416:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 810341a:	69bb      	ldr	r3, [r7, #24]
 810341c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 810341e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8103422:	685b      	ldr	r3, [r3, #4]
 8103424:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103426:	693b      	ldr	r3, [r7, #16]
 8103428:	43db      	mvns	r3, r3
 810342a:	69ba      	ldr	r2, [r7, #24]
 810342c:	4013      	ands	r3, r2
 810342e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8103430:	683b      	ldr	r3, [r7, #0]
 8103432:	685b      	ldr	r3, [r3, #4]
 8103434:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8103438:	2b00      	cmp	r3, #0
 810343a:	d003      	beq.n	8103444 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 810343c:	69ba      	ldr	r2, [r7, #24]
 810343e:	693b      	ldr	r3, [r7, #16]
 8103440:	4313      	orrs	r3, r2
 8103442:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8103444:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8103448:	69bb      	ldr	r3, [r7, #24]
 810344a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 810344c:	697b      	ldr	r3, [r7, #20]
 810344e:	685b      	ldr	r3, [r3, #4]
 8103450:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103452:	693b      	ldr	r3, [r7, #16]
 8103454:	43db      	mvns	r3, r3
 8103456:	69ba      	ldr	r2, [r7, #24]
 8103458:	4013      	ands	r3, r2
 810345a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 810345c:	683b      	ldr	r3, [r7, #0]
 810345e:	685b      	ldr	r3, [r3, #4]
 8103460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8103464:	2b00      	cmp	r3, #0
 8103466:	d003      	beq.n	8103470 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8103468:	69ba      	ldr	r2, [r7, #24]
 810346a:	693b      	ldr	r3, [r7, #16]
 810346c:	4313      	orrs	r3, r2
 810346e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8103470:	697b      	ldr	r3, [r7, #20]
 8103472:	69ba      	ldr	r2, [r7, #24]
 8103474:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8103476:	697b      	ldr	r3, [r7, #20]
 8103478:	681b      	ldr	r3, [r3, #0]
 810347a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810347c:	693b      	ldr	r3, [r7, #16]
 810347e:	43db      	mvns	r3, r3
 8103480:	69ba      	ldr	r2, [r7, #24]
 8103482:	4013      	ands	r3, r2
 8103484:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8103486:	683b      	ldr	r3, [r7, #0]
 8103488:	685b      	ldr	r3, [r3, #4]
 810348a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810348e:	2b00      	cmp	r3, #0
 8103490:	d003      	beq.n	810349a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8103492:	69ba      	ldr	r2, [r7, #24]
 8103494:	693b      	ldr	r3, [r7, #16]
 8103496:	4313      	orrs	r3, r2
 8103498:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 810349a:	697b      	ldr	r3, [r7, #20]
 810349c:	69ba      	ldr	r2, [r7, #24]
 810349e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 81034a0:	69fb      	ldr	r3, [r7, #28]
 81034a2:	3301      	adds	r3, #1
 81034a4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81034a6:	683b      	ldr	r3, [r7, #0]
 81034a8:	681a      	ldr	r2, [r3, #0]
 81034aa:	69fb      	ldr	r3, [r7, #28]
 81034ac:	fa22 f303 	lsr.w	r3, r2, r3
 81034b0:	2b00      	cmp	r3, #0
 81034b2:	f47f ae63 	bne.w	810317c <HAL_GPIO_Init+0x14>
  }
}
 81034b6:	bf00      	nop
 81034b8:	bf00      	nop
 81034ba:	3724      	adds	r7, #36	; 0x24
 81034bc:	46bd      	mov	sp, r7
 81034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034c2:	4770      	bx	lr
 81034c4:	58000400 	.word	0x58000400

081034c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 81034c8:	b480      	push	{r7}
 81034ca:	b083      	sub	sp, #12
 81034cc:	af00      	add	r7, sp, #0
 81034ce:	6078      	str	r0, [r7, #4]
 81034d0:	460b      	mov	r3, r1
 81034d2:	807b      	strh	r3, [r7, #2]
 81034d4:	4613      	mov	r3, r2
 81034d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 81034d8:	787b      	ldrb	r3, [r7, #1]
 81034da:	2b00      	cmp	r3, #0
 81034dc:	d003      	beq.n	81034e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 81034de:	887a      	ldrh	r2, [r7, #2]
 81034e0:	687b      	ldr	r3, [r7, #4]
 81034e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 81034e4:	e003      	b.n	81034ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 81034e6:	887b      	ldrh	r3, [r7, #2]
 81034e8:	041a      	lsls	r2, r3, #16
 81034ea:	687b      	ldr	r3, [r7, #4]
 81034ec:	619a      	str	r2, [r3, #24]
}
 81034ee:	bf00      	nop
 81034f0:	370c      	adds	r7, #12
 81034f2:	46bd      	mov	sp, r7
 81034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034f8:	4770      	bx	lr
	...

081034fc <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81034fc:	b480      	push	{r7}
 81034fe:	b083      	sub	sp, #12
 8103500:	af00      	add	r7, sp, #0
 8103502:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8103504:	4b05      	ldr	r3, [pc, #20]	; (810351c <HAL_HSEM_ActivateNotification+0x20>)
 8103506:	681a      	ldr	r2, [r3, #0]
 8103508:	4904      	ldr	r1, [pc, #16]	; (810351c <HAL_HSEM_ActivateNotification+0x20>)
 810350a:	687b      	ldr	r3, [r7, #4]
 810350c:	4313      	orrs	r3, r2
 810350e:	600b      	str	r3, [r1, #0]
#endif
}
 8103510:	bf00      	nop
 8103512:	370c      	adds	r7, #12
 8103514:	46bd      	mov	sp, r7
 8103516:	f85d 7b04 	ldr.w	r7, [sp], #4
 810351a:	4770      	bx	lr
 810351c:	58026510 	.word	0x58026510

08103520 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8103520:	b580      	push	{r7, lr}
 8103522:	b084      	sub	sp, #16
 8103524:	af00      	add	r7, sp, #0
 8103526:	60f8      	str	r0, [r7, #12]
 8103528:	460b      	mov	r3, r1
 810352a:	607a      	str	r2, [r7, #4]
 810352c:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810352e:	4b37      	ldr	r3, [pc, #220]	; (810360c <HAL_PWREx_EnterSTOPMode+0xec>)
 8103530:	681b      	ldr	r3, [r3, #0]
 8103532:	f023 0201 	bic.w	r2, r3, #1
 8103536:	4935      	ldr	r1, [pc, #212]	; (810360c <HAL_PWREx_EnterSTOPMode+0xec>)
 8103538:	68fb      	ldr	r3, [r7, #12]
 810353a:	4313      	orrs	r3, r2
 810353c:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 810353e:	687b      	ldr	r3, [r7, #4]
 8103540:	2b00      	cmp	r3, #0
 8103542:	d123      	bne.n	810358c <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8103544:	f7ff f898 	bl	8102678 <HAL_GetCurrentCPUID>
 8103548:	4603      	mov	r3, r0
 810354a:	2b03      	cmp	r3, #3
 810354c:	d158      	bne.n	8103600 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 810354e:	4b2f      	ldr	r3, [pc, #188]	; (810360c <HAL_PWREx_EnterSTOPMode+0xec>)
 8103550:	691b      	ldr	r3, [r3, #16]
 8103552:	4a2e      	ldr	r2, [pc, #184]	; (810360c <HAL_PWREx_EnterSTOPMode+0xec>)
 8103554:	f023 0301 	bic.w	r3, r3, #1
 8103558:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810355a:	4b2d      	ldr	r3, [pc, #180]	; (8103610 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810355c:	691b      	ldr	r3, [r3, #16]
 810355e:	4a2c      	ldr	r2, [pc, #176]	; (8103610 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103560:	f043 0304 	orr.w	r3, r3, #4
 8103564:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8103566:	f3bf 8f4f 	dsb	sy
}
 810356a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810356c:	f3bf 8f6f 	isb	sy
}
 8103570:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8103572:	7afb      	ldrb	r3, [r7, #11]
 8103574:	2b01      	cmp	r3, #1
 8103576:	d101      	bne.n	810357c <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8103578:	bf30      	wfi
 810357a:	e000      	b.n	810357e <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810357c:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810357e:	4b24      	ldr	r3, [pc, #144]	; (8103610 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103580:	691b      	ldr	r3, [r3, #16]
 8103582:	4a23      	ldr	r2, [pc, #140]	; (8103610 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103584:	f023 0304 	bic.w	r3, r3, #4
 8103588:	6113      	str	r3, [r2, #16]
 810358a:	e03c      	b.n	8103606 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 810358c:	687b      	ldr	r3, [r7, #4]
 810358e:	2b01      	cmp	r3, #1
 8103590:	d123      	bne.n	81035da <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8103592:	f7ff f871 	bl	8102678 <HAL_GetCurrentCPUID>
 8103596:	4603      	mov	r3, r0
 8103598:	2b01      	cmp	r3, #1
 810359a:	d133      	bne.n	8103604 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 810359c:	4b1b      	ldr	r3, [pc, #108]	; (810360c <HAL_PWREx_EnterSTOPMode+0xec>)
 810359e:	695b      	ldr	r3, [r3, #20]
 81035a0:	4a1a      	ldr	r2, [pc, #104]	; (810360c <HAL_PWREx_EnterSTOPMode+0xec>)
 81035a2:	f023 0302 	bic.w	r3, r3, #2
 81035a6:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81035a8:	4b19      	ldr	r3, [pc, #100]	; (8103610 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81035aa:	691b      	ldr	r3, [r3, #16]
 81035ac:	4a18      	ldr	r2, [pc, #96]	; (8103610 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81035ae:	f043 0304 	orr.w	r3, r3, #4
 81035b2:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81035b4:	f3bf 8f4f 	dsb	sy
}
 81035b8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81035ba:	f3bf 8f6f 	isb	sy
}
 81035be:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81035c0:	7afb      	ldrb	r3, [r7, #11]
 81035c2:	2b01      	cmp	r3, #1
 81035c4:	d101      	bne.n	81035ca <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81035c6:	bf30      	wfi
 81035c8:	e000      	b.n	81035cc <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81035ca:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81035cc:	4b10      	ldr	r3, [pc, #64]	; (8103610 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81035ce:	691b      	ldr	r3, [r3, #16]
 81035d0:	4a0f      	ldr	r2, [pc, #60]	; (8103610 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81035d2:	f023 0304 	bic.w	r3, r3, #4
 81035d6:	6113      	str	r3, [r2, #16]
 81035d8:	e015      	b.n	8103606 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81035da:	f7ff f84d 	bl	8102678 <HAL_GetCurrentCPUID>
 81035de:	4603      	mov	r3, r0
 81035e0:	2b03      	cmp	r3, #3
 81035e2:	d106      	bne.n	81035f2 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 81035e4:	4b09      	ldr	r3, [pc, #36]	; (810360c <HAL_PWREx_EnterSTOPMode+0xec>)
 81035e6:	691b      	ldr	r3, [r3, #16]
 81035e8:	4a08      	ldr	r2, [pc, #32]	; (810360c <HAL_PWREx_EnterSTOPMode+0xec>)
 81035ea:	f023 0304 	bic.w	r3, r3, #4
 81035ee:	6113      	str	r3, [r2, #16]
 81035f0:	e009      	b.n	8103606 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 81035f2:	4b06      	ldr	r3, [pc, #24]	; (810360c <HAL_PWREx_EnterSTOPMode+0xec>)
 81035f4:	695b      	ldr	r3, [r3, #20]
 81035f6:	4a05      	ldr	r2, [pc, #20]	; (810360c <HAL_PWREx_EnterSTOPMode+0xec>)
 81035f8:	f023 0304 	bic.w	r3, r3, #4
 81035fc:	6153      	str	r3, [r2, #20]
 81035fe:	e002      	b.n	8103606 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103600:	bf00      	nop
 8103602:	e000      	b.n	8103606 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103604:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8103606:	3710      	adds	r7, #16
 8103608:	46bd      	mov	sp, r7
 810360a:	bd80      	pop	{r7, pc}
 810360c:	58024800 	.word	0x58024800
 8103610:	e000ed00 	.word	0xe000ed00

08103614 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8103614:	b580      	push	{r7, lr}
 8103616:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8103618:	f7ff f82e 	bl	8102678 <HAL_GetCurrentCPUID>
 810361c:	4603      	mov	r3, r0
 810361e:	2b03      	cmp	r3, #3
 8103620:	d101      	bne.n	8103626 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8103622:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8103624:	e001      	b.n	810362a <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8103626:	bf40      	sev
    __WFE ();
 8103628:	bf20      	wfe
}
 810362a:	bf00      	nop
 810362c:	bd80      	pop	{r7, pc}
	...

08103630 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8103630:	b480      	push	{r7}
 8103632:	b089      	sub	sp, #36	; 0x24
 8103634:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8103636:	4bb3      	ldr	r3, [pc, #716]	; (8103904 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103638:	691b      	ldr	r3, [r3, #16]
 810363a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810363e:	2b18      	cmp	r3, #24
 8103640:	f200 8155 	bhi.w	81038ee <HAL_RCC_GetSysClockFreq+0x2be>
 8103644:	a201      	add	r2, pc, #4	; (adr r2, 810364c <HAL_RCC_GetSysClockFreq+0x1c>)
 8103646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810364a:	bf00      	nop
 810364c:	081036b1 	.word	0x081036b1
 8103650:	081038ef 	.word	0x081038ef
 8103654:	081038ef 	.word	0x081038ef
 8103658:	081038ef 	.word	0x081038ef
 810365c:	081038ef 	.word	0x081038ef
 8103660:	081038ef 	.word	0x081038ef
 8103664:	081038ef 	.word	0x081038ef
 8103668:	081038ef 	.word	0x081038ef
 810366c:	081036d7 	.word	0x081036d7
 8103670:	081038ef 	.word	0x081038ef
 8103674:	081038ef 	.word	0x081038ef
 8103678:	081038ef 	.word	0x081038ef
 810367c:	081038ef 	.word	0x081038ef
 8103680:	081038ef 	.word	0x081038ef
 8103684:	081038ef 	.word	0x081038ef
 8103688:	081038ef 	.word	0x081038ef
 810368c:	081036dd 	.word	0x081036dd
 8103690:	081038ef 	.word	0x081038ef
 8103694:	081038ef 	.word	0x081038ef
 8103698:	081038ef 	.word	0x081038ef
 810369c:	081038ef 	.word	0x081038ef
 81036a0:	081038ef 	.word	0x081038ef
 81036a4:	081038ef 	.word	0x081038ef
 81036a8:	081038ef 	.word	0x081038ef
 81036ac:	081036e3 	.word	0x081036e3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81036b0:	4b94      	ldr	r3, [pc, #592]	; (8103904 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81036b2:	681b      	ldr	r3, [r3, #0]
 81036b4:	f003 0320 	and.w	r3, r3, #32
 81036b8:	2b00      	cmp	r3, #0
 81036ba:	d009      	beq.n	81036d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81036bc:	4b91      	ldr	r3, [pc, #580]	; (8103904 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81036be:	681b      	ldr	r3, [r3, #0]
 81036c0:	08db      	lsrs	r3, r3, #3
 81036c2:	f003 0303 	and.w	r3, r3, #3
 81036c6:	4a90      	ldr	r2, [pc, #576]	; (8103908 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81036c8:	fa22 f303 	lsr.w	r3, r2, r3
 81036cc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 81036ce:	e111      	b.n	81038f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81036d0:	4b8d      	ldr	r3, [pc, #564]	; (8103908 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81036d2:	61bb      	str	r3, [r7, #24]
    break;
 81036d4:	e10e      	b.n	81038f4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 81036d6:	4b8d      	ldr	r3, [pc, #564]	; (810390c <HAL_RCC_GetSysClockFreq+0x2dc>)
 81036d8:	61bb      	str	r3, [r7, #24]
    break;
 81036da:	e10b      	b.n	81038f4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 81036dc:	4b8c      	ldr	r3, [pc, #560]	; (8103910 <HAL_RCC_GetSysClockFreq+0x2e0>)
 81036de:	61bb      	str	r3, [r7, #24]
    break;
 81036e0:	e108      	b.n	81038f4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81036e2:	4b88      	ldr	r3, [pc, #544]	; (8103904 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81036e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81036e6:	f003 0303 	and.w	r3, r3, #3
 81036ea:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 81036ec:	4b85      	ldr	r3, [pc, #532]	; (8103904 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81036ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81036f0:	091b      	lsrs	r3, r3, #4
 81036f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81036f6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 81036f8:	4b82      	ldr	r3, [pc, #520]	; (8103904 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81036fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81036fc:	f003 0301 	and.w	r3, r3, #1
 8103700:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8103702:	4b80      	ldr	r3, [pc, #512]	; (8103904 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8103706:	08db      	lsrs	r3, r3, #3
 8103708:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810370c:	68fa      	ldr	r2, [r7, #12]
 810370e:	fb02 f303 	mul.w	r3, r2, r3
 8103712:	ee07 3a90 	vmov	s15, r3
 8103716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810371a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 810371e:	693b      	ldr	r3, [r7, #16]
 8103720:	2b00      	cmp	r3, #0
 8103722:	f000 80e1 	beq.w	81038e8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8103726:	697b      	ldr	r3, [r7, #20]
 8103728:	2b02      	cmp	r3, #2
 810372a:	f000 8083 	beq.w	8103834 <HAL_RCC_GetSysClockFreq+0x204>
 810372e:	697b      	ldr	r3, [r7, #20]
 8103730:	2b02      	cmp	r3, #2
 8103732:	f200 80a1 	bhi.w	8103878 <HAL_RCC_GetSysClockFreq+0x248>
 8103736:	697b      	ldr	r3, [r7, #20]
 8103738:	2b00      	cmp	r3, #0
 810373a:	d003      	beq.n	8103744 <HAL_RCC_GetSysClockFreq+0x114>
 810373c:	697b      	ldr	r3, [r7, #20]
 810373e:	2b01      	cmp	r3, #1
 8103740:	d056      	beq.n	81037f0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8103742:	e099      	b.n	8103878 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103744:	4b6f      	ldr	r3, [pc, #444]	; (8103904 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103746:	681b      	ldr	r3, [r3, #0]
 8103748:	f003 0320 	and.w	r3, r3, #32
 810374c:	2b00      	cmp	r3, #0
 810374e:	d02d      	beq.n	81037ac <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8103750:	4b6c      	ldr	r3, [pc, #432]	; (8103904 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103752:	681b      	ldr	r3, [r3, #0]
 8103754:	08db      	lsrs	r3, r3, #3
 8103756:	f003 0303 	and.w	r3, r3, #3
 810375a:	4a6b      	ldr	r2, [pc, #428]	; (8103908 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810375c:	fa22 f303 	lsr.w	r3, r2, r3
 8103760:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103762:	687b      	ldr	r3, [r7, #4]
 8103764:	ee07 3a90 	vmov	s15, r3
 8103768:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810376c:	693b      	ldr	r3, [r7, #16]
 810376e:	ee07 3a90 	vmov	s15, r3
 8103772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810377a:	4b62      	ldr	r3, [pc, #392]	; (8103904 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810377c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810377e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103782:	ee07 3a90 	vmov	s15, r3
 8103786:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810378a:	ed97 6a02 	vldr	s12, [r7, #8]
 810378e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8103914 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103792:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103796:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810379a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810379e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81037a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81037a6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 81037aa:	e087      	b.n	81038bc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81037ac:	693b      	ldr	r3, [r7, #16]
 81037ae:	ee07 3a90 	vmov	s15, r3
 81037b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81037b6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8103918 <HAL_RCC_GetSysClockFreq+0x2e8>
 81037ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81037be:	4b51      	ldr	r3, [pc, #324]	; (8103904 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81037c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81037c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81037c6:	ee07 3a90 	vmov	s15, r3
 81037ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81037ce:	ed97 6a02 	vldr	s12, [r7, #8]
 81037d2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8103914 <HAL_RCC_GetSysClockFreq+0x2e4>
 81037d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81037da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81037de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81037e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81037e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81037ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81037ee:	e065      	b.n	81038bc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81037f0:	693b      	ldr	r3, [r7, #16]
 81037f2:	ee07 3a90 	vmov	s15, r3
 81037f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81037fa:	eddf 6a48 	vldr	s13, [pc, #288]	; 810391c <HAL_RCC_GetSysClockFreq+0x2ec>
 81037fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103802:	4b40      	ldr	r3, [pc, #256]	; (8103904 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810380a:	ee07 3a90 	vmov	s15, r3
 810380e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103812:	ed97 6a02 	vldr	s12, [r7, #8]
 8103816:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8103914 <HAL_RCC_GetSysClockFreq+0x2e4>
 810381a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810381e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103822:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103826:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810382a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810382e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103832:	e043      	b.n	81038bc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103834:	693b      	ldr	r3, [r7, #16]
 8103836:	ee07 3a90 	vmov	s15, r3
 810383a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810383e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8103920 <HAL_RCC_GetSysClockFreq+0x2f0>
 8103842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103846:	4b2f      	ldr	r3, [pc, #188]	; (8103904 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810384a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810384e:	ee07 3a90 	vmov	s15, r3
 8103852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103856:	ed97 6a02 	vldr	s12, [r7, #8]
 810385a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8103914 <HAL_RCC_GetSysClockFreq+0x2e4>
 810385e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103862:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103866:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810386a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810386e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103872:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103876:	e021      	b.n	81038bc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103878:	693b      	ldr	r3, [r7, #16]
 810387a:	ee07 3a90 	vmov	s15, r3
 810387e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103882:	eddf 6a26 	vldr	s13, [pc, #152]	; 810391c <HAL_RCC_GetSysClockFreq+0x2ec>
 8103886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810388a:	4b1e      	ldr	r3, [pc, #120]	; (8103904 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810388c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810388e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103892:	ee07 3a90 	vmov	s15, r3
 8103896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810389a:	ed97 6a02 	vldr	s12, [r7, #8]
 810389e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8103914 <HAL_RCC_GetSysClockFreq+0x2e4>
 81038a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81038a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81038aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81038ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81038b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81038b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81038ba:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 81038bc:	4b11      	ldr	r3, [pc, #68]	; (8103904 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81038be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81038c0:	0a5b      	lsrs	r3, r3, #9
 81038c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81038c6:	3301      	adds	r3, #1
 81038c8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 81038ca:	683b      	ldr	r3, [r7, #0]
 81038cc:	ee07 3a90 	vmov	s15, r3
 81038d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81038d4:	edd7 6a07 	vldr	s13, [r7, #28]
 81038d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81038dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81038e0:	ee17 3a90 	vmov	r3, s15
 81038e4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 81038e6:	e005      	b.n	81038f4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 81038e8:	2300      	movs	r3, #0
 81038ea:	61bb      	str	r3, [r7, #24]
    break;
 81038ec:	e002      	b.n	81038f4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 81038ee:	4b07      	ldr	r3, [pc, #28]	; (810390c <HAL_RCC_GetSysClockFreq+0x2dc>)
 81038f0:	61bb      	str	r3, [r7, #24]
    break;
 81038f2:	bf00      	nop
  }

  return sysclockfreq;
 81038f4:	69bb      	ldr	r3, [r7, #24]
}
 81038f6:	4618      	mov	r0, r3
 81038f8:	3724      	adds	r7, #36	; 0x24
 81038fa:	46bd      	mov	sp, r7
 81038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103900:	4770      	bx	lr
 8103902:	bf00      	nop
 8103904:	58024400 	.word	0x58024400
 8103908:	03d09000 	.word	0x03d09000
 810390c:	003d0900 	.word	0x003d0900
 8103910:	007a1200 	.word	0x007a1200
 8103914:	46000000 	.word	0x46000000
 8103918:	4c742400 	.word	0x4c742400
 810391c:	4a742400 	.word	0x4a742400
 8103920:	4af42400 	.word	0x4af42400

08103924 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8103924:	b580      	push	{r7, lr}
 8103926:	b082      	sub	sp, #8
 8103928:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810392a:	f7ff fe81 	bl	8103630 <HAL_RCC_GetSysClockFreq>
 810392e:	4602      	mov	r2, r0
 8103930:	4b11      	ldr	r3, [pc, #68]	; (8103978 <HAL_RCC_GetHCLKFreq+0x54>)
 8103932:	699b      	ldr	r3, [r3, #24]
 8103934:	0a1b      	lsrs	r3, r3, #8
 8103936:	f003 030f 	and.w	r3, r3, #15
 810393a:	4910      	ldr	r1, [pc, #64]	; (810397c <HAL_RCC_GetHCLKFreq+0x58>)
 810393c:	5ccb      	ldrb	r3, [r1, r3]
 810393e:	f003 031f 	and.w	r3, r3, #31
 8103942:	fa22 f303 	lsr.w	r3, r2, r3
 8103946:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8103948:	4b0b      	ldr	r3, [pc, #44]	; (8103978 <HAL_RCC_GetHCLKFreq+0x54>)
 810394a:	699b      	ldr	r3, [r3, #24]
 810394c:	f003 030f 	and.w	r3, r3, #15
 8103950:	4a0a      	ldr	r2, [pc, #40]	; (810397c <HAL_RCC_GetHCLKFreq+0x58>)
 8103952:	5cd3      	ldrb	r3, [r2, r3]
 8103954:	f003 031f 	and.w	r3, r3, #31
 8103958:	687a      	ldr	r2, [r7, #4]
 810395a:	fa22 f303 	lsr.w	r3, r2, r3
 810395e:	4a08      	ldr	r2, [pc, #32]	; (8103980 <HAL_RCC_GetHCLKFreq+0x5c>)
 8103960:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8103962:	4b07      	ldr	r3, [pc, #28]	; (8103980 <HAL_RCC_GetHCLKFreq+0x5c>)
 8103964:	681b      	ldr	r3, [r3, #0]
 8103966:	4a07      	ldr	r2, [pc, #28]	; (8103984 <HAL_RCC_GetHCLKFreq+0x60>)
 8103968:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 810396a:	4b05      	ldr	r3, [pc, #20]	; (8103980 <HAL_RCC_GetHCLKFreq+0x5c>)
 810396c:	681b      	ldr	r3, [r3, #0]
}
 810396e:	4618      	mov	r0, r3
 8103970:	3708      	adds	r7, #8
 8103972:	46bd      	mov	sp, r7
 8103974:	bd80      	pop	{r7, pc}
 8103976:	bf00      	nop
 8103978:	58024400 	.word	0x58024400
 810397c:	0810e700 	.word	0x0810e700
 8103980:	10000004 	.word	0x10000004
 8103984:	10000000 	.word	0x10000000

08103988 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8103988:	b580      	push	{r7, lr}
 810398a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 810398c:	f7ff ffca 	bl	8103924 <HAL_RCC_GetHCLKFreq>
 8103990:	4602      	mov	r2, r0
 8103992:	4b06      	ldr	r3, [pc, #24]	; (81039ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8103994:	69db      	ldr	r3, [r3, #28]
 8103996:	091b      	lsrs	r3, r3, #4
 8103998:	f003 0307 	and.w	r3, r3, #7
 810399c:	4904      	ldr	r1, [pc, #16]	; (81039b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 810399e:	5ccb      	ldrb	r3, [r1, r3]
 81039a0:	f003 031f 	and.w	r3, r3, #31
 81039a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 81039a8:	4618      	mov	r0, r3
 81039aa:	bd80      	pop	{r7, pc}
 81039ac:	58024400 	.word	0x58024400
 81039b0:	0810e700 	.word	0x0810e700

081039b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 81039b4:	b580      	push	{r7, lr}
 81039b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 81039b8:	f7ff ffb4 	bl	8103924 <HAL_RCC_GetHCLKFreq>
 81039bc:	4602      	mov	r2, r0
 81039be:	4b06      	ldr	r3, [pc, #24]	; (81039d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 81039c0:	69db      	ldr	r3, [r3, #28]
 81039c2:	0a1b      	lsrs	r3, r3, #8
 81039c4:	f003 0307 	and.w	r3, r3, #7
 81039c8:	4904      	ldr	r1, [pc, #16]	; (81039dc <HAL_RCC_GetPCLK2Freq+0x28>)
 81039ca:	5ccb      	ldrb	r3, [r1, r3]
 81039cc:	f003 031f 	and.w	r3, r3, #31
 81039d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 81039d4:	4618      	mov	r0, r3
 81039d6:	bd80      	pop	{r7, pc}
 81039d8:	58024400 	.word	0x58024400
 81039dc:	0810e700 	.word	0x0810e700

081039e0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 81039e0:	b580      	push	{r7, lr}
 81039e2:	b086      	sub	sp, #24
 81039e4:	af00      	add	r7, sp, #0
 81039e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 81039e8:	2300      	movs	r3, #0
 81039ea:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 81039ec:	2300      	movs	r3, #0
 81039ee:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 81039f0:	687b      	ldr	r3, [r7, #4]
 81039f2:	681b      	ldr	r3, [r3, #0]
 81039f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81039f8:	2b00      	cmp	r3, #0
 81039fa:	d03f      	beq.n	8103a7c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 81039fc:	687b      	ldr	r3, [r7, #4]
 81039fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103a00:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103a04:	d02a      	beq.n	8103a5c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8103a06:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103a0a:	d824      	bhi.n	8103a56 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8103a0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103a10:	d018      	beq.n	8103a44 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8103a12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103a16:	d81e      	bhi.n	8103a56 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8103a18:	2b00      	cmp	r3, #0
 8103a1a:	d003      	beq.n	8103a24 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8103a1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103a20:	d007      	beq.n	8103a32 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8103a22:	e018      	b.n	8103a56 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103a24:	4ba3      	ldr	r3, [pc, #652]	; (8103cb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103a28:	4aa2      	ldr	r2, [pc, #648]	; (8103cb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103a2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103a2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8103a30:	e015      	b.n	8103a5e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8103a32:	687b      	ldr	r3, [r7, #4]
 8103a34:	3304      	adds	r3, #4
 8103a36:	2102      	movs	r1, #2
 8103a38:	4618      	mov	r0, r3
 8103a3a:	f001 f9d5 	bl	8104de8 <RCCEx_PLL2_Config>
 8103a3e:	4603      	mov	r3, r0
 8103a40:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8103a42:	e00c      	b.n	8103a5e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103a44:	687b      	ldr	r3, [r7, #4]
 8103a46:	3324      	adds	r3, #36	; 0x24
 8103a48:	2102      	movs	r1, #2
 8103a4a:	4618      	mov	r0, r3
 8103a4c:	f001 fa7e 	bl	8104f4c <RCCEx_PLL3_Config>
 8103a50:	4603      	mov	r3, r0
 8103a52:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8103a54:	e003      	b.n	8103a5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103a56:	2301      	movs	r3, #1
 8103a58:	75fb      	strb	r3, [r7, #23]
      break;
 8103a5a:	e000      	b.n	8103a5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8103a5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103a5e:	7dfb      	ldrb	r3, [r7, #23]
 8103a60:	2b00      	cmp	r3, #0
 8103a62:	d109      	bne.n	8103a78 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8103a64:	4b93      	ldr	r3, [pc, #588]	; (8103cb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103a68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8103a6c:	687b      	ldr	r3, [r7, #4]
 8103a6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103a70:	4990      	ldr	r1, [pc, #576]	; (8103cb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103a72:	4313      	orrs	r3, r2
 8103a74:	650b      	str	r3, [r1, #80]	; 0x50
 8103a76:	e001      	b.n	8103a7c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103a78:	7dfb      	ldrb	r3, [r7, #23]
 8103a7a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8103a7c:	687b      	ldr	r3, [r7, #4]
 8103a7e:	681b      	ldr	r3, [r3, #0]
 8103a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103a84:	2b00      	cmp	r3, #0
 8103a86:	d03d      	beq.n	8103b04 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8103a88:	687b      	ldr	r3, [r7, #4]
 8103a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103a8c:	2b04      	cmp	r3, #4
 8103a8e:	d826      	bhi.n	8103ade <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8103a90:	a201      	add	r2, pc, #4	; (adr r2, 8103a98 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8103a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103a96:	bf00      	nop
 8103a98:	08103aad 	.word	0x08103aad
 8103a9c:	08103abb 	.word	0x08103abb
 8103aa0:	08103acd 	.word	0x08103acd
 8103aa4:	08103ae5 	.word	0x08103ae5
 8103aa8:	08103ae5 	.word	0x08103ae5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103aac:	4b81      	ldr	r3, [pc, #516]	; (8103cb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103ab0:	4a80      	ldr	r2, [pc, #512]	; (8103cb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103ab2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103ab6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103ab8:	e015      	b.n	8103ae6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103aba:	687b      	ldr	r3, [r7, #4]
 8103abc:	3304      	adds	r3, #4
 8103abe:	2100      	movs	r1, #0
 8103ac0:	4618      	mov	r0, r3
 8103ac2:	f001 f991 	bl	8104de8 <RCCEx_PLL2_Config>
 8103ac6:	4603      	mov	r3, r0
 8103ac8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103aca:	e00c      	b.n	8103ae6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8103acc:	687b      	ldr	r3, [r7, #4]
 8103ace:	3324      	adds	r3, #36	; 0x24
 8103ad0:	2100      	movs	r1, #0
 8103ad2:	4618      	mov	r0, r3
 8103ad4:	f001 fa3a 	bl	8104f4c <RCCEx_PLL3_Config>
 8103ad8:	4603      	mov	r3, r0
 8103ada:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103adc:	e003      	b.n	8103ae6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103ade:	2301      	movs	r3, #1
 8103ae0:	75fb      	strb	r3, [r7, #23]
      break;
 8103ae2:	e000      	b.n	8103ae6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8103ae4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103ae6:	7dfb      	ldrb	r3, [r7, #23]
 8103ae8:	2b00      	cmp	r3, #0
 8103aea:	d109      	bne.n	8103b00 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8103aec:	4b71      	ldr	r3, [pc, #452]	; (8103cb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103aee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103af0:	f023 0207 	bic.w	r2, r3, #7
 8103af4:	687b      	ldr	r3, [r7, #4]
 8103af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103af8:	496e      	ldr	r1, [pc, #440]	; (8103cb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103afa:	4313      	orrs	r3, r2
 8103afc:	650b      	str	r3, [r1, #80]	; 0x50
 8103afe:	e001      	b.n	8103b04 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103b00:	7dfb      	ldrb	r3, [r7, #23]
 8103b02:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8103b04:	687b      	ldr	r3, [r7, #4]
 8103b06:	681b      	ldr	r3, [r3, #0]
 8103b08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8103b0c:	2b00      	cmp	r3, #0
 8103b0e:	d042      	beq.n	8103b96 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8103b10:	687b      	ldr	r3, [r7, #4]
 8103b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103b14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103b18:	d02b      	beq.n	8103b72 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8103b1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103b1e:	d825      	bhi.n	8103b6c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8103b20:	2bc0      	cmp	r3, #192	; 0xc0
 8103b22:	d028      	beq.n	8103b76 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8103b24:	2bc0      	cmp	r3, #192	; 0xc0
 8103b26:	d821      	bhi.n	8103b6c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8103b28:	2b80      	cmp	r3, #128	; 0x80
 8103b2a:	d016      	beq.n	8103b5a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8103b2c:	2b80      	cmp	r3, #128	; 0x80
 8103b2e:	d81d      	bhi.n	8103b6c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8103b30:	2b00      	cmp	r3, #0
 8103b32:	d002      	beq.n	8103b3a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8103b34:	2b40      	cmp	r3, #64	; 0x40
 8103b36:	d007      	beq.n	8103b48 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8103b38:	e018      	b.n	8103b6c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103b3a:	4b5e      	ldr	r3, [pc, #376]	; (8103cb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103b3e:	4a5d      	ldr	r2, [pc, #372]	; (8103cb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103b44:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8103b46:	e017      	b.n	8103b78 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103b48:	687b      	ldr	r3, [r7, #4]
 8103b4a:	3304      	adds	r3, #4
 8103b4c:	2100      	movs	r1, #0
 8103b4e:	4618      	mov	r0, r3
 8103b50:	f001 f94a 	bl	8104de8 <RCCEx_PLL2_Config>
 8103b54:	4603      	mov	r3, r0
 8103b56:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8103b58:	e00e      	b.n	8103b78 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8103b5a:	687b      	ldr	r3, [r7, #4]
 8103b5c:	3324      	adds	r3, #36	; 0x24
 8103b5e:	2100      	movs	r1, #0
 8103b60:	4618      	mov	r0, r3
 8103b62:	f001 f9f3 	bl	8104f4c <RCCEx_PLL3_Config>
 8103b66:	4603      	mov	r3, r0
 8103b68:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8103b6a:	e005      	b.n	8103b78 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103b6c:	2301      	movs	r3, #1
 8103b6e:	75fb      	strb	r3, [r7, #23]
      break;
 8103b70:	e002      	b.n	8103b78 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8103b72:	bf00      	nop
 8103b74:	e000      	b.n	8103b78 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8103b76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103b78:	7dfb      	ldrb	r3, [r7, #23]
 8103b7a:	2b00      	cmp	r3, #0
 8103b7c:	d109      	bne.n	8103b92 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8103b7e:	4b4d      	ldr	r3, [pc, #308]	; (8103cb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103b80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103b82:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8103b86:	687b      	ldr	r3, [r7, #4]
 8103b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103b8a:	494a      	ldr	r1, [pc, #296]	; (8103cb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103b8c:	4313      	orrs	r3, r2
 8103b8e:	650b      	str	r3, [r1, #80]	; 0x50
 8103b90:	e001      	b.n	8103b96 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103b92:	7dfb      	ldrb	r3, [r7, #23]
 8103b94:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8103b96:	687b      	ldr	r3, [r7, #4]
 8103b98:	681b      	ldr	r3, [r3, #0]
 8103b9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8103b9e:	2b00      	cmp	r3, #0
 8103ba0:	d049      	beq.n	8103c36 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8103ba2:	687b      	ldr	r3, [r7, #4]
 8103ba4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8103ba8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8103bac:	d030      	beq.n	8103c10 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8103bae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8103bb2:	d82a      	bhi.n	8103c0a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8103bb4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8103bb8:	d02c      	beq.n	8103c14 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8103bba:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8103bbe:	d824      	bhi.n	8103c0a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8103bc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103bc4:	d018      	beq.n	8103bf8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8103bc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103bca:	d81e      	bhi.n	8103c0a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8103bcc:	2b00      	cmp	r3, #0
 8103bce:	d003      	beq.n	8103bd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8103bd0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103bd4:	d007      	beq.n	8103be6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8103bd6:	e018      	b.n	8103c0a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103bd8:	4b36      	ldr	r3, [pc, #216]	; (8103cb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103bdc:	4a35      	ldr	r2, [pc, #212]	; (8103cb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103bde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103be2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103be4:	e017      	b.n	8103c16 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103be6:	687b      	ldr	r3, [r7, #4]
 8103be8:	3304      	adds	r3, #4
 8103bea:	2100      	movs	r1, #0
 8103bec:	4618      	mov	r0, r3
 8103bee:	f001 f8fb 	bl	8104de8 <RCCEx_PLL2_Config>
 8103bf2:	4603      	mov	r3, r0
 8103bf4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8103bf6:	e00e      	b.n	8103c16 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8103bf8:	687b      	ldr	r3, [r7, #4]
 8103bfa:	3324      	adds	r3, #36	; 0x24
 8103bfc:	2100      	movs	r1, #0
 8103bfe:	4618      	mov	r0, r3
 8103c00:	f001 f9a4 	bl	8104f4c <RCCEx_PLL3_Config>
 8103c04:	4603      	mov	r3, r0
 8103c06:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103c08:	e005      	b.n	8103c16 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8103c0a:	2301      	movs	r3, #1
 8103c0c:	75fb      	strb	r3, [r7, #23]
      break;
 8103c0e:	e002      	b.n	8103c16 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8103c10:	bf00      	nop
 8103c12:	e000      	b.n	8103c16 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8103c14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103c16:	7dfb      	ldrb	r3, [r7, #23]
 8103c18:	2b00      	cmp	r3, #0
 8103c1a:	d10a      	bne.n	8103c32 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8103c1c:	4b25      	ldr	r3, [pc, #148]	; (8103cb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103c20:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8103c24:	687b      	ldr	r3, [r7, #4]
 8103c26:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8103c2a:	4922      	ldr	r1, [pc, #136]	; (8103cb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103c2c:	4313      	orrs	r3, r2
 8103c2e:	658b      	str	r3, [r1, #88]	; 0x58
 8103c30:	e001      	b.n	8103c36 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103c32:	7dfb      	ldrb	r3, [r7, #23]
 8103c34:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8103c36:	687b      	ldr	r3, [r7, #4]
 8103c38:	681b      	ldr	r3, [r3, #0]
 8103c3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8103c3e:	2b00      	cmp	r3, #0
 8103c40:	d04b      	beq.n	8103cda <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8103c42:	687b      	ldr	r3, [r7, #4]
 8103c44:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8103c48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8103c4c:	d030      	beq.n	8103cb0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8103c4e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8103c52:	d82a      	bhi.n	8103caa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8103c54:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8103c58:	d02e      	beq.n	8103cb8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8103c5a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8103c5e:	d824      	bhi.n	8103caa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8103c60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8103c64:	d018      	beq.n	8103c98 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8103c66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8103c6a:	d81e      	bhi.n	8103caa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8103c6c:	2b00      	cmp	r3, #0
 8103c6e:	d003      	beq.n	8103c78 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8103c70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8103c74:	d007      	beq.n	8103c86 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8103c76:	e018      	b.n	8103caa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103c78:	4b0e      	ldr	r3, [pc, #56]	; (8103cb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103c7c:	4a0d      	ldr	r2, [pc, #52]	; (8103cb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103c7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103c82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103c84:	e019      	b.n	8103cba <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103c86:	687b      	ldr	r3, [r7, #4]
 8103c88:	3304      	adds	r3, #4
 8103c8a:	2100      	movs	r1, #0
 8103c8c:	4618      	mov	r0, r3
 8103c8e:	f001 f8ab 	bl	8104de8 <RCCEx_PLL2_Config>
 8103c92:	4603      	mov	r3, r0
 8103c94:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8103c96:	e010      	b.n	8103cba <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103c98:	687b      	ldr	r3, [r7, #4]
 8103c9a:	3324      	adds	r3, #36	; 0x24
 8103c9c:	2100      	movs	r1, #0
 8103c9e:	4618      	mov	r0, r3
 8103ca0:	f001 f954 	bl	8104f4c <RCCEx_PLL3_Config>
 8103ca4:	4603      	mov	r3, r0
 8103ca6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103ca8:	e007      	b.n	8103cba <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8103caa:	2301      	movs	r3, #1
 8103cac:	75fb      	strb	r3, [r7, #23]
      break;
 8103cae:	e004      	b.n	8103cba <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8103cb0:	bf00      	nop
 8103cb2:	e002      	b.n	8103cba <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8103cb4:	58024400 	.word	0x58024400
      break;
 8103cb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103cba:	7dfb      	ldrb	r3, [r7, #23]
 8103cbc:	2b00      	cmp	r3, #0
 8103cbe:	d10a      	bne.n	8103cd6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8103cc0:	4b99      	ldr	r3, [pc, #612]	; (8103f28 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103cc4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8103cc8:	687b      	ldr	r3, [r7, #4]
 8103cca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8103cce:	4996      	ldr	r1, [pc, #600]	; (8103f28 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103cd0:	4313      	orrs	r3, r2
 8103cd2:	658b      	str	r3, [r1, #88]	; 0x58
 8103cd4:	e001      	b.n	8103cda <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103cd6:	7dfb      	ldrb	r3, [r7, #23]
 8103cd8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8103cda:	687b      	ldr	r3, [r7, #4]
 8103cdc:	681b      	ldr	r3, [r3, #0]
 8103cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8103ce2:	2b00      	cmp	r3, #0
 8103ce4:	d032      	beq.n	8103d4c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8103ce6:	687b      	ldr	r3, [r7, #4]
 8103ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103cea:	2b30      	cmp	r3, #48	; 0x30
 8103cec:	d01c      	beq.n	8103d28 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8103cee:	2b30      	cmp	r3, #48	; 0x30
 8103cf0:	d817      	bhi.n	8103d22 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8103cf2:	2b20      	cmp	r3, #32
 8103cf4:	d00c      	beq.n	8103d10 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8103cf6:	2b20      	cmp	r3, #32
 8103cf8:	d813      	bhi.n	8103d22 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8103cfa:	2b00      	cmp	r3, #0
 8103cfc:	d016      	beq.n	8103d2c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8103cfe:	2b10      	cmp	r3, #16
 8103d00:	d10f      	bne.n	8103d22 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103d02:	4b89      	ldr	r3, [pc, #548]	; (8103f28 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103d06:	4a88      	ldr	r2, [pc, #544]	; (8103f28 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103d0c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8103d0e:	e00e      	b.n	8103d2e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8103d10:	687b      	ldr	r3, [r7, #4]
 8103d12:	3304      	adds	r3, #4
 8103d14:	2102      	movs	r1, #2
 8103d16:	4618      	mov	r0, r3
 8103d18:	f001 f866 	bl	8104de8 <RCCEx_PLL2_Config>
 8103d1c:	4603      	mov	r3, r0
 8103d1e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8103d20:	e005      	b.n	8103d2e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8103d22:	2301      	movs	r3, #1
 8103d24:	75fb      	strb	r3, [r7, #23]
      break;
 8103d26:	e002      	b.n	8103d2e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8103d28:	bf00      	nop
 8103d2a:	e000      	b.n	8103d2e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8103d2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103d2e:	7dfb      	ldrb	r3, [r7, #23]
 8103d30:	2b00      	cmp	r3, #0
 8103d32:	d109      	bne.n	8103d48 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8103d34:	4b7c      	ldr	r3, [pc, #496]	; (8103f28 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103d38:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8103d3c:	687b      	ldr	r3, [r7, #4]
 8103d3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103d40:	4979      	ldr	r1, [pc, #484]	; (8103f28 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103d42:	4313      	orrs	r3, r2
 8103d44:	64cb      	str	r3, [r1, #76]	; 0x4c
 8103d46:	e001      	b.n	8103d4c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103d48:	7dfb      	ldrb	r3, [r7, #23]
 8103d4a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8103d4c:	687b      	ldr	r3, [r7, #4]
 8103d4e:	681b      	ldr	r3, [r3, #0]
 8103d50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8103d54:	2b00      	cmp	r3, #0
 8103d56:	d047      	beq.n	8103de8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8103d58:	687b      	ldr	r3, [r7, #4]
 8103d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103d5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103d60:	d030      	beq.n	8103dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8103d62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103d66:	d82a      	bhi.n	8103dbe <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8103d68:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8103d6c:	d02c      	beq.n	8103dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8103d6e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8103d72:	d824      	bhi.n	8103dbe <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8103d74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103d78:	d018      	beq.n	8103dac <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8103d7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103d7e:	d81e      	bhi.n	8103dbe <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8103d80:	2b00      	cmp	r3, #0
 8103d82:	d003      	beq.n	8103d8c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8103d84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103d88:	d007      	beq.n	8103d9a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8103d8a:	e018      	b.n	8103dbe <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103d8c:	4b66      	ldr	r3, [pc, #408]	; (8103f28 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103d90:	4a65      	ldr	r2, [pc, #404]	; (8103f28 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103d92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103d96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8103d98:	e017      	b.n	8103dca <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103d9a:	687b      	ldr	r3, [r7, #4]
 8103d9c:	3304      	adds	r3, #4
 8103d9e:	2100      	movs	r1, #0
 8103da0:	4618      	mov	r0, r3
 8103da2:	f001 f821 	bl	8104de8 <RCCEx_PLL2_Config>
 8103da6:	4603      	mov	r3, r0
 8103da8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8103daa:	e00e      	b.n	8103dca <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8103dac:	687b      	ldr	r3, [r7, #4]
 8103dae:	3324      	adds	r3, #36	; 0x24
 8103db0:	2100      	movs	r1, #0
 8103db2:	4618      	mov	r0, r3
 8103db4:	f001 f8ca 	bl	8104f4c <RCCEx_PLL3_Config>
 8103db8:	4603      	mov	r3, r0
 8103dba:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8103dbc:	e005      	b.n	8103dca <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103dbe:	2301      	movs	r3, #1
 8103dc0:	75fb      	strb	r3, [r7, #23]
      break;
 8103dc2:	e002      	b.n	8103dca <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8103dc4:	bf00      	nop
 8103dc6:	e000      	b.n	8103dca <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8103dc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103dca:	7dfb      	ldrb	r3, [r7, #23]
 8103dcc:	2b00      	cmp	r3, #0
 8103dce:	d109      	bne.n	8103de4 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8103dd0:	4b55      	ldr	r3, [pc, #340]	; (8103f28 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103dd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103dd4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8103dd8:	687b      	ldr	r3, [r7, #4]
 8103dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103ddc:	4952      	ldr	r1, [pc, #328]	; (8103f28 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103dde:	4313      	orrs	r3, r2
 8103de0:	650b      	str	r3, [r1, #80]	; 0x50
 8103de2:	e001      	b.n	8103de8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103de4:	7dfb      	ldrb	r3, [r7, #23]
 8103de6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8103de8:	687b      	ldr	r3, [r7, #4]
 8103dea:	681b      	ldr	r3, [r3, #0]
 8103dec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8103df0:	2b00      	cmp	r3, #0
 8103df2:	d049      	beq.n	8103e88 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8103df4:	687b      	ldr	r3, [r7, #4]
 8103df6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103df8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8103dfc:	d02e      	beq.n	8103e5c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8103dfe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8103e02:	d828      	bhi.n	8103e56 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8103e04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8103e08:	d02a      	beq.n	8103e60 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8103e0a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8103e0e:	d822      	bhi.n	8103e56 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8103e10:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103e14:	d026      	beq.n	8103e64 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8103e16:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103e1a:	d81c      	bhi.n	8103e56 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8103e1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103e20:	d010      	beq.n	8103e44 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8103e22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103e26:	d816      	bhi.n	8103e56 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8103e28:	2b00      	cmp	r3, #0
 8103e2a:	d01d      	beq.n	8103e68 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8103e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103e30:	d111      	bne.n	8103e56 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103e32:	687b      	ldr	r3, [r7, #4]
 8103e34:	3304      	adds	r3, #4
 8103e36:	2101      	movs	r1, #1
 8103e38:	4618      	mov	r0, r3
 8103e3a:	f000 ffd5 	bl	8104de8 <RCCEx_PLL2_Config>
 8103e3e:	4603      	mov	r3, r0
 8103e40:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8103e42:	e012      	b.n	8103e6a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103e44:	687b      	ldr	r3, [r7, #4]
 8103e46:	3324      	adds	r3, #36	; 0x24
 8103e48:	2101      	movs	r1, #1
 8103e4a:	4618      	mov	r0, r3
 8103e4c:	f001 f87e 	bl	8104f4c <RCCEx_PLL3_Config>
 8103e50:	4603      	mov	r3, r0
 8103e52:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8103e54:	e009      	b.n	8103e6a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103e56:	2301      	movs	r3, #1
 8103e58:	75fb      	strb	r3, [r7, #23]
      break;
 8103e5a:	e006      	b.n	8103e6a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8103e5c:	bf00      	nop
 8103e5e:	e004      	b.n	8103e6a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8103e60:	bf00      	nop
 8103e62:	e002      	b.n	8103e6a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8103e64:	bf00      	nop
 8103e66:	e000      	b.n	8103e6a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8103e68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103e6a:	7dfb      	ldrb	r3, [r7, #23]
 8103e6c:	2b00      	cmp	r3, #0
 8103e6e:	d109      	bne.n	8103e84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8103e70:	4b2d      	ldr	r3, [pc, #180]	; (8103f28 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103e72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103e74:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8103e78:	687b      	ldr	r3, [r7, #4]
 8103e7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103e7c:	492a      	ldr	r1, [pc, #168]	; (8103f28 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103e7e:	4313      	orrs	r3, r2
 8103e80:	650b      	str	r3, [r1, #80]	; 0x50
 8103e82:	e001      	b.n	8103e88 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103e84:	7dfb      	ldrb	r3, [r7, #23]
 8103e86:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8103e88:	687b      	ldr	r3, [r7, #4]
 8103e8a:	681b      	ldr	r3, [r3, #0]
 8103e8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8103e90:	2b00      	cmp	r3, #0
 8103e92:	d04d      	beq.n	8103f30 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8103e94:	687b      	ldr	r3, [r7, #4]
 8103e96:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8103e9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103e9e:	d02e      	beq.n	8103efe <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8103ea0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103ea4:	d828      	bhi.n	8103ef8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8103ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103eaa:	d02a      	beq.n	8103f02 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8103eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103eb0:	d822      	bhi.n	8103ef8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8103eb2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103eb6:	d026      	beq.n	8103f06 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8103eb8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103ebc:	d81c      	bhi.n	8103ef8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8103ebe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103ec2:	d010      	beq.n	8103ee6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8103ec4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103ec8:	d816      	bhi.n	8103ef8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8103eca:	2b00      	cmp	r3, #0
 8103ecc:	d01d      	beq.n	8103f0a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8103ece:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103ed2:	d111      	bne.n	8103ef8 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103ed4:	687b      	ldr	r3, [r7, #4]
 8103ed6:	3304      	adds	r3, #4
 8103ed8:	2101      	movs	r1, #1
 8103eda:	4618      	mov	r0, r3
 8103edc:	f000 ff84 	bl	8104de8 <RCCEx_PLL2_Config>
 8103ee0:	4603      	mov	r3, r0
 8103ee2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8103ee4:	e012      	b.n	8103f0c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103ee6:	687b      	ldr	r3, [r7, #4]
 8103ee8:	3324      	adds	r3, #36	; 0x24
 8103eea:	2101      	movs	r1, #1
 8103eec:	4618      	mov	r0, r3
 8103eee:	f001 f82d 	bl	8104f4c <RCCEx_PLL3_Config>
 8103ef2:	4603      	mov	r3, r0
 8103ef4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8103ef6:	e009      	b.n	8103f0c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8103ef8:	2301      	movs	r3, #1
 8103efa:	75fb      	strb	r3, [r7, #23]
      break;
 8103efc:	e006      	b.n	8103f0c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8103efe:	bf00      	nop
 8103f00:	e004      	b.n	8103f0c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8103f02:	bf00      	nop
 8103f04:	e002      	b.n	8103f0c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8103f06:	bf00      	nop
 8103f08:	e000      	b.n	8103f0c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8103f0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103f0c:	7dfb      	ldrb	r3, [r7, #23]
 8103f0e:	2b00      	cmp	r3, #0
 8103f10:	d10c      	bne.n	8103f2c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8103f12:	4b05      	ldr	r3, [pc, #20]	; (8103f28 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103f16:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8103f1a:	687b      	ldr	r3, [r7, #4]
 8103f1c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8103f20:	4901      	ldr	r1, [pc, #4]	; (8103f28 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103f22:	4313      	orrs	r3, r2
 8103f24:	658b      	str	r3, [r1, #88]	; 0x58
 8103f26:	e003      	b.n	8103f30 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8103f28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103f2c:	7dfb      	ldrb	r3, [r7, #23]
 8103f2e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8103f30:	687b      	ldr	r3, [r7, #4]
 8103f32:	681b      	ldr	r3, [r3, #0]
 8103f34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8103f38:	2b00      	cmp	r3, #0
 8103f3a:	d02f      	beq.n	8103f9c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8103f3c:	687b      	ldr	r3, [r7, #4]
 8103f3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103f40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103f44:	d00e      	beq.n	8103f64 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8103f46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103f4a:	d814      	bhi.n	8103f76 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8103f4c:	2b00      	cmp	r3, #0
 8103f4e:	d015      	beq.n	8103f7c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8103f50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103f54:	d10f      	bne.n	8103f76 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103f56:	4bb0      	ldr	r3, [pc, #704]	; (8104218 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103f5a:	4aaf      	ldr	r2, [pc, #700]	; (8104218 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103f60:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8103f62:	e00c      	b.n	8103f7e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103f64:	687b      	ldr	r3, [r7, #4]
 8103f66:	3304      	adds	r3, #4
 8103f68:	2101      	movs	r1, #1
 8103f6a:	4618      	mov	r0, r3
 8103f6c:	f000 ff3c 	bl	8104de8 <RCCEx_PLL2_Config>
 8103f70:	4603      	mov	r3, r0
 8103f72:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8103f74:	e003      	b.n	8103f7e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103f76:	2301      	movs	r3, #1
 8103f78:	75fb      	strb	r3, [r7, #23]
      break;
 8103f7a:	e000      	b.n	8103f7e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8103f7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103f7e:	7dfb      	ldrb	r3, [r7, #23]
 8103f80:	2b00      	cmp	r3, #0
 8103f82:	d109      	bne.n	8103f98 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8103f84:	4ba4      	ldr	r3, [pc, #656]	; (8104218 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103f86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103f88:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8103f8c:	687b      	ldr	r3, [r7, #4]
 8103f8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103f90:	49a1      	ldr	r1, [pc, #644]	; (8104218 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103f92:	4313      	orrs	r3, r2
 8103f94:	650b      	str	r3, [r1, #80]	; 0x50
 8103f96:	e001      	b.n	8103f9c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103f98:	7dfb      	ldrb	r3, [r7, #23]
 8103f9a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8103f9c:	687b      	ldr	r3, [r7, #4]
 8103f9e:	681b      	ldr	r3, [r3, #0]
 8103fa0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8103fa4:	2b00      	cmp	r3, #0
 8103fa6:	d032      	beq.n	810400e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8103fa8:	687b      	ldr	r3, [r7, #4]
 8103faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103fac:	2b03      	cmp	r3, #3
 8103fae:	d81b      	bhi.n	8103fe8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8103fb0:	a201      	add	r2, pc, #4	; (adr r2, 8103fb8 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8103fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103fb6:	bf00      	nop
 8103fb8:	08103fef 	.word	0x08103fef
 8103fbc:	08103fc9 	.word	0x08103fc9
 8103fc0:	08103fd7 	.word	0x08103fd7
 8103fc4:	08103fef 	.word	0x08103fef
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103fc8:	4b93      	ldr	r3, [pc, #588]	; (8104218 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103fcc:	4a92      	ldr	r2, [pc, #584]	; (8104218 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103fce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103fd2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8103fd4:	e00c      	b.n	8103ff0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8103fd6:	687b      	ldr	r3, [r7, #4]
 8103fd8:	3304      	adds	r3, #4
 8103fda:	2102      	movs	r1, #2
 8103fdc:	4618      	mov	r0, r3
 8103fde:	f000 ff03 	bl	8104de8 <RCCEx_PLL2_Config>
 8103fe2:	4603      	mov	r3, r0
 8103fe4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8103fe6:	e003      	b.n	8103ff0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8103fe8:	2301      	movs	r3, #1
 8103fea:	75fb      	strb	r3, [r7, #23]
      break;
 8103fec:	e000      	b.n	8103ff0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8103fee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103ff0:	7dfb      	ldrb	r3, [r7, #23]
 8103ff2:	2b00      	cmp	r3, #0
 8103ff4:	d109      	bne.n	810400a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8103ff6:	4b88      	ldr	r3, [pc, #544]	; (8104218 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103ffa:	f023 0203 	bic.w	r2, r3, #3
 8103ffe:	687b      	ldr	r3, [r7, #4]
 8104000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104002:	4985      	ldr	r1, [pc, #532]	; (8104218 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104004:	4313      	orrs	r3, r2
 8104006:	64cb      	str	r3, [r1, #76]	; 0x4c
 8104008:	e001      	b.n	810400e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810400a:	7dfb      	ldrb	r3, [r7, #23]
 810400c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 810400e:	687b      	ldr	r3, [r7, #4]
 8104010:	681b      	ldr	r3, [r3, #0]
 8104012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8104016:	2b00      	cmp	r3, #0
 8104018:	f000 8088 	beq.w	810412c <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 810401c:	4b7f      	ldr	r3, [pc, #508]	; (810421c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 810401e:	681b      	ldr	r3, [r3, #0]
 8104020:	4a7e      	ldr	r2, [pc, #504]	; (810421c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8104022:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8104026:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8104028:	f7fe fa0a 	bl	8102440 <HAL_GetTick>
 810402c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810402e:	e009      	b.n	8104044 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8104030:	f7fe fa06 	bl	8102440 <HAL_GetTick>
 8104034:	4602      	mov	r2, r0
 8104036:	693b      	ldr	r3, [r7, #16]
 8104038:	1ad3      	subs	r3, r2, r3
 810403a:	2b64      	cmp	r3, #100	; 0x64
 810403c:	d902      	bls.n	8104044 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 810403e:	2303      	movs	r3, #3
 8104040:	75fb      	strb	r3, [r7, #23]
        break;
 8104042:	e005      	b.n	8104050 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8104044:	4b75      	ldr	r3, [pc, #468]	; (810421c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8104046:	681b      	ldr	r3, [r3, #0]
 8104048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810404c:	2b00      	cmp	r3, #0
 810404e:	d0ef      	beq.n	8104030 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8104050:	7dfb      	ldrb	r3, [r7, #23]
 8104052:	2b00      	cmp	r3, #0
 8104054:	d168      	bne.n	8104128 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8104056:	4b70      	ldr	r3, [pc, #448]	; (8104218 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104058:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 810405a:	687b      	ldr	r3, [r7, #4]
 810405c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8104060:	4053      	eors	r3, r2
 8104062:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8104066:	2b00      	cmp	r3, #0
 8104068:	d013      	beq.n	8104092 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 810406a:	4b6b      	ldr	r3, [pc, #428]	; (8104218 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810406c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810406e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8104072:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8104074:	4b68      	ldr	r3, [pc, #416]	; (8104218 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104078:	4a67      	ldr	r2, [pc, #412]	; (8104218 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810407a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 810407e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8104080:	4b65      	ldr	r3, [pc, #404]	; (8104218 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104084:	4a64      	ldr	r2, [pc, #400]	; (8104218 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810408a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 810408c:	4a62      	ldr	r2, [pc, #392]	; (8104218 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810408e:	68fb      	ldr	r3, [r7, #12]
 8104090:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8104092:	687b      	ldr	r3, [r7, #4]
 8104094:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8104098:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810409c:	d115      	bne.n	81040ca <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 810409e:	f7fe f9cf 	bl	8102440 <HAL_GetTick>
 81040a2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81040a4:	e00b      	b.n	81040be <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 81040a6:	f7fe f9cb 	bl	8102440 <HAL_GetTick>
 81040aa:	4602      	mov	r2, r0
 81040ac:	693b      	ldr	r3, [r7, #16]
 81040ae:	1ad3      	subs	r3, r2, r3
 81040b0:	f241 3288 	movw	r2, #5000	; 0x1388
 81040b4:	4293      	cmp	r3, r2
 81040b6:	d902      	bls.n	81040be <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 81040b8:	2303      	movs	r3, #3
 81040ba:	75fb      	strb	r3, [r7, #23]
            break;
 81040bc:	e005      	b.n	81040ca <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81040be:	4b56      	ldr	r3, [pc, #344]	; (8104218 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81040c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81040c2:	f003 0302 	and.w	r3, r3, #2
 81040c6:	2b00      	cmp	r3, #0
 81040c8:	d0ed      	beq.n	81040a6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 81040ca:	7dfb      	ldrb	r3, [r7, #23]
 81040cc:	2b00      	cmp	r3, #0
 81040ce:	d128      	bne.n	8104122 <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 81040d0:	687b      	ldr	r3, [r7, #4]
 81040d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81040d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81040da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81040de:	d10f      	bne.n	8104100 <HAL_RCCEx_PeriphCLKConfig+0x720>
 81040e0:	4b4d      	ldr	r3, [pc, #308]	; (8104218 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81040e2:	691b      	ldr	r3, [r3, #16]
 81040e4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 81040e8:	687b      	ldr	r3, [r7, #4]
 81040ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81040ee:	091b      	lsrs	r3, r3, #4
 81040f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 81040f4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 81040f8:	4947      	ldr	r1, [pc, #284]	; (8104218 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81040fa:	4313      	orrs	r3, r2
 81040fc:	610b      	str	r3, [r1, #16]
 81040fe:	e005      	b.n	810410c <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8104100:	4b45      	ldr	r3, [pc, #276]	; (8104218 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104102:	691b      	ldr	r3, [r3, #16]
 8104104:	4a44      	ldr	r2, [pc, #272]	; (8104218 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104106:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 810410a:	6113      	str	r3, [r2, #16]
 810410c:	4b42      	ldr	r3, [pc, #264]	; (8104218 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810410e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8104110:	687b      	ldr	r3, [r7, #4]
 8104112:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8104116:	f3c3 030b 	ubfx	r3, r3, #0, #12
 810411a:	493f      	ldr	r1, [pc, #252]	; (8104218 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810411c:	4313      	orrs	r3, r2
 810411e:	670b      	str	r3, [r1, #112]	; 0x70
 8104120:	e004      	b.n	810412c <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8104122:	7dfb      	ldrb	r3, [r7, #23]
 8104124:	75bb      	strb	r3, [r7, #22]
 8104126:	e001      	b.n	810412c <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104128:	7dfb      	ldrb	r3, [r7, #23]
 810412a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 810412c:	687b      	ldr	r3, [r7, #4]
 810412e:	681b      	ldr	r3, [r3, #0]
 8104130:	f003 0301 	and.w	r3, r3, #1
 8104134:	2b00      	cmp	r3, #0
 8104136:	f000 8083 	beq.w	8104240 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 810413a:	687b      	ldr	r3, [r7, #4]
 810413c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810413e:	2b28      	cmp	r3, #40	; 0x28
 8104140:	d866      	bhi.n	8104210 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8104142:	a201      	add	r2, pc, #4	; (adr r2, 8104148 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8104144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104148:	08104221 	.word	0x08104221
 810414c:	08104211 	.word	0x08104211
 8104150:	08104211 	.word	0x08104211
 8104154:	08104211 	.word	0x08104211
 8104158:	08104211 	.word	0x08104211
 810415c:	08104211 	.word	0x08104211
 8104160:	08104211 	.word	0x08104211
 8104164:	08104211 	.word	0x08104211
 8104168:	081041ed 	.word	0x081041ed
 810416c:	08104211 	.word	0x08104211
 8104170:	08104211 	.word	0x08104211
 8104174:	08104211 	.word	0x08104211
 8104178:	08104211 	.word	0x08104211
 810417c:	08104211 	.word	0x08104211
 8104180:	08104211 	.word	0x08104211
 8104184:	08104211 	.word	0x08104211
 8104188:	081041ff 	.word	0x081041ff
 810418c:	08104211 	.word	0x08104211
 8104190:	08104211 	.word	0x08104211
 8104194:	08104211 	.word	0x08104211
 8104198:	08104211 	.word	0x08104211
 810419c:	08104211 	.word	0x08104211
 81041a0:	08104211 	.word	0x08104211
 81041a4:	08104211 	.word	0x08104211
 81041a8:	08104221 	.word	0x08104221
 81041ac:	08104211 	.word	0x08104211
 81041b0:	08104211 	.word	0x08104211
 81041b4:	08104211 	.word	0x08104211
 81041b8:	08104211 	.word	0x08104211
 81041bc:	08104211 	.word	0x08104211
 81041c0:	08104211 	.word	0x08104211
 81041c4:	08104211 	.word	0x08104211
 81041c8:	08104221 	.word	0x08104221
 81041cc:	08104211 	.word	0x08104211
 81041d0:	08104211 	.word	0x08104211
 81041d4:	08104211 	.word	0x08104211
 81041d8:	08104211 	.word	0x08104211
 81041dc:	08104211 	.word	0x08104211
 81041e0:	08104211 	.word	0x08104211
 81041e4:	08104211 	.word	0x08104211
 81041e8:	08104221 	.word	0x08104221
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81041ec:	687b      	ldr	r3, [r7, #4]
 81041ee:	3304      	adds	r3, #4
 81041f0:	2101      	movs	r1, #1
 81041f2:	4618      	mov	r0, r3
 81041f4:	f000 fdf8 	bl	8104de8 <RCCEx_PLL2_Config>
 81041f8:	4603      	mov	r3, r0
 81041fa:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 81041fc:	e011      	b.n	8104222 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81041fe:	687b      	ldr	r3, [r7, #4]
 8104200:	3324      	adds	r3, #36	; 0x24
 8104202:	2101      	movs	r1, #1
 8104204:	4618      	mov	r0, r3
 8104206:	f000 fea1 	bl	8104f4c <RCCEx_PLL3_Config>
 810420a:	4603      	mov	r3, r0
 810420c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 810420e:	e008      	b.n	8104222 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104210:	2301      	movs	r3, #1
 8104212:	75fb      	strb	r3, [r7, #23]
      break;
 8104214:	e005      	b.n	8104222 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8104216:	bf00      	nop
 8104218:	58024400 	.word	0x58024400
 810421c:	58024800 	.word	0x58024800
      break;
 8104220:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104222:	7dfb      	ldrb	r3, [r7, #23]
 8104224:	2b00      	cmp	r3, #0
 8104226:	d109      	bne.n	810423c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8104228:	4b96      	ldr	r3, [pc, #600]	; (8104484 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810422a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810422c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8104230:	687b      	ldr	r3, [r7, #4]
 8104232:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8104234:	4993      	ldr	r1, [pc, #588]	; (8104484 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8104236:	4313      	orrs	r3, r2
 8104238:	654b      	str	r3, [r1, #84]	; 0x54
 810423a:	e001      	b.n	8104240 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810423c:	7dfb      	ldrb	r3, [r7, #23]
 810423e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8104240:	687b      	ldr	r3, [r7, #4]
 8104242:	681b      	ldr	r3, [r3, #0]
 8104244:	f003 0302 	and.w	r3, r3, #2
 8104248:	2b00      	cmp	r3, #0
 810424a:	d038      	beq.n	81042be <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 810424c:	687b      	ldr	r3, [r7, #4]
 810424e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8104250:	2b05      	cmp	r3, #5
 8104252:	d821      	bhi.n	8104298 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8104254:	a201      	add	r2, pc, #4	; (adr r2, 810425c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8104256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810425a:	bf00      	nop
 810425c:	0810429f 	.word	0x0810429f
 8104260:	08104275 	.word	0x08104275
 8104264:	08104287 	.word	0x08104287
 8104268:	0810429f 	.word	0x0810429f
 810426c:	0810429f 	.word	0x0810429f
 8104270:	0810429f 	.word	0x0810429f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8104274:	687b      	ldr	r3, [r7, #4]
 8104276:	3304      	adds	r3, #4
 8104278:	2101      	movs	r1, #1
 810427a:	4618      	mov	r0, r3
 810427c:	f000 fdb4 	bl	8104de8 <RCCEx_PLL2_Config>
 8104280:	4603      	mov	r3, r0
 8104282:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8104284:	e00c      	b.n	81042a0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8104286:	687b      	ldr	r3, [r7, #4]
 8104288:	3324      	adds	r3, #36	; 0x24
 810428a:	2101      	movs	r1, #1
 810428c:	4618      	mov	r0, r3
 810428e:	f000 fe5d 	bl	8104f4c <RCCEx_PLL3_Config>
 8104292:	4603      	mov	r3, r0
 8104294:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8104296:	e003      	b.n	81042a0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104298:	2301      	movs	r3, #1
 810429a:	75fb      	strb	r3, [r7, #23]
      break;
 810429c:	e000      	b.n	81042a0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 810429e:	bf00      	nop
    }

    if(ret == HAL_OK)
 81042a0:	7dfb      	ldrb	r3, [r7, #23]
 81042a2:	2b00      	cmp	r3, #0
 81042a4:	d109      	bne.n	81042ba <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 81042a6:	4b77      	ldr	r3, [pc, #476]	; (8104484 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81042a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81042aa:	f023 0207 	bic.w	r2, r3, #7
 81042ae:	687b      	ldr	r3, [r7, #4]
 81042b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81042b2:	4974      	ldr	r1, [pc, #464]	; (8104484 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81042b4:	4313      	orrs	r3, r2
 81042b6:	654b      	str	r3, [r1, #84]	; 0x54
 81042b8:	e001      	b.n	81042be <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81042ba:	7dfb      	ldrb	r3, [r7, #23]
 81042bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 81042be:	687b      	ldr	r3, [r7, #4]
 81042c0:	681b      	ldr	r3, [r3, #0]
 81042c2:	f003 0304 	and.w	r3, r3, #4
 81042c6:	2b00      	cmp	r3, #0
 81042c8:	d03a      	beq.n	8104340 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 81042ca:	687b      	ldr	r3, [r7, #4]
 81042cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81042d0:	2b05      	cmp	r3, #5
 81042d2:	d821      	bhi.n	8104318 <HAL_RCCEx_PeriphCLKConfig+0x938>
 81042d4:	a201      	add	r2, pc, #4	; (adr r2, 81042dc <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 81042d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81042da:	bf00      	nop
 81042dc:	0810431f 	.word	0x0810431f
 81042e0:	081042f5 	.word	0x081042f5
 81042e4:	08104307 	.word	0x08104307
 81042e8:	0810431f 	.word	0x0810431f
 81042ec:	0810431f 	.word	0x0810431f
 81042f0:	0810431f 	.word	0x0810431f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81042f4:	687b      	ldr	r3, [r7, #4]
 81042f6:	3304      	adds	r3, #4
 81042f8:	2101      	movs	r1, #1
 81042fa:	4618      	mov	r0, r3
 81042fc:	f000 fd74 	bl	8104de8 <RCCEx_PLL2_Config>
 8104300:	4603      	mov	r3, r0
 8104302:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8104304:	e00c      	b.n	8104320 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8104306:	687b      	ldr	r3, [r7, #4]
 8104308:	3324      	adds	r3, #36	; 0x24
 810430a:	2101      	movs	r1, #1
 810430c:	4618      	mov	r0, r3
 810430e:	f000 fe1d 	bl	8104f4c <RCCEx_PLL3_Config>
 8104312:	4603      	mov	r3, r0
 8104314:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8104316:	e003      	b.n	8104320 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104318:	2301      	movs	r3, #1
 810431a:	75fb      	strb	r3, [r7, #23]
      break;
 810431c:	e000      	b.n	8104320 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 810431e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104320:	7dfb      	ldrb	r3, [r7, #23]
 8104322:	2b00      	cmp	r3, #0
 8104324:	d10a      	bne.n	810433c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8104326:	4b57      	ldr	r3, [pc, #348]	; (8104484 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8104328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810432a:	f023 0207 	bic.w	r2, r3, #7
 810432e:	687b      	ldr	r3, [r7, #4]
 8104330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8104334:	4953      	ldr	r1, [pc, #332]	; (8104484 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8104336:	4313      	orrs	r3, r2
 8104338:	658b      	str	r3, [r1, #88]	; 0x58
 810433a:	e001      	b.n	8104340 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810433c:	7dfb      	ldrb	r3, [r7, #23]
 810433e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8104340:	687b      	ldr	r3, [r7, #4]
 8104342:	681b      	ldr	r3, [r3, #0]
 8104344:	f003 0320 	and.w	r3, r3, #32
 8104348:	2b00      	cmp	r3, #0
 810434a:	d04b      	beq.n	81043e4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 810434c:	687b      	ldr	r3, [r7, #4]
 810434e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8104352:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8104356:	d02e      	beq.n	81043b6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8104358:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810435c:	d828      	bhi.n	81043b0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 810435e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104362:	d02a      	beq.n	81043ba <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8104364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104368:	d822      	bhi.n	81043b0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 810436a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810436e:	d026      	beq.n	81043be <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8104370:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8104374:	d81c      	bhi.n	81043b0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8104376:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810437a:	d010      	beq.n	810439e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 810437c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104380:	d816      	bhi.n	81043b0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8104382:	2b00      	cmp	r3, #0
 8104384:	d01d      	beq.n	81043c2 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8104386:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810438a:	d111      	bne.n	81043b0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810438c:	687b      	ldr	r3, [r7, #4]
 810438e:	3304      	adds	r3, #4
 8104390:	2100      	movs	r1, #0
 8104392:	4618      	mov	r0, r3
 8104394:	f000 fd28 	bl	8104de8 <RCCEx_PLL2_Config>
 8104398:	4603      	mov	r3, r0
 810439a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 810439c:	e012      	b.n	81043c4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810439e:	687b      	ldr	r3, [r7, #4]
 81043a0:	3324      	adds	r3, #36	; 0x24
 81043a2:	2102      	movs	r1, #2
 81043a4:	4618      	mov	r0, r3
 81043a6:	f000 fdd1 	bl	8104f4c <RCCEx_PLL3_Config>
 81043aa:	4603      	mov	r3, r0
 81043ac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 81043ae:	e009      	b.n	81043c4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81043b0:	2301      	movs	r3, #1
 81043b2:	75fb      	strb	r3, [r7, #23]
      break;
 81043b4:	e006      	b.n	81043c4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81043b6:	bf00      	nop
 81043b8:	e004      	b.n	81043c4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81043ba:	bf00      	nop
 81043bc:	e002      	b.n	81043c4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81043be:	bf00      	nop
 81043c0:	e000      	b.n	81043c4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81043c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81043c4:	7dfb      	ldrb	r3, [r7, #23]
 81043c6:	2b00      	cmp	r3, #0
 81043c8:	d10a      	bne.n	81043e0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 81043ca:	4b2e      	ldr	r3, [pc, #184]	; (8104484 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81043cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81043ce:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 81043d2:	687b      	ldr	r3, [r7, #4]
 81043d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81043d8:	492a      	ldr	r1, [pc, #168]	; (8104484 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81043da:	4313      	orrs	r3, r2
 81043dc:	654b      	str	r3, [r1, #84]	; 0x54
 81043de:	e001      	b.n	81043e4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81043e0:	7dfb      	ldrb	r3, [r7, #23]
 81043e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 81043e4:	687b      	ldr	r3, [r7, #4]
 81043e6:	681b      	ldr	r3, [r3, #0]
 81043e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81043ec:	2b00      	cmp	r3, #0
 81043ee:	d04d      	beq.n	810448c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 81043f0:	687b      	ldr	r3, [r7, #4]
 81043f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 81043f6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 81043fa:	d02e      	beq.n	810445a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 81043fc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8104400:	d828      	bhi.n	8104454 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8104402:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104406:	d02a      	beq.n	810445e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8104408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810440c:	d822      	bhi.n	8104454 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 810440e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8104412:	d026      	beq.n	8104462 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8104414:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8104418:	d81c      	bhi.n	8104454 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 810441a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810441e:	d010      	beq.n	8104442 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8104420:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8104424:	d816      	bhi.n	8104454 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8104426:	2b00      	cmp	r3, #0
 8104428:	d01d      	beq.n	8104466 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 810442a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 810442e:	d111      	bne.n	8104454 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104430:	687b      	ldr	r3, [r7, #4]
 8104432:	3304      	adds	r3, #4
 8104434:	2100      	movs	r1, #0
 8104436:	4618      	mov	r0, r3
 8104438:	f000 fcd6 	bl	8104de8 <RCCEx_PLL2_Config>
 810443c:	4603      	mov	r3, r0
 810443e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8104440:	e012      	b.n	8104468 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8104442:	687b      	ldr	r3, [r7, #4]
 8104444:	3324      	adds	r3, #36	; 0x24
 8104446:	2102      	movs	r1, #2
 8104448:	4618      	mov	r0, r3
 810444a:	f000 fd7f 	bl	8104f4c <RCCEx_PLL3_Config>
 810444e:	4603      	mov	r3, r0
 8104450:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8104452:	e009      	b.n	8104468 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104454:	2301      	movs	r3, #1
 8104456:	75fb      	strb	r3, [r7, #23]
      break;
 8104458:	e006      	b.n	8104468 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 810445a:	bf00      	nop
 810445c:	e004      	b.n	8104468 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 810445e:	bf00      	nop
 8104460:	e002      	b.n	8104468 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8104462:	bf00      	nop
 8104464:	e000      	b.n	8104468 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8104466:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104468:	7dfb      	ldrb	r3, [r7, #23]
 810446a:	2b00      	cmp	r3, #0
 810446c:	d10c      	bne.n	8104488 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 810446e:	4b05      	ldr	r3, [pc, #20]	; (8104484 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8104470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104472:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8104476:	687b      	ldr	r3, [r7, #4]
 8104478:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 810447c:	4901      	ldr	r1, [pc, #4]	; (8104484 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810447e:	4313      	orrs	r3, r2
 8104480:	658b      	str	r3, [r1, #88]	; 0x58
 8104482:	e003      	b.n	810448c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8104484:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104488:	7dfb      	ldrb	r3, [r7, #23]
 810448a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 810448c:	687b      	ldr	r3, [r7, #4]
 810448e:	681b      	ldr	r3, [r3, #0]
 8104490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8104494:	2b00      	cmp	r3, #0
 8104496:	d04b      	beq.n	8104530 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8104498:	687b      	ldr	r3, [r7, #4]
 810449a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 810449e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81044a2:	d02e      	beq.n	8104502 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 81044a4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81044a8:	d828      	bhi.n	81044fc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 81044aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81044ae:	d02a      	beq.n	8104506 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 81044b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81044b4:	d822      	bhi.n	81044fc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 81044b6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81044ba:	d026      	beq.n	810450a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 81044bc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81044c0:	d81c      	bhi.n	81044fc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 81044c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81044c6:	d010      	beq.n	81044ea <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 81044c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81044cc:	d816      	bhi.n	81044fc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 81044ce:	2b00      	cmp	r3, #0
 81044d0:	d01d      	beq.n	810450e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 81044d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81044d6:	d111      	bne.n	81044fc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81044d8:	687b      	ldr	r3, [r7, #4]
 81044da:	3304      	adds	r3, #4
 81044dc:	2100      	movs	r1, #0
 81044de:	4618      	mov	r0, r3
 81044e0:	f000 fc82 	bl	8104de8 <RCCEx_PLL2_Config>
 81044e4:	4603      	mov	r3, r0
 81044e6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 81044e8:	e012      	b.n	8104510 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81044ea:	687b      	ldr	r3, [r7, #4]
 81044ec:	3324      	adds	r3, #36	; 0x24
 81044ee:	2102      	movs	r1, #2
 81044f0:	4618      	mov	r0, r3
 81044f2:	f000 fd2b 	bl	8104f4c <RCCEx_PLL3_Config>
 81044f6:	4603      	mov	r3, r0
 81044f8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 81044fa:	e009      	b.n	8104510 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81044fc:	2301      	movs	r3, #1
 81044fe:	75fb      	strb	r3, [r7, #23]
      break;
 8104500:	e006      	b.n	8104510 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8104502:	bf00      	nop
 8104504:	e004      	b.n	8104510 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8104506:	bf00      	nop
 8104508:	e002      	b.n	8104510 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 810450a:	bf00      	nop
 810450c:	e000      	b.n	8104510 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 810450e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104510:	7dfb      	ldrb	r3, [r7, #23]
 8104512:	2b00      	cmp	r3, #0
 8104514:	d10a      	bne.n	810452c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8104516:	4b9d      	ldr	r3, [pc, #628]	; (810478c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810451a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 810451e:	687b      	ldr	r3, [r7, #4]
 8104520:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8104524:	4999      	ldr	r1, [pc, #612]	; (810478c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104526:	4313      	orrs	r3, r2
 8104528:	658b      	str	r3, [r1, #88]	; 0x58
 810452a:	e001      	b.n	8104530 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810452c:	7dfb      	ldrb	r3, [r7, #23]
 810452e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8104530:	687b      	ldr	r3, [r7, #4]
 8104532:	681b      	ldr	r3, [r3, #0]
 8104534:	f003 0308 	and.w	r3, r3, #8
 8104538:	2b00      	cmp	r3, #0
 810453a:	d01a      	beq.n	8104572 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 810453c:	687b      	ldr	r3, [r7, #4]
 810453e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8104542:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104546:	d10a      	bne.n	810455e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8104548:	687b      	ldr	r3, [r7, #4]
 810454a:	3324      	adds	r3, #36	; 0x24
 810454c:	2102      	movs	r1, #2
 810454e:	4618      	mov	r0, r3
 8104550:	f000 fcfc 	bl	8104f4c <RCCEx_PLL3_Config>
 8104554:	4603      	mov	r3, r0
 8104556:	2b00      	cmp	r3, #0
 8104558:	d001      	beq.n	810455e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 810455a:	2301      	movs	r3, #1
 810455c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 810455e:	4b8b      	ldr	r3, [pc, #556]	; (810478c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104562:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8104566:	687b      	ldr	r3, [r7, #4]
 8104568:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810456c:	4987      	ldr	r1, [pc, #540]	; (810478c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810456e:	4313      	orrs	r3, r2
 8104570:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8104572:	687b      	ldr	r3, [r7, #4]
 8104574:	681b      	ldr	r3, [r3, #0]
 8104576:	f003 0310 	and.w	r3, r3, #16
 810457a:	2b00      	cmp	r3, #0
 810457c:	d01a      	beq.n	81045b4 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 810457e:	687b      	ldr	r3, [r7, #4]
 8104580:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8104584:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104588:	d10a      	bne.n	81045a0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 810458a:	687b      	ldr	r3, [r7, #4]
 810458c:	3324      	adds	r3, #36	; 0x24
 810458e:	2102      	movs	r1, #2
 8104590:	4618      	mov	r0, r3
 8104592:	f000 fcdb 	bl	8104f4c <RCCEx_PLL3_Config>
 8104596:	4603      	mov	r3, r0
 8104598:	2b00      	cmp	r3, #0
 810459a:	d001      	beq.n	81045a0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 810459c:	2301      	movs	r3, #1
 810459e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 81045a0:	4b7a      	ldr	r3, [pc, #488]	; (810478c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81045a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81045a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81045a8:	687b      	ldr	r3, [r7, #4]
 81045aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81045ae:	4977      	ldr	r1, [pc, #476]	; (810478c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81045b0:	4313      	orrs	r3, r2
 81045b2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 81045b4:	687b      	ldr	r3, [r7, #4]
 81045b6:	681b      	ldr	r3, [r3, #0]
 81045b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 81045bc:	2b00      	cmp	r3, #0
 81045be:	d034      	beq.n	810462a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 81045c0:	687b      	ldr	r3, [r7, #4]
 81045c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81045c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81045ca:	d01d      	beq.n	8104608 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 81045cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81045d0:	d817      	bhi.n	8104602 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 81045d2:	2b00      	cmp	r3, #0
 81045d4:	d003      	beq.n	81045de <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 81045d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81045da:	d009      	beq.n	81045f0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 81045dc:	e011      	b.n	8104602 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81045de:	687b      	ldr	r3, [r7, #4]
 81045e0:	3304      	adds	r3, #4
 81045e2:	2100      	movs	r1, #0
 81045e4:	4618      	mov	r0, r3
 81045e6:	f000 fbff 	bl	8104de8 <RCCEx_PLL2_Config>
 81045ea:	4603      	mov	r3, r0
 81045ec:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 81045ee:	e00c      	b.n	810460a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81045f0:	687b      	ldr	r3, [r7, #4]
 81045f2:	3324      	adds	r3, #36	; 0x24
 81045f4:	2102      	movs	r1, #2
 81045f6:	4618      	mov	r0, r3
 81045f8:	f000 fca8 	bl	8104f4c <RCCEx_PLL3_Config>
 81045fc:	4603      	mov	r3, r0
 81045fe:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8104600:	e003      	b.n	810460a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104602:	2301      	movs	r3, #1
 8104604:	75fb      	strb	r3, [r7, #23]
      break;
 8104606:	e000      	b.n	810460a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8104608:	bf00      	nop
    }

    if(ret == HAL_OK)
 810460a:	7dfb      	ldrb	r3, [r7, #23]
 810460c:	2b00      	cmp	r3, #0
 810460e:	d10a      	bne.n	8104626 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8104610:	4b5e      	ldr	r3, [pc, #376]	; (810478c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104614:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8104618:	687b      	ldr	r3, [r7, #4]
 810461a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 810461e:	495b      	ldr	r1, [pc, #364]	; (810478c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104620:	4313      	orrs	r3, r2
 8104622:	658b      	str	r3, [r1, #88]	; 0x58
 8104624:	e001      	b.n	810462a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104626:	7dfb      	ldrb	r3, [r7, #23]
 8104628:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 810462a:	687b      	ldr	r3, [r7, #4]
 810462c:	681b      	ldr	r3, [r3, #0]
 810462e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8104632:	2b00      	cmp	r3, #0
 8104634:	d033      	beq.n	810469e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8104636:	687b      	ldr	r3, [r7, #4]
 8104638:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810463c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104640:	d01c      	beq.n	810467c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8104642:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104646:	d816      	bhi.n	8104676 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8104648:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810464c:	d003      	beq.n	8104656 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 810464e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104652:	d007      	beq.n	8104664 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8104654:	e00f      	b.n	8104676 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104656:	4b4d      	ldr	r3, [pc, #308]	; (810478c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810465a:	4a4c      	ldr	r2, [pc, #304]	; (810478c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810465c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104660:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8104662:	e00c      	b.n	810467e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8104664:	687b      	ldr	r3, [r7, #4]
 8104666:	3324      	adds	r3, #36	; 0x24
 8104668:	2101      	movs	r1, #1
 810466a:	4618      	mov	r0, r3
 810466c:	f000 fc6e 	bl	8104f4c <RCCEx_PLL3_Config>
 8104670:	4603      	mov	r3, r0
 8104672:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8104674:	e003      	b.n	810467e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104676:	2301      	movs	r3, #1
 8104678:	75fb      	strb	r3, [r7, #23]
      break;
 810467a:	e000      	b.n	810467e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 810467c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810467e:	7dfb      	ldrb	r3, [r7, #23]
 8104680:	2b00      	cmp	r3, #0
 8104682:	d10a      	bne.n	810469a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8104684:	4b41      	ldr	r3, [pc, #260]	; (810478c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104688:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 810468c:	687b      	ldr	r3, [r7, #4]
 810468e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104692:	493e      	ldr	r1, [pc, #248]	; (810478c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104694:	4313      	orrs	r3, r2
 8104696:	654b      	str	r3, [r1, #84]	; 0x54
 8104698:	e001      	b.n	810469e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810469a:	7dfb      	ldrb	r3, [r7, #23]
 810469c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 810469e:	687b      	ldr	r3, [r7, #4]
 81046a0:	681b      	ldr	r3, [r3, #0]
 81046a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81046a6:	2b00      	cmp	r3, #0
 81046a8:	d029      	beq.n	81046fe <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 81046aa:	687b      	ldr	r3, [r7, #4]
 81046ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81046ae:	2b00      	cmp	r3, #0
 81046b0:	d003      	beq.n	81046ba <HAL_RCCEx_PeriphCLKConfig+0xcda>
 81046b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81046b6:	d007      	beq.n	81046c8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 81046b8:	e00f      	b.n	81046da <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81046ba:	4b34      	ldr	r3, [pc, #208]	; (810478c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81046bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81046be:	4a33      	ldr	r2, [pc, #204]	; (810478c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81046c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81046c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 81046c6:	e00b      	b.n	81046e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81046c8:	687b      	ldr	r3, [r7, #4]
 81046ca:	3304      	adds	r3, #4
 81046cc:	2102      	movs	r1, #2
 81046ce:	4618      	mov	r0, r3
 81046d0:	f000 fb8a 	bl	8104de8 <RCCEx_PLL2_Config>
 81046d4:	4603      	mov	r3, r0
 81046d6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 81046d8:	e002      	b.n	81046e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 81046da:	2301      	movs	r3, #1
 81046dc:	75fb      	strb	r3, [r7, #23]
      break;
 81046de:	bf00      	nop
    }

    if(ret == HAL_OK)
 81046e0:	7dfb      	ldrb	r3, [r7, #23]
 81046e2:	2b00      	cmp	r3, #0
 81046e4:	d109      	bne.n	81046fa <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 81046e6:	4b29      	ldr	r3, [pc, #164]	; (810478c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81046e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81046ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 81046ee:	687b      	ldr	r3, [r7, #4]
 81046f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81046f2:	4926      	ldr	r1, [pc, #152]	; (810478c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81046f4:	4313      	orrs	r3, r2
 81046f6:	64cb      	str	r3, [r1, #76]	; 0x4c
 81046f8:	e001      	b.n	81046fe <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81046fa:	7dfb      	ldrb	r3, [r7, #23]
 81046fc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 81046fe:	687b      	ldr	r3, [r7, #4]
 8104700:	681b      	ldr	r3, [r3, #0]
 8104702:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104706:	2b00      	cmp	r3, #0
 8104708:	d00a      	beq.n	8104720 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 810470a:	687b      	ldr	r3, [r7, #4]
 810470c:	3324      	adds	r3, #36	; 0x24
 810470e:	2102      	movs	r1, #2
 8104710:	4618      	mov	r0, r3
 8104712:	f000 fc1b 	bl	8104f4c <RCCEx_PLL3_Config>
 8104716:	4603      	mov	r3, r0
 8104718:	2b00      	cmp	r3, #0
 810471a:	d001      	beq.n	8104720 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 810471c:	2301      	movs	r3, #1
 810471e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8104720:	687b      	ldr	r3, [r7, #4]
 8104722:	681b      	ldr	r3, [r3, #0]
 8104724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104728:	2b00      	cmp	r3, #0
 810472a:	d033      	beq.n	8104794 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 810472c:	687b      	ldr	r3, [r7, #4]
 810472e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104730:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8104734:	d017      	beq.n	8104766 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8104736:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810473a:	d811      	bhi.n	8104760 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 810473c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8104740:	d013      	beq.n	810476a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8104742:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8104746:	d80b      	bhi.n	8104760 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8104748:	2b00      	cmp	r3, #0
 810474a:	d010      	beq.n	810476e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 810474c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104750:	d106      	bne.n	8104760 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104752:	4b0e      	ldr	r3, [pc, #56]	; (810478c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104756:	4a0d      	ldr	r2, [pc, #52]	; (810478c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810475c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 810475e:	e007      	b.n	8104770 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104760:	2301      	movs	r3, #1
 8104762:	75fb      	strb	r3, [r7, #23]
      break;
 8104764:	e004      	b.n	8104770 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8104766:	bf00      	nop
 8104768:	e002      	b.n	8104770 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 810476a:	bf00      	nop
 810476c:	e000      	b.n	8104770 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 810476e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104770:	7dfb      	ldrb	r3, [r7, #23]
 8104772:	2b00      	cmp	r3, #0
 8104774:	d10c      	bne.n	8104790 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8104776:	4b05      	ldr	r3, [pc, #20]	; (810478c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810477a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 810477e:	687b      	ldr	r3, [r7, #4]
 8104780:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104782:	4902      	ldr	r1, [pc, #8]	; (810478c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104784:	4313      	orrs	r3, r2
 8104786:	654b      	str	r3, [r1, #84]	; 0x54
 8104788:	e004      	b.n	8104794 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 810478a:	bf00      	nop
 810478c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104790:	7dfb      	ldrb	r3, [r7, #23]
 8104792:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8104794:	687b      	ldr	r3, [r7, #4]
 8104796:	681b      	ldr	r3, [r3, #0]
 8104798:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810479c:	2b00      	cmp	r3, #0
 810479e:	d008      	beq.n	81047b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 81047a0:	4b31      	ldr	r3, [pc, #196]	; (8104868 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81047a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81047a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 81047a8:	687b      	ldr	r3, [r7, #4]
 81047aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81047ac:	492e      	ldr	r1, [pc, #184]	; (8104868 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81047ae:	4313      	orrs	r3, r2
 81047b0:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 81047b2:	687b      	ldr	r3, [r7, #4]
 81047b4:	681b      	ldr	r3, [r3, #0]
 81047b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 81047ba:	2b00      	cmp	r3, #0
 81047bc:	d009      	beq.n	81047d2 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 81047be:	4b2a      	ldr	r3, [pc, #168]	; (8104868 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81047c0:	691b      	ldr	r3, [r3, #16]
 81047c2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 81047c6:	687b      	ldr	r3, [r7, #4]
 81047c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 81047cc:	4926      	ldr	r1, [pc, #152]	; (8104868 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81047ce:	4313      	orrs	r3, r2
 81047d0:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 81047d2:	687b      	ldr	r3, [r7, #4]
 81047d4:	681b      	ldr	r3, [r3, #0]
 81047d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81047da:	2b00      	cmp	r3, #0
 81047dc:	d008      	beq.n	81047f0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 81047de:	4b22      	ldr	r3, [pc, #136]	; (8104868 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81047e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81047e2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 81047e6:	687b      	ldr	r3, [r7, #4]
 81047e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 81047ea:	491f      	ldr	r1, [pc, #124]	; (8104868 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81047ec:	4313      	orrs	r3, r2
 81047ee:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 81047f0:	687b      	ldr	r3, [r7, #4]
 81047f2:	681b      	ldr	r3, [r3, #0]
 81047f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 81047f8:	2b00      	cmp	r3, #0
 81047fa:	d00d      	beq.n	8104818 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 81047fc:	4b1a      	ldr	r3, [pc, #104]	; (8104868 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81047fe:	691b      	ldr	r3, [r3, #16]
 8104800:	4a19      	ldr	r2, [pc, #100]	; (8104868 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104802:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8104806:	6113      	str	r3, [r2, #16]
 8104808:	4b17      	ldr	r3, [pc, #92]	; (8104868 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810480a:	691a      	ldr	r2, [r3, #16]
 810480c:	687b      	ldr	r3, [r7, #4]
 810480e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8104812:	4915      	ldr	r1, [pc, #84]	; (8104868 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104814:	4313      	orrs	r3, r2
 8104816:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8104818:	687b      	ldr	r3, [r7, #4]
 810481a:	681b      	ldr	r3, [r3, #0]
 810481c:	2b00      	cmp	r3, #0
 810481e:	da08      	bge.n	8104832 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8104820:	4b11      	ldr	r3, [pc, #68]	; (8104868 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104824:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8104828:	687b      	ldr	r3, [r7, #4]
 810482a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810482c:	490e      	ldr	r1, [pc, #56]	; (8104868 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810482e:	4313      	orrs	r3, r2
 8104830:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8104832:	687b      	ldr	r3, [r7, #4]
 8104834:	681b      	ldr	r3, [r3, #0]
 8104836:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810483a:	2b00      	cmp	r3, #0
 810483c:	d009      	beq.n	8104852 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 810483e:	4b0a      	ldr	r3, [pc, #40]	; (8104868 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104842:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8104846:	687b      	ldr	r3, [r7, #4]
 8104848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810484c:	4906      	ldr	r1, [pc, #24]	; (8104868 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810484e:	4313      	orrs	r3, r2
 8104850:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8104852:	7dbb      	ldrb	r3, [r7, #22]
 8104854:	2b00      	cmp	r3, #0
 8104856:	d101      	bne.n	810485c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8104858:	2300      	movs	r3, #0
 810485a:	e000      	b.n	810485e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 810485c:	2301      	movs	r3, #1
}
 810485e:	4618      	mov	r0, r3
 8104860:	3718      	adds	r7, #24
 8104862:	46bd      	mov	sp, r7
 8104864:	bd80      	pop	{r7, pc}
 8104866:	bf00      	nop
 8104868:	58024400 	.word	0x58024400

0810486c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 810486c:	b580      	push	{r7, lr}
 810486e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8104870:	f7ff f858 	bl	8103924 <HAL_RCC_GetHCLKFreq>
 8104874:	4602      	mov	r2, r0
 8104876:	4b06      	ldr	r3, [pc, #24]	; (8104890 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8104878:	6a1b      	ldr	r3, [r3, #32]
 810487a:	091b      	lsrs	r3, r3, #4
 810487c:	f003 0307 	and.w	r3, r3, #7
 8104880:	4904      	ldr	r1, [pc, #16]	; (8104894 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8104882:	5ccb      	ldrb	r3, [r1, r3]
 8104884:	f003 031f 	and.w	r3, r3, #31
 8104888:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 810488c:	4618      	mov	r0, r3
 810488e:	bd80      	pop	{r7, pc}
 8104890:	58024400 	.word	0x58024400
 8104894:	0810e700 	.word	0x0810e700

08104898 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8104898:	b480      	push	{r7}
 810489a:	b089      	sub	sp, #36	; 0x24
 810489c:	af00      	add	r7, sp, #0
 810489e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81048a0:	4ba1      	ldr	r3, [pc, #644]	; (8104b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81048a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81048a4:	f003 0303 	and.w	r3, r3, #3
 81048a8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 81048aa:	4b9f      	ldr	r3, [pc, #636]	; (8104b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81048ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81048ae:	0b1b      	lsrs	r3, r3, #12
 81048b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81048b4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 81048b6:	4b9c      	ldr	r3, [pc, #624]	; (8104b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81048b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81048ba:	091b      	lsrs	r3, r3, #4
 81048bc:	f003 0301 	and.w	r3, r3, #1
 81048c0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 81048c2:	4b99      	ldr	r3, [pc, #612]	; (8104b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81048c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81048c6:	08db      	lsrs	r3, r3, #3
 81048c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81048cc:	693a      	ldr	r2, [r7, #16]
 81048ce:	fb02 f303 	mul.w	r3, r2, r3
 81048d2:	ee07 3a90 	vmov	s15, r3
 81048d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81048da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 81048de:	697b      	ldr	r3, [r7, #20]
 81048e0:	2b00      	cmp	r3, #0
 81048e2:	f000 8111 	beq.w	8104b08 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 81048e6:	69bb      	ldr	r3, [r7, #24]
 81048e8:	2b02      	cmp	r3, #2
 81048ea:	f000 8083 	beq.w	81049f4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 81048ee:	69bb      	ldr	r3, [r7, #24]
 81048f0:	2b02      	cmp	r3, #2
 81048f2:	f200 80a1 	bhi.w	8104a38 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 81048f6:	69bb      	ldr	r3, [r7, #24]
 81048f8:	2b00      	cmp	r3, #0
 81048fa:	d003      	beq.n	8104904 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 81048fc:	69bb      	ldr	r3, [r7, #24]
 81048fe:	2b01      	cmp	r3, #1
 8104900:	d056      	beq.n	81049b0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8104902:	e099      	b.n	8104a38 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104904:	4b88      	ldr	r3, [pc, #544]	; (8104b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104906:	681b      	ldr	r3, [r3, #0]
 8104908:	f003 0320 	and.w	r3, r3, #32
 810490c:	2b00      	cmp	r3, #0
 810490e:	d02d      	beq.n	810496c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8104910:	4b85      	ldr	r3, [pc, #532]	; (8104b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104912:	681b      	ldr	r3, [r3, #0]
 8104914:	08db      	lsrs	r3, r3, #3
 8104916:	f003 0303 	and.w	r3, r3, #3
 810491a:	4a84      	ldr	r2, [pc, #528]	; (8104b2c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 810491c:	fa22 f303 	lsr.w	r3, r2, r3
 8104920:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8104922:	68bb      	ldr	r3, [r7, #8]
 8104924:	ee07 3a90 	vmov	s15, r3
 8104928:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810492c:	697b      	ldr	r3, [r7, #20]
 810492e:	ee07 3a90 	vmov	s15, r3
 8104932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810493a:	4b7b      	ldr	r3, [pc, #492]	; (8104b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810493c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810493e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104942:	ee07 3a90 	vmov	s15, r3
 8104946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810494a:	ed97 6a03 	vldr	s12, [r7, #12]
 810494e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8104b30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810495a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810495e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104966:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 810496a:	e087      	b.n	8104a7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810496c:	697b      	ldr	r3, [r7, #20]
 810496e:	ee07 3a90 	vmov	s15, r3
 8104972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104976:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8104b34 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 810497a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810497e:	4b6a      	ldr	r3, [pc, #424]	; (8104b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104986:	ee07 3a90 	vmov	s15, r3
 810498a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810498e:	ed97 6a03 	vldr	s12, [r7, #12]
 8104992:	eddf 5a67 	vldr	s11, [pc, #412]	; 8104b30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104996:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810499a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810499e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81049a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81049a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81049aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81049ae:	e065      	b.n	8104a7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81049b0:	697b      	ldr	r3, [r7, #20]
 81049b2:	ee07 3a90 	vmov	s15, r3
 81049b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81049ba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8104b38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81049be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81049c2:	4b59      	ldr	r3, [pc, #356]	; (8104b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81049c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81049c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81049ca:	ee07 3a90 	vmov	s15, r3
 81049ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81049d2:	ed97 6a03 	vldr	s12, [r7, #12]
 81049d6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8104b30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81049da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81049de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81049e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81049e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81049ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 81049ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81049f2:	e043      	b.n	8104a7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81049f4:	697b      	ldr	r3, [r7, #20]
 81049f6:	ee07 3a90 	vmov	s15, r3
 81049fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81049fe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8104b3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8104a02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104a06:	4b48      	ldr	r3, [pc, #288]	; (8104b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104a0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104a0e:	ee07 3a90 	vmov	s15, r3
 8104a12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104a16:	ed97 6a03 	vldr	s12, [r7, #12]
 8104a1a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8104b30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104a1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104a22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104a26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104a2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104a32:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104a36:	e021      	b.n	8104a7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8104a38:	697b      	ldr	r3, [r7, #20]
 8104a3a:	ee07 3a90 	vmov	s15, r3
 8104a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104a42:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8104b38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8104a46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104a4a:	4b37      	ldr	r3, [pc, #220]	; (8104b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104a52:	ee07 3a90 	vmov	s15, r3
 8104a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104a5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8104a5e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8104b30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104a62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104a66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104a6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104a6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104a76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104a7a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8104a7c:	4b2a      	ldr	r3, [pc, #168]	; (8104b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104a80:	0a5b      	lsrs	r3, r3, #9
 8104a82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104a86:	ee07 3a90 	vmov	s15, r3
 8104a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104a8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104a92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104a96:	edd7 6a07 	vldr	s13, [r7, #28]
 8104a9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104a9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104aa2:	ee17 2a90 	vmov	r2, s15
 8104aa6:	687b      	ldr	r3, [r7, #4]
 8104aa8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8104aaa:	4b1f      	ldr	r3, [pc, #124]	; (8104b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104aae:	0c1b      	lsrs	r3, r3, #16
 8104ab0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104ab4:	ee07 3a90 	vmov	s15, r3
 8104ab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104abc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104ac0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104ac4:	edd7 6a07 	vldr	s13, [r7, #28]
 8104ac8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104acc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104ad0:	ee17 2a90 	vmov	r2, s15
 8104ad4:	687b      	ldr	r3, [r7, #4]
 8104ad6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8104ad8:	4b13      	ldr	r3, [pc, #76]	; (8104b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104adc:	0e1b      	lsrs	r3, r3, #24
 8104ade:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104ae2:	ee07 3a90 	vmov	s15, r3
 8104ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104aea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104aee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104af2:	edd7 6a07 	vldr	s13, [r7, #28]
 8104af6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104afa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104afe:	ee17 2a90 	vmov	r2, s15
 8104b02:	687b      	ldr	r3, [r7, #4]
 8104b04:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8104b06:	e008      	b.n	8104b1a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8104b08:	687b      	ldr	r3, [r7, #4]
 8104b0a:	2200      	movs	r2, #0
 8104b0c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8104b0e:	687b      	ldr	r3, [r7, #4]
 8104b10:	2200      	movs	r2, #0
 8104b12:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8104b14:	687b      	ldr	r3, [r7, #4]
 8104b16:	2200      	movs	r2, #0
 8104b18:	609a      	str	r2, [r3, #8]
}
 8104b1a:	bf00      	nop
 8104b1c:	3724      	adds	r7, #36	; 0x24
 8104b1e:	46bd      	mov	sp, r7
 8104b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b24:	4770      	bx	lr
 8104b26:	bf00      	nop
 8104b28:	58024400 	.word	0x58024400
 8104b2c:	03d09000 	.word	0x03d09000
 8104b30:	46000000 	.word	0x46000000
 8104b34:	4c742400 	.word	0x4c742400
 8104b38:	4a742400 	.word	0x4a742400
 8104b3c:	4af42400 	.word	0x4af42400

08104b40 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8104b40:	b480      	push	{r7}
 8104b42:	b089      	sub	sp, #36	; 0x24
 8104b44:	af00      	add	r7, sp, #0
 8104b46:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104b48:	4ba1      	ldr	r3, [pc, #644]	; (8104dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104b4c:	f003 0303 	and.w	r3, r3, #3
 8104b50:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8104b52:	4b9f      	ldr	r3, [pc, #636]	; (8104dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104b56:	0d1b      	lsrs	r3, r3, #20
 8104b58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8104b5c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8104b5e:	4b9c      	ldr	r3, [pc, #624]	; (8104dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104b62:	0a1b      	lsrs	r3, r3, #8
 8104b64:	f003 0301 	and.w	r3, r3, #1
 8104b68:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8104b6a:	4b99      	ldr	r3, [pc, #612]	; (8104dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104b6e:	08db      	lsrs	r3, r3, #3
 8104b70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8104b74:	693a      	ldr	r2, [r7, #16]
 8104b76:	fb02 f303 	mul.w	r3, r2, r3
 8104b7a:	ee07 3a90 	vmov	s15, r3
 8104b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104b82:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8104b86:	697b      	ldr	r3, [r7, #20]
 8104b88:	2b00      	cmp	r3, #0
 8104b8a:	f000 8111 	beq.w	8104db0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8104b8e:	69bb      	ldr	r3, [r7, #24]
 8104b90:	2b02      	cmp	r3, #2
 8104b92:	f000 8083 	beq.w	8104c9c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8104b96:	69bb      	ldr	r3, [r7, #24]
 8104b98:	2b02      	cmp	r3, #2
 8104b9a:	f200 80a1 	bhi.w	8104ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8104b9e:	69bb      	ldr	r3, [r7, #24]
 8104ba0:	2b00      	cmp	r3, #0
 8104ba2:	d003      	beq.n	8104bac <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8104ba4:	69bb      	ldr	r3, [r7, #24]
 8104ba6:	2b01      	cmp	r3, #1
 8104ba8:	d056      	beq.n	8104c58 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8104baa:	e099      	b.n	8104ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104bac:	4b88      	ldr	r3, [pc, #544]	; (8104dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104bae:	681b      	ldr	r3, [r3, #0]
 8104bb0:	f003 0320 	and.w	r3, r3, #32
 8104bb4:	2b00      	cmp	r3, #0
 8104bb6:	d02d      	beq.n	8104c14 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8104bb8:	4b85      	ldr	r3, [pc, #532]	; (8104dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104bba:	681b      	ldr	r3, [r3, #0]
 8104bbc:	08db      	lsrs	r3, r3, #3
 8104bbe:	f003 0303 	and.w	r3, r3, #3
 8104bc2:	4a84      	ldr	r2, [pc, #528]	; (8104dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8104bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8104bc8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8104bca:	68bb      	ldr	r3, [r7, #8]
 8104bcc:	ee07 3a90 	vmov	s15, r3
 8104bd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104bd4:	697b      	ldr	r3, [r7, #20]
 8104bd6:	ee07 3a90 	vmov	s15, r3
 8104bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104bde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104be2:	4b7b      	ldr	r3, [pc, #492]	; (8104dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104bea:	ee07 3a90 	vmov	s15, r3
 8104bee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104bf2:	ed97 6a03 	vldr	s12, [r7, #12]
 8104bf6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8104dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104bfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104bfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104c02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104c06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104c0e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8104c12:	e087      	b.n	8104d24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8104c14:	697b      	ldr	r3, [r7, #20]
 8104c16:	ee07 3a90 	vmov	s15, r3
 8104c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104c1e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8104ddc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8104c22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104c26:	4b6a      	ldr	r3, [pc, #424]	; (8104dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104c2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104c2e:	ee07 3a90 	vmov	s15, r3
 8104c32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104c36:	ed97 6a03 	vldr	s12, [r7, #12]
 8104c3a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8104dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104c3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104c42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104c46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104c4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104c52:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104c56:	e065      	b.n	8104d24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8104c58:	697b      	ldr	r3, [r7, #20]
 8104c5a:	ee07 3a90 	vmov	s15, r3
 8104c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104c62:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8104de0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8104c66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104c6a:	4b59      	ldr	r3, [pc, #356]	; (8104dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104c6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104c72:	ee07 3a90 	vmov	s15, r3
 8104c76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104c7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8104c7e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8104dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104c82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104c86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104c8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104c8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104c96:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104c9a:	e043      	b.n	8104d24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8104c9c:	697b      	ldr	r3, [r7, #20]
 8104c9e:	ee07 3a90 	vmov	s15, r3
 8104ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104ca6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8104de4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8104caa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104cae:	4b48      	ldr	r3, [pc, #288]	; (8104dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104cb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104cb6:	ee07 3a90 	vmov	s15, r3
 8104cba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104cbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8104cc2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8104dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104cc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104cca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104cce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104cd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104cda:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104cde:	e021      	b.n	8104d24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8104ce0:	697b      	ldr	r3, [r7, #20]
 8104ce2:	ee07 3a90 	vmov	s15, r3
 8104ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104cea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8104de0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8104cee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104cf2:	4b37      	ldr	r3, [pc, #220]	; (8104dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104cfa:	ee07 3a90 	vmov	s15, r3
 8104cfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104d02:	ed97 6a03 	vldr	s12, [r7, #12]
 8104d06:	eddf 5a34 	vldr	s11, [pc, #208]	; 8104dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104d0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104d0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104d12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104d16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104d1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104d22:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8104d24:	4b2a      	ldr	r3, [pc, #168]	; (8104dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104d28:	0a5b      	lsrs	r3, r3, #9
 8104d2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104d2e:	ee07 3a90 	vmov	s15, r3
 8104d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104d36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104d3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104d3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8104d42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104d46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104d4a:	ee17 2a90 	vmov	r2, s15
 8104d4e:	687b      	ldr	r3, [r7, #4]
 8104d50:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8104d52:	4b1f      	ldr	r3, [pc, #124]	; (8104dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104d56:	0c1b      	lsrs	r3, r3, #16
 8104d58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104d5c:	ee07 3a90 	vmov	s15, r3
 8104d60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104d64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104d68:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104d6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8104d70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104d74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104d78:	ee17 2a90 	vmov	r2, s15
 8104d7c:	687b      	ldr	r3, [r7, #4]
 8104d7e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8104d80:	4b13      	ldr	r3, [pc, #76]	; (8104dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104d84:	0e1b      	lsrs	r3, r3, #24
 8104d86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104d8a:	ee07 3a90 	vmov	s15, r3
 8104d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104d92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104d96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104d9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8104d9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104da2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104da6:	ee17 2a90 	vmov	r2, s15
 8104daa:	687b      	ldr	r3, [r7, #4]
 8104dac:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8104dae:	e008      	b.n	8104dc2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8104db0:	687b      	ldr	r3, [r7, #4]
 8104db2:	2200      	movs	r2, #0
 8104db4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8104db6:	687b      	ldr	r3, [r7, #4]
 8104db8:	2200      	movs	r2, #0
 8104dba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8104dbc:	687b      	ldr	r3, [r7, #4]
 8104dbe:	2200      	movs	r2, #0
 8104dc0:	609a      	str	r2, [r3, #8]
}
 8104dc2:	bf00      	nop
 8104dc4:	3724      	adds	r7, #36	; 0x24
 8104dc6:	46bd      	mov	sp, r7
 8104dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104dcc:	4770      	bx	lr
 8104dce:	bf00      	nop
 8104dd0:	58024400 	.word	0x58024400
 8104dd4:	03d09000 	.word	0x03d09000
 8104dd8:	46000000 	.word	0x46000000
 8104ddc:	4c742400 	.word	0x4c742400
 8104de0:	4a742400 	.word	0x4a742400
 8104de4:	4af42400 	.word	0x4af42400

08104de8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8104de8:	b580      	push	{r7, lr}
 8104dea:	b084      	sub	sp, #16
 8104dec:	af00      	add	r7, sp, #0
 8104dee:	6078      	str	r0, [r7, #4]
 8104df0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8104df2:	2300      	movs	r3, #0
 8104df4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8104df6:	4b54      	ldr	r3, [pc, #336]	; (8104f48 <RCCEx_PLL2_Config+0x160>)
 8104df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104dfa:	f003 0303 	and.w	r3, r3, #3
 8104dfe:	2b03      	cmp	r3, #3
 8104e00:	d101      	bne.n	8104e06 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8104e02:	2301      	movs	r3, #1
 8104e04:	e09b      	b.n	8104f3e <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8104e06:	4b50      	ldr	r3, [pc, #320]	; (8104f48 <RCCEx_PLL2_Config+0x160>)
 8104e08:	681b      	ldr	r3, [r3, #0]
 8104e0a:	4a4f      	ldr	r2, [pc, #316]	; (8104f48 <RCCEx_PLL2_Config+0x160>)
 8104e0c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8104e10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104e12:	f7fd fb15 	bl	8102440 <HAL_GetTick>
 8104e16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8104e18:	e008      	b.n	8104e2c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8104e1a:	f7fd fb11 	bl	8102440 <HAL_GetTick>
 8104e1e:	4602      	mov	r2, r0
 8104e20:	68bb      	ldr	r3, [r7, #8]
 8104e22:	1ad3      	subs	r3, r2, r3
 8104e24:	2b02      	cmp	r3, #2
 8104e26:	d901      	bls.n	8104e2c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8104e28:	2303      	movs	r3, #3
 8104e2a:	e088      	b.n	8104f3e <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8104e2c:	4b46      	ldr	r3, [pc, #280]	; (8104f48 <RCCEx_PLL2_Config+0x160>)
 8104e2e:	681b      	ldr	r3, [r3, #0]
 8104e30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104e34:	2b00      	cmp	r3, #0
 8104e36:	d1f0      	bne.n	8104e1a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8104e38:	4b43      	ldr	r3, [pc, #268]	; (8104f48 <RCCEx_PLL2_Config+0x160>)
 8104e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104e3c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8104e40:	687b      	ldr	r3, [r7, #4]
 8104e42:	681b      	ldr	r3, [r3, #0]
 8104e44:	031b      	lsls	r3, r3, #12
 8104e46:	4940      	ldr	r1, [pc, #256]	; (8104f48 <RCCEx_PLL2_Config+0x160>)
 8104e48:	4313      	orrs	r3, r2
 8104e4a:	628b      	str	r3, [r1, #40]	; 0x28
 8104e4c:	687b      	ldr	r3, [r7, #4]
 8104e4e:	685b      	ldr	r3, [r3, #4]
 8104e50:	3b01      	subs	r3, #1
 8104e52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8104e56:	687b      	ldr	r3, [r7, #4]
 8104e58:	689b      	ldr	r3, [r3, #8]
 8104e5a:	3b01      	subs	r3, #1
 8104e5c:	025b      	lsls	r3, r3, #9
 8104e5e:	b29b      	uxth	r3, r3
 8104e60:	431a      	orrs	r2, r3
 8104e62:	687b      	ldr	r3, [r7, #4]
 8104e64:	68db      	ldr	r3, [r3, #12]
 8104e66:	3b01      	subs	r3, #1
 8104e68:	041b      	lsls	r3, r3, #16
 8104e6a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8104e6e:	431a      	orrs	r2, r3
 8104e70:	687b      	ldr	r3, [r7, #4]
 8104e72:	691b      	ldr	r3, [r3, #16]
 8104e74:	3b01      	subs	r3, #1
 8104e76:	061b      	lsls	r3, r3, #24
 8104e78:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8104e7c:	4932      	ldr	r1, [pc, #200]	; (8104f48 <RCCEx_PLL2_Config+0x160>)
 8104e7e:	4313      	orrs	r3, r2
 8104e80:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8104e82:	4b31      	ldr	r3, [pc, #196]	; (8104f48 <RCCEx_PLL2_Config+0x160>)
 8104e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104e86:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8104e8a:	687b      	ldr	r3, [r7, #4]
 8104e8c:	695b      	ldr	r3, [r3, #20]
 8104e8e:	492e      	ldr	r1, [pc, #184]	; (8104f48 <RCCEx_PLL2_Config+0x160>)
 8104e90:	4313      	orrs	r3, r2
 8104e92:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8104e94:	4b2c      	ldr	r3, [pc, #176]	; (8104f48 <RCCEx_PLL2_Config+0x160>)
 8104e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104e98:	f023 0220 	bic.w	r2, r3, #32
 8104e9c:	687b      	ldr	r3, [r7, #4]
 8104e9e:	699b      	ldr	r3, [r3, #24]
 8104ea0:	4929      	ldr	r1, [pc, #164]	; (8104f48 <RCCEx_PLL2_Config+0x160>)
 8104ea2:	4313      	orrs	r3, r2
 8104ea4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8104ea6:	4b28      	ldr	r3, [pc, #160]	; (8104f48 <RCCEx_PLL2_Config+0x160>)
 8104ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104eaa:	4a27      	ldr	r2, [pc, #156]	; (8104f48 <RCCEx_PLL2_Config+0x160>)
 8104eac:	f023 0310 	bic.w	r3, r3, #16
 8104eb0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8104eb2:	4b25      	ldr	r3, [pc, #148]	; (8104f48 <RCCEx_PLL2_Config+0x160>)
 8104eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104eb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8104eba:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8104ebe:	687a      	ldr	r2, [r7, #4]
 8104ec0:	69d2      	ldr	r2, [r2, #28]
 8104ec2:	00d2      	lsls	r2, r2, #3
 8104ec4:	4920      	ldr	r1, [pc, #128]	; (8104f48 <RCCEx_PLL2_Config+0x160>)
 8104ec6:	4313      	orrs	r3, r2
 8104ec8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8104eca:	4b1f      	ldr	r3, [pc, #124]	; (8104f48 <RCCEx_PLL2_Config+0x160>)
 8104ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104ece:	4a1e      	ldr	r2, [pc, #120]	; (8104f48 <RCCEx_PLL2_Config+0x160>)
 8104ed0:	f043 0310 	orr.w	r3, r3, #16
 8104ed4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8104ed6:	683b      	ldr	r3, [r7, #0]
 8104ed8:	2b00      	cmp	r3, #0
 8104eda:	d106      	bne.n	8104eea <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8104edc:	4b1a      	ldr	r3, [pc, #104]	; (8104f48 <RCCEx_PLL2_Config+0x160>)
 8104ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104ee0:	4a19      	ldr	r2, [pc, #100]	; (8104f48 <RCCEx_PLL2_Config+0x160>)
 8104ee2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8104ee6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8104ee8:	e00f      	b.n	8104f0a <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8104eea:	683b      	ldr	r3, [r7, #0]
 8104eec:	2b01      	cmp	r3, #1
 8104eee:	d106      	bne.n	8104efe <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8104ef0:	4b15      	ldr	r3, [pc, #84]	; (8104f48 <RCCEx_PLL2_Config+0x160>)
 8104ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104ef4:	4a14      	ldr	r2, [pc, #80]	; (8104f48 <RCCEx_PLL2_Config+0x160>)
 8104ef6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8104efa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8104efc:	e005      	b.n	8104f0a <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8104efe:	4b12      	ldr	r3, [pc, #72]	; (8104f48 <RCCEx_PLL2_Config+0x160>)
 8104f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104f02:	4a11      	ldr	r2, [pc, #68]	; (8104f48 <RCCEx_PLL2_Config+0x160>)
 8104f04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8104f08:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8104f0a:	4b0f      	ldr	r3, [pc, #60]	; (8104f48 <RCCEx_PLL2_Config+0x160>)
 8104f0c:	681b      	ldr	r3, [r3, #0]
 8104f0e:	4a0e      	ldr	r2, [pc, #56]	; (8104f48 <RCCEx_PLL2_Config+0x160>)
 8104f10:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8104f14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104f16:	f7fd fa93 	bl	8102440 <HAL_GetTick>
 8104f1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8104f1c:	e008      	b.n	8104f30 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8104f1e:	f7fd fa8f 	bl	8102440 <HAL_GetTick>
 8104f22:	4602      	mov	r2, r0
 8104f24:	68bb      	ldr	r3, [r7, #8]
 8104f26:	1ad3      	subs	r3, r2, r3
 8104f28:	2b02      	cmp	r3, #2
 8104f2a:	d901      	bls.n	8104f30 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8104f2c:	2303      	movs	r3, #3
 8104f2e:	e006      	b.n	8104f3e <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8104f30:	4b05      	ldr	r3, [pc, #20]	; (8104f48 <RCCEx_PLL2_Config+0x160>)
 8104f32:	681b      	ldr	r3, [r3, #0]
 8104f34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104f38:	2b00      	cmp	r3, #0
 8104f3a:	d0f0      	beq.n	8104f1e <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8104f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8104f3e:	4618      	mov	r0, r3
 8104f40:	3710      	adds	r7, #16
 8104f42:	46bd      	mov	sp, r7
 8104f44:	bd80      	pop	{r7, pc}
 8104f46:	bf00      	nop
 8104f48:	58024400 	.word	0x58024400

08104f4c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8104f4c:	b580      	push	{r7, lr}
 8104f4e:	b084      	sub	sp, #16
 8104f50:	af00      	add	r7, sp, #0
 8104f52:	6078      	str	r0, [r7, #4]
 8104f54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8104f56:	2300      	movs	r3, #0
 8104f58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8104f5a:	4b54      	ldr	r3, [pc, #336]	; (81050ac <RCCEx_PLL3_Config+0x160>)
 8104f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104f5e:	f003 0303 	and.w	r3, r3, #3
 8104f62:	2b03      	cmp	r3, #3
 8104f64:	d101      	bne.n	8104f6a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8104f66:	2301      	movs	r3, #1
 8104f68:	e09b      	b.n	81050a2 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8104f6a:	4b50      	ldr	r3, [pc, #320]	; (81050ac <RCCEx_PLL3_Config+0x160>)
 8104f6c:	681b      	ldr	r3, [r3, #0]
 8104f6e:	4a4f      	ldr	r2, [pc, #316]	; (81050ac <RCCEx_PLL3_Config+0x160>)
 8104f70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8104f74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104f76:	f7fd fa63 	bl	8102440 <HAL_GetTick>
 8104f7a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8104f7c:	e008      	b.n	8104f90 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8104f7e:	f7fd fa5f 	bl	8102440 <HAL_GetTick>
 8104f82:	4602      	mov	r2, r0
 8104f84:	68bb      	ldr	r3, [r7, #8]
 8104f86:	1ad3      	subs	r3, r2, r3
 8104f88:	2b02      	cmp	r3, #2
 8104f8a:	d901      	bls.n	8104f90 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8104f8c:	2303      	movs	r3, #3
 8104f8e:	e088      	b.n	81050a2 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8104f90:	4b46      	ldr	r3, [pc, #280]	; (81050ac <RCCEx_PLL3_Config+0x160>)
 8104f92:	681b      	ldr	r3, [r3, #0]
 8104f94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104f98:	2b00      	cmp	r3, #0
 8104f9a:	d1f0      	bne.n	8104f7e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8104f9c:	4b43      	ldr	r3, [pc, #268]	; (81050ac <RCCEx_PLL3_Config+0x160>)
 8104f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104fa0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8104fa4:	687b      	ldr	r3, [r7, #4]
 8104fa6:	681b      	ldr	r3, [r3, #0]
 8104fa8:	051b      	lsls	r3, r3, #20
 8104faa:	4940      	ldr	r1, [pc, #256]	; (81050ac <RCCEx_PLL3_Config+0x160>)
 8104fac:	4313      	orrs	r3, r2
 8104fae:	628b      	str	r3, [r1, #40]	; 0x28
 8104fb0:	687b      	ldr	r3, [r7, #4]
 8104fb2:	685b      	ldr	r3, [r3, #4]
 8104fb4:	3b01      	subs	r3, #1
 8104fb6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8104fba:	687b      	ldr	r3, [r7, #4]
 8104fbc:	689b      	ldr	r3, [r3, #8]
 8104fbe:	3b01      	subs	r3, #1
 8104fc0:	025b      	lsls	r3, r3, #9
 8104fc2:	b29b      	uxth	r3, r3
 8104fc4:	431a      	orrs	r2, r3
 8104fc6:	687b      	ldr	r3, [r7, #4]
 8104fc8:	68db      	ldr	r3, [r3, #12]
 8104fca:	3b01      	subs	r3, #1
 8104fcc:	041b      	lsls	r3, r3, #16
 8104fce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8104fd2:	431a      	orrs	r2, r3
 8104fd4:	687b      	ldr	r3, [r7, #4]
 8104fd6:	691b      	ldr	r3, [r3, #16]
 8104fd8:	3b01      	subs	r3, #1
 8104fda:	061b      	lsls	r3, r3, #24
 8104fdc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8104fe0:	4932      	ldr	r1, [pc, #200]	; (81050ac <RCCEx_PLL3_Config+0x160>)
 8104fe2:	4313      	orrs	r3, r2
 8104fe4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8104fe6:	4b31      	ldr	r3, [pc, #196]	; (81050ac <RCCEx_PLL3_Config+0x160>)
 8104fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104fea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8104fee:	687b      	ldr	r3, [r7, #4]
 8104ff0:	695b      	ldr	r3, [r3, #20]
 8104ff2:	492e      	ldr	r1, [pc, #184]	; (81050ac <RCCEx_PLL3_Config+0x160>)
 8104ff4:	4313      	orrs	r3, r2
 8104ff6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8104ff8:	4b2c      	ldr	r3, [pc, #176]	; (81050ac <RCCEx_PLL3_Config+0x160>)
 8104ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104ffc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8105000:	687b      	ldr	r3, [r7, #4]
 8105002:	699b      	ldr	r3, [r3, #24]
 8105004:	4929      	ldr	r1, [pc, #164]	; (81050ac <RCCEx_PLL3_Config+0x160>)
 8105006:	4313      	orrs	r3, r2
 8105008:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 810500a:	4b28      	ldr	r3, [pc, #160]	; (81050ac <RCCEx_PLL3_Config+0x160>)
 810500c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810500e:	4a27      	ldr	r2, [pc, #156]	; (81050ac <RCCEx_PLL3_Config+0x160>)
 8105010:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8105014:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8105016:	4b25      	ldr	r3, [pc, #148]	; (81050ac <RCCEx_PLL3_Config+0x160>)
 8105018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810501a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810501e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8105022:	687a      	ldr	r2, [r7, #4]
 8105024:	69d2      	ldr	r2, [r2, #28]
 8105026:	00d2      	lsls	r2, r2, #3
 8105028:	4920      	ldr	r1, [pc, #128]	; (81050ac <RCCEx_PLL3_Config+0x160>)
 810502a:	4313      	orrs	r3, r2
 810502c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 810502e:	4b1f      	ldr	r3, [pc, #124]	; (81050ac <RCCEx_PLL3_Config+0x160>)
 8105030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105032:	4a1e      	ldr	r2, [pc, #120]	; (81050ac <RCCEx_PLL3_Config+0x160>)
 8105034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8105038:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 810503a:	683b      	ldr	r3, [r7, #0]
 810503c:	2b00      	cmp	r3, #0
 810503e:	d106      	bne.n	810504e <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8105040:	4b1a      	ldr	r3, [pc, #104]	; (81050ac <RCCEx_PLL3_Config+0x160>)
 8105042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105044:	4a19      	ldr	r2, [pc, #100]	; (81050ac <RCCEx_PLL3_Config+0x160>)
 8105046:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 810504a:	62d3      	str	r3, [r2, #44]	; 0x2c
 810504c:	e00f      	b.n	810506e <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 810504e:	683b      	ldr	r3, [r7, #0]
 8105050:	2b01      	cmp	r3, #1
 8105052:	d106      	bne.n	8105062 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8105054:	4b15      	ldr	r3, [pc, #84]	; (81050ac <RCCEx_PLL3_Config+0x160>)
 8105056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105058:	4a14      	ldr	r2, [pc, #80]	; (81050ac <RCCEx_PLL3_Config+0x160>)
 810505a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 810505e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8105060:	e005      	b.n	810506e <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8105062:	4b12      	ldr	r3, [pc, #72]	; (81050ac <RCCEx_PLL3_Config+0x160>)
 8105064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105066:	4a11      	ldr	r2, [pc, #68]	; (81050ac <RCCEx_PLL3_Config+0x160>)
 8105068:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 810506c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 810506e:	4b0f      	ldr	r3, [pc, #60]	; (81050ac <RCCEx_PLL3_Config+0x160>)
 8105070:	681b      	ldr	r3, [r3, #0]
 8105072:	4a0e      	ldr	r2, [pc, #56]	; (81050ac <RCCEx_PLL3_Config+0x160>)
 8105074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8105078:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810507a:	f7fd f9e1 	bl	8102440 <HAL_GetTick>
 810507e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8105080:	e008      	b.n	8105094 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8105082:	f7fd f9dd 	bl	8102440 <HAL_GetTick>
 8105086:	4602      	mov	r2, r0
 8105088:	68bb      	ldr	r3, [r7, #8]
 810508a:	1ad3      	subs	r3, r2, r3
 810508c:	2b02      	cmp	r3, #2
 810508e:	d901      	bls.n	8105094 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8105090:	2303      	movs	r3, #3
 8105092:	e006      	b.n	81050a2 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8105094:	4b05      	ldr	r3, [pc, #20]	; (81050ac <RCCEx_PLL3_Config+0x160>)
 8105096:	681b      	ldr	r3, [r3, #0]
 8105098:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810509c:	2b00      	cmp	r3, #0
 810509e:	d0f0      	beq.n	8105082 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 81050a0:	7bfb      	ldrb	r3, [r7, #15]
}
 81050a2:	4618      	mov	r0, r3
 81050a4:	3710      	adds	r7, #16
 81050a6:	46bd      	mov	sp, r7
 81050a8:	bd80      	pop	{r7, pc}
 81050aa:	bf00      	nop
 81050ac:	58024400 	.word	0x58024400

081050b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 81050b0:	b580      	push	{r7, lr}
 81050b2:	b082      	sub	sp, #8
 81050b4:	af00      	add	r7, sp, #0
 81050b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81050b8:	687b      	ldr	r3, [r7, #4]
 81050ba:	2b00      	cmp	r3, #0
 81050bc:	d101      	bne.n	81050c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 81050be:	2301      	movs	r3, #1
 81050c0:	e049      	b.n	8105156 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81050c2:	687b      	ldr	r3, [r7, #4]
 81050c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81050c8:	b2db      	uxtb	r3, r3
 81050ca:	2b00      	cmp	r3, #0
 81050cc:	d106      	bne.n	81050dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81050ce:	687b      	ldr	r3, [r7, #4]
 81050d0:	2200      	movs	r2, #0
 81050d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 81050d6:	6878      	ldr	r0, [r7, #4]
 81050d8:	f7fc fe8c 	bl	8101df4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81050dc:	687b      	ldr	r3, [r7, #4]
 81050de:	2202      	movs	r2, #2
 81050e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 81050e4:	687b      	ldr	r3, [r7, #4]
 81050e6:	681a      	ldr	r2, [r3, #0]
 81050e8:	687b      	ldr	r3, [r7, #4]
 81050ea:	3304      	adds	r3, #4
 81050ec:	4619      	mov	r1, r3
 81050ee:	4610      	mov	r0, r2
 81050f0:	f000 fd72 	bl	8105bd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81050f4:	687b      	ldr	r3, [r7, #4]
 81050f6:	2201      	movs	r2, #1
 81050f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81050fc:	687b      	ldr	r3, [r7, #4]
 81050fe:	2201      	movs	r2, #1
 8105100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8105104:	687b      	ldr	r3, [r7, #4]
 8105106:	2201      	movs	r2, #1
 8105108:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 810510c:	687b      	ldr	r3, [r7, #4]
 810510e:	2201      	movs	r2, #1
 8105110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8105114:	687b      	ldr	r3, [r7, #4]
 8105116:	2201      	movs	r2, #1
 8105118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 810511c:	687b      	ldr	r3, [r7, #4]
 810511e:	2201      	movs	r2, #1
 8105120:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8105124:	687b      	ldr	r3, [r7, #4]
 8105126:	2201      	movs	r2, #1
 8105128:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810512c:	687b      	ldr	r3, [r7, #4]
 810512e:	2201      	movs	r2, #1
 8105130:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8105134:	687b      	ldr	r3, [r7, #4]
 8105136:	2201      	movs	r2, #1
 8105138:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810513c:	687b      	ldr	r3, [r7, #4]
 810513e:	2201      	movs	r2, #1
 8105140:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8105144:	687b      	ldr	r3, [r7, #4]
 8105146:	2201      	movs	r2, #1
 8105148:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810514c:	687b      	ldr	r3, [r7, #4]
 810514e:	2201      	movs	r2, #1
 8105150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8105154:	2300      	movs	r3, #0
}
 8105156:	4618      	mov	r0, r3
 8105158:	3708      	adds	r7, #8
 810515a:	46bd      	mov	sp, r7
 810515c:	bd80      	pop	{r7, pc}
	...

08105160 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8105160:	b480      	push	{r7}
 8105162:	b085      	sub	sp, #20
 8105164:	af00      	add	r7, sp, #0
 8105166:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8105168:	687b      	ldr	r3, [r7, #4]
 810516a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 810516e:	b2db      	uxtb	r3, r3
 8105170:	2b01      	cmp	r3, #1
 8105172:	d001      	beq.n	8105178 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8105174:	2301      	movs	r3, #1
 8105176:	e054      	b.n	8105222 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8105178:	687b      	ldr	r3, [r7, #4]
 810517a:	2202      	movs	r2, #2
 810517c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8105180:	687b      	ldr	r3, [r7, #4]
 8105182:	681b      	ldr	r3, [r3, #0]
 8105184:	68da      	ldr	r2, [r3, #12]
 8105186:	687b      	ldr	r3, [r7, #4]
 8105188:	681b      	ldr	r3, [r3, #0]
 810518a:	f042 0201 	orr.w	r2, r2, #1
 810518e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8105190:	687b      	ldr	r3, [r7, #4]
 8105192:	681b      	ldr	r3, [r3, #0]
 8105194:	4a26      	ldr	r2, [pc, #152]	; (8105230 <HAL_TIM_Base_Start_IT+0xd0>)
 8105196:	4293      	cmp	r3, r2
 8105198:	d022      	beq.n	81051e0 <HAL_TIM_Base_Start_IT+0x80>
 810519a:	687b      	ldr	r3, [r7, #4]
 810519c:	681b      	ldr	r3, [r3, #0]
 810519e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81051a2:	d01d      	beq.n	81051e0 <HAL_TIM_Base_Start_IT+0x80>
 81051a4:	687b      	ldr	r3, [r7, #4]
 81051a6:	681b      	ldr	r3, [r3, #0]
 81051a8:	4a22      	ldr	r2, [pc, #136]	; (8105234 <HAL_TIM_Base_Start_IT+0xd4>)
 81051aa:	4293      	cmp	r3, r2
 81051ac:	d018      	beq.n	81051e0 <HAL_TIM_Base_Start_IT+0x80>
 81051ae:	687b      	ldr	r3, [r7, #4]
 81051b0:	681b      	ldr	r3, [r3, #0]
 81051b2:	4a21      	ldr	r2, [pc, #132]	; (8105238 <HAL_TIM_Base_Start_IT+0xd8>)
 81051b4:	4293      	cmp	r3, r2
 81051b6:	d013      	beq.n	81051e0 <HAL_TIM_Base_Start_IT+0x80>
 81051b8:	687b      	ldr	r3, [r7, #4]
 81051ba:	681b      	ldr	r3, [r3, #0]
 81051bc:	4a1f      	ldr	r2, [pc, #124]	; (810523c <HAL_TIM_Base_Start_IT+0xdc>)
 81051be:	4293      	cmp	r3, r2
 81051c0:	d00e      	beq.n	81051e0 <HAL_TIM_Base_Start_IT+0x80>
 81051c2:	687b      	ldr	r3, [r7, #4]
 81051c4:	681b      	ldr	r3, [r3, #0]
 81051c6:	4a1e      	ldr	r2, [pc, #120]	; (8105240 <HAL_TIM_Base_Start_IT+0xe0>)
 81051c8:	4293      	cmp	r3, r2
 81051ca:	d009      	beq.n	81051e0 <HAL_TIM_Base_Start_IT+0x80>
 81051cc:	687b      	ldr	r3, [r7, #4]
 81051ce:	681b      	ldr	r3, [r3, #0]
 81051d0:	4a1c      	ldr	r2, [pc, #112]	; (8105244 <HAL_TIM_Base_Start_IT+0xe4>)
 81051d2:	4293      	cmp	r3, r2
 81051d4:	d004      	beq.n	81051e0 <HAL_TIM_Base_Start_IT+0x80>
 81051d6:	687b      	ldr	r3, [r7, #4]
 81051d8:	681b      	ldr	r3, [r3, #0]
 81051da:	4a1b      	ldr	r2, [pc, #108]	; (8105248 <HAL_TIM_Base_Start_IT+0xe8>)
 81051dc:	4293      	cmp	r3, r2
 81051de:	d115      	bne.n	810520c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 81051e0:	687b      	ldr	r3, [r7, #4]
 81051e2:	681b      	ldr	r3, [r3, #0]
 81051e4:	689a      	ldr	r2, [r3, #8]
 81051e6:	4b19      	ldr	r3, [pc, #100]	; (810524c <HAL_TIM_Base_Start_IT+0xec>)
 81051e8:	4013      	ands	r3, r2
 81051ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81051ec:	68fb      	ldr	r3, [r7, #12]
 81051ee:	2b06      	cmp	r3, #6
 81051f0:	d015      	beq.n	810521e <HAL_TIM_Base_Start_IT+0xbe>
 81051f2:	68fb      	ldr	r3, [r7, #12]
 81051f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81051f8:	d011      	beq.n	810521e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 81051fa:	687b      	ldr	r3, [r7, #4]
 81051fc:	681b      	ldr	r3, [r3, #0]
 81051fe:	681a      	ldr	r2, [r3, #0]
 8105200:	687b      	ldr	r3, [r7, #4]
 8105202:	681b      	ldr	r3, [r3, #0]
 8105204:	f042 0201 	orr.w	r2, r2, #1
 8105208:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810520a:	e008      	b.n	810521e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 810520c:	687b      	ldr	r3, [r7, #4]
 810520e:	681b      	ldr	r3, [r3, #0]
 8105210:	681a      	ldr	r2, [r3, #0]
 8105212:	687b      	ldr	r3, [r7, #4]
 8105214:	681b      	ldr	r3, [r3, #0]
 8105216:	f042 0201 	orr.w	r2, r2, #1
 810521a:	601a      	str	r2, [r3, #0]
 810521c:	e000      	b.n	8105220 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810521e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8105220:	2300      	movs	r3, #0
}
 8105222:	4618      	mov	r0, r3
 8105224:	3714      	adds	r7, #20
 8105226:	46bd      	mov	sp, r7
 8105228:	f85d 7b04 	ldr.w	r7, [sp], #4
 810522c:	4770      	bx	lr
 810522e:	bf00      	nop
 8105230:	40010000 	.word	0x40010000
 8105234:	40000400 	.word	0x40000400
 8105238:	40000800 	.word	0x40000800
 810523c:	40000c00 	.word	0x40000c00
 8105240:	40010400 	.word	0x40010400
 8105244:	40001800 	.word	0x40001800
 8105248:	40014000 	.word	0x40014000
 810524c:	00010007 	.word	0x00010007

08105250 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8105250:	b580      	push	{r7, lr}
 8105252:	b082      	sub	sp, #8
 8105254:	af00      	add	r7, sp, #0
 8105256:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8105258:	687b      	ldr	r3, [r7, #4]
 810525a:	2b00      	cmp	r3, #0
 810525c:	d101      	bne.n	8105262 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 810525e:	2301      	movs	r3, #1
 8105260:	e049      	b.n	81052f6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8105262:	687b      	ldr	r3, [r7, #4]
 8105264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8105268:	b2db      	uxtb	r3, r3
 810526a:	2b00      	cmp	r3, #0
 810526c:	d106      	bne.n	810527c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810526e:	687b      	ldr	r3, [r7, #4]
 8105270:	2200      	movs	r2, #0
 8105272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8105276:	6878      	ldr	r0, [r7, #4]
 8105278:	f000 f841 	bl	81052fe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810527c:	687b      	ldr	r3, [r7, #4]
 810527e:	2202      	movs	r2, #2
 8105280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8105284:	687b      	ldr	r3, [r7, #4]
 8105286:	681a      	ldr	r2, [r3, #0]
 8105288:	687b      	ldr	r3, [r7, #4]
 810528a:	3304      	adds	r3, #4
 810528c:	4619      	mov	r1, r3
 810528e:	4610      	mov	r0, r2
 8105290:	f000 fca2 	bl	8105bd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8105294:	687b      	ldr	r3, [r7, #4]
 8105296:	2201      	movs	r2, #1
 8105298:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810529c:	687b      	ldr	r3, [r7, #4]
 810529e:	2201      	movs	r2, #1
 81052a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 81052a4:	687b      	ldr	r3, [r7, #4]
 81052a6:	2201      	movs	r2, #1
 81052a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 81052ac:	687b      	ldr	r3, [r7, #4]
 81052ae:	2201      	movs	r2, #1
 81052b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 81052b4:	687b      	ldr	r3, [r7, #4]
 81052b6:	2201      	movs	r2, #1
 81052b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 81052bc:	687b      	ldr	r3, [r7, #4]
 81052be:	2201      	movs	r2, #1
 81052c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 81052c4:	687b      	ldr	r3, [r7, #4]
 81052c6:	2201      	movs	r2, #1
 81052c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81052cc:	687b      	ldr	r3, [r7, #4]
 81052ce:	2201      	movs	r2, #1
 81052d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 81052d4:	687b      	ldr	r3, [r7, #4]
 81052d6:	2201      	movs	r2, #1
 81052d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 81052dc:	687b      	ldr	r3, [r7, #4]
 81052de:	2201      	movs	r2, #1
 81052e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 81052e4:	687b      	ldr	r3, [r7, #4]
 81052e6:	2201      	movs	r2, #1
 81052e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81052ec:	687b      	ldr	r3, [r7, #4]
 81052ee:	2201      	movs	r2, #1
 81052f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 81052f4:	2300      	movs	r3, #0
}
 81052f6:	4618      	mov	r0, r3
 81052f8:	3708      	adds	r7, #8
 81052fa:	46bd      	mov	sp, r7
 81052fc:	bd80      	pop	{r7, pc}

081052fe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 81052fe:	b480      	push	{r7}
 8105300:	b083      	sub	sp, #12
 8105302:	af00      	add	r7, sp, #0
 8105304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8105306:	bf00      	nop
 8105308:	370c      	adds	r7, #12
 810530a:	46bd      	mov	sp, r7
 810530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105310:	4770      	bx	lr
	...

08105314 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8105314:	b580      	push	{r7, lr}
 8105316:	b084      	sub	sp, #16
 8105318:	af00      	add	r7, sp, #0
 810531a:	6078      	str	r0, [r7, #4]
 810531c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 810531e:	683b      	ldr	r3, [r7, #0]
 8105320:	2b00      	cmp	r3, #0
 8105322:	d109      	bne.n	8105338 <HAL_TIM_PWM_Start+0x24>
 8105324:	687b      	ldr	r3, [r7, #4]
 8105326:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 810532a:	b2db      	uxtb	r3, r3
 810532c:	2b01      	cmp	r3, #1
 810532e:	bf14      	ite	ne
 8105330:	2301      	movne	r3, #1
 8105332:	2300      	moveq	r3, #0
 8105334:	b2db      	uxtb	r3, r3
 8105336:	e03c      	b.n	81053b2 <HAL_TIM_PWM_Start+0x9e>
 8105338:	683b      	ldr	r3, [r7, #0]
 810533a:	2b04      	cmp	r3, #4
 810533c:	d109      	bne.n	8105352 <HAL_TIM_PWM_Start+0x3e>
 810533e:	687b      	ldr	r3, [r7, #4]
 8105340:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8105344:	b2db      	uxtb	r3, r3
 8105346:	2b01      	cmp	r3, #1
 8105348:	bf14      	ite	ne
 810534a:	2301      	movne	r3, #1
 810534c:	2300      	moveq	r3, #0
 810534e:	b2db      	uxtb	r3, r3
 8105350:	e02f      	b.n	81053b2 <HAL_TIM_PWM_Start+0x9e>
 8105352:	683b      	ldr	r3, [r7, #0]
 8105354:	2b08      	cmp	r3, #8
 8105356:	d109      	bne.n	810536c <HAL_TIM_PWM_Start+0x58>
 8105358:	687b      	ldr	r3, [r7, #4]
 810535a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810535e:	b2db      	uxtb	r3, r3
 8105360:	2b01      	cmp	r3, #1
 8105362:	bf14      	ite	ne
 8105364:	2301      	movne	r3, #1
 8105366:	2300      	moveq	r3, #0
 8105368:	b2db      	uxtb	r3, r3
 810536a:	e022      	b.n	81053b2 <HAL_TIM_PWM_Start+0x9e>
 810536c:	683b      	ldr	r3, [r7, #0]
 810536e:	2b0c      	cmp	r3, #12
 8105370:	d109      	bne.n	8105386 <HAL_TIM_PWM_Start+0x72>
 8105372:	687b      	ldr	r3, [r7, #4]
 8105374:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105378:	b2db      	uxtb	r3, r3
 810537a:	2b01      	cmp	r3, #1
 810537c:	bf14      	ite	ne
 810537e:	2301      	movne	r3, #1
 8105380:	2300      	moveq	r3, #0
 8105382:	b2db      	uxtb	r3, r3
 8105384:	e015      	b.n	81053b2 <HAL_TIM_PWM_Start+0x9e>
 8105386:	683b      	ldr	r3, [r7, #0]
 8105388:	2b10      	cmp	r3, #16
 810538a:	d109      	bne.n	81053a0 <HAL_TIM_PWM_Start+0x8c>
 810538c:	687b      	ldr	r3, [r7, #4]
 810538e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8105392:	b2db      	uxtb	r3, r3
 8105394:	2b01      	cmp	r3, #1
 8105396:	bf14      	ite	ne
 8105398:	2301      	movne	r3, #1
 810539a:	2300      	moveq	r3, #0
 810539c:	b2db      	uxtb	r3, r3
 810539e:	e008      	b.n	81053b2 <HAL_TIM_PWM_Start+0x9e>
 81053a0:	687b      	ldr	r3, [r7, #4]
 81053a2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 81053a6:	b2db      	uxtb	r3, r3
 81053a8:	2b01      	cmp	r3, #1
 81053aa:	bf14      	ite	ne
 81053ac:	2301      	movne	r3, #1
 81053ae:	2300      	moveq	r3, #0
 81053b0:	b2db      	uxtb	r3, r3
 81053b2:	2b00      	cmp	r3, #0
 81053b4:	d001      	beq.n	81053ba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 81053b6:	2301      	movs	r3, #1
 81053b8:	e0a1      	b.n	81054fe <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 81053ba:	683b      	ldr	r3, [r7, #0]
 81053bc:	2b00      	cmp	r3, #0
 81053be:	d104      	bne.n	81053ca <HAL_TIM_PWM_Start+0xb6>
 81053c0:	687b      	ldr	r3, [r7, #4]
 81053c2:	2202      	movs	r2, #2
 81053c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 81053c8:	e023      	b.n	8105412 <HAL_TIM_PWM_Start+0xfe>
 81053ca:	683b      	ldr	r3, [r7, #0]
 81053cc:	2b04      	cmp	r3, #4
 81053ce:	d104      	bne.n	81053da <HAL_TIM_PWM_Start+0xc6>
 81053d0:	687b      	ldr	r3, [r7, #4]
 81053d2:	2202      	movs	r2, #2
 81053d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 81053d8:	e01b      	b.n	8105412 <HAL_TIM_PWM_Start+0xfe>
 81053da:	683b      	ldr	r3, [r7, #0]
 81053dc:	2b08      	cmp	r3, #8
 81053de:	d104      	bne.n	81053ea <HAL_TIM_PWM_Start+0xd6>
 81053e0:	687b      	ldr	r3, [r7, #4]
 81053e2:	2202      	movs	r2, #2
 81053e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 81053e8:	e013      	b.n	8105412 <HAL_TIM_PWM_Start+0xfe>
 81053ea:	683b      	ldr	r3, [r7, #0]
 81053ec:	2b0c      	cmp	r3, #12
 81053ee:	d104      	bne.n	81053fa <HAL_TIM_PWM_Start+0xe6>
 81053f0:	687b      	ldr	r3, [r7, #4]
 81053f2:	2202      	movs	r2, #2
 81053f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 81053f8:	e00b      	b.n	8105412 <HAL_TIM_PWM_Start+0xfe>
 81053fa:	683b      	ldr	r3, [r7, #0]
 81053fc:	2b10      	cmp	r3, #16
 81053fe:	d104      	bne.n	810540a <HAL_TIM_PWM_Start+0xf6>
 8105400:	687b      	ldr	r3, [r7, #4]
 8105402:	2202      	movs	r2, #2
 8105404:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8105408:	e003      	b.n	8105412 <HAL_TIM_PWM_Start+0xfe>
 810540a:	687b      	ldr	r3, [r7, #4]
 810540c:	2202      	movs	r2, #2
 810540e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8105412:	687b      	ldr	r3, [r7, #4]
 8105414:	681b      	ldr	r3, [r3, #0]
 8105416:	2201      	movs	r2, #1
 8105418:	6839      	ldr	r1, [r7, #0]
 810541a:	4618      	mov	r0, r3
 810541c:	f000 ffe8 	bl	81063f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8105420:	687b      	ldr	r3, [r7, #4]
 8105422:	681b      	ldr	r3, [r3, #0]
 8105424:	4a38      	ldr	r2, [pc, #224]	; (8105508 <HAL_TIM_PWM_Start+0x1f4>)
 8105426:	4293      	cmp	r3, r2
 8105428:	d013      	beq.n	8105452 <HAL_TIM_PWM_Start+0x13e>
 810542a:	687b      	ldr	r3, [r7, #4]
 810542c:	681b      	ldr	r3, [r3, #0]
 810542e:	4a37      	ldr	r2, [pc, #220]	; (810550c <HAL_TIM_PWM_Start+0x1f8>)
 8105430:	4293      	cmp	r3, r2
 8105432:	d00e      	beq.n	8105452 <HAL_TIM_PWM_Start+0x13e>
 8105434:	687b      	ldr	r3, [r7, #4]
 8105436:	681b      	ldr	r3, [r3, #0]
 8105438:	4a35      	ldr	r2, [pc, #212]	; (8105510 <HAL_TIM_PWM_Start+0x1fc>)
 810543a:	4293      	cmp	r3, r2
 810543c:	d009      	beq.n	8105452 <HAL_TIM_PWM_Start+0x13e>
 810543e:	687b      	ldr	r3, [r7, #4]
 8105440:	681b      	ldr	r3, [r3, #0]
 8105442:	4a34      	ldr	r2, [pc, #208]	; (8105514 <HAL_TIM_PWM_Start+0x200>)
 8105444:	4293      	cmp	r3, r2
 8105446:	d004      	beq.n	8105452 <HAL_TIM_PWM_Start+0x13e>
 8105448:	687b      	ldr	r3, [r7, #4]
 810544a:	681b      	ldr	r3, [r3, #0]
 810544c:	4a32      	ldr	r2, [pc, #200]	; (8105518 <HAL_TIM_PWM_Start+0x204>)
 810544e:	4293      	cmp	r3, r2
 8105450:	d101      	bne.n	8105456 <HAL_TIM_PWM_Start+0x142>
 8105452:	2301      	movs	r3, #1
 8105454:	e000      	b.n	8105458 <HAL_TIM_PWM_Start+0x144>
 8105456:	2300      	movs	r3, #0
 8105458:	2b00      	cmp	r3, #0
 810545a:	d007      	beq.n	810546c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 810545c:	687b      	ldr	r3, [r7, #4]
 810545e:	681b      	ldr	r3, [r3, #0]
 8105460:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8105462:	687b      	ldr	r3, [r7, #4]
 8105464:	681b      	ldr	r3, [r3, #0]
 8105466:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 810546a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810546c:	687b      	ldr	r3, [r7, #4]
 810546e:	681b      	ldr	r3, [r3, #0]
 8105470:	4a25      	ldr	r2, [pc, #148]	; (8105508 <HAL_TIM_PWM_Start+0x1f4>)
 8105472:	4293      	cmp	r3, r2
 8105474:	d022      	beq.n	81054bc <HAL_TIM_PWM_Start+0x1a8>
 8105476:	687b      	ldr	r3, [r7, #4]
 8105478:	681b      	ldr	r3, [r3, #0]
 810547a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810547e:	d01d      	beq.n	81054bc <HAL_TIM_PWM_Start+0x1a8>
 8105480:	687b      	ldr	r3, [r7, #4]
 8105482:	681b      	ldr	r3, [r3, #0]
 8105484:	4a25      	ldr	r2, [pc, #148]	; (810551c <HAL_TIM_PWM_Start+0x208>)
 8105486:	4293      	cmp	r3, r2
 8105488:	d018      	beq.n	81054bc <HAL_TIM_PWM_Start+0x1a8>
 810548a:	687b      	ldr	r3, [r7, #4]
 810548c:	681b      	ldr	r3, [r3, #0]
 810548e:	4a24      	ldr	r2, [pc, #144]	; (8105520 <HAL_TIM_PWM_Start+0x20c>)
 8105490:	4293      	cmp	r3, r2
 8105492:	d013      	beq.n	81054bc <HAL_TIM_PWM_Start+0x1a8>
 8105494:	687b      	ldr	r3, [r7, #4]
 8105496:	681b      	ldr	r3, [r3, #0]
 8105498:	4a22      	ldr	r2, [pc, #136]	; (8105524 <HAL_TIM_PWM_Start+0x210>)
 810549a:	4293      	cmp	r3, r2
 810549c:	d00e      	beq.n	81054bc <HAL_TIM_PWM_Start+0x1a8>
 810549e:	687b      	ldr	r3, [r7, #4]
 81054a0:	681b      	ldr	r3, [r3, #0]
 81054a2:	4a1a      	ldr	r2, [pc, #104]	; (810550c <HAL_TIM_PWM_Start+0x1f8>)
 81054a4:	4293      	cmp	r3, r2
 81054a6:	d009      	beq.n	81054bc <HAL_TIM_PWM_Start+0x1a8>
 81054a8:	687b      	ldr	r3, [r7, #4]
 81054aa:	681b      	ldr	r3, [r3, #0]
 81054ac:	4a1e      	ldr	r2, [pc, #120]	; (8105528 <HAL_TIM_PWM_Start+0x214>)
 81054ae:	4293      	cmp	r3, r2
 81054b0:	d004      	beq.n	81054bc <HAL_TIM_PWM_Start+0x1a8>
 81054b2:	687b      	ldr	r3, [r7, #4]
 81054b4:	681b      	ldr	r3, [r3, #0]
 81054b6:	4a16      	ldr	r2, [pc, #88]	; (8105510 <HAL_TIM_PWM_Start+0x1fc>)
 81054b8:	4293      	cmp	r3, r2
 81054ba:	d115      	bne.n	81054e8 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 81054bc:	687b      	ldr	r3, [r7, #4]
 81054be:	681b      	ldr	r3, [r3, #0]
 81054c0:	689a      	ldr	r2, [r3, #8]
 81054c2:	4b1a      	ldr	r3, [pc, #104]	; (810552c <HAL_TIM_PWM_Start+0x218>)
 81054c4:	4013      	ands	r3, r2
 81054c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81054c8:	68fb      	ldr	r3, [r7, #12]
 81054ca:	2b06      	cmp	r3, #6
 81054cc:	d015      	beq.n	81054fa <HAL_TIM_PWM_Start+0x1e6>
 81054ce:	68fb      	ldr	r3, [r7, #12]
 81054d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81054d4:	d011      	beq.n	81054fa <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 81054d6:	687b      	ldr	r3, [r7, #4]
 81054d8:	681b      	ldr	r3, [r3, #0]
 81054da:	681a      	ldr	r2, [r3, #0]
 81054dc:	687b      	ldr	r3, [r7, #4]
 81054de:	681b      	ldr	r3, [r3, #0]
 81054e0:	f042 0201 	orr.w	r2, r2, #1
 81054e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81054e6:	e008      	b.n	81054fa <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 81054e8:	687b      	ldr	r3, [r7, #4]
 81054ea:	681b      	ldr	r3, [r3, #0]
 81054ec:	681a      	ldr	r2, [r3, #0]
 81054ee:	687b      	ldr	r3, [r7, #4]
 81054f0:	681b      	ldr	r3, [r3, #0]
 81054f2:	f042 0201 	orr.w	r2, r2, #1
 81054f6:	601a      	str	r2, [r3, #0]
 81054f8:	e000      	b.n	81054fc <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81054fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 81054fc:	2300      	movs	r3, #0
}
 81054fe:	4618      	mov	r0, r3
 8105500:	3710      	adds	r7, #16
 8105502:	46bd      	mov	sp, r7
 8105504:	bd80      	pop	{r7, pc}
 8105506:	bf00      	nop
 8105508:	40010000 	.word	0x40010000
 810550c:	40010400 	.word	0x40010400
 8105510:	40014000 	.word	0x40014000
 8105514:	40014400 	.word	0x40014400
 8105518:	40014800 	.word	0x40014800
 810551c:	40000400 	.word	0x40000400
 8105520:	40000800 	.word	0x40000800
 8105524:	40000c00 	.word	0x40000c00
 8105528:	40001800 	.word	0x40001800
 810552c:	00010007 	.word	0x00010007

08105530 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8105530:	b580      	push	{r7, lr}
 8105532:	b082      	sub	sp, #8
 8105534:	af00      	add	r7, sp, #0
 8105536:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8105538:	687b      	ldr	r3, [r7, #4]
 810553a:	681b      	ldr	r3, [r3, #0]
 810553c:	691b      	ldr	r3, [r3, #16]
 810553e:	f003 0302 	and.w	r3, r3, #2
 8105542:	2b02      	cmp	r3, #2
 8105544:	d122      	bne.n	810558c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8105546:	687b      	ldr	r3, [r7, #4]
 8105548:	681b      	ldr	r3, [r3, #0]
 810554a:	68db      	ldr	r3, [r3, #12]
 810554c:	f003 0302 	and.w	r3, r3, #2
 8105550:	2b02      	cmp	r3, #2
 8105552:	d11b      	bne.n	810558c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8105554:	687b      	ldr	r3, [r7, #4]
 8105556:	681b      	ldr	r3, [r3, #0]
 8105558:	f06f 0202 	mvn.w	r2, #2
 810555c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 810555e:	687b      	ldr	r3, [r7, #4]
 8105560:	2201      	movs	r2, #1
 8105562:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8105564:	687b      	ldr	r3, [r7, #4]
 8105566:	681b      	ldr	r3, [r3, #0]
 8105568:	699b      	ldr	r3, [r3, #24]
 810556a:	f003 0303 	and.w	r3, r3, #3
 810556e:	2b00      	cmp	r3, #0
 8105570:	d003      	beq.n	810557a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8105572:	6878      	ldr	r0, [r7, #4]
 8105574:	f000 fb12 	bl	8105b9c <HAL_TIM_IC_CaptureCallback>
 8105578:	e005      	b.n	8105586 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 810557a:	6878      	ldr	r0, [r7, #4]
 810557c:	f000 fb04 	bl	8105b88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8105580:	6878      	ldr	r0, [r7, #4]
 8105582:	f000 fb15 	bl	8105bb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8105586:	687b      	ldr	r3, [r7, #4]
 8105588:	2200      	movs	r2, #0
 810558a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 810558c:	687b      	ldr	r3, [r7, #4]
 810558e:	681b      	ldr	r3, [r3, #0]
 8105590:	691b      	ldr	r3, [r3, #16]
 8105592:	f003 0304 	and.w	r3, r3, #4
 8105596:	2b04      	cmp	r3, #4
 8105598:	d122      	bne.n	81055e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 810559a:	687b      	ldr	r3, [r7, #4]
 810559c:	681b      	ldr	r3, [r3, #0]
 810559e:	68db      	ldr	r3, [r3, #12]
 81055a0:	f003 0304 	and.w	r3, r3, #4
 81055a4:	2b04      	cmp	r3, #4
 81055a6:	d11b      	bne.n	81055e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 81055a8:	687b      	ldr	r3, [r7, #4]
 81055aa:	681b      	ldr	r3, [r3, #0]
 81055ac:	f06f 0204 	mvn.w	r2, #4
 81055b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 81055b2:	687b      	ldr	r3, [r7, #4]
 81055b4:	2202      	movs	r2, #2
 81055b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 81055b8:	687b      	ldr	r3, [r7, #4]
 81055ba:	681b      	ldr	r3, [r3, #0]
 81055bc:	699b      	ldr	r3, [r3, #24]
 81055be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81055c2:	2b00      	cmp	r3, #0
 81055c4:	d003      	beq.n	81055ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81055c6:	6878      	ldr	r0, [r7, #4]
 81055c8:	f000 fae8 	bl	8105b9c <HAL_TIM_IC_CaptureCallback>
 81055cc:	e005      	b.n	81055da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81055ce:	6878      	ldr	r0, [r7, #4]
 81055d0:	f000 fada 	bl	8105b88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81055d4:	6878      	ldr	r0, [r7, #4]
 81055d6:	f000 faeb 	bl	8105bb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81055da:	687b      	ldr	r3, [r7, #4]
 81055dc:	2200      	movs	r2, #0
 81055de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 81055e0:	687b      	ldr	r3, [r7, #4]
 81055e2:	681b      	ldr	r3, [r3, #0]
 81055e4:	691b      	ldr	r3, [r3, #16]
 81055e6:	f003 0308 	and.w	r3, r3, #8
 81055ea:	2b08      	cmp	r3, #8
 81055ec:	d122      	bne.n	8105634 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 81055ee:	687b      	ldr	r3, [r7, #4]
 81055f0:	681b      	ldr	r3, [r3, #0]
 81055f2:	68db      	ldr	r3, [r3, #12]
 81055f4:	f003 0308 	and.w	r3, r3, #8
 81055f8:	2b08      	cmp	r3, #8
 81055fa:	d11b      	bne.n	8105634 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 81055fc:	687b      	ldr	r3, [r7, #4]
 81055fe:	681b      	ldr	r3, [r3, #0]
 8105600:	f06f 0208 	mvn.w	r2, #8
 8105604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8105606:	687b      	ldr	r3, [r7, #4]
 8105608:	2204      	movs	r2, #4
 810560a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 810560c:	687b      	ldr	r3, [r7, #4]
 810560e:	681b      	ldr	r3, [r3, #0]
 8105610:	69db      	ldr	r3, [r3, #28]
 8105612:	f003 0303 	and.w	r3, r3, #3
 8105616:	2b00      	cmp	r3, #0
 8105618:	d003      	beq.n	8105622 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810561a:	6878      	ldr	r0, [r7, #4]
 810561c:	f000 fabe 	bl	8105b9c <HAL_TIM_IC_CaptureCallback>
 8105620:	e005      	b.n	810562e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8105622:	6878      	ldr	r0, [r7, #4]
 8105624:	f000 fab0 	bl	8105b88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8105628:	6878      	ldr	r0, [r7, #4]
 810562a:	f000 fac1 	bl	8105bb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810562e:	687b      	ldr	r3, [r7, #4]
 8105630:	2200      	movs	r2, #0
 8105632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8105634:	687b      	ldr	r3, [r7, #4]
 8105636:	681b      	ldr	r3, [r3, #0]
 8105638:	691b      	ldr	r3, [r3, #16]
 810563a:	f003 0310 	and.w	r3, r3, #16
 810563e:	2b10      	cmp	r3, #16
 8105640:	d122      	bne.n	8105688 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8105642:	687b      	ldr	r3, [r7, #4]
 8105644:	681b      	ldr	r3, [r3, #0]
 8105646:	68db      	ldr	r3, [r3, #12]
 8105648:	f003 0310 	and.w	r3, r3, #16
 810564c:	2b10      	cmp	r3, #16
 810564e:	d11b      	bne.n	8105688 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8105650:	687b      	ldr	r3, [r7, #4]
 8105652:	681b      	ldr	r3, [r3, #0]
 8105654:	f06f 0210 	mvn.w	r2, #16
 8105658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 810565a:	687b      	ldr	r3, [r7, #4]
 810565c:	2208      	movs	r2, #8
 810565e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8105660:	687b      	ldr	r3, [r7, #4]
 8105662:	681b      	ldr	r3, [r3, #0]
 8105664:	69db      	ldr	r3, [r3, #28]
 8105666:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810566a:	2b00      	cmp	r3, #0
 810566c:	d003      	beq.n	8105676 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810566e:	6878      	ldr	r0, [r7, #4]
 8105670:	f000 fa94 	bl	8105b9c <HAL_TIM_IC_CaptureCallback>
 8105674:	e005      	b.n	8105682 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8105676:	6878      	ldr	r0, [r7, #4]
 8105678:	f000 fa86 	bl	8105b88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810567c:	6878      	ldr	r0, [r7, #4]
 810567e:	f000 fa97 	bl	8105bb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8105682:	687b      	ldr	r3, [r7, #4]
 8105684:	2200      	movs	r2, #0
 8105686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8105688:	687b      	ldr	r3, [r7, #4]
 810568a:	681b      	ldr	r3, [r3, #0]
 810568c:	691b      	ldr	r3, [r3, #16]
 810568e:	f003 0301 	and.w	r3, r3, #1
 8105692:	2b01      	cmp	r3, #1
 8105694:	d10e      	bne.n	81056b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8105696:	687b      	ldr	r3, [r7, #4]
 8105698:	681b      	ldr	r3, [r3, #0]
 810569a:	68db      	ldr	r3, [r3, #12]
 810569c:	f003 0301 	and.w	r3, r3, #1
 81056a0:	2b01      	cmp	r3, #1
 81056a2:	d107      	bne.n	81056b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 81056a4:	687b      	ldr	r3, [r7, #4]
 81056a6:	681b      	ldr	r3, [r3, #0]
 81056a8:	f06f 0201 	mvn.w	r2, #1
 81056ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 81056ae:	6878      	ldr	r0, [r7, #4]
 81056b0:	f7fc fae0 	bl	8101c74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 81056b4:	687b      	ldr	r3, [r7, #4]
 81056b6:	681b      	ldr	r3, [r3, #0]
 81056b8:	691b      	ldr	r3, [r3, #16]
 81056ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81056be:	2b80      	cmp	r3, #128	; 0x80
 81056c0:	d10e      	bne.n	81056e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 81056c2:	687b      	ldr	r3, [r7, #4]
 81056c4:	681b      	ldr	r3, [r3, #0]
 81056c6:	68db      	ldr	r3, [r3, #12]
 81056c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81056cc:	2b80      	cmp	r3, #128	; 0x80
 81056ce:	d107      	bne.n	81056e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 81056d0:	687b      	ldr	r3, [r7, #4]
 81056d2:	681b      	ldr	r3, [r3, #0]
 81056d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 81056d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 81056da:	6878      	ldr	r0, [r7, #4]
 81056dc:	f000 ff46 	bl	810656c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 81056e0:	687b      	ldr	r3, [r7, #4]
 81056e2:	681b      	ldr	r3, [r3, #0]
 81056e4:	691b      	ldr	r3, [r3, #16]
 81056e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81056ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81056ee:	d10e      	bne.n	810570e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 81056f0:	687b      	ldr	r3, [r7, #4]
 81056f2:	681b      	ldr	r3, [r3, #0]
 81056f4:	68db      	ldr	r3, [r3, #12]
 81056f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81056fa:	2b80      	cmp	r3, #128	; 0x80
 81056fc:	d107      	bne.n	810570e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 81056fe:	687b      	ldr	r3, [r7, #4]
 8105700:	681b      	ldr	r3, [r3, #0]
 8105702:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8105706:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8105708:	6878      	ldr	r0, [r7, #4]
 810570a:	f000 ff39 	bl	8106580 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 810570e:	687b      	ldr	r3, [r7, #4]
 8105710:	681b      	ldr	r3, [r3, #0]
 8105712:	691b      	ldr	r3, [r3, #16]
 8105714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8105718:	2b40      	cmp	r3, #64	; 0x40
 810571a:	d10e      	bne.n	810573a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 810571c:	687b      	ldr	r3, [r7, #4]
 810571e:	681b      	ldr	r3, [r3, #0]
 8105720:	68db      	ldr	r3, [r3, #12]
 8105722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8105726:	2b40      	cmp	r3, #64	; 0x40
 8105728:	d107      	bne.n	810573a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 810572a:	687b      	ldr	r3, [r7, #4]
 810572c:	681b      	ldr	r3, [r3, #0]
 810572e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8105732:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8105734:	6878      	ldr	r0, [r7, #4]
 8105736:	f000 fa45 	bl	8105bc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 810573a:	687b      	ldr	r3, [r7, #4]
 810573c:	681b      	ldr	r3, [r3, #0]
 810573e:	691b      	ldr	r3, [r3, #16]
 8105740:	f003 0320 	and.w	r3, r3, #32
 8105744:	2b20      	cmp	r3, #32
 8105746:	d10e      	bne.n	8105766 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8105748:	687b      	ldr	r3, [r7, #4]
 810574a:	681b      	ldr	r3, [r3, #0]
 810574c:	68db      	ldr	r3, [r3, #12]
 810574e:	f003 0320 	and.w	r3, r3, #32
 8105752:	2b20      	cmp	r3, #32
 8105754:	d107      	bne.n	8105766 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8105756:	687b      	ldr	r3, [r7, #4]
 8105758:	681b      	ldr	r3, [r3, #0]
 810575a:	f06f 0220 	mvn.w	r2, #32
 810575e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8105760:	6878      	ldr	r0, [r7, #4]
 8105762:	f000 fef9 	bl	8106558 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8105766:	bf00      	nop
 8105768:	3708      	adds	r7, #8
 810576a:	46bd      	mov	sp, r7
 810576c:	bd80      	pop	{r7, pc}
	...

08105770 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8105770:	b580      	push	{r7, lr}
 8105772:	b086      	sub	sp, #24
 8105774:	af00      	add	r7, sp, #0
 8105776:	60f8      	str	r0, [r7, #12]
 8105778:	60b9      	str	r1, [r7, #8]
 810577a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 810577c:	2300      	movs	r3, #0
 810577e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8105780:	68fb      	ldr	r3, [r7, #12]
 8105782:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8105786:	2b01      	cmp	r3, #1
 8105788:	d101      	bne.n	810578e <HAL_TIM_PWM_ConfigChannel+0x1e>
 810578a:	2302      	movs	r3, #2
 810578c:	e0ff      	b.n	810598e <HAL_TIM_PWM_ConfigChannel+0x21e>
 810578e:	68fb      	ldr	r3, [r7, #12]
 8105790:	2201      	movs	r2, #1
 8105792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8105796:	687b      	ldr	r3, [r7, #4]
 8105798:	2b14      	cmp	r3, #20
 810579a:	f200 80f0 	bhi.w	810597e <HAL_TIM_PWM_ConfigChannel+0x20e>
 810579e:	a201      	add	r2, pc, #4	; (adr r2, 81057a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 81057a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81057a4:	081057f9 	.word	0x081057f9
 81057a8:	0810597f 	.word	0x0810597f
 81057ac:	0810597f 	.word	0x0810597f
 81057b0:	0810597f 	.word	0x0810597f
 81057b4:	08105839 	.word	0x08105839
 81057b8:	0810597f 	.word	0x0810597f
 81057bc:	0810597f 	.word	0x0810597f
 81057c0:	0810597f 	.word	0x0810597f
 81057c4:	0810587b 	.word	0x0810587b
 81057c8:	0810597f 	.word	0x0810597f
 81057cc:	0810597f 	.word	0x0810597f
 81057d0:	0810597f 	.word	0x0810597f
 81057d4:	081058bb 	.word	0x081058bb
 81057d8:	0810597f 	.word	0x0810597f
 81057dc:	0810597f 	.word	0x0810597f
 81057e0:	0810597f 	.word	0x0810597f
 81057e4:	081058fd 	.word	0x081058fd
 81057e8:	0810597f 	.word	0x0810597f
 81057ec:	0810597f 	.word	0x0810597f
 81057f0:	0810597f 	.word	0x0810597f
 81057f4:	0810593d 	.word	0x0810593d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 81057f8:	68fb      	ldr	r3, [r7, #12]
 81057fa:	681b      	ldr	r3, [r3, #0]
 81057fc:	68b9      	ldr	r1, [r7, #8]
 81057fe:	4618      	mov	r0, r3
 8105800:	f000 fa84 	bl	8105d0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8105804:	68fb      	ldr	r3, [r7, #12]
 8105806:	681b      	ldr	r3, [r3, #0]
 8105808:	699a      	ldr	r2, [r3, #24]
 810580a:	68fb      	ldr	r3, [r7, #12]
 810580c:	681b      	ldr	r3, [r3, #0]
 810580e:	f042 0208 	orr.w	r2, r2, #8
 8105812:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8105814:	68fb      	ldr	r3, [r7, #12]
 8105816:	681b      	ldr	r3, [r3, #0]
 8105818:	699a      	ldr	r2, [r3, #24]
 810581a:	68fb      	ldr	r3, [r7, #12]
 810581c:	681b      	ldr	r3, [r3, #0]
 810581e:	f022 0204 	bic.w	r2, r2, #4
 8105822:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8105824:	68fb      	ldr	r3, [r7, #12]
 8105826:	681b      	ldr	r3, [r3, #0]
 8105828:	6999      	ldr	r1, [r3, #24]
 810582a:	68bb      	ldr	r3, [r7, #8]
 810582c:	691a      	ldr	r2, [r3, #16]
 810582e:	68fb      	ldr	r3, [r7, #12]
 8105830:	681b      	ldr	r3, [r3, #0]
 8105832:	430a      	orrs	r2, r1
 8105834:	619a      	str	r2, [r3, #24]
      break;
 8105836:	e0a5      	b.n	8105984 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8105838:	68fb      	ldr	r3, [r7, #12]
 810583a:	681b      	ldr	r3, [r3, #0]
 810583c:	68b9      	ldr	r1, [r7, #8]
 810583e:	4618      	mov	r0, r3
 8105840:	f000 faf4 	bl	8105e2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8105844:	68fb      	ldr	r3, [r7, #12]
 8105846:	681b      	ldr	r3, [r3, #0]
 8105848:	699a      	ldr	r2, [r3, #24]
 810584a:	68fb      	ldr	r3, [r7, #12]
 810584c:	681b      	ldr	r3, [r3, #0]
 810584e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8105852:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8105854:	68fb      	ldr	r3, [r7, #12]
 8105856:	681b      	ldr	r3, [r3, #0]
 8105858:	699a      	ldr	r2, [r3, #24]
 810585a:	68fb      	ldr	r3, [r7, #12]
 810585c:	681b      	ldr	r3, [r3, #0]
 810585e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8105862:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8105864:	68fb      	ldr	r3, [r7, #12]
 8105866:	681b      	ldr	r3, [r3, #0]
 8105868:	6999      	ldr	r1, [r3, #24]
 810586a:	68bb      	ldr	r3, [r7, #8]
 810586c:	691b      	ldr	r3, [r3, #16]
 810586e:	021a      	lsls	r2, r3, #8
 8105870:	68fb      	ldr	r3, [r7, #12]
 8105872:	681b      	ldr	r3, [r3, #0]
 8105874:	430a      	orrs	r2, r1
 8105876:	619a      	str	r2, [r3, #24]
      break;
 8105878:	e084      	b.n	8105984 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 810587a:	68fb      	ldr	r3, [r7, #12]
 810587c:	681b      	ldr	r3, [r3, #0]
 810587e:	68b9      	ldr	r1, [r7, #8]
 8105880:	4618      	mov	r0, r3
 8105882:	f000 fb5d 	bl	8105f40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8105886:	68fb      	ldr	r3, [r7, #12]
 8105888:	681b      	ldr	r3, [r3, #0]
 810588a:	69da      	ldr	r2, [r3, #28]
 810588c:	68fb      	ldr	r3, [r7, #12]
 810588e:	681b      	ldr	r3, [r3, #0]
 8105890:	f042 0208 	orr.w	r2, r2, #8
 8105894:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8105896:	68fb      	ldr	r3, [r7, #12]
 8105898:	681b      	ldr	r3, [r3, #0]
 810589a:	69da      	ldr	r2, [r3, #28]
 810589c:	68fb      	ldr	r3, [r7, #12]
 810589e:	681b      	ldr	r3, [r3, #0]
 81058a0:	f022 0204 	bic.w	r2, r2, #4
 81058a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 81058a6:	68fb      	ldr	r3, [r7, #12]
 81058a8:	681b      	ldr	r3, [r3, #0]
 81058aa:	69d9      	ldr	r1, [r3, #28]
 81058ac:	68bb      	ldr	r3, [r7, #8]
 81058ae:	691a      	ldr	r2, [r3, #16]
 81058b0:	68fb      	ldr	r3, [r7, #12]
 81058b2:	681b      	ldr	r3, [r3, #0]
 81058b4:	430a      	orrs	r2, r1
 81058b6:	61da      	str	r2, [r3, #28]
      break;
 81058b8:	e064      	b.n	8105984 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 81058ba:	68fb      	ldr	r3, [r7, #12]
 81058bc:	681b      	ldr	r3, [r3, #0]
 81058be:	68b9      	ldr	r1, [r7, #8]
 81058c0:	4618      	mov	r0, r3
 81058c2:	f000 fbc5 	bl	8106050 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 81058c6:	68fb      	ldr	r3, [r7, #12]
 81058c8:	681b      	ldr	r3, [r3, #0]
 81058ca:	69da      	ldr	r2, [r3, #28]
 81058cc:	68fb      	ldr	r3, [r7, #12]
 81058ce:	681b      	ldr	r3, [r3, #0]
 81058d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 81058d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 81058d6:	68fb      	ldr	r3, [r7, #12]
 81058d8:	681b      	ldr	r3, [r3, #0]
 81058da:	69da      	ldr	r2, [r3, #28]
 81058dc:	68fb      	ldr	r3, [r7, #12]
 81058de:	681b      	ldr	r3, [r3, #0]
 81058e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 81058e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 81058e6:	68fb      	ldr	r3, [r7, #12]
 81058e8:	681b      	ldr	r3, [r3, #0]
 81058ea:	69d9      	ldr	r1, [r3, #28]
 81058ec:	68bb      	ldr	r3, [r7, #8]
 81058ee:	691b      	ldr	r3, [r3, #16]
 81058f0:	021a      	lsls	r2, r3, #8
 81058f2:	68fb      	ldr	r3, [r7, #12]
 81058f4:	681b      	ldr	r3, [r3, #0]
 81058f6:	430a      	orrs	r2, r1
 81058f8:	61da      	str	r2, [r3, #28]
      break;
 81058fa:	e043      	b.n	8105984 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 81058fc:	68fb      	ldr	r3, [r7, #12]
 81058fe:	681b      	ldr	r3, [r3, #0]
 8105900:	68b9      	ldr	r1, [r7, #8]
 8105902:	4618      	mov	r0, r3
 8105904:	f000 fc0e 	bl	8106124 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8105908:	68fb      	ldr	r3, [r7, #12]
 810590a:	681b      	ldr	r3, [r3, #0]
 810590c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810590e:	68fb      	ldr	r3, [r7, #12]
 8105910:	681b      	ldr	r3, [r3, #0]
 8105912:	f042 0208 	orr.w	r2, r2, #8
 8105916:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8105918:	68fb      	ldr	r3, [r7, #12]
 810591a:	681b      	ldr	r3, [r3, #0]
 810591c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810591e:	68fb      	ldr	r3, [r7, #12]
 8105920:	681b      	ldr	r3, [r3, #0]
 8105922:	f022 0204 	bic.w	r2, r2, #4
 8105926:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8105928:	68fb      	ldr	r3, [r7, #12]
 810592a:	681b      	ldr	r3, [r3, #0]
 810592c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 810592e:	68bb      	ldr	r3, [r7, #8]
 8105930:	691a      	ldr	r2, [r3, #16]
 8105932:	68fb      	ldr	r3, [r7, #12]
 8105934:	681b      	ldr	r3, [r3, #0]
 8105936:	430a      	orrs	r2, r1
 8105938:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 810593a:	e023      	b.n	8105984 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 810593c:	68fb      	ldr	r3, [r7, #12]
 810593e:	681b      	ldr	r3, [r3, #0]
 8105940:	68b9      	ldr	r1, [r7, #8]
 8105942:	4618      	mov	r0, r3
 8105944:	f000 fc52 	bl	81061ec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8105948:	68fb      	ldr	r3, [r7, #12]
 810594a:	681b      	ldr	r3, [r3, #0]
 810594c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810594e:	68fb      	ldr	r3, [r7, #12]
 8105950:	681b      	ldr	r3, [r3, #0]
 8105952:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8105956:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8105958:	68fb      	ldr	r3, [r7, #12]
 810595a:	681b      	ldr	r3, [r3, #0]
 810595c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810595e:	68fb      	ldr	r3, [r7, #12]
 8105960:	681b      	ldr	r3, [r3, #0]
 8105962:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8105966:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8105968:	68fb      	ldr	r3, [r7, #12]
 810596a:	681b      	ldr	r3, [r3, #0]
 810596c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 810596e:	68bb      	ldr	r3, [r7, #8]
 8105970:	691b      	ldr	r3, [r3, #16]
 8105972:	021a      	lsls	r2, r3, #8
 8105974:	68fb      	ldr	r3, [r7, #12]
 8105976:	681b      	ldr	r3, [r3, #0]
 8105978:	430a      	orrs	r2, r1
 810597a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 810597c:	e002      	b.n	8105984 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 810597e:	2301      	movs	r3, #1
 8105980:	75fb      	strb	r3, [r7, #23]
      break;
 8105982:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8105984:	68fb      	ldr	r3, [r7, #12]
 8105986:	2200      	movs	r2, #0
 8105988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 810598c:	7dfb      	ldrb	r3, [r7, #23]
}
 810598e:	4618      	mov	r0, r3
 8105990:	3718      	adds	r7, #24
 8105992:	46bd      	mov	sp, r7
 8105994:	bd80      	pop	{r7, pc}
 8105996:	bf00      	nop

08105998 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8105998:	b580      	push	{r7, lr}
 810599a:	b084      	sub	sp, #16
 810599c:	af00      	add	r7, sp, #0
 810599e:	6078      	str	r0, [r7, #4]
 81059a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 81059a2:	2300      	movs	r3, #0
 81059a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 81059a6:	687b      	ldr	r3, [r7, #4]
 81059a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 81059ac:	2b01      	cmp	r3, #1
 81059ae:	d101      	bne.n	81059b4 <HAL_TIM_ConfigClockSource+0x1c>
 81059b0:	2302      	movs	r3, #2
 81059b2:	e0de      	b.n	8105b72 <HAL_TIM_ConfigClockSource+0x1da>
 81059b4:	687b      	ldr	r3, [r7, #4]
 81059b6:	2201      	movs	r2, #1
 81059b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 81059bc:	687b      	ldr	r3, [r7, #4]
 81059be:	2202      	movs	r2, #2
 81059c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 81059c4:	687b      	ldr	r3, [r7, #4]
 81059c6:	681b      	ldr	r3, [r3, #0]
 81059c8:	689b      	ldr	r3, [r3, #8]
 81059ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 81059cc:	68bb      	ldr	r3, [r7, #8]
 81059ce:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 81059d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 81059d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 81059d8:	68bb      	ldr	r3, [r7, #8]
 81059da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81059de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 81059e0:	687b      	ldr	r3, [r7, #4]
 81059e2:	681b      	ldr	r3, [r3, #0]
 81059e4:	68ba      	ldr	r2, [r7, #8]
 81059e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 81059e8:	683b      	ldr	r3, [r7, #0]
 81059ea:	681b      	ldr	r3, [r3, #0]
 81059ec:	4a63      	ldr	r2, [pc, #396]	; (8105b7c <HAL_TIM_ConfigClockSource+0x1e4>)
 81059ee:	4293      	cmp	r3, r2
 81059f0:	f000 80a9 	beq.w	8105b46 <HAL_TIM_ConfigClockSource+0x1ae>
 81059f4:	4a61      	ldr	r2, [pc, #388]	; (8105b7c <HAL_TIM_ConfigClockSource+0x1e4>)
 81059f6:	4293      	cmp	r3, r2
 81059f8:	f200 80ae 	bhi.w	8105b58 <HAL_TIM_ConfigClockSource+0x1c0>
 81059fc:	4a60      	ldr	r2, [pc, #384]	; (8105b80 <HAL_TIM_ConfigClockSource+0x1e8>)
 81059fe:	4293      	cmp	r3, r2
 8105a00:	f000 80a1 	beq.w	8105b46 <HAL_TIM_ConfigClockSource+0x1ae>
 8105a04:	4a5e      	ldr	r2, [pc, #376]	; (8105b80 <HAL_TIM_ConfigClockSource+0x1e8>)
 8105a06:	4293      	cmp	r3, r2
 8105a08:	f200 80a6 	bhi.w	8105b58 <HAL_TIM_ConfigClockSource+0x1c0>
 8105a0c:	4a5d      	ldr	r2, [pc, #372]	; (8105b84 <HAL_TIM_ConfigClockSource+0x1ec>)
 8105a0e:	4293      	cmp	r3, r2
 8105a10:	f000 8099 	beq.w	8105b46 <HAL_TIM_ConfigClockSource+0x1ae>
 8105a14:	4a5b      	ldr	r2, [pc, #364]	; (8105b84 <HAL_TIM_ConfigClockSource+0x1ec>)
 8105a16:	4293      	cmp	r3, r2
 8105a18:	f200 809e 	bhi.w	8105b58 <HAL_TIM_ConfigClockSource+0x1c0>
 8105a1c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8105a20:	f000 8091 	beq.w	8105b46 <HAL_TIM_ConfigClockSource+0x1ae>
 8105a24:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8105a28:	f200 8096 	bhi.w	8105b58 <HAL_TIM_ConfigClockSource+0x1c0>
 8105a2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8105a30:	f000 8089 	beq.w	8105b46 <HAL_TIM_ConfigClockSource+0x1ae>
 8105a34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8105a38:	f200 808e 	bhi.w	8105b58 <HAL_TIM_ConfigClockSource+0x1c0>
 8105a3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105a40:	d03e      	beq.n	8105ac0 <HAL_TIM_ConfigClockSource+0x128>
 8105a42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105a46:	f200 8087 	bhi.w	8105b58 <HAL_TIM_ConfigClockSource+0x1c0>
 8105a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105a4e:	f000 8086 	beq.w	8105b5e <HAL_TIM_ConfigClockSource+0x1c6>
 8105a52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105a56:	d87f      	bhi.n	8105b58 <HAL_TIM_ConfigClockSource+0x1c0>
 8105a58:	2b70      	cmp	r3, #112	; 0x70
 8105a5a:	d01a      	beq.n	8105a92 <HAL_TIM_ConfigClockSource+0xfa>
 8105a5c:	2b70      	cmp	r3, #112	; 0x70
 8105a5e:	d87b      	bhi.n	8105b58 <HAL_TIM_ConfigClockSource+0x1c0>
 8105a60:	2b60      	cmp	r3, #96	; 0x60
 8105a62:	d050      	beq.n	8105b06 <HAL_TIM_ConfigClockSource+0x16e>
 8105a64:	2b60      	cmp	r3, #96	; 0x60
 8105a66:	d877      	bhi.n	8105b58 <HAL_TIM_ConfigClockSource+0x1c0>
 8105a68:	2b50      	cmp	r3, #80	; 0x50
 8105a6a:	d03c      	beq.n	8105ae6 <HAL_TIM_ConfigClockSource+0x14e>
 8105a6c:	2b50      	cmp	r3, #80	; 0x50
 8105a6e:	d873      	bhi.n	8105b58 <HAL_TIM_ConfigClockSource+0x1c0>
 8105a70:	2b40      	cmp	r3, #64	; 0x40
 8105a72:	d058      	beq.n	8105b26 <HAL_TIM_ConfigClockSource+0x18e>
 8105a74:	2b40      	cmp	r3, #64	; 0x40
 8105a76:	d86f      	bhi.n	8105b58 <HAL_TIM_ConfigClockSource+0x1c0>
 8105a78:	2b30      	cmp	r3, #48	; 0x30
 8105a7a:	d064      	beq.n	8105b46 <HAL_TIM_ConfigClockSource+0x1ae>
 8105a7c:	2b30      	cmp	r3, #48	; 0x30
 8105a7e:	d86b      	bhi.n	8105b58 <HAL_TIM_ConfigClockSource+0x1c0>
 8105a80:	2b20      	cmp	r3, #32
 8105a82:	d060      	beq.n	8105b46 <HAL_TIM_ConfigClockSource+0x1ae>
 8105a84:	2b20      	cmp	r3, #32
 8105a86:	d867      	bhi.n	8105b58 <HAL_TIM_ConfigClockSource+0x1c0>
 8105a88:	2b00      	cmp	r3, #0
 8105a8a:	d05c      	beq.n	8105b46 <HAL_TIM_ConfigClockSource+0x1ae>
 8105a8c:	2b10      	cmp	r3, #16
 8105a8e:	d05a      	beq.n	8105b46 <HAL_TIM_ConfigClockSource+0x1ae>
 8105a90:	e062      	b.n	8105b58 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8105a92:	687b      	ldr	r3, [r7, #4]
 8105a94:	6818      	ldr	r0, [r3, #0]
 8105a96:	683b      	ldr	r3, [r7, #0]
 8105a98:	6899      	ldr	r1, [r3, #8]
 8105a9a:	683b      	ldr	r3, [r7, #0]
 8105a9c:	685a      	ldr	r2, [r3, #4]
 8105a9e:	683b      	ldr	r3, [r7, #0]
 8105aa0:	68db      	ldr	r3, [r3, #12]
 8105aa2:	f000 fc85 	bl	81063b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8105aa6:	687b      	ldr	r3, [r7, #4]
 8105aa8:	681b      	ldr	r3, [r3, #0]
 8105aaa:	689b      	ldr	r3, [r3, #8]
 8105aac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8105aae:	68bb      	ldr	r3, [r7, #8]
 8105ab0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8105ab4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8105ab6:	687b      	ldr	r3, [r7, #4]
 8105ab8:	681b      	ldr	r3, [r3, #0]
 8105aba:	68ba      	ldr	r2, [r7, #8]
 8105abc:	609a      	str	r2, [r3, #8]
      break;
 8105abe:	e04f      	b.n	8105b60 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8105ac0:	687b      	ldr	r3, [r7, #4]
 8105ac2:	6818      	ldr	r0, [r3, #0]
 8105ac4:	683b      	ldr	r3, [r7, #0]
 8105ac6:	6899      	ldr	r1, [r3, #8]
 8105ac8:	683b      	ldr	r3, [r7, #0]
 8105aca:	685a      	ldr	r2, [r3, #4]
 8105acc:	683b      	ldr	r3, [r7, #0]
 8105ace:	68db      	ldr	r3, [r3, #12]
 8105ad0:	f000 fc6e 	bl	81063b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8105ad4:	687b      	ldr	r3, [r7, #4]
 8105ad6:	681b      	ldr	r3, [r3, #0]
 8105ad8:	689a      	ldr	r2, [r3, #8]
 8105ada:	687b      	ldr	r3, [r7, #4]
 8105adc:	681b      	ldr	r3, [r3, #0]
 8105ade:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8105ae2:	609a      	str	r2, [r3, #8]
      break;
 8105ae4:	e03c      	b.n	8105b60 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8105ae6:	687b      	ldr	r3, [r7, #4]
 8105ae8:	6818      	ldr	r0, [r3, #0]
 8105aea:	683b      	ldr	r3, [r7, #0]
 8105aec:	6859      	ldr	r1, [r3, #4]
 8105aee:	683b      	ldr	r3, [r7, #0]
 8105af0:	68db      	ldr	r3, [r3, #12]
 8105af2:	461a      	mov	r2, r3
 8105af4:	f000 fbe0 	bl	81062b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8105af8:	687b      	ldr	r3, [r7, #4]
 8105afa:	681b      	ldr	r3, [r3, #0]
 8105afc:	2150      	movs	r1, #80	; 0x50
 8105afe:	4618      	mov	r0, r3
 8105b00:	f000 fc39 	bl	8106376 <TIM_ITRx_SetConfig>
      break;
 8105b04:	e02c      	b.n	8105b60 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8105b06:	687b      	ldr	r3, [r7, #4]
 8105b08:	6818      	ldr	r0, [r3, #0]
 8105b0a:	683b      	ldr	r3, [r7, #0]
 8105b0c:	6859      	ldr	r1, [r3, #4]
 8105b0e:	683b      	ldr	r3, [r7, #0]
 8105b10:	68db      	ldr	r3, [r3, #12]
 8105b12:	461a      	mov	r2, r3
 8105b14:	f000 fbff 	bl	8106316 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8105b18:	687b      	ldr	r3, [r7, #4]
 8105b1a:	681b      	ldr	r3, [r3, #0]
 8105b1c:	2160      	movs	r1, #96	; 0x60
 8105b1e:	4618      	mov	r0, r3
 8105b20:	f000 fc29 	bl	8106376 <TIM_ITRx_SetConfig>
      break;
 8105b24:	e01c      	b.n	8105b60 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8105b26:	687b      	ldr	r3, [r7, #4]
 8105b28:	6818      	ldr	r0, [r3, #0]
 8105b2a:	683b      	ldr	r3, [r7, #0]
 8105b2c:	6859      	ldr	r1, [r3, #4]
 8105b2e:	683b      	ldr	r3, [r7, #0]
 8105b30:	68db      	ldr	r3, [r3, #12]
 8105b32:	461a      	mov	r2, r3
 8105b34:	f000 fbc0 	bl	81062b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8105b38:	687b      	ldr	r3, [r7, #4]
 8105b3a:	681b      	ldr	r3, [r3, #0]
 8105b3c:	2140      	movs	r1, #64	; 0x40
 8105b3e:	4618      	mov	r0, r3
 8105b40:	f000 fc19 	bl	8106376 <TIM_ITRx_SetConfig>
      break;
 8105b44:	e00c      	b.n	8105b60 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8105b46:	687b      	ldr	r3, [r7, #4]
 8105b48:	681a      	ldr	r2, [r3, #0]
 8105b4a:	683b      	ldr	r3, [r7, #0]
 8105b4c:	681b      	ldr	r3, [r3, #0]
 8105b4e:	4619      	mov	r1, r3
 8105b50:	4610      	mov	r0, r2
 8105b52:	f000 fc10 	bl	8106376 <TIM_ITRx_SetConfig>
      break;
 8105b56:	e003      	b.n	8105b60 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8105b58:	2301      	movs	r3, #1
 8105b5a:	73fb      	strb	r3, [r7, #15]
      break;
 8105b5c:	e000      	b.n	8105b60 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8105b5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8105b60:	687b      	ldr	r3, [r7, #4]
 8105b62:	2201      	movs	r2, #1
 8105b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8105b68:	687b      	ldr	r3, [r7, #4]
 8105b6a:	2200      	movs	r2, #0
 8105b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8105b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8105b72:	4618      	mov	r0, r3
 8105b74:	3710      	adds	r7, #16
 8105b76:	46bd      	mov	sp, r7
 8105b78:	bd80      	pop	{r7, pc}
 8105b7a:	bf00      	nop
 8105b7c:	00100040 	.word	0x00100040
 8105b80:	00100030 	.word	0x00100030
 8105b84:	00100020 	.word	0x00100020

08105b88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8105b88:	b480      	push	{r7}
 8105b8a:	b083      	sub	sp, #12
 8105b8c:	af00      	add	r7, sp, #0
 8105b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8105b90:	bf00      	nop
 8105b92:	370c      	adds	r7, #12
 8105b94:	46bd      	mov	sp, r7
 8105b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105b9a:	4770      	bx	lr

08105b9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8105b9c:	b480      	push	{r7}
 8105b9e:	b083      	sub	sp, #12
 8105ba0:	af00      	add	r7, sp, #0
 8105ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8105ba4:	bf00      	nop
 8105ba6:	370c      	adds	r7, #12
 8105ba8:	46bd      	mov	sp, r7
 8105baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105bae:	4770      	bx	lr

08105bb0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8105bb0:	b480      	push	{r7}
 8105bb2:	b083      	sub	sp, #12
 8105bb4:	af00      	add	r7, sp, #0
 8105bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8105bb8:	bf00      	nop
 8105bba:	370c      	adds	r7, #12
 8105bbc:	46bd      	mov	sp, r7
 8105bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105bc2:	4770      	bx	lr

08105bc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8105bc4:	b480      	push	{r7}
 8105bc6:	b083      	sub	sp, #12
 8105bc8:	af00      	add	r7, sp, #0
 8105bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8105bcc:	bf00      	nop
 8105bce:	370c      	adds	r7, #12
 8105bd0:	46bd      	mov	sp, r7
 8105bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105bd6:	4770      	bx	lr

08105bd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8105bd8:	b480      	push	{r7}
 8105bda:	b085      	sub	sp, #20
 8105bdc:	af00      	add	r7, sp, #0
 8105bde:	6078      	str	r0, [r7, #4]
 8105be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8105be2:	687b      	ldr	r3, [r7, #4]
 8105be4:	681b      	ldr	r3, [r3, #0]
 8105be6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8105be8:	687b      	ldr	r3, [r7, #4]
 8105bea:	4a40      	ldr	r2, [pc, #256]	; (8105cec <TIM_Base_SetConfig+0x114>)
 8105bec:	4293      	cmp	r3, r2
 8105bee:	d013      	beq.n	8105c18 <TIM_Base_SetConfig+0x40>
 8105bf0:	687b      	ldr	r3, [r7, #4]
 8105bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105bf6:	d00f      	beq.n	8105c18 <TIM_Base_SetConfig+0x40>
 8105bf8:	687b      	ldr	r3, [r7, #4]
 8105bfa:	4a3d      	ldr	r2, [pc, #244]	; (8105cf0 <TIM_Base_SetConfig+0x118>)
 8105bfc:	4293      	cmp	r3, r2
 8105bfe:	d00b      	beq.n	8105c18 <TIM_Base_SetConfig+0x40>
 8105c00:	687b      	ldr	r3, [r7, #4]
 8105c02:	4a3c      	ldr	r2, [pc, #240]	; (8105cf4 <TIM_Base_SetConfig+0x11c>)
 8105c04:	4293      	cmp	r3, r2
 8105c06:	d007      	beq.n	8105c18 <TIM_Base_SetConfig+0x40>
 8105c08:	687b      	ldr	r3, [r7, #4]
 8105c0a:	4a3b      	ldr	r2, [pc, #236]	; (8105cf8 <TIM_Base_SetConfig+0x120>)
 8105c0c:	4293      	cmp	r3, r2
 8105c0e:	d003      	beq.n	8105c18 <TIM_Base_SetConfig+0x40>
 8105c10:	687b      	ldr	r3, [r7, #4]
 8105c12:	4a3a      	ldr	r2, [pc, #232]	; (8105cfc <TIM_Base_SetConfig+0x124>)
 8105c14:	4293      	cmp	r3, r2
 8105c16:	d108      	bne.n	8105c2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8105c18:	68fb      	ldr	r3, [r7, #12]
 8105c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8105c1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8105c20:	683b      	ldr	r3, [r7, #0]
 8105c22:	685b      	ldr	r3, [r3, #4]
 8105c24:	68fa      	ldr	r2, [r7, #12]
 8105c26:	4313      	orrs	r3, r2
 8105c28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8105c2a:	687b      	ldr	r3, [r7, #4]
 8105c2c:	4a2f      	ldr	r2, [pc, #188]	; (8105cec <TIM_Base_SetConfig+0x114>)
 8105c2e:	4293      	cmp	r3, r2
 8105c30:	d01f      	beq.n	8105c72 <TIM_Base_SetConfig+0x9a>
 8105c32:	687b      	ldr	r3, [r7, #4]
 8105c34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105c38:	d01b      	beq.n	8105c72 <TIM_Base_SetConfig+0x9a>
 8105c3a:	687b      	ldr	r3, [r7, #4]
 8105c3c:	4a2c      	ldr	r2, [pc, #176]	; (8105cf0 <TIM_Base_SetConfig+0x118>)
 8105c3e:	4293      	cmp	r3, r2
 8105c40:	d017      	beq.n	8105c72 <TIM_Base_SetConfig+0x9a>
 8105c42:	687b      	ldr	r3, [r7, #4]
 8105c44:	4a2b      	ldr	r2, [pc, #172]	; (8105cf4 <TIM_Base_SetConfig+0x11c>)
 8105c46:	4293      	cmp	r3, r2
 8105c48:	d013      	beq.n	8105c72 <TIM_Base_SetConfig+0x9a>
 8105c4a:	687b      	ldr	r3, [r7, #4]
 8105c4c:	4a2a      	ldr	r2, [pc, #168]	; (8105cf8 <TIM_Base_SetConfig+0x120>)
 8105c4e:	4293      	cmp	r3, r2
 8105c50:	d00f      	beq.n	8105c72 <TIM_Base_SetConfig+0x9a>
 8105c52:	687b      	ldr	r3, [r7, #4]
 8105c54:	4a29      	ldr	r2, [pc, #164]	; (8105cfc <TIM_Base_SetConfig+0x124>)
 8105c56:	4293      	cmp	r3, r2
 8105c58:	d00b      	beq.n	8105c72 <TIM_Base_SetConfig+0x9a>
 8105c5a:	687b      	ldr	r3, [r7, #4]
 8105c5c:	4a28      	ldr	r2, [pc, #160]	; (8105d00 <TIM_Base_SetConfig+0x128>)
 8105c5e:	4293      	cmp	r3, r2
 8105c60:	d007      	beq.n	8105c72 <TIM_Base_SetConfig+0x9a>
 8105c62:	687b      	ldr	r3, [r7, #4]
 8105c64:	4a27      	ldr	r2, [pc, #156]	; (8105d04 <TIM_Base_SetConfig+0x12c>)
 8105c66:	4293      	cmp	r3, r2
 8105c68:	d003      	beq.n	8105c72 <TIM_Base_SetConfig+0x9a>
 8105c6a:	687b      	ldr	r3, [r7, #4]
 8105c6c:	4a26      	ldr	r2, [pc, #152]	; (8105d08 <TIM_Base_SetConfig+0x130>)
 8105c6e:	4293      	cmp	r3, r2
 8105c70:	d108      	bne.n	8105c84 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8105c72:	68fb      	ldr	r3, [r7, #12]
 8105c74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8105c78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8105c7a:	683b      	ldr	r3, [r7, #0]
 8105c7c:	68db      	ldr	r3, [r3, #12]
 8105c7e:	68fa      	ldr	r2, [r7, #12]
 8105c80:	4313      	orrs	r3, r2
 8105c82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8105c84:	68fb      	ldr	r3, [r7, #12]
 8105c86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8105c8a:	683b      	ldr	r3, [r7, #0]
 8105c8c:	695b      	ldr	r3, [r3, #20]
 8105c8e:	4313      	orrs	r3, r2
 8105c90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8105c92:	687b      	ldr	r3, [r7, #4]
 8105c94:	68fa      	ldr	r2, [r7, #12]
 8105c96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8105c98:	683b      	ldr	r3, [r7, #0]
 8105c9a:	689a      	ldr	r2, [r3, #8]
 8105c9c:	687b      	ldr	r3, [r7, #4]
 8105c9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8105ca0:	683b      	ldr	r3, [r7, #0]
 8105ca2:	681a      	ldr	r2, [r3, #0]
 8105ca4:	687b      	ldr	r3, [r7, #4]
 8105ca6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8105ca8:	687b      	ldr	r3, [r7, #4]
 8105caa:	4a10      	ldr	r2, [pc, #64]	; (8105cec <TIM_Base_SetConfig+0x114>)
 8105cac:	4293      	cmp	r3, r2
 8105cae:	d00f      	beq.n	8105cd0 <TIM_Base_SetConfig+0xf8>
 8105cb0:	687b      	ldr	r3, [r7, #4]
 8105cb2:	4a12      	ldr	r2, [pc, #72]	; (8105cfc <TIM_Base_SetConfig+0x124>)
 8105cb4:	4293      	cmp	r3, r2
 8105cb6:	d00b      	beq.n	8105cd0 <TIM_Base_SetConfig+0xf8>
 8105cb8:	687b      	ldr	r3, [r7, #4]
 8105cba:	4a11      	ldr	r2, [pc, #68]	; (8105d00 <TIM_Base_SetConfig+0x128>)
 8105cbc:	4293      	cmp	r3, r2
 8105cbe:	d007      	beq.n	8105cd0 <TIM_Base_SetConfig+0xf8>
 8105cc0:	687b      	ldr	r3, [r7, #4]
 8105cc2:	4a10      	ldr	r2, [pc, #64]	; (8105d04 <TIM_Base_SetConfig+0x12c>)
 8105cc4:	4293      	cmp	r3, r2
 8105cc6:	d003      	beq.n	8105cd0 <TIM_Base_SetConfig+0xf8>
 8105cc8:	687b      	ldr	r3, [r7, #4]
 8105cca:	4a0f      	ldr	r2, [pc, #60]	; (8105d08 <TIM_Base_SetConfig+0x130>)
 8105ccc:	4293      	cmp	r3, r2
 8105cce:	d103      	bne.n	8105cd8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8105cd0:	683b      	ldr	r3, [r7, #0]
 8105cd2:	691a      	ldr	r2, [r3, #16]
 8105cd4:	687b      	ldr	r3, [r7, #4]
 8105cd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8105cd8:	687b      	ldr	r3, [r7, #4]
 8105cda:	2201      	movs	r2, #1
 8105cdc:	615a      	str	r2, [r3, #20]
}
 8105cde:	bf00      	nop
 8105ce0:	3714      	adds	r7, #20
 8105ce2:	46bd      	mov	sp, r7
 8105ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105ce8:	4770      	bx	lr
 8105cea:	bf00      	nop
 8105cec:	40010000 	.word	0x40010000
 8105cf0:	40000400 	.word	0x40000400
 8105cf4:	40000800 	.word	0x40000800
 8105cf8:	40000c00 	.word	0x40000c00
 8105cfc:	40010400 	.word	0x40010400
 8105d00:	40014000 	.word	0x40014000
 8105d04:	40014400 	.word	0x40014400
 8105d08:	40014800 	.word	0x40014800

08105d0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8105d0c:	b480      	push	{r7}
 8105d0e:	b087      	sub	sp, #28
 8105d10:	af00      	add	r7, sp, #0
 8105d12:	6078      	str	r0, [r7, #4]
 8105d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8105d16:	687b      	ldr	r3, [r7, #4]
 8105d18:	6a1b      	ldr	r3, [r3, #32]
 8105d1a:	f023 0201 	bic.w	r2, r3, #1
 8105d1e:	687b      	ldr	r3, [r7, #4]
 8105d20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8105d22:	687b      	ldr	r3, [r7, #4]
 8105d24:	6a1b      	ldr	r3, [r3, #32]
 8105d26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8105d28:	687b      	ldr	r3, [r7, #4]
 8105d2a:	685b      	ldr	r3, [r3, #4]
 8105d2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8105d2e:	687b      	ldr	r3, [r7, #4]
 8105d30:	699b      	ldr	r3, [r3, #24]
 8105d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8105d34:	68fb      	ldr	r3, [r7, #12]
 8105d36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8105d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8105d3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8105d40:	68fb      	ldr	r3, [r7, #12]
 8105d42:	f023 0303 	bic.w	r3, r3, #3
 8105d46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8105d48:	683b      	ldr	r3, [r7, #0]
 8105d4a:	681b      	ldr	r3, [r3, #0]
 8105d4c:	68fa      	ldr	r2, [r7, #12]
 8105d4e:	4313      	orrs	r3, r2
 8105d50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8105d52:	697b      	ldr	r3, [r7, #20]
 8105d54:	f023 0302 	bic.w	r3, r3, #2
 8105d58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8105d5a:	683b      	ldr	r3, [r7, #0]
 8105d5c:	689b      	ldr	r3, [r3, #8]
 8105d5e:	697a      	ldr	r2, [r7, #20]
 8105d60:	4313      	orrs	r3, r2
 8105d62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8105d64:	687b      	ldr	r3, [r7, #4]
 8105d66:	4a2c      	ldr	r2, [pc, #176]	; (8105e18 <TIM_OC1_SetConfig+0x10c>)
 8105d68:	4293      	cmp	r3, r2
 8105d6a:	d00f      	beq.n	8105d8c <TIM_OC1_SetConfig+0x80>
 8105d6c:	687b      	ldr	r3, [r7, #4]
 8105d6e:	4a2b      	ldr	r2, [pc, #172]	; (8105e1c <TIM_OC1_SetConfig+0x110>)
 8105d70:	4293      	cmp	r3, r2
 8105d72:	d00b      	beq.n	8105d8c <TIM_OC1_SetConfig+0x80>
 8105d74:	687b      	ldr	r3, [r7, #4]
 8105d76:	4a2a      	ldr	r2, [pc, #168]	; (8105e20 <TIM_OC1_SetConfig+0x114>)
 8105d78:	4293      	cmp	r3, r2
 8105d7a:	d007      	beq.n	8105d8c <TIM_OC1_SetConfig+0x80>
 8105d7c:	687b      	ldr	r3, [r7, #4]
 8105d7e:	4a29      	ldr	r2, [pc, #164]	; (8105e24 <TIM_OC1_SetConfig+0x118>)
 8105d80:	4293      	cmp	r3, r2
 8105d82:	d003      	beq.n	8105d8c <TIM_OC1_SetConfig+0x80>
 8105d84:	687b      	ldr	r3, [r7, #4]
 8105d86:	4a28      	ldr	r2, [pc, #160]	; (8105e28 <TIM_OC1_SetConfig+0x11c>)
 8105d88:	4293      	cmp	r3, r2
 8105d8a:	d10c      	bne.n	8105da6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8105d8c:	697b      	ldr	r3, [r7, #20]
 8105d8e:	f023 0308 	bic.w	r3, r3, #8
 8105d92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8105d94:	683b      	ldr	r3, [r7, #0]
 8105d96:	68db      	ldr	r3, [r3, #12]
 8105d98:	697a      	ldr	r2, [r7, #20]
 8105d9a:	4313      	orrs	r3, r2
 8105d9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8105d9e:	697b      	ldr	r3, [r7, #20]
 8105da0:	f023 0304 	bic.w	r3, r3, #4
 8105da4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8105da6:	687b      	ldr	r3, [r7, #4]
 8105da8:	4a1b      	ldr	r2, [pc, #108]	; (8105e18 <TIM_OC1_SetConfig+0x10c>)
 8105daa:	4293      	cmp	r3, r2
 8105dac:	d00f      	beq.n	8105dce <TIM_OC1_SetConfig+0xc2>
 8105dae:	687b      	ldr	r3, [r7, #4]
 8105db0:	4a1a      	ldr	r2, [pc, #104]	; (8105e1c <TIM_OC1_SetConfig+0x110>)
 8105db2:	4293      	cmp	r3, r2
 8105db4:	d00b      	beq.n	8105dce <TIM_OC1_SetConfig+0xc2>
 8105db6:	687b      	ldr	r3, [r7, #4]
 8105db8:	4a19      	ldr	r2, [pc, #100]	; (8105e20 <TIM_OC1_SetConfig+0x114>)
 8105dba:	4293      	cmp	r3, r2
 8105dbc:	d007      	beq.n	8105dce <TIM_OC1_SetConfig+0xc2>
 8105dbe:	687b      	ldr	r3, [r7, #4]
 8105dc0:	4a18      	ldr	r2, [pc, #96]	; (8105e24 <TIM_OC1_SetConfig+0x118>)
 8105dc2:	4293      	cmp	r3, r2
 8105dc4:	d003      	beq.n	8105dce <TIM_OC1_SetConfig+0xc2>
 8105dc6:	687b      	ldr	r3, [r7, #4]
 8105dc8:	4a17      	ldr	r2, [pc, #92]	; (8105e28 <TIM_OC1_SetConfig+0x11c>)
 8105dca:	4293      	cmp	r3, r2
 8105dcc:	d111      	bne.n	8105df2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8105dce:	693b      	ldr	r3, [r7, #16]
 8105dd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8105dd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8105dd6:	693b      	ldr	r3, [r7, #16]
 8105dd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8105ddc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8105dde:	683b      	ldr	r3, [r7, #0]
 8105de0:	695b      	ldr	r3, [r3, #20]
 8105de2:	693a      	ldr	r2, [r7, #16]
 8105de4:	4313      	orrs	r3, r2
 8105de6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8105de8:	683b      	ldr	r3, [r7, #0]
 8105dea:	699b      	ldr	r3, [r3, #24]
 8105dec:	693a      	ldr	r2, [r7, #16]
 8105dee:	4313      	orrs	r3, r2
 8105df0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8105df2:	687b      	ldr	r3, [r7, #4]
 8105df4:	693a      	ldr	r2, [r7, #16]
 8105df6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8105df8:	687b      	ldr	r3, [r7, #4]
 8105dfa:	68fa      	ldr	r2, [r7, #12]
 8105dfc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8105dfe:	683b      	ldr	r3, [r7, #0]
 8105e00:	685a      	ldr	r2, [r3, #4]
 8105e02:	687b      	ldr	r3, [r7, #4]
 8105e04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8105e06:	687b      	ldr	r3, [r7, #4]
 8105e08:	697a      	ldr	r2, [r7, #20]
 8105e0a:	621a      	str	r2, [r3, #32]
}
 8105e0c:	bf00      	nop
 8105e0e:	371c      	adds	r7, #28
 8105e10:	46bd      	mov	sp, r7
 8105e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105e16:	4770      	bx	lr
 8105e18:	40010000 	.word	0x40010000
 8105e1c:	40010400 	.word	0x40010400
 8105e20:	40014000 	.word	0x40014000
 8105e24:	40014400 	.word	0x40014400
 8105e28:	40014800 	.word	0x40014800

08105e2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8105e2c:	b480      	push	{r7}
 8105e2e:	b087      	sub	sp, #28
 8105e30:	af00      	add	r7, sp, #0
 8105e32:	6078      	str	r0, [r7, #4]
 8105e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8105e36:	687b      	ldr	r3, [r7, #4]
 8105e38:	6a1b      	ldr	r3, [r3, #32]
 8105e3a:	f023 0210 	bic.w	r2, r3, #16
 8105e3e:	687b      	ldr	r3, [r7, #4]
 8105e40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8105e42:	687b      	ldr	r3, [r7, #4]
 8105e44:	6a1b      	ldr	r3, [r3, #32]
 8105e46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8105e48:	687b      	ldr	r3, [r7, #4]
 8105e4a:	685b      	ldr	r3, [r3, #4]
 8105e4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8105e4e:	687b      	ldr	r3, [r7, #4]
 8105e50:	699b      	ldr	r3, [r3, #24]
 8105e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8105e54:	68fb      	ldr	r3, [r7, #12]
 8105e56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8105e5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8105e5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8105e60:	68fb      	ldr	r3, [r7, #12]
 8105e62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8105e66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8105e68:	683b      	ldr	r3, [r7, #0]
 8105e6a:	681b      	ldr	r3, [r3, #0]
 8105e6c:	021b      	lsls	r3, r3, #8
 8105e6e:	68fa      	ldr	r2, [r7, #12]
 8105e70:	4313      	orrs	r3, r2
 8105e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8105e74:	697b      	ldr	r3, [r7, #20]
 8105e76:	f023 0320 	bic.w	r3, r3, #32
 8105e7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8105e7c:	683b      	ldr	r3, [r7, #0]
 8105e7e:	689b      	ldr	r3, [r3, #8]
 8105e80:	011b      	lsls	r3, r3, #4
 8105e82:	697a      	ldr	r2, [r7, #20]
 8105e84:	4313      	orrs	r3, r2
 8105e86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8105e88:	687b      	ldr	r3, [r7, #4]
 8105e8a:	4a28      	ldr	r2, [pc, #160]	; (8105f2c <TIM_OC2_SetConfig+0x100>)
 8105e8c:	4293      	cmp	r3, r2
 8105e8e:	d003      	beq.n	8105e98 <TIM_OC2_SetConfig+0x6c>
 8105e90:	687b      	ldr	r3, [r7, #4]
 8105e92:	4a27      	ldr	r2, [pc, #156]	; (8105f30 <TIM_OC2_SetConfig+0x104>)
 8105e94:	4293      	cmp	r3, r2
 8105e96:	d10d      	bne.n	8105eb4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8105e98:	697b      	ldr	r3, [r7, #20]
 8105e9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8105e9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8105ea0:	683b      	ldr	r3, [r7, #0]
 8105ea2:	68db      	ldr	r3, [r3, #12]
 8105ea4:	011b      	lsls	r3, r3, #4
 8105ea6:	697a      	ldr	r2, [r7, #20]
 8105ea8:	4313      	orrs	r3, r2
 8105eaa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8105eac:	697b      	ldr	r3, [r7, #20]
 8105eae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8105eb2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8105eb4:	687b      	ldr	r3, [r7, #4]
 8105eb6:	4a1d      	ldr	r2, [pc, #116]	; (8105f2c <TIM_OC2_SetConfig+0x100>)
 8105eb8:	4293      	cmp	r3, r2
 8105eba:	d00f      	beq.n	8105edc <TIM_OC2_SetConfig+0xb0>
 8105ebc:	687b      	ldr	r3, [r7, #4]
 8105ebe:	4a1c      	ldr	r2, [pc, #112]	; (8105f30 <TIM_OC2_SetConfig+0x104>)
 8105ec0:	4293      	cmp	r3, r2
 8105ec2:	d00b      	beq.n	8105edc <TIM_OC2_SetConfig+0xb0>
 8105ec4:	687b      	ldr	r3, [r7, #4]
 8105ec6:	4a1b      	ldr	r2, [pc, #108]	; (8105f34 <TIM_OC2_SetConfig+0x108>)
 8105ec8:	4293      	cmp	r3, r2
 8105eca:	d007      	beq.n	8105edc <TIM_OC2_SetConfig+0xb0>
 8105ecc:	687b      	ldr	r3, [r7, #4]
 8105ece:	4a1a      	ldr	r2, [pc, #104]	; (8105f38 <TIM_OC2_SetConfig+0x10c>)
 8105ed0:	4293      	cmp	r3, r2
 8105ed2:	d003      	beq.n	8105edc <TIM_OC2_SetConfig+0xb0>
 8105ed4:	687b      	ldr	r3, [r7, #4]
 8105ed6:	4a19      	ldr	r2, [pc, #100]	; (8105f3c <TIM_OC2_SetConfig+0x110>)
 8105ed8:	4293      	cmp	r3, r2
 8105eda:	d113      	bne.n	8105f04 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8105edc:	693b      	ldr	r3, [r7, #16]
 8105ede:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8105ee2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8105ee4:	693b      	ldr	r3, [r7, #16]
 8105ee6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8105eea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8105eec:	683b      	ldr	r3, [r7, #0]
 8105eee:	695b      	ldr	r3, [r3, #20]
 8105ef0:	009b      	lsls	r3, r3, #2
 8105ef2:	693a      	ldr	r2, [r7, #16]
 8105ef4:	4313      	orrs	r3, r2
 8105ef6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8105ef8:	683b      	ldr	r3, [r7, #0]
 8105efa:	699b      	ldr	r3, [r3, #24]
 8105efc:	009b      	lsls	r3, r3, #2
 8105efe:	693a      	ldr	r2, [r7, #16]
 8105f00:	4313      	orrs	r3, r2
 8105f02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8105f04:	687b      	ldr	r3, [r7, #4]
 8105f06:	693a      	ldr	r2, [r7, #16]
 8105f08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8105f0a:	687b      	ldr	r3, [r7, #4]
 8105f0c:	68fa      	ldr	r2, [r7, #12]
 8105f0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8105f10:	683b      	ldr	r3, [r7, #0]
 8105f12:	685a      	ldr	r2, [r3, #4]
 8105f14:	687b      	ldr	r3, [r7, #4]
 8105f16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8105f18:	687b      	ldr	r3, [r7, #4]
 8105f1a:	697a      	ldr	r2, [r7, #20]
 8105f1c:	621a      	str	r2, [r3, #32]
}
 8105f1e:	bf00      	nop
 8105f20:	371c      	adds	r7, #28
 8105f22:	46bd      	mov	sp, r7
 8105f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105f28:	4770      	bx	lr
 8105f2a:	bf00      	nop
 8105f2c:	40010000 	.word	0x40010000
 8105f30:	40010400 	.word	0x40010400
 8105f34:	40014000 	.word	0x40014000
 8105f38:	40014400 	.word	0x40014400
 8105f3c:	40014800 	.word	0x40014800

08105f40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8105f40:	b480      	push	{r7}
 8105f42:	b087      	sub	sp, #28
 8105f44:	af00      	add	r7, sp, #0
 8105f46:	6078      	str	r0, [r7, #4]
 8105f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8105f4a:	687b      	ldr	r3, [r7, #4]
 8105f4c:	6a1b      	ldr	r3, [r3, #32]
 8105f4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8105f52:	687b      	ldr	r3, [r7, #4]
 8105f54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8105f56:	687b      	ldr	r3, [r7, #4]
 8105f58:	6a1b      	ldr	r3, [r3, #32]
 8105f5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8105f5c:	687b      	ldr	r3, [r7, #4]
 8105f5e:	685b      	ldr	r3, [r3, #4]
 8105f60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8105f62:	687b      	ldr	r3, [r7, #4]
 8105f64:	69db      	ldr	r3, [r3, #28]
 8105f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8105f68:	68fb      	ldr	r3, [r7, #12]
 8105f6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8105f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8105f72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8105f74:	68fb      	ldr	r3, [r7, #12]
 8105f76:	f023 0303 	bic.w	r3, r3, #3
 8105f7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8105f7c:	683b      	ldr	r3, [r7, #0]
 8105f7e:	681b      	ldr	r3, [r3, #0]
 8105f80:	68fa      	ldr	r2, [r7, #12]
 8105f82:	4313      	orrs	r3, r2
 8105f84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8105f86:	697b      	ldr	r3, [r7, #20]
 8105f88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8105f8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8105f8e:	683b      	ldr	r3, [r7, #0]
 8105f90:	689b      	ldr	r3, [r3, #8]
 8105f92:	021b      	lsls	r3, r3, #8
 8105f94:	697a      	ldr	r2, [r7, #20]
 8105f96:	4313      	orrs	r3, r2
 8105f98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8105f9a:	687b      	ldr	r3, [r7, #4]
 8105f9c:	4a27      	ldr	r2, [pc, #156]	; (810603c <TIM_OC3_SetConfig+0xfc>)
 8105f9e:	4293      	cmp	r3, r2
 8105fa0:	d003      	beq.n	8105faa <TIM_OC3_SetConfig+0x6a>
 8105fa2:	687b      	ldr	r3, [r7, #4]
 8105fa4:	4a26      	ldr	r2, [pc, #152]	; (8106040 <TIM_OC3_SetConfig+0x100>)
 8105fa6:	4293      	cmp	r3, r2
 8105fa8:	d10d      	bne.n	8105fc6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8105faa:	697b      	ldr	r3, [r7, #20]
 8105fac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8105fb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8105fb2:	683b      	ldr	r3, [r7, #0]
 8105fb4:	68db      	ldr	r3, [r3, #12]
 8105fb6:	021b      	lsls	r3, r3, #8
 8105fb8:	697a      	ldr	r2, [r7, #20]
 8105fba:	4313      	orrs	r3, r2
 8105fbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8105fbe:	697b      	ldr	r3, [r7, #20]
 8105fc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8105fc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8105fc6:	687b      	ldr	r3, [r7, #4]
 8105fc8:	4a1c      	ldr	r2, [pc, #112]	; (810603c <TIM_OC3_SetConfig+0xfc>)
 8105fca:	4293      	cmp	r3, r2
 8105fcc:	d00f      	beq.n	8105fee <TIM_OC3_SetConfig+0xae>
 8105fce:	687b      	ldr	r3, [r7, #4]
 8105fd0:	4a1b      	ldr	r2, [pc, #108]	; (8106040 <TIM_OC3_SetConfig+0x100>)
 8105fd2:	4293      	cmp	r3, r2
 8105fd4:	d00b      	beq.n	8105fee <TIM_OC3_SetConfig+0xae>
 8105fd6:	687b      	ldr	r3, [r7, #4]
 8105fd8:	4a1a      	ldr	r2, [pc, #104]	; (8106044 <TIM_OC3_SetConfig+0x104>)
 8105fda:	4293      	cmp	r3, r2
 8105fdc:	d007      	beq.n	8105fee <TIM_OC3_SetConfig+0xae>
 8105fde:	687b      	ldr	r3, [r7, #4]
 8105fe0:	4a19      	ldr	r2, [pc, #100]	; (8106048 <TIM_OC3_SetConfig+0x108>)
 8105fe2:	4293      	cmp	r3, r2
 8105fe4:	d003      	beq.n	8105fee <TIM_OC3_SetConfig+0xae>
 8105fe6:	687b      	ldr	r3, [r7, #4]
 8105fe8:	4a18      	ldr	r2, [pc, #96]	; (810604c <TIM_OC3_SetConfig+0x10c>)
 8105fea:	4293      	cmp	r3, r2
 8105fec:	d113      	bne.n	8106016 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8105fee:	693b      	ldr	r3, [r7, #16]
 8105ff0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8105ff4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8105ff6:	693b      	ldr	r3, [r7, #16]
 8105ff8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8105ffc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8105ffe:	683b      	ldr	r3, [r7, #0]
 8106000:	695b      	ldr	r3, [r3, #20]
 8106002:	011b      	lsls	r3, r3, #4
 8106004:	693a      	ldr	r2, [r7, #16]
 8106006:	4313      	orrs	r3, r2
 8106008:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 810600a:	683b      	ldr	r3, [r7, #0]
 810600c:	699b      	ldr	r3, [r3, #24]
 810600e:	011b      	lsls	r3, r3, #4
 8106010:	693a      	ldr	r2, [r7, #16]
 8106012:	4313      	orrs	r3, r2
 8106014:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8106016:	687b      	ldr	r3, [r7, #4]
 8106018:	693a      	ldr	r2, [r7, #16]
 810601a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810601c:	687b      	ldr	r3, [r7, #4]
 810601e:	68fa      	ldr	r2, [r7, #12]
 8106020:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8106022:	683b      	ldr	r3, [r7, #0]
 8106024:	685a      	ldr	r2, [r3, #4]
 8106026:	687b      	ldr	r3, [r7, #4]
 8106028:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810602a:	687b      	ldr	r3, [r7, #4]
 810602c:	697a      	ldr	r2, [r7, #20]
 810602e:	621a      	str	r2, [r3, #32]
}
 8106030:	bf00      	nop
 8106032:	371c      	adds	r7, #28
 8106034:	46bd      	mov	sp, r7
 8106036:	f85d 7b04 	ldr.w	r7, [sp], #4
 810603a:	4770      	bx	lr
 810603c:	40010000 	.word	0x40010000
 8106040:	40010400 	.word	0x40010400
 8106044:	40014000 	.word	0x40014000
 8106048:	40014400 	.word	0x40014400
 810604c:	40014800 	.word	0x40014800

08106050 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8106050:	b480      	push	{r7}
 8106052:	b087      	sub	sp, #28
 8106054:	af00      	add	r7, sp, #0
 8106056:	6078      	str	r0, [r7, #4]
 8106058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 810605a:	687b      	ldr	r3, [r7, #4]
 810605c:	6a1b      	ldr	r3, [r3, #32]
 810605e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8106062:	687b      	ldr	r3, [r7, #4]
 8106064:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8106066:	687b      	ldr	r3, [r7, #4]
 8106068:	6a1b      	ldr	r3, [r3, #32]
 810606a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810606c:	687b      	ldr	r3, [r7, #4]
 810606e:	685b      	ldr	r3, [r3, #4]
 8106070:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8106072:	687b      	ldr	r3, [r7, #4]
 8106074:	69db      	ldr	r3, [r3, #28]
 8106076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8106078:	68fb      	ldr	r3, [r7, #12]
 810607a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 810607e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8106082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8106084:	68fb      	ldr	r3, [r7, #12]
 8106086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810608a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810608c:	683b      	ldr	r3, [r7, #0]
 810608e:	681b      	ldr	r3, [r3, #0]
 8106090:	021b      	lsls	r3, r3, #8
 8106092:	68fa      	ldr	r2, [r7, #12]
 8106094:	4313      	orrs	r3, r2
 8106096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8106098:	693b      	ldr	r3, [r7, #16]
 810609a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 810609e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 81060a0:	683b      	ldr	r3, [r7, #0]
 81060a2:	689b      	ldr	r3, [r3, #8]
 81060a4:	031b      	lsls	r3, r3, #12
 81060a6:	693a      	ldr	r2, [r7, #16]
 81060a8:	4313      	orrs	r3, r2
 81060aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81060ac:	687b      	ldr	r3, [r7, #4]
 81060ae:	4a18      	ldr	r2, [pc, #96]	; (8106110 <TIM_OC4_SetConfig+0xc0>)
 81060b0:	4293      	cmp	r3, r2
 81060b2:	d00f      	beq.n	81060d4 <TIM_OC4_SetConfig+0x84>
 81060b4:	687b      	ldr	r3, [r7, #4]
 81060b6:	4a17      	ldr	r2, [pc, #92]	; (8106114 <TIM_OC4_SetConfig+0xc4>)
 81060b8:	4293      	cmp	r3, r2
 81060ba:	d00b      	beq.n	81060d4 <TIM_OC4_SetConfig+0x84>
 81060bc:	687b      	ldr	r3, [r7, #4]
 81060be:	4a16      	ldr	r2, [pc, #88]	; (8106118 <TIM_OC4_SetConfig+0xc8>)
 81060c0:	4293      	cmp	r3, r2
 81060c2:	d007      	beq.n	81060d4 <TIM_OC4_SetConfig+0x84>
 81060c4:	687b      	ldr	r3, [r7, #4]
 81060c6:	4a15      	ldr	r2, [pc, #84]	; (810611c <TIM_OC4_SetConfig+0xcc>)
 81060c8:	4293      	cmp	r3, r2
 81060ca:	d003      	beq.n	81060d4 <TIM_OC4_SetConfig+0x84>
 81060cc:	687b      	ldr	r3, [r7, #4]
 81060ce:	4a14      	ldr	r2, [pc, #80]	; (8106120 <TIM_OC4_SetConfig+0xd0>)
 81060d0:	4293      	cmp	r3, r2
 81060d2:	d109      	bne.n	81060e8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 81060d4:	697b      	ldr	r3, [r7, #20]
 81060d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 81060da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 81060dc:	683b      	ldr	r3, [r7, #0]
 81060de:	695b      	ldr	r3, [r3, #20]
 81060e0:	019b      	lsls	r3, r3, #6
 81060e2:	697a      	ldr	r2, [r7, #20]
 81060e4:	4313      	orrs	r3, r2
 81060e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81060e8:	687b      	ldr	r3, [r7, #4]
 81060ea:	697a      	ldr	r2, [r7, #20]
 81060ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 81060ee:	687b      	ldr	r3, [r7, #4]
 81060f0:	68fa      	ldr	r2, [r7, #12]
 81060f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 81060f4:	683b      	ldr	r3, [r7, #0]
 81060f6:	685a      	ldr	r2, [r3, #4]
 81060f8:	687b      	ldr	r3, [r7, #4]
 81060fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81060fc:	687b      	ldr	r3, [r7, #4]
 81060fe:	693a      	ldr	r2, [r7, #16]
 8106100:	621a      	str	r2, [r3, #32]
}
 8106102:	bf00      	nop
 8106104:	371c      	adds	r7, #28
 8106106:	46bd      	mov	sp, r7
 8106108:	f85d 7b04 	ldr.w	r7, [sp], #4
 810610c:	4770      	bx	lr
 810610e:	bf00      	nop
 8106110:	40010000 	.word	0x40010000
 8106114:	40010400 	.word	0x40010400
 8106118:	40014000 	.word	0x40014000
 810611c:	40014400 	.word	0x40014400
 8106120:	40014800 	.word	0x40014800

08106124 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8106124:	b480      	push	{r7}
 8106126:	b087      	sub	sp, #28
 8106128:	af00      	add	r7, sp, #0
 810612a:	6078      	str	r0, [r7, #4]
 810612c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 810612e:	687b      	ldr	r3, [r7, #4]
 8106130:	6a1b      	ldr	r3, [r3, #32]
 8106132:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8106136:	687b      	ldr	r3, [r7, #4]
 8106138:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810613a:	687b      	ldr	r3, [r7, #4]
 810613c:	6a1b      	ldr	r3, [r3, #32]
 810613e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8106140:	687b      	ldr	r3, [r7, #4]
 8106142:	685b      	ldr	r3, [r3, #4]
 8106144:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8106146:	687b      	ldr	r3, [r7, #4]
 8106148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810614a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 810614c:	68fb      	ldr	r3, [r7, #12]
 810614e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8106152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8106156:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8106158:	683b      	ldr	r3, [r7, #0]
 810615a:	681b      	ldr	r3, [r3, #0]
 810615c:	68fa      	ldr	r2, [r7, #12]
 810615e:	4313      	orrs	r3, r2
 8106160:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8106162:	693b      	ldr	r3, [r7, #16]
 8106164:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8106168:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 810616a:	683b      	ldr	r3, [r7, #0]
 810616c:	689b      	ldr	r3, [r3, #8]
 810616e:	041b      	lsls	r3, r3, #16
 8106170:	693a      	ldr	r2, [r7, #16]
 8106172:	4313      	orrs	r3, r2
 8106174:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8106176:	687b      	ldr	r3, [r7, #4]
 8106178:	4a17      	ldr	r2, [pc, #92]	; (81061d8 <TIM_OC5_SetConfig+0xb4>)
 810617a:	4293      	cmp	r3, r2
 810617c:	d00f      	beq.n	810619e <TIM_OC5_SetConfig+0x7a>
 810617e:	687b      	ldr	r3, [r7, #4]
 8106180:	4a16      	ldr	r2, [pc, #88]	; (81061dc <TIM_OC5_SetConfig+0xb8>)
 8106182:	4293      	cmp	r3, r2
 8106184:	d00b      	beq.n	810619e <TIM_OC5_SetConfig+0x7a>
 8106186:	687b      	ldr	r3, [r7, #4]
 8106188:	4a15      	ldr	r2, [pc, #84]	; (81061e0 <TIM_OC5_SetConfig+0xbc>)
 810618a:	4293      	cmp	r3, r2
 810618c:	d007      	beq.n	810619e <TIM_OC5_SetConfig+0x7a>
 810618e:	687b      	ldr	r3, [r7, #4]
 8106190:	4a14      	ldr	r2, [pc, #80]	; (81061e4 <TIM_OC5_SetConfig+0xc0>)
 8106192:	4293      	cmp	r3, r2
 8106194:	d003      	beq.n	810619e <TIM_OC5_SetConfig+0x7a>
 8106196:	687b      	ldr	r3, [r7, #4]
 8106198:	4a13      	ldr	r2, [pc, #76]	; (81061e8 <TIM_OC5_SetConfig+0xc4>)
 810619a:	4293      	cmp	r3, r2
 810619c:	d109      	bne.n	81061b2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 810619e:	697b      	ldr	r3, [r7, #20]
 81061a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81061a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 81061a6:	683b      	ldr	r3, [r7, #0]
 81061a8:	695b      	ldr	r3, [r3, #20]
 81061aa:	021b      	lsls	r3, r3, #8
 81061ac:	697a      	ldr	r2, [r7, #20]
 81061ae:	4313      	orrs	r3, r2
 81061b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81061b2:	687b      	ldr	r3, [r7, #4]
 81061b4:	697a      	ldr	r2, [r7, #20]
 81061b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 81061b8:	687b      	ldr	r3, [r7, #4]
 81061ba:	68fa      	ldr	r2, [r7, #12]
 81061bc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 81061be:	683b      	ldr	r3, [r7, #0]
 81061c0:	685a      	ldr	r2, [r3, #4]
 81061c2:	687b      	ldr	r3, [r7, #4]
 81061c4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81061c6:	687b      	ldr	r3, [r7, #4]
 81061c8:	693a      	ldr	r2, [r7, #16]
 81061ca:	621a      	str	r2, [r3, #32]
}
 81061cc:	bf00      	nop
 81061ce:	371c      	adds	r7, #28
 81061d0:	46bd      	mov	sp, r7
 81061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81061d6:	4770      	bx	lr
 81061d8:	40010000 	.word	0x40010000
 81061dc:	40010400 	.word	0x40010400
 81061e0:	40014000 	.word	0x40014000
 81061e4:	40014400 	.word	0x40014400
 81061e8:	40014800 	.word	0x40014800

081061ec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 81061ec:	b480      	push	{r7}
 81061ee:	b087      	sub	sp, #28
 81061f0:	af00      	add	r7, sp, #0
 81061f2:	6078      	str	r0, [r7, #4]
 81061f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 81061f6:	687b      	ldr	r3, [r7, #4]
 81061f8:	6a1b      	ldr	r3, [r3, #32]
 81061fa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 81061fe:	687b      	ldr	r3, [r7, #4]
 8106200:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8106202:	687b      	ldr	r3, [r7, #4]
 8106204:	6a1b      	ldr	r3, [r3, #32]
 8106206:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8106208:	687b      	ldr	r3, [r7, #4]
 810620a:	685b      	ldr	r3, [r3, #4]
 810620c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810620e:	687b      	ldr	r3, [r7, #4]
 8106210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8106214:	68fb      	ldr	r3, [r7, #12]
 8106216:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 810621a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810621e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8106220:	683b      	ldr	r3, [r7, #0]
 8106222:	681b      	ldr	r3, [r3, #0]
 8106224:	021b      	lsls	r3, r3, #8
 8106226:	68fa      	ldr	r2, [r7, #12]
 8106228:	4313      	orrs	r3, r2
 810622a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 810622c:	693b      	ldr	r3, [r7, #16]
 810622e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8106232:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8106234:	683b      	ldr	r3, [r7, #0]
 8106236:	689b      	ldr	r3, [r3, #8]
 8106238:	051b      	lsls	r3, r3, #20
 810623a:	693a      	ldr	r2, [r7, #16]
 810623c:	4313      	orrs	r3, r2
 810623e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8106240:	687b      	ldr	r3, [r7, #4]
 8106242:	4a18      	ldr	r2, [pc, #96]	; (81062a4 <TIM_OC6_SetConfig+0xb8>)
 8106244:	4293      	cmp	r3, r2
 8106246:	d00f      	beq.n	8106268 <TIM_OC6_SetConfig+0x7c>
 8106248:	687b      	ldr	r3, [r7, #4]
 810624a:	4a17      	ldr	r2, [pc, #92]	; (81062a8 <TIM_OC6_SetConfig+0xbc>)
 810624c:	4293      	cmp	r3, r2
 810624e:	d00b      	beq.n	8106268 <TIM_OC6_SetConfig+0x7c>
 8106250:	687b      	ldr	r3, [r7, #4]
 8106252:	4a16      	ldr	r2, [pc, #88]	; (81062ac <TIM_OC6_SetConfig+0xc0>)
 8106254:	4293      	cmp	r3, r2
 8106256:	d007      	beq.n	8106268 <TIM_OC6_SetConfig+0x7c>
 8106258:	687b      	ldr	r3, [r7, #4]
 810625a:	4a15      	ldr	r2, [pc, #84]	; (81062b0 <TIM_OC6_SetConfig+0xc4>)
 810625c:	4293      	cmp	r3, r2
 810625e:	d003      	beq.n	8106268 <TIM_OC6_SetConfig+0x7c>
 8106260:	687b      	ldr	r3, [r7, #4]
 8106262:	4a14      	ldr	r2, [pc, #80]	; (81062b4 <TIM_OC6_SetConfig+0xc8>)
 8106264:	4293      	cmp	r3, r2
 8106266:	d109      	bne.n	810627c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8106268:	697b      	ldr	r3, [r7, #20]
 810626a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 810626e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8106270:	683b      	ldr	r3, [r7, #0]
 8106272:	695b      	ldr	r3, [r3, #20]
 8106274:	029b      	lsls	r3, r3, #10
 8106276:	697a      	ldr	r2, [r7, #20]
 8106278:	4313      	orrs	r3, r2
 810627a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810627c:	687b      	ldr	r3, [r7, #4]
 810627e:	697a      	ldr	r2, [r7, #20]
 8106280:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8106282:	687b      	ldr	r3, [r7, #4]
 8106284:	68fa      	ldr	r2, [r7, #12]
 8106286:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8106288:	683b      	ldr	r3, [r7, #0]
 810628a:	685a      	ldr	r2, [r3, #4]
 810628c:	687b      	ldr	r3, [r7, #4]
 810628e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8106290:	687b      	ldr	r3, [r7, #4]
 8106292:	693a      	ldr	r2, [r7, #16]
 8106294:	621a      	str	r2, [r3, #32]
}
 8106296:	bf00      	nop
 8106298:	371c      	adds	r7, #28
 810629a:	46bd      	mov	sp, r7
 810629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81062a0:	4770      	bx	lr
 81062a2:	bf00      	nop
 81062a4:	40010000 	.word	0x40010000
 81062a8:	40010400 	.word	0x40010400
 81062ac:	40014000 	.word	0x40014000
 81062b0:	40014400 	.word	0x40014400
 81062b4:	40014800 	.word	0x40014800

081062b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 81062b8:	b480      	push	{r7}
 81062ba:	b087      	sub	sp, #28
 81062bc:	af00      	add	r7, sp, #0
 81062be:	60f8      	str	r0, [r7, #12]
 81062c0:	60b9      	str	r1, [r7, #8]
 81062c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 81062c4:	68fb      	ldr	r3, [r7, #12]
 81062c6:	6a1b      	ldr	r3, [r3, #32]
 81062c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 81062ca:	68fb      	ldr	r3, [r7, #12]
 81062cc:	6a1b      	ldr	r3, [r3, #32]
 81062ce:	f023 0201 	bic.w	r2, r3, #1
 81062d2:	68fb      	ldr	r3, [r7, #12]
 81062d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 81062d6:	68fb      	ldr	r3, [r7, #12]
 81062d8:	699b      	ldr	r3, [r3, #24]
 81062da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 81062dc:	693b      	ldr	r3, [r7, #16]
 81062de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 81062e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 81062e4:	687b      	ldr	r3, [r7, #4]
 81062e6:	011b      	lsls	r3, r3, #4
 81062e8:	693a      	ldr	r2, [r7, #16]
 81062ea:	4313      	orrs	r3, r2
 81062ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 81062ee:	697b      	ldr	r3, [r7, #20]
 81062f0:	f023 030a 	bic.w	r3, r3, #10
 81062f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 81062f6:	697a      	ldr	r2, [r7, #20]
 81062f8:	68bb      	ldr	r3, [r7, #8]
 81062fa:	4313      	orrs	r3, r2
 81062fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 81062fe:	68fb      	ldr	r3, [r7, #12]
 8106300:	693a      	ldr	r2, [r7, #16]
 8106302:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8106304:	68fb      	ldr	r3, [r7, #12]
 8106306:	697a      	ldr	r2, [r7, #20]
 8106308:	621a      	str	r2, [r3, #32]
}
 810630a:	bf00      	nop
 810630c:	371c      	adds	r7, #28
 810630e:	46bd      	mov	sp, r7
 8106310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106314:	4770      	bx	lr

08106316 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8106316:	b480      	push	{r7}
 8106318:	b087      	sub	sp, #28
 810631a:	af00      	add	r7, sp, #0
 810631c:	60f8      	str	r0, [r7, #12]
 810631e:	60b9      	str	r1, [r7, #8]
 8106320:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8106322:	68fb      	ldr	r3, [r7, #12]
 8106324:	6a1b      	ldr	r3, [r3, #32]
 8106326:	f023 0210 	bic.w	r2, r3, #16
 810632a:	68fb      	ldr	r3, [r7, #12]
 810632c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810632e:	68fb      	ldr	r3, [r7, #12]
 8106330:	699b      	ldr	r3, [r3, #24]
 8106332:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8106334:	68fb      	ldr	r3, [r7, #12]
 8106336:	6a1b      	ldr	r3, [r3, #32]
 8106338:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 810633a:	697b      	ldr	r3, [r7, #20]
 810633c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8106340:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8106342:	687b      	ldr	r3, [r7, #4]
 8106344:	031b      	lsls	r3, r3, #12
 8106346:	697a      	ldr	r2, [r7, #20]
 8106348:	4313      	orrs	r3, r2
 810634a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 810634c:	693b      	ldr	r3, [r7, #16]
 810634e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8106352:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8106354:	68bb      	ldr	r3, [r7, #8]
 8106356:	011b      	lsls	r3, r3, #4
 8106358:	693a      	ldr	r2, [r7, #16]
 810635a:	4313      	orrs	r3, r2
 810635c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 810635e:	68fb      	ldr	r3, [r7, #12]
 8106360:	697a      	ldr	r2, [r7, #20]
 8106362:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8106364:	68fb      	ldr	r3, [r7, #12]
 8106366:	693a      	ldr	r2, [r7, #16]
 8106368:	621a      	str	r2, [r3, #32]
}
 810636a:	bf00      	nop
 810636c:	371c      	adds	r7, #28
 810636e:	46bd      	mov	sp, r7
 8106370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106374:	4770      	bx	lr

08106376 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8106376:	b480      	push	{r7}
 8106378:	b085      	sub	sp, #20
 810637a:	af00      	add	r7, sp, #0
 810637c:	6078      	str	r0, [r7, #4]
 810637e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8106380:	687b      	ldr	r3, [r7, #4]
 8106382:	689b      	ldr	r3, [r3, #8]
 8106384:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8106386:	68fb      	ldr	r3, [r7, #12]
 8106388:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 810638c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8106390:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8106392:	683a      	ldr	r2, [r7, #0]
 8106394:	68fb      	ldr	r3, [r7, #12]
 8106396:	4313      	orrs	r3, r2
 8106398:	f043 0307 	orr.w	r3, r3, #7
 810639c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 810639e:	687b      	ldr	r3, [r7, #4]
 81063a0:	68fa      	ldr	r2, [r7, #12]
 81063a2:	609a      	str	r2, [r3, #8]
}
 81063a4:	bf00      	nop
 81063a6:	3714      	adds	r7, #20
 81063a8:	46bd      	mov	sp, r7
 81063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81063ae:	4770      	bx	lr

081063b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 81063b0:	b480      	push	{r7}
 81063b2:	b087      	sub	sp, #28
 81063b4:	af00      	add	r7, sp, #0
 81063b6:	60f8      	str	r0, [r7, #12]
 81063b8:	60b9      	str	r1, [r7, #8]
 81063ba:	607a      	str	r2, [r7, #4]
 81063bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 81063be:	68fb      	ldr	r3, [r7, #12]
 81063c0:	689b      	ldr	r3, [r3, #8]
 81063c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 81063c4:	697b      	ldr	r3, [r7, #20]
 81063c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81063ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 81063cc:	683b      	ldr	r3, [r7, #0]
 81063ce:	021a      	lsls	r2, r3, #8
 81063d0:	687b      	ldr	r3, [r7, #4]
 81063d2:	431a      	orrs	r2, r3
 81063d4:	68bb      	ldr	r3, [r7, #8]
 81063d6:	4313      	orrs	r3, r2
 81063d8:	697a      	ldr	r2, [r7, #20]
 81063da:	4313      	orrs	r3, r2
 81063dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 81063de:	68fb      	ldr	r3, [r7, #12]
 81063e0:	697a      	ldr	r2, [r7, #20]
 81063e2:	609a      	str	r2, [r3, #8]
}
 81063e4:	bf00      	nop
 81063e6:	371c      	adds	r7, #28
 81063e8:	46bd      	mov	sp, r7
 81063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81063ee:	4770      	bx	lr

081063f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 81063f0:	b480      	push	{r7}
 81063f2:	b087      	sub	sp, #28
 81063f4:	af00      	add	r7, sp, #0
 81063f6:	60f8      	str	r0, [r7, #12]
 81063f8:	60b9      	str	r1, [r7, #8]
 81063fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 81063fc:	68bb      	ldr	r3, [r7, #8]
 81063fe:	f003 031f 	and.w	r3, r3, #31
 8106402:	2201      	movs	r2, #1
 8106404:	fa02 f303 	lsl.w	r3, r2, r3
 8106408:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 810640a:	68fb      	ldr	r3, [r7, #12]
 810640c:	6a1a      	ldr	r2, [r3, #32]
 810640e:	697b      	ldr	r3, [r7, #20]
 8106410:	43db      	mvns	r3, r3
 8106412:	401a      	ands	r2, r3
 8106414:	68fb      	ldr	r3, [r7, #12]
 8106416:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8106418:	68fb      	ldr	r3, [r7, #12]
 810641a:	6a1a      	ldr	r2, [r3, #32]
 810641c:	68bb      	ldr	r3, [r7, #8]
 810641e:	f003 031f 	and.w	r3, r3, #31
 8106422:	6879      	ldr	r1, [r7, #4]
 8106424:	fa01 f303 	lsl.w	r3, r1, r3
 8106428:	431a      	orrs	r2, r3
 810642a:	68fb      	ldr	r3, [r7, #12]
 810642c:	621a      	str	r2, [r3, #32]
}
 810642e:	bf00      	nop
 8106430:	371c      	adds	r7, #28
 8106432:	46bd      	mov	sp, r7
 8106434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106438:	4770      	bx	lr
	...

0810643c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 810643c:	b480      	push	{r7}
 810643e:	b085      	sub	sp, #20
 8106440:	af00      	add	r7, sp, #0
 8106442:	6078      	str	r0, [r7, #4]
 8106444:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8106446:	687b      	ldr	r3, [r7, #4]
 8106448:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 810644c:	2b01      	cmp	r3, #1
 810644e:	d101      	bne.n	8106454 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8106450:	2302      	movs	r3, #2
 8106452:	e06d      	b.n	8106530 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8106454:	687b      	ldr	r3, [r7, #4]
 8106456:	2201      	movs	r2, #1
 8106458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 810645c:	687b      	ldr	r3, [r7, #4]
 810645e:	2202      	movs	r2, #2
 8106460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8106464:	687b      	ldr	r3, [r7, #4]
 8106466:	681b      	ldr	r3, [r3, #0]
 8106468:	685b      	ldr	r3, [r3, #4]
 810646a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 810646c:	687b      	ldr	r3, [r7, #4]
 810646e:	681b      	ldr	r3, [r3, #0]
 8106470:	689b      	ldr	r3, [r3, #8]
 8106472:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8106474:	687b      	ldr	r3, [r7, #4]
 8106476:	681b      	ldr	r3, [r3, #0]
 8106478:	4a30      	ldr	r2, [pc, #192]	; (810653c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810647a:	4293      	cmp	r3, r2
 810647c:	d004      	beq.n	8106488 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 810647e:	687b      	ldr	r3, [r7, #4]
 8106480:	681b      	ldr	r3, [r3, #0]
 8106482:	4a2f      	ldr	r2, [pc, #188]	; (8106540 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8106484:	4293      	cmp	r3, r2
 8106486:	d108      	bne.n	810649a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8106488:	68fb      	ldr	r3, [r7, #12]
 810648a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 810648e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8106490:	683b      	ldr	r3, [r7, #0]
 8106492:	685b      	ldr	r3, [r3, #4]
 8106494:	68fa      	ldr	r2, [r7, #12]
 8106496:	4313      	orrs	r3, r2
 8106498:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 810649a:	68fb      	ldr	r3, [r7, #12]
 810649c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81064a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 81064a2:	683b      	ldr	r3, [r7, #0]
 81064a4:	681b      	ldr	r3, [r3, #0]
 81064a6:	68fa      	ldr	r2, [r7, #12]
 81064a8:	4313      	orrs	r3, r2
 81064aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 81064ac:	687b      	ldr	r3, [r7, #4]
 81064ae:	681b      	ldr	r3, [r3, #0]
 81064b0:	68fa      	ldr	r2, [r7, #12]
 81064b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81064b4:	687b      	ldr	r3, [r7, #4]
 81064b6:	681b      	ldr	r3, [r3, #0]
 81064b8:	4a20      	ldr	r2, [pc, #128]	; (810653c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 81064ba:	4293      	cmp	r3, r2
 81064bc:	d022      	beq.n	8106504 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81064be:	687b      	ldr	r3, [r7, #4]
 81064c0:	681b      	ldr	r3, [r3, #0]
 81064c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81064c6:	d01d      	beq.n	8106504 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81064c8:	687b      	ldr	r3, [r7, #4]
 81064ca:	681b      	ldr	r3, [r3, #0]
 81064cc:	4a1d      	ldr	r2, [pc, #116]	; (8106544 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 81064ce:	4293      	cmp	r3, r2
 81064d0:	d018      	beq.n	8106504 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81064d2:	687b      	ldr	r3, [r7, #4]
 81064d4:	681b      	ldr	r3, [r3, #0]
 81064d6:	4a1c      	ldr	r2, [pc, #112]	; (8106548 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 81064d8:	4293      	cmp	r3, r2
 81064da:	d013      	beq.n	8106504 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81064dc:	687b      	ldr	r3, [r7, #4]
 81064de:	681b      	ldr	r3, [r3, #0]
 81064e0:	4a1a      	ldr	r2, [pc, #104]	; (810654c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 81064e2:	4293      	cmp	r3, r2
 81064e4:	d00e      	beq.n	8106504 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81064e6:	687b      	ldr	r3, [r7, #4]
 81064e8:	681b      	ldr	r3, [r3, #0]
 81064ea:	4a15      	ldr	r2, [pc, #84]	; (8106540 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 81064ec:	4293      	cmp	r3, r2
 81064ee:	d009      	beq.n	8106504 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81064f0:	687b      	ldr	r3, [r7, #4]
 81064f2:	681b      	ldr	r3, [r3, #0]
 81064f4:	4a16      	ldr	r2, [pc, #88]	; (8106550 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 81064f6:	4293      	cmp	r3, r2
 81064f8:	d004      	beq.n	8106504 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81064fa:	687b      	ldr	r3, [r7, #4]
 81064fc:	681b      	ldr	r3, [r3, #0]
 81064fe:	4a15      	ldr	r2, [pc, #84]	; (8106554 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8106500:	4293      	cmp	r3, r2
 8106502:	d10c      	bne.n	810651e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8106504:	68bb      	ldr	r3, [r7, #8]
 8106506:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 810650a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 810650c:	683b      	ldr	r3, [r7, #0]
 810650e:	689b      	ldr	r3, [r3, #8]
 8106510:	68ba      	ldr	r2, [r7, #8]
 8106512:	4313      	orrs	r3, r2
 8106514:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8106516:	687b      	ldr	r3, [r7, #4]
 8106518:	681b      	ldr	r3, [r3, #0]
 810651a:	68ba      	ldr	r2, [r7, #8]
 810651c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 810651e:	687b      	ldr	r3, [r7, #4]
 8106520:	2201      	movs	r2, #1
 8106522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8106526:	687b      	ldr	r3, [r7, #4]
 8106528:	2200      	movs	r2, #0
 810652a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 810652e:	2300      	movs	r3, #0
}
 8106530:	4618      	mov	r0, r3
 8106532:	3714      	adds	r7, #20
 8106534:	46bd      	mov	sp, r7
 8106536:	f85d 7b04 	ldr.w	r7, [sp], #4
 810653a:	4770      	bx	lr
 810653c:	40010000 	.word	0x40010000
 8106540:	40010400 	.word	0x40010400
 8106544:	40000400 	.word	0x40000400
 8106548:	40000800 	.word	0x40000800
 810654c:	40000c00 	.word	0x40000c00
 8106550:	40001800 	.word	0x40001800
 8106554:	40014000 	.word	0x40014000

08106558 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8106558:	b480      	push	{r7}
 810655a:	b083      	sub	sp, #12
 810655c:	af00      	add	r7, sp, #0
 810655e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8106560:	bf00      	nop
 8106562:	370c      	adds	r7, #12
 8106564:	46bd      	mov	sp, r7
 8106566:	f85d 7b04 	ldr.w	r7, [sp], #4
 810656a:	4770      	bx	lr

0810656c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 810656c:	b480      	push	{r7}
 810656e:	b083      	sub	sp, #12
 8106570:	af00      	add	r7, sp, #0
 8106572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8106574:	bf00      	nop
 8106576:	370c      	adds	r7, #12
 8106578:	46bd      	mov	sp, r7
 810657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810657e:	4770      	bx	lr

08106580 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8106580:	b480      	push	{r7}
 8106582:	b083      	sub	sp, #12
 8106584:	af00      	add	r7, sp, #0
 8106586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8106588:	bf00      	nop
 810658a:	370c      	adds	r7, #12
 810658c:	46bd      	mov	sp, r7
 810658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106592:	4770      	bx	lr

08106594 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8106594:	b580      	push	{r7, lr}
 8106596:	b082      	sub	sp, #8
 8106598:	af00      	add	r7, sp, #0
 810659a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 810659c:	687b      	ldr	r3, [r7, #4]
 810659e:	2b00      	cmp	r3, #0
 81065a0:	d101      	bne.n	81065a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 81065a2:	2301      	movs	r3, #1
 81065a4:	e042      	b.n	810662c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 81065a6:	687b      	ldr	r3, [r7, #4]
 81065a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81065ac:	2b00      	cmp	r3, #0
 81065ae:	d106      	bne.n	81065be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 81065b0:	687b      	ldr	r3, [r7, #4]
 81065b2:	2200      	movs	r2, #0
 81065b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 81065b8:	6878      	ldr	r0, [r7, #4]
 81065ba:	f7fb fcd7 	bl	8101f6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 81065be:	687b      	ldr	r3, [r7, #4]
 81065c0:	2224      	movs	r2, #36	; 0x24
 81065c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 81065c6:	687b      	ldr	r3, [r7, #4]
 81065c8:	681b      	ldr	r3, [r3, #0]
 81065ca:	681a      	ldr	r2, [r3, #0]
 81065cc:	687b      	ldr	r3, [r7, #4]
 81065ce:	681b      	ldr	r3, [r3, #0]
 81065d0:	f022 0201 	bic.w	r2, r2, #1
 81065d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 81065d6:	6878      	ldr	r0, [r7, #4]
 81065d8:	f000 fcde 	bl	8106f98 <UART_SetConfig>
 81065dc:	4603      	mov	r3, r0
 81065de:	2b01      	cmp	r3, #1
 81065e0:	d101      	bne.n	81065e6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 81065e2:	2301      	movs	r3, #1
 81065e4:	e022      	b.n	810662c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 81065e6:	687b      	ldr	r3, [r7, #4]
 81065e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81065ea:	2b00      	cmp	r3, #0
 81065ec:	d002      	beq.n	81065f4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 81065ee:	6878      	ldr	r0, [r7, #4]
 81065f0:	f001 fa3a 	bl	8107a68 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 81065f4:	687b      	ldr	r3, [r7, #4]
 81065f6:	681b      	ldr	r3, [r3, #0]
 81065f8:	685a      	ldr	r2, [r3, #4]
 81065fa:	687b      	ldr	r3, [r7, #4]
 81065fc:	681b      	ldr	r3, [r3, #0]
 81065fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8106602:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8106604:	687b      	ldr	r3, [r7, #4]
 8106606:	681b      	ldr	r3, [r3, #0]
 8106608:	689a      	ldr	r2, [r3, #8]
 810660a:	687b      	ldr	r3, [r7, #4]
 810660c:	681b      	ldr	r3, [r3, #0]
 810660e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8106612:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8106614:	687b      	ldr	r3, [r7, #4]
 8106616:	681b      	ldr	r3, [r3, #0]
 8106618:	681a      	ldr	r2, [r3, #0]
 810661a:	687b      	ldr	r3, [r7, #4]
 810661c:	681b      	ldr	r3, [r3, #0]
 810661e:	f042 0201 	orr.w	r2, r2, #1
 8106622:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8106624:	6878      	ldr	r0, [r7, #4]
 8106626:	f001 fac1 	bl	8107bac <UART_CheckIdleState>
 810662a:	4603      	mov	r3, r0
}
 810662c:	4618      	mov	r0, r3
 810662e:	3708      	adds	r7, #8
 8106630:	46bd      	mov	sp, r7
 8106632:	bd80      	pop	{r7, pc}

08106634 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8106634:	b480      	push	{r7}
 8106636:	b091      	sub	sp, #68	; 0x44
 8106638:	af00      	add	r7, sp, #0
 810663a:	60f8      	str	r0, [r7, #12]
 810663c:	60b9      	str	r1, [r7, #8]
 810663e:	4613      	mov	r3, r2
 8106640:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8106642:	68fb      	ldr	r3, [r7, #12]
 8106644:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106648:	2b20      	cmp	r3, #32
 810664a:	f040 808c 	bne.w	8106766 <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 810664e:	68bb      	ldr	r3, [r7, #8]
 8106650:	2b00      	cmp	r3, #0
 8106652:	d002      	beq.n	810665a <HAL_UART_Transmit_IT+0x26>
 8106654:	88fb      	ldrh	r3, [r7, #6]
 8106656:	2b00      	cmp	r3, #0
 8106658:	d101      	bne.n	810665e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 810665a:	2301      	movs	r3, #1
 810665c:	e084      	b.n	8106768 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 810665e:	68fb      	ldr	r3, [r7, #12]
 8106660:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8106664:	2b01      	cmp	r3, #1
 8106666:	d101      	bne.n	810666c <HAL_UART_Transmit_IT+0x38>
 8106668:	2302      	movs	r3, #2
 810666a:	e07d      	b.n	8106768 <HAL_UART_Transmit_IT+0x134>
 810666c:	68fb      	ldr	r3, [r7, #12]
 810666e:	2201      	movs	r2, #1
 8106670:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8106674:	68fb      	ldr	r3, [r7, #12]
 8106676:	68ba      	ldr	r2, [r7, #8]
 8106678:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 810667a:	68fb      	ldr	r3, [r7, #12]
 810667c:	88fa      	ldrh	r2, [r7, #6]
 810667e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8106682:	68fb      	ldr	r3, [r7, #12]
 8106684:	88fa      	ldrh	r2, [r7, #6]
 8106686:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 810668a:	68fb      	ldr	r3, [r7, #12]
 810668c:	2200      	movs	r2, #0
 810668e:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8106690:	68fb      	ldr	r3, [r7, #12]
 8106692:	2200      	movs	r2, #0
 8106694:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8106698:	68fb      	ldr	r3, [r7, #12]
 810669a:	2221      	movs	r2, #33	; 0x21
 810669c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 81066a0:	68fb      	ldr	r3, [r7, #12]
 81066a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81066a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81066a8:	d12e      	bne.n	8106708 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 81066aa:	68fb      	ldr	r3, [r7, #12]
 81066ac:	689b      	ldr	r3, [r3, #8]
 81066ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81066b2:	d107      	bne.n	81066c4 <HAL_UART_Transmit_IT+0x90>
 81066b4:	68fb      	ldr	r3, [r7, #12]
 81066b6:	691b      	ldr	r3, [r3, #16]
 81066b8:	2b00      	cmp	r3, #0
 81066ba:	d103      	bne.n	81066c4 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 81066bc:	68fb      	ldr	r3, [r7, #12]
 81066be:	4a2d      	ldr	r2, [pc, #180]	; (8106774 <HAL_UART_Transmit_IT+0x140>)
 81066c0:	675a      	str	r2, [r3, #116]	; 0x74
 81066c2:	e002      	b.n	81066ca <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 81066c4:	68fb      	ldr	r3, [r7, #12]
 81066c6:	4a2c      	ldr	r2, [pc, #176]	; (8106778 <HAL_UART_Transmit_IT+0x144>)
 81066c8:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 81066ca:	68fb      	ldr	r3, [r7, #12]
 81066cc:	2200      	movs	r2, #0
 81066ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 81066d2:	68fb      	ldr	r3, [r7, #12]
 81066d4:	681b      	ldr	r3, [r3, #0]
 81066d6:	3308      	adds	r3, #8
 81066d8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81066da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81066dc:	e853 3f00 	ldrex	r3, [r3]
 81066e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 81066e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81066e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 81066e8:	63bb      	str	r3, [r7, #56]	; 0x38
 81066ea:	68fb      	ldr	r3, [r7, #12]
 81066ec:	681b      	ldr	r3, [r3, #0]
 81066ee:	3308      	adds	r3, #8
 81066f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 81066f2:	637a      	str	r2, [r7, #52]	; 0x34
 81066f4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81066f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 81066f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81066fa:	e841 2300 	strex	r3, r2, [r1]
 81066fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8106700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106702:	2b00      	cmp	r3, #0
 8106704:	d1e5      	bne.n	81066d2 <HAL_UART_Transmit_IT+0x9e>
 8106706:	e02c      	b.n	8106762 <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8106708:	68fb      	ldr	r3, [r7, #12]
 810670a:	689b      	ldr	r3, [r3, #8]
 810670c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106710:	d107      	bne.n	8106722 <HAL_UART_Transmit_IT+0xee>
 8106712:	68fb      	ldr	r3, [r7, #12]
 8106714:	691b      	ldr	r3, [r3, #16]
 8106716:	2b00      	cmp	r3, #0
 8106718:	d103      	bne.n	8106722 <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 810671a:	68fb      	ldr	r3, [r7, #12]
 810671c:	4a17      	ldr	r2, [pc, #92]	; (810677c <HAL_UART_Transmit_IT+0x148>)
 810671e:	675a      	str	r2, [r3, #116]	; 0x74
 8106720:	e002      	b.n	8106728 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8106722:	68fb      	ldr	r3, [r7, #12]
 8106724:	4a16      	ldr	r2, [pc, #88]	; (8106780 <HAL_UART_Transmit_IT+0x14c>)
 8106726:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8106728:	68fb      	ldr	r3, [r7, #12]
 810672a:	2200      	movs	r2, #0
 810672c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8106730:	68fb      	ldr	r3, [r7, #12]
 8106732:	681b      	ldr	r3, [r3, #0]
 8106734:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106736:	697b      	ldr	r3, [r7, #20]
 8106738:	e853 3f00 	ldrex	r3, [r3]
 810673c:	613b      	str	r3, [r7, #16]
   return(result);
 810673e:	693b      	ldr	r3, [r7, #16]
 8106740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8106744:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106746:	68fb      	ldr	r3, [r7, #12]
 8106748:	681b      	ldr	r3, [r3, #0]
 810674a:	461a      	mov	r2, r3
 810674c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810674e:	623b      	str	r3, [r7, #32]
 8106750:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106752:	69f9      	ldr	r1, [r7, #28]
 8106754:	6a3a      	ldr	r2, [r7, #32]
 8106756:	e841 2300 	strex	r3, r2, [r1]
 810675a:	61bb      	str	r3, [r7, #24]
   return(result);
 810675c:	69bb      	ldr	r3, [r7, #24]
 810675e:	2b00      	cmp	r3, #0
 8106760:	d1e6      	bne.n	8106730 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 8106762:	2300      	movs	r3, #0
 8106764:	e000      	b.n	8106768 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 8106766:	2302      	movs	r3, #2
  }
}
 8106768:	4618      	mov	r0, r3
 810676a:	3744      	adds	r7, #68	; 0x44
 810676c:	46bd      	mov	sp, r7
 810676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106772:	4770      	bx	lr
 8106774:	0810837b 	.word	0x0810837b
 8106778:	0810829b 	.word	0x0810829b
 810677c:	081081d9 	.word	0x081081d9
 8106780:	08108121 	.word	0x08108121

08106784 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8106784:	b580      	push	{r7, lr}
 8106786:	b08a      	sub	sp, #40	; 0x28
 8106788:	af00      	add	r7, sp, #0
 810678a:	60f8      	str	r0, [r7, #12]
 810678c:	60b9      	str	r1, [r7, #8]
 810678e:	4613      	mov	r3, r2
 8106790:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8106792:	68fb      	ldr	r3, [r7, #12]
 8106794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8106798:	2b20      	cmp	r3, #32
 810679a:	d142      	bne.n	8106822 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 810679c:	68bb      	ldr	r3, [r7, #8]
 810679e:	2b00      	cmp	r3, #0
 81067a0:	d002      	beq.n	81067a8 <HAL_UART_Receive_IT+0x24>
 81067a2:	88fb      	ldrh	r3, [r7, #6]
 81067a4:	2b00      	cmp	r3, #0
 81067a6:	d101      	bne.n	81067ac <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 81067a8:	2301      	movs	r3, #1
 81067aa:	e03b      	b.n	8106824 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 81067ac:	68fb      	ldr	r3, [r7, #12]
 81067ae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 81067b2:	2b01      	cmp	r3, #1
 81067b4:	d101      	bne.n	81067ba <HAL_UART_Receive_IT+0x36>
 81067b6:	2302      	movs	r3, #2
 81067b8:	e034      	b.n	8106824 <HAL_UART_Receive_IT+0xa0>
 81067ba:	68fb      	ldr	r3, [r7, #12]
 81067bc:	2201      	movs	r2, #1
 81067be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 81067c2:	68fb      	ldr	r3, [r7, #12]
 81067c4:	2200      	movs	r2, #0
 81067c6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 81067c8:	68fb      	ldr	r3, [r7, #12]
 81067ca:	681b      	ldr	r3, [r3, #0]
 81067cc:	4a17      	ldr	r2, [pc, #92]	; (810682c <HAL_UART_Receive_IT+0xa8>)
 81067ce:	4293      	cmp	r3, r2
 81067d0:	d01f      	beq.n	8106812 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 81067d2:	68fb      	ldr	r3, [r7, #12]
 81067d4:	681b      	ldr	r3, [r3, #0]
 81067d6:	685b      	ldr	r3, [r3, #4]
 81067d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 81067dc:	2b00      	cmp	r3, #0
 81067de:	d018      	beq.n	8106812 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 81067e0:	68fb      	ldr	r3, [r7, #12]
 81067e2:	681b      	ldr	r3, [r3, #0]
 81067e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81067e6:	697b      	ldr	r3, [r7, #20]
 81067e8:	e853 3f00 	ldrex	r3, [r3]
 81067ec:	613b      	str	r3, [r7, #16]
   return(result);
 81067ee:	693b      	ldr	r3, [r7, #16]
 81067f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 81067f4:	627b      	str	r3, [r7, #36]	; 0x24
 81067f6:	68fb      	ldr	r3, [r7, #12]
 81067f8:	681b      	ldr	r3, [r3, #0]
 81067fa:	461a      	mov	r2, r3
 81067fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81067fe:	623b      	str	r3, [r7, #32]
 8106800:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106802:	69f9      	ldr	r1, [r7, #28]
 8106804:	6a3a      	ldr	r2, [r7, #32]
 8106806:	e841 2300 	strex	r3, r2, [r1]
 810680a:	61bb      	str	r3, [r7, #24]
   return(result);
 810680c:	69bb      	ldr	r3, [r7, #24]
 810680e:	2b00      	cmp	r3, #0
 8106810:	d1e6      	bne.n	81067e0 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8106812:	88fb      	ldrh	r3, [r7, #6]
 8106814:	461a      	mov	r2, r3
 8106816:	68b9      	ldr	r1, [r7, #8]
 8106818:	68f8      	ldr	r0, [r7, #12]
 810681a:	f001 fadb 	bl	8107dd4 <UART_Start_Receive_IT>
 810681e:	4603      	mov	r3, r0
 8106820:	e000      	b.n	8106824 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8106822:	2302      	movs	r3, #2
  }
}
 8106824:	4618      	mov	r0, r3
 8106826:	3728      	adds	r7, #40	; 0x28
 8106828:	46bd      	mov	sp, r7
 810682a:	bd80      	pop	{r7, pc}
 810682c:	58000c00 	.word	0x58000c00

08106830 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8106830:	b580      	push	{r7, lr}
 8106832:	b0ba      	sub	sp, #232	; 0xe8
 8106834:	af00      	add	r7, sp, #0
 8106836:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8106838:	687b      	ldr	r3, [r7, #4]
 810683a:	681b      	ldr	r3, [r3, #0]
 810683c:	69db      	ldr	r3, [r3, #28]
 810683e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8106842:	687b      	ldr	r3, [r7, #4]
 8106844:	681b      	ldr	r3, [r3, #0]
 8106846:	681b      	ldr	r3, [r3, #0]
 8106848:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 810684c:	687b      	ldr	r3, [r7, #4]
 810684e:	681b      	ldr	r3, [r3, #0]
 8106850:	689b      	ldr	r3, [r3, #8]
 8106852:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8106856:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 810685a:	f640 030f 	movw	r3, #2063	; 0x80f
 810685e:	4013      	ands	r3, r2
 8106860:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8106864:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8106868:	2b00      	cmp	r3, #0
 810686a:	d11b      	bne.n	81068a4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 810686c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8106870:	f003 0320 	and.w	r3, r3, #32
 8106874:	2b00      	cmp	r3, #0
 8106876:	d015      	beq.n	81068a4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8106878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 810687c:	f003 0320 	and.w	r3, r3, #32
 8106880:	2b00      	cmp	r3, #0
 8106882:	d105      	bne.n	8106890 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8106884:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8106888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810688c:	2b00      	cmp	r3, #0
 810688e:	d009      	beq.n	81068a4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8106890:	687b      	ldr	r3, [r7, #4]
 8106892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8106894:	2b00      	cmp	r3, #0
 8106896:	f000 835c 	beq.w	8106f52 <HAL_UART_IRQHandler+0x722>
      {
        huart->RxISR(huart);
 810689a:	687b      	ldr	r3, [r7, #4]
 810689c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810689e:	6878      	ldr	r0, [r7, #4]
 81068a0:	4798      	blx	r3
      }
      return;
 81068a2:	e356      	b.n	8106f52 <HAL_UART_IRQHandler+0x722>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 81068a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 81068a8:	2b00      	cmp	r3, #0
 81068aa:	f000 811f 	beq.w	8106aec <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 81068ae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 81068b2:	4b8b      	ldr	r3, [pc, #556]	; (8106ae0 <HAL_UART_IRQHandler+0x2b0>)
 81068b4:	4013      	ands	r3, r2
 81068b6:	2b00      	cmp	r3, #0
 81068b8:	d106      	bne.n	81068c8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 81068ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 81068be:	4b89      	ldr	r3, [pc, #548]	; (8106ae4 <HAL_UART_IRQHandler+0x2b4>)
 81068c0:	4013      	ands	r3, r2
 81068c2:	2b00      	cmp	r3, #0
 81068c4:	f000 8112 	beq.w	8106aec <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 81068c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 81068cc:	f003 0301 	and.w	r3, r3, #1
 81068d0:	2b00      	cmp	r3, #0
 81068d2:	d011      	beq.n	81068f8 <HAL_UART_IRQHandler+0xc8>
 81068d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 81068d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81068dc:	2b00      	cmp	r3, #0
 81068de:	d00b      	beq.n	81068f8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 81068e0:	687b      	ldr	r3, [r7, #4]
 81068e2:	681b      	ldr	r3, [r3, #0]
 81068e4:	2201      	movs	r2, #1
 81068e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 81068e8:	687b      	ldr	r3, [r7, #4]
 81068ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81068ee:	f043 0201 	orr.w	r2, r3, #1
 81068f2:	687b      	ldr	r3, [r7, #4]
 81068f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 81068f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 81068fc:	f003 0302 	and.w	r3, r3, #2
 8106900:	2b00      	cmp	r3, #0
 8106902:	d011      	beq.n	8106928 <HAL_UART_IRQHandler+0xf8>
 8106904:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8106908:	f003 0301 	and.w	r3, r3, #1
 810690c:	2b00      	cmp	r3, #0
 810690e:	d00b      	beq.n	8106928 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8106910:	687b      	ldr	r3, [r7, #4]
 8106912:	681b      	ldr	r3, [r3, #0]
 8106914:	2202      	movs	r2, #2
 8106916:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8106918:	687b      	ldr	r3, [r7, #4]
 810691a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810691e:	f043 0204 	orr.w	r2, r3, #4
 8106922:	687b      	ldr	r3, [r7, #4]
 8106924:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8106928:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 810692c:	f003 0304 	and.w	r3, r3, #4
 8106930:	2b00      	cmp	r3, #0
 8106932:	d011      	beq.n	8106958 <HAL_UART_IRQHandler+0x128>
 8106934:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8106938:	f003 0301 	and.w	r3, r3, #1
 810693c:	2b00      	cmp	r3, #0
 810693e:	d00b      	beq.n	8106958 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8106940:	687b      	ldr	r3, [r7, #4]
 8106942:	681b      	ldr	r3, [r3, #0]
 8106944:	2204      	movs	r2, #4
 8106946:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8106948:	687b      	ldr	r3, [r7, #4]
 810694a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810694e:	f043 0202 	orr.w	r2, r3, #2
 8106952:	687b      	ldr	r3, [r7, #4]
 8106954:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8106958:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 810695c:	f003 0308 	and.w	r3, r3, #8
 8106960:	2b00      	cmp	r3, #0
 8106962:	d017      	beq.n	8106994 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8106964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8106968:	f003 0320 	and.w	r3, r3, #32
 810696c:	2b00      	cmp	r3, #0
 810696e:	d105      	bne.n	810697c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8106970:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8106974:	4b5a      	ldr	r3, [pc, #360]	; (8106ae0 <HAL_UART_IRQHandler+0x2b0>)
 8106976:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8106978:	2b00      	cmp	r3, #0
 810697a:	d00b      	beq.n	8106994 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810697c:	687b      	ldr	r3, [r7, #4]
 810697e:	681b      	ldr	r3, [r3, #0]
 8106980:	2208      	movs	r2, #8
 8106982:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8106984:	687b      	ldr	r3, [r7, #4]
 8106986:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810698a:	f043 0208 	orr.w	r2, r3, #8
 810698e:	687b      	ldr	r3, [r7, #4]
 8106990:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8106994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8106998:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810699c:	2b00      	cmp	r3, #0
 810699e:	d012      	beq.n	81069c6 <HAL_UART_IRQHandler+0x196>
 81069a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 81069a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 81069a8:	2b00      	cmp	r3, #0
 81069aa:	d00c      	beq.n	81069c6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 81069ac:	687b      	ldr	r3, [r7, #4]
 81069ae:	681b      	ldr	r3, [r3, #0]
 81069b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 81069b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 81069b6:	687b      	ldr	r3, [r7, #4]
 81069b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81069bc:	f043 0220 	orr.w	r2, r3, #32
 81069c0:	687b      	ldr	r3, [r7, #4]
 81069c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 81069c6:	687b      	ldr	r3, [r7, #4]
 81069c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81069cc:	2b00      	cmp	r3, #0
 81069ce:	f000 82c2 	beq.w	8106f56 <HAL_UART_IRQHandler+0x726>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 81069d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 81069d6:	f003 0320 	and.w	r3, r3, #32
 81069da:	2b00      	cmp	r3, #0
 81069dc:	d013      	beq.n	8106a06 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 81069de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 81069e2:	f003 0320 	and.w	r3, r3, #32
 81069e6:	2b00      	cmp	r3, #0
 81069e8:	d105      	bne.n	81069f6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 81069ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 81069ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 81069f2:	2b00      	cmp	r3, #0
 81069f4:	d007      	beq.n	8106a06 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 81069f6:	687b      	ldr	r3, [r7, #4]
 81069f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81069fa:	2b00      	cmp	r3, #0
 81069fc:	d003      	beq.n	8106a06 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 81069fe:	687b      	ldr	r3, [r7, #4]
 8106a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8106a02:	6878      	ldr	r0, [r7, #4]
 8106a04:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8106a06:	687b      	ldr	r3, [r7, #4]
 8106a08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8106a0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8106a10:	687b      	ldr	r3, [r7, #4]
 8106a12:	681b      	ldr	r3, [r3, #0]
 8106a14:	689b      	ldr	r3, [r3, #8]
 8106a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106a1a:	2b40      	cmp	r3, #64	; 0x40
 8106a1c:	d005      	beq.n	8106a2a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8106a1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8106a22:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8106a26:	2b00      	cmp	r3, #0
 8106a28:	d04f      	beq.n	8106aca <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8106a2a:	6878      	ldr	r0, [r7, #4]
 8106a2c:	f001 fafc 	bl	8108028 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8106a30:	687b      	ldr	r3, [r7, #4]
 8106a32:	681b      	ldr	r3, [r3, #0]
 8106a34:	689b      	ldr	r3, [r3, #8]
 8106a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106a3a:	2b40      	cmp	r3, #64	; 0x40
 8106a3c:	d141      	bne.n	8106ac2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8106a3e:	687b      	ldr	r3, [r7, #4]
 8106a40:	681b      	ldr	r3, [r3, #0]
 8106a42:	3308      	adds	r3, #8
 8106a44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106a48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8106a4c:	e853 3f00 	ldrex	r3, [r3]
 8106a50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8106a54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8106a58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8106a5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8106a60:	687b      	ldr	r3, [r7, #4]
 8106a62:	681b      	ldr	r3, [r3, #0]
 8106a64:	3308      	adds	r3, #8
 8106a66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8106a6a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8106a6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106a72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8106a76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8106a7a:	e841 2300 	strex	r3, r2, [r1]
 8106a7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8106a82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8106a86:	2b00      	cmp	r3, #0
 8106a88:	d1d9      	bne.n	8106a3e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8106a8a:	687b      	ldr	r3, [r7, #4]
 8106a8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106a8e:	2b00      	cmp	r3, #0
 8106a90:	d013      	beq.n	8106aba <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8106a92:	687b      	ldr	r3, [r7, #4]
 8106a94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106a96:	4a14      	ldr	r2, [pc, #80]	; (8106ae8 <HAL_UART_IRQHandler+0x2b8>)
 8106a98:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8106a9a:	687b      	ldr	r3, [r7, #4]
 8106a9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106a9e:	4618      	mov	r0, r3
 8106aa0:	f7fc f91c 	bl	8102cdc <HAL_DMA_Abort_IT>
 8106aa4:	4603      	mov	r3, r0
 8106aa6:	2b00      	cmp	r3, #0
 8106aa8:	d017      	beq.n	8106ada <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8106aaa:	687b      	ldr	r3, [r7, #4]
 8106aac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106aae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106ab0:	687a      	ldr	r2, [r7, #4]
 8106ab2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8106ab4:	4610      	mov	r0, r2
 8106ab6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8106ab8:	e00f      	b.n	8106ada <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8106aba:	6878      	ldr	r0, [r7, #4]
 8106abc:	f000 fa56 	bl	8106f6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8106ac0:	e00b      	b.n	8106ada <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8106ac2:	6878      	ldr	r0, [r7, #4]
 8106ac4:	f000 fa52 	bl	8106f6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8106ac8:	e007      	b.n	8106ada <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8106aca:	6878      	ldr	r0, [r7, #4]
 8106acc:	f000 fa4e 	bl	8106f6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8106ad0:	687b      	ldr	r3, [r7, #4]
 8106ad2:	2200      	movs	r2, #0
 8106ad4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8106ad8:	e23d      	b.n	8106f56 <HAL_UART_IRQHandler+0x726>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8106ada:	bf00      	nop
    return;
 8106adc:	e23b      	b.n	8106f56 <HAL_UART_IRQHandler+0x726>
 8106ade:	bf00      	nop
 8106ae0:	10000001 	.word	0x10000001
 8106ae4:	04000120 	.word	0x04000120
 8106ae8:	081080f5 	.word	0x081080f5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8106aec:	687b      	ldr	r3, [r7, #4]
 8106aee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8106af0:	2b01      	cmp	r3, #1
 8106af2:	f040 81d0 	bne.w	8106e96 <HAL_UART_IRQHandler+0x666>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8106af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8106afa:	f003 0310 	and.w	r3, r3, #16
 8106afe:	2b00      	cmp	r3, #0
 8106b00:	f000 81c9 	beq.w	8106e96 <HAL_UART_IRQHandler+0x666>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8106b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8106b08:	f003 0310 	and.w	r3, r3, #16
 8106b0c:	2b00      	cmp	r3, #0
 8106b0e:	f000 81c2 	beq.w	8106e96 <HAL_UART_IRQHandler+0x666>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8106b12:	687b      	ldr	r3, [r7, #4]
 8106b14:	681b      	ldr	r3, [r3, #0]
 8106b16:	2210      	movs	r2, #16
 8106b18:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8106b1a:	687b      	ldr	r3, [r7, #4]
 8106b1c:	681b      	ldr	r3, [r3, #0]
 8106b1e:	689b      	ldr	r3, [r3, #8]
 8106b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106b24:	2b40      	cmp	r3, #64	; 0x40
 8106b26:	f040 813b 	bne.w	8106da0 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8106b2a:	687b      	ldr	r3, [r7, #4]
 8106b2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106b2e:	681b      	ldr	r3, [r3, #0]
 8106b30:	4a8b      	ldr	r2, [pc, #556]	; (8106d60 <HAL_UART_IRQHandler+0x530>)
 8106b32:	4293      	cmp	r3, r2
 8106b34:	d059      	beq.n	8106bea <HAL_UART_IRQHandler+0x3ba>
 8106b36:	687b      	ldr	r3, [r7, #4]
 8106b38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106b3a:	681b      	ldr	r3, [r3, #0]
 8106b3c:	4a89      	ldr	r2, [pc, #548]	; (8106d64 <HAL_UART_IRQHandler+0x534>)
 8106b3e:	4293      	cmp	r3, r2
 8106b40:	d053      	beq.n	8106bea <HAL_UART_IRQHandler+0x3ba>
 8106b42:	687b      	ldr	r3, [r7, #4]
 8106b44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106b46:	681b      	ldr	r3, [r3, #0]
 8106b48:	4a87      	ldr	r2, [pc, #540]	; (8106d68 <HAL_UART_IRQHandler+0x538>)
 8106b4a:	4293      	cmp	r3, r2
 8106b4c:	d04d      	beq.n	8106bea <HAL_UART_IRQHandler+0x3ba>
 8106b4e:	687b      	ldr	r3, [r7, #4]
 8106b50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106b52:	681b      	ldr	r3, [r3, #0]
 8106b54:	4a85      	ldr	r2, [pc, #532]	; (8106d6c <HAL_UART_IRQHandler+0x53c>)
 8106b56:	4293      	cmp	r3, r2
 8106b58:	d047      	beq.n	8106bea <HAL_UART_IRQHandler+0x3ba>
 8106b5a:	687b      	ldr	r3, [r7, #4]
 8106b5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106b5e:	681b      	ldr	r3, [r3, #0]
 8106b60:	4a83      	ldr	r2, [pc, #524]	; (8106d70 <HAL_UART_IRQHandler+0x540>)
 8106b62:	4293      	cmp	r3, r2
 8106b64:	d041      	beq.n	8106bea <HAL_UART_IRQHandler+0x3ba>
 8106b66:	687b      	ldr	r3, [r7, #4]
 8106b68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106b6a:	681b      	ldr	r3, [r3, #0]
 8106b6c:	4a81      	ldr	r2, [pc, #516]	; (8106d74 <HAL_UART_IRQHandler+0x544>)
 8106b6e:	4293      	cmp	r3, r2
 8106b70:	d03b      	beq.n	8106bea <HAL_UART_IRQHandler+0x3ba>
 8106b72:	687b      	ldr	r3, [r7, #4]
 8106b74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106b76:	681b      	ldr	r3, [r3, #0]
 8106b78:	4a7f      	ldr	r2, [pc, #508]	; (8106d78 <HAL_UART_IRQHandler+0x548>)
 8106b7a:	4293      	cmp	r3, r2
 8106b7c:	d035      	beq.n	8106bea <HAL_UART_IRQHandler+0x3ba>
 8106b7e:	687b      	ldr	r3, [r7, #4]
 8106b80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106b82:	681b      	ldr	r3, [r3, #0]
 8106b84:	4a7d      	ldr	r2, [pc, #500]	; (8106d7c <HAL_UART_IRQHandler+0x54c>)
 8106b86:	4293      	cmp	r3, r2
 8106b88:	d02f      	beq.n	8106bea <HAL_UART_IRQHandler+0x3ba>
 8106b8a:	687b      	ldr	r3, [r7, #4]
 8106b8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106b8e:	681b      	ldr	r3, [r3, #0]
 8106b90:	4a7b      	ldr	r2, [pc, #492]	; (8106d80 <HAL_UART_IRQHandler+0x550>)
 8106b92:	4293      	cmp	r3, r2
 8106b94:	d029      	beq.n	8106bea <HAL_UART_IRQHandler+0x3ba>
 8106b96:	687b      	ldr	r3, [r7, #4]
 8106b98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106b9a:	681b      	ldr	r3, [r3, #0]
 8106b9c:	4a79      	ldr	r2, [pc, #484]	; (8106d84 <HAL_UART_IRQHandler+0x554>)
 8106b9e:	4293      	cmp	r3, r2
 8106ba0:	d023      	beq.n	8106bea <HAL_UART_IRQHandler+0x3ba>
 8106ba2:	687b      	ldr	r3, [r7, #4]
 8106ba4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106ba6:	681b      	ldr	r3, [r3, #0]
 8106ba8:	4a77      	ldr	r2, [pc, #476]	; (8106d88 <HAL_UART_IRQHandler+0x558>)
 8106baa:	4293      	cmp	r3, r2
 8106bac:	d01d      	beq.n	8106bea <HAL_UART_IRQHandler+0x3ba>
 8106bae:	687b      	ldr	r3, [r7, #4]
 8106bb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106bb2:	681b      	ldr	r3, [r3, #0]
 8106bb4:	4a75      	ldr	r2, [pc, #468]	; (8106d8c <HAL_UART_IRQHandler+0x55c>)
 8106bb6:	4293      	cmp	r3, r2
 8106bb8:	d017      	beq.n	8106bea <HAL_UART_IRQHandler+0x3ba>
 8106bba:	687b      	ldr	r3, [r7, #4]
 8106bbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106bbe:	681b      	ldr	r3, [r3, #0]
 8106bc0:	4a73      	ldr	r2, [pc, #460]	; (8106d90 <HAL_UART_IRQHandler+0x560>)
 8106bc2:	4293      	cmp	r3, r2
 8106bc4:	d011      	beq.n	8106bea <HAL_UART_IRQHandler+0x3ba>
 8106bc6:	687b      	ldr	r3, [r7, #4]
 8106bc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106bca:	681b      	ldr	r3, [r3, #0]
 8106bcc:	4a71      	ldr	r2, [pc, #452]	; (8106d94 <HAL_UART_IRQHandler+0x564>)
 8106bce:	4293      	cmp	r3, r2
 8106bd0:	d00b      	beq.n	8106bea <HAL_UART_IRQHandler+0x3ba>
 8106bd2:	687b      	ldr	r3, [r7, #4]
 8106bd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106bd6:	681b      	ldr	r3, [r3, #0]
 8106bd8:	4a6f      	ldr	r2, [pc, #444]	; (8106d98 <HAL_UART_IRQHandler+0x568>)
 8106bda:	4293      	cmp	r3, r2
 8106bdc:	d005      	beq.n	8106bea <HAL_UART_IRQHandler+0x3ba>
 8106bde:	687b      	ldr	r3, [r7, #4]
 8106be0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106be2:	681b      	ldr	r3, [r3, #0]
 8106be4:	4a6d      	ldr	r2, [pc, #436]	; (8106d9c <HAL_UART_IRQHandler+0x56c>)
 8106be6:	4293      	cmp	r3, r2
 8106be8:	d105      	bne.n	8106bf6 <HAL_UART_IRQHandler+0x3c6>
 8106bea:	687b      	ldr	r3, [r7, #4]
 8106bec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106bee:	681b      	ldr	r3, [r3, #0]
 8106bf0:	685b      	ldr	r3, [r3, #4]
 8106bf2:	b29b      	uxth	r3, r3
 8106bf4:	e004      	b.n	8106c00 <HAL_UART_IRQHandler+0x3d0>
 8106bf6:	687b      	ldr	r3, [r7, #4]
 8106bf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106bfa:	681b      	ldr	r3, [r3, #0]
 8106bfc:	685b      	ldr	r3, [r3, #4]
 8106bfe:	b29b      	uxth	r3, r3
 8106c00:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8106c04:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8106c08:	2b00      	cmp	r3, #0
 8106c0a:	f000 81a6 	beq.w	8106f5a <HAL_UART_IRQHandler+0x72a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8106c0e:	687b      	ldr	r3, [r7, #4]
 8106c10:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8106c14:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8106c18:	429a      	cmp	r2, r3
 8106c1a:	f080 819e 	bcs.w	8106f5a <HAL_UART_IRQHandler+0x72a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8106c1e:	687b      	ldr	r3, [r7, #4]
 8106c20:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8106c24:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8106c28:	687b      	ldr	r3, [r7, #4]
 8106c2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106c2c:	69db      	ldr	r3, [r3, #28]
 8106c2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106c32:	f000 8086 	beq.w	8106d42 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8106c36:	687b      	ldr	r3, [r7, #4]
 8106c38:	681b      	ldr	r3, [r3, #0]
 8106c3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106c3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8106c42:	e853 3f00 	ldrex	r3, [r3]
 8106c46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8106c4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8106c4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8106c52:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8106c56:	687b      	ldr	r3, [r7, #4]
 8106c58:	681b      	ldr	r3, [r3, #0]
 8106c5a:	461a      	mov	r2, r3
 8106c5c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8106c60:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8106c64:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106c68:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8106c6c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8106c70:	e841 2300 	strex	r3, r2, [r1]
 8106c74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8106c78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8106c7c:	2b00      	cmp	r3, #0
 8106c7e:	d1da      	bne.n	8106c36 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8106c80:	687b      	ldr	r3, [r7, #4]
 8106c82:	681b      	ldr	r3, [r3, #0]
 8106c84:	3308      	adds	r3, #8
 8106c86:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106c88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8106c8a:	e853 3f00 	ldrex	r3, [r3]
 8106c8e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8106c90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8106c92:	f023 0301 	bic.w	r3, r3, #1
 8106c96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8106c9a:	687b      	ldr	r3, [r7, #4]
 8106c9c:	681b      	ldr	r3, [r3, #0]
 8106c9e:	3308      	adds	r3, #8
 8106ca0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8106ca4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8106ca8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106caa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8106cac:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8106cb0:	e841 2300 	strex	r3, r2, [r1]
 8106cb4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8106cb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8106cb8:	2b00      	cmp	r3, #0
 8106cba:	d1e1      	bne.n	8106c80 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8106cbc:	687b      	ldr	r3, [r7, #4]
 8106cbe:	681b      	ldr	r3, [r3, #0]
 8106cc0:	3308      	adds	r3, #8
 8106cc2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106cc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8106cc6:	e853 3f00 	ldrex	r3, [r3]
 8106cca:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8106ccc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8106cce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8106cd2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8106cd6:	687b      	ldr	r3, [r7, #4]
 8106cd8:	681b      	ldr	r3, [r3, #0]
 8106cda:	3308      	adds	r3, #8
 8106cdc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8106ce0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8106ce2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106ce4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8106ce6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8106ce8:	e841 2300 	strex	r3, r2, [r1]
 8106cec:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8106cee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8106cf0:	2b00      	cmp	r3, #0
 8106cf2:	d1e3      	bne.n	8106cbc <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8106cf4:	687b      	ldr	r3, [r7, #4]
 8106cf6:	2220      	movs	r2, #32
 8106cf8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8106cfc:	687b      	ldr	r3, [r7, #4]
 8106cfe:	2200      	movs	r2, #0
 8106d00:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8106d02:	687b      	ldr	r3, [r7, #4]
 8106d04:	681b      	ldr	r3, [r3, #0]
 8106d06:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106d08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8106d0a:	e853 3f00 	ldrex	r3, [r3]
 8106d0e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8106d10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8106d12:	f023 0310 	bic.w	r3, r3, #16
 8106d16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8106d1a:	687b      	ldr	r3, [r7, #4]
 8106d1c:	681b      	ldr	r3, [r3, #0]
 8106d1e:	461a      	mov	r2, r3
 8106d20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8106d24:	65bb      	str	r3, [r7, #88]	; 0x58
 8106d26:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106d28:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8106d2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8106d2c:	e841 2300 	strex	r3, r2, [r1]
 8106d30:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8106d32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8106d34:	2b00      	cmp	r3, #0
 8106d36:	d1e4      	bne.n	8106d02 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8106d38:	687b      	ldr	r3, [r7, #4]
 8106d3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106d3c:	4618      	mov	r0, r3
 8106d3e:	f7fb fcaf 	bl	81026a0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8106d42:	687b      	ldr	r3, [r7, #4]
 8106d44:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8106d48:	687b      	ldr	r3, [r7, #4]
 8106d4a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8106d4e:	b29b      	uxth	r3, r3
 8106d50:	1ad3      	subs	r3, r2, r3
 8106d52:	b29b      	uxth	r3, r3
 8106d54:	4619      	mov	r1, r3
 8106d56:	6878      	ldr	r0, [r7, #4]
 8106d58:	f000 f912 	bl	8106f80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8106d5c:	e0fd      	b.n	8106f5a <HAL_UART_IRQHandler+0x72a>
 8106d5e:	bf00      	nop
 8106d60:	40020010 	.word	0x40020010
 8106d64:	40020028 	.word	0x40020028
 8106d68:	40020040 	.word	0x40020040
 8106d6c:	40020058 	.word	0x40020058
 8106d70:	40020070 	.word	0x40020070
 8106d74:	40020088 	.word	0x40020088
 8106d78:	400200a0 	.word	0x400200a0
 8106d7c:	400200b8 	.word	0x400200b8
 8106d80:	40020410 	.word	0x40020410
 8106d84:	40020428 	.word	0x40020428
 8106d88:	40020440 	.word	0x40020440
 8106d8c:	40020458 	.word	0x40020458
 8106d90:	40020470 	.word	0x40020470
 8106d94:	40020488 	.word	0x40020488
 8106d98:	400204a0 	.word	0x400204a0
 8106d9c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8106da0:	687b      	ldr	r3, [r7, #4]
 8106da2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8106da6:	687b      	ldr	r3, [r7, #4]
 8106da8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8106dac:	b29b      	uxth	r3, r3
 8106dae:	1ad3      	subs	r3, r2, r3
 8106db0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8106db4:	687b      	ldr	r3, [r7, #4]
 8106db6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8106dba:	b29b      	uxth	r3, r3
 8106dbc:	2b00      	cmp	r3, #0
 8106dbe:	f000 80ce 	beq.w	8106f5e <HAL_UART_IRQHandler+0x72e>
          && (nb_rx_data > 0U))
 8106dc2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8106dc6:	2b00      	cmp	r3, #0
 8106dc8:	f000 80c9 	beq.w	8106f5e <HAL_UART_IRQHandler+0x72e>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8106dcc:	687b      	ldr	r3, [r7, #4]
 8106dce:	681b      	ldr	r3, [r3, #0]
 8106dd0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106dd4:	e853 3f00 	ldrex	r3, [r3]
 8106dd8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8106dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106ddc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8106de0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8106de4:	687b      	ldr	r3, [r7, #4]
 8106de6:	681b      	ldr	r3, [r3, #0]
 8106de8:	461a      	mov	r2, r3
 8106dea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8106dee:	647b      	str	r3, [r7, #68]	; 0x44
 8106df0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106df2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8106df4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8106df6:	e841 2300 	strex	r3, r2, [r1]
 8106dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8106dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8106dfe:	2b00      	cmp	r3, #0
 8106e00:	d1e4      	bne.n	8106dcc <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8106e02:	687b      	ldr	r3, [r7, #4]
 8106e04:	681b      	ldr	r3, [r3, #0]
 8106e06:	3308      	adds	r3, #8
 8106e08:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106e0c:	e853 3f00 	ldrex	r3, [r3]
 8106e10:	623b      	str	r3, [r7, #32]
   return(result);
 8106e12:	6a3b      	ldr	r3, [r7, #32]
 8106e14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8106e18:	f023 0301 	bic.w	r3, r3, #1
 8106e1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8106e20:	687b      	ldr	r3, [r7, #4]
 8106e22:	681b      	ldr	r3, [r3, #0]
 8106e24:	3308      	adds	r3, #8
 8106e26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8106e2a:	633a      	str	r2, [r7, #48]	; 0x30
 8106e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106e2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8106e30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8106e32:	e841 2300 	strex	r3, r2, [r1]
 8106e36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8106e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106e3a:	2b00      	cmp	r3, #0
 8106e3c:	d1e1      	bne.n	8106e02 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8106e3e:	687b      	ldr	r3, [r7, #4]
 8106e40:	2220      	movs	r2, #32
 8106e42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8106e46:	687b      	ldr	r3, [r7, #4]
 8106e48:	2200      	movs	r2, #0
 8106e4a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8106e4c:	687b      	ldr	r3, [r7, #4]
 8106e4e:	2200      	movs	r2, #0
 8106e50:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8106e52:	687b      	ldr	r3, [r7, #4]
 8106e54:	681b      	ldr	r3, [r3, #0]
 8106e56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106e58:	693b      	ldr	r3, [r7, #16]
 8106e5a:	e853 3f00 	ldrex	r3, [r3]
 8106e5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8106e60:	68fb      	ldr	r3, [r7, #12]
 8106e62:	f023 0310 	bic.w	r3, r3, #16
 8106e66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8106e6a:	687b      	ldr	r3, [r7, #4]
 8106e6c:	681b      	ldr	r3, [r3, #0]
 8106e6e:	461a      	mov	r2, r3
 8106e70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8106e74:	61fb      	str	r3, [r7, #28]
 8106e76:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106e78:	69b9      	ldr	r1, [r7, #24]
 8106e7a:	69fa      	ldr	r2, [r7, #28]
 8106e7c:	e841 2300 	strex	r3, r2, [r1]
 8106e80:	617b      	str	r3, [r7, #20]
   return(result);
 8106e82:	697b      	ldr	r3, [r7, #20]
 8106e84:	2b00      	cmp	r3, #0
 8106e86:	d1e4      	bne.n	8106e52 <HAL_UART_IRQHandler+0x622>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8106e88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8106e8c:	4619      	mov	r1, r3
 8106e8e:	6878      	ldr	r0, [r7, #4]
 8106e90:	f000 f876 	bl	8106f80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8106e94:	e063      	b.n	8106f5e <HAL_UART_IRQHandler+0x72e>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8106e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8106e9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8106e9e:	2b00      	cmp	r3, #0
 8106ea0:	d00e      	beq.n	8106ec0 <HAL_UART_IRQHandler+0x690>
 8106ea2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8106ea6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8106eaa:	2b00      	cmp	r3, #0
 8106eac:	d008      	beq.n	8106ec0 <HAL_UART_IRQHandler+0x690>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8106eae:	687b      	ldr	r3, [r7, #4]
 8106eb0:	681b      	ldr	r3, [r3, #0]
 8106eb2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8106eb6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8106eb8:	6878      	ldr	r0, [r7, #4]
 8106eba:	f001 ff5b 	bl	8108d74 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8106ebe:	e051      	b.n	8106f64 <HAL_UART_IRQHandler+0x734>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8106ec0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8106ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8106ec8:	2b00      	cmp	r3, #0
 8106eca:	d014      	beq.n	8106ef6 <HAL_UART_IRQHandler+0x6c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8106ecc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8106ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8106ed4:	2b00      	cmp	r3, #0
 8106ed6:	d105      	bne.n	8106ee4 <HAL_UART_IRQHandler+0x6b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8106ed8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8106edc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8106ee0:	2b00      	cmp	r3, #0
 8106ee2:	d008      	beq.n	8106ef6 <HAL_UART_IRQHandler+0x6c6>
  {
    if (huart->TxISR != NULL)
 8106ee4:	687b      	ldr	r3, [r7, #4]
 8106ee6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8106ee8:	2b00      	cmp	r3, #0
 8106eea:	d03a      	beq.n	8106f62 <HAL_UART_IRQHandler+0x732>
    {
      huart->TxISR(huart);
 8106eec:	687b      	ldr	r3, [r7, #4]
 8106eee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8106ef0:	6878      	ldr	r0, [r7, #4]
 8106ef2:	4798      	blx	r3
    }
    return;
 8106ef4:	e035      	b.n	8106f62 <HAL_UART_IRQHandler+0x732>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8106ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8106efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106efe:	2b00      	cmp	r3, #0
 8106f00:	d009      	beq.n	8106f16 <HAL_UART_IRQHandler+0x6e6>
 8106f02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8106f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106f0a:	2b00      	cmp	r3, #0
 8106f0c:	d003      	beq.n	8106f16 <HAL_UART_IRQHandler+0x6e6>
  {
    UART_EndTransmit_IT(huart);
 8106f0e:	6878      	ldr	r0, [r7, #4]
 8106f10:	f001 faa8 	bl	8108464 <UART_EndTransmit_IT>
    return;
 8106f14:	e026      	b.n	8106f64 <HAL_UART_IRQHandler+0x734>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8106f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8106f1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8106f1e:	2b00      	cmp	r3, #0
 8106f20:	d009      	beq.n	8106f36 <HAL_UART_IRQHandler+0x706>
 8106f22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8106f26:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8106f2a:	2b00      	cmp	r3, #0
 8106f2c:	d003      	beq.n	8106f36 <HAL_UART_IRQHandler+0x706>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8106f2e:	6878      	ldr	r0, [r7, #4]
 8106f30:	f001 ff34 	bl	8108d9c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8106f34:	e016      	b.n	8106f64 <HAL_UART_IRQHandler+0x734>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8106f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8106f3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8106f3e:	2b00      	cmp	r3, #0
 8106f40:	d010      	beq.n	8106f64 <HAL_UART_IRQHandler+0x734>
 8106f42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8106f46:	2b00      	cmp	r3, #0
 8106f48:	da0c      	bge.n	8106f64 <HAL_UART_IRQHandler+0x734>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8106f4a:	6878      	ldr	r0, [r7, #4]
 8106f4c:	f001 ff1c 	bl	8108d88 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8106f50:	e008      	b.n	8106f64 <HAL_UART_IRQHandler+0x734>
      return;
 8106f52:	bf00      	nop
 8106f54:	e006      	b.n	8106f64 <HAL_UART_IRQHandler+0x734>
    return;
 8106f56:	bf00      	nop
 8106f58:	e004      	b.n	8106f64 <HAL_UART_IRQHandler+0x734>
      return;
 8106f5a:	bf00      	nop
 8106f5c:	e002      	b.n	8106f64 <HAL_UART_IRQHandler+0x734>
      return;
 8106f5e:	bf00      	nop
 8106f60:	e000      	b.n	8106f64 <HAL_UART_IRQHandler+0x734>
    return;
 8106f62:	bf00      	nop
  }
}
 8106f64:	37e8      	adds	r7, #232	; 0xe8
 8106f66:	46bd      	mov	sp, r7
 8106f68:	bd80      	pop	{r7, pc}
 8106f6a:	bf00      	nop

08106f6c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8106f6c:	b480      	push	{r7}
 8106f6e:	b083      	sub	sp, #12
 8106f70:	af00      	add	r7, sp, #0
 8106f72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8106f74:	bf00      	nop
 8106f76:	370c      	adds	r7, #12
 8106f78:	46bd      	mov	sp, r7
 8106f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106f7e:	4770      	bx	lr

08106f80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8106f80:	b480      	push	{r7}
 8106f82:	b083      	sub	sp, #12
 8106f84:	af00      	add	r7, sp, #0
 8106f86:	6078      	str	r0, [r7, #4]
 8106f88:	460b      	mov	r3, r1
 8106f8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8106f8c:	bf00      	nop
 8106f8e:	370c      	adds	r7, #12
 8106f90:	46bd      	mov	sp, r7
 8106f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106f96:	4770      	bx	lr

08106f98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8106f98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8106f9c:	b092      	sub	sp, #72	; 0x48
 8106f9e:	af00      	add	r7, sp, #0
 8106fa0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8106fa2:	2300      	movs	r3, #0
 8106fa4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8106fa8:	697b      	ldr	r3, [r7, #20]
 8106faa:	689a      	ldr	r2, [r3, #8]
 8106fac:	697b      	ldr	r3, [r7, #20]
 8106fae:	691b      	ldr	r3, [r3, #16]
 8106fb0:	431a      	orrs	r2, r3
 8106fb2:	697b      	ldr	r3, [r7, #20]
 8106fb4:	695b      	ldr	r3, [r3, #20]
 8106fb6:	431a      	orrs	r2, r3
 8106fb8:	697b      	ldr	r3, [r7, #20]
 8106fba:	69db      	ldr	r3, [r3, #28]
 8106fbc:	4313      	orrs	r3, r2
 8106fbe:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8106fc0:	697b      	ldr	r3, [r7, #20]
 8106fc2:	681b      	ldr	r3, [r3, #0]
 8106fc4:	681a      	ldr	r2, [r3, #0]
 8106fc6:	4bbd      	ldr	r3, [pc, #756]	; (81072bc <UART_SetConfig+0x324>)
 8106fc8:	4013      	ands	r3, r2
 8106fca:	697a      	ldr	r2, [r7, #20]
 8106fcc:	6812      	ldr	r2, [r2, #0]
 8106fce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8106fd0:	430b      	orrs	r3, r1
 8106fd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8106fd4:	697b      	ldr	r3, [r7, #20]
 8106fd6:	681b      	ldr	r3, [r3, #0]
 8106fd8:	685b      	ldr	r3, [r3, #4]
 8106fda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8106fde:	697b      	ldr	r3, [r7, #20]
 8106fe0:	68da      	ldr	r2, [r3, #12]
 8106fe2:	697b      	ldr	r3, [r7, #20]
 8106fe4:	681b      	ldr	r3, [r3, #0]
 8106fe6:	430a      	orrs	r2, r1
 8106fe8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8106fea:	697b      	ldr	r3, [r7, #20]
 8106fec:	699b      	ldr	r3, [r3, #24]
 8106fee:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8106ff0:	697b      	ldr	r3, [r7, #20]
 8106ff2:	681b      	ldr	r3, [r3, #0]
 8106ff4:	4ab2      	ldr	r2, [pc, #712]	; (81072c0 <UART_SetConfig+0x328>)
 8106ff6:	4293      	cmp	r3, r2
 8106ff8:	d004      	beq.n	8107004 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8106ffa:	697b      	ldr	r3, [r7, #20]
 8106ffc:	6a1b      	ldr	r3, [r3, #32]
 8106ffe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8107000:	4313      	orrs	r3, r2
 8107002:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8107004:	697b      	ldr	r3, [r7, #20]
 8107006:	681b      	ldr	r3, [r3, #0]
 8107008:	689b      	ldr	r3, [r3, #8]
 810700a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 810700e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8107012:	697a      	ldr	r2, [r7, #20]
 8107014:	6812      	ldr	r2, [r2, #0]
 8107016:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8107018:	430b      	orrs	r3, r1
 810701a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 810701c:	697b      	ldr	r3, [r7, #20]
 810701e:	681b      	ldr	r3, [r3, #0]
 8107020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107022:	f023 010f 	bic.w	r1, r3, #15
 8107026:	697b      	ldr	r3, [r7, #20]
 8107028:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 810702a:	697b      	ldr	r3, [r7, #20]
 810702c:	681b      	ldr	r3, [r3, #0]
 810702e:	430a      	orrs	r2, r1
 8107030:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8107032:	697b      	ldr	r3, [r7, #20]
 8107034:	681b      	ldr	r3, [r3, #0]
 8107036:	4aa3      	ldr	r2, [pc, #652]	; (81072c4 <UART_SetConfig+0x32c>)
 8107038:	4293      	cmp	r3, r2
 810703a:	d177      	bne.n	810712c <UART_SetConfig+0x194>
 810703c:	4ba2      	ldr	r3, [pc, #648]	; (81072c8 <UART_SetConfig+0x330>)
 810703e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107040:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8107044:	2b28      	cmp	r3, #40	; 0x28
 8107046:	d86d      	bhi.n	8107124 <UART_SetConfig+0x18c>
 8107048:	a201      	add	r2, pc, #4	; (adr r2, 8107050 <UART_SetConfig+0xb8>)
 810704a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810704e:	bf00      	nop
 8107050:	081070f5 	.word	0x081070f5
 8107054:	08107125 	.word	0x08107125
 8107058:	08107125 	.word	0x08107125
 810705c:	08107125 	.word	0x08107125
 8107060:	08107125 	.word	0x08107125
 8107064:	08107125 	.word	0x08107125
 8107068:	08107125 	.word	0x08107125
 810706c:	08107125 	.word	0x08107125
 8107070:	081070fd 	.word	0x081070fd
 8107074:	08107125 	.word	0x08107125
 8107078:	08107125 	.word	0x08107125
 810707c:	08107125 	.word	0x08107125
 8107080:	08107125 	.word	0x08107125
 8107084:	08107125 	.word	0x08107125
 8107088:	08107125 	.word	0x08107125
 810708c:	08107125 	.word	0x08107125
 8107090:	08107105 	.word	0x08107105
 8107094:	08107125 	.word	0x08107125
 8107098:	08107125 	.word	0x08107125
 810709c:	08107125 	.word	0x08107125
 81070a0:	08107125 	.word	0x08107125
 81070a4:	08107125 	.word	0x08107125
 81070a8:	08107125 	.word	0x08107125
 81070ac:	08107125 	.word	0x08107125
 81070b0:	0810710d 	.word	0x0810710d
 81070b4:	08107125 	.word	0x08107125
 81070b8:	08107125 	.word	0x08107125
 81070bc:	08107125 	.word	0x08107125
 81070c0:	08107125 	.word	0x08107125
 81070c4:	08107125 	.word	0x08107125
 81070c8:	08107125 	.word	0x08107125
 81070cc:	08107125 	.word	0x08107125
 81070d0:	08107115 	.word	0x08107115
 81070d4:	08107125 	.word	0x08107125
 81070d8:	08107125 	.word	0x08107125
 81070dc:	08107125 	.word	0x08107125
 81070e0:	08107125 	.word	0x08107125
 81070e4:	08107125 	.word	0x08107125
 81070e8:	08107125 	.word	0x08107125
 81070ec:	08107125 	.word	0x08107125
 81070f0:	0810711d 	.word	0x0810711d
 81070f4:	2301      	movs	r3, #1
 81070f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81070fa:	e220      	b.n	810753e <UART_SetConfig+0x5a6>
 81070fc:	2304      	movs	r3, #4
 81070fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107102:	e21c      	b.n	810753e <UART_SetConfig+0x5a6>
 8107104:	2308      	movs	r3, #8
 8107106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810710a:	e218      	b.n	810753e <UART_SetConfig+0x5a6>
 810710c:	2310      	movs	r3, #16
 810710e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107112:	e214      	b.n	810753e <UART_SetConfig+0x5a6>
 8107114:	2320      	movs	r3, #32
 8107116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810711a:	e210      	b.n	810753e <UART_SetConfig+0x5a6>
 810711c:	2340      	movs	r3, #64	; 0x40
 810711e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107122:	e20c      	b.n	810753e <UART_SetConfig+0x5a6>
 8107124:	2380      	movs	r3, #128	; 0x80
 8107126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810712a:	e208      	b.n	810753e <UART_SetConfig+0x5a6>
 810712c:	697b      	ldr	r3, [r7, #20]
 810712e:	681b      	ldr	r3, [r3, #0]
 8107130:	4a66      	ldr	r2, [pc, #408]	; (81072cc <UART_SetConfig+0x334>)
 8107132:	4293      	cmp	r3, r2
 8107134:	d130      	bne.n	8107198 <UART_SetConfig+0x200>
 8107136:	4b64      	ldr	r3, [pc, #400]	; (81072c8 <UART_SetConfig+0x330>)
 8107138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810713a:	f003 0307 	and.w	r3, r3, #7
 810713e:	2b05      	cmp	r3, #5
 8107140:	d826      	bhi.n	8107190 <UART_SetConfig+0x1f8>
 8107142:	a201      	add	r2, pc, #4	; (adr r2, 8107148 <UART_SetConfig+0x1b0>)
 8107144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107148:	08107161 	.word	0x08107161
 810714c:	08107169 	.word	0x08107169
 8107150:	08107171 	.word	0x08107171
 8107154:	08107179 	.word	0x08107179
 8107158:	08107181 	.word	0x08107181
 810715c:	08107189 	.word	0x08107189
 8107160:	2300      	movs	r3, #0
 8107162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107166:	e1ea      	b.n	810753e <UART_SetConfig+0x5a6>
 8107168:	2304      	movs	r3, #4
 810716a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810716e:	e1e6      	b.n	810753e <UART_SetConfig+0x5a6>
 8107170:	2308      	movs	r3, #8
 8107172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107176:	e1e2      	b.n	810753e <UART_SetConfig+0x5a6>
 8107178:	2310      	movs	r3, #16
 810717a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810717e:	e1de      	b.n	810753e <UART_SetConfig+0x5a6>
 8107180:	2320      	movs	r3, #32
 8107182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107186:	e1da      	b.n	810753e <UART_SetConfig+0x5a6>
 8107188:	2340      	movs	r3, #64	; 0x40
 810718a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810718e:	e1d6      	b.n	810753e <UART_SetConfig+0x5a6>
 8107190:	2380      	movs	r3, #128	; 0x80
 8107192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107196:	e1d2      	b.n	810753e <UART_SetConfig+0x5a6>
 8107198:	697b      	ldr	r3, [r7, #20]
 810719a:	681b      	ldr	r3, [r3, #0]
 810719c:	4a4c      	ldr	r2, [pc, #304]	; (81072d0 <UART_SetConfig+0x338>)
 810719e:	4293      	cmp	r3, r2
 81071a0:	d130      	bne.n	8107204 <UART_SetConfig+0x26c>
 81071a2:	4b49      	ldr	r3, [pc, #292]	; (81072c8 <UART_SetConfig+0x330>)
 81071a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81071a6:	f003 0307 	and.w	r3, r3, #7
 81071aa:	2b05      	cmp	r3, #5
 81071ac:	d826      	bhi.n	81071fc <UART_SetConfig+0x264>
 81071ae:	a201      	add	r2, pc, #4	; (adr r2, 81071b4 <UART_SetConfig+0x21c>)
 81071b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81071b4:	081071cd 	.word	0x081071cd
 81071b8:	081071d5 	.word	0x081071d5
 81071bc:	081071dd 	.word	0x081071dd
 81071c0:	081071e5 	.word	0x081071e5
 81071c4:	081071ed 	.word	0x081071ed
 81071c8:	081071f5 	.word	0x081071f5
 81071cc:	2300      	movs	r3, #0
 81071ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81071d2:	e1b4      	b.n	810753e <UART_SetConfig+0x5a6>
 81071d4:	2304      	movs	r3, #4
 81071d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81071da:	e1b0      	b.n	810753e <UART_SetConfig+0x5a6>
 81071dc:	2308      	movs	r3, #8
 81071de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81071e2:	e1ac      	b.n	810753e <UART_SetConfig+0x5a6>
 81071e4:	2310      	movs	r3, #16
 81071e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81071ea:	e1a8      	b.n	810753e <UART_SetConfig+0x5a6>
 81071ec:	2320      	movs	r3, #32
 81071ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81071f2:	e1a4      	b.n	810753e <UART_SetConfig+0x5a6>
 81071f4:	2340      	movs	r3, #64	; 0x40
 81071f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81071fa:	e1a0      	b.n	810753e <UART_SetConfig+0x5a6>
 81071fc:	2380      	movs	r3, #128	; 0x80
 81071fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107202:	e19c      	b.n	810753e <UART_SetConfig+0x5a6>
 8107204:	697b      	ldr	r3, [r7, #20]
 8107206:	681b      	ldr	r3, [r3, #0]
 8107208:	4a32      	ldr	r2, [pc, #200]	; (81072d4 <UART_SetConfig+0x33c>)
 810720a:	4293      	cmp	r3, r2
 810720c:	d130      	bne.n	8107270 <UART_SetConfig+0x2d8>
 810720e:	4b2e      	ldr	r3, [pc, #184]	; (81072c8 <UART_SetConfig+0x330>)
 8107210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107212:	f003 0307 	and.w	r3, r3, #7
 8107216:	2b05      	cmp	r3, #5
 8107218:	d826      	bhi.n	8107268 <UART_SetConfig+0x2d0>
 810721a:	a201      	add	r2, pc, #4	; (adr r2, 8107220 <UART_SetConfig+0x288>)
 810721c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107220:	08107239 	.word	0x08107239
 8107224:	08107241 	.word	0x08107241
 8107228:	08107249 	.word	0x08107249
 810722c:	08107251 	.word	0x08107251
 8107230:	08107259 	.word	0x08107259
 8107234:	08107261 	.word	0x08107261
 8107238:	2300      	movs	r3, #0
 810723a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810723e:	e17e      	b.n	810753e <UART_SetConfig+0x5a6>
 8107240:	2304      	movs	r3, #4
 8107242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107246:	e17a      	b.n	810753e <UART_SetConfig+0x5a6>
 8107248:	2308      	movs	r3, #8
 810724a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810724e:	e176      	b.n	810753e <UART_SetConfig+0x5a6>
 8107250:	2310      	movs	r3, #16
 8107252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107256:	e172      	b.n	810753e <UART_SetConfig+0x5a6>
 8107258:	2320      	movs	r3, #32
 810725a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810725e:	e16e      	b.n	810753e <UART_SetConfig+0x5a6>
 8107260:	2340      	movs	r3, #64	; 0x40
 8107262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107266:	e16a      	b.n	810753e <UART_SetConfig+0x5a6>
 8107268:	2380      	movs	r3, #128	; 0x80
 810726a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810726e:	e166      	b.n	810753e <UART_SetConfig+0x5a6>
 8107270:	697b      	ldr	r3, [r7, #20]
 8107272:	681b      	ldr	r3, [r3, #0]
 8107274:	4a18      	ldr	r2, [pc, #96]	; (81072d8 <UART_SetConfig+0x340>)
 8107276:	4293      	cmp	r3, r2
 8107278:	d140      	bne.n	81072fc <UART_SetConfig+0x364>
 810727a:	4b13      	ldr	r3, [pc, #76]	; (81072c8 <UART_SetConfig+0x330>)
 810727c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810727e:	f003 0307 	and.w	r3, r3, #7
 8107282:	2b05      	cmp	r3, #5
 8107284:	d836      	bhi.n	81072f4 <UART_SetConfig+0x35c>
 8107286:	a201      	add	r2, pc, #4	; (adr r2, 810728c <UART_SetConfig+0x2f4>)
 8107288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810728c:	081072a5 	.word	0x081072a5
 8107290:	081072ad 	.word	0x081072ad
 8107294:	081072b5 	.word	0x081072b5
 8107298:	081072dd 	.word	0x081072dd
 810729c:	081072e5 	.word	0x081072e5
 81072a0:	081072ed 	.word	0x081072ed
 81072a4:	2300      	movs	r3, #0
 81072a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81072aa:	e148      	b.n	810753e <UART_SetConfig+0x5a6>
 81072ac:	2304      	movs	r3, #4
 81072ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81072b2:	e144      	b.n	810753e <UART_SetConfig+0x5a6>
 81072b4:	2308      	movs	r3, #8
 81072b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81072ba:	e140      	b.n	810753e <UART_SetConfig+0x5a6>
 81072bc:	cfff69f3 	.word	0xcfff69f3
 81072c0:	58000c00 	.word	0x58000c00
 81072c4:	40011000 	.word	0x40011000
 81072c8:	58024400 	.word	0x58024400
 81072cc:	40004400 	.word	0x40004400
 81072d0:	40004800 	.word	0x40004800
 81072d4:	40004c00 	.word	0x40004c00
 81072d8:	40005000 	.word	0x40005000
 81072dc:	2310      	movs	r3, #16
 81072de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81072e2:	e12c      	b.n	810753e <UART_SetConfig+0x5a6>
 81072e4:	2320      	movs	r3, #32
 81072e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81072ea:	e128      	b.n	810753e <UART_SetConfig+0x5a6>
 81072ec:	2340      	movs	r3, #64	; 0x40
 81072ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81072f2:	e124      	b.n	810753e <UART_SetConfig+0x5a6>
 81072f4:	2380      	movs	r3, #128	; 0x80
 81072f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81072fa:	e120      	b.n	810753e <UART_SetConfig+0x5a6>
 81072fc:	697b      	ldr	r3, [r7, #20]
 81072fe:	681b      	ldr	r3, [r3, #0]
 8107300:	4acb      	ldr	r2, [pc, #812]	; (8107630 <UART_SetConfig+0x698>)
 8107302:	4293      	cmp	r3, r2
 8107304:	d176      	bne.n	81073f4 <UART_SetConfig+0x45c>
 8107306:	4bcb      	ldr	r3, [pc, #812]	; (8107634 <UART_SetConfig+0x69c>)
 8107308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810730a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810730e:	2b28      	cmp	r3, #40	; 0x28
 8107310:	d86c      	bhi.n	81073ec <UART_SetConfig+0x454>
 8107312:	a201      	add	r2, pc, #4	; (adr r2, 8107318 <UART_SetConfig+0x380>)
 8107314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107318:	081073bd 	.word	0x081073bd
 810731c:	081073ed 	.word	0x081073ed
 8107320:	081073ed 	.word	0x081073ed
 8107324:	081073ed 	.word	0x081073ed
 8107328:	081073ed 	.word	0x081073ed
 810732c:	081073ed 	.word	0x081073ed
 8107330:	081073ed 	.word	0x081073ed
 8107334:	081073ed 	.word	0x081073ed
 8107338:	081073c5 	.word	0x081073c5
 810733c:	081073ed 	.word	0x081073ed
 8107340:	081073ed 	.word	0x081073ed
 8107344:	081073ed 	.word	0x081073ed
 8107348:	081073ed 	.word	0x081073ed
 810734c:	081073ed 	.word	0x081073ed
 8107350:	081073ed 	.word	0x081073ed
 8107354:	081073ed 	.word	0x081073ed
 8107358:	081073cd 	.word	0x081073cd
 810735c:	081073ed 	.word	0x081073ed
 8107360:	081073ed 	.word	0x081073ed
 8107364:	081073ed 	.word	0x081073ed
 8107368:	081073ed 	.word	0x081073ed
 810736c:	081073ed 	.word	0x081073ed
 8107370:	081073ed 	.word	0x081073ed
 8107374:	081073ed 	.word	0x081073ed
 8107378:	081073d5 	.word	0x081073d5
 810737c:	081073ed 	.word	0x081073ed
 8107380:	081073ed 	.word	0x081073ed
 8107384:	081073ed 	.word	0x081073ed
 8107388:	081073ed 	.word	0x081073ed
 810738c:	081073ed 	.word	0x081073ed
 8107390:	081073ed 	.word	0x081073ed
 8107394:	081073ed 	.word	0x081073ed
 8107398:	081073dd 	.word	0x081073dd
 810739c:	081073ed 	.word	0x081073ed
 81073a0:	081073ed 	.word	0x081073ed
 81073a4:	081073ed 	.word	0x081073ed
 81073a8:	081073ed 	.word	0x081073ed
 81073ac:	081073ed 	.word	0x081073ed
 81073b0:	081073ed 	.word	0x081073ed
 81073b4:	081073ed 	.word	0x081073ed
 81073b8:	081073e5 	.word	0x081073e5
 81073bc:	2301      	movs	r3, #1
 81073be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81073c2:	e0bc      	b.n	810753e <UART_SetConfig+0x5a6>
 81073c4:	2304      	movs	r3, #4
 81073c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81073ca:	e0b8      	b.n	810753e <UART_SetConfig+0x5a6>
 81073cc:	2308      	movs	r3, #8
 81073ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81073d2:	e0b4      	b.n	810753e <UART_SetConfig+0x5a6>
 81073d4:	2310      	movs	r3, #16
 81073d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81073da:	e0b0      	b.n	810753e <UART_SetConfig+0x5a6>
 81073dc:	2320      	movs	r3, #32
 81073de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81073e2:	e0ac      	b.n	810753e <UART_SetConfig+0x5a6>
 81073e4:	2340      	movs	r3, #64	; 0x40
 81073e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81073ea:	e0a8      	b.n	810753e <UART_SetConfig+0x5a6>
 81073ec:	2380      	movs	r3, #128	; 0x80
 81073ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81073f2:	e0a4      	b.n	810753e <UART_SetConfig+0x5a6>
 81073f4:	697b      	ldr	r3, [r7, #20]
 81073f6:	681b      	ldr	r3, [r3, #0]
 81073f8:	4a8f      	ldr	r2, [pc, #572]	; (8107638 <UART_SetConfig+0x6a0>)
 81073fa:	4293      	cmp	r3, r2
 81073fc:	d130      	bne.n	8107460 <UART_SetConfig+0x4c8>
 81073fe:	4b8d      	ldr	r3, [pc, #564]	; (8107634 <UART_SetConfig+0x69c>)
 8107400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107402:	f003 0307 	and.w	r3, r3, #7
 8107406:	2b05      	cmp	r3, #5
 8107408:	d826      	bhi.n	8107458 <UART_SetConfig+0x4c0>
 810740a:	a201      	add	r2, pc, #4	; (adr r2, 8107410 <UART_SetConfig+0x478>)
 810740c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107410:	08107429 	.word	0x08107429
 8107414:	08107431 	.word	0x08107431
 8107418:	08107439 	.word	0x08107439
 810741c:	08107441 	.word	0x08107441
 8107420:	08107449 	.word	0x08107449
 8107424:	08107451 	.word	0x08107451
 8107428:	2300      	movs	r3, #0
 810742a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810742e:	e086      	b.n	810753e <UART_SetConfig+0x5a6>
 8107430:	2304      	movs	r3, #4
 8107432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107436:	e082      	b.n	810753e <UART_SetConfig+0x5a6>
 8107438:	2308      	movs	r3, #8
 810743a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810743e:	e07e      	b.n	810753e <UART_SetConfig+0x5a6>
 8107440:	2310      	movs	r3, #16
 8107442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107446:	e07a      	b.n	810753e <UART_SetConfig+0x5a6>
 8107448:	2320      	movs	r3, #32
 810744a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810744e:	e076      	b.n	810753e <UART_SetConfig+0x5a6>
 8107450:	2340      	movs	r3, #64	; 0x40
 8107452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107456:	e072      	b.n	810753e <UART_SetConfig+0x5a6>
 8107458:	2380      	movs	r3, #128	; 0x80
 810745a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810745e:	e06e      	b.n	810753e <UART_SetConfig+0x5a6>
 8107460:	697b      	ldr	r3, [r7, #20]
 8107462:	681b      	ldr	r3, [r3, #0]
 8107464:	4a75      	ldr	r2, [pc, #468]	; (810763c <UART_SetConfig+0x6a4>)
 8107466:	4293      	cmp	r3, r2
 8107468:	d130      	bne.n	81074cc <UART_SetConfig+0x534>
 810746a:	4b72      	ldr	r3, [pc, #456]	; (8107634 <UART_SetConfig+0x69c>)
 810746c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810746e:	f003 0307 	and.w	r3, r3, #7
 8107472:	2b05      	cmp	r3, #5
 8107474:	d826      	bhi.n	81074c4 <UART_SetConfig+0x52c>
 8107476:	a201      	add	r2, pc, #4	; (adr r2, 810747c <UART_SetConfig+0x4e4>)
 8107478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810747c:	08107495 	.word	0x08107495
 8107480:	0810749d 	.word	0x0810749d
 8107484:	081074a5 	.word	0x081074a5
 8107488:	081074ad 	.word	0x081074ad
 810748c:	081074b5 	.word	0x081074b5
 8107490:	081074bd 	.word	0x081074bd
 8107494:	2300      	movs	r3, #0
 8107496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810749a:	e050      	b.n	810753e <UART_SetConfig+0x5a6>
 810749c:	2304      	movs	r3, #4
 810749e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81074a2:	e04c      	b.n	810753e <UART_SetConfig+0x5a6>
 81074a4:	2308      	movs	r3, #8
 81074a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81074aa:	e048      	b.n	810753e <UART_SetConfig+0x5a6>
 81074ac:	2310      	movs	r3, #16
 81074ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81074b2:	e044      	b.n	810753e <UART_SetConfig+0x5a6>
 81074b4:	2320      	movs	r3, #32
 81074b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81074ba:	e040      	b.n	810753e <UART_SetConfig+0x5a6>
 81074bc:	2340      	movs	r3, #64	; 0x40
 81074be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81074c2:	e03c      	b.n	810753e <UART_SetConfig+0x5a6>
 81074c4:	2380      	movs	r3, #128	; 0x80
 81074c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81074ca:	e038      	b.n	810753e <UART_SetConfig+0x5a6>
 81074cc:	697b      	ldr	r3, [r7, #20]
 81074ce:	681b      	ldr	r3, [r3, #0]
 81074d0:	4a5b      	ldr	r2, [pc, #364]	; (8107640 <UART_SetConfig+0x6a8>)
 81074d2:	4293      	cmp	r3, r2
 81074d4:	d130      	bne.n	8107538 <UART_SetConfig+0x5a0>
 81074d6:	4b57      	ldr	r3, [pc, #348]	; (8107634 <UART_SetConfig+0x69c>)
 81074d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81074da:	f003 0307 	and.w	r3, r3, #7
 81074de:	2b05      	cmp	r3, #5
 81074e0:	d826      	bhi.n	8107530 <UART_SetConfig+0x598>
 81074e2:	a201      	add	r2, pc, #4	; (adr r2, 81074e8 <UART_SetConfig+0x550>)
 81074e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81074e8:	08107501 	.word	0x08107501
 81074ec:	08107509 	.word	0x08107509
 81074f0:	08107511 	.word	0x08107511
 81074f4:	08107519 	.word	0x08107519
 81074f8:	08107521 	.word	0x08107521
 81074fc:	08107529 	.word	0x08107529
 8107500:	2302      	movs	r3, #2
 8107502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107506:	e01a      	b.n	810753e <UART_SetConfig+0x5a6>
 8107508:	2304      	movs	r3, #4
 810750a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810750e:	e016      	b.n	810753e <UART_SetConfig+0x5a6>
 8107510:	2308      	movs	r3, #8
 8107512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107516:	e012      	b.n	810753e <UART_SetConfig+0x5a6>
 8107518:	2310      	movs	r3, #16
 810751a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810751e:	e00e      	b.n	810753e <UART_SetConfig+0x5a6>
 8107520:	2320      	movs	r3, #32
 8107522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107526:	e00a      	b.n	810753e <UART_SetConfig+0x5a6>
 8107528:	2340      	movs	r3, #64	; 0x40
 810752a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810752e:	e006      	b.n	810753e <UART_SetConfig+0x5a6>
 8107530:	2380      	movs	r3, #128	; 0x80
 8107532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107536:	e002      	b.n	810753e <UART_SetConfig+0x5a6>
 8107538:	2380      	movs	r3, #128	; 0x80
 810753a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810753e:	697b      	ldr	r3, [r7, #20]
 8107540:	681b      	ldr	r3, [r3, #0]
 8107542:	4a3f      	ldr	r2, [pc, #252]	; (8107640 <UART_SetConfig+0x6a8>)
 8107544:	4293      	cmp	r3, r2
 8107546:	f040 80f8 	bne.w	810773a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 810754a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 810754e:	2b20      	cmp	r3, #32
 8107550:	dc46      	bgt.n	81075e0 <UART_SetConfig+0x648>
 8107552:	2b02      	cmp	r3, #2
 8107554:	f2c0 8082 	blt.w	810765c <UART_SetConfig+0x6c4>
 8107558:	3b02      	subs	r3, #2
 810755a:	2b1e      	cmp	r3, #30
 810755c:	d87e      	bhi.n	810765c <UART_SetConfig+0x6c4>
 810755e:	a201      	add	r2, pc, #4	; (adr r2, 8107564 <UART_SetConfig+0x5cc>)
 8107560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107564:	081075e7 	.word	0x081075e7
 8107568:	0810765d 	.word	0x0810765d
 810756c:	081075ef 	.word	0x081075ef
 8107570:	0810765d 	.word	0x0810765d
 8107574:	0810765d 	.word	0x0810765d
 8107578:	0810765d 	.word	0x0810765d
 810757c:	081075ff 	.word	0x081075ff
 8107580:	0810765d 	.word	0x0810765d
 8107584:	0810765d 	.word	0x0810765d
 8107588:	0810765d 	.word	0x0810765d
 810758c:	0810765d 	.word	0x0810765d
 8107590:	0810765d 	.word	0x0810765d
 8107594:	0810765d 	.word	0x0810765d
 8107598:	0810765d 	.word	0x0810765d
 810759c:	0810760f 	.word	0x0810760f
 81075a0:	0810765d 	.word	0x0810765d
 81075a4:	0810765d 	.word	0x0810765d
 81075a8:	0810765d 	.word	0x0810765d
 81075ac:	0810765d 	.word	0x0810765d
 81075b0:	0810765d 	.word	0x0810765d
 81075b4:	0810765d 	.word	0x0810765d
 81075b8:	0810765d 	.word	0x0810765d
 81075bc:	0810765d 	.word	0x0810765d
 81075c0:	0810765d 	.word	0x0810765d
 81075c4:	0810765d 	.word	0x0810765d
 81075c8:	0810765d 	.word	0x0810765d
 81075cc:	0810765d 	.word	0x0810765d
 81075d0:	0810765d 	.word	0x0810765d
 81075d4:	0810765d 	.word	0x0810765d
 81075d8:	0810765d 	.word	0x0810765d
 81075dc:	0810764f 	.word	0x0810764f
 81075e0:	2b40      	cmp	r3, #64	; 0x40
 81075e2:	d037      	beq.n	8107654 <UART_SetConfig+0x6bc>
 81075e4:	e03a      	b.n	810765c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 81075e6:	f7fd f941 	bl	810486c <HAL_RCCEx_GetD3PCLK1Freq>
 81075ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 81075ec:	e03c      	b.n	8107668 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81075ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81075f2:	4618      	mov	r0, r3
 81075f4:	f7fd f950 	bl	8104898 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81075f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81075fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81075fc:	e034      	b.n	8107668 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81075fe:	f107 0318 	add.w	r3, r7, #24
 8107602:	4618      	mov	r0, r3
 8107604:	f7fd fa9c 	bl	8104b40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8107608:	69fb      	ldr	r3, [r7, #28]
 810760a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810760c:	e02c      	b.n	8107668 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810760e:	4b09      	ldr	r3, [pc, #36]	; (8107634 <UART_SetConfig+0x69c>)
 8107610:	681b      	ldr	r3, [r3, #0]
 8107612:	f003 0320 	and.w	r3, r3, #32
 8107616:	2b00      	cmp	r3, #0
 8107618:	d016      	beq.n	8107648 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810761a:	4b06      	ldr	r3, [pc, #24]	; (8107634 <UART_SetConfig+0x69c>)
 810761c:	681b      	ldr	r3, [r3, #0]
 810761e:	08db      	lsrs	r3, r3, #3
 8107620:	f003 0303 	and.w	r3, r3, #3
 8107624:	4a07      	ldr	r2, [pc, #28]	; (8107644 <UART_SetConfig+0x6ac>)
 8107626:	fa22 f303 	lsr.w	r3, r2, r3
 810762a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810762c:	e01c      	b.n	8107668 <UART_SetConfig+0x6d0>
 810762e:	bf00      	nop
 8107630:	40011400 	.word	0x40011400
 8107634:	58024400 	.word	0x58024400
 8107638:	40007800 	.word	0x40007800
 810763c:	40007c00 	.word	0x40007c00
 8107640:	58000c00 	.word	0x58000c00
 8107644:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8107648:	4b9d      	ldr	r3, [pc, #628]	; (81078c0 <UART_SetConfig+0x928>)
 810764a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810764c:	e00c      	b.n	8107668 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810764e:	4b9d      	ldr	r3, [pc, #628]	; (81078c4 <UART_SetConfig+0x92c>)
 8107650:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107652:	e009      	b.n	8107668 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8107654:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8107658:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810765a:	e005      	b.n	8107668 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 810765c:	2300      	movs	r3, #0
 810765e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8107660:	2301      	movs	r3, #1
 8107662:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8107666:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8107668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810766a:	2b00      	cmp	r3, #0
 810766c:	f000 81de 	beq.w	8107a2c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8107670:	697b      	ldr	r3, [r7, #20]
 8107672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107674:	4a94      	ldr	r2, [pc, #592]	; (81078c8 <UART_SetConfig+0x930>)
 8107676:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810767a:	461a      	mov	r2, r3
 810767c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810767e:	fbb3 f3f2 	udiv	r3, r3, r2
 8107682:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8107684:	697b      	ldr	r3, [r7, #20]
 8107686:	685a      	ldr	r2, [r3, #4]
 8107688:	4613      	mov	r3, r2
 810768a:	005b      	lsls	r3, r3, #1
 810768c:	4413      	add	r3, r2
 810768e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8107690:	429a      	cmp	r2, r3
 8107692:	d305      	bcc.n	81076a0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8107694:	697b      	ldr	r3, [r7, #20]
 8107696:	685b      	ldr	r3, [r3, #4]
 8107698:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810769a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810769c:	429a      	cmp	r2, r3
 810769e:	d903      	bls.n	81076a8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 81076a0:	2301      	movs	r3, #1
 81076a2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 81076a6:	e1c1      	b.n	8107a2c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81076a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81076aa:	2200      	movs	r2, #0
 81076ac:	60bb      	str	r3, [r7, #8]
 81076ae:	60fa      	str	r2, [r7, #12]
 81076b0:	697b      	ldr	r3, [r7, #20]
 81076b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81076b4:	4a84      	ldr	r2, [pc, #528]	; (81078c8 <UART_SetConfig+0x930>)
 81076b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81076ba:	b29b      	uxth	r3, r3
 81076bc:	2200      	movs	r2, #0
 81076be:	603b      	str	r3, [r7, #0]
 81076c0:	607a      	str	r2, [r7, #4]
 81076c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 81076c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 81076ca:	f7f9 fb65 	bl	8100d98 <__aeabi_uldivmod>
 81076ce:	4602      	mov	r2, r0
 81076d0:	460b      	mov	r3, r1
 81076d2:	4610      	mov	r0, r2
 81076d4:	4619      	mov	r1, r3
 81076d6:	f04f 0200 	mov.w	r2, #0
 81076da:	f04f 0300 	mov.w	r3, #0
 81076de:	020b      	lsls	r3, r1, #8
 81076e0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 81076e4:	0202      	lsls	r2, r0, #8
 81076e6:	6979      	ldr	r1, [r7, #20]
 81076e8:	6849      	ldr	r1, [r1, #4]
 81076ea:	0849      	lsrs	r1, r1, #1
 81076ec:	2000      	movs	r0, #0
 81076ee:	460c      	mov	r4, r1
 81076f0:	4605      	mov	r5, r0
 81076f2:	eb12 0804 	adds.w	r8, r2, r4
 81076f6:	eb43 0905 	adc.w	r9, r3, r5
 81076fa:	697b      	ldr	r3, [r7, #20]
 81076fc:	685b      	ldr	r3, [r3, #4]
 81076fe:	2200      	movs	r2, #0
 8107700:	469a      	mov	sl, r3
 8107702:	4693      	mov	fp, r2
 8107704:	4652      	mov	r2, sl
 8107706:	465b      	mov	r3, fp
 8107708:	4640      	mov	r0, r8
 810770a:	4649      	mov	r1, r9
 810770c:	f7f9 fb44 	bl	8100d98 <__aeabi_uldivmod>
 8107710:	4602      	mov	r2, r0
 8107712:	460b      	mov	r3, r1
 8107714:	4613      	mov	r3, r2
 8107716:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8107718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810771a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810771e:	d308      	bcc.n	8107732 <UART_SetConfig+0x79a>
 8107720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107722:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8107726:	d204      	bcs.n	8107732 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8107728:	697b      	ldr	r3, [r7, #20]
 810772a:	681b      	ldr	r3, [r3, #0]
 810772c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 810772e:	60da      	str	r2, [r3, #12]
 8107730:	e17c      	b.n	8107a2c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8107732:	2301      	movs	r3, #1
 8107734:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8107738:	e178      	b.n	8107a2c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 810773a:	697b      	ldr	r3, [r7, #20]
 810773c:	69db      	ldr	r3, [r3, #28]
 810773e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8107742:	f040 80c5 	bne.w	81078d0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8107746:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 810774a:	2b20      	cmp	r3, #32
 810774c:	dc48      	bgt.n	81077e0 <UART_SetConfig+0x848>
 810774e:	2b00      	cmp	r3, #0
 8107750:	db7b      	blt.n	810784a <UART_SetConfig+0x8b2>
 8107752:	2b20      	cmp	r3, #32
 8107754:	d879      	bhi.n	810784a <UART_SetConfig+0x8b2>
 8107756:	a201      	add	r2, pc, #4	; (adr r2, 810775c <UART_SetConfig+0x7c4>)
 8107758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810775c:	081077e7 	.word	0x081077e7
 8107760:	081077ef 	.word	0x081077ef
 8107764:	0810784b 	.word	0x0810784b
 8107768:	0810784b 	.word	0x0810784b
 810776c:	081077f7 	.word	0x081077f7
 8107770:	0810784b 	.word	0x0810784b
 8107774:	0810784b 	.word	0x0810784b
 8107778:	0810784b 	.word	0x0810784b
 810777c:	08107807 	.word	0x08107807
 8107780:	0810784b 	.word	0x0810784b
 8107784:	0810784b 	.word	0x0810784b
 8107788:	0810784b 	.word	0x0810784b
 810778c:	0810784b 	.word	0x0810784b
 8107790:	0810784b 	.word	0x0810784b
 8107794:	0810784b 	.word	0x0810784b
 8107798:	0810784b 	.word	0x0810784b
 810779c:	08107817 	.word	0x08107817
 81077a0:	0810784b 	.word	0x0810784b
 81077a4:	0810784b 	.word	0x0810784b
 81077a8:	0810784b 	.word	0x0810784b
 81077ac:	0810784b 	.word	0x0810784b
 81077b0:	0810784b 	.word	0x0810784b
 81077b4:	0810784b 	.word	0x0810784b
 81077b8:	0810784b 	.word	0x0810784b
 81077bc:	0810784b 	.word	0x0810784b
 81077c0:	0810784b 	.word	0x0810784b
 81077c4:	0810784b 	.word	0x0810784b
 81077c8:	0810784b 	.word	0x0810784b
 81077cc:	0810784b 	.word	0x0810784b
 81077d0:	0810784b 	.word	0x0810784b
 81077d4:	0810784b 	.word	0x0810784b
 81077d8:	0810784b 	.word	0x0810784b
 81077dc:	0810783d 	.word	0x0810783d
 81077e0:	2b40      	cmp	r3, #64	; 0x40
 81077e2:	d02e      	beq.n	8107842 <UART_SetConfig+0x8aa>
 81077e4:	e031      	b.n	810784a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 81077e6:	f7fc f8cf 	bl	8103988 <HAL_RCC_GetPCLK1Freq>
 81077ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 81077ec:	e033      	b.n	8107856 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 81077ee:	f7fc f8e1 	bl	81039b4 <HAL_RCC_GetPCLK2Freq>
 81077f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 81077f4:	e02f      	b.n	8107856 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81077f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81077fa:	4618      	mov	r0, r3
 81077fc:	f7fd f84c 	bl	8104898 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8107800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107802:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107804:	e027      	b.n	8107856 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107806:	f107 0318 	add.w	r3, r7, #24
 810780a:	4618      	mov	r0, r3
 810780c:	f7fd f998 	bl	8104b40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8107810:	69fb      	ldr	r3, [r7, #28]
 8107812:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107814:	e01f      	b.n	8107856 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107816:	4b2d      	ldr	r3, [pc, #180]	; (81078cc <UART_SetConfig+0x934>)
 8107818:	681b      	ldr	r3, [r3, #0]
 810781a:	f003 0320 	and.w	r3, r3, #32
 810781e:	2b00      	cmp	r3, #0
 8107820:	d009      	beq.n	8107836 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8107822:	4b2a      	ldr	r3, [pc, #168]	; (81078cc <UART_SetConfig+0x934>)
 8107824:	681b      	ldr	r3, [r3, #0]
 8107826:	08db      	lsrs	r3, r3, #3
 8107828:	f003 0303 	and.w	r3, r3, #3
 810782c:	4a24      	ldr	r2, [pc, #144]	; (81078c0 <UART_SetConfig+0x928>)
 810782e:	fa22 f303 	lsr.w	r3, r2, r3
 8107832:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8107834:	e00f      	b.n	8107856 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8107836:	4b22      	ldr	r3, [pc, #136]	; (81078c0 <UART_SetConfig+0x928>)
 8107838:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810783a:	e00c      	b.n	8107856 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810783c:	4b21      	ldr	r3, [pc, #132]	; (81078c4 <UART_SetConfig+0x92c>)
 810783e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107840:	e009      	b.n	8107856 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8107842:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8107846:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107848:	e005      	b.n	8107856 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 810784a:	2300      	movs	r3, #0
 810784c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 810784e:	2301      	movs	r3, #1
 8107850:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8107854:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8107856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8107858:	2b00      	cmp	r3, #0
 810785a:	f000 80e7 	beq.w	8107a2c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810785e:	697b      	ldr	r3, [r7, #20]
 8107860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107862:	4a19      	ldr	r2, [pc, #100]	; (81078c8 <UART_SetConfig+0x930>)
 8107864:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8107868:	461a      	mov	r2, r3
 810786a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810786c:	fbb3 f3f2 	udiv	r3, r3, r2
 8107870:	005a      	lsls	r2, r3, #1
 8107872:	697b      	ldr	r3, [r7, #20]
 8107874:	685b      	ldr	r3, [r3, #4]
 8107876:	085b      	lsrs	r3, r3, #1
 8107878:	441a      	add	r2, r3
 810787a:	697b      	ldr	r3, [r7, #20]
 810787c:	685b      	ldr	r3, [r3, #4]
 810787e:	fbb2 f3f3 	udiv	r3, r2, r3
 8107882:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8107884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107886:	2b0f      	cmp	r3, #15
 8107888:	d916      	bls.n	81078b8 <UART_SetConfig+0x920>
 810788a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810788c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8107890:	d212      	bcs.n	81078b8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8107892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107894:	b29b      	uxth	r3, r3
 8107896:	f023 030f 	bic.w	r3, r3, #15
 810789a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 810789c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810789e:	085b      	lsrs	r3, r3, #1
 81078a0:	b29b      	uxth	r3, r3
 81078a2:	f003 0307 	and.w	r3, r3, #7
 81078a6:	b29a      	uxth	r2, r3
 81078a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 81078aa:	4313      	orrs	r3, r2
 81078ac:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 81078ae:	697b      	ldr	r3, [r7, #20]
 81078b0:	681b      	ldr	r3, [r3, #0]
 81078b2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 81078b4:	60da      	str	r2, [r3, #12]
 81078b6:	e0b9      	b.n	8107a2c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 81078b8:	2301      	movs	r3, #1
 81078ba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 81078be:	e0b5      	b.n	8107a2c <UART_SetConfig+0xa94>
 81078c0:	03d09000 	.word	0x03d09000
 81078c4:	003d0900 	.word	0x003d0900
 81078c8:	0810e768 	.word	0x0810e768
 81078cc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 81078d0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 81078d4:	2b20      	cmp	r3, #32
 81078d6:	dc49      	bgt.n	810796c <UART_SetConfig+0x9d4>
 81078d8:	2b00      	cmp	r3, #0
 81078da:	db7c      	blt.n	81079d6 <UART_SetConfig+0xa3e>
 81078dc:	2b20      	cmp	r3, #32
 81078de:	d87a      	bhi.n	81079d6 <UART_SetConfig+0xa3e>
 81078e0:	a201      	add	r2, pc, #4	; (adr r2, 81078e8 <UART_SetConfig+0x950>)
 81078e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81078e6:	bf00      	nop
 81078e8:	08107973 	.word	0x08107973
 81078ec:	0810797b 	.word	0x0810797b
 81078f0:	081079d7 	.word	0x081079d7
 81078f4:	081079d7 	.word	0x081079d7
 81078f8:	08107983 	.word	0x08107983
 81078fc:	081079d7 	.word	0x081079d7
 8107900:	081079d7 	.word	0x081079d7
 8107904:	081079d7 	.word	0x081079d7
 8107908:	08107993 	.word	0x08107993
 810790c:	081079d7 	.word	0x081079d7
 8107910:	081079d7 	.word	0x081079d7
 8107914:	081079d7 	.word	0x081079d7
 8107918:	081079d7 	.word	0x081079d7
 810791c:	081079d7 	.word	0x081079d7
 8107920:	081079d7 	.word	0x081079d7
 8107924:	081079d7 	.word	0x081079d7
 8107928:	081079a3 	.word	0x081079a3
 810792c:	081079d7 	.word	0x081079d7
 8107930:	081079d7 	.word	0x081079d7
 8107934:	081079d7 	.word	0x081079d7
 8107938:	081079d7 	.word	0x081079d7
 810793c:	081079d7 	.word	0x081079d7
 8107940:	081079d7 	.word	0x081079d7
 8107944:	081079d7 	.word	0x081079d7
 8107948:	081079d7 	.word	0x081079d7
 810794c:	081079d7 	.word	0x081079d7
 8107950:	081079d7 	.word	0x081079d7
 8107954:	081079d7 	.word	0x081079d7
 8107958:	081079d7 	.word	0x081079d7
 810795c:	081079d7 	.word	0x081079d7
 8107960:	081079d7 	.word	0x081079d7
 8107964:	081079d7 	.word	0x081079d7
 8107968:	081079c9 	.word	0x081079c9
 810796c:	2b40      	cmp	r3, #64	; 0x40
 810796e:	d02e      	beq.n	81079ce <UART_SetConfig+0xa36>
 8107970:	e031      	b.n	81079d6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8107972:	f7fc f809 	bl	8103988 <HAL_RCC_GetPCLK1Freq>
 8107976:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8107978:	e033      	b.n	81079e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810797a:	f7fc f81b 	bl	81039b4 <HAL_RCC_GetPCLK2Freq>
 810797e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8107980:	e02f      	b.n	81079e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107982:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8107986:	4618      	mov	r0, r3
 8107988:	f7fc ff86 	bl	8104898 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810798c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810798e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107990:	e027      	b.n	81079e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107992:	f107 0318 	add.w	r3, r7, #24
 8107996:	4618      	mov	r0, r3
 8107998:	f7fd f8d2 	bl	8104b40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810799c:	69fb      	ldr	r3, [r7, #28]
 810799e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81079a0:	e01f      	b.n	81079e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81079a2:	4b2d      	ldr	r3, [pc, #180]	; (8107a58 <UART_SetConfig+0xac0>)
 81079a4:	681b      	ldr	r3, [r3, #0]
 81079a6:	f003 0320 	and.w	r3, r3, #32
 81079aa:	2b00      	cmp	r3, #0
 81079ac:	d009      	beq.n	81079c2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81079ae:	4b2a      	ldr	r3, [pc, #168]	; (8107a58 <UART_SetConfig+0xac0>)
 81079b0:	681b      	ldr	r3, [r3, #0]
 81079b2:	08db      	lsrs	r3, r3, #3
 81079b4:	f003 0303 	and.w	r3, r3, #3
 81079b8:	4a28      	ldr	r2, [pc, #160]	; (8107a5c <UART_SetConfig+0xac4>)
 81079ba:	fa22 f303 	lsr.w	r3, r2, r3
 81079be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81079c0:	e00f      	b.n	81079e2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 81079c2:	4b26      	ldr	r3, [pc, #152]	; (8107a5c <UART_SetConfig+0xac4>)
 81079c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81079c6:	e00c      	b.n	81079e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81079c8:	4b25      	ldr	r3, [pc, #148]	; (8107a60 <UART_SetConfig+0xac8>)
 81079ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81079cc:	e009      	b.n	81079e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81079ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81079d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81079d4:	e005      	b.n	81079e2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 81079d6:	2300      	movs	r3, #0
 81079d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 81079da:	2301      	movs	r3, #1
 81079dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 81079e0:	bf00      	nop
    }

    if (pclk != 0U)
 81079e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81079e4:	2b00      	cmp	r3, #0
 81079e6:	d021      	beq.n	8107a2c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81079e8:	697b      	ldr	r3, [r7, #20]
 81079ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81079ec:	4a1d      	ldr	r2, [pc, #116]	; (8107a64 <UART_SetConfig+0xacc>)
 81079ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81079f2:	461a      	mov	r2, r3
 81079f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81079f6:	fbb3 f2f2 	udiv	r2, r3, r2
 81079fa:	697b      	ldr	r3, [r7, #20]
 81079fc:	685b      	ldr	r3, [r3, #4]
 81079fe:	085b      	lsrs	r3, r3, #1
 8107a00:	441a      	add	r2, r3
 8107a02:	697b      	ldr	r3, [r7, #20]
 8107a04:	685b      	ldr	r3, [r3, #4]
 8107a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8107a0a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8107a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107a0e:	2b0f      	cmp	r3, #15
 8107a10:	d909      	bls.n	8107a26 <UART_SetConfig+0xa8e>
 8107a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107a14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8107a18:	d205      	bcs.n	8107a26 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8107a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107a1c:	b29a      	uxth	r2, r3
 8107a1e:	697b      	ldr	r3, [r7, #20]
 8107a20:	681b      	ldr	r3, [r3, #0]
 8107a22:	60da      	str	r2, [r3, #12]
 8107a24:	e002      	b.n	8107a2c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8107a26:	2301      	movs	r3, #1
 8107a28:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8107a2c:	697b      	ldr	r3, [r7, #20]
 8107a2e:	2201      	movs	r2, #1
 8107a30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8107a34:	697b      	ldr	r3, [r7, #20]
 8107a36:	2201      	movs	r2, #1
 8107a38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8107a3c:	697b      	ldr	r3, [r7, #20]
 8107a3e:	2200      	movs	r2, #0
 8107a40:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8107a42:	697b      	ldr	r3, [r7, #20]
 8107a44:	2200      	movs	r2, #0
 8107a46:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8107a48:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8107a4c:	4618      	mov	r0, r3
 8107a4e:	3748      	adds	r7, #72	; 0x48
 8107a50:	46bd      	mov	sp, r7
 8107a52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8107a56:	bf00      	nop
 8107a58:	58024400 	.word	0x58024400
 8107a5c:	03d09000 	.word	0x03d09000
 8107a60:	003d0900 	.word	0x003d0900
 8107a64:	0810e768 	.word	0x0810e768

08107a68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8107a68:	b480      	push	{r7}
 8107a6a:	b083      	sub	sp, #12
 8107a6c:	af00      	add	r7, sp, #0
 8107a6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8107a70:	687b      	ldr	r3, [r7, #4]
 8107a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107a74:	f003 0301 	and.w	r3, r3, #1
 8107a78:	2b00      	cmp	r3, #0
 8107a7a:	d00a      	beq.n	8107a92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8107a7c:	687b      	ldr	r3, [r7, #4]
 8107a7e:	681b      	ldr	r3, [r3, #0]
 8107a80:	685b      	ldr	r3, [r3, #4]
 8107a82:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8107a86:	687b      	ldr	r3, [r7, #4]
 8107a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8107a8a:	687b      	ldr	r3, [r7, #4]
 8107a8c:	681b      	ldr	r3, [r3, #0]
 8107a8e:	430a      	orrs	r2, r1
 8107a90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8107a92:	687b      	ldr	r3, [r7, #4]
 8107a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107a96:	f003 0302 	and.w	r3, r3, #2
 8107a9a:	2b00      	cmp	r3, #0
 8107a9c:	d00a      	beq.n	8107ab4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8107a9e:	687b      	ldr	r3, [r7, #4]
 8107aa0:	681b      	ldr	r3, [r3, #0]
 8107aa2:	685b      	ldr	r3, [r3, #4]
 8107aa4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8107aa8:	687b      	ldr	r3, [r7, #4]
 8107aaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8107aac:	687b      	ldr	r3, [r7, #4]
 8107aae:	681b      	ldr	r3, [r3, #0]
 8107ab0:	430a      	orrs	r2, r1
 8107ab2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8107ab4:	687b      	ldr	r3, [r7, #4]
 8107ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107ab8:	f003 0304 	and.w	r3, r3, #4
 8107abc:	2b00      	cmp	r3, #0
 8107abe:	d00a      	beq.n	8107ad6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8107ac0:	687b      	ldr	r3, [r7, #4]
 8107ac2:	681b      	ldr	r3, [r3, #0]
 8107ac4:	685b      	ldr	r3, [r3, #4]
 8107ac6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8107aca:	687b      	ldr	r3, [r7, #4]
 8107acc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8107ace:	687b      	ldr	r3, [r7, #4]
 8107ad0:	681b      	ldr	r3, [r3, #0]
 8107ad2:	430a      	orrs	r2, r1
 8107ad4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8107ad6:	687b      	ldr	r3, [r7, #4]
 8107ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107ada:	f003 0308 	and.w	r3, r3, #8
 8107ade:	2b00      	cmp	r3, #0
 8107ae0:	d00a      	beq.n	8107af8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8107ae2:	687b      	ldr	r3, [r7, #4]
 8107ae4:	681b      	ldr	r3, [r3, #0]
 8107ae6:	685b      	ldr	r3, [r3, #4]
 8107ae8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8107aec:	687b      	ldr	r3, [r7, #4]
 8107aee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8107af0:	687b      	ldr	r3, [r7, #4]
 8107af2:	681b      	ldr	r3, [r3, #0]
 8107af4:	430a      	orrs	r2, r1
 8107af6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8107af8:	687b      	ldr	r3, [r7, #4]
 8107afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107afc:	f003 0310 	and.w	r3, r3, #16
 8107b00:	2b00      	cmp	r3, #0
 8107b02:	d00a      	beq.n	8107b1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8107b04:	687b      	ldr	r3, [r7, #4]
 8107b06:	681b      	ldr	r3, [r3, #0]
 8107b08:	689b      	ldr	r3, [r3, #8]
 8107b0a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8107b0e:	687b      	ldr	r3, [r7, #4]
 8107b10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8107b12:	687b      	ldr	r3, [r7, #4]
 8107b14:	681b      	ldr	r3, [r3, #0]
 8107b16:	430a      	orrs	r2, r1
 8107b18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8107b1a:	687b      	ldr	r3, [r7, #4]
 8107b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107b1e:	f003 0320 	and.w	r3, r3, #32
 8107b22:	2b00      	cmp	r3, #0
 8107b24:	d00a      	beq.n	8107b3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8107b26:	687b      	ldr	r3, [r7, #4]
 8107b28:	681b      	ldr	r3, [r3, #0]
 8107b2a:	689b      	ldr	r3, [r3, #8]
 8107b2c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8107b30:	687b      	ldr	r3, [r7, #4]
 8107b32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8107b34:	687b      	ldr	r3, [r7, #4]
 8107b36:	681b      	ldr	r3, [r3, #0]
 8107b38:	430a      	orrs	r2, r1
 8107b3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8107b3c:	687b      	ldr	r3, [r7, #4]
 8107b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107b44:	2b00      	cmp	r3, #0
 8107b46:	d01a      	beq.n	8107b7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8107b48:	687b      	ldr	r3, [r7, #4]
 8107b4a:	681b      	ldr	r3, [r3, #0]
 8107b4c:	685b      	ldr	r3, [r3, #4]
 8107b4e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8107b52:	687b      	ldr	r3, [r7, #4]
 8107b54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8107b56:	687b      	ldr	r3, [r7, #4]
 8107b58:	681b      	ldr	r3, [r3, #0]
 8107b5a:	430a      	orrs	r2, r1
 8107b5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8107b5e:	687b      	ldr	r3, [r7, #4]
 8107b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107b62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8107b66:	d10a      	bne.n	8107b7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8107b68:	687b      	ldr	r3, [r7, #4]
 8107b6a:	681b      	ldr	r3, [r3, #0]
 8107b6c:	685b      	ldr	r3, [r3, #4]
 8107b6e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8107b72:	687b      	ldr	r3, [r7, #4]
 8107b74:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8107b76:	687b      	ldr	r3, [r7, #4]
 8107b78:	681b      	ldr	r3, [r3, #0]
 8107b7a:	430a      	orrs	r2, r1
 8107b7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8107b7e:	687b      	ldr	r3, [r7, #4]
 8107b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8107b86:	2b00      	cmp	r3, #0
 8107b88:	d00a      	beq.n	8107ba0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8107b8a:	687b      	ldr	r3, [r7, #4]
 8107b8c:	681b      	ldr	r3, [r3, #0]
 8107b8e:	685b      	ldr	r3, [r3, #4]
 8107b90:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8107b94:	687b      	ldr	r3, [r7, #4]
 8107b96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8107b98:	687b      	ldr	r3, [r7, #4]
 8107b9a:	681b      	ldr	r3, [r3, #0]
 8107b9c:	430a      	orrs	r2, r1
 8107b9e:	605a      	str	r2, [r3, #4]
  }
}
 8107ba0:	bf00      	nop
 8107ba2:	370c      	adds	r7, #12
 8107ba4:	46bd      	mov	sp, r7
 8107ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107baa:	4770      	bx	lr

08107bac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8107bac:	b580      	push	{r7, lr}
 8107bae:	b086      	sub	sp, #24
 8107bb0:	af02      	add	r7, sp, #8
 8107bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8107bb4:	687b      	ldr	r3, [r7, #4]
 8107bb6:	2200      	movs	r2, #0
 8107bb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8107bbc:	f7fa fc40 	bl	8102440 <HAL_GetTick>
 8107bc0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8107bc2:	687b      	ldr	r3, [r7, #4]
 8107bc4:	681b      	ldr	r3, [r3, #0]
 8107bc6:	681b      	ldr	r3, [r3, #0]
 8107bc8:	f003 0308 	and.w	r3, r3, #8
 8107bcc:	2b08      	cmp	r3, #8
 8107bce:	d10e      	bne.n	8107bee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8107bd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8107bd4:	9300      	str	r3, [sp, #0]
 8107bd6:	68fb      	ldr	r3, [r7, #12]
 8107bd8:	2200      	movs	r2, #0
 8107bda:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8107bde:	6878      	ldr	r0, [r7, #4]
 8107be0:	f000 f82f 	bl	8107c42 <UART_WaitOnFlagUntilTimeout>
 8107be4:	4603      	mov	r3, r0
 8107be6:	2b00      	cmp	r3, #0
 8107be8:	d001      	beq.n	8107bee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8107bea:	2303      	movs	r3, #3
 8107bec:	e025      	b.n	8107c3a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8107bee:	687b      	ldr	r3, [r7, #4]
 8107bf0:	681b      	ldr	r3, [r3, #0]
 8107bf2:	681b      	ldr	r3, [r3, #0]
 8107bf4:	f003 0304 	and.w	r3, r3, #4
 8107bf8:	2b04      	cmp	r3, #4
 8107bfa:	d10e      	bne.n	8107c1a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8107bfc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8107c00:	9300      	str	r3, [sp, #0]
 8107c02:	68fb      	ldr	r3, [r7, #12]
 8107c04:	2200      	movs	r2, #0
 8107c06:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8107c0a:	6878      	ldr	r0, [r7, #4]
 8107c0c:	f000 f819 	bl	8107c42 <UART_WaitOnFlagUntilTimeout>
 8107c10:	4603      	mov	r3, r0
 8107c12:	2b00      	cmp	r3, #0
 8107c14:	d001      	beq.n	8107c1a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8107c16:	2303      	movs	r3, #3
 8107c18:	e00f      	b.n	8107c3a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8107c1a:	687b      	ldr	r3, [r7, #4]
 8107c1c:	2220      	movs	r2, #32
 8107c1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8107c22:	687b      	ldr	r3, [r7, #4]
 8107c24:	2220      	movs	r2, #32
 8107c26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8107c2a:	687b      	ldr	r3, [r7, #4]
 8107c2c:	2200      	movs	r2, #0
 8107c2e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8107c30:	687b      	ldr	r3, [r7, #4]
 8107c32:	2200      	movs	r2, #0
 8107c34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8107c38:	2300      	movs	r3, #0
}
 8107c3a:	4618      	mov	r0, r3
 8107c3c:	3710      	adds	r7, #16
 8107c3e:	46bd      	mov	sp, r7
 8107c40:	bd80      	pop	{r7, pc}

08107c42 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8107c42:	b580      	push	{r7, lr}
 8107c44:	b09c      	sub	sp, #112	; 0x70
 8107c46:	af00      	add	r7, sp, #0
 8107c48:	60f8      	str	r0, [r7, #12]
 8107c4a:	60b9      	str	r1, [r7, #8]
 8107c4c:	603b      	str	r3, [r7, #0]
 8107c4e:	4613      	mov	r3, r2
 8107c50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8107c52:	e0a9      	b.n	8107da8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8107c54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8107c56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8107c5a:	f000 80a5 	beq.w	8107da8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8107c5e:	f7fa fbef 	bl	8102440 <HAL_GetTick>
 8107c62:	4602      	mov	r2, r0
 8107c64:	683b      	ldr	r3, [r7, #0]
 8107c66:	1ad3      	subs	r3, r2, r3
 8107c68:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8107c6a:	429a      	cmp	r2, r3
 8107c6c:	d302      	bcc.n	8107c74 <UART_WaitOnFlagUntilTimeout+0x32>
 8107c6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8107c70:	2b00      	cmp	r3, #0
 8107c72:	d140      	bne.n	8107cf6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8107c74:	68fb      	ldr	r3, [r7, #12]
 8107c76:	681b      	ldr	r3, [r3, #0]
 8107c78:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107c7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8107c7c:	e853 3f00 	ldrex	r3, [r3]
 8107c80:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8107c82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8107c84:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8107c88:	667b      	str	r3, [r7, #100]	; 0x64
 8107c8a:	68fb      	ldr	r3, [r7, #12]
 8107c8c:	681b      	ldr	r3, [r3, #0]
 8107c8e:	461a      	mov	r2, r3
 8107c90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8107c92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8107c94:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107c96:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8107c98:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8107c9a:	e841 2300 	strex	r3, r2, [r1]
 8107c9e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8107ca0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8107ca2:	2b00      	cmp	r3, #0
 8107ca4:	d1e6      	bne.n	8107c74 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8107ca6:	68fb      	ldr	r3, [r7, #12]
 8107ca8:	681b      	ldr	r3, [r3, #0]
 8107caa:	3308      	adds	r3, #8
 8107cac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8107cb0:	e853 3f00 	ldrex	r3, [r3]
 8107cb4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8107cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107cb8:	f023 0301 	bic.w	r3, r3, #1
 8107cbc:	663b      	str	r3, [r7, #96]	; 0x60
 8107cbe:	68fb      	ldr	r3, [r7, #12]
 8107cc0:	681b      	ldr	r3, [r3, #0]
 8107cc2:	3308      	adds	r3, #8
 8107cc4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8107cc6:	64ba      	str	r2, [r7, #72]	; 0x48
 8107cc8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107cca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8107ccc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8107cce:	e841 2300 	strex	r3, r2, [r1]
 8107cd2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8107cd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8107cd6:	2b00      	cmp	r3, #0
 8107cd8:	d1e5      	bne.n	8107ca6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8107cda:	68fb      	ldr	r3, [r7, #12]
 8107cdc:	2220      	movs	r2, #32
 8107cde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8107ce2:	68fb      	ldr	r3, [r7, #12]
 8107ce4:	2220      	movs	r2, #32
 8107ce6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8107cea:	68fb      	ldr	r3, [r7, #12]
 8107cec:	2200      	movs	r2, #0
 8107cee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8107cf2:	2303      	movs	r3, #3
 8107cf4:	e069      	b.n	8107dca <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8107cf6:	68fb      	ldr	r3, [r7, #12]
 8107cf8:	681b      	ldr	r3, [r3, #0]
 8107cfa:	681b      	ldr	r3, [r3, #0]
 8107cfc:	f003 0304 	and.w	r3, r3, #4
 8107d00:	2b00      	cmp	r3, #0
 8107d02:	d051      	beq.n	8107da8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8107d04:	68fb      	ldr	r3, [r7, #12]
 8107d06:	681b      	ldr	r3, [r3, #0]
 8107d08:	69db      	ldr	r3, [r3, #28]
 8107d0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8107d0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8107d12:	d149      	bne.n	8107da8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8107d14:	68fb      	ldr	r3, [r7, #12]
 8107d16:	681b      	ldr	r3, [r3, #0]
 8107d18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8107d1c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8107d1e:	68fb      	ldr	r3, [r7, #12]
 8107d20:	681b      	ldr	r3, [r3, #0]
 8107d22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107d26:	e853 3f00 	ldrex	r3, [r3]
 8107d2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8107d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8107d2e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8107d32:	66fb      	str	r3, [r7, #108]	; 0x6c
 8107d34:	68fb      	ldr	r3, [r7, #12]
 8107d36:	681b      	ldr	r3, [r3, #0]
 8107d38:	461a      	mov	r2, r3
 8107d3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8107d3c:	637b      	str	r3, [r7, #52]	; 0x34
 8107d3e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107d40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8107d42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8107d44:	e841 2300 	strex	r3, r2, [r1]
 8107d48:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8107d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107d4c:	2b00      	cmp	r3, #0
 8107d4e:	d1e6      	bne.n	8107d1e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8107d50:	68fb      	ldr	r3, [r7, #12]
 8107d52:	681b      	ldr	r3, [r3, #0]
 8107d54:	3308      	adds	r3, #8
 8107d56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107d58:	697b      	ldr	r3, [r7, #20]
 8107d5a:	e853 3f00 	ldrex	r3, [r3]
 8107d5e:	613b      	str	r3, [r7, #16]
   return(result);
 8107d60:	693b      	ldr	r3, [r7, #16]
 8107d62:	f023 0301 	bic.w	r3, r3, #1
 8107d66:	66bb      	str	r3, [r7, #104]	; 0x68
 8107d68:	68fb      	ldr	r3, [r7, #12]
 8107d6a:	681b      	ldr	r3, [r3, #0]
 8107d6c:	3308      	adds	r3, #8
 8107d6e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8107d70:	623a      	str	r2, [r7, #32]
 8107d72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107d74:	69f9      	ldr	r1, [r7, #28]
 8107d76:	6a3a      	ldr	r2, [r7, #32]
 8107d78:	e841 2300 	strex	r3, r2, [r1]
 8107d7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8107d7e:	69bb      	ldr	r3, [r7, #24]
 8107d80:	2b00      	cmp	r3, #0
 8107d82:	d1e5      	bne.n	8107d50 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8107d84:	68fb      	ldr	r3, [r7, #12]
 8107d86:	2220      	movs	r2, #32
 8107d88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8107d8c:	68fb      	ldr	r3, [r7, #12]
 8107d8e:	2220      	movs	r2, #32
 8107d90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8107d94:	68fb      	ldr	r3, [r7, #12]
 8107d96:	2220      	movs	r2, #32
 8107d98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8107d9c:	68fb      	ldr	r3, [r7, #12]
 8107d9e:	2200      	movs	r2, #0
 8107da0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8107da4:	2303      	movs	r3, #3
 8107da6:	e010      	b.n	8107dca <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8107da8:	68fb      	ldr	r3, [r7, #12]
 8107daa:	681b      	ldr	r3, [r3, #0]
 8107dac:	69da      	ldr	r2, [r3, #28]
 8107dae:	68bb      	ldr	r3, [r7, #8]
 8107db0:	4013      	ands	r3, r2
 8107db2:	68ba      	ldr	r2, [r7, #8]
 8107db4:	429a      	cmp	r2, r3
 8107db6:	bf0c      	ite	eq
 8107db8:	2301      	moveq	r3, #1
 8107dba:	2300      	movne	r3, #0
 8107dbc:	b2db      	uxtb	r3, r3
 8107dbe:	461a      	mov	r2, r3
 8107dc0:	79fb      	ldrb	r3, [r7, #7]
 8107dc2:	429a      	cmp	r2, r3
 8107dc4:	f43f af46 	beq.w	8107c54 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8107dc8:	2300      	movs	r3, #0
}
 8107dca:	4618      	mov	r0, r3
 8107dcc:	3770      	adds	r7, #112	; 0x70
 8107dce:	46bd      	mov	sp, r7
 8107dd0:	bd80      	pop	{r7, pc}
	...

08107dd4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8107dd4:	b480      	push	{r7}
 8107dd6:	b0a3      	sub	sp, #140	; 0x8c
 8107dd8:	af00      	add	r7, sp, #0
 8107dda:	60f8      	str	r0, [r7, #12]
 8107ddc:	60b9      	str	r1, [r7, #8]
 8107dde:	4613      	mov	r3, r2
 8107de0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8107de2:	68fb      	ldr	r3, [r7, #12]
 8107de4:	68ba      	ldr	r2, [r7, #8]
 8107de6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8107de8:	68fb      	ldr	r3, [r7, #12]
 8107dea:	88fa      	ldrh	r2, [r7, #6]
 8107dec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8107df0:	68fb      	ldr	r3, [r7, #12]
 8107df2:	88fa      	ldrh	r2, [r7, #6]
 8107df4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8107df8:	68fb      	ldr	r3, [r7, #12]
 8107dfa:	2200      	movs	r2, #0
 8107dfc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8107dfe:	68fb      	ldr	r3, [r7, #12]
 8107e00:	689b      	ldr	r3, [r3, #8]
 8107e02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8107e06:	d10e      	bne.n	8107e26 <UART_Start_Receive_IT+0x52>
 8107e08:	68fb      	ldr	r3, [r7, #12]
 8107e0a:	691b      	ldr	r3, [r3, #16]
 8107e0c:	2b00      	cmp	r3, #0
 8107e0e:	d105      	bne.n	8107e1c <UART_Start_Receive_IT+0x48>
 8107e10:	68fb      	ldr	r3, [r7, #12]
 8107e12:	f240 12ff 	movw	r2, #511	; 0x1ff
 8107e16:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8107e1a:	e02d      	b.n	8107e78 <UART_Start_Receive_IT+0xa4>
 8107e1c:	68fb      	ldr	r3, [r7, #12]
 8107e1e:	22ff      	movs	r2, #255	; 0xff
 8107e20:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8107e24:	e028      	b.n	8107e78 <UART_Start_Receive_IT+0xa4>
 8107e26:	68fb      	ldr	r3, [r7, #12]
 8107e28:	689b      	ldr	r3, [r3, #8]
 8107e2a:	2b00      	cmp	r3, #0
 8107e2c:	d10d      	bne.n	8107e4a <UART_Start_Receive_IT+0x76>
 8107e2e:	68fb      	ldr	r3, [r7, #12]
 8107e30:	691b      	ldr	r3, [r3, #16]
 8107e32:	2b00      	cmp	r3, #0
 8107e34:	d104      	bne.n	8107e40 <UART_Start_Receive_IT+0x6c>
 8107e36:	68fb      	ldr	r3, [r7, #12]
 8107e38:	22ff      	movs	r2, #255	; 0xff
 8107e3a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8107e3e:	e01b      	b.n	8107e78 <UART_Start_Receive_IT+0xa4>
 8107e40:	68fb      	ldr	r3, [r7, #12]
 8107e42:	227f      	movs	r2, #127	; 0x7f
 8107e44:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8107e48:	e016      	b.n	8107e78 <UART_Start_Receive_IT+0xa4>
 8107e4a:	68fb      	ldr	r3, [r7, #12]
 8107e4c:	689b      	ldr	r3, [r3, #8]
 8107e4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8107e52:	d10d      	bne.n	8107e70 <UART_Start_Receive_IT+0x9c>
 8107e54:	68fb      	ldr	r3, [r7, #12]
 8107e56:	691b      	ldr	r3, [r3, #16]
 8107e58:	2b00      	cmp	r3, #0
 8107e5a:	d104      	bne.n	8107e66 <UART_Start_Receive_IT+0x92>
 8107e5c:	68fb      	ldr	r3, [r7, #12]
 8107e5e:	227f      	movs	r2, #127	; 0x7f
 8107e60:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8107e64:	e008      	b.n	8107e78 <UART_Start_Receive_IT+0xa4>
 8107e66:	68fb      	ldr	r3, [r7, #12]
 8107e68:	223f      	movs	r2, #63	; 0x3f
 8107e6a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8107e6e:	e003      	b.n	8107e78 <UART_Start_Receive_IT+0xa4>
 8107e70:	68fb      	ldr	r3, [r7, #12]
 8107e72:	2200      	movs	r2, #0
 8107e74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8107e78:	68fb      	ldr	r3, [r7, #12]
 8107e7a:	2200      	movs	r2, #0
 8107e7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8107e80:	68fb      	ldr	r3, [r7, #12]
 8107e82:	2222      	movs	r2, #34	; 0x22
 8107e84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8107e88:	68fb      	ldr	r3, [r7, #12]
 8107e8a:	681b      	ldr	r3, [r3, #0]
 8107e8c:	3308      	adds	r3, #8
 8107e8e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107e90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8107e92:	e853 3f00 	ldrex	r3, [r3]
 8107e96:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8107e98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8107e9a:	f043 0301 	orr.w	r3, r3, #1
 8107e9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8107ea2:	68fb      	ldr	r3, [r7, #12]
 8107ea4:	681b      	ldr	r3, [r3, #0]
 8107ea6:	3308      	adds	r3, #8
 8107ea8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8107eac:	673a      	str	r2, [r7, #112]	; 0x70
 8107eae:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107eb0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8107eb2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8107eb4:	e841 2300 	strex	r3, r2, [r1]
 8107eb8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8107eba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8107ebc:	2b00      	cmp	r3, #0
 8107ebe:	d1e3      	bne.n	8107e88 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8107ec0:	68fb      	ldr	r3, [r7, #12]
 8107ec2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8107ec4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107ec8:	d153      	bne.n	8107f72 <UART_Start_Receive_IT+0x19e>
 8107eca:	68fb      	ldr	r3, [r7, #12]
 8107ecc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8107ed0:	88fa      	ldrh	r2, [r7, #6]
 8107ed2:	429a      	cmp	r2, r3
 8107ed4:	d34d      	bcc.n	8107f72 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8107ed6:	68fb      	ldr	r3, [r7, #12]
 8107ed8:	689b      	ldr	r3, [r3, #8]
 8107eda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8107ede:	d107      	bne.n	8107ef0 <UART_Start_Receive_IT+0x11c>
 8107ee0:	68fb      	ldr	r3, [r7, #12]
 8107ee2:	691b      	ldr	r3, [r3, #16]
 8107ee4:	2b00      	cmp	r3, #0
 8107ee6:	d103      	bne.n	8107ef0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8107ee8:	68fb      	ldr	r3, [r7, #12]
 8107eea:	4a4b      	ldr	r2, [pc, #300]	; (8108018 <UART_Start_Receive_IT+0x244>)
 8107eec:	671a      	str	r2, [r3, #112]	; 0x70
 8107eee:	e002      	b.n	8107ef6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8107ef0:	68fb      	ldr	r3, [r7, #12]
 8107ef2:	4a4a      	ldr	r2, [pc, #296]	; (810801c <UART_Start_Receive_IT+0x248>)
 8107ef4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8107ef6:	68fb      	ldr	r3, [r7, #12]
 8107ef8:	2200      	movs	r2, #0
 8107efa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8107efe:	68fb      	ldr	r3, [r7, #12]
 8107f00:	691b      	ldr	r3, [r3, #16]
 8107f02:	2b00      	cmp	r3, #0
 8107f04:	d01a      	beq.n	8107f3c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8107f06:	68fb      	ldr	r3, [r7, #12]
 8107f08:	681b      	ldr	r3, [r3, #0]
 8107f0a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107f0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8107f0e:	e853 3f00 	ldrex	r3, [r3]
 8107f12:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8107f14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8107f16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8107f1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8107f1e:	68fb      	ldr	r3, [r7, #12]
 8107f20:	681b      	ldr	r3, [r3, #0]
 8107f22:	461a      	mov	r2, r3
 8107f24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8107f28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8107f2a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107f2c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8107f2e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8107f30:	e841 2300 	strex	r3, r2, [r1]
 8107f34:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8107f36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8107f38:	2b00      	cmp	r3, #0
 8107f3a:	d1e4      	bne.n	8107f06 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8107f3c:	68fb      	ldr	r3, [r7, #12]
 8107f3e:	681b      	ldr	r3, [r3, #0]
 8107f40:	3308      	adds	r3, #8
 8107f42:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107f44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8107f46:	e853 3f00 	ldrex	r3, [r3]
 8107f4a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8107f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107f4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8107f52:	67fb      	str	r3, [r7, #124]	; 0x7c
 8107f54:	68fb      	ldr	r3, [r7, #12]
 8107f56:	681b      	ldr	r3, [r3, #0]
 8107f58:	3308      	adds	r3, #8
 8107f5a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8107f5c:	64ba      	str	r2, [r7, #72]	; 0x48
 8107f5e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107f60:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8107f62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8107f64:	e841 2300 	strex	r3, r2, [r1]
 8107f68:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8107f6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8107f6c:	2b00      	cmp	r3, #0
 8107f6e:	d1e5      	bne.n	8107f3c <UART_Start_Receive_IT+0x168>
 8107f70:	e04a      	b.n	8108008 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8107f72:	68fb      	ldr	r3, [r7, #12]
 8107f74:	689b      	ldr	r3, [r3, #8]
 8107f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8107f7a:	d107      	bne.n	8107f8c <UART_Start_Receive_IT+0x1b8>
 8107f7c:	68fb      	ldr	r3, [r7, #12]
 8107f7e:	691b      	ldr	r3, [r3, #16]
 8107f80:	2b00      	cmp	r3, #0
 8107f82:	d103      	bne.n	8107f8c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8107f84:	68fb      	ldr	r3, [r7, #12]
 8107f86:	4a26      	ldr	r2, [pc, #152]	; (8108020 <UART_Start_Receive_IT+0x24c>)
 8107f88:	671a      	str	r2, [r3, #112]	; 0x70
 8107f8a:	e002      	b.n	8107f92 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8107f8c:	68fb      	ldr	r3, [r7, #12]
 8107f8e:	4a25      	ldr	r2, [pc, #148]	; (8108024 <UART_Start_Receive_IT+0x250>)
 8107f90:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8107f92:	68fb      	ldr	r3, [r7, #12]
 8107f94:	2200      	movs	r2, #0
 8107f96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8107f9a:	68fb      	ldr	r3, [r7, #12]
 8107f9c:	691b      	ldr	r3, [r3, #16]
 8107f9e:	2b00      	cmp	r3, #0
 8107fa0:	d019      	beq.n	8107fd6 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8107fa2:	68fb      	ldr	r3, [r7, #12]
 8107fa4:	681b      	ldr	r3, [r3, #0]
 8107fa6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107faa:	e853 3f00 	ldrex	r3, [r3]
 8107fae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8107fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8107fb2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8107fb6:	677b      	str	r3, [r7, #116]	; 0x74
 8107fb8:	68fb      	ldr	r3, [r7, #12]
 8107fba:	681b      	ldr	r3, [r3, #0]
 8107fbc:	461a      	mov	r2, r3
 8107fbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8107fc0:	637b      	str	r3, [r7, #52]	; 0x34
 8107fc2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107fc4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8107fc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8107fc8:	e841 2300 	strex	r3, r2, [r1]
 8107fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8107fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107fd0:	2b00      	cmp	r3, #0
 8107fd2:	d1e6      	bne.n	8107fa2 <UART_Start_Receive_IT+0x1ce>
 8107fd4:	e018      	b.n	8108008 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8107fd6:	68fb      	ldr	r3, [r7, #12]
 8107fd8:	681b      	ldr	r3, [r3, #0]
 8107fda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107fdc:	697b      	ldr	r3, [r7, #20]
 8107fde:	e853 3f00 	ldrex	r3, [r3]
 8107fe2:	613b      	str	r3, [r7, #16]
   return(result);
 8107fe4:	693b      	ldr	r3, [r7, #16]
 8107fe6:	f043 0320 	orr.w	r3, r3, #32
 8107fea:	67bb      	str	r3, [r7, #120]	; 0x78
 8107fec:	68fb      	ldr	r3, [r7, #12]
 8107fee:	681b      	ldr	r3, [r3, #0]
 8107ff0:	461a      	mov	r2, r3
 8107ff2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8107ff4:	623b      	str	r3, [r7, #32]
 8107ff6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107ff8:	69f9      	ldr	r1, [r7, #28]
 8107ffa:	6a3a      	ldr	r2, [r7, #32]
 8107ffc:	e841 2300 	strex	r3, r2, [r1]
 8108000:	61bb      	str	r3, [r7, #24]
   return(result);
 8108002:	69bb      	ldr	r3, [r7, #24]
 8108004:	2b00      	cmp	r3, #0
 8108006:	d1e6      	bne.n	8107fd6 <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 8108008:	2300      	movs	r3, #0
}
 810800a:	4618      	mov	r0, r3
 810800c:	378c      	adds	r7, #140	; 0x8c
 810800e:	46bd      	mov	sp, r7
 8108010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108014:	4770      	bx	lr
 8108016:	bf00      	nop
 8108018:	08108a75 	.word	0x08108a75
 810801c:	0810877d 	.word	0x0810877d
 8108020:	0810861b 	.word	0x0810861b
 8108024:	081084bb 	.word	0x081084bb

08108028 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8108028:	b480      	push	{r7}
 810802a:	b095      	sub	sp, #84	; 0x54
 810802c:	af00      	add	r7, sp, #0
 810802e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8108030:	687b      	ldr	r3, [r7, #4]
 8108032:	681b      	ldr	r3, [r3, #0]
 8108034:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8108038:	e853 3f00 	ldrex	r3, [r3]
 810803c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 810803e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108040:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8108044:	64fb      	str	r3, [r7, #76]	; 0x4c
 8108046:	687b      	ldr	r3, [r7, #4]
 8108048:	681b      	ldr	r3, [r3, #0]
 810804a:	461a      	mov	r2, r3
 810804c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810804e:	643b      	str	r3, [r7, #64]	; 0x40
 8108050:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108052:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8108054:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8108056:	e841 2300 	strex	r3, r2, [r1]
 810805a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 810805c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810805e:	2b00      	cmp	r3, #0
 8108060:	d1e6      	bne.n	8108030 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8108062:	687b      	ldr	r3, [r7, #4]
 8108064:	681b      	ldr	r3, [r3, #0]
 8108066:	3308      	adds	r3, #8
 8108068:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810806a:	6a3b      	ldr	r3, [r7, #32]
 810806c:	e853 3f00 	ldrex	r3, [r3]
 8108070:	61fb      	str	r3, [r7, #28]
   return(result);
 8108072:	69fb      	ldr	r3, [r7, #28]
 8108074:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8108078:	f023 0301 	bic.w	r3, r3, #1
 810807c:	64bb      	str	r3, [r7, #72]	; 0x48
 810807e:	687b      	ldr	r3, [r7, #4]
 8108080:	681b      	ldr	r3, [r3, #0]
 8108082:	3308      	adds	r3, #8
 8108084:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8108086:	62fa      	str	r2, [r7, #44]	; 0x2c
 8108088:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810808a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810808c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810808e:	e841 2300 	strex	r3, r2, [r1]
 8108092:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8108094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108096:	2b00      	cmp	r3, #0
 8108098:	d1e3      	bne.n	8108062 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810809a:	687b      	ldr	r3, [r7, #4]
 810809c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810809e:	2b01      	cmp	r3, #1
 81080a0:	d118      	bne.n	81080d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 81080a2:	687b      	ldr	r3, [r7, #4]
 81080a4:	681b      	ldr	r3, [r3, #0]
 81080a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81080a8:	68fb      	ldr	r3, [r7, #12]
 81080aa:	e853 3f00 	ldrex	r3, [r3]
 81080ae:	60bb      	str	r3, [r7, #8]
   return(result);
 81080b0:	68bb      	ldr	r3, [r7, #8]
 81080b2:	f023 0310 	bic.w	r3, r3, #16
 81080b6:	647b      	str	r3, [r7, #68]	; 0x44
 81080b8:	687b      	ldr	r3, [r7, #4]
 81080ba:	681b      	ldr	r3, [r3, #0]
 81080bc:	461a      	mov	r2, r3
 81080be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81080c0:	61bb      	str	r3, [r7, #24]
 81080c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81080c4:	6979      	ldr	r1, [r7, #20]
 81080c6:	69ba      	ldr	r2, [r7, #24]
 81080c8:	e841 2300 	strex	r3, r2, [r1]
 81080cc:	613b      	str	r3, [r7, #16]
   return(result);
 81080ce:	693b      	ldr	r3, [r7, #16]
 81080d0:	2b00      	cmp	r3, #0
 81080d2:	d1e6      	bne.n	81080a2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 81080d4:	687b      	ldr	r3, [r7, #4]
 81080d6:	2220      	movs	r2, #32
 81080d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 81080dc:	687b      	ldr	r3, [r7, #4]
 81080de:	2200      	movs	r2, #0
 81080e0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 81080e2:	687b      	ldr	r3, [r7, #4]
 81080e4:	2200      	movs	r2, #0
 81080e6:	671a      	str	r2, [r3, #112]	; 0x70
}
 81080e8:	bf00      	nop
 81080ea:	3754      	adds	r7, #84	; 0x54
 81080ec:	46bd      	mov	sp, r7
 81080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81080f2:	4770      	bx	lr

081080f4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 81080f4:	b580      	push	{r7, lr}
 81080f6:	b084      	sub	sp, #16
 81080f8:	af00      	add	r7, sp, #0
 81080fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 81080fc:	687b      	ldr	r3, [r7, #4]
 81080fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108100:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8108102:	68fb      	ldr	r3, [r7, #12]
 8108104:	2200      	movs	r2, #0
 8108106:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 810810a:	68fb      	ldr	r3, [r7, #12]
 810810c:	2200      	movs	r2, #0
 810810e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8108112:	68f8      	ldr	r0, [r7, #12]
 8108114:	f7fe ff2a 	bl	8106f6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8108118:	bf00      	nop
 810811a:	3710      	adds	r7, #16
 810811c:	46bd      	mov	sp, r7
 810811e:	bd80      	pop	{r7, pc}

08108120 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8108120:	b480      	push	{r7}
 8108122:	b08f      	sub	sp, #60	; 0x3c
 8108124:	af00      	add	r7, sp, #0
 8108126:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8108128:	687b      	ldr	r3, [r7, #4]
 810812a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810812e:	2b21      	cmp	r3, #33	; 0x21
 8108130:	d14c      	bne.n	81081cc <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8108132:	687b      	ldr	r3, [r7, #4]
 8108134:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8108138:	b29b      	uxth	r3, r3
 810813a:	2b00      	cmp	r3, #0
 810813c:	d132      	bne.n	81081a4 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 810813e:	687b      	ldr	r3, [r7, #4]
 8108140:	681b      	ldr	r3, [r3, #0]
 8108142:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108144:	6a3b      	ldr	r3, [r7, #32]
 8108146:	e853 3f00 	ldrex	r3, [r3]
 810814a:	61fb      	str	r3, [r7, #28]
   return(result);
 810814c:	69fb      	ldr	r3, [r7, #28]
 810814e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8108152:	637b      	str	r3, [r7, #52]	; 0x34
 8108154:	687b      	ldr	r3, [r7, #4]
 8108156:	681b      	ldr	r3, [r3, #0]
 8108158:	461a      	mov	r2, r3
 810815a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810815c:	62fb      	str	r3, [r7, #44]	; 0x2c
 810815e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108160:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8108162:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8108164:	e841 2300 	strex	r3, r2, [r1]
 8108168:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 810816a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810816c:	2b00      	cmp	r3, #0
 810816e:	d1e6      	bne.n	810813e <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8108170:	687b      	ldr	r3, [r7, #4]
 8108172:	681b      	ldr	r3, [r3, #0]
 8108174:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108176:	68fb      	ldr	r3, [r7, #12]
 8108178:	e853 3f00 	ldrex	r3, [r3]
 810817c:	60bb      	str	r3, [r7, #8]
   return(result);
 810817e:	68bb      	ldr	r3, [r7, #8]
 8108180:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8108184:	633b      	str	r3, [r7, #48]	; 0x30
 8108186:	687b      	ldr	r3, [r7, #4]
 8108188:	681b      	ldr	r3, [r3, #0]
 810818a:	461a      	mov	r2, r3
 810818c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810818e:	61bb      	str	r3, [r7, #24]
 8108190:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108192:	6979      	ldr	r1, [r7, #20]
 8108194:	69ba      	ldr	r2, [r7, #24]
 8108196:	e841 2300 	strex	r3, r2, [r1]
 810819a:	613b      	str	r3, [r7, #16]
   return(result);
 810819c:	693b      	ldr	r3, [r7, #16]
 810819e:	2b00      	cmp	r3, #0
 81081a0:	d1e6      	bne.n	8108170 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 81081a2:	e013      	b.n	81081cc <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 81081a4:	687b      	ldr	r3, [r7, #4]
 81081a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81081a8:	781a      	ldrb	r2, [r3, #0]
 81081aa:	687b      	ldr	r3, [r7, #4]
 81081ac:	681b      	ldr	r3, [r3, #0]
 81081ae:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 81081b0:	687b      	ldr	r3, [r7, #4]
 81081b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81081b4:	1c5a      	adds	r2, r3, #1
 81081b6:	687b      	ldr	r3, [r7, #4]
 81081b8:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 81081ba:	687b      	ldr	r3, [r7, #4]
 81081bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 81081c0:	b29b      	uxth	r3, r3
 81081c2:	3b01      	subs	r3, #1
 81081c4:	b29a      	uxth	r2, r3
 81081c6:	687b      	ldr	r3, [r7, #4]
 81081c8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 81081cc:	bf00      	nop
 81081ce:	373c      	adds	r7, #60	; 0x3c
 81081d0:	46bd      	mov	sp, r7
 81081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81081d6:	4770      	bx	lr

081081d8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 81081d8:	b480      	push	{r7}
 81081da:	b091      	sub	sp, #68	; 0x44
 81081dc:	af00      	add	r7, sp, #0
 81081de:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 81081e0:	687b      	ldr	r3, [r7, #4]
 81081e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81081e6:	2b21      	cmp	r3, #33	; 0x21
 81081e8:	d151      	bne.n	810828e <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 81081ea:	687b      	ldr	r3, [r7, #4]
 81081ec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 81081f0:	b29b      	uxth	r3, r3
 81081f2:	2b00      	cmp	r3, #0
 81081f4:	d132      	bne.n	810825c <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 81081f6:	687b      	ldr	r3, [r7, #4]
 81081f8:	681b      	ldr	r3, [r3, #0]
 81081fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81081fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81081fe:	e853 3f00 	ldrex	r3, [r3]
 8108202:	623b      	str	r3, [r7, #32]
   return(result);
 8108204:	6a3b      	ldr	r3, [r7, #32]
 8108206:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 810820a:	63bb      	str	r3, [r7, #56]	; 0x38
 810820c:	687b      	ldr	r3, [r7, #4]
 810820e:	681b      	ldr	r3, [r3, #0]
 8108210:	461a      	mov	r2, r3
 8108212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108214:	633b      	str	r3, [r7, #48]	; 0x30
 8108216:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108218:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 810821a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810821c:	e841 2300 	strex	r3, r2, [r1]
 8108220:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8108222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108224:	2b00      	cmp	r3, #0
 8108226:	d1e6      	bne.n	81081f6 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8108228:	687b      	ldr	r3, [r7, #4]
 810822a:	681b      	ldr	r3, [r3, #0]
 810822c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810822e:	693b      	ldr	r3, [r7, #16]
 8108230:	e853 3f00 	ldrex	r3, [r3]
 8108234:	60fb      	str	r3, [r7, #12]
   return(result);
 8108236:	68fb      	ldr	r3, [r7, #12]
 8108238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810823c:	637b      	str	r3, [r7, #52]	; 0x34
 810823e:	687b      	ldr	r3, [r7, #4]
 8108240:	681b      	ldr	r3, [r3, #0]
 8108242:	461a      	mov	r2, r3
 8108244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8108246:	61fb      	str	r3, [r7, #28]
 8108248:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810824a:	69b9      	ldr	r1, [r7, #24]
 810824c:	69fa      	ldr	r2, [r7, #28]
 810824e:	e841 2300 	strex	r3, r2, [r1]
 8108252:	617b      	str	r3, [r7, #20]
   return(result);
 8108254:	697b      	ldr	r3, [r7, #20]
 8108256:	2b00      	cmp	r3, #0
 8108258:	d1e6      	bne.n	8108228 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 810825a:	e018      	b.n	810828e <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 810825c:	687b      	ldr	r3, [r7, #4]
 810825e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8108260:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8108262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108264:	881b      	ldrh	r3, [r3, #0]
 8108266:	461a      	mov	r2, r3
 8108268:	687b      	ldr	r3, [r7, #4]
 810826a:	681b      	ldr	r3, [r3, #0]
 810826c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8108270:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8108272:	687b      	ldr	r3, [r7, #4]
 8108274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8108276:	1c9a      	adds	r2, r3, #2
 8108278:	687b      	ldr	r3, [r7, #4]
 810827a:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 810827c:	687b      	ldr	r3, [r7, #4]
 810827e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8108282:	b29b      	uxth	r3, r3
 8108284:	3b01      	subs	r3, #1
 8108286:	b29a      	uxth	r2, r3
 8108288:	687b      	ldr	r3, [r7, #4]
 810828a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 810828e:	bf00      	nop
 8108290:	3744      	adds	r7, #68	; 0x44
 8108292:	46bd      	mov	sp, r7
 8108294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108298:	4770      	bx	lr

0810829a <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 810829a:	b480      	push	{r7}
 810829c:	b091      	sub	sp, #68	; 0x44
 810829e:	af00      	add	r7, sp, #0
 81082a0:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 81082a2:	687b      	ldr	r3, [r7, #4]
 81082a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81082a8:	2b21      	cmp	r3, #33	; 0x21
 81082aa:	d160      	bne.n	810836e <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 81082ac:	687b      	ldr	r3, [r7, #4]
 81082ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81082b2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 81082b4:	e057      	b.n	8108366 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 81082b6:	687b      	ldr	r3, [r7, #4]
 81082b8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 81082bc:	b29b      	uxth	r3, r3
 81082be:	2b00      	cmp	r3, #0
 81082c0:	d133      	bne.n	810832a <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 81082c2:	687b      	ldr	r3, [r7, #4]
 81082c4:	681b      	ldr	r3, [r3, #0]
 81082c6:	3308      	adds	r3, #8
 81082c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81082ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81082cc:	e853 3f00 	ldrex	r3, [r3]
 81082d0:	623b      	str	r3, [r7, #32]
   return(result);
 81082d2:	6a3b      	ldr	r3, [r7, #32]
 81082d4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 81082d8:	63bb      	str	r3, [r7, #56]	; 0x38
 81082da:	687b      	ldr	r3, [r7, #4]
 81082dc:	681b      	ldr	r3, [r3, #0]
 81082de:	3308      	adds	r3, #8
 81082e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 81082e2:	633a      	str	r2, [r7, #48]	; 0x30
 81082e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81082e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 81082e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81082ea:	e841 2300 	strex	r3, r2, [r1]
 81082ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 81082f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81082f2:	2b00      	cmp	r3, #0
 81082f4:	d1e5      	bne.n	81082c2 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 81082f6:	687b      	ldr	r3, [r7, #4]
 81082f8:	681b      	ldr	r3, [r3, #0]
 81082fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81082fc:	693b      	ldr	r3, [r7, #16]
 81082fe:	e853 3f00 	ldrex	r3, [r3]
 8108302:	60fb      	str	r3, [r7, #12]
   return(result);
 8108304:	68fb      	ldr	r3, [r7, #12]
 8108306:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810830a:	637b      	str	r3, [r7, #52]	; 0x34
 810830c:	687b      	ldr	r3, [r7, #4]
 810830e:	681b      	ldr	r3, [r3, #0]
 8108310:	461a      	mov	r2, r3
 8108312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8108314:	61fb      	str	r3, [r7, #28]
 8108316:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108318:	69b9      	ldr	r1, [r7, #24]
 810831a:	69fa      	ldr	r2, [r7, #28]
 810831c:	e841 2300 	strex	r3, r2, [r1]
 8108320:	617b      	str	r3, [r7, #20]
   return(result);
 8108322:	697b      	ldr	r3, [r7, #20]
 8108324:	2b00      	cmp	r3, #0
 8108326:	d1e6      	bne.n	81082f6 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8108328:	e021      	b.n	810836e <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 810832a:	687b      	ldr	r3, [r7, #4]
 810832c:	681b      	ldr	r3, [r3, #0]
 810832e:	69db      	ldr	r3, [r3, #28]
 8108330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8108334:	2b00      	cmp	r3, #0
 8108336:	d013      	beq.n	8108360 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8108338:	687b      	ldr	r3, [r7, #4]
 810833a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810833c:	781a      	ldrb	r2, [r3, #0]
 810833e:	687b      	ldr	r3, [r7, #4]
 8108340:	681b      	ldr	r3, [r3, #0]
 8108342:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8108344:	687b      	ldr	r3, [r7, #4]
 8108346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8108348:	1c5a      	adds	r2, r3, #1
 810834a:	687b      	ldr	r3, [r7, #4]
 810834c:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 810834e:	687b      	ldr	r3, [r7, #4]
 8108350:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8108354:	b29b      	uxth	r3, r3
 8108356:	3b01      	subs	r3, #1
 8108358:	b29a      	uxth	r2, r3
 810835a:	687b      	ldr	r3, [r7, #4]
 810835c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8108360:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8108362:	3b01      	subs	r3, #1
 8108364:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8108366:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8108368:	2b00      	cmp	r3, #0
 810836a:	d1a4      	bne.n	81082b6 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 810836c:	e7ff      	b.n	810836e <UART_TxISR_8BIT_FIFOEN+0xd4>
 810836e:	bf00      	nop
 8108370:	3744      	adds	r7, #68	; 0x44
 8108372:	46bd      	mov	sp, r7
 8108374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108378:	4770      	bx	lr

0810837a <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 810837a:	b480      	push	{r7}
 810837c:	b091      	sub	sp, #68	; 0x44
 810837e:	af00      	add	r7, sp, #0
 8108380:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8108382:	687b      	ldr	r3, [r7, #4]
 8108384:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8108388:	2b21      	cmp	r3, #33	; 0x21
 810838a:	d165      	bne.n	8108458 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 810838c:	687b      	ldr	r3, [r7, #4]
 810838e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8108392:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8108394:	e05c      	b.n	8108450 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8108396:	687b      	ldr	r3, [r7, #4]
 8108398:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 810839c:	b29b      	uxth	r3, r3
 810839e:	2b00      	cmp	r3, #0
 81083a0:	d133      	bne.n	810840a <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 81083a2:	687b      	ldr	r3, [r7, #4]
 81083a4:	681b      	ldr	r3, [r3, #0]
 81083a6:	3308      	adds	r3, #8
 81083a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81083aa:	6a3b      	ldr	r3, [r7, #32]
 81083ac:	e853 3f00 	ldrex	r3, [r3]
 81083b0:	61fb      	str	r3, [r7, #28]
   return(result);
 81083b2:	69fb      	ldr	r3, [r7, #28]
 81083b4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 81083b8:	637b      	str	r3, [r7, #52]	; 0x34
 81083ba:	687b      	ldr	r3, [r7, #4]
 81083bc:	681b      	ldr	r3, [r3, #0]
 81083be:	3308      	adds	r3, #8
 81083c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81083c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 81083c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81083c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 81083c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 81083ca:	e841 2300 	strex	r3, r2, [r1]
 81083ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 81083d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81083d2:	2b00      	cmp	r3, #0
 81083d4:	d1e5      	bne.n	81083a2 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 81083d6:	687b      	ldr	r3, [r7, #4]
 81083d8:	681b      	ldr	r3, [r3, #0]
 81083da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81083dc:	68fb      	ldr	r3, [r7, #12]
 81083de:	e853 3f00 	ldrex	r3, [r3]
 81083e2:	60bb      	str	r3, [r7, #8]
   return(result);
 81083e4:	68bb      	ldr	r3, [r7, #8]
 81083e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81083ea:	633b      	str	r3, [r7, #48]	; 0x30
 81083ec:	687b      	ldr	r3, [r7, #4]
 81083ee:	681b      	ldr	r3, [r3, #0]
 81083f0:	461a      	mov	r2, r3
 81083f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81083f4:	61bb      	str	r3, [r7, #24]
 81083f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81083f8:	6979      	ldr	r1, [r7, #20]
 81083fa:	69ba      	ldr	r2, [r7, #24]
 81083fc:	e841 2300 	strex	r3, r2, [r1]
 8108400:	613b      	str	r3, [r7, #16]
   return(result);
 8108402:	693b      	ldr	r3, [r7, #16]
 8108404:	2b00      	cmp	r3, #0
 8108406:	d1e6      	bne.n	81083d6 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8108408:	e026      	b.n	8108458 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 810840a:	687b      	ldr	r3, [r7, #4]
 810840c:	681b      	ldr	r3, [r3, #0]
 810840e:	69db      	ldr	r3, [r3, #28]
 8108410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8108414:	2b00      	cmp	r3, #0
 8108416:	d018      	beq.n	810844a <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8108418:	687b      	ldr	r3, [r7, #4]
 810841a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810841c:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 810841e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108420:	881b      	ldrh	r3, [r3, #0]
 8108422:	461a      	mov	r2, r3
 8108424:	687b      	ldr	r3, [r7, #4]
 8108426:	681b      	ldr	r3, [r3, #0]
 8108428:	f3c2 0208 	ubfx	r2, r2, #0, #9
 810842c:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 810842e:	687b      	ldr	r3, [r7, #4]
 8108430:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8108432:	1c9a      	adds	r2, r3, #2
 8108434:	687b      	ldr	r3, [r7, #4]
 8108436:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8108438:	687b      	ldr	r3, [r7, #4]
 810843a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 810843e:	b29b      	uxth	r3, r3
 8108440:	3b01      	subs	r3, #1
 8108442:	b29a      	uxth	r2, r3
 8108444:	687b      	ldr	r3, [r7, #4]
 8108446:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 810844a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 810844c:	3b01      	subs	r3, #1
 810844e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8108450:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8108452:	2b00      	cmp	r3, #0
 8108454:	d19f      	bne.n	8108396 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8108456:	e7ff      	b.n	8108458 <UART_TxISR_16BIT_FIFOEN+0xde>
 8108458:	bf00      	nop
 810845a:	3744      	adds	r7, #68	; 0x44
 810845c:	46bd      	mov	sp, r7
 810845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108462:	4770      	bx	lr

08108464 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8108464:	b580      	push	{r7, lr}
 8108466:	b088      	sub	sp, #32
 8108468:	af00      	add	r7, sp, #0
 810846a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 810846c:	687b      	ldr	r3, [r7, #4]
 810846e:	681b      	ldr	r3, [r3, #0]
 8108470:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108472:	68fb      	ldr	r3, [r7, #12]
 8108474:	e853 3f00 	ldrex	r3, [r3]
 8108478:	60bb      	str	r3, [r7, #8]
   return(result);
 810847a:	68bb      	ldr	r3, [r7, #8]
 810847c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8108480:	61fb      	str	r3, [r7, #28]
 8108482:	687b      	ldr	r3, [r7, #4]
 8108484:	681b      	ldr	r3, [r3, #0]
 8108486:	461a      	mov	r2, r3
 8108488:	69fb      	ldr	r3, [r7, #28]
 810848a:	61bb      	str	r3, [r7, #24]
 810848c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810848e:	6979      	ldr	r1, [r7, #20]
 8108490:	69ba      	ldr	r2, [r7, #24]
 8108492:	e841 2300 	strex	r3, r2, [r1]
 8108496:	613b      	str	r3, [r7, #16]
   return(result);
 8108498:	693b      	ldr	r3, [r7, #16]
 810849a:	2b00      	cmp	r3, #0
 810849c:	d1e6      	bne.n	810846c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 810849e:	687b      	ldr	r3, [r7, #4]
 81084a0:	2220      	movs	r2, #32
 81084a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 81084a6:	687b      	ldr	r3, [r7, #4]
 81084a8:	2200      	movs	r2, #0
 81084aa:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 81084ac:	6878      	ldr	r0, [r7, #4]
 81084ae:	f7f8 ffcd 	bl	810144c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 81084b2:	bf00      	nop
 81084b4:	3720      	adds	r7, #32
 81084b6:	46bd      	mov	sp, r7
 81084b8:	bd80      	pop	{r7, pc}

081084ba <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 81084ba:	b580      	push	{r7, lr}
 81084bc:	b096      	sub	sp, #88	; 0x58
 81084be:	af00      	add	r7, sp, #0
 81084c0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 81084c2:	687b      	ldr	r3, [r7, #4]
 81084c4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 81084c8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 81084cc:	687b      	ldr	r3, [r7, #4]
 81084ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81084d2:	2b22      	cmp	r3, #34	; 0x22
 81084d4:	f040 8095 	bne.w	8108602 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 81084d8:	687b      	ldr	r3, [r7, #4]
 81084da:	681b      	ldr	r3, [r3, #0]
 81084dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81084de:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 81084e2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 81084e6:	b2d9      	uxtb	r1, r3
 81084e8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 81084ec:	b2da      	uxtb	r2, r3
 81084ee:	687b      	ldr	r3, [r7, #4]
 81084f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81084f2:	400a      	ands	r2, r1
 81084f4:	b2d2      	uxtb	r2, r2
 81084f6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 81084f8:	687b      	ldr	r3, [r7, #4]
 81084fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81084fc:	1c5a      	adds	r2, r3, #1
 81084fe:	687b      	ldr	r3, [r7, #4]
 8108500:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8108502:	687b      	ldr	r3, [r7, #4]
 8108504:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8108508:	b29b      	uxth	r3, r3
 810850a:	3b01      	subs	r3, #1
 810850c:	b29a      	uxth	r2, r3
 810850e:	687b      	ldr	r3, [r7, #4]
 8108510:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8108514:	687b      	ldr	r3, [r7, #4]
 8108516:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 810851a:	b29b      	uxth	r3, r3
 810851c:	2b00      	cmp	r3, #0
 810851e:	d178      	bne.n	8108612 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8108520:	687b      	ldr	r3, [r7, #4]
 8108522:	681b      	ldr	r3, [r3, #0]
 8108524:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108528:	e853 3f00 	ldrex	r3, [r3]
 810852c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 810852e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8108530:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8108534:	653b      	str	r3, [r7, #80]	; 0x50
 8108536:	687b      	ldr	r3, [r7, #4]
 8108538:	681b      	ldr	r3, [r3, #0]
 810853a:	461a      	mov	r2, r3
 810853c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 810853e:	647b      	str	r3, [r7, #68]	; 0x44
 8108540:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108542:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8108544:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8108546:	e841 2300 	strex	r3, r2, [r1]
 810854a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 810854c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810854e:	2b00      	cmp	r3, #0
 8108550:	d1e6      	bne.n	8108520 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8108552:	687b      	ldr	r3, [r7, #4]
 8108554:	681b      	ldr	r3, [r3, #0]
 8108556:	3308      	adds	r3, #8
 8108558:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810855a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810855c:	e853 3f00 	ldrex	r3, [r3]
 8108560:	623b      	str	r3, [r7, #32]
   return(result);
 8108562:	6a3b      	ldr	r3, [r7, #32]
 8108564:	f023 0301 	bic.w	r3, r3, #1
 8108568:	64fb      	str	r3, [r7, #76]	; 0x4c
 810856a:	687b      	ldr	r3, [r7, #4]
 810856c:	681b      	ldr	r3, [r3, #0]
 810856e:	3308      	adds	r3, #8
 8108570:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8108572:	633a      	str	r2, [r7, #48]	; 0x30
 8108574:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108576:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8108578:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810857a:	e841 2300 	strex	r3, r2, [r1]
 810857e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8108580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108582:	2b00      	cmp	r3, #0
 8108584:	d1e5      	bne.n	8108552 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8108586:	687b      	ldr	r3, [r7, #4]
 8108588:	2220      	movs	r2, #32
 810858a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 810858e:	687b      	ldr	r3, [r7, #4]
 8108590:	2200      	movs	r2, #0
 8108592:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8108594:	687b      	ldr	r3, [r7, #4]
 8108596:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8108598:	2b01      	cmp	r3, #1
 810859a:	d12e      	bne.n	81085fa <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810859c:	687b      	ldr	r3, [r7, #4]
 810859e:	2200      	movs	r2, #0
 81085a0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 81085a2:	687b      	ldr	r3, [r7, #4]
 81085a4:	681b      	ldr	r3, [r3, #0]
 81085a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81085a8:	693b      	ldr	r3, [r7, #16]
 81085aa:	e853 3f00 	ldrex	r3, [r3]
 81085ae:	60fb      	str	r3, [r7, #12]
   return(result);
 81085b0:	68fb      	ldr	r3, [r7, #12]
 81085b2:	f023 0310 	bic.w	r3, r3, #16
 81085b6:	64bb      	str	r3, [r7, #72]	; 0x48
 81085b8:	687b      	ldr	r3, [r7, #4]
 81085ba:	681b      	ldr	r3, [r3, #0]
 81085bc:	461a      	mov	r2, r3
 81085be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 81085c0:	61fb      	str	r3, [r7, #28]
 81085c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81085c4:	69b9      	ldr	r1, [r7, #24]
 81085c6:	69fa      	ldr	r2, [r7, #28]
 81085c8:	e841 2300 	strex	r3, r2, [r1]
 81085cc:	617b      	str	r3, [r7, #20]
   return(result);
 81085ce:	697b      	ldr	r3, [r7, #20]
 81085d0:	2b00      	cmp	r3, #0
 81085d2:	d1e6      	bne.n	81085a2 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 81085d4:	687b      	ldr	r3, [r7, #4]
 81085d6:	681b      	ldr	r3, [r3, #0]
 81085d8:	69db      	ldr	r3, [r3, #28]
 81085da:	f003 0310 	and.w	r3, r3, #16
 81085de:	2b10      	cmp	r3, #16
 81085e0:	d103      	bne.n	81085ea <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 81085e2:	687b      	ldr	r3, [r7, #4]
 81085e4:	681b      	ldr	r3, [r3, #0]
 81085e6:	2210      	movs	r2, #16
 81085e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 81085ea:	687b      	ldr	r3, [r7, #4]
 81085ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 81085f0:	4619      	mov	r1, r3
 81085f2:	6878      	ldr	r0, [r7, #4]
 81085f4:	f7fe fcc4 	bl	8106f80 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 81085f8:	e00b      	b.n	8108612 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 81085fa:	6878      	ldr	r0, [r7, #4]
 81085fc:	f7f8 ff30 	bl	8101460 <HAL_UART_RxCpltCallback>
}
 8108600:	e007      	b.n	8108612 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8108602:	687b      	ldr	r3, [r7, #4]
 8108604:	681b      	ldr	r3, [r3, #0]
 8108606:	699a      	ldr	r2, [r3, #24]
 8108608:	687b      	ldr	r3, [r7, #4]
 810860a:	681b      	ldr	r3, [r3, #0]
 810860c:	f042 0208 	orr.w	r2, r2, #8
 8108610:	619a      	str	r2, [r3, #24]
}
 8108612:	bf00      	nop
 8108614:	3758      	adds	r7, #88	; 0x58
 8108616:	46bd      	mov	sp, r7
 8108618:	bd80      	pop	{r7, pc}

0810861a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 810861a:	b580      	push	{r7, lr}
 810861c:	b096      	sub	sp, #88	; 0x58
 810861e:	af00      	add	r7, sp, #0
 8108620:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8108622:	687b      	ldr	r3, [r7, #4]
 8108624:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8108628:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 810862c:	687b      	ldr	r3, [r7, #4]
 810862e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8108632:	2b22      	cmp	r3, #34	; 0x22
 8108634:	f040 8095 	bne.w	8108762 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8108638:	687b      	ldr	r3, [r7, #4]
 810863a:	681b      	ldr	r3, [r3, #0]
 810863c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810863e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8108642:	687b      	ldr	r3, [r7, #4]
 8108644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108646:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8108648:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 810864c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8108650:	4013      	ands	r3, r2
 8108652:	b29a      	uxth	r2, r3
 8108654:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8108656:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8108658:	687b      	ldr	r3, [r7, #4]
 810865a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810865c:	1c9a      	adds	r2, r3, #2
 810865e:	687b      	ldr	r3, [r7, #4]
 8108660:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8108662:	687b      	ldr	r3, [r7, #4]
 8108664:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8108668:	b29b      	uxth	r3, r3
 810866a:	3b01      	subs	r3, #1
 810866c:	b29a      	uxth	r2, r3
 810866e:	687b      	ldr	r3, [r7, #4]
 8108670:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8108674:	687b      	ldr	r3, [r7, #4]
 8108676:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 810867a:	b29b      	uxth	r3, r3
 810867c:	2b00      	cmp	r3, #0
 810867e:	d178      	bne.n	8108772 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8108680:	687b      	ldr	r3, [r7, #4]
 8108682:	681b      	ldr	r3, [r3, #0]
 8108684:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8108688:	e853 3f00 	ldrex	r3, [r3]
 810868c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 810868e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108690:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8108694:	64fb      	str	r3, [r7, #76]	; 0x4c
 8108696:	687b      	ldr	r3, [r7, #4]
 8108698:	681b      	ldr	r3, [r3, #0]
 810869a:	461a      	mov	r2, r3
 810869c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810869e:	643b      	str	r3, [r7, #64]	; 0x40
 81086a0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81086a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 81086a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 81086a6:	e841 2300 	strex	r3, r2, [r1]
 81086aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 81086ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81086ae:	2b00      	cmp	r3, #0
 81086b0:	d1e6      	bne.n	8108680 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 81086b2:	687b      	ldr	r3, [r7, #4]
 81086b4:	681b      	ldr	r3, [r3, #0]
 81086b6:	3308      	adds	r3, #8
 81086b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81086ba:	6a3b      	ldr	r3, [r7, #32]
 81086bc:	e853 3f00 	ldrex	r3, [r3]
 81086c0:	61fb      	str	r3, [r7, #28]
   return(result);
 81086c2:	69fb      	ldr	r3, [r7, #28]
 81086c4:	f023 0301 	bic.w	r3, r3, #1
 81086c8:	64bb      	str	r3, [r7, #72]	; 0x48
 81086ca:	687b      	ldr	r3, [r7, #4]
 81086cc:	681b      	ldr	r3, [r3, #0]
 81086ce:	3308      	adds	r3, #8
 81086d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 81086d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 81086d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81086d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 81086d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 81086da:	e841 2300 	strex	r3, r2, [r1]
 81086de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 81086e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81086e2:	2b00      	cmp	r3, #0
 81086e4:	d1e5      	bne.n	81086b2 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 81086e6:	687b      	ldr	r3, [r7, #4]
 81086e8:	2220      	movs	r2, #32
 81086ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 81086ee:	687b      	ldr	r3, [r7, #4]
 81086f0:	2200      	movs	r2, #0
 81086f2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 81086f4:	687b      	ldr	r3, [r7, #4]
 81086f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81086f8:	2b01      	cmp	r3, #1
 81086fa:	d12e      	bne.n	810875a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 81086fc:	687b      	ldr	r3, [r7, #4]
 81086fe:	2200      	movs	r2, #0
 8108700:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8108702:	687b      	ldr	r3, [r7, #4]
 8108704:	681b      	ldr	r3, [r3, #0]
 8108706:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108708:	68fb      	ldr	r3, [r7, #12]
 810870a:	e853 3f00 	ldrex	r3, [r3]
 810870e:	60bb      	str	r3, [r7, #8]
   return(result);
 8108710:	68bb      	ldr	r3, [r7, #8]
 8108712:	f023 0310 	bic.w	r3, r3, #16
 8108716:	647b      	str	r3, [r7, #68]	; 0x44
 8108718:	687b      	ldr	r3, [r7, #4]
 810871a:	681b      	ldr	r3, [r3, #0]
 810871c:	461a      	mov	r2, r3
 810871e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8108720:	61bb      	str	r3, [r7, #24]
 8108722:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108724:	6979      	ldr	r1, [r7, #20]
 8108726:	69ba      	ldr	r2, [r7, #24]
 8108728:	e841 2300 	strex	r3, r2, [r1]
 810872c:	613b      	str	r3, [r7, #16]
   return(result);
 810872e:	693b      	ldr	r3, [r7, #16]
 8108730:	2b00      	cmp	r3, #0
 8108732:	d1e6      	bne.n	8108702 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8108734:	687b      	ldr	r3, [r7, #4]
 8108736:	681b      	ldr	r3, [r3, #0]
 8108738:	69db      	ldr	r3, [r3, #28]
 810873a:	f003 0310 	and.w	r3, r3, #16
 810873e:	2b10      	cmp	r3, #16
 8108740:	d103      	bne.n	810874a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8108742:	687b      	ldr	r3, [r7, #4]
 8108744:	681b      	ldr	r3, [r3, #0]
 8108746:	2210      	movs	r2, #16
 8108748:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 810874a:	687b      	ldr	r3, [r7, #4]
 810874c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8108750:	4619      	mov	r1, r3
 8108752:	6878      	ldr	r0, [r7, #4]
 8108754:	f7fe fc14 	bl	8106f80 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8108758:	e00b      	b.n	8108772 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 810875a:	6878      	ldr	r0, [r7, #4]
 810875c:	f7f8 fe80 	bl	8101460 <HAL_UART_RxCpltCallback>
}
 8108760:	e007      	b.n	8108772 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8108762:	687b      	ldr	r3, [r7, #4]
 8108764:	681b      	ldr	r3, [r3, #0]
 8108766:	699a      	ldr	r2, [r3, #24]
 8108768:	687b      	ldr	r3, [r7, #4]
 810876a:	681b      	ldr	r3, [r3, #0]
 810876c:	f042 0208 	orr.w	r2, r2, #8
 8108770:	619a      	str	r2, [r3, #24]
}
 8108772:	bf00      	nop
 8108774:	3758      	adds	r7, #88	; 0x58
 8108776:	46bd      	mov	sp, r7
 8108778:	bd80      	pop	{r7, pc}
	...

0810877c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 810877c:	b580      	push	{r7, lr}
 810877e:	b0a6      	sub	sp, #152	; 0x98
 8108780:	af00      	add	r7, sp, #0
 8108782:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8108784:	687b      	ldr	r3, [r7, #4]
 8108786:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 810878a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 810878e:	687b      	ldr	r3, [r7, #4]
 8108790:	681b      	ldr	r3, [r3, #0]
 8108792:	69db      	ldr	r3, [r3, #28]
 8108794:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8108798:	687b      	ldr	r3, [r7, #4]
 810879a:	681b      	ldr	r3, [r3, #0]
 810879c:	681b      	ldr	r3, [r3, #0]
 810879e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 81087a2:	687b      	ldr	r3, [r7, #4]
 81087a4:	681b      	ldr	r3, [r3, #0]
 81087a6:	689b      	ldr	r3, [r3, #8]
 81087a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 81087ac:	687b      	ldr	r3, [r7, #4]
 81087ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81087b2:	2b22      	cmp	r3, #34	; 0x22
 81087b4:	f040 814f 	bne.w	8108a56 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 81087b8:	687b      	ldr	r3, [r7, #4]
 81087ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 81087be:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 81087c2:	e0f6      	b.n	81089b2 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 81087c4:	687b      	ldr	r3, [r7, #4]
 81087c6:	681b      	ldr	r3, [r3, #0]
 81087c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81087ca:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 81087ce:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 81087d2:	b2d9      	uxtb	r1, r3
 81087d4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 81087d8:	b2da      	uxtb	r2, r3
 81087da:	687b      	ldr	r3, [r7, #4]
 81087dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81087de:	400a      	ands	r2, r1
 81087e0:	b2d2      	uxtb	r2, r2
 81087e2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 81087e4:	687b      	ldr	r3, [r7, #4]
 81087e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81087e8:	1c5a      	adds	r2, r3, #1
 81087ea:	687b      	ldr	r3, [r7, #4]
 81087ec:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 81087ee:	687b      	ldr	r3, [r7, #4]
 81087f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 81087f4:	b29b      	uxth	r3, r3
 81087f6:	3b01      	subs	r3, #1
 81087f8:	b29a      	uxth	r2, r3
 81087fa:	687b      	ldr	r3, [r7, #4]
 81087fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8108800:	687b      	ldr	r3, [r7, #4]
 8108802:	681b      	ldr	r3, [r3, #0]
 8108804:	69db      	ldr	r3, [r3, #28]
 8108806:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 810880a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 810880e:	f003 0307 	and.w	r3, r3, #7
 8108812:	2b00      	cmp	r3, #0
 8108814:	d053      	beq.n	81088be <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8108816:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 810881a:	f003 0301 	and.w	r3, r3, #1
 810881e:	2b00      	cmp	r3, #0
 8108820:	d011      	beq.n	8108846 <UART_RxISR_8BIT_FIFOEN+0xca>
 8108822:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8108826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810882a:	2b00      	cmp	r3, #0
 810882c:	d00b      	beq.n	8108846 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 810882e:	687b      	ldr	r3, [r7, #4]
 8108830:	681b      	ldr	r3, [r3, #0]
 8108832:	2201      	movs	r2, #1
 8108834:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8108836:	687b      	ldr	r3, [r7, #4]
 8108838:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810883c:	f043 0201 	orr.w	r2, r3, #1
 8108840:	687b      	ldr	r3, [r7, #4]
 8108842:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8108846:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 810884a:	f003 0302 	and.w	r3, r3, #2
 810884e:	2b00      	cmp	r3, #0
 8108850:	d011      	beq.n	8108876 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8108852:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8108856:	f003 0301 	and.w	r3, r3, #1
 810885a:	2b00      	cmp	r3, #0
 810885c:	d00b      	beq.n	8108876 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 810885e:	687b      	ldr	r3, [r7, #4]
 8108860:	681b      	ldr	r3, [r3, #0]
 8108862:	2202      	movs	r2, #2
 8108864:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8108866:	687b      	ldr	r3, [r7, #4]
 8108868:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810886c:	f043 0204 	orr.w	r2, r3, #4
 8108870:	687b      	ldr	r3, [r7, #4]
 8108872:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8108876:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 810887a:	f003 0304 	and.w	r3, r3, #4
 810887e:	2b00      	cmp	r3, #0
 8108880:	d011      	beq.n	81088a6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8108882:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8108886:	f003 0301 	and.w	r3, r3, #1
 810888a:	2b00      	cmp	r3, #0
 810888c:	d00b      	beq.n	81088a6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 810888e:	687b      	ldr	r3, [r7, #4]
 8108890:	681b      	ldr	r3, [r3, #0]
 8108892:	2204      	movs	r2, #4
 8108894:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8108896:	687b      	ldr	r3, [r7, #4]
 8108898:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810889c:	f043 0202 	orr.w	r2, r3, #2
 81088a0:	687b      	ldr	r3, [r7, #4]
 81088a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 81088a6:	687b      	ldr	r3, [r7, #4]
 81088a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81088ac:	2b00      	cmp	r3, #0
 81088ae:	d006      	beq.n	81088be <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 81088b0:	6878      	ldr	r0, [r7, #4]
 81088b2:	f7fe fb5b 	bl	8106f6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 81088b6:	687b      	ldr	r3, [r7, #4]
 81088b8:	2200      	movs	r2, #0
 81088ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 81088be:	687b      	ldr	r3, [r7, #4]
 81088c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 81088c4:	b29b      	uxth	r3, r3
 81088c6:	2b00      	cmp	r3, #0
 81088c8:	d173      	bne.n	81089b2 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 81088ca:	687b      	ldr	r3, [r7, #4]
 81088cc:	681b      	ldr	r3, [r3, #0]
 81088ce:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81088d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 81088d2:	e853 3f00 	ldrex	r3, [r3]
 81088d6:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 81088d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 81088da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81088de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 81088e2:	687b      	ldr	r3, [r7, #4]
 81088e4:	681b      	ldr	r3, [r3, #0]
 81088e6:	461a      	mov	r2, r3
 81088e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 81088ec:	66bb      	str	r3, [r7, #104]	; 0x68
 81088ee:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81088f0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 81088f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 81088f4:	e841 2300 	strex	r3, r2, [r1]
 81088f8:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 81088fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 81088fc:	2b00      	cmp	r3, #0
 81088fe:	d1e4      	bne.n	81088ca <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8108900:	687b      	ldr	r3, [r7, #4]
 8108902:	681b      	ldr	r3, [r3, #0]
 8108904:	3308      	adds	r3, #8
 8108906:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108908:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 810890a:	e853 3f00 	ldrex	r3, [r3]
 810890e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8108910:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8108912:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8108916:	f023 0301 	bic.w	r3, r3, #1
 810891a:	67fb      	str	r3, [r7, #124]	; 0x7c
 810891c:	687b      	ldr	r3, [r7, #4]
 810891e:	681b      	ldr	r3, [r3, #0]
 8108920:	3308      	adds	r3, #8
 8108922:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8108924:	657a      	str	r2, [r7, #84]	; 0x54
 8108926:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108928:	6d39      	ldr	r1, [r7, #80]	; 0x50
 810892a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 810892c:	e841 2300 	strex	r3, r2, [r1]
 8108930:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8108932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8108934:	2b00      	cmp	r3, #0
 8108936:	d1e3      	bne.n	8108900 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8108938:	687b      	ldr	r3, [r7, #4]
 810893a:	2220      	movs	r2, #32
 810893c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8108940:	687b      	ldr	r3, [r7, #4]
 8108942:	2200      	movs	r2, #0
 8108944:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8108946:	687b      	ldr	r3, [r7, #4]
 8108948:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810894a:	2b01      	cmp	r3, #1
 810894c:	d12e      	bne.n	81089ac <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810894e:	687b      	ldr	r3, [r7, #4]
 8108950:	2200      	movs	r2, #0
 8108952:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8108954:	687b      	ldr	r3, [r7, #4]
 8108956:	681b      	ldr	r3, [r3, #0]
 8108958:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810895a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810895c:	e853 3f00 	ldrex	r3, [r3]
 8108960:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8108962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108964:	f023 0310 	bic.w	r3, r3, #16
 8108968:	67bb      	str	r3, [r7, #120]	; 0x78
 810896a:	687b      	ldr	r3, [r7, #4]
 810896c:	681b      	ldr	r3, [r3, #0]
 810896e:	461a      	mov	r2, r3
 8108970:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8108972:	643b      	str	r3, [r7, #64]	; 0x40
 8108974:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108976:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8108978:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 810897a:	e841 2300 	strex	r3, r2, [r1]
 810897e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8108980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108982:	2b00      	cmp	r3, #0
 8108984:	d1e6      	bne.n	8108954 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8108986:	687b      	ldr	r3, [r7, #4]
 8108988:	681b      	ldr	r3, [r3, #0]
 810898a:	69db      	ldr	r3, [r3, #28]
 810898c:	f003 0310 	and.w	r3, r3, #16
 8108990:	2b10      	cmp	r3, #16
 8108992:	d103      	bne.n	810899c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8108994:	687b      	ldr	r3, [r7, #4]
 8108996:	681b      	ldr	r3, [r3, #0]
 8108998:	2210      	movs	r2, #16
 810899a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 810899c:	687b      	ldr	r3, [r7, #4]
 810899e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 81089a2:	4619      	mov	r1, r3
 81089a4:	6878      	ldr	r0, [r7, #4]
 81089a6:	f7fe faeb 	bl	8106f80 <HAL_UARTEx_RxEventCallback>
 81089aa:	e002      	b.n	81089b2 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 81089ac:	6878      	ldr	r0, [r7, #4]
 81089ae:	f7f8 fd57 	bl	8101460 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 81089b2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 81089b6:	2b00      	cmp	r3, #0
 81089b8:	d006      	beq.n	81089c8 <UART_RxISR_8BIT_FIFOEN+0x24c>
 81089ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 81089be:	f003 0320 	and.w	r3, r3, #32
 81089c2:	2b00      	cmp	r3, #0
 81089c4:	f47f aefe 	bne.w	81087c4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 81089c8:	687b      	ldr	r3, [r7, #4]
 81089ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 81089ce:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 81089d2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 81089d6:	2b00      	cmp	r3, #0
 81089d8:	d045      	beq.n	8108a66 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 81089da:	687b      	ldr	r3, [r7, #4]
 81089dc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 81089e0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 81089e4:	429a      	cmp	r2, r3
 81089e6:	d23e      	bcs.n	8108a66 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 81089e8:	687b      	ldr	r3, [r7, #4]
 81089ea:	681b      	ldr	r3, [r3, #0]
 81089ec:	3308      	adds	r3, #8
 81089ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81089f0:	6a3b      	ldr	r3, [r7, #32]
 81089f2:	e853 3f00 	ldrex	r3, [r3]
 81089f6:	61fb      	str	r3, [r7, #28]
   return(result);
 81089f8:	69fb      	ldr	r3, [r7, #28]
 81089fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 81089fe:	673b      	str	r3, [r7, #112]	; 0x70
 8108a00:	687b      	ldr	r3, [r7, #4]
 8108a02:	681b      	ldr	r3, [r3, #0]
 8108a04:	3308      	adds	r3, #8
 8108a06:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8108a08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8108a0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108a0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8108a0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8108a10:	e841 2300 	strex	r3, r2, [r1]
 8108a14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8108a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108a18:	2b00      	cmp	r3, #0
 8108a1a:	d1e5      	bne.n	81089e8 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8108a1c:	687b      	ldr	r3, [r7, #4]
 8108a1e:	4a14      	ldr	r2, [pc, #80]	; (8108a70 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8108a20:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8108a22:	687b      	ldr	r3, [r7, #4]
 8108a24:	681b      	ldr	r3, [r3, #0]
 8108a26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108a28:	68fb      	ldr	r3, [r7, #12]
 8108a2a:	e853 3f00 	ldrex	r3, [r3]
 8108a2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8108a30:	68bb      	ldr	r3, [r7, #8]
 8108a32:	f043 0320 	orr.w	r3, r3, #32
 8108a36:	66fb      	str	r3, [r7, #108]	; 0x6c
 8108a38:	687b      	ldr	r3, [r7, #4]
 8108a3a:	681b      	ldr	r3, [r3, #0]
 8108a3c:	461a      	mov	r2, r3
 8108a3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8108a40:	61bb      	str	r3, [r7, #24]
 8108a42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108a44:	6979      	ldr	r1, [r7, #20]
 8108a46:	69ba      	ldr	r2, [r7, #24]
 8108a48:	e841 2300 	strex	r3, r2, [r1]
 8108a4c:	613b      	str	r3, [r7, #16]
   return(result);
 8108a4e:	693b      	ldr	r3, [r7, #16]
 8108a50:	2b00      	cmp	r3, #0
 8108a52:	d1e6      	bne.n	8108a22 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8108a54:	e007      	b.n	8108a66 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8108a56:	687b      	ldr	r3, [r7, #4]
 8108a58:	681b      	ldr	r3, [r3, #0]
 8108a5a:	699a      	ldr	r2, [r3, #24]
 8108a5c:	687b      	ldr	r3, [r7, #4]
 8108a5e:	681b      	ldr	r3, [r3, #0]
 8108a60:	f042 0208 	orr.w	r2, r2, #8
 8108a64:	619a      	str	r2, [r3, #24]
}
 8108a66:	bf00      	nop
 8108a68:	3798      	adds	r7, #152	; 0x98
 8108a6a:	46bd      	mov	sp, r7
 8108a6c:	bd80      	pop	{r7, pc}
 8108a6e:	bf00      	nop
 8108a70:	081084bb 	.word	0x081084bb

08108a74 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8108a74:	b580      	push	{r7, lr}
 8108a76:	b0a8      	sub	sp, #160	; 0xa0
 8108a78:	af00      	add	r7, sp, #0
 8108a7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8108a7c:	687b      	ldr	r3, [r7, #4]
 8108a7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8108a82:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8108a86:	687b      	ldr	r3, [r7, #4]
 8108a88:	681b      	ldr	r3, [r3, #0]
 8108a8a:	69db      	ldr	r3, [r3, #28]
 8108a8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8108a90:	687b      	ldr	r3, [r7, #4]
 8108a92:	681b      	ldr	r3, [r3, #0]
 8108a94:	681b      	ldr	r3, [r3, #0]
 8108a96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8108a9a:	687b      	ldr	r3, [r7, #4]
 8108a9c:	681b      	ldr	r3, [r3, #0]
 8108a9e:	689b      	ldr	r3, [r3, #8]
 8108aa0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8108aa4:	687b      	ldr	r3, [r7, #4]
 8108aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8108aaa:	2b22      	cmp	r3, #34	; 0x22
 8108aac:	f040 8153 	bne.w	8108d56 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8108ab0:	687b      	ldr	r3, [r7, #4]
 8108ab2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8108ab6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8108aba:	e0fa      	b.n	8108cb2 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8108abc:	687b      	ldr	r3, [r7, #4]
 8108abe:	681b      	ldr	r3, [r3, #0]
 8108ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108ac2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8108ac6:	687b      	ldr	r3, [r7, #4]
 8108ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108aca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8108ace:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8108ad2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8108ad6:	4013      	ands	r3, r2
 8108ad8:	b29a      	uxth	r2, r3
 8108ada:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8108ade:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8108ae0:	687b      	ldr	r3, [r7, #4]
 8108ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108ae4:	1c9a      	adds	r2, r3, #2
 8108ae6:	687b      	ldr	r3, [r7, #4]
 8108ae8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8108aea:	687b      	ldr	r3, [r7, #4]
 8108aec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8108af0:	b29b      	uxth	r3, r3
 8108af2:	3b01      	subs	r3, #1
 8108af4:	b29a      	uxth	r2, r3
 8108af6:	687b      	ldr	r3, [r7, #4]
 8108af8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8108afc:	687b      	ldr	r3, [r7, #4]
 8108afe:	681b      	ldr	r3, [r3, #0]
 8108b00:	69db      	ldr	r3, [r3, #28]
 8108b02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8108b06:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8108b0a:	f003 0307 	and.w	r3, r3, #7
 8108b0e:	2b00      	cmp	r3, #0
 8108b10:	d053      	beq.n	8108bba <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8108b12:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8108b16:	f003 0301 	and.w	r3, r3, #1
 8108b1a:	2b00      	cmp	r3, #0
 8108b1c:	d011      	beq.n	8108b42 <UART_RxISR_16BIT_FIFOEN+0xce>
 8108b1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8108b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8108b26:	2b00      	cmp	r3, #0
 8108b28:	d00b      	beq.n	8108b42 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8108b2a:	687b      	ldr	r3, [r7, #4]
 8108b2c:	681b      	ldr	r3, [r3, #0]
 8108b2e:	2201      	movs	r2, #1
 8108b30:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8108b32:	687b      	ldr	r3, [r7, #4]
 8108b34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8108b38:	f043 0201 	orr.w	r2, r3, #1
 8108b3c:	687b      	ldr	r3, [r7, #4]
 8108b3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8108b42:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8108b46:	f003 0302 	and.w	r3, r3, #2
 8108b4a:	2b00      	cmp	r3, #0
 8108b4c:	d011      	beq.n	8108b72 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8108b4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8108b52:	f003 0301 	and.w	r3, r3, #1
 8108b56:	2b00      	cmp	r3, #0
 8108b58:	d00b      	beq.n	8108b72 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8108b5a:	687b      	ldr	r3, [r7, #4]
 8108b5c:	681b      	ldr	r3, [r3, #0]
 8108b5e:	2202      	movs	r2, #2
 8108b60:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8108b62:	687b      	ldr	r3, [r7, #4]
 8108b64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8108b68:	f043 0204 	orr.w	r2, r3, #4
 8108b6c:	687b      	ldr	r3, [r7, #4]
 8108b6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8108b72:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8108b76:	f003 0304 	and.w	r3, r3, #4
 8108b7a:	2b00      	cmp	r3, #0
 8108b7c:	d011      	beq.n	8108ba2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8108b7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8108b82:	f003 0301 	and.w	r3, r3, #1
 8108b86:	2b00      	cmp	r3, #0
 8108b88:	d00b      	beq.n	8108ba2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8108b8a:	687b      	ldr	r3, [r7, #4]
 8108b8c:	681b      	ldr	r3, [r3, #0]
 8108b8e:	2204      	movs	r2, #4
 8108b90:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8108b92:	687b      	ldr	r3, [r7, #4]
 8108b94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8108b98:	f043 0202 	orr.w	r2, r3, #2
 8108b9c:	687b      	ldr	r3, [r7, #4]
 8108b9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8108ba2:	687b      	ldr	r3, [r7, #4]
 8108ba4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8108ba8:	2b00      	cmp	r3, #0
 8108baa:	d006      	beq.n	8108bba <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8108bac:	6878      	ldr	r0, [r7, #4]
 8108bae:	f7fe f9dd 	bl	8106f6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8108bb2:	687b      	ldr	r3, [r7, #4]
 8108bb4:	2200      	movs	r2, #0
 8108bb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8108bba:	687b      	ldr	r3, [r7, #4]
 8108bbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8108bc0:	b29b      	uxth	r3, r3
 8108bc2:	2b00      	cmp	r3, #0
 8108bc4:	d175      	bne.n	8108cb2 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8108bc6:	687b      	ldr	r3, [r7, #4]
 8108bc8:	681b      	ldr	r3, [r3, #0]
 8108bca:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108bcc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8108bce:	e853 3f00 	ldrex	r3, [r3]
 8108bd2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8108bd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8108bd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8108bda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8108bde:	687b      	ldr	r3, [r7, #4]
 8108be0:	681b      	ldr	r3, [r3, #0]
 8108be2:	461a      	mov	r2, r3
 8108be4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8108be8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8108bea:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108bec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8108bee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8108bf0:	e841 2300 	strex	r3, r2, [r1]
 8108bf4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8108bf6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8108bf8:	2b00      	cmp	r3, #0
 8108bfa:	d1e4      	bne.n	8108bc6 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8108bfc:	687b      	ldr	r3, [r7, #4]
 8108bfe:	681b      	ldr	r3, [r3, #0]
 8108c00:	3308      	adds	r3, #8
 8108c02:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108c04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8108c06:	e853 3f00 	ldrex	r3, [r3]
 8108c0a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8108c0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8108c0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8108c12:	f023 0301 	bic.w	r3, r3, #1
 8108c16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8108c1a:	687b      	ldr	r3, [r7, #4]
 8108c1c:	681b      	ldr	r3, [r3, #0]
 8108c1e:	3308      	adds	r3, #8
 8108c20:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8108c24:	65ba      	str	r2, [r7, #88]	; 0x58
 8108c26:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108c28:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8108c2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8108c2c:	e841 2300 	strex	r3, r2, [r1]
 8108c30:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8108c32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8108c34:	2b00      	cmp	r3, #0
 8108c36:	d1e1      	bne.n	8108bfc <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8108c38:	687b      	ldr	r3, [r7, #4]
 8108c3a:	2220      	movs	r2, #32
 8108c3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8108c40:	687b      	ldr	r3, [r7, #4]
 8108c42:	2200      	movs	r2, #0
 8108c44:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8108c46:	687b      	ldr	r3, [r7, #4]
 8108c48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8108c4a:	2b01      	cmp	r3, #1
 8108c4c:	d12e      	bne.n	8108cac <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8108c4e:	687b      	ldr	r3, [r7, #4]
 8108c50:	2200      	movs	r2, #0
 8108c52:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8108c54:	687b      	ldr	r3, [r7, #4]
 8108c56:	681b      	ldr	r3, [r3, #0]
 8108c58:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108c5c:	e853 3f00 	ldrex	r3, [r3]
 8108c60:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8108c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8108c64:	f023 0310 	bic.w	r3, r3, #16
 8108c68:	67fb      	str	r3, [r7, #124]	; 0x7c
 8108c6a:	687b      	ldr	r3, [r7, #4]
 8108c6c:	681b      	ldr	r3, [r3, #0]
 8108c6e:	461a      	mov	r2, r3
 8108c70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8108c72:	647b      	str	r3, [r7, #68]	; 0x44
 8108c74:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108c76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8108c78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8108c7a:	e841 2300 	strex	r3, r2, [r1]
 8108c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8108c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108c82:	2b00      	cmp	r3, #0
 8108c84:	d1e6      	bne.n	8108c54 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8108c86:	687b      	ldr	r3, [r7, #4]
 8108c88:	681b      	ldr	r3, [r3, #0]
 8108c8a:	69db      	ldr	r3, [r3, #28]
 8108c8c:	f003 0310 	and.w	r3, r3, #16
 8108c90:	2b10      	cmp	r3, #16
 8108c92:	d103      	bne.n	8108c9c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8108c94:	687b      	ldr	r3, [r7, #4]
 8108c96:	681b      	ldr	r3, [r3, #0]
 8108c98:	2210      	movs	r2, #16
 8108c9a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8108c9c:	687b      	ldr	r3, [r7, #4]
 8108c9e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8108ca2:	4619      	mov	r1, r3
 8108ca4:	6878      	ldr	r0, [r7, #4]
 8108ca6:	f7fe f96b 	bl	8106f80 <HAL_UARTEx_RxEventCallback>
 8108caa:	e002      	b.n	8108cb2 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8108cac:	6878      	ldr	r0, [r7, #4]
 8108cae:	f7f8 fbd7 	bl	8101460 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8108cb2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8108cb6:	2b00      	cmp	r3, #0
 8108cb8:	d006      	beq.n	8108cc8 <UART_RxISR_16BIT_FIFOEN+0x254>
 8108cba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8108cbe:	f003 0320 	and.w	r3, r3, #32
 8108cc2:	2b00      	cmp	r3, #0
 8108cc4:	f47f aefa 	bne.w	8108abc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8108cc8:	687b      	ldr	r3, [r7, #4]
 8108cca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8108cce:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8108cd2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8108cd6:	2b00      	cmp	r3, #0
 8108cd8:	d045      	beq.n	8108d66 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8108cda:	687b      	ldr	r3, [r7, #4]
 8108cdc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8108ce0:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8108ce4:	429a      	cmp	r2, r3
 8108ce6:	d23e      	bcs.n	8108d66 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8108ce8:	687b      	ldr	r3, [r7, #4]
 8108cea:	681b      	ldr	r3, [r3, #0]
 8108cec:	3308      	adds	r3, #8
 8108cee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108cf2:	e853 3f00 	ldrex	r3, [r3]
 8108cf6:	623b      	str	r3, [r7, #32]
   return(result);
 8108cf8:	6a3b      	ldr	r3, [r7, #32]
 8108cfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8108cfe:	677b      	str	r3, [r7, #116]	; 0x74
 8108d00:	687b      	ldr	r3, [r7, #4]
 8108d02:	681b      	ldr	r3, [r3, #0]
 8108d04:	3308      	adds	r3, #8
 8108d06:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8108d08:	633a      	str	r2, [r7, #48]	; 0x30
 8108d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108d0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8108d0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8108d10:	e841 2300 	strex	r3, r2, [r1]
 8108d14:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8108d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108d18:	2b00      	cmp	r3, #0
 8108d1a:	d1e5      	bne.n	8108ce8 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8108d1c:	687b      	ldr	r3, [r7, #4]
 8108d1e:	4a14      	ldr	r2, [pc, #80]	; (8108d70 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8108d20:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8108d22:	687b      	ldr	r3, [r7, #4]
 8108d24:	681b      	ldr	r3, [r3, #0]
 8108d26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108d28:	693b      	ldr	r3, [r7, #16]
 8108d2a:	e853 3f00 	ldrex	r3, [r3]
 8108d2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8108d30:	68fb      	ldr	r3, [r7, #12]
 8108d32:	f043 0320 	orr.w	r3, r3, #32
 8108d36:	673b      	str	r3, [r7, #112]	; 0x70
 8108d38:	687b      	ldr	r3, [r7, #4]
 8108d3a:	681b      	ldr	r3, [r3, #0]
 8108d3c:	461a      	mov	r2, r3
 8108d3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8108d40:	61fb      	str	r3, [r7, #28]
 8108d42:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108d44:	69b9      	ldr	r1, [r7, #24]
 8108d46:	69fa      	ldr	r2, [r7, #28]
 8108d48:	e841 2300 	strex	r3, r2, [r1]
 8108d4c:	617b      	str	r3, [r7, #20]
   return(result);
 8108d4e:	697b      	ldr	r3, [r7, #20]
 8108d50:	2b00      	cmp	r3, #0
 8108d52:	d1e6      	bne.n	8108d22 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8108d54:	e007      	b.n	8108d66 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8108d56:	687b      	ldr	r3, [r7, #4]
 8108d58:	681b      	ldr	r3, [r3, #0]
 8108d5a:	699a      	ldr	r2, [r3, #24]
 8108d5c:	687b      	ldr	r3, [r7, #4]
 8108d5e:	681b      	ldr	r3, [r3, #0]
 8108d60:	f042 0208 	orr.w	r2, r2, #8
 8108d64:	619a      	str	r2, [r3, #24]
}
 8108d66:	bf00      	nop
 8108d68:	37a0      	adds	r7, #160	; 0xa0
 8108d6a:	46bd      	mov	sp, r7
 8108d6c:	bd80      	pop	{r7, pc}
 8108d6e:	bf00      	nop
 8108d70:	0810861b 	.word	0x0810861b

08108d74 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8108d74:	b480      	push	{r7}
 8108d76:	b083      	sub	sp, #12
 8108d78:	af00      	add	r7, sp, #0
 8108d7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8108d7c:	bf00      	nop
 8108d7e:	370c      	adds	r7, #12
 8108d80:	46bd      	mov	sp, r7
 8108d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108d86:	4770      	bx	lr

08108d88 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8108d88:	b480      	push	{r7}
 8108d8a:	b083      	sub	sp, #12
 8108d8c:	af00      	add	r7, sp, #0
 8108d8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8108d90:	bf00      	nop
 8108d92:	370c      	adds	r7, #12
 8108d94:	46bd      	mov	sp, r7
 8108d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108d9a:	4770      	bx	lr

08108d9c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8108d9c:	b480      	push	{r7}
 8108d9e:	b083      	sub	sp, #12
 8108da0:	af00      	add	r7, sp, #0
 8108da2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8108da4:	bf00      	nop
 8108da6:	370c      	adds	r7, #12
 8108da8:	46bd      	mov	sp, r7
 8108daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108dae:	4770      	bx	lr

08108db0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8108db0:	b480      	push	{r7}
 8108db2:	b085      	sub	sp, #20
 8108db4:	af00      	add	r7, sp, #0
 8108db6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8108db8:	687b      	ldr	r3, [r7, #4]
 8108dba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8108dbe:	2b01      	cmp	r3, #1
 8108dc0:	d101      	bne.n	8108dc6 <HAL_UARTEx_DisableFifoMode+0x16>
 8108dc2:	2302      	movs	r3, #2
 8108dc4:	e027      	b.n	8108e16 <HAL_UARTEx_DisableFifoMode+0x66>
 8108dc6:	687b      	ldr	r3, [r7, #4]
 8108dc8:	2201      	movs	r2, #1
 8108dca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8108dce:	687b      	ldr	r3, [r7, #4]
 8108dd0:	2224      	movs	r2, #36	; 0x24
 8108dd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8108dd6:	687b      	ldr	r3, [r7, #4]
 8108dd8:	681b      	ldr	r3, [r3, #0]
 8108dda:	681b      	ldr	r3, [r3, #0]
 8108ddc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8108dde:	687b      	ldr	r3, [r7, #4]
 8108de0:	681b      	ldr	r3, [r3, #0]
 8108de2:	681a      	ldr	r2, [r3, #0]
 8108de4:	687b      	ldr	r3, [r7, #4]
 8108de6:	681b      	ldr	r3, [r3, #0]
 8108de8:	f022 0201 	bic.w	r2, r2, #1
 8108dec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8108dee:	68fb      	ldr	r3, [r7, #12]
 8108df0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8108df4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8108df6:	687b      	ldr	r3, [r7, #4]
 8108df8:	2200      	movs	r2, #0
 8108dfa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8108dfc:	687b      	ldr	r3, [r7, #4]
 8108dfe:	681b      	ldr	r3, [r3, #0]
 8108e00:	68fa      	ldr	r2, [r7, #12]
 8108e02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8108e04:	687b      	ldr	r3, [r7, #4]
 8108e06:	2220      	movs	r2, #32
 8108e08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8108e0c:	687b      	ldr	r3, [r7, #4]
 8108e0e:	2200      	movs	r2, #0
 8108e10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8108e14:	2300      	movs	r3, #0
}
 8108e16:	4618      	mov	r0, r3
 8108e18:	3714      	adds	r7, #20
 8108e1a:	46bd      	mov	sp, r7
 8108e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108e20:	4770      	bx	lr

08108e22 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8108e22:	b580      	push	{r7, lr}
 8108e24:	b084      	sub	sp, #16
 8108e26:	af00      	add	r7, sp, #0
 8108e28:	6078      	str	r0, [r7, #4]
 8108e2a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8108e2c:	687b      	ldr	r3, [r7, #4]
 8108e2e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8108e32:	2b01      	cmp	r3, #1
 8108e34:	d101      	bne.n	8108e3a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8108e36:	2302      	movs	r3, #2
 8108e38:	e02d      	b.n	8108e96 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8108e3a:	687b      	ldr	r3, [r7, #4]
 8108e3c:	2201      	movs	r2, #1
 8108e3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8108e42:	687b      	ldr	r3, [r7, #4]
 8108e44:	2224      	movs	r2, #36	; 0x24
 8108e46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8108e4a:	687b      	ldr	r3, [r7, #4]
 8108e4c:	681b      	ldr	r3, [r3, #0]
 8108e4e:	681b      	ldr	r3, [r3, #0]
 8108e50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8108e52:	687b      	ldr	r3, [r7, #4]
 8108e54:	681b      	ldr	r3, [r3, #0]
 8108e56:	681a      	ldr	r2, [r3, #0]
 8108e58:	687b      	ldr	r3, [r7, #4]
 8108e5a:	681b      	ldr	r3, [r3, #0]
 8108e5c:	f022 0201 	bic.w	r2, r2, #1
 8108e60:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8108e62:	687b      	ldr	r3, [r7, #4]
 8108e64:	681b      	ldr	r3, [r3, #0]
 8108e66:	689b      	ldr	r3, [r3, #8]
 8108e68:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8108e6c:	687b      	ldr	r3, [r7, #4]
 8108e6e:	681b      	ldr	r3, [r3, #0]
 8108e70:	683a      	ldr	r2, [r7, #0]
 8108e72:	430a      	orrs	r2, r1
 8108e74:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8108e76:	6878      	ldr	r0, [r7, #4]
 8108e78:	f000 f850 	bl	8108f1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8108e7c:	687b      	ldr	r3, [r7, #4]
 8108e7e:	681b      	ldr	r3, [r3, #0]
 8108e80:	68fa      	ldr	r2, [r7, #12]
 8108e82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8108e84:	687b      	ldr	r3, [r7, #4]
 8108e86:	2220      	movs	r2, #32
 8108e88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8108e8c:	687b      	ldr	r3, [r7, #4]
 8108e8e:	2200      	movs	r2, #0
 8108e90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8108e94:	2300      	movs	r3, #0
}
 8108e96:	4618      	mov	r0, r3
 8108e98:	3710      	adds	r7, #16
 8108e9a:	46bd      	mov	sp, r7
 8108e9c:	bd80      	pop	{r7, pc}

08108e9e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8108e9e:	b580      	push	{r7, lr}
 8108ea0:	b084      	sub	sp, #16
 8108ea2:	af00      	add	r7, sp, #0
 8108ea4:	6078      	str	r0, [r7, #4]
 8108ea6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8108ea8:	687b      	ldr	r3, [r7, #4]
 8108eaa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8108eae:	2b01      	cmp	r3, #1
 8108eb0:	d101      	bne.n	8108eb6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8108eb2:	2302      	movs	r3, #2
 8108eb4:	e02d      	b.n	8108f12 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8108eb6:	687b      	ldr	r3, [r7, #4]
 8108eb8:	2201      	movs	r2, #1
 8108eba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8108ebe:	687b      	ldr	r3, [r7, #4]
 8108ec0:	2224      	movs	r2, #36	; 0x24
 8108ec2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8108ec6:	687b      	ldr	r3, [r7, #4]
 8108ec8:	681b      	ldr	r3, [r3, #0]
 8108eca:	681b      	ldr	r3, [r3, #0]
 8108ecc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8108ece:	687b      	ldr	r3, [r7, #4]
 8108ed0:	681b      	ldr	r3, [r3, #0]
 8108ed2:	681a      	ldr	r2, [r3, #0]
 8108ed4:	687b      	ldr	r3, [r7, #4]
 8108ed6:	681b      	ldr	r3, [r3, #0]
 8108ed8:	f022 0201 	bic.w	r2, r2, #1
 8108edc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8108ede:	687b      	ldr	r3, [r7, #4]
 8108ee0:	681b      	ldr	r3, [r3, #0]
 8108ee2:	689b      	ldr	r3, [r3, #8]
 8108ee4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8108ee8:	687b      	ldr	r3, [r7, #4]
 8108eea:	681b      	ldr	r3, [r3, #0]
 8108eec:	683a      	ldr	r2, [r7, #0]
 8108eee:	430a      	orrs	r2, r1
 8108ef0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8108ef2:	6878      	ldr	r0, [r7, #4]
 8108ef4:	f000 f812 	bl	8108f1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8108ef8:	687b      	ldr	r3, [r7, #4]
 8108efa:	681b      	ldr	r3, [r3, #0]
 8108efc:	68fa      	ldr	r2, [r7, #12]
 8108efe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8108f00:	687b      	ldr	r3, [r7, #4]
 8108f02:	2220      	movs	r2, #32
 8108f04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8108f08:	687b      	ldr	r3, [r7, #4]
 8108f0a:	2200      	movs	r2, #0
 8108f0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8108f10:	2300      	movs	r3, #0
}
 8108f12:	4618      	mov	r0, r3
 8108f14:	3710      	adds	r7, #16
 8108f16:	46bd      	mov	sp, r7
 8108f18:	bd80      	pop	{r7, pc}
	...

08108f1c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8108f1c:	b480      	push	{r7}
 8108f1e:	b085      	sub	sp, #20
 8108f20:	af00      	add	r7, sp, #0
 8108f22:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8108f24:	687b      	ldr	r3, [r7, #4]
 8108f26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8108f28:	2b00      	cmp	r3, #0
 8108f2a:	d108      	bne.n	8108f3e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8108f2c:	687b      	ldr	r3, [r7, #4]
 8108f2e:	2201      	movs	r2, #1
 8108f30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8108f34:	687b      	ldr	r3, [r7, #4]
 8108f36:	2201      	movs	r2, #1
 8108f38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8108f3c:	e031      	b.n	8108fa2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8108f3e:	2310      	movs	r3, #16
 8108f40:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8108f42:	2310      	movs	r3, #16
 8108f44:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8108f46:	687b      	ldr	r3, [r7, #4]
 8108f48:	681b      	ldr	r3, [r3, #0]
 8108f4a:	689b      	ldr	r3, [r3, #8]
 8108f4c:	0e5b      	lsrs	r3, r3, #25
 8108f4e:	b2db      	uxtb	r3, r3
 8108f50:	f003 0307 	and.w	r3, r3, #7
 8108f54:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8108f56:	687b      	ldr	r3, [r7, #4]
 8108f58:	681b      	ldr	r3, [r3, #0]
 8108f5a:	689b      	ldr	r3, [r3, #8]
 8108f5c:	0f5b      	lsrs	r3, r3, #29
 8108f5e:	b2db      	uxtb	r3, r3
 8108f60:	f003 0307 	and.w	r3, r3, #7
 8108f64:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8108f66:	7bbb      	ldrb	r3, [r7, #14]
 8108f68:	7b3a      	ldrb	r2, [r7, #12]
 8108f6a:	4911      	ldr	r1, [pc, #68]	; (8108fb0 <UARTEx_SetNbDataToProcess+0x94>)
 8108f6c:	5c8a      	ldrb	r2, [r1, r2]
 8108f6e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8108f72:	7b3a      	ldrb	r2, [r7, #12]
 8108f74:	490f      	ldr	r1, [pc, #60]	; (8108fb4 <UARTEx_SetNbDataToProcess+0x98>)
 8108f76:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8108f78:	fb93 f3f2 	sdiv	r3, r3, r2
 8108f7c:	b29a      	uxth	r2, r3
 8108f7e:	687b      	ldr	r3, [r7, #4]
 8108f80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8108f84:	7bfb      	ldrb	r3, [r7, #15]
 8108f86:	7b7a      	ldrb	r2, [r7, #13]
 8108f88:	4909      	ldr	r1, [pc, #36]	; (8108fb0 <UARTEx_SetNbDataToProcess+0x94>)
 8108f8a:	5c8a      	ldrb	r2, [r1, r2]
 8108f8c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8108f90:	7b7a      	ldrb	r2, [r7, #13]
 8108f92:	4908      	ldr	r1, [pc, #32]	; (8108fb4 <UARTEx_SetNbDataToProcess+0x98>)
 8108f94:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8108f96:	fb93 f3f2 	sdiv	r3, r3, r2
 8108f9a:	b29a      	uxth	r2, r3
 8108f9c:	687b      	ldr	r3, [r7, #4]
 8108f9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8108fa2:	bf00      	nop
 8108fa4:	3714      	adds	r7, #20
 8108fa6:	46bd      	mov	sp, r7
 8108fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108fac:	4770      	bx	lr
 8108fae:	bf00      	nop
 8108fb0:	0810e780 	.word	0x0810e780
 8108fb4:	0810e788 	.word	0x0810e788

08108fb8 <__cvt>:
 8108fb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8108fbc:	ec55 4b10 	vmov	r4, r5, d0
 8108fc0:	2d00      	cmp	r5, #0
 8108fc2:	460e      	mov	r6, r1
 8108fc4:	4619      	mov	r1, r3
 8108fc6:	462b      	mov	r3, r5
 8108fc8:	bfbb      	ittet	lt
 8108fca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8108fce:	461d      	movlt	r5, r3
 8108fd0:	2300      	movge	r3, #0
 8108fd2:	232d      	movlt	r3, #45	; 0x2d
 8108fd4:	700b      	strb	r3, [r1, #0]
 8108fd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8108fd8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8108fdc:	4691      	mov	r9, r2
 8108fde:	f023 0820 	bic.w	r8, r3, #32
 8108fe2:	bfbc      	itt	lt
 8108fe4:	4622      	movlt	r2, r4
 8108fe6:	4614      	movlt	r4, r2
 8108fe8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8108fec:	d005      	beq.n	8108ffa <__cvt+0x42>
 8108fee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8108ff2:	d100      	bne.n	8108ff6 <__cvt+0x3e>
 8108ff4:	3601      	adds	r6, #1
 8108ff6:	2102      	movs	r1, #2
 8108ff8:	e000      	b.n	8108ffc <__cvt+0x44>
 8108ffa:	2103      	movs	r1, #3
 8108ffc:	ab03      	add	r3, sp, #12
 8108ffe:	9301      	str	r3, [sp, #4]
 8109000:	ab02      	add	r3, sp, #8
 8109002:	9300      	str	r3, [sp, #0]
 8109004:	ec45 4b10 	vmov	d0, r4, r5
 8109008:	4653      	mov	r3, sl
 810900a:	4632      	mov	r2, r6
 810900c:	f001 ff54 	bl	810aeb8 <_dtoa_r>
 8109010:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8109014:	4607      	mov	r7, r0
 8109016:	d102      	bne.n	810901e <__cvt+0x66>
 8109018:	f019 0f01 	tst.w	r9, #1
 810901c:	d022      	beq.n	8109064 <__cvt+0xac>
 810901e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8109022:	eb07 0906 	add.w	r9, r7, r6
 8109026:	d110      	bne.n	810904a <__cvt+0x92>
 8109028:	783b      	ldrb	r3, [r7, #0]
 810902a:	2b30      	cmp	r3, #48	; 0x30
 810902c:	d10a      	bne.n	8109044 <__cvt+0x8c>
 810902e:	2200      	movs	r2, #0
 8109030:	2300      	movs	r3, #0
 8109032:	4620      	mov	r0, r4
 8109034:	4629      	mov	r1, r5
 8109036:	f7f7 fdcf 	bl	8100bd8 <__aeabi_dcmpeq>
 810903a:	b918      	cbnz	r0, 8109044 <__cvt+0x8c>
 810903c:	f1c6 0601 	rsb	r6, r6, #1
 8109040:	f8ca 6000 	str.w	r6, [sl]
 8109044:	f8da 3000 	ldr.w	r3, [sl]
 8109048:	4499      	add	r9, r3
 810904a:	2200      	movs	r2, #0
 810904c:	2300      	movs	r3, #0
 810904e:	4620      	mov	r0, r4
 8109050:	4629      	mov	r1, r5
 8109052:	f7f7 fdc1 	bl	8100bd8 <__aeabi_dcmpeq>
 8109056:	b108      	cbz	r0, 810905c <__cvt+0xa4>
 8109058:	f8cd 900c 	str.w	r9, [sp, #12]
 810905c:	2230      	movs	r2, #48	; 0x30
 810905e:	9b03      	ldr	r3, [sp, #12]
 8109060:	454b      	cmp	r3, r9
 8109062:	d307      	bcc.n	8109074 <__cvt+0xbc>
 8109064:	9b03      	ldr	r3, [sp, #12]
 8109066:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8109068:	1bdb      	subs	r3, r3, r7
 810906a:	4638      	mov	r0, r7
 810906c:	6013      	str	r3, [r2, #0]
 810906e:	b004      	add	sp, #16
 8109070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8109074:	1c59      	adds	r1, r3, #1
 8109076:	9103      	str	r1, [sp, #12]
 8109078:	701a      	strb	r2, [r3, #0]
 810907a:	e7f0      	b.n	810905e <__cvt+0xa6>

0810907c <__exponent>:
 810907c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810907e:	4603      	mov	r3, r0
 8109080:	2900      	cmp	r1, #0
 8109082:	bfb8      	it	lt
 8109084:	4249      	neglt	r1, r1
 8109086:	f803 2b02 	strb.w	r2, [r3], #2
 810908a:	bfb4      	ite	lt
 810908c:	222d      	movlt	r2, #45	; 0x2d
 810908e:	222b      	movge	r2, #43	; 0x2b
 8109090:	2909      	cmp	r1, #9
 8109092:	7042      	strb	r2, [r0, #1]
 8109094:	dd2a      	ble.n	81090ec <__exponent+0x70>
 8109096:	f10d 0207 	add.w	r2, sp, #7
 810909a:	4617      	mov	r7, r2
 810909c:	260a      	movs	r6, #10
 810909e:	4694      	mov	ip, r2
 81090a0:	fb91 f5f6 	sdiv	r5, r1, r6
 81090a4:	fb06 1415 	mls	r4, r6, r5, r1
 81090a8:	3430      	adds	r4, #48	; 0x30
 81090aa:	f80c 4c01 	strb.w	r4, [ip, #-1]
 81090ae:	460c      	mov	r4, r1
 81090b0:	2c63      	cmp	r4, #99	; 0x63
 81090b2:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 81090b6:	4629      	mov	r1, r5
 81090b8:	dcf1      	bgt.n	810909e <__exponent+0x22>
 81090ba:	3130      	adds	r1, #48	; 0x30
 81090bc:	f1ac 0402 	sub.w	r4, ip, #2
 81090c0:	f802 1c01 	strb.w	r1, [r2, #-1]
 81090c4:	1c41      	adds	r1, r0, #1
 81090c6:	4622      	mov	r2, r4
 81090c8:	42ba      	cmp	r2, r7
 81090ca:	d30a      	bcc.n	81090e2 <__exponent+0x66>
 81090cc:	f10d 0209 	add.w	r2, sp, #9
 81090d0:	eba2 020c 	sub.w	r2, r2, ip
 81090d4:	42bc      	cmp	r4, r7
 81090d6:	bf88      	it	hi
 81090d8:	2200      	movhi	r2, #0
 81090da:	4413      	add	r3, r2
 81090dc:	1a18      	subs	r0, r3, r0
 81090de:	b003      	add	sp, #12
 81090e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 81090e2:	f812 5b01 	ldrb.w	r5, [r2], #1
 81090e6:	f801 5f01 	strb.w	r5, [r1, #1]!
 81090ea:	e7ed      	b.n	81090c8 <__exponent+0x4c>
 81090ec:	2330      	movs	r3, #48	; 0x30
 81090ee:	3130      	adds	r1, #48	; 0x30
 81090f0:	7083      	strb	r3, [r0, #2]
 81090f2:	70c1      	strb	r1, [r0, #3]
 81090f4:	1d03      	adds	r3, r0, #4
 81090f6:	e7f1      	b.n	81090dc <__exponent+0x60>

081090f8 <_printf_float>:
 81090f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81090fc:	ed2d 8b02 	vpush	{d8}
 8109100:	b08d      	sub	sp, #52	; 0x34
 8109102:	460c      	mov	r4, r1
 8109104:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8109108:	4616      	mov	r6, r2
 810910a:	461f      	mov	r7, r3
 810910c:	4605      	mov	r5, r0
 810910e:	f001 fdcf 	bl	810acb0 <_localeconv_r>
 8109112:	f8d0 a000 	ldr.w	sl, [r0]
 8109116:	4650      	mov	r0, sl
 8109118:	f7f7 f932 	bl	8100380 <strlen>
 810911c:	2300      	movs	r3, #0
 810911e:	930a      	str	r3, [sp, #40]	; 0x28
 8109120:	6823      	ldr	r3, [r4, #0]
 8109122:	9305      	str	r3, [sp, #20]
 8109124:	f8d8 3000 	ldr.w	r3, [r8]
 8109128:	f894 b018 	ldrb.w	fp, [r4, #24]
 810912c:	3307      	adds	r3, #7
 810912e:	f023 0307 	bic.w	r3, r3, #7
 8109132:	f103 0208 	add.w	r2, r3, #8
 8109136:	f8c8 2000 	str.w	r2, [r8]
 810913a:	e9d3 8900 	ldrd	r8, r9, [r3]
 810913e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8109142:	9307      	str	r3, [sp, #28]
 8109144:	f8cd 8018 	str.w	r8, [sp, #24]
 8109148:	ee08 0a10 	vmov	s16, r0
 810914c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8109150:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8109154:	4b9e      	ldr	r3, [pc, #632]	; (81093d0 <_printf_float+0x2d8>)
 8109156:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810915a:	f7f7 fd6f 	bl	8100c3c <__aeabi_dcmpun>
 810915e:	bb88      	cbnz	r0, 81091c4 <_printf_float+0xcc>
 8109160:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8109164:	4b9a      	ldr	r3, [pc, #616]	; (81093d0 <_printf_float+0x2d8>)
 8109166:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810916a:	f7f7 fd49 	bl	8100c00 <__aeabi_dcmple>
 810916e:	bb48      	cbnz	r0, 81091c4 <_printf_float+0xcc>
 8109170:	2200      	movs	r2, #0
 8109172:	2300      	movs	r3, #0
 8109174:	4640      	mov	r0, r8
 8109176:	4649      	mov	r1, r9
 8109178:	f7f7 fd38 	bl	8100bec <__aeabi_dcmplt>
 810917c:	b110      	cbz	r0, 8109184 <_printf_float+0x8c>
 810917e:	232d      	movs	r3, #45	; 0x2d
 8109180:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8109184:	4a93      	ldr	r2, [pc, #588]	; (81093d4 <_printf_float+0x2dc>)
 8109186:	4b94      	ldr	r3, [pc, #592]	; (81093d8 <_printf_float+0x2e0>)
 8109188:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 810918c:	bf94      	ite	ls
 810918e:	4690      	movls	r8, r2
 8109190:	4698      	movhi	r8, r3
 8109192:	2303      	movs	r3, #3
 8109194:	6123      	str	r3, [r4, #16]
 8109196:	9b05      	ldr	r3, [sp, #20]
 8109198:	f023 0304 	bic.w	r3, r3, #4
 810919c:	6023      	str	r3, [r4, #0]
 810919e:	f04f 0900 	mov.w	r9, #0
 81091a2:	9700      	str	r7, [sp, #0]
 81091a4:	4633      	mov	r3, r6
 81091a6:	aa0b      	add	r2, sp, #44	; 0x2c
 81091a8:	4621      	mov	r1, r4
 81091aa:	4628      	mov	r0, r5
 81091ac:	f000 f9da 	bl	8109564 <_printf_common>
 81091b0:	3001      	adds	r0, #1
 81091b2:	f040 8090 	bne.w	81092d6 <_printf_float+0x1de>
 81091b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 81091ba:	b00d      	add	sp, #52	; 0x34
 81091bc:	ecbd 8b02 	vpop	{d8}
 81091c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81091c4:	4642      	mov	r2, r8
 81091c6:	464b      	mov	r3, r9
 81091c8:	4640      	mov	r0, r8
 81091ca:	4649      	mov	r1, r9
 81091cc:	f7f7 fd36 	bl	8100c3c <__aeabi_dcmpun>
 81091d0:	b140      	cbz	r0, 81091e4 <_printf_float+0xec>
 81091d2:	464b      	mov	r3, r9
 81091d4:	2b00      	cmp	r3, #0
 81091d6:	bfbc      	itt	lt
 81091d8:	232d      	movlt	r3, #45	; 0x2d
 81091da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 81091de:	4a7f      	ldr	r2, [pc, #508]	; (81093dc <_printf_float+0x2e4>)
 81091e0:	4b7f      	ldr	r3, [pc, #508]	; (81093e0 <_printf_float+0x2e8>)
 81091e2:	e7d1      	b.n	8109188 <_printf_float+0x90>
 81091e4:	6863      	ldr	r3, [r4, #4]
 81091e6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 81091ea:	9206      	str	r2, [sp, #24]
 81091ec:	1c5a      	adds	r2, r3, #1
 81091ee:	d13f      	bne.n	8109270 <_printf_float+0x178>
 81091f0:	2306      	movs	r3, #6
 81091f2:	6063      	str	r3, [r4, #4]
 81091f4:	9b05      	ldr	r3, [sp, #20]
 81091f6:	6861      	ldr	r1, [r4, #4]
 81091f8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 81091fc:	2300      	movs	r3, #0
 81091fe:	9303      	str	r3, [sp, #12]
 8109200:	ab0a      	add	r3, sp, #40	; 0x28
 8109202:	e9cd b301 	strd	fp, r3, [sp, #4]
 8109206:	ab09      	add	r3, sp, #36	; 0x24
 8109208:	ec49 8b10 	vmov	d0, r8, r9
 810920c:	9300      	str	r3, [sp, #0]
 810920e:	6022      	str	r2, [r4, #0]
 8109210:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8109214:	4628      	mov	r0, r5
 8109216:	f7ff fecf 	bl	8108fb8 <__cvt>
 810921a:	9b06      	ldr	r3, [sp, #24]
 810921c:	9909      	ldr	r1, [sp, #36]	; 0x24
 810921e:	2b47      	cmp	r3, #71	; 0x47
 8109220:	4680      	mov	r8, r0
 8109222:	d108      	bne.n	8109236 <_printf_float+0x13e>
 8109224:	1cc8      	adds	r0, r1, #3
 8109226:	db02      	blt.n	810922e <_printf_float+0x136>
 8109228:	6863      	ldr	r3, [r4, #4]
 810922a:	4299      	cmp	r1, r3
 810922c:	dd41      	ble.n	81092b2 <_printf_float+0x1ba>
 810922e:	f1ab 0302 	sub.w	r3, fp, #2
 8109232:	fa5f fb83 	uxtb.w	fp, r3
 8109236:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 810923a:	d820      	bhi.n	810927e <_printf_float+0x186>
 810923c:	3901      	subs	r1, #1
 810923e:	465a      	mov	r2, fp
 8109240:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8109244:	9109      	str	r1, [sp, #36]	; 0x24
 8109246:	f7ff ff19 	bl	810907c <__exponent>
 810924a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810924c:	1813      	adds	r3, r2, r0
 810924e:	2a01      	cmp	r2, #1
 8109250:	4681      	mov	r9, r0
 8109252:	6123      	str	r3, [r4, #16]
 8109254:	dc02      	bgt.n	810925c <_printf_float+0x164>
 8109256:	6822      	ldr	r2, [r4, #0]
 8109258:	07d2      	lsls	r2, r2, #31
 810925a:	d501      	bpl.n	8109260 <_printf_float+0x168>
 810925c:	3301      	adds	r3, #1
 810925e:	6123      	str	r3, [r4, #16]
 8109260:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8109264:	2b00      	cmp	r3, #0
 8109266:	d09c      	beq.n	81091a2 <_printf_float+0xaa>
 8109268:	232d      	movs	r3, #45	; 0x2d
 810926a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810926e:	e798      	b.n	81091a2 <_printf_float+0xaa>
 8109270:	9a06      	ldr	r2, [sp, #24]
 8109272:	2a47      	cmp	r2, #71	; 0x47
 8109274:	d1be      	bne.n	81091f4 <_printf_float+0xfc>
 8109276:	2b00      	cmp	r3, #0
 8109278:	d1bc      	bne.n	81091f4 <_printf_float+0xfc>
 810927a:	2301      	movs	r3, #1
 810927c:	e7b9      	b.n	81091f2 <_printf_float+0xfa>
 810927e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8109282:	d118      	bne.n	81092b6 <_printf_float+0x1be>
 8109284:	2900      	cmp	r1, #0
 8109286:	6863      	ldr	r3, [r4, #4]
 8109288:	dd0b      	ble.n	81092a2 <_printf_float+0x1aa>
 810928a:	6121      	str	r1, [r4, #16]
 810928c:	b913      	cbnz	r3, 8109294 <_printf_float+0x19c>
 810928e:	6822      	ldr	r2, [r4, #0]
 8109290:	07d0      	lsls	r0, r2, #31
 8109292:	d502      	bpl.n	810929a <_printf_float+0x1a2>
 8109294:	3301      	adds	r3, #1
 8109296:	440b      	add	r3, r1
 8109298:	6123      	str	r3, [r4, #16]
 810929a:	65a1      	str	r1, [r4, #88]	; 0x58
 810929c:	f04f 0900 	mov.w	r9, #0
 81092a0:	e7de      	b.n	8109260 <_printf_float+0x168>
 81092a2:	b913      	cbnz	r3, 81092aa <_printf_float+0x1b2>
 81092a4:	6822      	ldr	r2, [r4, #0]
 81092a6:	07d2      	lsls	r2, r2, #31
 81092a8:	d501      	bpl.n	81092ae <_printf_float+0x1b6>
 81092aa:	3302      	adds	r3, #2
 81092ac:	e7f4      	b.n	8109298 <_printf_float+0x1a0>
 81092ae:	2301      	movs	r3, #1
 81092b0:	e7f2      	b.n	8109298 <_printf_float+0x1a0>
 81092b2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 81092b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81092b8:	4299      	cmp	r1, r3
 81092ba:	db05      	blt.n	81092c8 <_printf_float+0x1d0>
 81092bc:	6823      	ldr	r3, [r4, #0]
 81092be:	6121      	str	r1, [r4, #16]
 81092c0:	07d8      	lsls	r0, r3, #31
 81092c2:	d5ea      	bpl.n	810929a <_printf_float+0x1a2>
 81092c4:	1c4b      	adds	r3, r1, #1
 81092c6:	e7e7      	b.n	8109298 <_printf_float+0x1a0>
 81092c8:	2900      	cmp	r1, #0
 81092ca:	bfd4      	ite	le
 81092cc:	f1c1 0202 	rsble	r2, r1, #2
 81092d0:	2201      	movgt	r2, #1
 81092d2:	4413      	add	r3, r2
 81092d4:	e7e0      	b.n	8109298 <_printf_float+0x1a0>
 81092d6:	6823      	ldr	r3, [r4, #0]
 81092d8:	055a      	lsls	r2, r3, #21
 81092da:	d407      	bmi.n	81092ec <_printf_float+0x1f4>
 81092dc:	6923      	ldr	r3, [r4, #16]
 81092de:	4642      	mov	r2, r8
 81092e0:	4631      	mov	r1, r6
 81092e2:	4628      	mov	r0, r5
 81092e4:	47b8      	blx	r7
 81092e6:	3001      	adds	r0, #1
 81092e8:	d12c      	bne.n	8109344 <_printf_float+0x24c>
 81092ea:	e764      	b.n	81091b6 <_printf_float+0xbe>
 81092ec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 81092f0:	f240 80e0 	bls.w	81094b4 <_printf_float+0x3bc>
 81092f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 81092f8:	2200      	movs	r2, #0
 81092fa:	2300      	movs	r3, #0
 81092fc:	f7f7 fc6c 	bl	8100bd8 <__aeabi_dcmpeq>
 8109300:	2800      	cmp	r0, #0
 8109302:	d034      	beq.n	810936e <_printf_float+0x276>
 8109304:	4a37      	ldr	r2, [pc, #220]	; (81093e4 <_printf_float+0x2ec>)
 8109306:	2301      	movs	r3, #1
 8109308:	4631      	mov	r1, r6
 810930a:	4628      	mov	r0, r5
 810930c:	47b8      	blx	r7
 810930e:	3001      	adds	r0, #1
 8109310:	f43f af51 	beq.w	81091b6 <_printf_float+0xbe>
 8109314:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8109318:	429a      	cmp	r2, r3
 810931a:	db02      	blt.n	8109322 <_printf_float+0x22a>
 810931c:	6823      	ldr	r3, [r4, #0]
 810931e:	07d8      	lsls	r0, r3, #31
 8109320:	d510      	bpl.n	8109344 <_printf_float+0x24c>
 8109322:	ee18 3a10 	vmov	r3, s16
 8109326:	4652      	mov	r2, sl
 8109328:	4631      	mov	r1, r6
 810932a:	4628      	mov	r0, r5
 810932c:	47b8      	blx	r7
 810932e:	3001      	adds	r0, #1
 8109330:	f43f af41 	beq.w	81091b6 <_printf_float+0xbe>
 8109334:	f04f 0800 	mov.w	r8, #0
 8109338:	f104 091a 	add.w	r9, r4, #26
 810933c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810933e:	3b01      	subs	r3, #1
 8109340:	4543      	cmp	r3, r8
 8109342:	dc09      	bgt.n	8109358 <_printf_float+0x260>
 8109344:	6823      	ldr	r3, [r4, #0]
 8109346:	079b      	lsls	r3, r3, #30
 8109348:	f100 8107 	bmi.w	810955a <_printf_float+0x462>
 810934c:	68e0      	ldr	r0, [r4, #12]
 810934e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8109350:	4298      	cmp	r0, r3
 8109352:	bfb8      	it	lt
 8109354:	4618      	movlt	r0, r3
 8109356:	e730      	b.n	81091ba <_printf_float+0xc2>
 8109358:	2301      	movs	r3, #1
 810935a:	464a      	mov	r2, r9
 810935c:	4631      	mov	r1, r6
 810935e:	4628      	mov	r0, r5
 8109360:	47b8      	blx	r7
 8109362:	3001      	adds	r0, #1
 8109364:	f43f af27 	beq.w	81091b6 <_printf_float+0xbe>
 8109368:	f108 0801 	add.w	r8, r8, #1
 810936c:	e7e6      	b.n	810933c <_printf_float+0x244>
 810936e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8109370:	2b00      	cmp	r3, #0
 8109372:	dc39      	bgt.n	81093e8 <_printf_float+0x2f0>
 8109374:	4a1b      	ldr	r2, [pc, #108]	; (81093e4 <_printf_float+0x2ec>)
 8109376:	2301      	movs	r3, #1
 8109378:	4631      	mov	r1, r6
 810937a:	4628      	mov	r0, r5
 810937c:	47b8      	blx	r7
 810937e:	3001      	adds	r0, #1
 8109380:	f43f af19 	beq.w	81091b6 <_printf_float+0xbe>
 8109384:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8109388:	4313      	orrs	r3, r2
 810938a:	d102      	bne.n	8109392 <_printf_float+0x29a>
 810938c:	6823      	ldr	r3, [r4, #0]
 810938e:	07d9      	lsls	r1, r3, #31
 8109390:	d5d8      	bpl.n	8109344 <_printf_float+0x24c>
 8109392:	ee18 3a10 	vmov	r3, s16
 8109396:	4652      	mov	r2, sl
 8109398:	4631      	mov	r1, r6
 810939a:	4628      	mov	r0, r5
 810939c:	47b8      	blx	r7
 810939e:	3001      	adds	r0, #1
 81093a0:	f43f af09 	beq.w	81091b6 <_printf_float+0xbe>
 81093a4:	f04f 0900 	mov.w	r9, #0
 81093a8:	f104 0a1a 	add.w	sl, r4, #26
 81093ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81093ae:	425b      	negs	r3, r3
 81093b0:	454b      	cmp	r3, r9
 81093b2:	dc01      	bgt.n	81093b8 <_printf_float+0x2c0>
 81093b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81093b6:	e792      	b.n	81092de <_printf_float+0x1e6>
 81093b8:	2301      	movs	r3, #1
 81093ba:	4652      	mov	r2, sl
 81093bc:	4631      	mov	r1, r6
 81093be:	4628      	mov	r0, r5
 81093c0:	47b8      	blx	r7
 81093c2:	3001      	adds	r0, #1
 81093c4:	f43f aef7 	beq.w	81091b6 <_printf_float+0xbe>
 81093c8:	f109 0901 	add.w	r9, r9, #1
 81093cc:	e7ee      	b.n	81093ac <_printf_float+0x2b4>
 81093ce:	bf00      	nop
 81093d0:	7fefffff 	.word	0x7fefffff
 81093d4:	0810e790 	.word	0x0810e790
 81093d8:	0810e794 	.word	0x0810e794
 81093dc:	0810e798 	.word	0x0810e798
 81093e0:	0810e79c 	.word	0x0810e79c
 81093e4:	0810e7a0 	.word	0x0810e7a0
 81093e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 81093ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 81093ec:	429a      	cmp	r2, r3
 81093ee:	bfa8      	it	ge
 81093f0:	461a      	movge	r2, r3
 81093f2:	2a00      	cmp	r2, #0
 81093f4:	4691      	mov	r9, r2
 81093f6:	dc37      	bgt.n	8109468 <_printf_float+0x370>
 81093f8:	f04f 0b00 	mov.w	fp, #0
 81093fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8109400:	f104 021a 	add.w	r2, r4, #26
 8109404:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8109406:	9305      	str	r3, [sp, #20]
 8109408:	eba3 0309 	sub.w	r3, r3, r9
 810940c:	455b      	cmp	r3, fp
 810940e:	dc33      	bgt.n	8109478 <_printf_float+0x380>
 8109410:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8109414:	429a      	cmp	r2, r3
 8109416:	db3b      	blt.n	8109490 <_printf_float+0x398>
 8109418:	6823      	ldr	r3, [r4, #0]
 810941a:	07da      	lsls	r2, r3, #31
 810941c:	d438      	bmi.n	8109490 <_printf_float+0x398>
 810941e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8109422:	eba2 0903 	sub.w	r9, r2, r3
 8109426:	9b05      	ldr	r3, [sp, #20]
 8109428:	1ad2      	subs	r2, r2, r3
 810942a:	4591      	cmp	r9, r2
 810942c:	bfa8      	it	ge
 810942e:	4691      	movge	r9, r2
 8109430:	f1b9 0f00 	cmp.w	r9, #0
 8109434:	dc35      	bgt.n	81094a2 <_printf_float+0x3aa>
 8109436:	f04f 0800 	mov.w	r8, #0
 810943a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810943e:	f104 0a1a 	add.w	sl, r4, #26
 8109442:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8109446:	1a9b      	subs	r3, r3, r2
 8109448:	eba3 0309 	sub.w	r3, r3, r9
 810944c:	4543      	cmp	r3, r8
 810944e:	f77f af79 	ble.w	8109344 <_printf_float+0x24c>
 8109452:	2301      	movs	r3, #1
 8109454:	4652      	mov	r2, sl
 8109456:	4631      	mov	r1, r6
 8109458:	4628      	mov	r0, r5
 810945a:	47b8      	blx	r7
 810945c:	3001      	adds	r0, #1
 810945e:	f43f aeaa 	beq.w	81091b6 <_printf_float+0xbe>
 8109462:	f108 0801 	add.w	r8, r8, #1
 8109466:	e7ec      	b.n	8109442 <_printf_float+0x34a>
 8109468:	4613      	mov	r3, r2
 810946a:	4631      	mov	r1, r6
 810946c:	4642      	mov	r2, r8
 810946e:	4628      	mov	r0, r5
 8109470:	47b8      	blx	r7
 8109472:	3001      	adds	r0, #1
 8109474:	d1c0      	bne.n	81093f8 <_printf_float+0x300>
 8109476:	e69e      	b.n	81091b6 <_printf_float+0xbe>
 8109478:	2301      	movs	r3, #1
 810947a:	4631      	mov	r1, r6
 810947c:	4628      	mov	r0, r5
 810947e:	9205      	str	r2, [sp, #20]
 8109480:	47b8      	blx	r7
 8109482:	3001      	adds	r0, #1
 8109484:	f43f ae97 	beq.w	81091b6 <_printf_float+0xbe>
 8109488:	9a05      	ldr	r2, [sp, #20]
 810948a:	f10b 0b01 	add.w	fp, fp, #1
 810948e:	e7b9      	b.n	8109404 <_printf_float+0x30c>
 8109490:	ee18 3a10 	vmov	r3, s16
 8109494:	4652      	mov	r2, sl
 8109496:	4631      	mov	r1, r6
 8109498:	4628      	mov	r0, r5
 810949a:	47b8      	blx	r7
 810949c:	3001      	adds	r0, #1
 810949e:	d1be      	bne.n	810941e <_printf_float+0x326>
 81094a0:	e689      	b.n	81091b6 <_printf_float+0xbe>
 81094a2:	9a05      	ldr	r2, [sp, #20]
 81094a4:	464b      	mov	r3, r9
 81094a6:	4442      	add	r2, r8
 81094a8:	4631      	mov	r1, r6
 81094aa:	4628      	mov	r0, r5
 81094ac:	47b8      	blx	r7
 81094ae:	3001      	adds	r0, #1
 81094b0:	d1c1      	bne.n	8109436 <_printf_float+0x33e>
 81094b2:	e680      	b.n	81091b6 <_printf_float+0xbe>
 81094b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 81094b6:	2a01      	cmp	r2, #1
 81094b8:	dc01      	bgt.n	81094be <_printf_float+0x3c6>
 81094ba:	07db      	lsls	r3, r3, #31
 81094bc:	d53a      	bpl.n	8109534 <_printf_float+0x43c>
 81094be:	2301      	movs	r3, #1
 81094c0:	4642      	mov	r2, r8
 81094c2:	4631      	mov	r1, r6
 81094c4:	4628      	mov	r0, r5
 81094c6:	47b8      	blx	r7
 81094c8:	3001      	adds	r0, #1
 81094ca:	f43f ae74 	beq.w	81091b6 <_printf_float+0xbe>
 81094ce:	ee18 3a10 	vmov	r3, s16
 81094d2:	4652      	mov	r2, sl
 81094d4:	4631      	mov	r1, r6
 81094d6:	4628      	mov	r0, r5
 81094d8:	47b8      	blx	r7
 81094da:	3001      	adds	r0, #1
 81094dc:	f43f ae6b 	beq.w	81091b6 <_printf_float+0xbe>
 81094e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 81094e4:	2200      	movs	r2, #0
 81094e6:	2300      	movs	r3, #0
 81094e8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 81094ec:	f7f7 fb74 	bl	8100bd8 <__aeabi_dcmpeq>
 81094f0:	b9d8      	cbnz	r0, 810952a <_printf_float+0x432>
 81094f2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 81094f6:	f108 0201 	add.w	r2, r8, #1
 81094fa:	4631      	mov	r1, r6
 81094fc:	4628      	mov	r0, r5
 81094fe:	47b8      	blx	r7
 8109500:	3001      	adds	r0, #1
 8109502:	d10e      	bne.n	8109522 <_printf_float+0x42a>
 8109504:	e657      	b.n	81091b6 <_printf_float+0xbe>
 8109506:	2301      	movs	r3, #1
 8109508:	4652      	mov	r2, sl
 810950a:	4631      	mov	r1, r6
 810950c:	4628      	mov	r0, r5
 810950e:	47b8      	blx	r7
 8109510:	3001      	adds	r0, #1
 8109512:	f43f ae50 	beq.w	81091b6 <_printf_float+0xbe>
 8109516:	f108 0801 	add.w	r8, r8, #1
 810951a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810951c:	3b01      	subs	r3, #1
 810951e:	4543      	cmp	r3, r8
 8109520:	dcf1      	bgt.n	8109506 <_printf_float+0x40e>
 8109522:	464b      	mov	r3, r9
 8109524:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8109528:	e6da      	b.n	81092e0 <_printf_float+0x1e8>
 810952a:	f04f 0800 	mov.w	r8, #0
 810952e:	f104 0a1a 	add.w	sl, r4, #26
 8109532:	e7f2      	b.n	810951a <_printf_float+0x422>
 8109534:	2301      	movs	r3, #1
 8109536:	4642      	mov	r2, r8
 8109538:	e7df      	b.n	81094fa <_printf_float+0x402>
 810953a:	2301      	movs	r3, #1
 810953c:	464a      	mov	r2, r9
 810953e:	4631      	mov	r1, r6
 8109540:	4628      	mov	r0, r5
 8109542:	47b8      	blx	r7
 8109544:	3001      	adds	r0, #1
 8109546:	f43f ae36 	beq.w	81091b6 <_printf_float+0xbe>
 810954a:	f108 0801 	add.w	r8, r8, #1
 810954e:	68e3      	ldr	r3, [r4, #12]
 8109550:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8109552:	1a5b      	subs	r3, r3, r1
 8109554:	4543      	cmp	r3, r8
 8109556:	dcf0      	bgt.n	810953a <_printf_float+0x442>
 8109558:	e6f8      	b.n	810934c <_printf_float+0x254>
 810955a:	f04f 0800 	mov.w	r8, #0
 810955e:	f104 0919 	add.w	r9, r4, #25
 8109562:	e7f4      	b.n	810954e <_printf_float+0x456>

08109564 <_printf_common>:
 8109564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8109568:	4616      	mov	r6, r2
 810956a:	4699      	mov	r9, r3
 810956c:	688a      	ldr	r2, [r1, #8]
 810956e:	690b      	ldr	r3, [r1, #16]
 8109570:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8109574:	4293      	cmp	r3, r2
 8109576:	bfb8      	it	lt
 8109578:	4613      	movlt	r3, r2
 810957a:	6033      	str	r3, [r6, #0]
 810957c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8109580:	4607      	mov	r7, r0
 8109582:	460c      	mov	r4, r1
 8109584:	b10a      	cbz	r2, 810958a <_printf_common+0x26>
 8109586:	3301      	adds	r3, #1
 8109588:	6033      	str	r3, [r6, #0]
 810958a:	6823      	ldr	r3, [r4, #0]
 810958c:	0699      	lsls	r1, r3, #26
 810958e:	bf42      	ittt	mi
 8109590:	6833      	ldrmi	r3, [r6, #0]
 8109592:	3302      	addmi	r3, #2
 8109594:	6033      	strmi	r3, [r6, #0]
 8109596:	6825      	ldr	r5, [r4, #0]
 8109598:	f015 0506 	ands.w	r5, r5, #6
 810959c:	d106      	bne.n	81095ac <_printf_common+0x48>
 810959e:	f104 0a19 	add.w	sl, r4, #25
 81095a2:	68e3      	ldr	r3, [r4, #12]
 81095a4:	6832      	ldr	r2, [r6, #0]
 81095a6:	1a9b      	subs	r3, r3, r2
 81095a8:	42ab      	cmp	r3, r5
 81095aa:	dc26      	bgt.n	81095fa <_printf_common+0x96>
 81095ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 81095b0:	1e13      	subs	r3, r2, #0
 81095b2:	6822      	ldr	r2, [r4, #0]
 81095b4:	bf18      	it	ne
 81095b6:	2301      	movne	r3, #1
 81095b8:	0692      	lsls	r2, r2, #26
 81095ba:	d42b      	bmi.n	8109614 <_printf_common+0xb0>
 81095bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 81095c0:	4649      	mov	r1, r9
 81095c2:	4638      	mov	r0, r7
 81095c4:	47c0      	blx	r8
 81095c6:	3001      	adds	r0, #1
 81095c8:	d01e      	beq.n	8109608 <_printf_common+0xa4>
 81095ca:	6823      	ldr	r3, [r4, #0]
 81095cc:	6922      	ldr	r2, [r4, #16]
 81095ce:	f003 0306 	and.w	r3, r3, #6
 81095d2:	2b04      	cmp	r3, #4
 81095d4:	bf02      	ittt	eq
 81095d6:	68e5      	ldreq	r5, [r4, #12]
 81095d8:	6833      	ldreq	r3, [r6, #0]
 81095da:	1aed      	subeq	r5, r5, r3
 81095dc:	68a3      	ldr	r3, [r4, #8]
 81095de:	bf0c      	ite	eq
 81095e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 81095e4:	2500      	movne	r5, #0
 81095e6:	4293      	cmp	r3, r2
 81095e8:	bfc4      	itt	gt
 81095ea:	1a9b      	subgt	r3, r3, r2
 81095ec:	18ed      	addgt	r5, r5, r3
 81095ee:	2600      	movs	r6, #0
 81095f0:	341a      	adds	r4, #26
 81095f2:	42b5      	cmp	r5, r6
 81095f4:	d11a      	bne.n	810962c <_printf_common+0xc8>
 81095f6:	2000      	movs	r0, #0
 81095f8:	e008      	b.n	810960c <_printf_common+0xa8>
 81095fa:	2301      	movs	r3, #1
 81095fc:	4652      	mov	r2, sl
 81095fe:	4649      	mov	r1, r9
 8109600:	4638      	mov	r0, r7
 8109602:	47c0      	blx	r8
 8109604:	3001      	adds	r0, #1
 8109606:	d103      	bne.n	8109610 <_printf_common+0xac>
 8109608:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810960c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8109610:	3501      	adds	r5, #1
 8109612:	e7c6      	b.n	81095a2 <_printf_common+0x3e>
 8109614:	18e1      	adds	r1, r4, r3
 8109616:	1c5a      	adds	r2, r3, #1
 8109618:	2030      	movs	r0, #48	; 0x30
 810961a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 810961e:	4422      	add	r2, r4
 8109620:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8109624:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8109628:	3302      	adds	r3, #2
 810962a:	e7c7      	b.n	81095bc <_printf_common+0x58>
 810962c:	2301      	movs	r3, #1
 810962e:	4622      	mov	r2, r4
 8109630:	4649      	mov	r1, r9
 8109632:	4638      	mov	r0, r7
 8109634:	47c0      	blx	r8
 8109636:	3001      	adds	r0, #1
 8109638:	d0e6      	beq.n	8109608 <_printf_common+0xa4>
 810963a:	3601      	adds	r6, #1
 810963c:	e7d9      	b.n	81095f2 <_printf_common+0x8e>
	...

08109640 <_printf_i>:
 8109640:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8109644:	7e0f      	ldrb	r7, [r1, #24]
 8109646:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8109648:	2f78      	cmp	r7, #120	; 0x78
 810964a:	4691      	mov	r9, r2
 810964c:	4680      	mov	r8, r0
 810964e:	460c      	mov	r4, r1
 8109650:	469a      	mov	sl, r3
 8109652:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8109656:	d807      	bhi.n	8109668 <_printf_i+0x28>
 8109658:	2f62      	cmp	r7, #98	; 0x62
 810965a:	d80a      	bhi.n	8109672 <_printf_i+0x32>
 810965c:	2f00      	cmp	r7, #0
 810965e:	f000 80d4 	beq.w	810980a <_printf_i+0x1ca>
 8109662:	2f58      	cmp	r7, #88	; 0x58
 8109664:	f000 80c0 	beq.w	81097e8 <_printf_i+0x1a8>
 8109668:	f104 0542 	add.w	r5, r4, #66	; 0x42
 810966c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8109670:	e03a      	b.n	81096e8 <_printf_i+0xa8>
 8109672:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8109676:	2b15      	cmp	r3, #21
 8109678:	d8f6      	bhi.n	8109668 <_printf_i+0x28>
 810967a:	a101      	add	r1, pc, #4	; (adr r1, 8109680 <_printf_i+0x40>)
 810967c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8109680:	081096d9 	.word	0x081096d9
 8109684:	081096ed 	.word	0x081096ed
 8109688:	08109669 	.word	0x08109669
 810968c:	08109669 	.word	0x08109669
 8109690:	08109669 	.word	0x08109669
 8109694:	08109669 	.word	0x08109669
 8109698:	081096ed 	.word	0x081096ed
 810969c:	08109669 	.word	0x08109669
 81096a0:	08109669 	.word	0x08109669
 81096a4:	08109669 	.word	0x08109669
 81096a8:	08109669 	.word	0x08109669
 81096ac:	081097f1 	.word	0x081097f1
 81096b0:	08109719 	.word	0x08109719
 81096b4:	081097ab 	.word	0x081097ab
 81096b8:	08109669 	.word	0x08109669
 81096bc:	08109669 	.word	0x08109669
 81096c0:	08109813 	.word	0x08109813
 81096c4:	08109669 	.word	0x08109669
 81096c8:	08109719 	.word	0x08109719
 81096cc:	08109669 	.word	0x08109669
 81096d0:	08109669 	.word	0x08109669
 81096d4:	081097b3 	.word	0x081097b3
 81096d8:	682b      	ldr	r3, [r5, #0]
 81096da:	1d1a      	adds	r2, r3, #4
 81096dc:	681b      	ldr	r3, [r3, #0]
 81096de:	602a      	str	r2, [r5, #0]
 81096e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 81096e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 81096e8:	2301      	movs	r3, #1
 81096ea:	e09f      	b.n	810982c <_printf_i+0x1ec>
 81096ec:	6820      	ldr	r0, [r4, #0]
 81096ee:	682b      	ldr	r3, [r5, #0]
 81096f0:	0607      	lsls	r7, r0, #24
 81096f2:	f103 0104 	add.w	r1, r3, #4
 81096f6:	6029      	str	r1, [r5, #0]
 81096f8:	d501      	bpl.n	81096fe <_printf_i+0xbe>
 81096fa:	681e      	ldr	r6, [r3, #0]
 81096fc:	e003      	b.n	8109706 <_printf_i+0xc6>
 81096fe:	0646      	lsls	r6, r0, #25
 8109700:	d5fb      	bpl.n	81096fa <_printf_i+0xba>
 8109702:	f9b3 6000 	ldrsh.w	r6, [r3]
 8109706:	2e00      	cmp	r6, #0
 8109708:	da03      	bge.n	8109712 <_printf_i+0xd2>
 810970a:	232d      	movs	r3, #45	; 0x2d
 810970c:	4276      	negs	r6, r6
 810970e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8109712:	485a      	ldr	r0, [pc, #360]	; (810987c <_printf_i+0x23c>)
 8109714:	230a      	movs	r3, #10
 8109716:	e012      	b.n	810973e <_printf_i+0xfe>
 8109718:	682b      	ldr	r3, [r5, #0]
 810971a:	6820      	ldr	r0, [r4, #0]
 810971c:	1d19      	adds	r1, r3, #4
 810971e:	6029      	str	r1, [r5, #0]
 8109720:	0605      	lsls	r5, r0, #24
 8109722:	d501      	bpl.n	8109728 <_printf_i+0xe8>
 8109724:	681e      	ldr	r6, [r3, #0]
 8109726:	e002      	b.n	810972e <_printf_i+0xee>
 8109728:	0641      	lsls	r1, r0, #25
 810972a:	d5fb      	bpl.n	8109724 <_printf_i+0xe4>
 810972c:	881e      	ldrh	r6, [r3, #0]
 810972e:	4853      	ldr	r0, [pc, #332]	; (810987c <_printf_i+0x23c>)
 8109730:	2f6f      	cmp	r7, #111	; 0x6f
 8109732:	bf0c      	ite	eq
 8109734:	2308      	moveq	r3, #8
 8109736:	230a      	movne	r3, #10
 8109738:	2100      	movs	r1, #0
 810973a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 810973e:	6865      	ldr	r5, [r4, #4]
 8109740:	60a5      	str	r5, [r4, #8]
 8109742:	2d00      	cmp	r5, #0
 8109744:	bfa2      	ittt	ge
 8109746:	6821      	ldrge	r1, [r4, #0]
 8109748:	f021 0104 	bicge.w	r1, r1, #4
 810974c:	6021      	strge	r1, [r4, #0]
 810974e:	b90e      	cbnz	r6, 8109754 <_printf_i+0x114>
 8109750:	2d00      	cmp	r5, #0
 8109752:	d04b      	beq.n	81097ec <_printf_i+0x1ac>
 8109754:	4615      	mov	r5, r2
 8109756:	fbb6 f1f3 	udiv	r1, r6, r3
 810975a:	fb03 6711 	mls	r7, r3, r1, r6
 810975e:	5dc7      	ldrb	r7, [r0, r7]
 8109760:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8109764:	4637      	mov	r7, r6
 8109766:	42bb      	cmp	r3, r7
 8109768:	460e      	mov	r6, r1
 810976a:	d9f4      	bls.n	8109756 <_printf_i+0x116>
 810976c:	2b08      	cmp	r3, #8
 810976e:	d10b      	bne.n	8109788 <_printf_i+0x148>
 8109770:	6823      	ldr	r3, [r4, #0]
 8109772:	07de      	lsls	r6, r3, #31
 8109774:	d508      	bpl.n	8109788 <_printf_i+0x148>
 8109776:	6923      	ldr	r3, [r4, #16]
 8109778:	6861      	ldr	r1, [r4, #4]
 810977a:	4299      	cmp	r1, r3
 810977c:	bfde      	ittt	le
 810977e:	2330      	movle	r3, #48	; 0x30
 8109780:	f805 3c01 	strble.w	r3, [r5, #-1]
 8109784:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8109788:	1b52      	subs	r2, r2, r5
 810978a:	6122      	str	r2, [r4, #16]
 810978c:	f8cd a000 	str.w	sl, [sp]
 8109790:	464b      	mov	r3, r9
 8109792:	aa03      	add	r2, sp, #12
 8109794:	4621      	mov	r1, r4
 8109796:	4640      	mov	r0, r8
 8109798:	f7ff fee4 	bl	8109564 <_printf_common>
 810979c:	3001      	adds	r0, #1
 810979e:	d14a      	bne.n	8109836 <_printf_i+0x1f6>
 81097a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 81097a4:	b004      	add	sp, #16
 81097a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81097aa:	6823      	ldr	r3, [r4, #0]
 81097ac:	f043 0320 	orr.w	r3, r3, #32
 81097b0:	6023      	str	r3, [r4, #0]
 81097b2:	4833      	ldr	r0, [pc, #204]	; (8109880 <_printf_i+0x240>)
 81097b4:	2778      	movs	r7, #120	; 0x78
 81097b6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 81097ba:	6823      	ldr	r3, [r4, #0]
 81097bc:	6829      	ldr	r1, [r5, #0]
 81097be:	061f      	lsls	r7, r3, #24
 81097c0:	f851 6b04 	ldr.w	r6, [r1], #4
 81097c4:	d402      	bmi.n	81097cc <_printf_i+0x18c>
 81097c6:	065f      	lsls	r7, r3, #25
 81097c8:	bf48      	it	mi
 81097ca:	b2b6      	uxthmi	r6, r6
 81097cc:	07df      	lsls	r7, r3, #31
 81097ce:	bf48      	it	mi
 81097d0:	f043 0320 	orrmi.w	r3, r3, #32
 81097d4:	6029      	str	r1, [r5, #0]
 81097d6:	bf48      	it	mi
 81097d8:	6023      	strmi	r3, [r4, #0]
 81097da:	b91e      	cbnz	r6, 81097e4 <_printf_i+0x1a4>
 81097dc:	6823      	ldr	r3, [r4, #0]
 81097de:	f023 0320 	bic.w	r3, r3, #32
 81097e2:	6023      	str	r3, [r4, #0]
 81097e4:	2310      	movs	r3, #16
 81097e6:	e7a7      	b.n	8109738 <_printf_i+0xf8>
 81097e8:	4824      	ldr	r0, [pc, #144]	; (810987c <_printf_i+0x23c>)
 81097ea:	e7e4      	b.n	81097b6 <_printf_i+0x176>
 81097ec:	4615      	mov	r5, r2
 81097ee:	e7bd      	b.n	810976c <_printf_i+0x12c>
 81097f0:	682b      	ldr	r3, [r5, #0]
 81097f2:	6826      	ldr	r6, [r4, #0]
 81097f4:	6961      	ldr	r1, [r4, #20]
 81097f6:	1d18      	adds	r0, r3, #4
 81097f8:	6028      	str	r0, [r5, #0]
 81097fa:	0635      	lsls	r5, r6, #24
 81097fc:	681b      	ldr	r3, [r3, #0]
 81097fe:	d501      	bpl.n	8109804 <_printf_i+0x1c4>
 8109800:	6019      	str	r1, [r3, #0]
 8109802:	e002      	b.n	810980a <_printf_i+0x1ca>
 8109804:	0670      	lsls	r0, r6, #25
 8109806:	d5fb      	bpl.n	8109800 <_printf_i+0x1c0>
 8109808:	8019      	strh	r1, [r3, #0]
 810980a:	2300      	movs	r3, #0
 810980c:	6123      	str	r3, [r4, #16]
 810980e:	4615      	mov	r5, r2
 8109810:	e7bc      	b.n	810978c <_printf_i+0x14c>
 8109812:	682b      	ldr	r3, [r5, #0]
 8109814:	1d1a      	adds	r2, r3, #4
 8109816:	602a      	str	r2, [r5, #0]
 8109818:	681d      	ldr	r5, [r3, #0]
 810981a:	6862      	ldr	r2, [r4, #4]
 810981c:	2100      	movs	r1, #0
 810981e:	4628      	mov	r0, r5
 8109820:	f7f6 fd5e 	bl	81002e0 <memchr>
 8109824:	b108      	cbz	r0, 810982a <_printf_i+0x1ea>
 8109826:	1b40      	subs	r0, r0, r5
 8109828:	6060      	str	r0, [r4, #4]
 810982a:	6863      	ldr	r3, [r4, #4]
 810982c:	6123      	str	r3, [r4, #16]
 810982e:	2300      	movs	r3, #0
 8109830:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8109834:	e7aa      	b.n	810978c <_printf_i+0x14c>
 8109836:	6923      	ldr	r3, [r4, #16]
 8109838:	462a      	mov	r2, r5
 810983a:	4649      	mov	r1, r9
 810983c:	4640      	mov	r0, r8
 810983e:	47d0      	blx	sl
 8109840:	3001      	adds	r0, #1
 8109842:	d0ad      	beq.n	81097a0 <_printf_i+0x160>
 8109844:	6823      	ldr	r3, [r4, #0]
 8109846:	079b      	lsls	r3, r3, #30
 8109848:	d413      	bmi.n	8109872 <_printf_i+0x232>
 810984a:	68e0      	ldr	r0, [r4, #12]
 810984c:	9b03      	ldr	r3, [sp, #12]
 810984e:	4298      	cmp	r0, r3
 8109850:	bfb8      	it	lt
 8109852:	4618      	movlt	r0, r3
 8109854:	e7a6      	b.n	81097a4 <_printf_i+0x164>
 8109856:	2301      	movs	r3, #1
 8109858:	4632      	mov	r2, r6
 810985a:	4649      	mov	r1, r9
 810985c:	4640      	mov	r0, r8
 810985e:	47d0      	blx	sl
 8109860:	3001      	adds	r0, #1
 8109862:	d09d      	beq.n	81097a0 <_printf_i+0x160>
 8109864:	3501      	adds	r5, #1
 8109866:	68e3      	ldr	r3, [r4, #12]
 8109868:	9903      	ldr	r1, [sp, #12]
 810986a:	1a5b      	subs	r3, r3, r1
 810986c:	42ab      	cmp	r3, r5
 810986e:	dcf2      	bgt.n	8109856 <_printf_i+0x216>
 8109870:	e7eb      	b.n	810984a <_printf_i+0x20a>
 8109872:	2500      	movs	r5, #0
 8109874:	f104 0619 	add.w	r6, r4, #25
 8109878:	e7f5      	b.n	8109866 <_printf_i+0x226>
 810987a:	bf00      	nop
 810987c:	0810e7a2 	.word	0x0810e7a2
 8109880:	0810e7b3 	.word	0x0810e7b3

08109884 <_scanf_float>:
 8109884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109888:	b087      	sub	sp, #28
 810988a:	4617      	mov	r7, r2
 810988c:	9303      	str	r3, [sp, #12]
 810988e:	688b      	ldr	r3, [r1, #8]
 8109890:	1e5a      	subs	r2, r3, #1
 8109892:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8109896:	bf83      	ittte	hi
 8109898:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 810989c:	195b      	addhi	r3, r3, r5
 810989e:	9302      	strhi	r3, [sp, #8]
 81098a0:	2300      	movls	r3, #0
 81098a2:	bf86      	itte	hi
 81098a4:	f240 135d 	movwhi	r3, #349	; 0x15d
 81098a8:	608b      	strhi	r3, [r1, #8]
 81098aa:	9302      	strls	r3, [sp, #8]
 81098ac:	680b      	ldr	r3, [r1, #0]
 81098ae:	468b      	mov	fp, r1
 81098b0:	2500      	movs	r5, #0
 81098b2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 81098b6:	f84b 3b1c 	str.w	r3, [fp], #28
 81098ba:	e9cd 5504 	strd	r5, r5, [sp, #16]
 81098be:	4680      	mov	r8, r0
 81098c0:	460c      	mov	r4, r1
 81098c2:	465e      	mov	r6, fp
 81098c4:	46aa      	mov	sl, r5
 81098c6:	46a9      	mov	r9, r5
 81098c8:	9501      	str	r5, [sp, #4]
 81098ca:	68a2      	ldr	r2, [r4, #8]
 81098cc:	b152      	cbz	r2, 81098e4 <_scanf_float+0x60>
 81098ce:	683b      	ldr	r3, [r7, #0]
 81098d0:	781b      	ldrb	r3, [r3, #0]
 81098d2:	2b4e      	cmp	r3, #78	; 0x4e
 81098d4:	d864      	bhi.n	81099a0 <_scanf_float+0x11c>
 81098d6:	2b40      	cmp	r3, #64	; 0x40
 81098d8:	d83c      	bhi.n	8109954 <_scanf_float+0xd0>
 81098da:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 81098de:	b2c8      	uxtb	r0, r1
 81098e0:	280e      	cmp	r0, #14
 81098e2:	d93a      	bls.n	810995a <_scanf_float+0xd6>
 81098e4:	f1b9 0f00 	cmp.w	r9, #0
 81098e8:	d003      	beq.n	81098f2 <_scanf_float+0x6e>
 81098ea:	6823      	ldr	r3, [r4, #0]
 81098ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81098f0:	6023      	str	r3, [r4, #0]
 81098f2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 81098f6:	f1ba 0f01 	cmp.w	sl, #1
 81098fa:	f200 8113 	bhi.w	8109b24 <_scanf_float+0x2a0>
 81098fe:	455e      	cmp	r6, fp
 8109900:	f200 8105 	bhi.w	8109b0e <_scanf_float+0x28a>
 8109904:	2501      	movs	r5, #1
 8109906:	4628      	mov	r0, r5
 8109908:	b007      	add	sp, #28
 810990a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810990e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8109912:	2a0d      	cmp	r2, #13
 8109914:	d8e6      	bhi.n	81098e4 <_scanf_float+0x60>
 8109916:	a101      	add	r1, pc, #4	; (adr r1, 810991c <_scanf_float+0x98>)
 8109918:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 810991c:	08109a5b 	.word	0x08109a5b
 8109920:	081098e5 	.word	0x081098e5
 8109924:	081098e5 	.word	0x081098e5
 8109928:	081098e5 	.word	0x081098e5
 810992c:	08109abb 	.word	0x08109abb
 8109930:	08109a93 	.word	0x08109a93
 8109934:	081098e5 	.word	0x081098e5
 8109938:	081098e5 	.word	0x081098e5
 810993c:	08109a69 	.word	0x08109a69
 8109940:	081098e5 	.word	0x081098e5
 8109944:	081098e5 	.word	0x081098e5
 8109948:	081098e5 	.word	0x081098e5
 810994c:	081098e5 	.word	0x081098e5
 8109950:	08109a21 	.word	0x08109a21
 8109954:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8109958:	e7db      	b.n	8109912 <_scanf_float+0x8e>
 810995a:	290e      	cmp	r1, #14
 810995c:	d8c2      	bhi.n	81098e4 <_scanf_float+0x60>
 810995e:	a001      	add	r0, pc, #4	; (adr r0, 8109964 <_scanf_float+0xe0>)
 8109960:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8109964:	08109a13 	.word	0x08109a13
 8109968:	081098e5 	.word	0x081098e5
 810996c:	08109a13 	.word	0x08109a13
 8109970:	08109aa7 	.word	0x08109aa7
 8109974:	081098e5 	.word	0x081098e5
 8109978:	081099c1 	.word	0x081099c1
 810997c:	081099fd 	.word	0x081099fd
 8109980:	081099fd 	.word	0x081099fd
 8109984:	081099fd 	.word	0x081099fd
 8109988:	081099fd 	.word	0x081099fd
 810998c:	081099fd 	.word	0x081099fd
 8109990:	081099fd 	.word	0x081099fd
 8109994:	081099fd 	.word	0x081099fd
 8109998:	081099fd 	.word	0x081099fd
 810999c:	081099fd 	.word	0x081099fd
 81099a0:	2b6e      	cmp	r3, #110	; 0x6e
 81099a2:	d809      	bhi.n	81099b8 <_scanf_float+0x134>
 81099a4:	2b60      	cmp	r3, #96	; 0x60
 81099a6:	d8b2      	bhi.n	810990e <_scanf_float+0x8a>
 81099a8:	2b54      	cmp	r3, #84	; 0x54
 81099aa:	d077      	beq.n	8109a9c <_scanf_float+0x218>
 81099ac:	2b59      	cmp	r3, #89	; 0x59
 81099ae:	d199      	bne.n	81098e4 <_scanf_float+0x60>
 81099b0:	2d07      	cmp	r5, #7
 81099b2:	d197      	bne.n	81098e4 <_scanf_float+0x60>
 81099b4:	2508      	movs	r5, #8
 81099b6:	e029      	b.n	8109a0c <_scanf_float+0x188>
 81099b8:	2b74      	cmp	r3, #116	; 0x74
 81099ba:	d06f      	beq.n	8109a9c <_scanf_float+0x218>
 81099bc:	2b79      	cmp	r3, #121	; 0x79
 81099be:	e7f6      	b.n	81099ae <_scanf_float+0x12a>
 81099c0:	6821      	ldr	r1, [r4, #0]
 81099c2:	05c8      	lsls	r0, r1, #23
 81099c4:	d51a      	bpl.n	81099fc <_scanf_float+0x178>
 81099c6:	9b02      	ldr	r3, [sp, #8]
 81099c8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 81099cc:	6021      	str	r1, [r4, #0]
 81099ce:	f109 0901 	add.w	r9, r9, #1
 81099d2:	b11b      	cbz	r3, 81099dc <_scanf_float+0x158>
 81099d4:	3b01      	subs	r3, #1
 81099d6:	3201      	adds	r2, #1
 81099d8:	9302      	str	r3, [sp, #8]
 81099da:	60a2      	str	r2, [r4, #8]
 81099dc:	68a3      	ldr	r3, [r4, #8]
 81099de:	3b01      	subs	r3, #1
 81099e0:	60a3      	str	r3, [r4, #8]
 81099e2:	6923      	ldr	r3, [r4, #16]
 81099e4:	3301      	adds	r3, #1
 81099e6:	6123      	str	r3, [r4, #16]
 81099e8:	687b      	ldr	r3, [r7, #4]
 81099ea:	3b01      	subs	r3, #1
 81099ec:	2b00      	cmp	r3, #0
 81099ee:	607b      	str	r3, [r7, #4]
 81099f0:	f340 8084 	ble.w	8109afc <_scanf_float+0x278>
 81099f4:	683b      	ldr	r3, [r7, #0]
 81099f6:	3301      	adds	r3, #1
 81099f8:	603b      	str	r3, [r7, #0]
 81099fa:	e766      	b.n	81098ca <_scanf_float+0x46>
 81099fc:	eb1a 0f05 	cmn.w	sl, r5
 8109a00:	f47f af70 	bne.w	81098e4 <_scanf_float+0x60>
 8109a04:	6822      	ldr	r2, [r4, #0]
 8109a06:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8109a0a:	6022      	str	r2, [r4, #0]
 8109a0c:	f806 3b01 	strb.w	r3, [r6], #1
 8109a10:	e7e4      	b.n	81099dc <_scanf_float+0x158>
 8109a12:	6822      	ldr	r2, [r4, #0]
 8109a14:	0610      	lsls	r0, r2, #24
 8109a16:	f57f af65 	bpl.w	81098e4 <_scanf_float+0x60>
 8109a1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8109a1e:	e7f4      	b.n	8109a0a <_scanf_float+0x186>
 8109a20:	f1ba 0f00 	cmp.w	sl, #0
 8109a24:	d10e      	bne.n	8109a44 <_scanf_float+0x1c0>
 8109a26:	f1b9 0f00 	cmp.w	r9, #0
 8109a2a:	d10e      	bne.n	8109a4a <_scanf_float+0x1c6>
 8109a2c:	6822      	ldr	r2, [r4, #0]
 8109a2e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8109a32:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8109a36:	d108      	bne.n	8109a4a <_scanf_float+0x1c6>
 8109a38:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8109a3c:	6022      	str	r2, [r4, #0]
 8109a3e:	f04f 0a01 	mov.w	sl, #1
 8109a42:	e7e3      	b.n	8109a0c <_scanf_float+0x188>
 8109a44:	f1ba 0f02 	cmp.w	sl, #2
 8109a48:	d055      	beq.n	8109af6 <_scanf_float+0x272>
 8109a4a:	2d01      	cmp	r5, #1
 8109a4c:	d002      	beq.n	8109a54 <_scanf_float+0x1d0>
 8109a4e:	2d04      	cmp	r5, #4
 8109a50:	f47f af48 	bne.w	81098e4 <_scanf_float+0x60>
 8109a54:	3501      	adds	r5, #1
 8109a56:	b2ed      	uxtb	r5, r5
 8109a58:	e7d8      	b.n	8109a0c <_scanf_float+0x188>
 8109a5a:	f1ba 0f01 	cmp.w	sl, #1
 8109a5e:	f47f af41 	bne.w	81098e4 <_scanf_float+0x60>
 8109a62:	f04f 0a02 	mov.w	sl, #2
 8109a66:	e7d1      	b.n	8109a0c <_scanf_float+0x188>
 8109a68:	b97d      	cbnz	r5, 8109a8a <_scanf_float+0x206>
 8109a6a:	f1b9 0f00 	cmp.w	r9, #0
 8109a6e:	f47f af3c 	bne.w	81098ea <_scanf_float+0x66>
 8109a72:	6822      	ldr	r2, [r4, #0]
 8109a74:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8109a78:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8109a7c:	f47f af39 	bne.w	81098f2 <_scanf_float+0x6e>
 8109a80:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8109a84:	6022      	str	r2, [r4, #0]
 8109a86:	2501      	movs	r5, #1
 8109a88:	e7c0      	b.n	8109a0c <_scanf_float+0x188>
 8109a8a:	2d03      	cmp	r5, #3
 8109a8c:	d0e2      	beq.n	8109a54 <_scanf_float+0x1d0>
 8109a8e:	2d05      	cmp	r5, #5
 8109a90:	e7de      	b.n	8109a50 <_scanf_float+0x1cc>
 8109a92:	2d02      	cmp	r5, #2
 8109a94:	f47f af26 	bne.w	81098e4 <_scanf_float+0x60>
 8109a98:	2503      	movs	r5, #3
 8109a9a:	e7b7      	b.n	8109a0c <_scanf_float+0x188>
 8109a9c:	2d06      	cmp	r5, #6
 8109a9e:	f47f af21 	bne.w	81098e4 <_scanf_float+0x60>
 8109aa2:	2507      	movs	r5, #7
 8109aa4:	e7b2      	b.n	8109a0c <_scanf_float+0x188>
 8109aa6:	6822      	ldr	r2, [r4, #0]
 8109aa8:	0591      	lsls	r1, r2, #22
 8109aaa:	f57f af1b 	bpl.w	81098e4 <_scanf_float+0x60>
 8109aae:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8109ab2:	6022      	str	r2, [r4, #0]
 8109ab4:	f8cd 9004 	str.w	r9, [sp, #4]
 8109ab8:	e7a8      	b.n	8109a0c <_scanf_float+0x188>
 8109aba:	6822      	ldr	r2, [r4, #0]
 8109abc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8109ac0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8109ac4:	d006      	beq.n	8109ad4 <_scanf_float+0x250>
 8109ac6:	0550      	lsls	r0, r2, #21
 8109ac8:	f57f af0c 	bpl.w	81098e4 <_scanf_float+0x60>
 8109acc:	f1b9 0f00 	cmp.w	r9, #0
 8109ad0:	f43f af0f 	beq.w	81098f2 <_scanf_float+0x6e>
 8109ad4:	0591      	lsls	r1, r2, #22
 8109ad6:	bf58      	it	pl
 8109ad8:	9901      	ldrpl	r1, [sp, #4]
 8109ada:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8109ade:	bf58      	it	pl
 8109ae0:	eba9 0101 	subpl.w	r1, r9, r1
 8109ae4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8109ae8:	bf58      	it	pl
 8109aea:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8109aee:	6022      	str	r2, [r4, #0]
 8109af0:	f04f 0900 	mov.w	r9, #0
 8109af4:	e78a      	b.n	8109a0c <_scanf_float+0x188>
 8109af6:	f04f 0a03 	mov.w	sl, #3
 8109afa:	e787      	b.n	8109a0c <_scanf_float+0x188>
 8109afc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8109b00:	4639      	mov	r1, r7
 8109b02:	4640      	mov	r0, r8
 8109b04:	4798      	blx	r3
 8109b06:	2800      	cmp	r0, #0
 8109b08:	f43f aedf 	beq.w	81098ca <_scanf_float+0x46>
 8109b0c:	e6ea      	b.n	81098e4 <_scanf_float+0x60>
 8109b0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8109b12:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8109b16:	463a      	mov	r2, r7
 8109b18:	4640      	mov	r0, r8
 8109b1a:	4798      	blx	r3
 8109b1c:	6923      	ldr	r3, [r4, #16]
 8109b1e:	3b01      	subs	r3, #1
 8109b20:	6123      	str	r3, [r4, #16]
 8109b22:	e6ec      	b.n	81098fe <_scanf_float+0x7a>
 8109b24:	1e6b      	subs	r3, r5, #1
 8109b26:	2b06      	cmp	r3, #6
 8109b28:	d825      	bhi.n	8109b76 <_scanf_float+0x2f2>
 8109b2a:	2d02      	cmp	r5, #2
 8109b2c:	d836      	bhi.n	8109b9c <_scanf_float+0x318>
 8109b2e:	455e      	cmp	r6, fp
 8109b30:	f67f aee8 	bls.w	8109904 <_scanf_float+0x80>
 8109b34:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8109b38:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8109b3c:	463a      	mov	r2, r7
 8109b3e:	4640      	mov	r0, r8
 8109b40:	4798      	blx	r3
 8109b42:	6923      	ldr	r3, [r4, #16]
 8109b44:	3b01      	subs	r3, #1
 8109b46:	6123      	str	r3, [r4, #16]
 8109b48:	e7f1      	b.n	8109b2e <_scanf_float+0x2aa>
 8109b4a:	9802      	ldr	r0, [sp, #8]
 8109b4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8109b50:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8109b54:	9002      	str	r0, [sp, #8]
 8109b56:	463a      	mov	r2, r7
 8109b58:	4640      	mov	r0, r8
 8109b5a:	4798      	blx	r3
 8109b5c:	6923      	ldr	r3, [r4, #16]
 8109b5e:	3b01      	subs	r3, #1
 8109b60:	6123      	str	r3, [r4, #16]
 8109b62:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8109b66:	fa5f fa8a 	uxtb.w	sl, sl
 8109b6a:	f1ba 0f02 	cmp.w	sl, #2
 8109b6e:	d1ec      	bne.n	8109b4a <_scanf_float+0x2c6>
 8109b70:	3d03      	subs	r5, #3
 8109b72:	b2ed      	uxtb	r5, r5
 8109b74:	1b76      	subs	r6, r6, r5
 8109b76:	6823      	ldr	r3, [r4, #0]
 8109b78:	05da      	lsls	r2, r3, #23
 8109b7a:	d52f      	bpl.n	8109bdc <_scanf_float+0x358>
 8109b7c:	055b      	lsls	r3, r3, #21
 8109b7e:	d510      	bpl.n	8109ba2 <_scanf_float+0x31e>
 8109b80:	455e      	cmp	r6, fp
 8109b82:	f67f aebf 	bls.w	8109904 <_scanf_float+0x80>
 8109b86:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8109b8a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8109b8e:	463a      	mov	r2, r7
 8109b90:	4640      	mov	r0, r8
 8109b92:	4798      	blx	r3
 8109b94:	6923      	ldr	r3, [r4, #16]
 8109b96:	3b01      	subs	r3, #1
 8109b98:	6123      	str	r3, [r4, #16]
 8109b9a:	e7f1      	b.n	8109b80 <_scanf_float+0x2fc>
 8109b9c:	46aa      	mov	sl, r5
 8109b9e:	9602      	str	r6, [sp, #8]
 8109ba0:	e7df      	b.n	8109b62 <_scanf_float+0x2de>
 8109ba2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8109ba6:	6923      	ldr	r3, [r4, #16]
 8109ba8:	2965      	cmp	r1, #101	; 0x65
 8109baa:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8109bae:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8109bb2:	6123      	str	r3, [r4, #16]
 8109bb4:	d00c      	beq.n	8109bd0 <_scanf_float+0x34c>
 8109bb6:	2945      	cmp	r1, #69	; 0x45
 8109bb8:	d00a      	beq.n	8109bd0 <_scanf_float+0x34c>
 8109bba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8109bbe:	463a      	mov	r2, r7
 8109bc0:	4640      	mov	r0, r8
 8109bc2:	4798      	blx	r3
 8109bc4:	6923      	ldr	r3, [r4, #16]
 8109bc6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8109bca:	3b01      	subs	r3, #1
 8109bcc:	1eb5      	subs	r5, r6, #2
 8109bce:	6123      	str	r3, [r4, #16]
 8109bd0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8109bd4:	463a      	mov	r2, r7
 8109bd6:	4640      	mov	r0, r8
 8109bd8:	4798      	blx	r3
 8109bda:	462e      	mov	r6, r5
 8109bdc:	6825      	ldr	r5, [r4, #0]
 8109bde:	f015 0510 	ands.w	r5, r5, #16
 8109be2:	d158      	bne.n	8109c96 <_scanf_float+0x412>
 8109be4:	7035      	strb	r5, [r6, #0]
 8109be6:	6823      	ldr	r3, [r4, #0]
 8109be8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8109bec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8109bf0:	d11c      	bne.n	8109c2c <_scanf_float+0x3a8>
 8109bf2:	9b01      	ldr	r3, [sp, #4]
 8109bf4:	454b      	cmp	r3, r9
 8109bf6:	eba3 0209 	sub.w	r2, r3, r9
 8109bfa:	d124      	bne.n	8109c46 <_scanf_float+0x3c2>
 8109bfc:	2200      	movs	r2, #0
 8109bfe:	4659      	mov	r1, fp
 8109c00:	4640      	mov	r0, r8
 8109c02:	f000 ff79 	bl	810aaf8 <_strtod_r>
 8109c06:	9b03      	ldr	r3, [sp, #12]
 8109c08:	6821      	ldr	r1, [r4, #0]
 8109c0a:	681b      	ldr	r3, [r3, #0]
 8109c0c:	f011 0f02 	tst.w	r1, #2
 8109c10:	ec57 6b10 	vmov	r6, r7, d0
 8109c14:	f103 0204 	add.w	r2, r3, #4
 8109c18:	d020      	beq.n	8109c5c <_scanf_float+0x3d8>
 8109c1a:	9903      	ldr	r1, [sp, #12]
 8109c1c:	600a      	str	r2, [r1, #0]
 8109c1e:	681b      	ldr	r3, [r3, #0]
 8109c20:	e9c3 6700 	strd	r6, r7, [r3]
 8109c24:	68e3      	ldr	r3, [r4, #12]
 8109c26:	3301      	adds	r3, #1
 8109c28:	60e3      	str	r3, [r4, #12]
 8109c2a:	e66c      	b.n	8109906 <_scanf_float+0x82>
 8109c2c:	9b04      	ldr	r3, [sp, #16]
 8109c2e:	2b00      	cmp	r3, #0
 8109c30:	d0e4      	beq.n	8109bfc <_scanf_float+0x378>
 8109c32:	9905      	ldr	r1, [sp, #20]
 8109c34:	230a      	movs	r3, #10
 8109c36:	462a      	mov	r2, r5
 8109c38:	3101      	adds	r1, #1
 8109c3a:	4640      	mov	r0, r8
 8109c3c:	f000 ffe4 	bl	810ac08 <_strtol_r>
 8109c40:	9b04      	ldr	r3, [sp, #16]
 8109c42:	9e05      	ldr	r6, [sp, #20]
 8109c44:	1ac2      	subs	r2, r0, r3
 8109c46:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8109c4a:	429e      	cmp	r6, r3
 8109c4c:	bf28      	it	cs
 8109c4e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8109c52:	4912      	ldr	r1, [pc, #72]	; (8109c9c <_scanf_float+0x418>)
 8109c54:	4630      	mov	r0, r6
 8109c56:	f000 f825 	bl	8109ca4 <siprintf>
 8109c5a:	e7cf      	b.n	8109bfc <_scanf_float+0x378>
 8109c5c:	f011 0f04 	tst.w	r1, #4
 8109c60:	9903      	ldr	r1, [sp, #12]
 8109c62:	600a      	str	r2, [r1, #0]
 8109c64:	d1db      	bne.n	8109c1e <_scanf_float+0x39a>
 8109c66:	f8d3 8000 	ldr.w	r8, [r3]
 8109c6a:	ee10 2a10 	vmov	r2, s0
 8109c6e:	ee10 0a10 	vmov	r0, s0
 8109c72:	463b      	mov	r3, r7
 8109c74:	4639      	mov	r1, r7
 8109c76:	f7f6 ffe1 	bl	8100c3c <__aeabi_dcmpun>
 8109c7a:	b128      	cbz	r0, 8109c88 <_scanf_float+0x404>
 8109c7c:	4808      	ldr	r0, [pc, #32]	; (8109ca0 <_scanf_float+0x41c>)
 8109c7e:	f001 f86f 	bl	810ad60 <nanf>
 8109c82:	ed88 0a00 	vstr	s0, [r8]
 8109c86:	e7cd      	b.n	8109c24 <_scanf_float+0x3a0>
 8109c88:	4630      	mov	r0, r6
 8109c8a:	4639      	mov	r1, r7
 8109c8c:	f7f7 f834 	bl	8100cf8 <__aeabi_d2f>
 8109c90:	f8c8 0000 	str.w	r0, [r8]
 8109c94:	e7c6      	b.n	8109c24 <_scanf_float+0x3a0>
 8109c96:	2500      	movs	r5, #0
 8109c98:	e635      	b.n	8109906 <_scanf_float+0x82>
 8109c9a:	bf00      	nop
 8109c9c:	0810e7c4 	.word	0x0810e7c4
 8109ca0:	0810e9d4 	.word	0x0810e9d4

08109ca4 <siprintf>:
 8109ca4:	b40e      	push	{r1, r2, r3}
 8109ca6:	b500      	push	{lr}
 8109ca8:	b09c      	sub	sp, #112	; 0x70
 8109caa:	ab1d      	add	r3, sp, #116	; 0x74
 8109cac:	9002      	str	r0, [sp, #8]
 8109cae:	9006      	str	r0, [sp, #24]
 8109cb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8109cb4:	4809      	ldr	r0, [pc, #36]	; (8109cdc <siprintf+0x38>)
 8109cb6:	9107      	str	r1, [sp, #28]
 8109cb8:	9104      	str	r1, [sp, #16]
 8109cba:	4909      	ldr	r1, [pc, #36]	; (8109ce0 <siprintf+0x3c>)
 8109cbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8109cc0:	9105      	str	r1, [sp, #20]
 8109cc2:	6800      	ldr	r0, [r0, #0]
 8109cc4:	9301      	str	r3, [sp, #4]
 8109cc6:	a902      	add	r1, sp, #8
 8109cc8:	f002 fa9a 	bl	810c200 <_svfiprintf_r>
 8109ccc:	9b02      	ldr	r3, [sp, #8]
 8109cce:	2200      	movs	r2, #0
 8109cd0:	701a      	strb	r2, [r3, #0]
 8109cd2:	b01c      	add	sp, #112	; 0x70
 8109cd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8109cd8:	b003      	add	sp, #12
 8109cda:	4770      	bx	lr
 8109cdc:	100001d4 	.word	0x100001d4
 8109ce0:	ffff0208 	.word	0xffff0208

08109ce4 <srand>:
 8109ce4:	b538      	push	{r3, r4, r5, lr}
 8109ce6:	4b10      	ldr	r3, [pc, #64]	; (8109d28 <srand+0x44>)
 8109ce8:	681d      	ldr	r5, [r3, #0]
 8109cea:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8109cec:	4604      	mov	r4, r0
 8109cee:	b9b3      	cbnz	r3, 8109d1e <srand+0x3a>
 8109cf0:	2018      	movs	r0, #24
 8109cf2:	f002 fb83 	bl	810c3fc <malloc>
 8109cf6:	4602      	mov	r2, r0
 8109cf8:	6328      	str	r0, [r5, #48]	; 0x30
 8109cfa:	b920      	cbnz	r0, 8109d06 <srand+0x22>
 8109cfc:	4b0b      	ldr	r3, [pc, #44]	; (8109d2c <srand+0x48>)
 8109cfe:	480c      	ldr	r0, [pc, #48]	; (8109d30 <srand+0x4c>)
 8109d00:	2146      	movs	r1, #70	; 0x46
 8109d02:	f001 f833 	bl	810ad6c <__assert_func>
 8109d06:	490b      	ldr	r1, [pc, #44]	; (8109d34 <srand+0x50>)
 8109d08:	4b0b      	ldr	r3, [pc, #44]	; (8109d38 <srand+0x54>)
 8109d0a:	e9c0 1300 	strd	r1, r3, [r0]
 8109d0e:	4b0b      	ldr	r3, [pc, #44]	; (8109d3c <srand+0x58>)
 8109d10:	6083      	str	r3, [r0, #8]
 8109d12:	230b      	movs	r3, #11
 8109d14:	8183      	strh	r3, [r0, #12]
 8109d16:	2100      	movs	r1, #0
 8109d18:	2001      	movs	r0, #1
 8109d1a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8109d1e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8109d20:	2200      	movs	r2, #0
 8109d22:	611c      	str	r4, [r3, #16]
 8109d24:	615a      	str	r2, [r3, #20]
 8109d26:	bd38      	pop	{r3, r4, r5, pc}
 8109d28:	100001d4 	.word	0x100001d4
 8109d2c:	0810e7c9 	.word	0x0810e7c9
 8109d30:	0810e7e0 	.word	0x0810e7e0
 8109d34:	abcd330e 	.word	0xabcd330e
 8109d38:	e66d1234 	.word	0xe66d1234
 8109d3c:	0005deec 	.word	0x0005deec

08109d40 <rand>:
 8109d40:	4b16      	ldr	r3, [pc, #88]	; (8109d9c <rand+0x5c>)
 8109d42:	b510      	push	{r4, lr}
 8109d44:	681c      	ldr	r4, [r3, #0]
 8109d46:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8109d48:	b9b3      	cbnz	r3, 8109d78 <rand+0x38>
 8109d4a:	2018      	movs	r0, #24
 8109d4c:	f002 fb56 	bl	810c3fc <malloc>
 8109d50:	4602      	mov	r2, r0
 8109d52:	6320      	str	r0, [r4, #48]	; 0x30
 8109d54:	b920      	cbnz	r0, 8109d60 <rand+0x20>
 8109d56:	4b12      	ldr	r3, [pc, #72]	; (8109da0 <rand+0x60>)
 8109d58:	4812      	ldr	r0, [pc, #72]	; (8109da4 <rand+0x64>)
 8109d5a:	2152      	movs	r1, #82	; 0x52
 8109d5c:	f001 f806 	bl	810ad6c <__assert_func>
 8109d60:	4911      	ldr	r1, [pc, #68]	; (8109da8 <rand+0x68>)
 8109d62:	4b12      	ldr	r3, [pc, #72]	; (8109dac <rand+0x6c>)
 8109d64:	e9c0 1300 	strd	r1, r3, [r0]
 8109d68:	4b11      	ldr	r3, [pc, #68]	; (8109db0 <rand+0x70>)
 8109d6a:	6083      	str	r3, [r0, #8]
 8109d6c:	230b      	movs	r3, #11
 8109d6e:	8183      	strh	r3, [r0, #12]
 8109d70:	2100      	movs	r1, #0
 8109d72:	2001      	movs	r0, #1
 8109d74:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8109d78:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8109d7a:	480e      	ldr	r0, [pc, #56]	; (8109db4 <rand+0x74>)
 8109d7c:	690b      	ldr	r3, [r1, #16]
 8109d7e:	694c      	ldr	r4, [r1, #20]
 8109d80:	4a0d      	ldr	r2, [pc, #52]	; (8109db8 <rand+0x78>)
 8109d82:	4358      	muls	r0, r3
 8109d84:	fb02 0004 	mla	r0, r2, r4, r0
 8109d88:	fba3 3202 	umull	r3, r2, r3, r2
 8109d8c:	3301      	adds	r3, #1
 8109d8e:	eb40 0002 	adc.w	r0, r0, r2
 8109d92:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8109d96:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8109d9a:	bd10      	pop	{r4, pc}
 8109d9c:	100001d4 	.word	0x100001d4
 8109da0:	0810e7c9 	.word	0x0810e7c9
 8109da4:	0810e7e0 	.word	0x0810e7e0
 8109da8:	abcd330e 	.word	0xabcd330e
 8109dac:	e66d1234 	.word	0xe66d1234
 8109db0:	0005deec 	.word	0x0005deec
 8109db4:	5851f42d 	.word	0x5851f42d
 8109db8:	4c957f2d 	.word	0x4c957f2d

08109dbc <std>:
 8109dbc:	2300      	movs	r3, #0
 8109dbe:	b510      	push	{r4, lr}
 8109dc0:	4604      	mov	r4, r0
 8109dc2:	e9c0 3300 	strd	r3, r3, [r0]
 8109dc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8109dca:	6083      	str	r3, [r0, #8]
 8109dcc:	8181      	strh	r1, [r0, #12]
 8109dce:	6643      	str	r3, [r0, #100]	; 0x64
 8109dd0:	81c2      	strh	r2, [r0, #14]
 8109dd2:	6183      	str	r3, [r0, #24]
 8109dd4:	4619      	mov	r1, r3
 8109dd6:	2208      	movs	r2, #8
 8109dd8:	305c      	adds	r0, #92	; 0x5c
 8109dda:	f000 ff47 	bl	810ac6c <memset>
 8109dde:	4b05      	ldr	r3, [pc, #20]	; (8109df4 <std+0x38>)
 8109de0:	6263      	str	r3, [r4, #36]	; 0x24
 8109de2:	4b05      	ldr	r3, [pc, #20]	; (8109df8 <std+0x3c>)
 8109de4:	62a3      	str	r3, [r4, #40]	; 0x28
 8109de6:	4b05      	ldr	r3, [pc, #20]	; (8109dfc <std+0x40>)
 8109de8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8109dea:	4b05      	ldr	r3, [pc, #20]	; (8109e00 <std+0x44>)
 8109dec:	6224      	str	r4, [r4, #32]
 8109dee:	6323      	str	r3, [r4, #48]	; 0x30
 8109df0:	bd10      	pop	{r4, pc}
 8109df2:	bf00      	nop
 8109df4:	0810d03f 	.word	0x0810d03f
 8109df8:	0810d061 	.word	0x0810d061
 8109dfc:	0810d099 	.word	0x0810d099
 8109e00:	0810d0bd 	.word	0x0810d0bd

08109e04 <stdio_exit_handler>:
 8109e04:	4a02      	ldr	r2, [pc, #8]	; (8109e10 <stdio_exit_handler+0xc>)
 8109e06:	4903      	ldr	r1, [pc, #12]	; (8109e14 <stdio_exit_handler+0x10>)
 8109e08:	4803      	ldr	r0, [pc, #12]	; (8109e18 <stdio_exit_handler+0x14>)
 8109e0a:	f000 beff 	b.w	810ac0c <_fwalk_sglue>
 8109e0e:	bf00      	nop
 8109e10:	10000010 	.word	0x10000010
 8109e14:	0810c67d 	.word	0x0810c67d
 8109e18:	10000188 	.word	0x10000188

08109e1c <cleanup_stdio>:
 8109e1c:	6841      	ldr	r1, [r0, #4]
 8109e1e:	4b0c      	ldr	r3, [pc, #48]	; (8109e50 <cleanup_stdio+0x34>)
 8109e20:	4299      	cmp	r1, r3
 8109e22:	b510      	push	{r4, lr}
 8109e24:	4604      	mov	r4, r0
 8109e26:	d001      	beq.n	8109e2c <cleanup_stdio+0x10>
 8109e28:	f002 fc28 	bl	810c67c <_fflush_r>
 8109e2c:	68a1      	ldr	r1, [r4, #8]
 8109e2e:	4b09      	ldr	r3, [pc, #36]	; (8109e54 <cleanup_stdio+0x38>)
 8109e30:	4299      	cmp	r1, r3
 8109e32:	d002      	beq.n	8109e3a <cleanup_stdio+0x1e>
 8109e34:	4620      	mov	r0, r4
 8109e36:	f002 fc21 	bl	810c67c <_fflush_r>
 8109e3a:	68e1      	ldr	r1, [r4, #12]
 8109e3c:	4b06      	ldr	r3, [pc, #24]	; (8109e58 <cleanup_stdio+0x3c>)
 8109e3e:	4299      	cmp	r1, r3
 8109e40:	d004      	beq.n	8109e4c <cleanup_stdio+0x30>
 8109e42:	4620      	mov	r0, r4
 8109e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8109e48:	f002 bc18 	b.w	810c67c <_fflush_r>
 8109e4c:	bd10      	pop	{r4, pc}
 8109e4e:	bf00      	nop
 8109e50:	10000378 	.word	0x10000378
 8109e54:	100003e0 	.word	0x100003e0
 8109e58:	10000448 	.word	0x10000448

08109e5c <global_stdio_init.part.0>:
 8109e5c:	b510      	push	{r4, lr}
 8109e5e:	4b0b      	ldr	r3, [pc, #44]	; (8109e8c <global_stdio_init.part.0+0x30>)
 8109e60:	4c0b      	ldr	r4, [pc, #44]	; (8109e90 <global_stdio_init.part.0+0x34>)
 8109e62:	4a0c      	ldr	r2, [pc, #48]	; (8109e94 <global_stdio_init.part.0+0x38>)
 8109e64:	601a      	str	r2, [r3, #0]
 8109e66:	4620      	mov	r0, r4
 8109e68:	2200      	movs	r2, #0
 8109e6a:	2104      	movs	r1, #4
 8109e6c:	f7ff ffa6 	bl	8109dbc <std>
 8109e70:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8109e74:	2201      	movs	r2, #1
 8109e76:	2109      	movs	r1, #9
 8109e78:	f7ff ffa0 	bl	8109dbc <std>
 8109e7c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8109e80:	2202      	movs	r2, #2
 8109e82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8109e86:	2112      	movs	r1, #18
 8109e88:	f7ff bf98 	b.w	8109dbc <std>
 8109e8c:	100004b0 	.word	0x100004b0
 8109e90:	10000378 	.word	0x10000378
 8109e94:	08109e05 	.word	0x08109e05

08109e98 <__sfp_lock_acquire>:
 8109e98:	4801      	ldr	r0, [pc, #4]	; (8109ea0 <__sfp_lock_acquire+0x8>)
 8109e9a:	f000 bf49 	b.w	810ad30 <__retarget_lock_acquire_recursive>
 8109e9e:	bf00      	nop
 8109ea0:	100004b5 	.word	0x100004b5

08109ea4 <__sfp_lock_release>:
 8109ea4:	4801      	ldr	r0, [pc, #4]	; (8109eac <__sfp_lock_release+0x8>)
 8109ea6:	f000 bf44 	b.w	810ad32 <__retarget_lock_release_recursive>
 8109eaa:	bf00      	nop
 8109eac:	100004b5 	.word	0x100004b5

08109eb0 <__sinit>:
 8109eb0:	b510      	push	{r4, lr}
 8109eb2:	4604      	mov	r4, r0
 8109eb4:	f7ff fff0 	bl	8109e98 <__sfp_lock_acquire>
 8109eb8:	6a23      	ldr	r3, [r4, #32]
 8109eba:	b11b      	cbz	r3, 8109ec4 <__sinit+0x14>
 8109ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8109ec0:	f7ff bff0 	b.w	8109ea4 <__sfp_lock_release>
 8109ec4:	4b04      	ldr	r3, [pc, #16]	; (8109ed8 <__sinit+0x28>)
 8109ec6:	6223      	str	r3, [r4, #32]
 8109ec8:	4b04      	ldr	r3, [pc, #16]	; (8109edc <__sinit+0x2c>)
 8109eca:	681b      	ldr	r3, [r3, #0]
 8109ecc:	2b00      	cmp	r3, #0
 8109ece:	d1f5      	bne.n	8109ebc <__sinit+0xc>
 8109ed0:	f7ff ffc4 	bl	8109e5c <global_stdio_init.part.0>
 8109ed4:	e7f2      	b.n	8109ebc <__sinit+0xc>
 8109ed6:	bf00      	nop
 8109ed8:	08109e1d 	.word	0x08109e1d
 8109edc:	100004b0 	.word	0x100004b0

08109ee0 <sulp>:
 8109ee0:	b570      	push	{r4, r5, r6, lr}
 8109ee2:	4604      	mov	r4, r0
 8109ee4:	460d      	mov	r5, r1
 8109ee6:	ec45 4b10 	vmov	d0, r4, r5
 8109eea:	4616      	mov	r6, r2
 8109eec:	f002 ff66 	bl	810cdbc <__ulp>
 8109ef0:	ec51 0b10 	vmov	r0, r1, d0
 8109ef4:	b17e      	cbz	r6, 8109f16 <sulp+0x36>
 8109ef6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8109efa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8109efe:	2b00      	cmp	r3, #0
 8109f00:	dd09      	ble.n	8109f16 <sulp+0x36>
 8109f02:	051b      	lsls	r3, r3, #20
 8109f04:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8109f08:	2400      	movs	r4, #0
 8109f0a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8109f0e:	4622      	mov	r2, r4
 8109f10:	462b      	mov	r3, r5
 8109f12:	f7f6 fbf9 	bl	8100708 <__aeabi_dmul>
 8109f16:	bd70      	pop	{r4, r5, r6, pc}

08109f18 <_strtod_l>:
 8109f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109f1c:	ed2d 8b02 	vpush	{d8}
 8109f20:	b09b      	sub	sp, #108	; 0x6c
 8109f22:	4604      	mov	r4, r0
 8109f24:	9213      	str	r2, [sp, #76]	; 0x4c
 8109f26:	2200      	movs	r2, #0
 8109f28:	9216      	str	r2, [sp, #88]	; 0x58
 8109f2a:	460d      	mov	r5, r1
 8109f2c:	f04f 0800 	mov.w	r8, #0
 8109f30:	f04f 0900 	mov.w	r9, #0
 8109f34:	460a      	mov	r2, r1
 8109f36:	9215      	str	r2, [sp, #84]	; 0x54
 8109f38:	7811      	ldrb	r1, [r2, #0]
 8109f3a:	292b      	cmp	r1, #43	; 0x2b
 8109f3c:	d04c      	beq.n	8109fd8 <_strtod_l+0xc0>
 8109f3e:	d83a      	bhi.n	8109fb6 <_strtod_l+0x9e>
 8109f40:	290d      	cmp	r1, #13
 8109f42:	d834      	bhi.n	8109fae <_strtod_l+0x96>
 8109f44:	2908      	cmp	r1, #8
 8109f46:	d834      	bhi.n	8109fb2 <_strtod_l+0x9a>
 8109f48:	2900      	cmp	r1, #0
 8109f4a:	d03d      	beq.n	8109fc8 <_strtod_l+0xb0>
 8109f4c:	2200      	movs	r2, #0
 8109f4e:	920a      	str	r2, [sp, #40]	; 0x28
 8109f50:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8109f52:	7832      	ldrb	r2, [r6, #0]
 8109f54:	2a30      	cmp	r2, #48	; 0x30
 8109f56:	f040 80b4 	bne.w	810a0c2 <_strtod_l+0x1aa>
 8109f5a:	7872      	ldrb	r2, [r6, #1]
 8109f5c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8109f60:	2a58      	cmp	r2, #88	; 0x58
 8109f62:	d170      	bne.n	810a046 <_strtod_l+0x12e>
 8109f64:	9302      	str	r3, [sp, #8]
 8109f66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8109f68:	9301      	str	r3, [sp, #4]
 8109f6a:	ab16      	add	r3, sp, #88	; 0x58
 8109f6c:	9300      	str	r3, [sp, #0]
 8109f6e:	4a8e      	ldr	r2, [pc, #568]	; (810a1a8 <_strtod_l+0x290>)
 8109f70:	ab17      	add	r3, sp, #92	; 0x5c
 8109f72:	a915      	add	r1, sp, #84	; 0x54
 8109f74:	4620      	mov	r0, r4
 8109f76:	f001 fdf9 	bl	810bb6c <__gethex>
 8109f7a:	f010 070f 	ands.w	r7, r0, #15
 8109f7e:	4605      	mov	r5, r0
 8109f80:	d005      	beq.n	8109f8e <_strtod_l+0x76>
 8109f82:	2f06      	cmp	r7, #6
 8109f84:	d12a      	bne.n	8109fdc <_strtod_l+0xc4>
 8109f86:	3601      	adds	r6, #1
 8109f88:	2300      	movs	r3, #0
 8109f8a:	9615      	str	r6, [sp, #84]	; 0x54
 8109f8c:	930a      	str	r3, [sp, #40]	; 0x28
 8109f8e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8109f90:	2b00      	cmp	r3, #0
 8109f92:	f040 857f 	bne.w	810aa94 <_strtod_l+0xb7c>
 8109f96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8109f98:	b1db      	cbz	r3, 8109fd2 <_strtod_l+0xba>
 8109f9a:	4642      	mov	r2, r8
 8109f9c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8109fa0:	ec43 2b10 	vmov	d0, r2, r3
 8109fa4:	b01b      	add	sp, #108	; 0x6c
 8109fa6:	ecbd 8b02 	vpop	{d8}
 8109faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109fae:	2920      	cmp	r1, #32
 8109fb0:	d1cc      	bne.n	8109f4c <_strtod_l+0x34>
 8109fb2:	3201      	adds	r2, #1
 8109fb4:	e7bf      	b.n	8109f36 <_strtod_l+0x1e>
 8109fb6:	292d      	cmp	r1, #45	; 0x2d
 8109fb8:	d1c8      	bne.n	8109f4c <_strtod_l+0x34>
 8109fba:	2101      	movs	r1, #1
 8109fbc:	910a      	str	r1, [sp, #40]	; 0x28
 8109fbe:	1c51      	adds	r1, r2, #1
 8109fc0:	9115      	str	r1, [sp, #84]	; 0x54
 8109fc2:	7852      	ldrb	r2, [r2, #1]
 8109fc4:	2a00      	cmp	r2, #0
 8109fc6:	d1c3      	bne.n	8109f50 <_strtod_l+0x38>
 8109fc8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8109fca:	9515      	str	r5, [sp, #84]	; 0x54
 8109fcc:	2b00      	cmp	r3, #0
 8109fce:	f040 855f 	bne.w	810aa90 <_strtod_l+0xb78>
 8109fd2:	4642      	mov	r2, r8
 8109fd4:	464b      	mov	r3, r9
 8109fd6:	e7e3      	b.n	8109fa0 <_strtod_l+0x88>
 8109fd8:	2100      	movs	r1, #0
 8109fda:	e7ef      	b.n	8109fbc <_strtod_l+0xa4>
 8109fdc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8109fde:	b13a      	cbz	r2, 8109ff0 <_strtod_l+0xd8>
 8109fe0:	2135      	movs	r1, #53	; 0x35
 8109fe2:	a818      	add	r0, sp, #96	; 0x60
 8109fe4:	f002 ffe7 	bl	810cfb6 <__copybits>
 8109fe8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8109fea:	4620      	mov	r0, r4
 8109fec:	f002 fbba 	bl	810c764 <_Bfree>
 8109ff0:	3f01      	subs	r7, #1
 8109ff2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8109ff4:	2f04      	cmp	r7, #4
 8109ff6:	d806      	bhi.n	810a006 <_strtod_l+0xee>
 8109ff8:	e8df f007 	tbb	[pc, r7]
 8109ffc:	201d0314 	.word	0x201d0314
 810a000:	14          	.byte	0x14
 810a001:	00          	.byte	0x00
 810a002:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 810a006:	05e9      	lsls	r1, r5, #23
 810a008:	bf48      	it	mi
 810a00a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 810a00e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 810a012:	0d1b      	lsrs	r3, r3, #20
 810a014:	051b      	lsls	r3, r3, #20
 810a016:	2b00      	cmp	r3, #0
 810a018:	d1b9      	bne.n	8109f8e <_strtod_l+0x76>
 810a01a:	f000 fe5f 	bl	810acdc <__errno>
 810a01e:	2322      	movs	r3, #34	; 0x22
 810a020:	6003      	str	r3, [r0, #0]
 810a022:	e7b4      	b.n	8109f8e <_strtod_l+0x76>
 810a024:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 810a028:	f202 4233 	addw	r2, r2, #1075	; 0x433
 810a02c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 810a030:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 810a034:	e7e7      	b.n	810a006 <_strtod_l+0xee>
 810a036:	f8df 9178 	ldr.w	r9, [pc, #376]	; 810a1b0 <_strtod_l+0x298>
 810a03a:	e7e4      	b.n	810a006 <_strtod_l+0xee>
 810a03c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 810a040:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 810a044:	e7df      	b.n	810a006 <_strtod_l+0xee>
 810a046:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810a048:	1c5a      	adds	r2, r3, #1
 810a04a:	9215      	str	r2, [sp, #84]	; 0x54
 810a04c:	785b      	ldrb	r3, [r3, #1]
 810a04e:	2b30      	cmp	r3, #48	; 0x30
 810a050:	d0f9      	beq.n	810a046 <_strtod_l+0x12e>
 810a052:	2b00      	cmp	r3, #0
 810a054:	d09b      	beq.n	8109f8e <_strtod_l+0x76>
 810a056:	2301      	movs	r3, #1
 810a058:	f04f 0a00 	mov.w	sl, #0
 810a05c:	9304      	str	r3, [sp, #16]
 810a05e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810a060:	930b      	str	r3, [sp, #44]	; 0x2c
 810a062:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 810a066:	46d3      	mov	fp, sl
 810a068:	220a      	movs	r2, #10
 810a06a:	9815      	ldr	r0, [sp, #84]	; 0x54
 810a06c:	7806      	ldrb	r6, [r0, #0]
 810a06e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 810a072:	b2d9      	uxtb	r1, r3
 810a074:	2909      	cmp	r1, #9
 810a076:	d926      	bls.n	810a0c6 <_strtod_l+0x1ae>
 810a078:	494c      	ldr	r1, [pc, #304]	; (810a1ac <_strtod_l+0x294>)
 810a07a:	2201      	movs	r2, #1
 810a07c:	f000 fde4 	bl	810ac48 <strncmp>
 810a080:	2800      	cmp	r0, #0
 810a082:	d030      	beq.n	810a0e6 <_strtod_l+0x1ce>
 810a084:	2000      	movs	r0, #0
 810a086:	4632      	mov	r2, r6
 810a088:	9005      	str	r0, [sp, #20]
 810a08a:	465e      	mov	r6, fp
 810a08c:	4603      	mov	r3, r0
 810a08e:	2a65      	cmp	r2, #101	; 0x65
 810a090:	d001      	beq.n	810a096 <_strtod_l+0x17e>
 810a092:	2a45      	cmp	r2, #69	; 0x45
 810a094:	d113      	bne.n	810a0be <_strtod_l+0x1a6>
 810a096:	b91e      	cbnz	r6, 810a0a0 <_strtod_l+0x188>
 810a098:	9a04      	ldr	r2, [sp, #16]
 810a09a:	4302      	orrs	r2, r0
 810a09c:	d094      	beq.n	8109fc8 <_strtod_l+0xb0>
 810a09e:	2600      	movs	r6, #0
 810a0a0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 810a0a2:	1c6a      	adds	r2, r5, #1
 810a0a4:	9215      	str	r2, [sp, #84]	; 0x54
 810a0a6:	786a      	ldrb	r2, [r5, #1]
 810a0a8:	2a2b      	cmp	r2, #43	; 0x2b
 810a0aa:	d074      	beq.n	810a196 <_strtod_l+0x27e>
 810a0ac:	2a2d      	cmp	r2, #45	; 0x2d
 810a0ae:	d078      	beq.n	810a1a2 <_strtod_l+0x28a>
 810a0b0:	f04f 0c00 	mov.w	ip, #0
 810a0b4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 810a0b8:	2909      	cmp	r1, #9
 810a0ba:	d97f      	bls.n	810a1bc <_strtod_l+0x2a4>
 810a0bc:	9515      	str	r5, [sp, #84]	; 0x54
 810a0be:	2700      	movs	r7, #0
 810a0c0:	e09e      	b.n	810a200 <_strtod_l+0x2e8>
 810a0c2:	2300      	movs	r3, #0
 810a0c4:	e7c8      	b.n	810a058 <_strtod_l+0x140>
 810a0c6:	f1bb 0f08 	cmp.w	fp, #8
 810a0ca:	bfd8      	it	le
 810a0cc:	9909      	ldrle	r1, [sp, #36]	; 0x24
 810a0ce:	f100 0001 	add.w	r0, r0, #1
 810a0d2:	bfda      	itte	le
 810a0d4:	fb02 3301 	mlale	r3, r2, r1, r3
 810a0d8:	9309      	strle	r3, [sp, #36]	; 0x24
 810a0da:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 810a0de:	f10b 0b01 	add.w	fp, fp, #1
 810a0e2:	9015      	str	r0, [sp, #84]	; 0x54
 810a0e4:	e7c1      	b.n	810a06a <_strtod_l+0x152>
 810a0e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810a0e8:	1c5a      	adds	r2, r3, #1
 810a0ea:	9215      	str	r2, [sp, #84]	; 0x54
 810a0ec:	785a      	ldrb	r2, [r3, #1]
 810a0ee:	f1bb 0f00 	cmp.w	fp, #0
 810a0f2:	d037      	beq.n	810a164 <_strtod_l+0x24c>
 810a0f4:	9005      	str	r0, [sp, #20]
 810a0f6:	465e      	mov	r6, fp
 810a0f8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 810a0fc:	2b09      	cmp	r3, #9
 810a0fe:	d912      	bls.n	810a126 <_strtod_l+0x20e>
 810a100:	2301      	movs	r3, #1
 810a102:	e7c4      	b.n	810a08e <_strtod_l+0x176>
 810a104:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810a106:	1c5a      	adds	r2, r3, #1
 810a108:	9215      	str	r2, [sp, #84]	; 0x54
 810a10a:	785a      	ldrb	r2, [r3, #1]
 810a10c:	3001      	adds	r0, #1
 810a10e:	2a30      	cmp	r2, #48	; 0x30
 810a110:	d0f8      	beq.n	810a104 <_strtod_l+0x1ec>
 810a112:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 810a116:	2b08      	cmp	r3, #8
 810a118:	f200 84c1 	bhi.w	810aa9e <_strtod_l+0xb86>
 810a11c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810a11e:	9005      	str	r0, [sp, #20]
 810a120:	2000      	movs	r0, #0
 810a122:	930b      	str	r3, [sp, #44]	; 0x2c
 810a124:	4606      	mov	r6, r0
 810a126:	3a30      	subs	r2, #48	; 0x30
 810a128:	f100 0301 	add.w	r3, r0, #1
 810a12c:	d014      	beq.n	810a158 <_strtod_l+0x240>
 810a12e:	9905      	ldr	r1, [sp, #20]
 810a130:	4419      	add	r1, r3
 810a132:	9105      	str	r1, [sp, #20]
 810a134:	4633      	mov	r3, r6
 810a136:	eb00 0c06 	add.w	ip, r0, r6
 810a13a:	210a      	movs	r1, #10
 810a13c:	4563      	cmp	r3, ip
 810a13e:	d113      	bne.n	810a168 <_strtod_l+0x250>
 810a140:	1833      	adds	r3, r6, r0
 810a142:	2b08      	cmp	r3, #8
 810a144:	f106 0601 	add.w	r6, r6, #1
 810a148:	4406      	add	r6, r0
 810a14a:	dc1a      	bgt.n	810a182 <_strtod_l+0x26a>
 810a14c:	9909      	ldr	r1, [sp, #36]	; 0x24
 810a14e:	230a      	movs	r3, #10
 810a150:	fb03 2301 	mla	r3, r3, r1, r2
 810a154:	9309      	str	r3, [sp, #36]	; 0x24
 810a156:	2300      	movs	r3, #0
 810a158:	9a15      	ldr	r2, [sp, #84]	; 0x54
 810a15a:	1c51      	adds	r1, r2, #1
 810a15c:	9115      	str	r1, [sp, #84]	; 0x54
 810a15e:	7852      	ldrb	r2, [r2, #1]
 810a160:	4618      	mov	r0, r3
 810a162:	e7c9      	b.n	810a0f8 <_strtod_l+0x1e0>
 810a164:	4658      	mov	r0, fp
 810a166:	e7d2      	b.n	810a10e <_strtod_l+0x1f6>
 810a168:	2b08      	cmp	r3, #8
 810a16a:	f103 0301 	add.w	r3, r3, #1
 810a16e:	dc03      	bgt.n	810a178 <_strtod_l+0x260>
 810a170:	9f09      	ldr	r7, [sp, #36]	; 0x24
 810a172:	434f      	muls	r7, r1
 810a174:	9709      	str	r7, [sp, #36]	; 0x24
 810a176:	e7e1      	b.n	810a13c <_strtod_l+0x224>
 810a178:	2b10      	cmp	r3, #16
 810a17a:	bfd8      	it	le
 810a17c:	fb01 fa0a 	mulle.w	sl, r1, sl
 810a180:	e7dc      	b.n	810a13c <_strtod_l+0x224>
 810a182:	2e10      	cmp	r6, #16
 810a184:	bfdc      	itt	le
 810a186:	230a      	movle	r3, #10
 810a188:	fb03 2a0a 	mlale	sl, r3, sl, r2
 810a18c:	e7e3      	b.n	810a156 <_strtod_l+0x23e>
 810a18e:	2300      	movs	r3, #0
 810a190:	9305      	str	r3, [sp, #20]
 810a192:	2301      	movs	r3, #1
 810a194:	e780      	b.n	810a098 <_strtod_l+0x180>
 810a196:	f04f 0c00 	mov.w	ip, #0
 810a19a:	1caa      	adds	r2, r5, #2
 810a19c:	9215      	str	r2, [sp, #84]	; 0x54
 810a19e:	78aa      	ldrb	r2, [r5, #2]
 810a1a0:	e788      	b.n	810a0b4 <_strtod_l+0x19c>
 810a1a2:	f04f 0c01 	mov.w	ip, #1
 810a1a6:	e7f8      	b.n	810a19a <_strtod_l+0x282>
 810a1a8:	0810e83c 	.word	0x0810e83c
 810a1ac:	0810e838 	.word	0x0810e838
 810a1b0:	7ff00000 	.word	0x7ff00000
 810a1b4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 810a1b6:	1c51      	adds	r1, r2, #1
 810a1b8:	9115      	str	r1, [sp, #84]	; 0x54
 810a1ba:	7852      	ldrb	r2, [r2, #1]
 810a1bc:	2a30      	cmp	r2, #48	; 0x30
 810a1be:	d0f9      	beq.n	810a1b4 <_strtod_l+0x29c>
 810a1c0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 810a1c4:	2908      	cmp	r1, #8
 810a1c6:	f63f af7a 	bhi.w	810a0be <_strtod_l+0x1a6>
 810a1ca:	3a30      	subs	r2, #48	; 0x30
 810a1cc:	9208      	str	r2, [sp, #32]
 810a1ce:	9a15      	ldr	r2, [sp, #84]	; 0x54
 810a1d0:	920c      	str	r2, [sp, #48]	; 0x30
 810a1d2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 810a1d4:	1c57      	adds	r7, r2, #1
 810a1d6:	9715      	str	r7, [sp, #84]	; 0x54
 810a1d8:	7852      	ldrb	r2, [r2, #1]
 810a1da:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 810a1de:	f1be 0f09 	cmp.w	lr, #9
 810a1e2:	d938      	bls.n	810a256 <_strtod_l+0x33e>
 810a1e4:	990c      	ldr	r1, [sp, #48]	; 0x30
 810a1e6:	1a7f      	subs	r7, r7, r1
 810a1e8:	2f08      	cmp	r7, #8
 810a1ea:	f644 671f 	movw	r7, #19999	; 0x4e1f
 810a1ee:	dc03      	bgt.n	810a1f8 <_strtod_l+0x2e0>
 810a1f0:	9908      	ldr	r1, [sp, #32]
 810a1f2:	428f      	cmp	r7, r1
 810a1f4:	bfa8      	it	ge
 810a1f6:	460f      	movge	r7, r1
 810a1f8:	f1bc 0f00 	cmp.w	ip, #0
 810a1fc:	d000      	beq.n	810a200 <_strtod_l+0x2e8>
 810a1fe:	427f      	negs	r7, r7
 810a200:	2e00      	cmp	r6, #0
 810a202:	d14f      	bne.n	810a2a4 <_strtod_l+0x38c>
 810a204:	9904      	ldr	r1, [sp, #16]
 810a206:	4301      	orrs	r1, r0
 810a208:	f47f aec1 	bne.w	8109f8e <_strtod_l+0x76>
 810a20c:	2b00      	cmp	r3, #0
 810a20e:	f47f aedb 	bne.w	8109fc8 <_strtod_l+0xb0>
 810a212:	2a69      	cmp	r2, #105	; 0x69
 810a214:	d029      	beq.n	810a26a <_strtod_l+0x352>
 810a216:	dc26      	bgt.n	810a266 <_strtod_l+0x34e>
 810a218:	2a49      	cmp	r2, #73	; 0x49
 810a21a:	d026      	beq.n	810a26a <_strtod_l+0x352>
 810a21c:	2a4e      	cmp	r2, #78	; 0x4e
 810a21e:	f47f aed3 	bne.w	8109fc8 <_strtod_l+0xb0>
 810a222:	499b      	ldr	r1, [pc, #620]	; (810a490 <_strtod_l+0x578>)
 810a224:	a815      	add	r0, sp, #84	; 0x54
 810a226:	f001 fee1 	bl	810bfec <__match>
 810a22a:	2800      	cmp	r0, #0
 810a22c:	f43f aecc 	beq.w	8109fc8 <_strtod_l+0xb0>
 810a230:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810a232:	781b      	ldrb	r3, [r3, #0]
 810a234:	2b28      	cmp	r3, #40	; 0x28
 810a236:	d12f      	bne.n	810a298 <_strtod_l+0x380>
 810a238:	4996      	ldr	r1, [pc, #600]	; (810a494 <_strtod_l+0x57c>)
 810a23a:	aa18      	add	r2, sp, #96	; 0x60
 810a23c:	a815      	add	r0, sp, #84	; 0x54
 810a23e:	f001 fee9 	bl	810c014 <__hexnan>
 810a242:	2805      	cmp	r0, #5
 810a244:	d128      	bne.n	810a298 <_strtod_l+0x380>
 810a246:	9b19      	ldr	r3, [sp, #100]	; 0x64
 810a248:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 810a24c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 810a250:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 810a254:	e69b      	b.n	8109f8e <_strtod_l+0x76>
 810a256:	9f08      	ldr	r7, [sp, #32]
 810a258:	210a      	movs	r1, #10
 810a25a:	fb01 2107 	mla	r1, r1, r7, r2
 810a25e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 810a262:	9208      	str	r2, [sp, #32]
 810a264:	e7b5      	b.n	810a1d2 <_strtod_l+0x2ba>
 810a266:	2a6e      	cmp	r2, #110	; 0x6e
 810a268:	e7d9      	b.n	810a21e <_strtod_l+0x306>
 810a26a:	498b      	ldr	r1, [pc, #556]	; (810a498 <_strtod_l+0x580>)
 810a26c:	a815      	add	r0, sp, #84	; 0x54
 810a26e:	f001 febd 	bl	810bfec <__match>
 810a272:	2800      	cmp	r0, #0
 810a274:	f43f aea8 	beq.w	8109fc8 <_strtod_l+0xb0>
 810a278:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810a27a:	4988      	ldr	r1, [pc, #544]	; (810a49c <_strtod_l+0x584>)
 810a27c:	3b01      	subs	r3, #1
 810a27e:	a815      	add	r0, sp, #84	; 0x54
 810a280:	9315      	str	r3, [sp, #84]	; 0x54
 810a282:	f001 feb3 	bl	810bfec <__match>
 810a286:	b910      	cbnz	r0, 810a28e <_strtod_l+0x376>
 810a288:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810a28a:	3301      	adds	r3, #1
 810a28c:	9315      	str	r3, [sp, #84]	; 0x54
 810a28e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 810a4ac <_strtod_l+0x594>
 810a292:	f04f 0800 	mov.w	r8, #0
 810a296:	e67a      	b.n	8109f8e <_strtod_l+0x76>
 810a298:	4881      	ldr	r0, [pc, #516]	; (810a4a0 <_strtod_l+0x588>)
 810a29a:	f000 fd59 	bl	810ad50 <nan>
 810a29e:	ec59 8b10 	vmov	r8, r9, d0
 810a2a2:	e674      	b.n	8109f8e <_strtod_l+0x76>
 810a2a4:	9b05      	ldr	r3, [sp, #20]
 810a2a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 810a2a8:	1afb      	subs	r3, r7, r3
 810a2aa:	f1bb 0f00 	cmp.w	fp, #0
 810a2ae:	bf08      	it	eq
 810a2b0:	46b3      	moveq	fp, r6
 810a2b2:	2e10      	cmp	r6, #16
 810a2b4:	9308      	str	r3, [sp, #32]
 810a2b6:	4635      	mov	r5, r6
 810a2b8:	bfa8      	it	ge
 810a2ba:	2510      	movge	r5, #16
 810a2bc:	f7f6 f9aa 	bl	8100614 <__aeabi_ui2d>
 810a2c0:	2e09      	cmp	r6, #9
 810a2c2:	4680      	mov	r8, r0
 810a2c4:	4689      	mov	r9, r1
 810a2c6:	dd13      	ble.n	810a2f0 <_strtod_l+0x3d8>
 810a2c8:	4b76      	ldr	r3, [pc, #472]	; (810a4a4 <_strtod_l+0x58c>)
 810a2ca:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 810a2ce:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 810a2d2:	f7f6 fa19 	bl	8100708 <__aeabi_dmul>
 810a2d6:	4680      	mov	r8, r0
 810a2d8:	4650      	mov	r0, sl
 810a2da:	4689      	mov	r9, r1
 810a2dc:	f7f6 f99a 	bl	8100614 <__aeabi_ui2d>
 810a2e0:	4602      	mov	r2, r0
 810a2e2:	460b      	mov	r3, r1
 810a2e4:	4640      	mov	r0, r8
 810a2e6:	4649      	mov	r1, r9
 810a2e8:	f7f6 f858 	bl	810039c <__adddf3>
 810a2ec:	4680      	mov	r8, r0
 810a2ee:	4689      	mov	r9, r1
 810a2f0:	2e0f      	cmp	r6, #15
 810a2f2:	dc38      	bgt.n	810a366 <_strtod_l+0x44e>
 810a2f4:	9b08      	ldr	r3, [sp, #32]
 810a2f6:	2b00      	cmp	r3, #0
 810a2f8:	f43f ae49 	beq.w	8109f8e <_strtod_l+0x76>
 810a2fc:	dd24      	ble.n	810a348 <_strtod_l+0x430>
 810a2fe:	2b16      	cmp	r3, #22
 810a300:	dc0b      	bgt.n	810a31a <_strtod_l+0x402>
 810a302:	4968      	ldr	r1, [pc, #416]	; (810a4a4 <_strtod_l+0x58c>)
 810a304:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810a308:	e9d1 0100 	ldrd	r0, r1, [r1]
 810a30c:	4642      	mov	r2, r8
 810a30e:	464b      	mov	r3, r9
 810a310:	f7f6 f9fa 	bl	8100708 <__aeabi_dmul>
 810a314:	4680      	mov	r8, r0
 810a316:	4689      	mov	r9, r1
 810a318:	e639      	b.n	8109f8e <_strtod_l+0x76>
 810a31a:	9a08      	ldr	r2, [sp, #32]
 810a31c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 810a320:	4293      	cmp	r3, r2
 810a322:	db20      	blt.n	810a366 <_strtod_l+0x44e>
 810a324:	4c5f      	ldr	r4, [pc, #380]	; (810a4a4 <_strtod_l+0x58c>)
 810a326:	f1c6 060f 	rsb	r6, r6, #15
 810a32a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 810a32e:	4642      	mov	r2, r8
 810a330:	464b      	mov	r3, r9
 810a332:	e9d1 0100 	ldrd	r0, r1, [r1]
 810a336:	f7f6 f9e7 	bl	8100708 <__aeabi_dmul>
 810a33a:	9b08      	ldr	r3, [sp, #32]
 810a33c:	1b9e      	subs	r6, r3, r6
 810a33e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 810a342:	e9d4 2300 	ldrd	r2, r3, [r4]
 810a346:	e7e3      	b.n	810a310 <_strtod_l+0x3f8>
 810a348:	9b08      	ldr	r3, [sp, #32]
 810a34a:	3316      	adds	r3, #22
 810a34c:	db0b      	blt.n	810a366 <_strtod_l+0x44e>
 810a34e:	9b05      	ldr	r3, [sp, #20]
 810a350:	1bdf      	subs	r7, r3, r7
 810a352:	4b54      	ldr	r3, [pc, #336]	; (810a4a4 <_strtod_l+0x58c>)
 810a354:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 810a358:	e9d7 2300 	ldrd	r2, r3, [r7]
 810a35c:	4640      	mov	r0, r8
 810a35e:	4649      	mov	r1, r9
 810a360:	f7f6 fafc 	bl	810095c <__aeabi_ddiv>
 810a364:	e7d6      	b.n	810a314 <_strtod_l+0x3fc>
 810a366:	9b08      	ldr	r3, [sp, #32]
 810a368:	1b75      	subs	r5, r6, r5
 810a36a:	441d      	add	r5, r3
 810a36c:	2d00      	cmp	r5, #0
 810a36e:	dd70      	ble.n	810a452 <_strtod_l+0x53a>
 810a370:	f015 030f 	ands.w	r3, r5, #15
 810a374:	d00a      	beq.n	810a38c <_strtod_l+0x474>
 810a376:	494b      	ldr	r1, [pc, #300]	; (810a4a4 <_strtod_l+0x58c>)
 810a378:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810a37c:	4642      	mov	r2, r8
 810a37e:	464b      	mov	r3, r9
 810a380:	e9d1 0100 	ldrd	r0, r1, [r1]
 810a384:	f7f6 f9c0 	bl	8100708 <__aeabi_dmul>
 810a388:	4680      	mov	r8, r0
 810a38a:	4689      	mov	r9, r1
 810a38c:	f035 050f 	bics.w	r5, r5, #15
 810a390:	d04d      	beq.n	810a42e <_strtod_l+0x516>
 810a392:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 810a396:	dd22      	ble.n	810a3de <_strtod_l+0x4c6>
 810a398:	2500      	movs	r5, #0
 810a39a:	46ab      	mov	fp, r5
 810a39c:	9509      	str	r5, [sp, #36]	; 0x24
 810a39e:	9505      	str	r5, [sp, #20]
 810a3a0:	2322      	movs	r3, #34	; 0x22
 810a3a2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 810a4ac <_strtod_l+0x594>
 810a3a6:	6023      	str	r3, [r4, #0]
 810a3a8:	f04f 0800 	mov.w	r8, #0
 810a3ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810a3ae:	2b00      	cmp	r3, #0
 810a3b0:	f43f aded 	beq.w	8109f8e <_strtod_l+0x76>
 810a3b4:	9916      	ldr	r1, [sp, #88]	; 0x58
 810a3b6:	4620      	mov	r0, r4
 810a3b8:	f002 f9d4 	bl	810c764 <_Bfree>
 810a3bc:	9905      	ldr	r1, [sp, #20]
 810a3be:	4620      	mov	r0, r4
 810a3c0:	f002 f9d0 	bl	810c764 <_Bfree>
 810a3c4:	4659      	mov	r1, fp
 810a3c6:	4620      	mov	r0, r4
 810a3c8:	f002 f9cc 	bl	810c764 <_Bfree>
 810a3cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 810a3ce:	4620      	mov	r0, r4
 810a3d0:	f002 f9c8 	bl	810c764 <_Bfree>
 810a3d4:	4629      	mov	r1, r5
 810a3d6:	4620      	mov	r0, r4
 810a3d8:	f002 f9c4 	bl	810c764 <_Bfree>
 810a3dc:	e5d7      	b.n	8109f8e <_strtod_l+0x76>
 810a3de:	4b32      	ldr	r3, [pc, #200]	; (810a4a8 <_strtod_l+0x590>)
 810a3e0:	9304      	str	r3, [sp, #16]
 810a3e2:	2300      	movs	r3, #0
 810a3e4:	112d      	asrs	r5, r5, #4
 810a3e6:	4640      	mov	r0, r8
 810a3e8:	4649      	mov	r1, r9
 810a3ea:	469a      	mov	sl, r3
 810a3ec:	2d01      	cmp	r5, #1
 810a3ee:	dc21      	bgt.n	810a434 <_strtod_l+0x51c>
 810a3f0:	b10b      	cbz	r3, 810a3f6 <_strtod_l+0x4de>
 810a3f2:	4680      	mov	r8, r0
 810a3f4:	4689      	mov	r9, r1
 810a3f6:	492c      	ldr	r1, [pc, #176]	; (810a4a8 <_strtod_l+0x590>)
 810a3f8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 810a3fc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 810a400:	4642      	mov	r2, r8
 810a402:	464b      	mov	r3, r9
 810a404:	e9d1 0100 	ldrd	r0, r1, [r1]
 810a408:	f7f6 f97e 	bl	8100708 <__aeabi_dmul>
 810a40c:	4b27      	ldr	r3, [pc, #156]	; (810a4ac <_strtod_l+0x594>)
 810a40e:	460a      	mov	r2, r1
 810a410:	400b      	ands	r3, r1
 810a412:	4927      	ldr	r1, [pc, #156]	; (810a4b0 <_strtod_l+0x598>)
 810a414:	428b      	cmp	r3, r1
 810a416:	4680      	mov	r8, r0
 810a418:	d8be      	bhi.n	810a398 <_strtod_l+0x480>
 810a41a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 810a41e:	428b      	cmp	r3, r1
 810a420:	bf86      	itte	hi
 810a422:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 810a4b4 <_strtod_l+0x59c>
 810a426:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 810a42a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 810a42e:	2300      	movs	r3, #0
 810a430:	9304      	str	r3, [sp, #16]
 810a432:	e07b      	b.n	810a52c <_strtod_l+0x614>
 810a434:	07ea      	lsls	r2, r5, #31
 810a436:	d505      	bpl.n	810a444 <_strtod_l+0x52c>
 810a438:	9b04      	ldr	r3, [sp, #16]
 810a43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a43e:	f7f6 f963 	bl	8100708 <__aeabi_dmul>
 810a442:	2301      	movs	r3, #1
 810a444:	9a04      	ldr	r2, [sp, #16]
 810a446:	3208      	adds	r2, #8
 810a448:	f10a 0a01 	add.w	sl, sl, #1
 810a44c:	106d      	asrs	r5, r5, #1
 810a44e:	9204      	str	r2, [sp, #16]
 810a450:	e7cc      	b.n	810a3ec <_strtod_l+0x4d4>
 810a452:	d0ec      	beq.n	810a42e <_strtod_l+0x516>
 810a454:	426d      	negs	r5, r5
 810a456:	f015 020f 	ands.w	r2, r5, #15
 810a45a:	d00a      	beq.n	810a472 <_strtod_l+0x55a>
 810a45c:	4b11      	ldr	r3, [pc, #68]	; (810a4a4 <_strtod_l+0x58c>)
 810a45e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810a462:	4640      	mov	r0, r8
 810a464:	4649      	mov	r1, r9
 810a466:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a46a:	f7f6 fa77 	bl	810095c <__aeabi_ddiv>
 810a46e:	4680      	mov	r8, r0
 810a470:	4689      	mov	r9, r1
 810a472:	112d      	asrs	r5, r5, #4
 810a474:	d0db      	beq.n	810a42e <_strtod_l+0x516>
 810a476:	2d1f      	cmp	r5, #31
 810a478:	dd1e      	ble.n	810a4b8 <_strtod_l+0x5a0>
 810a47a:	2500      	movs	r5, #0
 810a47c:	46ab      	mov	fp, r5
 810a47e:	9509      	str	r5, [sp, #36]	; 0x24
 810a480:	9505      	str	r5, [sp, #20]
 810a482:	2322      	movs	r3, #34	; 0x22
 810a484:	f04f 0800 	mov.w	r8, #0
 810a488:	f04f 0900 	mov.w	r9, #0
 810a48c:	6023      	str	r3, [r4, #0]
 810a48e:	e78d      	b.n	810a3ac <_strtod_l+0x494>
 810a490:	0810e79d 	.word	0x0810e79d
 810a494:	0810e850 	.word	0x0810e850
 810a498:	0810e795 	.word	0x0810e795
 810a49c:	0810e9d8 	.word	0x0810e9d8
 810a4a0:	0810e9d4 	.word	0x0810e9d4
 810a4a4:	0810eb40 	.word	0x0810eb40
 810a4a8:	0810eb18 	.word	0x0810eb18
 810a4ac:	7ff00000 	.word	0x7ff00000
 810a4b0:	7ca00000 	.word	0x7ca00000
 810a4b4:	7fefffff 	.word	0x7fefffff
 810a4b8:	f015 0310 	ands.w	r3, r5, #16
 810a4bc:	bf18      	it	ne
 810a4be:	236a      	movne	r3, #106	; 0x6a
 810a4c0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 810a864 <_strtod_l+0x94c>
 810a4c4:	9304      	str	r3, [sp, #16]
 810a4c6:	4640      	mov	r0, r8
 810a4c8:	4649      	mov	r1, r9
 810a4ca:	2300      	movs	r3, #0
 810a4cc:	07ea      	lsls	r2, r5, #31
 810a4ce:	d504      	bpl.n	810a4da <_strtod_l+0x5c2>
 810a4d0:	e9da 2300 	ldrd	r2, r3, [sl]
 810a4d4:	f7f6 f918 	bl	8100708 <__aeabi_dmul>
 810a4d8:	2301      	movs	r3, #1
 810a4da:	106d      	asrs	r5, r5, #1
 810a4dc:	f10a 0a08 	add.w	sl, sl, #8
 810a4e0:	d1f4      	bne.n	810a4cc <_strtod_l+0x5b4>
 810a4e2:	b10b      	cbz	r3, 810a4e8 <_strtod_l+0x5d0>
 810a4e4:	4680      	mov	r8, r0
 810a4e6:	4689      	mov	r9, r1
 810a4e8:	9b04      	ldr	r3, [sp, #16]
 810a4ea:	b1bb      	cbz	r3, 810a51c <_strtod_l+0x604>
 810a4ec:	f3c9 520a 	ubfx	r2, r9, #20, #11
 810a4f0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 810a4f4:	2b00      	cmp	r3, #0
 810a4f6:	4649      	mov	r1, r9
 810a4f8:	dd10      	ble.n	810a51c <_strtod_l+0x604>
 810a4fa:	2b1f      	cmp	r3, #31
 810a4fc:	f340 811e 	ble.w	810a73c <_strtod_l+0x824>
 810a500:	2b34      	cmp	r3, #52	; 0x34
 810a502:	bfde      	ittt	le
 810a504:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 810a508:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 810a50c:	4093      	lslle	r3, r2
 810a50e:	f04f 0800 	mov.w	r8, #0
 810a512:	bfcc      	ite	gt
 810a514:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 810a518:	ea03 0901 	andle.w	r9, r3, r1
 810a51c:	2200      	movs	r2, #0
 810a51e:	2300      	movs	r3, #0
 810a520:	4640      	mov	r0, r8
 810a522:	4649      	mov	r1, r9
 810a524:	f7f6 fb58 	bl	8100bd8 <__aeabi_dcmpeq>
 810a528:	2800      	cmp	r0, #0
 810a52a:	d1a6      	bne.n	810a47a <_strtod_l+0x562>
 810a52c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810a52e:	9300      	str	r3, [sp, #0]
 810a530:	990b      	ldr	r1, [sp, #44]	; 0x2c
 810a532:	4633      	mov	r3, r6
 810a534:	465a      	mov	r2, fp
 810a536:	4620      	mov	r0, r4
 810a538:	f002 f97c 	bl	810c834 <__s2b>
 810a53c:	9009      	str	r0, [sp, #36]	; 0x24
 810a53e:	2800      	cmp	r0, #0
 810a540:	f43f af2a 	beq.w	810a398 <_strtod_l+0x480>
 810a544:	9a08      	ldr	r2, [sp, #32]
 810a546:	9b05      	ldr	r3, [sp, #20]
 810a548:	2a00      	cmp	r2, #0
 810a54a:	eba3 0307 	sub.w	r3, r3, r7
 810a54e:	bfa8      	it	ge
 810a550:	2300      	movge	r3, #0
 810a552:	930c      	str	r3, [sp, #48]	; 0x30
 810a554:	2500      	movs	r5, #0
 810a556:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 810a55a:	9312      	str	r3, [sp, #72]	; 0x48
 810a55c:	46ab      	mov	fp, r5
 810a55e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810a560:	4620      	mov	r0, r4
 810a562:	6859      	ldr	r1, [r3, #4]
 810a564:	f002 f8be 	bl	810c6e4 <_Balloc>
 810a568:	9005      	str	r0, [sp, #20]
 810a56a:	2800      	cmp	r0, #0
 810a56c:	f43f af18 	beq.w	810a3a0 <_strtod_l+0x488>
 810a570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810a572:	691a      	ldr	r2, [r3, #16]
 810a574:	3202      	adds	r2, #2
 810a576:	f103 010c 	add.w	r1, r3, #12
 810a57a:	0092      	lsls	r2, r2, #2
 810a57c:	300c      	adds	r0, #12
 810a57e:	f000 fbd9 	bl	810ad34 <memcpy>
 810a582:	ec49 8b10 	vmov	d0, r8, r9
 810a586:	aa18      	add	r2, sp, #96	; 0x60
 810a588:	a917      	add	r1, sp, #92	; 0x5c
 810a58a:	4620      	mov	r0, r4
 810a58c:	f002 fc86 	bl	810ce9c <__d2b>
 810a590:	ec49 8b18 	vmov	d8, r8, r9
 810a594:	9016      	str	r0, [sp, #88]	; 0x58
 810a596:	2800      	cmp	r0, #0
 810a598:	f43f af02 	beq.w	810a3a0 <_strtod_l+0x488>
 810a59c:	2101      	movs	r1, #1
 810a59e:	4620      	mov	r0, r4
 810a5a0:	f002 f9e0 	bl	810c964 <__i2b>
 810a5a4:	4683      	mov	fp, r0
 810a5a6:	2800      	cmp	r0, #0
 810a5a8:	f43f aefa 	beq.w	810a3a0 <_strtod_l+0x488>
 810a5ac:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 810a5ae:	9a18      	ldr	r2, [sp, #96]	; 0x60
 810a5b0:	2e00      	cmp	r6, #0
 810a5b2:	bfab      	itete	ge
 810a5b4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 810a5b6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 810a5b8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 810a5ba:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 810a5be:	bfac      	ite	ge
 810a5c0:	eb06 0a03 	addge.w	sl, r6, r3
 810a5c4:	1b9f      	sublt	r7, r3, r6
 810a5c6:	9b04      	ldr	r3, [sp, #16]
 810a5c8:	1af6      	subs	r6, r6, r3
 810a5ca:	4416      	add	r6, r2
 810a5cc:	4ba0      	ldr	r3, [pc, #640]	; (810a850 <_strtod_l+0x938>)
 810a5ce:	3e01      	subs	r6, #1
 810a5d0:	429e      	cmp	r6, r3
 810a5d2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 810a5d6:	f280 80c4 	bge.w	810a762 <_strtod_l+0x84a>
 810a5da:	1b9b      	subs	r3, r3, r6
 810a5dc:	2b1f      	cmp	r3, #31
 810a5de:	eba2 0203 	sub.w	r2, r2, r3
 810a5e2:	f04f 0101 	mov.w	r1, #1
 810a5e6:	f300 80b0 	bgt.w	810a74a <_strtod_l+0x832>
 810a5ea:	fa01 f303 	lsl.w	r3, r1, r3
 810a5ee:	930e      	str	r3, [sp, #56]	; 0x38
 810a5f0:	2300      	movs	r3, #0
 810a5f2:	930d      	str	r3, [sp, #52]	; 0x34
 810a5f4:	eb0a 0602 	add.w	r6, sl, r2
 810a5f8:	9b04      	ldr	r3, [sp, #16]
 810a5fa:	45b2      	cmp	sl, r6
 810a5fc:	4417      	add	r7, r2
 810a5fe:	441f      	add	r7, r3
 810a600:	4653      	mov	r3, sl
 810a602:	bfa8      	it	ge
 810a604:	4633      	movge	r3, r6
 810a606:	42bb      	cmp	r3, r7
 810a608:	bfa8      	it	ge
 810a60a:	463b      	movge	r3, r7
 810a60c:	2b00      	cmp	r3, #0
 810a60e:	bfc2      	ittt	gt
 810a610:	1af6      	subgt	r6, r6, r3
 810a612:	1aff      	subgt	r7, r7, r3
 810a614:	ebaa 0a03 	subgt.w	sl, sl, r3
 810a618:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810a61a:	2b00      	cmp	r3, #0
 810a61c:	dd17      	ble.n	810a64e <_strtod_l+0x736>
 810a61e:	4659      	mov	r1, fp
 810a620:	461a      	mov	r2, r3
 810a622:	4620      	mov	r0, r4
 810a624:	f002 fa5e 	bl	810cae4 <__pow5mult>
 810a628:	4683      	mov	fp, r0
 810a62a:	2800      	cmp	r0, #0
 810a62c:	f43f aeb8 	beq.w	810a3a0 <_strtod_l+0x488>
 810a630:	4601      	mov	r1, r0
 810a632:	9a16      	ldr	r2, [sp, #88]	; 0x58
 810a634:	4620      	mov	r0, r4
 810a636:	f002 f9ab 	bl	810c990 <__multiply>
 810a63a:	900b      	str	r0, [sp, #44]	; 0x2c
 810a63c:	2800      	cmp	r0, #0
 810a63e:	f43f aeaf 	beq.w	810a3a0 <_strtod_l+0x488>
 810a642:	9916      	ldr	r1, [sp, #88]	; 0x58
 810a644:	4620      	mov	r0, r4
 810a646:	f002 f88d 	bl	810c764 <_Bfree>
 810a64a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810a64c:	9316      	str	r3, [sp, #88]	; 0x58
 810a64e:	2e00      	cmp	r6, #0
 810a650:	f300 808c 	bgt.w	810a76c <_strtod_l+0x854>
 810a654:	9b08      	ldr	r3, [sp, #32]
 810a656:	2b00      	cmp	r3, #0
 810a658:	dd08      	ble.n	810a66c <_strtod_l+0x754>
 810a65a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 810a65c:	9905      	ldr	r1, [sp, #20]
 810a65e:	4620      	mov	r0, r4
 810a660:	f002 fa40 	bl	810cae4 <__pow5mult>
 810a664:	9005      	str	r0, [sp, #20]
 810a666:	2800      	cmp	r0, #0
 810a668:	f43f ae9a 	beq.w	810a3a0 <_strtod_l+0x488>
 810a66c:	2f00      	cmp	r7, #0
 810a66e:	dd08      	ble.n	810a682 <_strtod_l+0x76a>
 810a670:	9905      	ldr	r1, [sp, #20]
 810a672:	463a      	mov	r2, r7
 810a674:	4620      	mov	r0, r4
 810a676:	f002 fa8f 	bl	810cb98 <__lshift>
 810a67a:	9005      	str	r0, [sp, #20]
 810a67c:	2800      	cmp	r0, #0
 810a67e:	f43f ae8f 	beq.w	810a3a0 <_strtod_l+0x488>
 810a682:	f1ba 0f00 	cmp.w	sl, #0
 810a686:	dd08      	ble.n	810a69a <_strtod_l+0x782>
 810a688:	4659      	mov	r1, fp
 810a68a:	4652      	mov	r2, sl
 810a68c:	4620      	mov	r0, r4
 810a68e:	f002 fa83 	bl	810cb98 <__lshift>
 810a692:	4683      	mov	fp, r0
 810a694:	2800      	cmp	r0, #0
 810a696:	f43f ae83 	beq.w	810a3a0 <_strtod_l+0x488>
 810a69a:	9a05      	ldr	r2, [sp, #20]
 810a69c:	9916      	ldr	r1, [sp, #88]	; 0x58
 810a69e:	4620      	mov	r0, r4
 810a6a0:	f002 fb02 	bl	810cca8 <__mdiff>
 810a6a4:	4605      	mov	r5, r0
 810a6a6:	2800      	cmp	r0, #0
 810a6a8:	f43f ae7a 	beq.w	810a3a0 <_strtod_l+0x488>
 810a6ac:	68c3      	ldr	r3, [r0, #12]
 810a6ae:	930b      	str	r3, [sp, #44]	; 0x2c
 810a6b0:	2300      	movs	r3, #0
 810a6b2:	60c3      	str	r3, [r0, #12]
 810a6b4:	4659      	mov	r1, fp
 810a6b6:	f002 fadb 	bl	810cc70 <__mcmp>
 810a6ba:	2800      	cmp	r0, #0
 810a6bc:	da60      	bge.n	810a780 <_strtod_l+0x868>
 810a6be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810a6c0:	ea53 0308 	orrs.w	r3, r3, r8
 810a6c4:	f040 8084 	bne.w	810a7d0 <_strtod_l+0x8b8>
 810a6c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810a6cc:	2b00      	cmp	r3, #0
 810a6ce:	d17f      	bne.n	810a7d0 <_strtod_l+0x8b8>
 810a6d0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 810a6d4:	0d1b      	lsrs	r3, r3, #20
 810a6d6:	051b      	lsls	r3, r3, #20
 810a6d8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 810a6dc:	d978      	bls.n	810a7d0 <_strtod_l+0x8b8>
 810a6de:	696b      	ldr	r3, [r5, #20]
 810a6e0:	b913      	cbnz	r3, 810a6e8 <_strtod_l+0x7d0>
 810a6e2:	692b      	ldr	r3, [r5, #16]
 810a6e4:	2b01      	cmp	r3, #1
 810a6e6:	dd73      	ble.n	810a7d0 <_strtod_l+0x8b8>
 810a6e8:	4629      	mov	r1, r5
 810a6ea:	2201      	movs	r2, #1
 810a6ec:	4620      	mov	r0, r4
 810a6ee:	f002 fa53 	bl	810cb98 <__lshift>
 810a6f2:	4659      	mov	r1, fp
 810a6f4:	4605      	mov	r5, r0
 810a6f6:	f002 fabb 	bl	810cc70 <__mcmp>
 810a6fa:	2800      	cmp	r0, #0
 810a6fc:	dd68      	ble.n	810a7d0 <_strtod_l+0x8b8>
 810a6fe:	9904      	ldr	r1, [sp, #16]
 810a700:	4a54      	ldr	r2, [pc, #336]	; (810a854 <_strtod_l+0x93c>)
 810a702:	464b      	mov	r3, r9
 810a704:	2900      	cmp	r1, #0
 810a706:	f000 8084 	beq.w	810a812 <_strtod_l+0x8fa>
 810a70a:	ea02 0109 	and.w	r1, r2, r9
 810a70e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 810a712:	dc7e      	bgt.n	810a812 <_strtod_l+0x8fa>
 810a714:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 810a718:	f77f aeb3 	ble.w	810a482 <_strtod_l+0x56a>
 810a71c:	4b4e      	ldr	r3, [pc, #312]	; (810a858 <_strtod_l+0x940>)
 810a71e:	4640      	mov	r0, r8
 810a720:	4649      	mov	r1, r9
 810a722:	2200      	movs	r2, #0
 810a724:	f7f5 fff0 	bl	8100708 <__aeabi_dmul>
 810a728:	4b4a      	ldr	r3, [pc, #296]	; (810a854 <_strtod_l+0x93c>)
 810a72a:	400b      	ands	r3, r1
 810a72c:	4680      	mov	r8, r0
 810a72e:	4689      	mov	r9, r1
 810a730:	2b00      	cmp	r3, #0
 810a732:	f47f ae3f 	bne.w	810a3b4 <_strtod_l+0x49c>
 810a736:	2322      	movs	r3, #34	; 0x22
 810a738:	6023      	str	r3, [r4, #0]
 810a73a:	e63b      	b.n	810a3b4 <_strtod_l+0x49c>
 810a73c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810a740:	fa02 f303 	lsl.w	r3, r2, r3
 810a744:	ea03 0808 	and.w	r8, r3, r8
 810a748:	e6e8      	b.n	810a51c <_strtod_l+0x604>
 810a74a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 810a74e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 810a752:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 810a756:	36e2      	adds	r6, #226	; 0xe2
 810a758:	fa01 f306 	lsl.w	r3, r1, r6
 810a75c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 810a760:	e748      	b.n	810a5f4 <_strtod_l+0x6dc>
 810a762:	2100      	movs	r1, #0
 810a764:	2301      	movs	r3, #1
 810a766:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 810a76a:	e743      	b.n	810a5f4 <_strtod_l+0x6dc>
 810a76c:	9916      	ldr	r1, [sp, #88]	; 0x58
 810a76e:	4632      	mov	r2, r6
 810a770:	4620      	mov	r0, r4
 810a772:	f002 fa11 	bl	810cb98 <__lshift>
 810a776:	9016      	str	r0, [sp, #88]	; 0x58
 810a778:	2800      	cmp	r0, #0
 810a77a:	f47f af6b 	bne.w	810a654 <_strtod_l+0x73c>
 810a77e:	e60f      	b.n	810a3a0 <_strtod_l+0x488>
 810a780:	46ca      	mov	sl, r9
 810a782:	d171      	bne.n	810a868 <_strtod_l+0x950>
 810a784:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810a786:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810a78a:	b352      	cbz	r2, 810a7e2 <_strtod_l+0x8ca>
 810a78c:	4a33      	ldr	r2, [pc, #204]	; (810a85c <_strtod_l+0x944>)
 810a78e:	4293      	cmp	r3, r2
 810a790:	d12a      	bne.n	810a7e8 <_strtod_l+0x8d0>
 810a792:	9b04      	ldr	r3, [sp, #16]
 810a794:	4641      	mov	r1, r8
 810a796:	b1fb      	cbz	r3, 810a7d8 <_strtod_l+0x8c0>
 810a798:	4b2e      	ldr	r3, [pc, #184]	; (810a854 <_strtod_l+0x93c>)
 810a79a:	ea09 0303 	and.w	r3, r9, r3
 810a79e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 810a7a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810a7a6:	d81a      	bhi.n	810a7de <_strtod_l+0x8c6>
 810a7a8:	0d1b      	lsrs	r3, r3, #20
 810a7aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 810a7ae:	fa02 f303 	lsl.w	r3, r2, r3
 810a7b2:	4299      	cmp	r1, r3
 810a7b4:	d118      	bne.n	810a7e8 <_strtod_l+0x8d0>
 810a7b6:	4b2a      	ldr	r3, [pc, #168]	; (810a860 <_strtod_l+0x948>)
 810a7b8:	459a      	cmp	sl, r3
 810a7ba:	d102      	bne.n	810a7c2 <_strtod_l+0x8aa>
 810a7bc:	3101      	adds	r1, #1
 810a7be:	f43f adef 	beq.w	810a3a0 <_strtod_l+0x488>
 810a7c2:	4b24      	ldr	r3, [pc, #144]	; (810a854 <_strtod_l+0x93c>)
 810a7c4:	ea0a 0303 	and.w	r3, sl, r3
 810a7c8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 810a7cc:	f04f 0800 	mov.w	r8, #0
 810a7d0:	9b04      	ldr	r3, [sp, #16]
 810a7d2:	2b00      	cmp	r3, #0
 810a7d4:	d1a2      	bne.n	810a71c <_strtod_l+0x804>
 810a7d6:	e5ed      	b.n	810a3b4 <_strtod_l+0x49c>
 810a7d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 810a7dc:	e7e9      	b.n	810a7b2 <_strtod_l+0x89a>
 810a7de:	4613      	mov	r3, r2
 810a7e0:	e7e7      	b.n	810a7b2 <_strtod_l+0x89a>
 810a7e2:	ea53 0308 	orrs.w	r3, r3, r8
 810a7e6:	d08a      	beq.n	810a6fe <_strtod_l+0x7e6>
 810a7e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810a7ea:	b1e3      	cbz	r3, 810a826 <_strtod_l+0x90e>
 810a7ec:	ea13 0f0a 	tst.w	r3, sl
 810a7f0:	d0ee      	beq.n	810a7d0 <_strtod_l+0x8b8>
 810a7f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810a7f4:	9a04      	ldr	r2, [sp, #16]
 810a7f6:	4640      	mov	r0, r8
 810a7f8:	4649      	mov	r1, r9
 810a7fa:	b1c3      	cbz	r3, 810a82e <_strtod_l+0x916>
 810a7fc:	f7ff fb70 	bl	8109ee0 <sulp>
 810a800:	4602      	mov	r2, r0
 810a802:	460b      	mov	r3, r1
 810a804:	ec51 0b18 	vmov	r0, r1, d8
 810a808:	f7f5 fdc8 	bl	810039c <__adddf3>
 810a80c:	4680      	mov	r8, r0
 810a80e:	4689      	mov	r9, r1
 810a810:	e7de      	b.n	810a7d0 <_strtod_l+0x8b8>
 810a812:	4013      	ands	r3, r2
 810a814:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 810a818:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 810a81c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 810a820:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 810a824:	e7d4      	b.n	810a7d0 <_strtod_l+0x8b8>
 810a826:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810a828:	ea13 0f08 	tst.w	r3, r8
 810a82c:	e7e0      	b.n	810a7f0 <_strtod_l+0x8d8>
 810a82e:	f7ff fb57 	bl	8109ee0 <sulp>
 810a832:	4602      	mov	r2, r0
 810a834:	460b      	mov	r3, r1
 810a836:	ec51 0b18 	vmov	r0, r1, d8
 810a83a:	f7f5 fdad 	bl	8100398 <__aeabi_dsub>
 810a83e:	2200      	movs	r2, #0
 810a840:	2300      	movs	r3, #0
 810a842:	4680      	mov	r8, r0
 810a844:	4689      	mov	r9, r1
 810a846:	f7f6 f9c7 	bl	8100bd8 <__aeabi_dcmpeq>
 810a84a:	2800      	cmp	r0, #0
 810a84c:	d0c0      	beq.n	810a7d0 <_strtod_l+0x8b8>
 810a84e:	e618      	b.n	810a482 <_strtod_l+0x56a>
 810a850:	fffffc02 	.word	0xfffffc02
 810a854:	7ff00000 	.word	0x7ff00000
 810a858:	39500000 	.word	0x39500000
 810a85c:	000fffff 	.word	0x000fffff
 810a860:	7fefffff 	.word	0x7fefffff
 810a864:	0810e868 	.word	0x0810e868
 810a868:	4659      	mov	r1, fp
 810a86a:	4628      	mov	r0, r5
 810a86c:	f002 fb70 	bl	810cf50 <__ratio>
 810a870:	ec57 6b10 	vmov	r6, r7, d0
 810a874:	ee10 0a10 	vmov	r0, s0
 810a878:	2200      	movs	r2, #0
 810a87a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 810a87e:	4639      	mov	r1, r7
 810a880:	f7f6 f9be 	bl	8100c00 <__aeabi_dcmple>
 810a884:	2800      	cmp	r0, #0
 810a886:	d071      	beq.n	810a96c <_strtod_l+0xa54>
 810a888:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810a88a:	2b00      	cmp	r3, #0
 810a88c:	d17c      	bne.n	810a988 <_strtod_l+0xa70>
 810a88e:	f1b8 0f00 	cmp.w	r8, #0
 810a892:	d15a      	bne.n	810a94a <_strtod_l+0xa32>
 810a894:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810a898:	2b00      	cmp	r3, #0
 810a89a:	d15d      	bne.n	810a958 <_strtod_l+0xa40>
 810a89c:	4b90      	ldr	r3, [pc, #576]	; (810aae0 <_strtod_l+0xbc8>)
 810a89e:	2200      	movs	r2, #0
 810a8a0:	4630      	mov	r0, r6
 810a8a2:	4639      	mov	r1, r7
 810a8a4:	f7f6 f9a2 	bl	8100bec <__aeabi_dcmplt>
 810a8a8:	2800      	cmp	r0, #0
 810a8aa:	d15c      	bne.n	810a966 <_strtod_l+0xa4e>
 810a8ac:	4630      	mov	r0, r6
 810a8ae:	4639      	mov	r1, r7
 810a8b0:	4b8c      	ldr	r3, [pc, #560]	; (810aae4 <_strtod_l+0xbcc>)
 810a8b2:	2200      	movs	r2, #0
 810a8b4:	f7f5 ff28 	bl	8100708 <__aeabi_dmul>
 810a8b8:	4606      	mov	r6, r0
 810a8ba:	460f      	mov	r7, r1
 810a8bc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 810a8c0:	9606      	str	r6, [sp, #24]
 810a8c2:	9307      	str	r3, [sp, #28]
 810a8c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810a8c8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 810a8cc:	4b86      	ldr	r3, [pc, #536]	; (810aae8 <_strtod_l+0xbd0>)
 810a8ce:	ea0a 0303 	and.w	r3, sl, r3
 810a8d2:	930d      	str	r3, [sp, #52]	; 0x34
 810a8d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810a8d6:	4b85      	ldr	r3, [pc, #532]	; (810aaec <_strtod_l+0xbd4>)
 810a8d8:	429a      	cmp	r2, r3
 810a8da:	f040 8090 	bne.w	810a9fe <_strtod_l+0xae6>
 810a8de:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 810a8e2:	ec49 8b10 	vmov	d0, r8, r9
 810a8e6:	f002 fa69 	bl	810cdbc <__ulp>
 810a8ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810a8ee:	ec51 0b10 	vmov	r0, r1, d0
 810a8f2:	f7f5 ff09 	bl	8100708 <__aeabi_dmul>
 810a8f6:	4642      	mov	r2, r8
 810a8f8:	464b      	mov	r3, r9
 810a8fa:	f7f5 fd4f 	bl	810039c <__adddf3>
 810a8fe:	460b      	mov	r3, r1
 810a900:	4979      	ldr	r1, [pc, #484]	; (810aae8 <_strtod_l+0xbd0>)
 810a902:	4a7b      	ldr	r2, [pc, #492]	; (810aaf0 <_strtod_l+0xbd8>)
 810a904:	4019      	ands	r1, r3
 810a906:	4291      	cmp	r1, r2
 810a908:	4680      	mov	r8, r0
 810a90a:	d944      	bls.n	810a996 <_strtod_l+0xa7e>
 810a90c:	ee18 2a90 	vmov	r2, s17
 810a910:	4b78      	ldr	r3, [pc, #480]	; (810aaf4 <_strtod_l+0xbdc>)
 810a912:	429a      	cmp	r2, r3
 810a914:	d104      	bne.n	810a920 <_strtod_l+0xa08>
 810a916:	ee18 3a10 	vmov	r3, s16
 810a91a:	3301      	adds	r3, #1
 810a91c:	f43f ad40 	beq.w	810a3a0 <_strtod_l+0x488>
 810a920:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 810aaf4 <_strtod_l+0xbdc>
 810a924:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 810a928:	9916      	ldr	r1, [sp, #88]	; 0x58
 810a92a:	4620      	mov	r0, r4
 810a92c:	f001 ff1a 	bl	810c764 <_Bfree>
 810a930:	9905      	ldr	r1, [sp, #20]
 810a932:	4620      	mov	r0, r4
 810a934:	f001 ff16 	bl	810c764 <_Bfree>
 810a938:	4659      	mov	r1, fp
 810a93a:	4620      	mov	r0, r4
 810a93c:	f001 ff12 	bl	810c764 <_Bfree>
 810a940:	4629      	mov	r1, r5
 810a942:	4620      	mov	r0, r4
 810a944:	f001 ff0e 	bl	810c764 <_Bfree>
 810a948:	e609      	b.n	810a55e <_strtod_l+0x646>
 810a94a:	f1b8 0f01 	cmp.w	r8, #1
 810a94e:	d103      	bne.n	810a958 <_strtod_l+0xa40>
 810a950:	f1b9 0f00 	cmp.w	r9, #0
 810a954:	f43f ad95 	beq.w	810a482 <_strtod_l+0x56a>
 810a958:	ed9f 7b55 	vldr	d7, [pc, #340]	; 810aab0 <_strtod_l+0xb98>
 810a95c:	4f60      	ldr	r7, [pc, #384]	; (810aae0 <_strtod_l+0xbc8>)
 810a95e:	ed8d 7b06 	vstr	d7, [sp, #24]
 810a962:	2600      	movs	r6, #0
 810a964:	e7ae      	b.n	810a8c4 <_strtod_l+0x9ac>
 810a966:	4f5f      	ldr	r7, [pc, #380]	; (810aae4 <_strtod_l+0xbcc>)
 810a968:	2600      	movs	r6, #0
 810a96a:	e7a7      	b.n	810a8bc <_strtod_l+0x9a4>
 810a96c:	4b5d      	ldr	r3, [pc, #372]	; (810aae4 <_strtod_l+0xbcc>)
 810a96e:	4630      	mov	r0, r6
 810a970:	4639      	mov	r1, r7
 810a972:	2200      	movs	r2, #0
 810a974:	f7f5 fec8 	bl	8100708 <__aeabi_dmul>
 810a978:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810a97a:	4606      	mov	r6, r0
 810a97c:	460f      	mov	r7, r1
 810a97e:	2b00      	cmp	r3, #0
 810a980:	d09c      	beq.n	810a8bc <_strtod_l+0x9a4>
 810a982:	e9cd 6706 	strd	r6, r7, [sp, #24]
 810a986:	e79d      	b.n	810a8c4 <_strtod_l+0x9ac>
 810a988:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 810aab8 <_strtod_l+0xba0>
 810a98c:	ed8d 7b06 	vstr	d7, [sp, #24]
 810a990:	ec57 6b17 	vmov	r6, r7, d7
 810a994:	e796      	b.n	810a8c4 <_strtod_l+0x9ac>
 810a996:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 810a99a:	9b04      	ldr	r3, [sp, #16]
 810a99c:	46ca      	mov	sl, r9
 810a99e:	2b00      	cmp	r3, #0
 810a9a0:	d1c2      	bne.n	810a928 <_strtod_l+0xa10>
 810a9a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 810a9a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810a9a8:	0d1b      	lsrs	r3, r3, #20
 810a9aa:	051b      	lsls	r3, r3, #20
 810a9ac:	429a      	cmp	r2, r3
 810a9ae:	d1bb      	bne.n	810a928 <_strtod_l+0xa10>
 810a9b0:	4630      	mov	r0, r6
 810a9b2:	4639      	mov	r1, r7
 810a9b4:	f7f6 fa08 	bl	8100dc8 <__aeabi_d2lz>
 810a9b8:	f7f5 fe78 	bl	81006ac <__aeabi_l2d>
 810a9bc:	4602      	mov	r2, r0
 810a9be:	460b      	mov	r3, r1
 810a9c0:	4630      	mov	r0, r6
 810a9c2:	4639      	mov	r1, r7
 810a9c4:	f7f5 fce8 	bl	8100398 <__aeabi_dsub>
 810a9c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810a9ca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810a9ce:	ea43 0308 	orr.w	r3, r3, r8
 810a9d2:	4313      	orrs	r3, r2
 810a9d4:	4606      	mov	r6, r0
 810a9d6:	460f      	mov	r7, r1
 810a9d8:	d054      	beq.n	810aa84 <_strtod_l+0xb6c>
 810a9da:	a339      	add	r3, pc, #228	; (adr r3, 810aac0 <_strtod_l+0xba8>)
 810a9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a9e0:	f7f6 f904 	bl	8100bec <__aeabi_dcmplt>
 810a9e4:	2800      	cmp	r0, #0
 810a9e6:	f47f ace5 	bne.w	810a3b4 <_strtod_l+0x49c>
 810a9ea:	a337      	add	r3, pc, #220	; (adr r3, 810aac8 <_strtod_l+0xbb0>)
 810a9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a9f0:	4630      	mov	r0, r6
 810a9f2:	4639      	mov	r1, r7
 810a9f4:	f7f6 f918 	bl	8100c28 <__aeabi_dcmpgt>
 810a9f8:	2800      	cmp	r0, #0
 810a9fa:	d095      	beq.n	810a928 <_strtod_l+0xa10>
 810a9fc:	e4da      	b.n	810a3b4 <_strtod_l+0x49c>
 810a9fe:	9b04      	ldr	r3, [sp, #16]
 810aa00:	b333      	cbz	r3, 810aa50 <_strtod_l+0xb38>
 810aa02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810aa04:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 810aa08:	d822      	bhi.n	810aa50 <_strtod_l+0xb38>
 810aa0a:	a331      	add	r3, pc, #196	; (adr r3, 810aad0 <_strtod_l+0xbb8>)
 810aa0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810aa10:	4630      	mov	r0, r6
 810aa12:	4639      	mov	r1, r7
 810aa14:	f7f6 f8f4 	bl	8100c00 <__aeabi_dcmple>
 810aa18:	b1a0      	cbz	r0, 810aa44 <_strtod_l+0xb2c>
 810aa1a:	4639      	mov	r1, r7
 810aa1c:	4630      	mov	r0, r6
 810aa1e:	f7f6 f94b 	bl	8100cb8 <__aeabi_d2uiz>
 810aa22:	2801      	cmp	r0, #1
 810aa24:	bf38      	it	cc
 810aa26:	2001      	movcc	r0, #1
 810aa28:	f7f5 fdf4 	bl	8100614 <__aeabi_ui2d>
 810aa2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810aa2e:	4606      	mov	r6, r0
 810aa30:	460f      	mov	r7, r1
 810aa32:	bb23      	cbnz	r3, 810aa7e <_strtod_l+0xb66>
 810aa34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810aa38:	9010      	str	r0, [sp, #64]	; 0x40
 810aa3a:	9311      	str	r3, [sp, #68]	; 0x44
 810aa3c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 810aa40:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 810aa44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810aa46:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810aa48:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 810aa4c:	1a9b      	subs	r3, r3, r2
 810aa4e:	930f      	str	r3, [sp, #60]	; 0x3c
 810aa50:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 810aa54:	eeb0 0a48 	vmov.f32	s0, s16
 810aa58:	eef0 0a68 	vmov.f32	s1, s17
 810aa5c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 810aa60:	f002 f9ac 	bl	810cdbc <__ulp>
 810aa64:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 810aa68:	ec53 2b10 	vmov	r2, r3, d0
 810aa6c:	f7f5 fe4c 	bl	8100708 <__aeabi_dmul>
 810aa70:	ec53 2b18 	vmov	r2, r3, d8
 810aa74:	f7f5 fc92 	bl	810039c <__adddf3>
 810aa78:	4680      	mov	r8, r0
 810aa7a:	4689      	mov	r9, r1
 810aa7c:	e78d      	b.n	810a99a <_strtod_l+0xa82>
 810aa7e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 810aa82:	e7db      	b.n	810aa3c <_strtod_l+0xb24>
 810aa84:	a314      	add	r3, pc, #80	; (adr r3, 810aad8 <_strtod_l+0xbc0>)
 810aa86:	e9d3 2300 	ldrd	r2, r3, [r3]
 810aa8a:	f7f6 f8af 	bl	8100bec <__aeabi_dcmplt>
 810aa8e:	e7b3      	b.n	810a9f8 <_strtod_l+0xae0>
 810aa90:	2300      	movs	r3, #0
 810aa92:	930a      	str	r3, [sp, #40]	; 0x28
 810aa94:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 810aa96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810aa98:	6013      	str	r3, [r2, #0]
 810aa9a:	f7ff ba7c 	b.w	8109f96 <_strtod_l+0x7e>
 810aa9e:	2a65      	cmp	r2, #101	; 0x65
 810aaa0:	f43f ab75 	beq.w	810a18e <_strtod_l+0x276>
 810aaa4:	2a45      	cmp	r2, #69	; 0x45
 810aaa6:	f43f ab72 	beq.w	810a18e <_strtod_l+0x276>
 810aaaa:	2301      	movs	r3, #1
 810aaac:	f7ff bbaa 	b.w	810a204 <_strtod_l+0x2ec>
 810aab0:	00000000 	.word	0x00000000
 810aab4:	bff00000 	.word	0xbff00000
 810aab8:	00000000 	.word	0x00000000
 810aabc:	3ff00000 	.word	0x3ff00000
 810aac0:	94a03595 	.word	0x94a03595
 810aac4:	3fdfffff 	.word	0x3fdfffff
 810aac8:	35afe535 	.word	0x35afe535
 810aacc:	3fe00000 	.word	0x3fe00000
 810aad0:	ffc00000 	.word	0xffc00000
 810aad4:	41dfffff 	.word	0x41dfffff
 810aad8:	94a03595 	.word	0x94a03595
 810aadc:	3fcfffff 	.word	0x3fcfffff
 810aae0:	3ff00000 	.word	0x3ff00000
 810aae4:	3fe00000 	.word	0x3fe00000
 810aae8:	7ff00000 	.word	0x7ff00000
 810aaec:	7fe00000 	.word	0x7fe00000
 810aaf0:	7c9fffff 	.word	0x7c9fffff
 810aaf4:	7fefffff 	.word	0x7fefffff

0810aaf8 <_strtod_r>:
 810aaf8:	4b01      	ldr	r3, [pc, #4]	; (810ab00 <_strtod_r+0x8>)
 810aafa:	f7ff ba0d 	b.w	8109f18 <_strtod_l>
 810aafe:	bf00      	nop
 810ab00:	1000001c 	.word	0x1000001c

0810ab04 <_strtol_l.constprop.0>:
 810ab04:	2b01      	cmp	r3, #1
 810ab06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810ab0a:	d001      	beq.n	810ab10 <_strtol_l.constprop.0+0xc>
 810ab0c:	2b24      	cmp	r3, #36	; 0x24
 810ab0e:	d906      	bls.n	810ab1e <_strtol_l.constprop.0+0x1a>
 810ab10:	f000 f8e4 	bl	810acdc <__errno>
 810ab14:	2316      	movs	r3, #22
 810ab16:	6003      	str	r3, [r0, #0]
 810ab18:	2000      	movs	r0, #0
 810ab1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810ab1e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 810ac04 <_strtol_l.constprop.0+0x100>
 810ab22:	460d      	mov	r5, r1
 810ab24:	462e      	mov	r6, r5
 810ab26:	f815 4b01 	ldrb.w	r4, [r5], #1
 810ab2a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 810ab2e:	f017 0708 	ands.w	r7, r7, #8
 810ab32:	d1f7      	bne.n	810ab24 <_strtol_l.constprop.0+0x20>
 810ab34:	2c2d      	cmp	r4, #45	; 0x2d
 810ab36:	d132      	bne.n	810ab9e <_strtol_l.constprop.0+0x9a>
 810ab38:	782c      	ldrb	r4, [r5, #0]
 810ab3a:	2701      	movs	r7, #1
 810ab3c:	1cb5      	adds	r5, r6, #2
 810ab3e:	2b00      	cmp	r3, #0
 810ab40:	d05b      	beq.n	810abfa <_strtol_l.constprop.0+0xf6>
 810ab42:	2b10      	cmp	r3, #16
 810ab44:	d109      	bne.n	810ab5a <_strtol_l.constprop.0+0x56>
 810ab46:	2c30      	cmp	r4, #48	; 0x30
 810ab48:	d107      	bne.n	810ab5a <_strtol_l.constprop.0+0x56>
 810ab4a:	782c      	ldrb	r4, [r5, #0]
 810ab4c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 810ab50:	2c58      	cmp	r4, #88	; 0x58
 810ab52:	d14d      	bne.n	810abf0 <_strtol_l.constprop.0+0xec>
 810ab54:	786c      	ldrb	r4, [r5, #1]
 810ab56:	2310      	movs	r3, #16
 810ab58:	3502      	adds	r5, #2
 810ab5a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 810ab5e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 810ab62:	f04f 0e00 	mov.w	lr, #0
 810ab66:	fbb8 f9f3 	udiv	r9, r8, r3
 810ab6a:	4676      	mov	r6, lr
 810ab6c:	fb03 8a19 	mls	sl, r3, r9, r8
 810ab70:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 810ab74:	f1bc 0f09 	cmp.w	ip, #9
 810ab78:	d816      	bhi.n	810aba8 <_strtol_l.constprop.0+0xa4>
 810ab7a:	4664      	mov	r4, ip
 810ab7c:	42a3      	cmp	r3, r4
 810ab7e:	dd24      	ble.n	810abca <_strtol_l.constprop.0+0xc6>
 810ab80:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 810ab84:	d008      	beq.n	810ab98 <_strtol_l.constprop.0+0x94>
 810ab86:	45b1      	cmp	r9, r6
 810ab88:	d31c      	bcc.n	810abc4 <_strtol_l.constprop.0+0xc0>
 810ab8a:	d101      	bne.n	810ab90 <_strtol_l.constprop.0+0x8c>
 810ab8c:	45a2      	cmp	sl, r4
 810ab8e:	db19      	blt.n	810abc4 <_strtol_l.constprop.0+0xc0>
 810ab90:	fb06 4603 	mla	r6, r6, r3, r4
 810ab94:	f04f 0e01 	mov.w	lr, #1
 810ab98:	f815 4b01 	ldrb.w	r4, [r5], #1
 810ab9c:	e7e8      	b.n	810ab70 <_strtol_l.constprop.0+0x6c>
 810ab9e:	2c2b      	cmp	r4, #43	; 0x2b
 810aba0:	bf04      	itt	eq
 810aba2:	782c      	ldrbeq	r4, [r5, #0]
 810aba4:	1cb5      	addeq	r5, r6, #2
 810aba6:	e7ca      	b.n	810ab3e <_strtol_l.constprop.0+0x3a>
 810aba8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 810abac:	f1bc 0f19 	cmp.w	ip, #25
 810abb0:	d801      	bhi.n	810abb6 <_strtol_l.constprop.0+0xb2>
 810abb2:	3c37      	subs	r4, #55	; 0x37
 810abb4:	e7e2      	b.n	810ab7c <_strtol_l.constprop.0+0x78>
 810abb6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 810abba:	f1bc 0f19 	cmp.w	ip, #25
 810abbe:	d804      	bhi.n	810abca <_strtol_l.constprop.0+0xc6>
 810abc0:	3c57      	subs	r4, #87	; 0x57
 810abc2:	e7db      	b.n	810ab7c <_strtol_l.constprop.0+0x78>
 810abc4:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 810abc8:	e7e6      	b.n	810ab98 <_strtol_l.constprop.0+0x94>
 810abca:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 810abce:	d105      	bne.n	810abdc <_strtol_l.constprop.0+0xd8>
 810abd0:	2322      	movs	r3, #34	; 0x22
 810abd2:	6003      	str	r3, [r0, #0]
 810abd4:	4646      	mov	r6, r8
 810abd6:	b942      	cbnz	r2, 810abea <_strtol_l.constprop.0+0xe6>
 810abd8:	4630      	mov	r0, r6
 810abda:	e79e      	b.n	810ab1a <_strtol_l.constprop.0+0x16>
 810abdc:	b107      	cbz	r7, 810abe0 <_strtol_l.constprop.0+0xdc>
 810abde:	4276      	negs	r6, r6
 810abe0:	2a00      	cmp	r2, #0
 810abe2:	d0f9      	beq.n	810abd8 <_strtol_l.constprop.0+0xd4>
 810abe4:	f1be 0f00 	cmp.w	lr, #0
 810abe8:	d000      	beq.n	810abec <_strtol_l.constprop.0+0xe8>
 810abea:	1e69      	subs	r1, r5, #1
 810abec:	6011      	str	r1, [r2, #0]
 810abee:	e7f3      	b.n	810abd8 <_strtol_l.constprop.0+0xd4>
 810abf0:	2430      	movs	r4, #48	; 0x30
 810abf2:	2b00      	cmp	r3, #0
 810abf4:	d1b1      	bne.n	810ab5a <_strtol_l.constprop.0+0x56>
 810abf6:	2308      	movs	r3, #8
 810abf8:	e7af      	b.n	810ab5a <_strtol_l.constprop.0+0x56>
 810abfa:	2c30      	cmp	r4, #48	; 0x30
 810abfc:	d0a5      	beq.n	810ab4a <_strtol_l.constprop.0+0x46>
 810abfe:	230a      	movs	r3, #10
 810ac00:	e7ab      	b.n	810ab5a <_strtol_l.constprop.0+0x56>
 810ac02:	bf00      	nop
 810ac04:	0810e899 	.word	0x0810e899

0810ac08 <_strtol_r>:
 810ac08:	f7ff bf7c 	b.w	810ab04 <_strtol_l.constprop.0>

0810ac0c <_fwalk_sglue>:
 810ac0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810ac10:	4607      	mov	r7, r0
 810ac12:	4688      	mov	r8, r1
 810ac14:	4614      	mov	r4, r2
 810ac16:	2600      	movs	r6, #0
 810ac18:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 810ac1c:	f1b9 0901 	subs.w	r9, r9, #1
 810ac20:	d505      	bpl.n	810ac2e <_fwalk_sglue+0x22>
 810ac22:	6824      	ldr	r4, [r4, #0]
 810ac24:	2c00      	cmp	r4, #0
 810ac26:	d1f7      	bne.n	810ac18 <_fwalk_sglue+0xc>
 810ac28:	4630      	mov	r0, r6
 810ac2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810ac2e:	89ab      	ldrh	r3, [r5, #12]
 810ac30:	2b01      	cmp	r3, #1
 810ac32:	d907      	bls.n	810ac44 <_fwalk_sglue+0x38>
 810ac34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 810ac38:	3301      	adds	r3, #1
 810ac3a:	d003      	beq.n	810ac44 <_fwalk_sglue+0x38>
 810ac3c:	4629      	mov	r1, r5
 810ac3e:	4638      	mov	r0, r7
 810ac40:	47c0      	blx	r8
 810ac42:	4306      	orrs	r6, r0
 810ac44:	3568      	adds	r5, #104	; 0x68
 810ac46:	e7e9      	b.n	810ac1c <_fwalk_sglue+0x10>

0810ac48 <strncmp>:
 810ac48:	b510      	push	{r4, lr}
 810ac4a:	b16a      	cbz	r2, 810ac68 <strncmp+0x20>
 810ac4c:	3901      	subs	r1, #1
 810ac4e:	1884      	adds	r4, r0, r2
 810ac50:	f810 2b01 	ldrb.w	r2, [r0], #1
 810ac54:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 810ac58:	429a      	cmp	r2, r3
 810ac5a:	d103      	bne.n	810ac64 <strncmp+0x1c>
 810ac5c:	42a0      	cmp	r0, r4
 810ac5e:	d001      	beq.n	810ac64 <strncmp+0x1c>
 810ac60:	2a00      	cmp	r2, #0
 810ac62:	d1f5      	bne.n	810ac50 <strncmp+0x8>
 810ac64:	1ad0      	subs	r0, r2, r3
 810ac66:	bd10      	pop	{r4, pc}
 810ac68:	4610      	mov	r0, r2
 810ac6a:	e7fc      	b.n	810ac66 <strncmp+0x1e>

0810ac6c <memset>:
 810ac6c:	4402      	add	r2, r0
 810ac6e:	4603      	mov	r3, r0
 810ac70:	4293      	cmp	r3, r2
 810ac72:	d100      	bne.n	810ac76 <memset+0xa>
 810ac74:	4770      	bx	lr
 810ac76:	f803 1b01 	strb.w	r1, [r3], #1
 810ac7a:	e7f9      	b.n	810ac70 <memset+0x4>

0810ac7c <time>:
 810ac7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 810ac7e:	4b0b      	ldr	r3, [pc, #44]	; (810acac <time+0x30>)
 810ac80:	2200      	movs	r2, #0
 810ac82:	4669      	mov	r1, sp
 810ac84:	4604      	mov	r4, r0
 810ac86:	6818      	ldr	r0, [r3, #0]
 810ac88:	f000 f816 	bl	810acb8 <_gettimeofday_r>
 810ac8c:	2800      	cmp	r0, #0
 810ac8e:	bfbe      	ittt	lt
 810ac90:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 810ac94:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 810ac98:	e9cd 2300 	strdlt	r2, r3, [sp]
 810ac9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 810aca0:	b10c      	cbz	r4, 810aca6 <time+0x2a>
 810aca2:	e9c4 0100 	strd	r0, r1, [r4]
 810aca6:	b004      	add	sp, #16
 810aca8:	bd10      	pop	{r4, pc}
 810acaa:	bf00      	nop
 810acac:	100001d4 	.word	0x100001d4

0810acb0 <_localeconv_r>:
 810acb0:	4800      	ldr	r0, [pc, #0]	; (810acb4 <_localeconv_r+0x4>)
 810acb2:	4770      	bx	lr
 810acb4:	1000010c 	.word	0x1000010c

0810acb8 <_gettimeofday_r>:
 810acb8:	b538      	push	{r3, r4, r5, lr}
 810acba:	4d07      	ldr	r5, [pc, #28]	; (810acd8 <_gettimeofday_r+0x20>)
 810acbc:	2300      	movs	r3, #0
 810acbe:	4604      	mov	r4, r0
 810acc0:	4608      	mov	r0, r1
 810acc2:	4611      	mov	r1, r2
 810acc4:	602b      	str	r3, [r5, #0]
 810acc6:	f003 fd07 	bl	810e6d8 <_gettimeofday>
 810acca:	1c43      	adds	r3, r0, #1
 810accc:	d102      	bne.n	810acd4 <_gettimeofday_r+0x1c>
 810acce:	682b      	ldr	r3, [r5, #0]
 810acd0:	b103      	cbz	r3, 810acd4 <_gettimeofday_r+0x1c>
 810acd2:	6023      	str	r3, [r4, #0]
 810acd4:	bd38      	pop	{r3, r4, r5, pc}
 810acd6:	bf00      	nop
 810acd8:	100004c0 	.word	0x100004c0

0810acdc <__errno>:
 810acdc:	4b01      	ldr	r3, [pc, #4]	; (810ace4 <__errno+0x8>)
 810acde:	6818      	ldr	r0, [r3, #0]
 810ace0:	4770      	bx	lr
 810ace2:	bf00      	nop
 810ace4:	100001d4 	.word	0x100001d4

0810ace8 <__libc_init_array>:
 810ace8:	b570      	push	{r4, r5, r6, lr}
 810acea:	4d0d      	ldr	r5, [pc, #52]	; (810ad20 <__libc_init_array+0x38>)
 810acec:	4c0d      	ldr	r4, [pc, #52]	; (810ad24 <__libc_init_array+0x3c>)
 810acee:	1b64      	subs	r4, r4, r5
 810acf0:	10a4      	asrs	r4, r4, #2
 810acf2:	2600      	movs	r6, #0
 810acf4:	42a6      	cmp	r6, r4
 810acf6:	d109      	bne.n	810ad0c <__libc_init_array+0x24>
 810acf8:	4d0b      	ldr	r5, [pc, #44]	; (810ad28 <__libc_init_array+0x40>)
 810acfa:	4c0c      	ldr	r4, [pc, #48]	; (810ad2c <__libc_init_array+0x44>)
 810acfc:	f003 fcf4 	bl	810e6e8 <_init>
 810ad00:	1b64      	subs	r4, r4, r5
 810ad02:	10a4      	asrs	r4, r4, #2
 810ad04:	2600      	movs	r6, #0
 810ad06:	42a6      	cmp	r6, r4
 810ad08:	d105      	bne.n	810ad16 <__libc_init_array+0x2e>
 810ad0a:	bd70      	pop	{r4, r5, r6, pc}
 810ad0c:	f855 3b04 	ldr.w	r3, [r5], #4
 810ad10:	4798      	blx	r3
 810ad12:	3601      	adds	r6, #1
 810ad14:	e7ee      	b.n	810acf4 <__libc_init_array+0xc>
 810ad16:	f855 3b04 	ldr.w	r3, [r5], #4
 810ad1a:	4798      	blx	r3
 810ad1c:	3601      	adds	r6, #1
 810ad1e:	e7f2      	b.n	810ad06 <__libc_init_array+0x1e>
 810ad20:	0810ec50 	.word	0x0810ec50
 810ad24:	0810ec50 	.word	0x0810ec50
 810ad28:	0810ec50 	.word	0x0810ec50
 810ad2c:	0810ec54 	.word	0x0810ec54

0810ad30 <__retarget_lock_acquire_recursive>:
 810ad30:	4770      	bx	lr

0810ad32 <__retarget_lock_release_recursive>:
 810ad32:	4770      	bx	lr

0810ad34 <memcpy>:
 810ad34:	440a      	add	r2, r1
 810ad36:	4291      	cmp	r1, r2
 810ad38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 810ad3c:	d100      	bne.n	810ad40 <memcpy+0xc>
 810ad3e:	4770      	bx	lr
 810ad40:	b510      	push	{r4, lr}
 810ad42:	f811 4b01 	ldrb.w	r4, [r1], #1
 810ad46:	f803 4f01 	strb.w	r4, [r3, #1]!
 810ad4a:	4291      	cmp	r1, r2
 810ad4c:	d1f9      	bne.n	810ad42 <memcpy+0xe>
 810ad4e:	bd10      	pop	{r4, pc}

0810ad50 <nan>:
 810ad50:	ed9f 0b01 	vldr	d0, [pc, #4]	; 810ad58 <nan+0x8>
 810ad54:	4770      	bx	lr
 810ad56:	bf00      	nop
 810ad58:	00000000 	.word	0x00000000
 810ad5c:	7ff80000 	.word	0x7ff80000

0810ad60 <nanf>:
 810ad60:	ed9f 0a01 	vldr	s0, [pc, #4]	; 810ad68 <nanf+0x8>
 810ad64:	4770      	bx	lr
 810ad66:	bf00      	nop
 810ad68:	7fc00000 	.word	0x7fc00000

0810ad6c <__assert_func>:
 810ad6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 810ad6e:	4614      	mov	r4, r2
 810ad70:	461a      	mov	r2, r3
 810ad72:	4b09      	ldr	r3, [pc, #36]	; (810ad98 <__assert_func+0x2c>)
 810ad74:	681b      	ldr	r3, [r3, #0]
 810ad76:	4605      	mov	r5, r0
 810ad78:	68d8      	ldr	r0, [r3, #12]
 810ad7a:	b14c      	cbz	r4, 810ad90 <__assert_func+0x24>
 810ad7c:	4b07      	ldr	r3, [pc, #28]	; (810ad9c <__assert_func+0x30>)
 810ad7e:	9100      	str	r1, [sp, #0]
 810ad80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 810ad84:	4906      	ldr	r1, [pc, #24]	; (810ada0 <__assert_func+0x34>)
 810ad86:	462b      	mov	r3, r5
 810ad88:	f002 f99c 	bl	810d0c4 <fiprintf>
 810ad8c:	f002 fa58 	bl	810d240 <abort>
 810ad90:	4b04      	ldr	r3, [pc, #16]	; (810ada4 <__assert_func+0x38>)
 810ad92:	461c      	mov	r4, r3
 810ad94:	e7f3      	b.n	810ad7e <__assert_func+0x12>
 810ad96:	bf00      	nop
 810ad98:	100001d4 	.word	0x100001d4
 810ad9c:	0810e999 	.word	0x0810e999
 810ada0:	0810e9a6 	.word	0x0810e9a6
 810ada4:	0810e9d4 	.word	0x0810e9d4

0810ada8 <quorem>:
 810ada8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810adac:	6903      	ldr	r3, [r0, #16]
 810adae:	690c      	ldr	r4, [r1, #16]
 810adb0:	42a3      	cmp	r3, r4
 810adb2:	4607      	mov	r7, r0
 810adb4:	db7e      	blt.n	810aeb4 <quorem+0x10c>
 810adb6:	3c01      	subs	r4, #1
 810adb8:	f101 0814 	add.w	r8, r1, #20
 810adbc:	f100 0514 	add.w	r5, r0, #20
 810adc0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810adc4:	9301      	str	r3, [sp, #4]
 810adc6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 810adca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810adce:	3301      	adds	r3, #1
 810add0:	429a      	cmp	r2, r3
 810add2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 810add6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 810adda:	fbb2 f6f3 	udiv	r6, r2, r3
 810adde:	d331      	bcc.n	810ae44 <quorem+0x9c>
 810ade0:	f04f 0e00 	mov.w	lr, #0
 810ade4:	4640      	mov	r0, r8
 810ade6:	46ac      	mov	ip, r5
 810ade8:	46f2      	mov	sl, lr
 810adea:	f850 2b04 	ldr.w	r2, [r0], #4
 810adee:	b293      	uxth	r3, r2
 810adf0:	fb06 e303 	mla	r3, r6, r3, lr
 810adf4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 810adf8:	0c1a      	lsrs	r2, r3, #16
 810adfa:	b29b      	uxth	r3, r3
 810adfc:	ebaa 0303 	sub.w	r3, sl, r3
 810ae00:	f8dc a000 	ldr.w	sl, [ip]
 810ae04:	fa13 f38a 	uxtah	r3, r3, sl
 810ae08:	fb06 220e 	mla	r2, r6, lr, r2
 810ae0c:	9300      	str	r3, [sp, #0]
 810ae0e:	9b00      	ldr	r3, [sp, #0]
 810ae10:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 810ae14:	b292      	uxth	r2, r2
 810ae16:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 810ae1a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810ae1e:	f8bd 3000 	ldrh.w	r3, [sp]
 810ae22:	4581      	cmp	r9, r0
 810ae24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810ae28:	f84c 3b04 	str.w	r3, [ip], #4
 810ae2c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 810ae30:	d2db      	bcs.n	810adea <quorem+0x42>
 810ae32:	f855 300b 	ldr.w	r3, [r5, fp]
 810ae36:	b92b      	cbnz	r3, 810ae44 <quorem+0x9c>
 810ae38:	9b01      	ldr	r3, [sp, #4]
 810ae3a:	3b04      	subs	r3, #4
 810ae3c:	429d      	cmp	r5, r3
 810ae3e:	461a      	mov	r2, r3
 810ae40:	d32c      	bcc.n	810ae9c <quorem+0xf4>
 810ae42:	613c      	str	r4, [r7, #16]
 810ae44:	4638      	mov	r0, r7
 810ae46:	f001 ff13 	bl	810cc70 <__mcmp>
 810ae4a:	2800      	cmp	r0, #0
 810ae4c:	db22      	blt.n	810ae94 <quorem+0xec>
 810ae4e:	3601      	adds	r6, #1
 810ae50:	4629      	mov	r1, r5
 810ae52:	2000      	movs	r0, #0
 810ae54:	f858 2b04 	ldr.w	r2, [r8], #4
 810ae58:	f8d1 c000 	ldr.w	ip, [r1]
 810ae5c:	b293      	uxth	r3, r2
 810ae5e:	1ac3      	subs	r3, r0, r3
 810ae60:	0c12      	lsrs	r2, r2, #16
 810ae62:	fa13 f38c 	uxtah	r3, r3, ip
 810ae66:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 810ae6a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810ae6e:	b29b      	uxth	r3, r3
 810ae70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810ae74:	45c1      	cmp	r9, r8
 810ae76:	f841 3b04 	str.w	r3, [r1], #4
 810ae7a:	ea4f 4022 	mov.w	r0, r2, asr #16
 810ae7e:	d2e9      	bcs.n	810ae54 <quorem+0xac>
 810ae80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810ae84:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810ae88:	b922      	cbnz	r2, 810ae94 <quorem+0xec>
 810ae8a:	3b04      	subs	r3, #4
 810ae8c:	429d      	cmp	r5, r3
 810ae8e:	461a      	mov	r2, r3
 810ae90:	d30a      	bcc.n	810aea8 <quorem+0x100>
 810ae92:	613c      	str	r4, [r7, #16]
 810ae94:	4630      	mov	r0, r6
 810ae96:	b003      	add	sp, #12
 810ae98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810ae9c:	6812      	ldr	r2, [r2, #0]
 810ae9e:	3b04      	subs	r3, #4
 810aea0:	2a00      	cmp	r2, #0
 810aea2:	d1ce      	bne.n	810ae42 <quorem+0x9a>
 810aea4:	3c01      	subs	r4, #1
 810aea6:	e7c9      	b.n	810ae3c <quorem+0x94>
 810aea8:	6812      	ldr	r2, [r2, #0]
 810aeaa:	3b04      	subs	r3, #4
 810aeac:	2a00      	cmp	r2, #0
 810aeae:	d1f0      	bne.n	810ae92 <quorem+0xea>
 810aeb0:	3c01      	subs	r4, #1
 810aeb2:	e7eb      	b.n	810ae8c <quorem+0xe4>
 810aeb4:	2000      	movs	r0, #0
 810aeb6:	e7ee      	b.n	810ae96 <quorem+0xee>

0810aeb8 <_dtoa_r>:
 810aeb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810aebc:	ed2d 8b04 	vpush	{d8-d9}
 810aec0:	69c5      	ldr	r5, [r0, #28]
 810aec2:	b093      	sub	sp, #76	; 0x4c
 810aec4:	ed8d 0b02 	vstr	d0, [sp, #8]
 810aec8:	ec57 6b10 	vmov	r6, r7, d0
 810aecc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 810aed0:	9107      	str	r1, [sp, #28]
 810aed2:	4604      	mov	r4, r0
 810aed4:	920a      	str	r2, [sp, #40]	; 0x28
 810aed6:	930d      	str	r3, [sp, #52]	; 0x34
 810aed8:	b975      	cbnz	r5, 810aef8 <_dtoa_r+0x40>
 810aeda:	2010      	movs	r0, #16
 810aedc:	f001 fa8e 	bl	810c3fc <malloc>
 810aee0:	4602      	mov	r2, r0
 810aee2:	61e0      	str	r0, [r4, #28]
 810aee4:	b920      	cbnz	r0, 810aef0 <_dtoa_r+0x38>
 810aee6:	4bae      	ldr	r3, [pc, #696]	; (810b1a0 <_dtoa_r+0x2e8>)
 810aee8:	21ef      	movs	r1, #239	; 0xef
 810aeea:	48ae      	ldr	r0, [pc, #696]	; (810b1a4 <_dtoa_r+0x2ec>)
 810aeec:	f7ff ff3e 	bl	810ad6c <__assert_func>
 810aef0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 810aef4:	6005      	str	r5, [r0, #0]
 810aef6:	60c5      	str	r5, [r0, #12]
 810aef8:	69e3      	ldr	r3, [r4, #28]
 810aefa:	6819      	ldr	r1, [r3, #0]
 810aefc:	b151      	cbz	r1, 810af14 <_dtoa_r+0x5c>
 810aefe:	685a      	ldr	r2, [r3, #4]
 810af00:	604a      	str	r2, [r1, #4]
 810af02:	2301      	movs	r3, #1
 810af04:	4093      	lsls	r3, r2
 810af06:	608b      	str	r3, [r1, #8]
 810af08:	4620      	mov	r0, r4
 810af0a:	f001 fc2b 	bl	810c764 <_Bfree>
 810af0e:	69e3      	ldr	r3, [r4, #28]
 810af10:	2200      	movs	r2, #0
 810af12:	601a      	str	r2, [r3, #0]
 810af14:	1e3b      	subs	r3, r7, #0
 810af16:	bfbb      	ittet	lt
 810af18:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 810af1c:	9303      	strlt	r3, [sp, #12]
 810af1e:	2300      	movge	r3, #0
 810af20:	2201      	movlt	r2, #1
 810af22:	bfac      	ite	ge
 810af24:	f8c8 3000 	strge.w	r3, [r8]
 810af28:	f8c8 2000 	strlt.w	r2, [r8]
 810af2c:	4b9e      	ldr	r3, [pc, #632]	; (810b1a8 <_dtoa_r+0x2f0>)
 810af2e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 810af32:	ea33 0308 	bics.w	r3, r3, r8
 810af36:	d11b      	bne.n	810af70 <_dtoa_r+0xb8>
 810af38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810af3a:	f242 730f 	movw	r3, #9999	; 0x270f
 810af3e:	6013      	str	r3, [r2, #0]
 810af40:	f3c8 0313 	ubfx	r3, r8, #0, #20
 810af44:	4333      	orrs	r3, r6
 810af46:	f000 8593 	beq.w	810ba70 <_dtoa_r+0xbb8>
 810af4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810af4c:	b963      	cbnz	r3, 810af68 <_dtoa_r+0xb0>
 810af4e:	4b97      	ldr	r3, [pc, #604]	; (810b1ac <_dtoa_r+0x2f4>)
 810af50:	e027      	b.n	810afa2 <_dtoa_r+0xea>
 810af52:	4b97      	ldr	r3, [pc, #604]	; (810b1b0 <_dtoa_r+0x2f8>)
 810af54:	9300      	str	r3, [sp, #0]
 810af56:	3308      	adds	r3, #8
 810af58:	9a21      	ldr	r2, [sp, #132]	; 0x84
 810af5a:	6013      	str	r3, [r2, #0]
 810af5c:	9800      	ldr	r0, [sp, #0]
 810af5e:	b013      	add	sp, #76	; 0x4c
 810af60:	ecbd 8b04 	vpop	{d8-d9}
 810af64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810af68:	4b90      	ldr	r3, [pc, #576]	; (810b1ac <_dtoa_r+0x2f4>)
 810af6a:	9300      	str	r3, [sp, #0]
 810af6c:	3303      	adds	r3, #3
 810af6e:	e7f3      	b.n	810af58 <_dtoa_r+0xa0>
 810af70:	ed9d 7b02 	vldr	d7, [sp, #8]
 810af74:	2200      	movs	r2, #0
 810af76:	ec51 0b17 	vmov	r0, r1, d7
 810af7a:	eeb0 8a47 	vmov.f32	s16, s14
 810af7e:	eef0 8a67 	vmov.f32	s17, s15
 810af82:	2300      	movs	r3, #0
 810af84:	f7f5 fe28 	bl	8100bd8 <__aeabi_dcmpeq>
 810af88:	4681      	mov	r9, r0
 810af8a:	b160      	cbz	r0, 810afa6 <_dtoa_r+0xee>
 810af8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810af8e:	2301      	movs	r3, #1
 810af90:	6013      	str	r3, [r2, #0]
 810af92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810af94:	2b00      	cmp	r3, #0
 810af96:	f000 8568 	beq.w	810ba6a <_dtoa_r+0xbb2>
 810af9a:	4b86      	ldr	r3, [pc, #536]	; (810b1b4 <_dtoa_r+0x2fc>)
 810af9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 810af9e:	6013      	str	r3, [r2, #0]
 810afa0:	3b01      	subs	r3, #1
 810afa2:	9300      	str	r3, [sp, #0]
 810afa4:	e7da      	b.n	810af5c <_dtoa_r+0xa4>
 810afa6:	aa10      	add	r2, sp, #64	; 0x40
 810afa8:	a911      	add	r1, sp, #68	; 0x44
 810afaa:	4620      	mov	r0, r4
 810afac:	eeb0 0a48 	vmov.f32	s0, s16
 810afb0:	eef0 0a68 	vmov.f32	s1, s17
 810afb4:	f001 ff72 	bl	810ce9c <__d2b>
 810afb8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 810afbc:	4682      	mov	sl, r0
 810afbe:	2d00      	cmp	r5, #0
 810afc0:	d07f      	beq.n	810b0c2 <_dtoa_r+0x20a>
 810afc2:	ee18 3a90 	vmov	r3, s17
 810afc6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810afca:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 810afce:	ec51 0b18 	vmov	r0, r1, d8
 810afd2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 810afd6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 810afda:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 810afde:	4619      	mov	r1, r3
 810afe0:	2200      	movs	r2, #0
 810afe2:	4b75      	ldr	r3, [pc, #468]	; (810b1b8 <_dtoa_r+0x300>)
 810afe4:	f7f5 f9d8 	bl	8100398 <__aeabi_dsub>
 810afe8:	a367      	add	r3, pc, #412	; (adr r3, 810b188 <_dtoa_r+0x2d0>)
 810afea:	e9d3 2300 	ldrd	r2, r3, [r3]
 810afee:	f7f5 fb8b 	bl	8100708 <__aeabi_dmul>
 810aff2:	a367      	add	r3, pc, #412	; (adr r3, 810b190 <_dtoa_r+0x2d8>)
 810aff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810aff8:	f7f5 f9d0 	bl	810039c <__adddf3>
 810affc:	4606      	mov	r6, r0
 810affe:	4628      	mov	r0, r5
 810b000:	460f      	mov	r7, r1
 810b002:	f7f5 fb17 	bl	8100634 <__aeabi_i2d>
 810b006:	a364      	add	r3, pc, #400	; (adr r3, 810b198 <_dtoa_r+0x2e0>)
 810b008:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b00c:	f7f5 fb7c 	bl	8100708 <__aeabi_dmul>
 810b010:	4602      	mov	r2, r0
 810b012:	460b      	mov	r3, r1
 810b014:	4630      	mov	r0, r6
 810b016:	4639      	mov	r1, r7
 810b018:	f7f5 f9c0 	bl	810039c <__adddf3>
 810b01c:	4606      	mov	r6, r0
 810b01e:	460f      	mov	r7, r1
 810b020:	f7f5 fe22 	bl	8100c68 <__aeabi_d2iz>
 810b024:	2200      	movs	r2, #0
 810b026:	4683      	mov	fp, r0
 810b028:	2300      	movs	r3, #0
 810b02a:	4630      	mov	r0, r6
 810b02c:	4639      	mov	r1, r7
 810b02e:	f7f5 fddd 	bl	8100bec <__aeabi_dcmplt>
 810b032:	b148      	cbz	r0, 810b048 <_dtoa_r+0x190>
 810b034:	4658      	mov	r0, fp
 810b036:	f7f5 fafd 	bl	8100634 <__aeabi_i2d>
 810b03a:	4632      	mov	r2, r6
 810b03c:	463b      	mov	r3, r7
 810b03e:	f7f5 fdcb 	bl	8100bd8 <__aeabi_dcmpeq>
 810b042:	b908      	cbnz	r0, 810b048 <_dtoa_r+0x190>
 810b044:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 810b048:	f1bb 0f16 	cmp.w	fp, #22
 810b04c:	d857      	bhi.n	810b0fe <_dtoa_r+0x246>
 810b04e:	4b5b      	ldr	r3, [pc, #364]	; (810b1bc <_dtoa_r+0x304>)
 810b050:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 810b054:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b058:	ec51 0b18 	vmov	r0, r1, d8
 810b05c:	f7f5 fdc6 	bl	8100bec <__aeabi_dcmplt>
 810b060:	2800      	cmp	r0, #0
 810b062:	d04e      	beq.n	810b102 <_dtoa_r+0x24a>
 810b064:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 810b068:	2300      	movs	r3, #0
 810b06a:	930c      	str	r3, [sp, #48]	; 0x30
 810b06c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 810b06e:	1b5b      	subs	r3, r3, r5
 810b070:	1e5a      	subs	r2, r3, #1
 810b072:	bf45      	ittet	mi
 810b074:	f1c3 0301 	rsbmi	r3, r3, #1
 810b078:	9305      	strmi	r3, [sp, #20]
 810b07a:	2300      	movpl	r3, #0
 810b07c:	2300      	movmi	r3, #0
 810b07e:	9206      	str	r2, [sp, #24]
 810b080:	bf54      	ite	pl
 810b082:	9305      	strpl	r3, [sp, #20]
 810b084:	9306      	strmi	r3, [sp, #24]
 810b086:	f1bb 0f00 	cmp.w	fp, #0
 810b08a:	db3c      	blt.n	810b106 <_dtoa_r+0x24e>
 810b08c:	9b06      	ldr	r3, [sp, #24]
 810b08e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 810b092:	445b      	add	r3, fp
 810b094:	9306      	str	r3, [sp, #24]
 810b096:	2300      	movs	r3, #0
 810b098:	9308      	str	r3, [sp, #32]
 810b09a:	9b07      	ldr	r3, [sp, #28]
 810b09c:	2b09      	cmp	r3, #9
 810b09e:	d868      	bhi.n	810b172 <_dtoa_r+0x2ba>
 810b0a0:	2b05      	cmp	r3, #5
 810b0a2:	bfc4      	itt	gt
 810b0a4:	3b04      	subgt	r3, #4
 810b0a6:	9307      	strgt	r3, [sp, #28]
 810b0a8:	9b07      	ldr	r3, [sp, #28]
 810b0aa:	f1a3 0302 	sub.w	r3, r3, #2
 810b0ae:	bfcc      	ite	gt
 810b0b0:	2500      	movgt	r5, #0
 810b0b2:	2501      	movle	r5, #1
 810b0b4:	2b03      	cmp	r3, #3
 810b0b6:	f200 8085 	bhi.w	810b1c4 <_dtoa_r+0x30c>
 810b0ba:	e8df f003 	tbb	[pc, r3]
 810b0be:	3b2e      	.short	0x3b2e
 810b0c0:	5839      	.short	0x5839
 810b0c2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 810b0c6:	441d      	add	r5, r3
 810b0c8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 810b0cc:	2b20      	cmp	r3, #32
 810b0ce:	bfc1      	itttt	gt
 810b0d0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 810b0d4:	fa08 f803 	lslgt.w	r8, r8, r3
 810b0d8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 810b0dc:	fa26 f303 	lsrgt.w	r3, r6, r3
 810b0e0:	bfd6      	itet	le
 810b0e2:	f1c3 0320 	rsble	r3, r3, #32
 810b0e6:	ea48 0003 	orrgt.w	r0, r8, r3
 810b0ea:	fa06 f003 	lslle.w	r0, r6, r3
 810b0ee:	f7f5 fa91 	bl	8100614 <__aeabi_ui2d>
 810b0f2:	2201      	movs	r2, #1
 810b0f4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 810b0f8:	3d01      	subs	r5, #1
 810b0fa:	920e      	str	r2, [sp, #56]	; 0x38
 810b0fc:	e76f      	b.n	810afde <_dtoa_r+0x126>
 810b0fe:	2301      	movs	r3, #1
 810b100:	e7b3      	b.n	810b06a <_dtoa_r+0x1b2>
 810b102:	900c      	str	r0, [sp, #48]	; 0x30
 810b104:	e7b2      	b.n	810b06c <_dtoa_r+0x1b4>
 810b106:	9b05      	ldr	r3, [sp, #20]
 810b108:	eba3 030b 	sub.w	r3, r3, fp
 810b10c:	9305      	str	r3, [sp, #20]
 810b10e:	f1cb 0300 	rsb	r3, fp, #0
 810b112:	9308      	str	r3, [sp, #32]
 810b114:	2300      	movs	r3, #0
 810b116:	930b      	str	r3, [sp, #44]	; 0x2c
 810b118:	e7bf      	b.n	810b09a <_dtoa_r+0x1e2>
 810b11a:	2300      	movs	r3, #0
 810b11c:	9309      	str	r3, [sp, #36]	; 0x24
 810b11e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b120:	2b00      	cmp	r3, #0
 810b122:	dc52      	bgt.n	810b1ca <_dtoa_r+0x312>
 810b124:	2301      	movs	r3, #1
 810b126:	9301      	str	r3, [sp, #4]
 810b128:	9304      	str	r3, [sp, #16]
 810b12a:	461a      	mov	r2, r3
 810b12c:	920a      	str	r2, [sp, #40]	; 0x28
 810b12e:	e00b      	b.n	810b148 <_dtoa_r+0x290>
 810b130:	2301      	movs	r3, #1
 810b132:	e7f3      	b.n	810b11c <_dtoa_r+0x264>
 810b134:	2300      	movs	r3, #0
 810b136:	9309      	str	r3, [sp, #36]	; 0x24
 810b138:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b13a:	445b      	add	r3, fp
 810b13c:	9301      	str	r3, [sp, #4]
 810b13e:	3301      	adds	r3, #1
 810b140:	2b01      	cmp	r3, #1
 810b142:	9304      	str	r3, [sp, #16]
 810b144:	bfb8      	it	lt
 810b146:	2301      	movlt	r3, #1
 810b148:	69e0      	ldr	r0, [r4, #28]
 810b14a:	2100      	movs	r1, #0
 810b14c:	2204      	movs	r2, #4
 810b14e:	f102 0614 	add.w	r6, r2, #20
 810b152:	429e      	cmp	r6, r3
 810b154:	d93d      	bls.n	810b1d2 <_dtoa_r+0x31a>
 810b156:	6041      	str	r1, [r0, #4]
 810b158:	4620      	mov	r0, r4
 810b15a:	f001 fac3 	bl	810c6e4 <_Balloc>
 810b15e:	9000      	str	r0, [sp, #0]
 810b160:	2800      	cmp	r0, #0
 810b162:	d139      	bne.n	810b1d8 <_dtoa_r+0x320>
 810b164:	4b16      	ldr	r3, [pc, #88]	; (810b1c0 <_dtoa_r+0x308>)
 810b166:	4602      	mov	r2, r0
 810b168:	f240 11af 	movw	r1, #431	; 0x1af
 810b16c:	e6bd      	b.n	810aeea <_dtoa_r+0x32>
 810b16e:	2301      	movs	r3, #1
 810b170:	e7e1      	b.n	810b136 <_dtoa_r+0x27e>
 810b172:	2501      	movs	r5, #1
 810b174:	2300      	movs	r3, #0
 810b176:	9307      	str	r3, [sp, #28]
 810b178:	9509      	str	r5, [sp, #36]	; 0x24
 810b17a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 810b17e:	9301      	str	r3, [sp, #4]
 810b180:	9304      	str	r3, [sp, #16]
 810b182:	2200      	movs	r2, #0
 810b184:	2312      	movs	r3, #18
 810b186:	e7d1      	b.n	810b12c <_dtoa_r+0x274>
 810b188:	636f4361 	.word	0x636f4361
 810b18c:	3fd287a7 	.word	0x3fd287a7
 810b190:	8b60c8b3 	.word	0x8b60c8b3
 810b194:	3fc68a28 	.word	0x3fc68a28
 810b198:	509f79fb 	.word	0x509f79fb
 810b19c:	3fd34413 	.word	0x3fd34413
 810b1a0:	0810e7c9 	.word	0x0810e7c9
 810b1a4:	0810e9e2 	.word	0x0810e9e2
 810b1a8:	7ff00000 	.word	0x7ff00000
 810b1ac:	0810e9de 	.word	0x0810e9de
 810b1b0:	0810e9d5 	.word	0x0810e9d5
 810b1b4:	0810e7a1 	.word	0x0810e7a1
 810b1b8:	3ff80000 	.word	0x3ff80000
 810b1bc:	0810eb40 	.word	0x0810eb40
 810b1c0:	0810ea3a 	.word	0x0810ea3a
 810b1c4:	2301      	movs	r3, #1
 810b1c6:	9309      	str	r3, [sp, #36]	; 0x24
 810b1c8:	e7d7      	b.n	810b17a <_dtoa_r+0x2c2>
 810b1ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b1cc:	9301      	str	r3, [sp, #4]
 810b1ce:	9304      	str	r3, [sp, #16]
 810b1d0:	e7ba      	b.n	810b148 <_dtoa_r+0x290>
 810b1d2:	3101      	adds	r1, #1
 810b1d4:	0052      	lsls	r2, r2, #1
 810b1d6:	e7ba      	b.n	810b14e <_dtoa_r+0x296>
 810b1d8:	69e3      	ldr	r3, [r4, #28]
 810b1da:	9a00      	ldr	r2, [sp, #0]
 810b1dc:	601a      	str	r2, [r3, #0]
 810b1de:	9b04      	ldr	r3, [sp, #16]
 810b1e0:	2b0e      	cmp	r3, #14
 810b1e2:	f200 80a8 	bhi.w	810b336 <_dtoa_r+0x47e>
 810b1e6:	2d00      	cmp	r5, #0
 810b1e8:	f000 80a5 	beq.w	810b336 <_dtoa_r+0x47e>
 810b1ec:	f1bb 0f00 	cmp.w	fp, #0
 810b1f0:	dd38      	ble.n	810b264 <_dtoa_r+0x3ac>
 810b1f2:	4bc0      	ldr	r3, [pc, #768]	; (810b4f4 <_dtoa_r+0x63c>)
 810b1f4:	f00b 020f 	and.w	r2, fp, #15
 810b1f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810b1fc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 810b200:	e9d3 6700 	ldrd	r6, r7, [r3]
 810b204:	ea4f 182b 	mov.w	r8, fp, asr #4
 810b208:	d019      	beq.n	810b23e <_dtoa_r+0x386>
 810b20a:	4bbb      	ldr	r3, [pc, #748]	; (810b4f8 <_dtoa_r+0x640>)
 810b20c:	ec51 0b18 	vmov	r0, r1, d8
 810b210:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 810b214:	f7f5 fba2 	bl	810095c <__aeabi_ddiv>
 810b218:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810b21c:	f008 080f 	and.w	r8, r8, #15
 810b220:	2503      	movs	r5, #3
 810b222:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 810b4f8 <_dtoa_r+0x640>
 810b226:	f1b8 0f00 	cmp.w	r8, #0
 810b22a:	d10a      	bne.n	810b242 <_dtoa_r+0x38a>
 810b22c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810b230:	4632      	mov	r2, r6
 810b232:	463b      	mov	r3, r7
 810b234:	f7f5 fb92 	bl	810095c <__aeabi_ddiv>
 810b238:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810b23c:	e02b      	b.n	810b296 <_dtoa_r+0x3de>
 810b23e:	2502      	movs	r5, #2
 810b240:	e7ef      	b.n	810b222 <_dtoa_r+0x36a>
 810b242:	f018 0f01 	tst.w	r8, #1
 810b246:	d008      	beq.n	810b25a <_dtoa_r+0x3a2>
 810b248:	4630      	mov	r0, r6
 810b24a:	4639      	mov	r1, r7
 810b24c:	e9d9 2300 	ldrd	r2, r3, [r9]
 810b250:	f7f5 fa5a 	bl	8100708 <__aeabi_dmul>
 810b254:	3501      	adds	r5, #1
 810b256:	4606      	mov	r6, r0
 810b258:	460f      	mov	r7, r1
 810b25a:	ea4f 0868 	mov.w	r8, r8, asr #1
 810b25e:	f109 0908 	add.w	r9, r9, #8
 810b262:	e7e0      	b.n	810b226 <_dtoa_r+0x36e>
 810b264:	f000 809f 	beq.w	810b3a6 <_dtoa_r+0x4ee>
 810b268:	f1cb 0600 	rsb	r6, fp, #0
 810b26c:	4ba1      	ldr	r3, [pc, #644]	; (810b4f4 <_dtoa_r+0x63c>)
 810b26e:	4fa2      	ldr	r7, [pc, #648]	; (810b4f8 <_dtoa_r+0x640>)
 810b270:	f006 020f 	and.w	r2, r6, #15
 810b274:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810b278:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b27c:	ec51 0b18 	vmov	r0, r1, d8
 810b280:	f7f5 fa42 	bl	8100708 <__aeabi_dmul>
 810b284:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810b288:	1136      	asrs	r6, r6, #4
 810b28a:	2300      	movs	r3, #0
 810b28c:	2502      	movs	r5, #2
 810b28e:	2e00      	cmp	r6, #0
 810b290:	d17e      	bne.n	810b390 <_dtoa_r+0x4d8>
 810b292:	2b00      	cmp	r3, #0
 810b294:	d1d0      	bne.n	810b238 <_dtoa_r+0x380>
 810b296:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810b298:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 810b29c:	2b00      	cmp	r3, #0
 810b29e:	f000 8084 	beq.w	810b3aa <_dtoa_r+0x4f2>
 810b2a2:	4b96      	ldr	r3, [pc, #600]	; (810b4fc <_dtoa_r+0x644>)
 810b2a4:	2200      	movs	r2, #0
 810b2a6:	4640      	mov	r0, r8
 810b2a8:	4649      	mov	r1, r9
 810b2aa:	f7f5 fc9f 	bl	8100bec <__aeabi_dcmplt>
 810b2ae:	2800      	cmp	r0, #0
 810b2b0:	d07b      	beq.n	810b3aa <_dtoa_r+0x4f2>
 810b2b2:	9b04      	ldr	r3, [sp, #16]
 810b2b4:	2b00      	cmp	r3, #0
 810b2b6:	d078      	beq.n	810b3aa <_dtoa_r+0x4f2>
 810b2b8:	9b01      	ldr	r3, [sp, #4]
 810b2ba:	2b00      	cmp	r3, #0
 810b2bc:	dd39      	ble.n	810b332 <_dtoa_r+0x47a>
 810b2be:	4b90      	ldr	r3, [pc, #576]	; (810b500 <_dtoa_r+0x648>)
 810b2c0:	2200      	movs	r2, #0
 810b2c2:	4640      	mov	r0, r8
 810b2c4:	4649      	mov	r1, r9
 810b2c6:	f7f5 fa1f 	bl	8100708 <__aeabi_dmul>
 810b2ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810b2ce:	9e01      	ldr	r6, [sp, #4]
 810b2d0:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 810b2d4:	3501      	adds	r5, #1
 810b2d6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 810b2da:	4628      	mov	r0, r5
 810b2dc:	f7f5 f9aa 	bl	8100634 <__aeabi_i2d>
 810b2e0:	4642      	mov	r2, r8
 810b2e2:	464b      	mov	r3, r9
 810b2e4:	f7f5 fa10 	bl	8100708 <__aeabi_dmul>
 810b2e8:	4b86      	ldr	r3, [pc, #536]	; (810b504 <_dtoa_r+0x64c>)
 810b2ea:	2200      	movs	r2, #0
 810b2ec:	f7f5 f856 	bl	810039c <__adddf3>
 810b2f0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 810b2f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810b2f8:	9303      	str	r3, [sp, #12]
 810b2fa:	2e00      	cmp	r6, #0
 810b2fc:	d158      	bne.n	810b3b0 <_dtoa_r+0x4f8>
 810b2fe:	4b82      	ldr	r3, [pc, #520]	; (810b508 <_dtoa_r+0x650>)
 810b300:	2200      	movs	r2, #0
 810b302:	4640      	mov	r0, r8
 810b304:	4649      	mov	r1, r9
 810b306:	f7f5 f847 	bl	8100398 <__aeabi_dsub>
 810b30a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810b30e:	4680      	mov	r8, r0
 810b310:	4689      	mov	r9, r1
 810b312:	f7f5 fc89 	bl	8100c28 <__aeabi_dcmpgt>
 810b316:	2800      	cmp	r0, #0
 810b318:	f040 8296 	bne.w	810b848 <_dtoa_r+0x990>
 810b31c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 810b320:	4640      	mov	r0, r8
 810b322:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810b326:	4649      	mov	r1, r9
 810b328:	f7f5 fc60 	bl	8100bec <__aeabi_dcmplt>
 810b32c:	2800      	cmp	r0, #0
 810b32e:	f040 8289 	bne.w	810b844 <_dtoa_r+0x98c>
 810b332:	ed8d 8b02 	vstr	d8, [sp, #8]
 810b336:	9b11      	ldr	r3, [sp, #68]	; 0x44
 810b338:	2b00      	cmp	r3, #0
 810b33a:	f2c0 814e 	blt.w	810b5da <_dtoa_r+0x722>
 810b33e:	f1bb 0f0e 	cmp.w	fp, #14
 810b342:	f300 814a 	bgt.w	810b5da <_dtoa_r+0x722>
 810b346:	4b6b      	ldr	r3, [pc, #428]	; (810b4f4 <_dtoa_r+0x63c>)
 810b348:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 810b34c:	e9d3 8900 	ldrd	r8, r9, [r3]
 810b350:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b352:	2b00      	cmp	r3, #0
 810b354:	f280 80dc 	bge.w	810b510 <_dtoa_r+0x658>
 810b358:	9b04      	ldr	r3, [sp, #16]
 810b35a:	2b00      	cmp	r3, #0
 810b35c:	f300 80d8 	bgt.w	810b510 <_dtoa_r+0x658>
 810b360:	f040 826f 	bne.w	810b842 <_dtoa_r+0x98a>
 810b364:	4b68      	ldr	r3, [pc, #416]	; (810b508 <_dtoa_r+0x650>)
 810b366:	2200      	movs	r2, #0
 810b368:	4640      	mov	r0, r8
 810b36a:	4649      	mov	r1, r9
 810b36c:	f7f5 f9cc 	bl	8100708 <__aeabi_dmul>
 810b370:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810b374:	f7f5 fc4e 	bl	8100c14 <__aeabi_dcmpge>
 810b378:	9e04      	ldr	r6, [sp, #16]
 810b37a:	4637      	mov	r7, r6
 810b37c:	2800      	cmp	r0, #0
 810b37e:	f040 8245 	bne.w	810b80c <_dtoa_r+0x954>
 810b382:	9d00      	ldr	r5, [sp, #0]
 810b384:	2331      	movs	r3, #49	; 0x31
 810b386:	f805 3b01 	strb.w	r3, [r5], #1
 810b38a:	f10b 0b01 	add.w	fp, fp, #1
 810b38e:	e241      	b.n	810b814 <_dtoa_r+0x95c>
 810b390:	07f2      	lsls	r2, r6, #31
 810b392:	d505      	bpl.n	810b3a0 <_dtoa_r+0x4e8>
 810b394:	e9d7 2300 	ldrd	r2, r3, [r7]
 810b398:	f7f5 f9b6 	bl	8100708 <__aeabi_dmul>
 810b39c:	3501      	adds	r5, #1
 810b39e:	2301      	movs	r3, #1
 810b3a0:	1076      	asrs	r6, r6, #1
 810b3a2:	3708      	adds	r7, #8
 810b3a4:	e773      	b.n	810b28e <_dtoa_r+0x3d6>
 810b3a6:	2502      	movs	r5, #2
 810b3a8:	e775      	b.n	810b296 <_dtoa_r+0x3de>
 810b3aa:	9e04      	ldr	r6, [sp, #16]
 810b3ac:	465f      	mov	r7, fp
 810b3ae:	e792      	b.n	810b2d6 <_dtoa_r+0x41e>
 810b3b0:	9900      	ldr	r1, [sp, #0]
 810b3b2:	4b50      	ldr	r3, [pc, #320]	; (810b4f4 <_dtoa_r+0x63c>)
 810b3b4:	ed9d 7b02 	vldr	d7, [sp, #8]
 810b3b8:	4431      	add	r1, r6
 810b3ba:	9102      	str	r1, [sp, #8]
 810b3bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 810b3be:	eeb0 9a47 	vmov.f32	s18, s14
 810b3c2:	eef0 9a67 	vmov.f32	s19, s15
 810b3c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 810b3ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 810b3ce:	2900      	cmp	r1, #0
 810b3d0:	d044      	beq.n	810b45c <_dtoa_r+0x5a4>
 810b3d2:	494e      	ldr	r1, [pc, #312]	; (810b50c <_dtoa_r+0x654>)
 810b3d4:	2000      	movs	r0, #0
 810b3d6:	f7f5 fac1 	bl	810095c <__aeabi_ddiv>
 810b3da:	ec53 2b19 	vmov	r2, r3, d9
 810b3de:	f7f4 ffdb 	bl	8100398 <__aeabi_dsub>
 810b3e2:	9d00      	ldr	r5, [sp, #0]
 810b3e4:	ec41 0b19 	vmov	d9, r0, r1
 810b3e8:	4649      	mov	r1, r9
 810b3ea:	4640      	mov	r0, r8
 810b3ec:	f7f5 fc3c 	bl	8100c68 <__aeabi_d2iz>
 810b3f0:	4606      	mov	r6, r0
 810b3f2:	f7f5 f91f 	bl	8100634 <__aeabi_i2d>
 810b3f6:	4602      	mov	r2, r0
 810b3f8:	460b      	mov	r3, r1
 810b3fa:	4640      	mov	r0, r8
 810b3fc:	4649      	mov	r1, r9
 810b3fe:	f7f4 ffcb 	bl	8100398 <__aeabi_dsub>
 810b402:	3630      	adds	r6, #48	; 0x30
 810b404:	f805 6b01 	strb.w	r6, [r5], #1
 810b408:	ec53 2b19 	vmov	r2, r3, d9
 810b40c:	4680      	mov	r8, r0
 810b40e:	4689      	mov	r9, r1
 810b410:	f7f5 fbec 	bl	8100bec <__aeabi_dcmplt>
 810b414:	2800      	cmp	r0, #0
 810b416:	d164      	bne.n	810b4e2 <_dtoa_r+0x62a>
 810b418:	4642      	mov	r2, r8
 810b41a:	464b      	mov	r3, r9
 810b41c:	4937      	ldr	r1, [pc, #220]	; (810b4fc <_dtoa_r+0x644>)
 810b41e:	2000      	movs	r0, #0
 810b420:	f7f4 ffba 	bl	8100398 <__aeabi_dsub>
 810b424:	ec53 2b19 	vmov	r2, r3, d9
 810b428:	f7f5 fbe0 	bl	8100bec <__aeabi_dcmplt>
 810b42c:	2800      	cmp	r0, #0
 810b42e:	f040 80b6 	bne.w	810b59e <_dtoa_r+0x6e6>
 810b432:	9b02      	ldr	r3, [sp, #8]
 810b434:	429d      	cmp	r5, r3
 810b436:	f43f af7c 	beq.w	810b332 <_dtoa_r+0x47a>
 810b43a:	4b31      	ldr	r3, [pc, #196]	; (810b500 <_dtoa_r+0x648>)
 810b43c:	ec51 0b19 	vmov	r0, r1, d9
 810b440:	2200      	movs	r2, #0
 810b442:	f7f5 f961 	bl	8100708 <__aeabi_dmul>
 810b446:	4b2e      	ldr	r3, [pc, #184]	; (810b500 <_dtoa_r+0x648>)
 810b448:	ec41 0b19 	vmov	d9, r0, r1
 810b44c:	2200      	movs	r2, #0
 810b44e:	4640      	mov	r0, r8
 810b450:	4649      	mov	r1, r9
 810b452:	f7f5 f959 	bl	8100708 <__aeabi_dmul>
 810b456:	4680      	mov	r8, r0
 810b458:	4689      	mov	r9, r1
 810b45a:	e7c5      	b.n	810b3e8 <_dtoa_r+0x530>
 810b45c:	ec51 0b17 	vmov	r0, r1, d7
 810b460:	f7f5 f952 	bl	8100708 <__aeabi_dmul>
 810b464:	9b02      	ldr	r3, [sp, #8]
 810b466:	9d00      	ldr	r5, [sp, #0]
 810b468:	930f      	str	r3, [sp, #60]	; 0x3c
 810b46a:	ec41 0b19 	vmov	d9, r0, r1
 810b46e:	4649      	mov	r1, r9
 810b470:	4640      	mov	r0, r8
 810b472:	f7f5 fbf9 	bl	8100c68 <__aeabi_d2iz>
 810b476:	4606      	mov	r6, r0
 810b478:	f7f5 f8dc 	bl	8100634 <__aeabi_i2d>
 810b47c:	3630      	adds	r6, #48	; 0x30
 810b47e:	4602      	mov	r2, r0
 810b480:	460b      	mov	r3, r1
 810b482:	4640      	mov	r0, r8
 810b484:	4649      	mov	r1, r9
 810b486:	f7f4 ff87 	bl	8100398 <__aeabi_dsub>
 810b48a:	f805 6b01 	strb.w	r6, [r5], #1
 810b48e:	9b02      	ldr	r3, [sp, #8]
 810b490:	429d      	cmp	r5, r3
 810b492:	4680      	mov	r8, r0
 810b494:	4689      	mov	r9, r1
 810b496:	f04f 0200 	mov.w	r2, #0
 810b49a:	d124      	bne.n	810b4e6 <_dtoa_r+0x62e>
 810b49c:	4b1b      	ldr	r3, [pc, #108]	; (810b50c <_dtoa_r+0x654>)
 810b49e:	ec51 0b19 	vmov	r0, r1, d9
 810b4a2:	f7f4 ff7b 	bl	810039c <__adddf3>
 810b4a6:	4602      	mov	r2, r0
 810b4a8:	460b      	mov	r3, r1
 810b4aa:	4640      	mov	r0, r8
 810b4ac:	4649      	mov	r1, r9
 810b4ae:	f7f5 fbbb 	bl	8100c28 <__aeabi_dcmpgt>
 810b4b2:	2800      	cmp	r0, #0
 810b4b4:	d173      	bne.n	810b59e <_dtoa_r+0x6e6>
 810b4b6:	ec53 2b19 	vmov	r2, r3, d9
 810b4ba:	4914      	ldr	r1, [pc, #80]	; (810b50c <_dtoa_r+0x654>)
 810b4bc:	2000      	movs	r0, #0
 810b4be:	f7f4 ff6b 	bl	8100398 <__aeabi_dsub>
 810b4c2:	4602      	mov	r2, r0
 810b4c4:	460b      	mov	r3, r1
 810b4c6:	4640      	mov	r0, r8
 810b4c8:	4649      	mov	r1, r9
 810b4ca:	f7f5 fb8f 	bl	8100bec <__aeabi_dcmplt>
 810b4ce:	2800      	cmp	r0, #0
 810b4d0:	f43f af2f 	beq.w	810b332 <_dtoa_r+0x47a>
 810b4d4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 810b4d6:	1e6b      	subs	r3, r5, #1
 810b4d8:	930f      	str	r3, [sp, #60]	; 0x3c
 810b4da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 810b4de:	2b30      	cmp	r3, #48	; 0x30
 810b4e0:	d0f8      	beq.n	810b4d4 <_dtoa_r+0x61c>
 810b4e2:	46bb      	mov	fp, r7
 810b4e4:	e04a      	b.n	810b57c <_dtoa_r+0x6c4>
 810b4e6:	4b06      	ldr	r3, [pc, #24]	; (810b500 <_dtoa_r+0x648>)
 810b4e8:	f7f5 f90e 	bl	8100708 <__aeabi_dmul>
 810b4ec:	4680      	mov	r8, r0
 810b4ee:	4689      	mov	r9, r1
 810b4f0:	e7bd      	b.n	810b46e <_dtoa_r+0x5b6>
 810b4f2:	bf00      	nop
 810b4f4:	0810eb40 	.word	0x0810eb40
 810b4f8:	0810eb18 	.word	0x0810eb18
 810b4fc:	3ff00000 	.word	0x3ff00000
 810b500:	40240000 	.word	0x40240000
 810b504:	401c0000 	.word	0x401c0000
 810b508:	40140000 	.word	0x40140000
 810b50c:	3fe00000 	.word	0x3fe00000
 810b510:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 810b514:	9d00      	ldr	r5, [sp, #0]
 810b516:	4642      	mov	r2, r8
 810b518:	464b      	mov	r3, r9
 810b51a:	4630      	mov	r0, r6
 810b51c:	4639      	mov	r1, r7
 810b51e:	f7f5 fa1d 	bl	810095c <__aeabi_ddiv>
 810b522:	f7f5 fba1 	bl	8100c68 <__aeabi_d2iz>
 810b526:	9001      	str	r0, [sp, #4]
 810b528:	f7f5 f884 	bl	8100634 <__aeabi_i2d>
 810b52c:	4642      	mov	r2, r8
 810b52e:	464b      	mov	r3, r9
 810b530:	f7f5 f8ea 	bl	8100708 <__aeabi_dmul>
 810b534:	4602      	mov	r2, r0
 810b536:	460b      	mov	r3, r1
 810b538:	4630      	mov	r0, r6
 810b53a:	4639      	mov	r1, r7
 810b53c:	f7f4 ff2c 	bl	8100398 <__aeabi_dsub>
 810b540:	9e01      	ldr	r6, [sp, #4]
 810b542:	9f04      	ldr	r7, [sp, #16]
 810b544:	3630      	adds	r6, #48	; 0x30
 810b546:	f805 6b01 	strb.w	r6, [r5], #1
 810b54a:	9e00      	ldr	r6, [sp, #0]
 810b54c:	1bae      	subs	r6, r5, r6
 810b54e:	42b7      	cmp	r7, r6
 810b550:	4602      	mov	r2, r0
 810b552:	460b      	mov	r3, r1
 810b554:	d134      	bne.n	810b5c0 <_dtoa_r+0x708>
 810b556:	f7f4 ff21 	bl	810039c <__adddf3>
 810b55a:	4642      	mov	r2, r8
 810b55c:	464b      	mov	r3, r9
 810b55e:	4606      	mov	r6, r0
 810b560:	460f      	mov	r7, r1
 810b562:	f7f5 fb61 	bl	8100c28 <__aeabi_dcmpgt>
 810b566:	b9c8      	cbnz	r0, 810b59c <_dtoa_r+0x6e4>
 810b568:	4642      	mov	r2, r8
 810b56a:	464b      	mov	r3, r9
 810b56c:	4630      	mov	r0, r6
 810b56e:	4639      	mov	r1, r7
 810b570:	f7f5 fb32 	bl	8100bd8 <__aeabi_dcmpeq>
 810b574:	b110      	cbz	r0, 810b57c <_dtoa_r+0x6c4>
 810b576:	9b01      	ldr	r3, [sp, #4]
 810b578:	07db      	lsls	r3, r3, #31
 810b57a:	d40f      	bmi.n	810b59c <_dtoa_r+0x6e4>
 810b57c:	4651      	mov	r1, sl
 810b57e:	4620      	mov	r0, r4
 810b580:	f001 f8f0 	bl	810c764 <_Bfree>
 810b584:	2300      	movs	r3, #0
 810b586:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810b588:	702b      	strb	r3, [r5, #0]
 810b58a:	f10b 0301 	add.w	r3, fp, #1
 810b58e:	6013      	str	r3, [r2, #0]
 810b590:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810b592:	2b00      	cmp	r3, #0
 810b594:	f43f ace2 	beq.w	810af5c <_dtoa_r+0xa4>
 810b598:	601d      	str	r5, [r3, #0]
 810b59a:	e4df      	b.n	810af5c <_dtoa_r+0xa4>
 810b59c:	465f      	mov	r7, fp
 810b59e:	462b      	mov	r3, r5
 810b5a0:	461d      	mov	r5, r3
 810b5a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810b5a6:	2a39      	cmp	r2, #57	; 0x39
 810b5a8:	d106      	bne.n	810b5b8 <_dtoa_r+0x700>
 810b5aa:	9a00      	ldr	r2, [sp, #0]
 810b5ac:	429a      	cmp	r2, r3
 810b5ae:	d1f7      	bne.n	810b5a0 <_dtoa_r+0x6e8>
 810b5b0:	9900      	ldr	r1, [sp, #0]
 810b5b2:	2230      	movs	r2, #48	; 0x30
 810b5b4:	3701      	adds	r7, #1
 810b5b6:	700a      	strb	r2, [r1, #0]
 810b5b8:	781a      	ldrb	r2, [r3, #0]
 810b5ba:	3201      	adds	r2, #1
 810b5bc:	701a      	strb	r2, [r3, #0]
 810b5be:	e790      	b.n	810b4e2 <_dtoa_r+0x62a>
 810b5c0:	4ba3      	ldr	r3, [pc, #652]	; (810b850 <_dtoa_r+0x998>)
 810b5c2:	2200      	movs	r2, #0
 810b5c4:	f7f5 f8a0 	bl	8100708 <__aeabi_dmul>
 810b5c8:	2200      	movs	r2, #0
 810b5ca:	2300      	movs	r3, #0
 810b5cc:	4606      	mov	r6, r0
 810b5ce:	460f      	mov	r7, r1
 810b5d0:	f7f5 fb02 	bl	8100bd8 <__aeabi_dcmpeq>
 810b5d4:	2800      	cmp	r0, #0
 810b5d6:	d09e      	beq.n	810b516 <_dtoa_r+0x65e>
 810b5d8:	e7d0      	b.n	810b57c <_dtoa_r+0x6c4>
 810b5da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810b5dc:	2a00      	cmp	r2, #0
 810b5de:	f000 80ca 	beq.w	810b776 <_dtoa_r+0x8be>
 810b5e2:	9a07      	ldr	r2, [sp, #28]
 810b5e4:	2a01      	cmp	r2, #1
 810b5e6:	f300 80ad 	bgt.w	810b744 <_dtoa_r+0x88c>
 810b5ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810b5ec:	2a00      	cmp	r2, #0
 810b5ee:	f000 80a5 	beq.w	810b73c <_dtoa_r+0x884>
 810b5f2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 810b5f6:	9e08      	ldr	r6, [sp, #32]
 810b5f8:	9d05      	ldr	r5, [sp, #20]
 810b5fa:	9a05      	ldr	r2, [sp, #20]
 810b5fc:	441a      	add	r2, r3
 810b5fe:	9205      	str	r2, [sp, #20]
 810b600:	9a06      	ldr	r2, [sp, #24]
 810b602:	2101      	movs	r1, #1
 810b604:	441a      	add	r2, r3
 810b606:	4620      	mov	r0, r4
 810b608:	9206      	str	r2, [sp, #24]
 810b60a:	f001 f9ab 	bl	810c964 <__i2b>
 810b60e:	4607      	mov	r7, r0
 810b610:	b165      	cbz	r5, 810b62c <_dtoa_r+0x774>
 810b612:	9b06      	ldr	r3, [sp, #24]
 810b614:	2b00      	cmp	r3, #0
 810b616:	dd09      	ble.n	810b62c <_dtoa_r+0x774>
 810b618:	42ab      	cmp	r3, r5
 810b61a:	9a05      	ldr	r2, [sp, #20]
 810b61c:	bfa8      	it	ge
 810b61e:	462b      	movge	r3, r5
 810b620:	1ad2      	subs	r2, r2, r3
 810b622:	9205      	str	r2, [sp, #20]
 810b624:	9a06      	ldr	r2, [sp, #24]
 810b626:	1aed      	subs	r5, r5, r3
 810b628:	1ad3      	subs	r3, r2, r3
 810b62a:	9306      	str	r3, [sp, #24]
 810b62c:	9b08      	ldr	r3, [sp, #32]
 810b62e:	b1f3      	cbz	r3, 810b66e <_dtoa_r+0x7b6>
 810b630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810b632:	2b00      	cmp	r3, #0
 810b634:	f000 80a3 	beq.w	810b77e <_dtoa_r+0x8c6>
 810b638:	2e00      	cmp	r6, #0
 810b63a:	dd10      	ble.n	810b65e <_dtoa_r+0x7a6>
 810b63c:	4639      	mov	r1, r7
 810b63e:	4632      	mov	r2, r6
 810b640:	4620      	mov	r0, r4
 810b642:	f001 fa4f 	bl	810cae4 <__pow5mult>
 810b646:	4652      	mov	r2, sl
 810b648:	4601      	mov	r1, r0
 810b64a:	4607      	mov	r7, r0
 810b64c:	4620      	mov	r0, r4
 810b64e:	f001 f99f 	bl	810c990 <__multiply>
 810b652:	4651      	mov	r1, sl
 810b654:	4680      	mov	r8, r0
 810b656:	4620      	mov	r0, r4
 810b658:	f001 f884 	bl	810c764 <_Bfree>
 810b65c:	46c2      	mov	sl, r8
 810b65e:	9b08      	ldr	r3, [sp, #32]
 810b660:	1b9a      	subs	r2, r3, r6
 810b662:	d004      	beq.n	810b66e <_dtoa_r+0x7b6>
 810b664:	4651      	mov	r1, sl
 810b666:	4620      	mov	r0, r4
 810b668:	f001 fa3c 	bl	810cae4 <__pow5mult>
 810b66c:	4682      	mov	sl, r0
 810b66e:	2101      	movs	r1, #1
 810b670:	4620      	mov	r0, r4
 810b672:	f001 f977 	bl	810c964 <__i2b>
 810b676:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810b678:	2b00      	cmp	r3, #0
 810b67a:	4606      	mov	r6, r0
 810b67c:	f340 8081 	ble.w	810b782 <_dtoa_r+0x8ca>
 810b680:	461a      	mov	r2, r3
 810b682:	4601      	mov	r1, r0
 810b684:	4620      	mov	r0, r4
 810b686:	f001 fa2d 	bl	810cae4 <__pow5mult>
 810b68a:	9b07      	ldr	r3, [sp, #28]
 810b68c:	2b01      	cmp	r3, #1
 810b68e:	4606      	mov	r6, r0
 810b690:	dd7a      	ble.n	810b788 <_dtoa_r+0x8d0>
 810b692:	f04f 0800 	mov.w	r8, #0
 810b696:	6933      	ldr	r3, [r6, #16]
 810b698:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 810b69c:	6918      	ldr	r0, [r3, #16]
 810b69e:	f001 f913 	bl	810c8c8 <__hi0bits>
 810b6a2:	f1c0 0020 	rsb	r0, r0, #32
 810b6a6:	9b06      	ldr	r3, [sp, #24]
 810b6a8:	4418      	add	r0, r3
 810b6aa:	f010 001f 	ands.w	r0, r0, #31
 810b6ae:	f000 8094 	beq.w	810b7da <_dtoa_r+0x922>
 810b6b2:	f1c0 0320 	rsb	r3, r0, #32
 810b6b6:	2b04      	cmp	r3, #4
 810b6b8:	f340 8085 	ble.w	810b7c6 <_dtoa_r+0x90e>
 810b6bc:	9b05      	ldr	r3, [sp, #20]
 810b6be:	f1c0 001c 	rsb	r0, r0, #28
 810b6c2:	4403      	add	r3, r0
 810b6c4:	9305      	str	r3, [sp, #20]
 810b6c6:	9b06      	ldr	r3, [sp, #24]
 810b6c8:	4403      	add	r3, r0
 810b6ca:	4405      	add	r5, r0
 810b6cc:	9306      	str	r3, [sp, #24]
 810b6ce:	9b05      	ldr	r3, [sp, #20]
 810b6d0:	2b00      	cmp	r3, #0
 810b6d2:	dd05      	ble.n	810b6e0 <_dtoa_r+0x828>
 810b6d4:	4651      	mov	r1, sl
 810b6d6:	461a      	mov	r2, r3
 810b6d8:	4620      	mov	r0, r4
 810b6da:	f001 fa5d 	bl	810cb98 <__lshift>
 810b6de:	4682      	mov	sl, r0
 810b6e0:	9b06      	ldr	r3, [sp, #24]
 810b6e2:	2b00      	cmp	r3, #0
 810b6e4:	dd05      	ble.n	810b6f2 <_dtoa_r+0x83a>
 810b6e6:	4631      	mov	r1, r6
 810b6e8:	461a      	mov	r2, r3
 810b6ea:	4620      	mov	r0, r4
 810b6ec:	f001 fa54 	bl	810cb98 <__lshift>
 810b6f0:	4606      	mov	r6, r0
 810b6f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810b6f4:	2b00      	cmp	r3, #0
 810b6f6:	d072      	beq.n	810b7de <_dtoa_r+0x926>
 810b6f8:	4631      	mov	r1, r6
 810b6fa:	4650      	mov	r0, sl
 810b6fc:	f001 fab8 	bl	810cc70 <__mcmp>
 810b700:	2800      	cmp	r0, #0
 810b702:	da6c      	bge.n	810b7de <_dtoa_r+0x926>
 810b704:	2300      	movs	r3, #0
 810b706:	4651      	mov	r1, sl
 810b708:	220a      	movs	r2, #10
 810b70a:	4620      	mov	r0, r4
 810b70c:	f001 f84c 	bl	810c7a8 <__multadd>
 810b710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810b712:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 810b716:	4682      	mov	sl, r0
 810b718:	2b00      	cmp	r3, #0
 810b71a:	f000 81b0 	beq.w	810ba7e <_dtoa_r+0xbc6>
 810b71e:	2300      	movs	r3, #0
 810b720:	4639      	mov	r1, r7
 810b722:	220a      	movs	r2, #10
 810b724:	4620      	mov	r0, r4
 810b726:	f001 f83f 	bl	810c7a8 <__multadd>
 810b72a:	9b01      	ldr	r3, [sp, #4]
 810b72c:	2b00      	cmp	r3, #0
 810b72e:	4607      	mov	r7, r0
 810b730:	f300 8096 	bgt.w	810b860 <_dtoa_r+0x9a8>
 810b734:	9b07      	ldr	r3, [sp, #28]
 810b736:	2b02      	cmp	r3, #2
 810b738:	dc59      	bgt.n	810b7ee <_dtoa_r+0x936>
 810b73a:	e091      	b.n	810b860 <_dtoa_r+0x9a8>
 810b73c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 810b73e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 810b742:	e758      	b.n	810b5f6 <_dtoa_r+0x73e>
 810b744:	9b04      	ldr	r3, [sp, #16]
 810b746:	1e5e      	subs	r6, r3, #1
 810b748:	9b08      	ldr	r3, [sp, #32]
 810b74a:	42b3      	cmp	r3, r6
 810b74c:	bfbf      	itttt	lt
 810b74e:	9b08      	ldrlt	r3, [sp, #32]
 810b750:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 810b752:	9608      	strlt	r6, [sp, #32]
 810b754:	1af3      	sublt	r3, r6, r3
 810b756:	bfb4      	ite	lt
 810b758:	18d2      	addlt	r2, r2, r3
 810b75a:	1b9e      	subge	r6, r3, r6
 810b75c:	9b04      	ldr	r3, [sp, #16]
 810b75e:	bfbc      	itt	lt
 810b760:	920b      	strlt	r2, [sp, #44]	; 0x2c
 810b762:	2600      	movlt	r6, #0
 810b764:	2b00      	cmp	r3, #0
 810b766:	bfb7      	itett	lt
 810b768:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 810b76c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 810b770:	1a9d      	sublt	r5, r3, r2
 810b772:	2300      	movlt	r3, #0
 810b774:	e741      	b.n	810b5fa <_dtoa_r+0x742>
 810b776:	9e08      	ldr	r6, [sp, #32]
 810b778:	9d05      	ldr	r5, [sp, #20]
 810b77a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 810b77c:	e748      	b.n	810b610 <_dtoa_r+0x758>
 810b77e:	9a08      	ldr	r2, [sp, #32]
 810b780:	e770      	b.n	810b664 <_dtoa_r+0x7ac>
 810b782:	9b07      	ldr	r3, [sp, #28]
 810b784:	2b01      	cmp	r3, #1
 810b786:	dc19      	bgt.n	810b7bc <_dtoa_r+0x904>
 810b788:	9b02      	ldr	r3, [sp, #8]
 810b78a:	b9bb      	cbnz	r3, 810b7bc <_dtoa_r+0x904>
 810b78c:	9b03      	ldr	r3, [sp, #12]
 810b78e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810b792:	b99b      	cbnz	r3, 810b7bc <_dtoa_r+0x904>
 810b794:	9b03      	ldr	r3, [sp, #12]
 810b796:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 810b79a:	0d1b      	lsrs	r3, r3, #20
 810b79c:	051b      	lsls	r3, r3, #20
 810b79e:	b183      	cbz	r3, 810b7c2 <_dtoa_r+0x90a>
 810b7a0:	9b05      	ldr	r3, [sp, #20]
 810b7a2:	3301      	adds	r3, #1
 810b7a4:	9305      	str	r3, [sp, #20]
 810b7a6:	9b06      	ldr	r3, [sp, #24]
 810b7a8:	3301      	adds	r3, #1
 810b7aa:	9306      	str	r3, [sp, #24]
 810b7ac:	f04f 0801 	mov.w	r8, #1
 810b7b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810b7b2:	2b00      	cmp	r3, #0
 810b7b4:	f47f af6f 	bne.w	810b696 <_dtoa_r+0x7de>
 810b7b8:	2001      	movs	r0, #1
 810b7ba:	e774      	b.n	810b6a6 <_dtoa_r+0x7ee>
 810b7bc:	f04f 0800 	mov.w	r8, #0
 810b7c0:	e7f6      	b.n	810b7b0 <_dtoa_r+0x8f8>
 810b7c2:	4698      	mov	r8, r3
 810b7c4:	e7f4      	b.n	810b7b0 <_dtoa_r+0x8f8>
 810b7c6:	d082      	beq.n	810b6ce <_dtoa_r+0x816>
 810b7c8:	9a05      	ldr	r2, [sp, #20]
 810b7ca:	331c      	adds	r3, #28
 810b7cc:	441a      	add	r2, r3
 810b7ce:	9205      	str	r2, [sp, #20]
 810b7d0:	9a06      	ldr	r2, [sp, #24]
 810b7d2:	441a      	add	r2, r3
 810b7d4:	441d      	add	r5, r3
 810b7d6:	9206      	str	r2, [sp, #24]
 810b7d8:	e779      	b.n	810b6ce <_dtoa_r+0x816>
 810b7da:	4603      	mov	r3, r0
 810b7dc:	e7f4      	b.n	810b7c8 <_dtoa_r+0x910>
 810b7de:	9b04      	ldr	r3, [sp, #16]
 810b7e0:	2b00      	cmp	r3, #0
 810b7e2:	dc37      	bgt.n	810b854 <_dtoa_r+0x99c>
 810b7e4:	9b07      	ldr	r3, [sp, #28]
 810b7e6:	2b02      	cmp	r3, #2
 810b7e8:	dd34      	ble.n	810b854 <_dtoa_r+0x99c>
 810b7ea:	9b04      	ldr	r3, [sp, #16]
 810b7ec:	9301      	str	r3, [sp, #4]
 810b7ee:	9b01      	ldr	r3, [sp, #4]
 810b7f0:	b963      	cbnz	r3, 810b80c <_dtoa_r+0x954>
 810b7f2:	4631      	mov	r1, r6
 810b7f4:	2205      	movs	r2, #5
 810b7f6:	4620      	mov	r0, r4
 810b7f8:	f000 ffd6 	bl	810c7a8 <__multadd>
 810b7fc:	4601      	mov	r1, r0
 810b7fe:	4606      	mov	r6, r0
 810b800:	4650      	mov	r0, sl
 810b802:	f001 fa35 	bl	810cc70 <__mcmp>
 810b806:	2800      	cmp	r0, #0
 810b808:	f73f adbb 	bgt.w	810b382 <_dtoa_r+0x4ca>
 810b80c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b80e:	9d00      	ldr	r5, [sp, #0]
 810b810:	ea6f 0b03 	mvn.w	fp, r3
 810b814:	f04f 0800 	mov.w	r8, #0
 810b818:	4631      	mov	r1, r6
 810b81a:	4620      	mov	r0, r4
 810b81c:	f000 ffa2 	bl	810c764 <_Bfree>
 810b820:	2f00      	cmp	r7, #0
 810b822:	f43f aeab 	beq.w	810b57c <_dtoa_r+0x6c4>
 810b826:	f1b8 0f00 	cmp.w	r8, #0
 810b82a:	d005      	beq.n	810b838 <_dtoa_r+0x980>
 810b82c:	45b8      	cmp	r8, r7
 810b82e:	d003      	beq.n	810b838 <_dtoa_r+0x980>
 810b830:	4641      	mov	r1, r8
 810b832:	4620      	mov	r0, r4
 810b834:	f000 ff96 	bl	810c764 <_Bfree>
 810b838:	4639      	mov	r1, r7
 810b83a:	4620      	mov	r0, r4
 810b83c:	f000 ff92 	bl	810c764 <_Bfree>
 810b840:	e69c      	b.n	810b57c <_dtoa_r+0x6c4>
 810b842:	2600      	movs	r6, #0
 810b844:	4637      	mov	r7, r6
 810b846:	e7e1      	b.n	810b80c <_dtoa_r+0x954>
 810b848:	46bb      	mov	fp, r7
 810b84a:	4637      	mov	r7, r6
 810b84c:	e599      	b.n	810b382 <_dtoa_r+0x4ca>
 810b84e:	bf00      	nop
 810b850:	40240000 	.word	0x40240000
 810b854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810b856:	2b00      	cmp	r3, #0
 810b858:	f000 80c8 	beq.w	810b9ec <_dtoa_r+0xb34>
 810b85c:	9b04      	ldr	r3, [sp, #16]
 810b85e:	9301      	str	r3, [sp, #4]
 810b860:	2d00      	cmp	r5, #0
 810b862:	dd05      	ble.n	810b870 <_dtoa_r+0x9b8>
 810b864:	4639      	mov	r1, r7
 810b866:	462a      	mov	r2, r5
 810b868:	4620      	mov	r0, r4
 810b86a:	f001 f995 	bl	810cb98 <__lshift>
 810b86e:	4607      	mov	r7, r0
 810b870:	f1b8 0f00 	cmp.w	r8, #0
 810b874:	d05b      	beq.n	810b92e <_dtoa_r+0xa76>
 810b876:	6879      	ldr	r1, [r7, #4]
 810b878:	4620      	mov	r0, r4
 810b87a:	f000 ff33 	bl	810c6e4 <_Balloc>
 810b87e:	4605      	mov	r5, r0
 810b880:	b928      	cbnz	r0, 810b88e <_dtoa_r+0x9d6>
 810b882:	4b83      	ldr	r3, [pc, #524]	; (810ba90 <_dtoa_r+0xbd8>)
 810b884:	4602      	mov	r2, r0
 810b886:	f240 21ef 	movw	r1, #751	; 0x2ef
 810b88a:	f7ff bb2e 	b.w	810aeea <_dtoa_r+0x32>
 810b88e:	693a      	ldr	r2, [r7, #16]
 810b890:	3202      	adds	r2, #2
 810b892:	0092      	lsls	r2, r2, #2
 810b894:	f107 010c 	add.w	r1, r7, #12
 810b898:	300c      	adds	r0, #12
 810b89a:	f7ff fa4b 	bl	810ad34 <memcpy>
 810b89e:	2201      	movs	r2, #1
 810b8a0:	4629      	mov	r1, r5
 810b8a2:	4620      	mov	r0, r4
 810b8a4:	f001 f978 	bl	810cb98 <__lshift>
 810b8a8:	9b00      	ldr	r3, [sp, #0]
 810b8aa:	3301      	adds	r3, #1
 810b8ac:	9304      	str	r3, [sp, #16]
 810b8ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 810b8b2:	4413      	add	r3, r2
 810b8b4:	9308      	str	r3, [sp, #32]
 810b8b6:	9b02      	ldr	r3, [sp, #8]
 810b8b8:	f003 0301 	and.w	r3, r3, #1
 810b8bc:	46b8      	mov	r8, r7
 810b8be:	9306      	str	r3, [sp, #24]
 810b8c0:	4607      	mov	r7, r0
 810b8c2:	9b04      	ldr	r3, [sp, #16]
 810b8c4:	4631      	mov	r1, r6
 810b8c6:	3b01      	subs	r3, #1
 810b8c8:	4650      	mov	r0, sl
 810b8ca:	9301      	str	r3, [sp, #4]
 810b8cc:	f7ff fa6c 	bl	810ada8 <quorem>
 810b8d0:	4641      	mov	r1, r8
 810b8d2:	9002      	str	r0, [sp, #8]
 810b8d4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 810b8d8:	4650      	mov	r0, sl
 810b8da:	f001 f9c9 	bl	810cc70 <__mcmp>
 810b8de:	463a      	mov	r2, r7
 810b8e0:	9005      	str	r0, [sp, #20]
 810b8e2:	4631      	mov	r1, r6
 810b8e4:	4620      	mov	r0, r4
 810b8e6:	f001 f9df 	bl	810cca8 <__mdiff>
 810b8ea:	68c2      	ldr	r2, [r0, #12]
 810b8ec:	4605      	mov	r5, r0
 810b8ee:	bb02      	cbnz	r2, 810b932 <_dtoa_r+0xa7a>
 810b8f0:	4601      	mov	r1, r0
 810b8f2:	4650      	mov	r0, sl
 810b8f4:	f001 f9bc 	bl	810cc70 <__mcmp>
 810b8f8:	4602      	mov	r2, r0
 810b8fa:	4629      	mov	r1, r5
 810b8fc:	4620      	mov	r0, r4
 810b8fe:	9209      	str	r2, [sp, #36]	; 0x24
 810b900:	f000 ff30 	bl	810c764 <_Bfree>
 810b904:	9b07      	ldr	r3, [sp, #28]
 810b906:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810b908:	9d04      	ldr	r5, [sp, #16]
 810b90a:	ea43 0102 	orr.w	r1, r3, r2
 810b90e:	9b06      	ldr	r3, [sp, #24]
 810b910:	4319      	orrs	r1, r3
 810b912:	d110      	bne.n	810b936 <_dtoa_r+0xa7e>
 810b914:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 810b918:	d029      	beq.n	810b96e <_dtoa_r+0xab6>
 810b91a:	9b05      	ldr	r3, [sp, #20]
 810b91c:	2b00      	cmp	r3, #0
 810b91e:	dd02      	ble.n	810b926 <_dtoa_r+0xa6e>
 810b920:	9b02      	ldr	r3, [sp, #8]
 810b922:	f103 0931 	add.w	r9, r3, #49	; 0x31
 810b926:	9b01      	ldr	r3, [sp, #4]
 810b928:	f883 9000 	strb.w	r9, [r3]
 810b92c:	e774      	b.n	810b818 <_dtoa_r+0x960>
 810b92e:	4638      	mov	r0, r7
 810b930:	e7ba      	b.n	810b8a8 <_dtoa_r+0x9f0>
 810b932:	2201      	movs	r2, #1
 810b934:	e7e1      	b.n	810b8fa <_dtoa_r+0xa42>
 810b936:	9b05      	ldr	r3, [sp, #20]
 810b938:	2b00      	cmp	r3, #0
 810b93a:	db04      	blt.n	810b946 <_dtoa_r+0xa8e>
 810b93c:	9907      	ldr	r1, [sp, #28]
 810b93e:	430b      	orrs	r3, r1
 810b940:	9906      	ldr	r1, [sp, #24]
 810b942:	430b      	orrs	r3, r1
 810b944:	d120      	bne.n	810b988 <_dtoa_r+0xad0>
 810b946:	2a00      	cmp	r2, #0
 810b948:	dded      	ble.n	810b926 <_dtoa_r+0xa6e>
 810b94a:	4651      	mov	r1, sl
 810b94c:	2201      	movs	r2, #1
 810b94e:	4620      	mov	r0, r4
 810b950:	f001 f922 	bl	810cb98 <__lshift>
 810b954:	4631      	mov	r1, r6
 810b956:	4682      	mov	sl, r0
 810b958:	f001 f98a 	bl	810cc70 <__mcmp>
 810b95c:	2800      	cmp	r0, #0
 810b95e:	dc03      	bgt.n	810b968 <_dtoa_r+0xab0>
 810b960:	d1e1      	bne.n	810b926 <_dtoa_r+0xa6e>
 810b962:	f019 0f01 	tst.w	r9, #1
 810b966:	d0de      	beq.n	810b926 <_dtoa_r+0xa6e>
 810b968:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 810b96c:	d1d8      	bne.n	810b920 <_dtoa_r+0xa68>
 810b96e:	9a01      	ldr	r2, [sp, #4]
 810b970:	2339      	movs	r3, #57	; 0x39
 810b972:	7013      	strb	r3, [r2, #0]
 810b974:	462b      	mov	r3, r5
 810b976:	461d      	mov	r5, r3
 810b978:	3b01      	subs	r3, #1
 810b97a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 810b97e:	2a39      	cmp	r2, #57	; 0x39
 810b980:	d06c      	beq.n	810ba5c <_dtoa_r+0xba4>
 810b982:	3201      	adds	r2, #1
 810b984:	701a      	strb	r2, [r3, #0]
 810b986:	e747      	b.n	810b818 <_dtoa_r+0x960>
 810b988:	2a00      	cmp	r2, #0
 810b98a:	dd07      	ble.n	810b99c <_dtoa_r+0xae4>
 810b98c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 810b990:	d0ed      	beq.n	810b96e <_dtoa_r+0xab6>
 810b992:	9a01      	ldr	r2, [sp, #4]
 810b994:	f109 0301 	add.w	r3, r9, #1
 810b998:	7013      	strb	r3, [r2, #0]
 810b99a:	e73d      	b.n	810b818 <_dtoa_r+0x960>
 810b99c:	9b04      	ldr	r3, [sp, #16]
 810b99e:	9a08      	ldr	r2, [sp, #32]
 810b9a0:	f803 9c01 	strb.w	r9, [r3, #-1]
 810b9a4:	4293      	cmp	r3, r2
 810b9a6:	d043      	beq.n	810ba30 <_dtoa_r+0xb78>
 810b9a8:	4651      	mov	r1, sl
 810b9aa:	2300      	movs	r3, #0
 810b9ac:	220a      	movs	r2, #10
 810b9ae:	4620      	mov	r0, r4
 810b9b0:	f000 fefa 	bl	810c7a8 <__multadd>
 810b9b4:	45b8      	cmp	r8, r7
 810b9b6:	4682      	mov	sl, r0
 810b9b8:	f04f 0300 	mov.w	r3, #0
 810b9bc:	f04f 020a 	mov.w	r2, #10
 810b9c0:	4641      	mov	r1, r8
 810b9c2:	4620      	mov	r0, r4
 810b9c4:	d107      	bne.n	810b9d6 <_dtoa_r+0xb1e>
 810b9c6:	f000 feef 	bl	810c7a8 <__multadd>
 810b9ca:	4680      	mov	r8, r0
 810b9cc:	4607      	mov	r7, r0
 810b9ce:	9b04      	ldr	r3, [sp, #16]
 810b9d0:	3301      	adds	r3, #1
 810b9d2:	9304      	str	r3, [sp, #16]
 810b9d4:	e775      	b.n	810b8c2 <_dtoa_r+0xa0a>
 810b9d6:	f000 fee7 	bl	810c7a8 <__multadd>
 810b9da:	4639      	mov	r1, r7
 810b9dc:	4680      	mov	r8, r0
 810b9de:	2300      	movs	r3, #0
 810b9e0:	220a      	movs	r2, #10
 810b9e2:	4620      	mov	r0, r4
 810b9e4:	f000 fee0 	bl	810c7a8 <__multadd>
 810b9e8:	4607      	mov	r7, r0
 810b9ea:	e7f0      	b.n	810b9ce <_dtoa_r+0xb16>
 810b9ec:	9b04      	ldr	r3, [sp, #16]
 810b9ee:	9301      	str	r3, [sp, #4]
 810b9f0:	9d00      	ldr	r5, [sp, #0]
 810b9f2:	4631      	mov	r1, r6
 810b9f4:	4650      	mov	r0, sl
 810b9f6:	f7ff f9d7 	bl	810ada8 <quorem>
 810b9fa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 810b9fe:	9b00      	ldr	r3, [sp, #0]
 810ba00:	f805 9b01 	strb.w	r9, [r5], #1
 810ba04:	1aea      	subs	r2, r5, r3
 810ba06:	9b01      	ldr	r3, [sp, #4]
 810ba08:	4293      	cmp	r3, r2
 810ba0a:	dd07      	ble.n	810ba1c <_dtoa_r+0xb64>
 810ba0c:	4651      	mov	r1, sl
 810ba0e:	2300      	movs	r3, #0
 810ba10:	220a      	movs	r2, #10
 810ba12:	4620      	mov	r0, r4
 810ba14:	f000 fec8 	bl	810c7a8 <__multadd>
 810ba18:	4682      	mov	sl, r0
 810ba1a:	e7ea      	b.n	810b9f2 <_dtoa_r+0xb3a>
 810ba1c:	9b01      	ldr	r3, [sp, #4]
 810ba1e:	2b00      	cmp	r3, #0
 810ba20:	bfc8      	it	gt
 810ba22:	461d      	movgt	r5, r3
 810ba24:	9b00      	ldr	r3, [sp, #0]
 810ba26:	bfd8      	it	le
 810ba28:	2501      	movle	r5, #1
 810ba2a:	441d      	add	r5, r3
 810ba2c:	f04f 0800 	mov.w	r8, #0
 810ba30:	4651      	mov	r1, sl
 810ba32:	2201      	movs	r2, #1
 810ba34:	4620      	mov	r0, r4
 810ba36:	f001 f8af 	bl	810cb98 <__lshift>
 810ba3a:	4631      	mov	r1, r6
 810ba3c:	4682      	mov	sl, r0
 810ba3e:	f001 f917 	bl	810cc70 <__mcmp>
 810ba42:	2800      	cmp	r0, #0
 810ba44:	dc96      	bgt.n	810b974 <_dtoa_r+0xabc>
 810ba46:	d102      	bne.n	810ba4e <_dtoa_r+0xb96>
 810ba48:	f019 0f01 	tst.w	r9, #1
 810ba4c:	d192      	bne.n	810b974 <_dtoa_r+0xabc>
 810ba4e:	462b      	mov	r3, r5
 810ba50:	461d      	mov	r5, r3
 810ba52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810ba56:	2a30      	cmp	r2, #48	; 0x30
 810ba58:	d0fa      	beq.n	810ba50 <_dtoa_r+0xb98>
 810ba5a:	e6dd      	b.n	810b818 <_dtoa_r+0x960>
 810ba5c:	9a00      	ldr	r2, [sp, #0]
 810ba5e:	429a      	cmp	r2, r3
 810ba60:	d189      	bne.n	810b976 <_dtoa_r+0xabe>
 810ba62:	f10b 0b01 	add.w	fp, fp, #1
 810ba66:	2331      	movs	r3, #49	; 0x31
 810ba68:	e796      	b.n	810b998 <_dtoa_r+0xae0>
 810ba6a:	4b0a      	ldr	r3, [pc, #40]	; (810ba94 <_dtoa_r+0xbdc>)
 810ba6c:	f7ff ba99 	b.w	810afa2 <_dtoa_r+0xea>
 810ba70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810ba72:	2b00      	cmp	r3, #0
 810ba74:	f47f aa6d 	bne.w	810af52 <_dtoa_r+0x9a>
 810ba78:	4b07      	ldr	r3, [pc, #28]	; (810ba98 <_dtoa_r+0xbe0>)
 810ba7a:	f7ff ba92 	b.w	810afa2 <_dtoa_r+0xea>
 810ba7e:	9b01      	ldr	r3, [sp, #4]
 810ba80:	2b00      	cmp	r3, #0
 810ba82:	dcb5      	bgt.n	810b9f0 <_dtoa_r+0xb38>
 810ba84:	9b07      	ldr	r3, [sp, #28]
 810ba86:	2b02      	cmp	r3, #2
 810ba88:	f73f aeb1 	bgt.w	810b7ee <_dtoa_r+0x936>
 810ba8c:	e7b0      	b.n	810b9f0 <_dtoa_r+0xb38>
 810ba8e:	bf00      	nop
 810ba90:	0810ea3a 	.word	0x0810ea3a
 810ba94:	0810e7a0 	.word	0x0810e7a0
 810ba98:	0810e9d5 	.word	0x0810e9d5

0810ba9c <rshift>:
 810ba9c:	6903      	ldr	r3, [r0, #16]
 810ba9e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 810baa2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810baa6:	ea4f 1261 	mov.w	r2, r1, asr #5
 810baaa:	f100 0414 	add.w	r4, r0, #20
 810baae:	dd45      	ble.n	810bb3c <rshift+0xa0>
 810bab0:	f011 011f 	ands.w	r1, r1, #31
 810bab4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 810bab8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 810babc:	d10c      	bne.n	810bad8 <rshift+0x3c>
 810babe:	f100 0710 	add.w	r7, r0, #16
 810bac2:	4629      	mov	r1, r5
 810bac4:	42b1      	cmp	r1, r6
 810bac6:	d334      	bcc.n	810bb32 <rshift+0x96>
 810bac8:	1a9b      	subs	r3, r3, r2
 810baca:	009b      	lsls	r3, r3, #2
 810bacc:	1eea      	subs	r2, r5, #3
 810bace:	4296      	cmp	r6, r2
 810bad0:	bf38      	it	cc
 810bad2:	2300      	movcc	r3, #0
 810bad4:	4423      	add	r3, r4
 810bad6:	e015      	b.n	810bb04 <rshift+0x68>
 810bad8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 810badc:	f1c1 0820 	rsb	r8, r1, #32
 810bae0:	40cf      	lsrs	r7, r1
 810bae2:	f105 0e04 	add.w	lr, r5, #4
 810bae6:	46a1      	mov	r9, r4
 810bae8:	4576      	cmp	r6, lr
 810baea:	46f4      	mov	ip, lr
 810baec:	d815      	bhi.n	810bb1a <rshift+0x7e>
 810baee:	1a9a      	subs	r2, r3, r2
 810baf0:	0092      	lsls	r2, r2, #2
 810baf2:	3a04      	subs	r2, #4
 810baf4:	3501      	adds	r5, #1
 810baf6:	42ae      	cmp	r6, r5
 810baf8:	bf38      	it	cc
 810bafa:	2200      	movcc	r2, #0
 810bafc:	18a3      	adds	r3, r4, r2
 810bafe:	50a7      	str	r7, [r4, r2]
 810bb00:	b107      	cbz	r7, 810bb04 <rshift+0x68>
 810bb02:	3304      	adds	r3, #4
 810bb04:	1b1a      	subs	r2, r3, r4
 810bb06:	42a3      	cmp	r3, r4
 810bb08:	ea4f 02a2 	mov.w	r2, r2, asr #2
 810bb0c:	bf08      	it	eq
 810bb0e:	2300      	moveq	r3, #0
 810bb10:	6102      	str	r2, [r0, #16]
 810bb12:	bf08      	it	eq
 810bb14:	6143      	streq	r3, [r0, #20]
 810bb16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810bb1a:	f8dc c000 	ldr.w	ip, [ip]
 810bb1e:	fa0c fc08 	lsl.w	ip, ip, r8
 810bb22:	ea4c 0707 	orr.w	r7, ip, r7
 810bb26:	f849 7b04 	str.w	r7, [r9], #4
 810bb2a:	f85e 7b04 	ldr.w	r7, [lr], #4
 810bb2e:	40cf      	lsrs	r7, r1
 810bb30:	e7da      	b.n	810bae8 <rshift+0x4c>
 810bb32:	f851 cb04 	ldr.w	ip, [r1], #4
 810bb36:	f847 cf04 	str.w	ip, [r7, #4]!
 810bb3a:	e7c3      	b.n	810bac4 <rshift+0x28>
 810bb3c:	4623      	mov	r3, r4
 810bb3e:	e7e1      	b.n	810bb04 <rshift+0x68>

0810bb40 <__hexdig_fun>:
 810bb40:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 810bb44:	2b09      	cmp	r3, #9
 810bb46:	d802      	bhi.n	810bb4e <__hexdig_fun+0xe>
 810bb48:	3820      	subs	r0, #32
 810bb4a:	b2c0      	uxtb	r0, r0
 810bb4c:	4770      	bx	lr
 810bb4e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 810bb52:	2b05      	cmp	r3, #5
 810bb54:	d801      	bhi.n	810bb5a <__hexdig_fun+0x1a>
 810bb56:	3847      	subs	r0, #71	; 0x47
 810bb58:	e7f7      	b.n	810bb4a <__hexdig_fun+0xa>
 810bb5a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 810bb5e:	2b05      	cmp	r3, #5
 810bb60:	d801      	bhi.n	810bb66 <__hexdig_fun+0x26>
 810bb62:	3827      	subs	r0, #39	; 0x27
 810bb64:	e7f1      	b.n	810bb4a <__hexdig_fun+0xa>
 810bb66:	2000      	movs	r0, #0
 810bb68:	4770      	bx	lr
	...

0810bb6c <__gethex>:
 810bb6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810bb70:	4617      	mov	r7, r2
 810bb72:	680a      	ldr	r2, [r1, #0]
 810bb74:	b085      	sub	sp, #20
 810bb76:	f102 0b02 	add.w	fp, r2, #2
 810bb7a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 810bb7e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 810bb82:	4681      	mov	r9, r0
 810bb84:	468a      	mov	sl, r1
 810bb86:	9302      	str	r3, [sp, #8]
 810bb88:	32fe      	adds	r2, #254	; 0xfe
 810bb8a:	eb02 030b 	add.w	r3, r2, fp
 810bb8e:	46d8      	mov	r8, fp
 810bb90:	f81b 0b01 	ldrb.w	r0, [fp], #1
 810bb94:	9301      	str	r3, [sp, #4]
 810bb96:	2830      	cmp	r0, #48	; 0x30
 810bb98:	d0f7      	beq.n	810bb8a <__gethex+0x1e>
 810bb9a:	f7ff ffd1 	bl	810bb40 <__hexdig_fun>
 810bb9e:	4604      	mov	r4, r0
 810bba0:	2800      	cmp	r0, #0
 810bba2:	d138      	bne.n	810bc16 <__gethex+0xaa>
 810bba4:	49a7      	ldr	r1, [pc, #668]	; (810be44 <__gethex+0x2d8>)
 810bba6:	2201      	movs	r2, #1
 810bba8:	4640      	mov	r0, r8
 810bbaa:	f7ff f84d 	bl	810ac48 <strncmp>
 810bbae:	4606      	mov	r6, r0
 810bbb0:	2800      	cmp	r0, #0
 810bbb2:	d169      	bne.n	810bc88 <__gethex+0x11c>
 810bbb4:	f898 0001 	ldrb.w	r0, [r8, #1]
 810bbb8:	465d      	mov	r5, fp
 810bbba:	f7ff ffc1 	bl	810bb40 <__hexdig_fun>
 810bbbe:	2800      	cmp	r0, #0
 810bbc0:	d064      	beq.n	810bc8c <__gethex+0x120>
 810bbc2:	465a      	mov	r2, fp
 810bbc4:	7810      	ldrb	r0, [r2, #0]
 810bbc6:	2830      	cmp	r0, #48	; 0x30
 810bbc8:	4690      	mov	r8, r2
 810bbca:	f102 0201 	add.w	r2, r2, #1
 810bbce:	d0f9      	beq.n	810bbc4 <__gethex+0x58>
 810bbd0:	f7ff ffb6 	bl	810bb40 <__hexdig_fun>
 810bbd4:	2301      	movs	r3, #1
 810bbd6:	fab0 f480 	clz	r4, r0
 810bbda:	0964      	lsrs	r4, r4, #5
 810bbdc:	465e      	mov	r6, fp
 810bbde:	9301      	str	r3, [sp, #4]
 810bbe0:	4642      	mov	r2, r8
 810bbe2:	4615      	mov	r5, r2
 810bbe4:	3201      	adds	r2, #1
 810bbe6:	7828      	ldrb	r0, [r5, #0]
 810bbe8:	f7ff ffaa 	bl	810bb40 <__hexdig_fun>
 810bbec:	2800      	cmp	r0, #0
 810bbee:	d1f8      	bne.n	810bbe2 <__gethex+0x76>
 810bbf0:	4994      	ldr	r1, [pc, #592]	; (810be44 <__gethex+0x2d8>)
 810bbf2:	2201      	movs	r2, #1
 810bbf4:	4628      	mov	r0, r5
 810bbf6:	f7ff f827 	bl	810ac48 <strncmp>
 810bbfa:	b978      	cbnz	r0, 810bc1c <__gethex+0xb0>
 810bbfc:	b946      	cbnz	r6, 810bc10 <__gethex+0xa4>
 810bbfe:	1c6e      	adds	r6, r5, #1
 810bc00:	4632      	mov	r2, r6
 810bc02:	4615      	mov	r5, r2
 810bc04:	3201      	adds	r2, #1
 810bc06:	7828      	ldrb	r0, [r5, #0]
 810bc08:	f7ff ff9a 	bl	810bb40 <__hexdig_fun>
 810bc0c:	2800      	cmp	r0, #0
 810bc0e:	d1f8      	bne.n	810bc02 <__gethex+0x96>
 810bc10:	1b73      	subs	r3, r6, r5
 810bc12:	009e      	lsls	r6, r3, #2
 810bc14:	e004      	b.n	810bc20 <__gethex+0xb4>
 810bc16:	2400      	movs	r4, #0
 810bc18:	4626      	mov	r6, r4
 810bc1a:	e7e1      	b.n	810bbe0 <__gethex+0x74>
 810bc1c:	2e00      	cmp	r6, #0
 810bc1e:	d1f7      	bne.n	810bc10 <__gethex+0xa4>
 810bc20:	782b      	ldrb	r3, [r5, #0]
 810bc22:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 810bc26:	2b50      	cmp	r3, #80	; 0x50
 810bc28:	d13d      	bne.n	810bca6 <__gethex+0x13a>
 810bc2a:	786b      	ldrb	r3, [r5, #1]
 810bc2c:	2b2b      	cmp	r3, #43	; 0x2b
 810bc2e:	d02f      	beq.n	810bc90 <__gethex+0x124>
 810bc30:	2b2d      	cmp	r3, #45	; 0x2d
 810bc32:	d031      	beq.n	810bc98 <__gethex+0x12c>
 810bc34:	1c69      	adds	r1, r5, #1
 810bc36:	f04f 0b00 	mov.w	fp, #0
 810bc3a:	7808      	ldrb	r0, [r1, #0]
 810bc3c:	f7ff ff80 	bl	810bb40 <__hexdig_fun>
 810bc40:	1e42      	subs	r2, r0, #1
 810bc42:	b2d2      	uxtb	r2, r2
 810bc44:	2a18      	cmp	r2, #24
 810bc46:	d82e      	bhi.n	810bca6 <__gethex+0x13a>
 810bc48:	f1a0 0210 	sub.w	r2, r0, #16
 810bc4c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 810bc50:	f7ff ff76 	bl	810bb40 <__hexdig_fun>
 810bc54:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 810bc58:	fa5f fc8c 	uxtb.w	ip, ip
 810bc5c:	f1bc 0f18 	cmp.w	ip, #24
 810bc60:	d91d      	bls.n	810bc9e <__gethex+0x132>
 810bc62:	f1bb 0f00 	cmp.w	fp, #0
 810bc66:	d000      	beq.n	810bc6a <__gethex+0xfe>
 810bc68:	4252      	negs	r2, r2
 810bc6a:	4416      	add	r6, r2
 810bc6c:	f8ca 1000 	str.w	r1, [sl]
 810bc70:	b1dc      	cbz	r4, 810bcaa <__gethex+0x13e>
 810bc72:	9b01      	ldr	r3, [sp, #4]
 810bc74:	2b00      	cmp	r3, #0
 810bc76:	bf14      	ite	ne
 810bc78:	f04f 0800 	movne.w	r8, #0
 810bc7c:	f04f 0806 	moveq.w	r8, #6
 810bc80:	4640      	mov	r0, r8
 810bc82:	b005      	add	sp, #20
 810bc84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810bc88:	4645      	mov	r5, r8
 810bc8a:	4626      	mov	r6, r4
 810bc8c:	2401      	movs	r4, #1
 810bc8e:	e7c7      	b.n	810bc20 <__gethex+0xb4>
 810bc90:	f04f 0b00 	mov.w	fp, #0
 810bc94:	1ca9      	adds	r1, r5, #2
 810bc96:	e7d0      	b.n	810bc3a <__gethex+0xce>
 810bc98:	f04f 0b01 	mov.w	fp, #1
 810bc9c:	e7fa      	b.n	810bc94 <__gethex+0x128>
 810bc9e:	230a      	movs	r3, #10
 810bca0:	fb03 0002 	mla	r0, r3, r2, r0
 810bca4:	e7d0      	b.n	810bc48 <__gethex+0xdc>
 810bca6:	4629      	mov	r1, r5
 810bca8:	e7e0      	b.n	810bc6c <__gethex+0x100>
 810bcaa:	eba5 0308 	sub.w	r3, r5, r8
 810bcae:	3b01      	subs	r3, #1
 810bcb0:	4621      	mov	r1, r4
 810bcb2:	2b07      	cmp	r3, #7
 810bcb4:	dc0a      	bgt.n	810bccc <__gethex+0x160>
 810bcb6:	4648      	mov	r0, r9
 810bcb8:	f000 fd14 	bl	810c6e4 <_Balloc>
 810bcbc:	4604      	mov	r4, r0
 810bcbe:	b940      	cbnz	r0, 810bcd2 <__gethex+0x166>
 810bcc0:	4b61      	ldr	r3, [pc, #388]	; (810be48 <__gethex+0x2dc>)
 810bcc2:	4602      	mov	r2, r0
 810bcc4:	21e4      	movs	r1, #228	; 0xe4
 810bcc6:	4861      	ldr	r0, [pc, #388]	; (810be4c <__gethex+0x2e0>)
 810bcc8:	f7ff f850 	bl	810ad6c <__assert_func>
 810bccc:	3101      	adds	r1, #1
 810bcce:	105b      	asrs	r3, r3, #1
 810bcd0:	e7ef      	b.n	810bcb2 <__gethex+0x146>
 810bcd2:	f100 0a14 	add.w	sl, r0, #20
 810bcd6:	2300      	movs	r3, #0
 810bcd8:	495a      	ldr	r1, [pc, #360]	; (810be44 <__gethex+0x2d8>)
 810bcda:	f8cd a004 	str.w	sl, [sp, #4]
 810bcde:	469b      	mov	fp, r3
 810bce0:	45a8      	cmp	r8, r5
 810bce2:	d342      	bcc.n	810bd6a <__gethex+0x1fe>
 810bce4:	9801      	ldr	r0, [sp, #4]
 810bce6:	f840 bb04 	str.w	fp, [r0], #4
 810bcea:	eba0 000a 	sub.w	r0, r0, sl
 810bcee:	1080      	asrs	r0, r0, #2
 810bcf0:	6120      	str	r0, [r4, #16]
 810bcf2:	ea4f 1840 	mov.w	r8, r0, lsl #5
 810bcf6:	4658      	mov	r0, fp
 810bcf8:	f000 fde6 	bl	810c8c8 <__hi0bits>
 810bcfc:	683d      	ldr	r5, [r7, #0]
 810bcfe:	eba8 0000 	sub.w	r0, r8, r0
 810bd02:	42a8      	cmp	r0, r5
 810bd04:	dd59      	ble.n	810bdba <__gethex+0x24e>
 810bd06:	eba0 0805 	sub.w	r8, r0, r5
 810bd0a:	4641      	mov	r1, r8
 810bd0c:	4620      	mov	r0, r4
 810bd0e:	f001 f975 	bl	810cffc <__any_on>
 810bd12:	4683      	mov	fp, r0
 810bd14:	b1b8      	cbz	r0, 810bd46 <__gethex+0x1da>
 810bd16:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 810bd1a:	1159      	asrs	r1, r3, #5
 810bd1c:	f003 021f 	and.w	r2, r3, #31
 810bd20:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 810bd24:	f04f 0b01 	mov.w	fp, #1
 810bd28:	fa0b f202 	lsl.w	r2, fp, r2
 810bd2c:	420a      	tst	r2, r1
 810bd2e:	d00a      	beq.n	810bd46 <__gethex+0x1da>
 810bd30:	455b      	cmp	r3, fp
 810bd32:	dd06      	ble.n	810bd42 <__gethex+0x1d6>
 810bd34:	f1a8 0102 	sub.w	r1, r8, #2
 810bd38:	4620      	mov	r0, r4
 810bd3a:	f001 f95f 	bl	810cffc <__any_on>
 810bd3e:	2800      	cmp	r0, #0
 810bd40:	d138      	bne.n	810bdb4 <__gethex+0x248>
 810bd42:	f04f 0b02 	mov.w	fp, #2
 810bd46:	4641      	mov	r1, r8
 810bd48:	4620      	mov	r0, r4
 810bd4a:	f7ff fea7 	bl	810ba9c <rshift>
 810bd4e:	4446      	add	r6, r8
 810bd50:	68bb      	ldr	r3, [r7, #8]
 810bd52:	42b3      	cmp	r3, r6
 810bd54:	da41      	bge.n	810bdda <__gethex+0x26e>
 810bd56:	4621      	mov	r1, r4
 810bd58:	4648      	mov	r0, r9
 810bd5a:	f000 fd03 	bl	810c764 <_Bfree>
 810bd5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810bd60:	2300      	movs	r3, #0
 810bd62:	6013      	str	r3, [r2, #0]
 810bd64:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 810bd68:	e78a      	b.n	810bc80 <__gethex+0x114>
 810bd6a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 810bd6e:	2a2e      	cmp	r2, #46	; 0x2e
 810bd70:	d014      	beq.n	810bd9c <__gethex+0x230>
 810bd72:	2b20      	cmp	r3, #32
 810bd74:	d106      	bne.n	810bd84 <__gethex+0x218>
 810bd76:	9b01      	ldr	r3, [sp, #4]
 810bd78:	f843 bb04 	str.w	fp, [r3], #4
 810bd7c:	f04f 0b00 	mov.w	fp, #0
 810bd80:	9301      	str	r3, [sp, #4]
 810bd82:	465b      	mov	r3, fp
 810bd84:	7828      	ldrb	r0, [r5, #0]
 810bd86:	9303      	str	r3, [sp, #12]
 810bd88:	f7ff feda 	bl	810bb40 <__hexdig_fun>
 810bd8c:	9b03      	ldr	r3, [sp, #12]
 810bd8e:	f000 000f 	and.w	r0, r0, #15
 810bd92:	4098      	lsls	r0, r3
 810bd94:	ea4b 0b00 	orr.w	fp, fp, r0
 810bd98:	3304      	adds	r3, #4
 810bd9a:	e7a1      	b.n	810bce0 <__gethex+0x174>
 810bd9c:	45a8      	cmp	r8, r5
 810bd9e:	d8e8      	bhi.n	810bd72 <__gethex+0x206>
 810bda0:	2201      	movs	r2, #1
 810bda2:	4628      	mov	r0, r5
 810bda4:	9303      	str	r3, [sp, #12]
 810bda6:	f7fe ff4f 	bl	810ac48 <strncmp>
 810bdaa:	4926      	ldr	r1, [pc, #152]	; (810be44 <__gethex+0x2d8>)
 810bdac:	9b03      	ldr	r3, [sp, #12]
 810bdae:	2800      	cmp	r0, #0
 810bdb0:	d1df      	bne.n	810bd72 <__gethex+0x206>
 810bdb2:	e795      	b.n	810bce0 <__gethex+0x174>
 810bdb4:	f04f 0b03 	mov.w	fp, #3
 810bdb8:	e7c5      	b.n	810bd46 <__gethex+0x1da>
 810bdba:	da0b      	bge.n	810bdd4 <__gethex+0x268>
 810bdbc:	eba5 0800 	sub.w	r8, r5, r0
 810bdc0:	4621      	mov	r1, r4
 810bdc2:	4642      	mov	r2, r8
 810bdc4:	4648      	mov	r0, r9
 810bdc6:	f000 fee7 	bl	810cb98 <__lshift>
 810bdca:	eba6 0608 	sub.w	r6, r6, r8
 810bdce:	4604      	mov	r4, r0
 810bdd0:	f100 0a14 	add.w	sl, r0, #20
 810bdd4:	f04f 0b00 	mov.w	fp, #0
 810bdd8:	e7ba      	b.n	810bd50 <__gethex+0x1e4>
 810bdda:	687b      	ldr	r3, [r7, #4]
 810bddc:	42b3      	cmp	r3, r6
 810bdde:	dd73      	ble.n	810bec8 <__gethex+0x35c>
 810bde0:	1b9e      	subs	r6, r3, r6
 810bde2:	42b5      	cmp	r5, r6
 810bde4:	dc34      	bgt.n	810be50 <__gethex+0x2e4>
 810bde6:	68fb      	ldr	r3, [r7, #12]
 810bde8:	2b02      	cmp	r3, #2
 810bdea:	d023      	beq.n	810be34 <__gethex+0x2c8>
 810bdec:	2b03      	cmp	r3, #3
 810bdee:	d025      	beq.n	810be3c <__gethex+0x2d0>
 810bdf0:	2b01      	cmp	r3, #1
 810bdf2:	d115      	bne.n	810be20 <__gethex+0x2b4>
 810bdf4:	42b5      	cmp	r5, r6
 810bdf6:	d113      	bne.n	810be20 <__gethex+0x2b4>
 810bdf8:	2d01      	cmp	r5, #1
 810bdfa:	d10b      	bne.n	810be14 <__gethex+0x2a8>
 810bdfc:	9a02      	ldr	r2, [sp, #8]
 810bdfe:	687b      	ldr	r3, [r7, #4]
 810be00:	6013      	str	r3, [r2, #0]
 810be02:	2301      	movs	r3, #1
 810be04:	6123      	str	r3, [r4, #16]
 810be06:	f8ca 3000 	str.w	r3, [sl]
 810be0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810be0c:	f04f 0862 	mov.w	r8, #98	; 0x62
 810be10:	601c      	str	r4, [r3, #0]
 810be12:	e735      	b.n	810bc80 <__gethex+0x114>
 810be14:	1e69      	subs	r1, r5, #1
 810be16:	4620      	mov	r0, r4
 810be18:	f001 f8f0 	bl	810cffc <__any_on>
 810be1c:	2800      	cmp	r0, #0
 810be1e:	d1ed      	bne.n	810bdfc <__gethex+0x290>
 810be20:	4621      	mov	r1, r4
 810be22:	4648      	mov	r0, r9
 810be24:	f000 fc9e 	bl	810c764 <_Bfree>
 810be28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810be2a:	2300      	movs	r3, #0
 810be2c:	6013      	str	r3, [r2, #0]
 810be2e:	f04f 0850 	mov.w	r8, #80	; 0x50
 810be32:	e725      	b.n	810bc80 <__gethex+0x114>
 810be34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810be36:	2b00      	cmp	r3, #0
 810be38:	d1f2      	bne.n	810be20 <__gethex+0x2b4>
 810be3a:	e7df      	b.n	810bdfc <__gethex+0x290>
 810be3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810be3e:	2b00      	cmp	r3, #0
 810be40:	d1dc      	bne.n	810bdfc <__gethex+0x290>
 810be42:	e7ed      	b.n	810be20 <__gethex+0x2b4>
 810be44:	0810e838 	.word	0x0810e838
 810be48:	0810ea3a 	.word	0x0810ea3a
 810be4c:	0810ea4b 	.word	0x0810ea4b
 810be50:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 810be54:	f1bb 0f00 	cmp.w	fp, #0
 810be58:	d133      	bne.n	810bec2 <__gethex+0x356>
 810be5a:	f1b8 0f00 	cmp.w	r8, #0
 810be5e:	d004      	beq.n	810be6a <__gethex+0x2fe>
 810be60:	4641      	mov	r1, r8
 810be62:	4620      	mov	r0, r4
 810be64:	f001 f8ca 	bl	810cffc <__any_on>
 810be68:	4683      	mov	fp, r0
 810be6a:	ea4f 1268 	mov.w	r2, r8, asr #5
 810be6e:	2301      	movs	r3, #1
 810be70:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 810be74:	f008 081f 	and.w	r8, r8, #31
 810be78:	fa03 f308 	lsl.w	r3, r3, r8
 810be7c:	4213      	tst	r3, r2
 810be7e:	4631      	mov	r1, r6
 810be80:	4620      	mov	r0, r4
 810be82:	bf18      	it	ne
 810be84:	f04b 0b02 	orrne.w	fp, fp, #2
 810be88:	1bad      	subs	r5, r5, r6
 810be8a:	f7ff fe07 	bl	810ba9c <rshift>
 810be8e:	687e      	ldr	r6, [r7, #4]
 810be90:	f04f 0802 	mov.w	r8, #2
 810be94:	f1bb 0f00 	cmp.w	fp, #0
 810be98:	d04a      	beq.n	810bf30 <__gethex+0x3c4>
 810be9a:	68fb      	ldr	r3, [r7, #12]
 810be9c:	2b02      	cmp	r3, #2
 810be9e:	d016      	beq.n	810bece <__gethex+0x362>
 810bea0:	2b03      	cmp	r3, #3
 810bea2:	d018      	beq.n	810bed6 <__gethex+0x36a>
 810bea4:	2b01      	cmp	r3, #1
 810bea6:	d109      	bne.n	810bebc <__gethex+0x350>
 810bea8:	f01b 0f02 	tst.w	fp, #2
 810beac:	d006      	beq.n	810bebc <__gethex+0x350>
 810beae:	f8da 3000 	ldr.w	r3, [sl]
 810beb2:	ea4b 0b03 	orr.w	fp, fp, r3
 810beb6:	f01b 0f01 	tst.w	fp, #1
 810beba:	d10f      	bne.n	810bedc <__gethex+0x370>
 810bebc:	f048 0810 	orr.w	r8, r8, #16
 810bec0:	e036      	b.n	810bf30 <__gethex+0x3c4>
 810bec2:	f04f 0b01 	mov.w	fp, #1
 810bec6:	e7d0      	b.n	810be6a <__gethex+0x2fe>
 810bec8:	f04f 0801 	mov.w	r8, #1
 810becc:	e7e2      	b.n	810be94 <__gethex+0x328>
 810bece:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810bed0:	f1c3 0301 	rsb	r3, r3, #1
 810bed4:	930f      	str	r3, [sp, #60]	; 0x3c
 810bed6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810bed8:	2b00      	cmp	r3, #0
 810beda:	d0ef      	beq.n	810bebc <__gethex+0x350>
 810bedc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 810bee0:	f104 0214 	add.w	r2, r4, #20
 810bee4:	ea4f 038b 	mov.w	r3, fp, lsl #2
 810bee8:	9301      	str	r3, [sp, #4]
 810beea:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 810beee:	2300      	movs	r3, #0
 810bef0:	4694      	mov	ip, r2
 810bef2:	f852 1b04 	ldr.w	r1, [r2], #4
 810bef6:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 810befa:	d01e      	beq.n	810bf3a <__gethex+0x3ce>
 810befc:	3101      	adds	r1, #1
 810befe:	f8cc 1000 	str.w	r1, [ip]
 810bf02:	f1b8 0f02 	cmp.w	r8, #2
 810bf06:	f104 0214 	add.w	r2, r4, #20
 810bf0a:	d13d      	bne.n	810bf88 <__gethex+0x41c>
 810bf0c:	683b      	ldr	r3, [r7, #0]
 810bf0e:	3b01      	subs	r3, #1
 810bf10:	42ab      	cmp	r3, r5
 810bf12:	d10b      	bne.n	810bf2c <__gethex+0x3c0>
 810bf14:	1169      	asrs	r1, r5, #5
 810bf16:	2301      	movs	r3, #1
 810bf18:	f005 051f 	and.w	r5, r5, #31
 810bf1c:	fa03 f505 	lsl.w	r5, r3, r5
 810bf20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810bf24:	421d      	tst	r5, r3
 810bf26:	bf18      	it	ne
 810bf28:	f04f 0801 	movne.w	r8, #1
 810bf2c:	f048 0820 	orr.w	r8, r8, #32
 810bf30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810bf32:	601c      	str	r4, [r3, #0]
 810bf34:	9b02      	ldr	r3, [sp, #8]
 810bf36:	601e      	str	r6, [r3, #0]
 810bf38:	e6a2      	b.n	810bc80 <__gethex+0x114>
 810bf3a:	4290      	cmp	r0, r2
 810bf3c:	f842 3c04 	str.w	r3, [r2, #-4]
 810bf40:	d8d6      	bhi.n	810bef0 <__gethex+0x384>
 810bf42:	68a2      	ldr	r2, [r4, #8]
 810bf44:	4593      	cmp	fp, r2
 810bf46:	db17      	blt.n	810bf78 <__gethex+0x40c>
 810bf48:	6861      	ldr	r1, [r4, #4]
 810bf4a:	4648      	mov	r0, r9
 810bf4c:	3101      	adds	r1, #1
 810bf4e:	f000 fbc9 	bl	810c6e4 <_Balloc>
 810bf52:	4682      	mov	sl, r0
 810bf54:	b918      	cbnz	r0, 810bf5e <__gethex+0x3f2>
 810bf56:	4b1b      	ldr	r3, [pc, #108]	; (810bfc4 <__gethex+0x458>)
 810bf58:	4602      	mov	r2, r0
 810bf5a:	2184      	movs	r1, #132	; 0x84
 810bf5c:	e6b3      	b.n	810bcc6 <__gethex+0x15a>
 810bf5e:	6922      	ldr	r2, [r4, #16]
 810bf60:	3202      	adds	r2, #2
 810bf62:	f104 010c 	add.w	r1, r4, #12
 810bf66:	0092      	lsls	r2, r2, #2
 810bf68:	300c      	adds	r0, #12
 810bf6a:	f7fe fee3 	bl	810ad34 <memcpy>
 810bf6e:	4621      	mov	r1, r4
 810bf70:	4648      	mov	r0, r9
 810bf72:	f000 fbf7 	bl	810c764 <_Bfree>
 810bf76:	4654      	mov	r4, sl
 810bf78:	6922      	ldr	r2, [r4, #16]
 810bf7a:	1c51      	adds	r1, r2, #1
 810bf7c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 810bf80:	6121      	str	r1, [r4, #16]
 810bf82:	2101      	movs	r1, #1
 810bf84:	6151      	str	r1, [r2, #20]
 810bf86:	e7bc      	b.n	810bf02 <__gethex+0x396>
 810bf88:	6921      	ldr	r1, [r4, #16]
 810bf8a:	4559      	cmp	r1, fp
 810bf8c:	dd0b      	ble.n	810bfa6 <__gethex+0x43a>
 810bf8e:	2101      	movs	r1, #1
 810bf90:	4620      	mov	r0, r4
 810bf92:	f7ff fd83 	bl	810ba9c <rshift>
 810bf96:	68bb      	ldr	r3, [r7, #8]
 810bf98:	3601      	adds	r6, #1
 810bf9a:	42b3      	cmp	r3, r6
 810bf9c:	f6ff aedb 	blt.w	810bd56 <__gethex+0x1ea>
 810bfa0:	f04f 0801 	mov.w	r8, #1
 810bfa4:	e7c2      	b.n	810bf2c <__gethex+0x3c0>
 810bfa6:	f015 051f 	ands.w	r5, r5, #31
 810bfaa:	d0f9      	beq.n	810bfa0 <__gethex+0x434>
 810bfac:	9b01      	ldr	r3, [sp, #4]
 810bfae:	441a      	add	r2, r3
 810bfb0:	f1c5 0520 	rsb	r5, r5, #32
 810bfb4:	f852 0c04 	ldr.w	r0, [r2, #-4]
 810bfb8:	f000 fc86 	bl	810c8c8 <__hi0bits>
 810bfbc:	42a8      	cmp	r0, r5
 810bfbe:	dbe6      	blt.n	810bf8e <__gethex+0x422>
 810bfc0:	e7ee      	b.n	810bfa0 <__gethex+0x434>
 810bfc2:	bf00      	nop
 810bfc4:	0810ea3a 	.word	0x0810ea3a

0810bfc8 <L_shift>:
 810bfc8:	f1c2 0208 	rsb	r2, r2, #8
 810bfcc:	0092      	lsls	r2, r2, #2
 810bfce:	b570      	push	{r4, r5, r6, lr}
 810bfd0:	f1c2 0620 	rsb	r6, r2, #32
 810bfd4:	6843      	ldr	r3, [r0, #4]
 810bfd6:	6804      	ldr	r4, [r0, #0]
 810bfd8:	fa03 f506 	lsl.w	r5, r3, r6
 810bfdc:	432c      	orrs	r4, r5
 810bfde:	40d3      	lsrs	r3, r2
 810bfe0:	6004      	str	r4, [r0, #0]
 810bfe2:	f840 3f04 	str.w	r3, [r0, #4]!
 810bfe6:	4288      	cmp	r0, r1
 810bfe8:	d3f4      	bcc.n	810bfd4 <L_shift+0xc>
 810bfea:	bd70      	pop	{r4, r5, r6, pc}

0810bfec <__match>:
 810bfec:	b530      	push	{r4, r5, lr}
 810bfee:	6803      	ldr	r3, [r0, #0]
 810bff0:	3301      	adds	r3, #1
 810bff2:	f811 4b01 	ldrb.w	r4, [r1], #1
 810bff6:	b914      	cbnz	r4, 810bffe <__match+0x12>
 810bff8:	6003      	str	r3, [r0, #0]
 810bffa:	2001      	movs	r0, #1
 810bffc:	bd30      	pop	{r4, r5, pc}
 810bffe:	f813 2b01 	ldrb.w	r2, [r3], #1
 810c002:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 810c006:	2d19      	cmp	r5, #25
 810c008:	bf98      	it	ls
 810c00a:	3220      	addls	r2, #32
 810c00c:	42a2      	cmp	r2, r4
 810c00e:	d0f0      	beq.n	810bff2 <__match+0x6>
 810c010:	2000      	movs	r0, #0
 810c012:	e7f3      	b.n	810bffc <__match+0x10>

0810c014 <__hexnan>:
 810c014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c018:	680b      	ldr	r3, [r1, #0]
 810c01a:	6801      	ldr	r1, [r0, #0]
 810c01c:	115e      	asrs	r6, r3, #5
 810c01e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 810c022:	f013 031f 	ands.w	r3, r3, #31
 810c026:	b087      	sub	sp, #28
 810c028:	bf18      	it	ne
 810c02a:	3604      	addne	r6, #4
 810c02c:	2500      	movs	r5, #0
 810c02e:	1f37      	subs	r7, r6, #4
 810c030:	4682      	mov	sl, r0
 810c032:	4690      	mov	r8, r2
 810c034:	9301      	str	r3, [sp, #4]
 810c036:	f846 5c04 	str.w	r5, [r6, #-4]
 810c03a:	46b9      	mov	r9, r7
 810c03c:	463c      	mov	r4, r7
 810c03e:	9502      	str	r5, [sp, #8]
 810c040:	46ab      	mov	fp, r5
 810c042:	784a      	ldrb	r2, [r1, #1]
 810c044:	1c4b      	adds	r3, r1, #1
 810c046:	9303      	str	r3, [sp, #12]
 810c048:	b342      	cbz	r2, 810c09c <__hexnan+0x88>
 810c04a:	4610      	mov	r0, r2
 810c04c:	9105      	str	r1, [sp, #20]
 810c04e:	9204      	str	r2, [sp, #16]
 810c050:	f7ff fd76 	bl	810bb40 <__hexdig_fun>
 810c054:	2800      	cmp	r0, #0
 810c056:	d14f      	bne.n	810c0f8 <__hexnan+0xe4>
 810c058:	9a04      	ldr	r2, [sp, #16]
 810c05a:	9905      	ldr	r1, [sp, #20]
 810c05c:	2a20      	cmp	r2, #32
 810c05e:	d818      	bhi.n	810c092 <__hexnan+0x7e>
 810c060:	9b02      	ldr	r3, [sp, #8]
 810c062:	459b      	cmp	fp, r3
 810c064:	dd13      	ble.n	810c08e <__hexnan+0x7a>
 810c066:	454c      	cmp	r4, r9
 810c068:	d206      	bcs.n	810c078 <__hexnan+0x64>
 810c06a:	2d07      	cmp	r5, #7
 810c06c:	dc04      	bgt.n	810c078 <__hexnan+0x64>
 810c06e:	462a      	mov	r2, r5
 810c070:	4649      	mov	r1, r9
 810c072:	4620      	mov	r0, r4
 810c074:	f7ff ffa8 	bl	810bfc8 <L_shift>
 810c078:	4544      	cmp	r4, r8
 810c07a:	d950      	bls.n	810c11e <__hexnan+0x10a>
 810c07c:	2300      	movs	r3, #0
 810c07e:	f1a4 0904 	sub.w	r9, r4, #4
 810c082:	f844 3c04 	str.w	r3, [r4, #-4]
 810c086:	f8cd b008 	str.w	fp, [sp, #8]
 810c08a:	464c      	mov	r4, r9
 810c08c:	461d      	mov	r5, r3
 810c08e:	9903      	ldr	r1, [sp, #12]
 810c090:	e7d7      	b.n	810c042 <__hexnan+0x2e>
 810c092:	2a29      	cmp	r2, #41	; 0x29
 810c094:	d155      	bne.n	810c142 <__hexnan+0x12e>
 810c096:	3102      	adds	r1, #2
 810c098:	f8ca 1000 	str.w	r1, [sl]
 810c09c:	f1bb 0f00 	cmp.w	fp, #0
 810c0a0:	d04f      	beq.n	810c142 <__hexnan+0x12e>
 810c0a2:	454c      	cmp	r4, r9
 810c0a4:	d206      	bcs.n	810c0b4 <__hexnan+0xa0>
 810c0a6:	2d07      	cmp	r5, #7
 810c0a8:	dc04      	bgt.n	810c0b4 <__hexnan+0xa0>
 810c0aa:	462a      	mov	r2, r5
 810c0ac:	4649      	mov	r1, r9
 810c0ae:	4620      	mov	r0, r4
 810c0b0:	f7ff ff8a 	bl	810bfc8 <L_shift>
 810c0b4:	4544      	cmp	r4, r8
 810c0b6:	d934      	bls.n	810c122 <__hexnan+0x10e>
 810c0b8:	f1a8 0204 	sub.w	r2, r8, #4
 810c0bc:	4623      	mov	r3, r4
 810c0be:	f853 1b04 	ldr.w	r1, [r3], #4
 810c0c2:	f842 1f04 	str.w	r1, [r2, #4]!
 810c0c6:	429f      	cmp	r7, r3
 810c0c8:	d2f9      	bcs.n	810c0be <__hexnan+0xaa>
 810c0ca:	1b3b      	subs	r3, r7, r4
 810c0cc:	f023 0303 	bic.w	r3, r3, #3
 810c0d0:	3304      	adds	r3, #4
 810c0d2:	3e03      	subs	r6, #3
 810c0d4:	3401      	adds	r4, #1
 810c0d6:	42a6      	cmp	r6, r4
 810c0d8:	bf38      	it	cc
 810c0da:	2304      	movcc	r3, #4
 810c0dc:	4443      	add	r3, r8
 810c0de:	2200      	movs	r2, #0
 810c0e0:	f843 2b04 	str.w	r2, [r3], #4
 810c0e4:	429f      	cmp	r7, r3
 810c0e6:	d2fb      	bcs.n	810c0e0 <__hexnan+0xcc>
 810c0e8:	683b      	ldr	r3, [r7, #0]
 810c0ea:	b91b      	cbnz	r3, 810c0f4 <__hexnan+0xe0>
 810c0ec:	4547      	cmp	r7, r8
 810c0ee:	d126      	bne.n	810c13e <__hexnan+0x12a>
 810c0f0:	2301      	movs	r3, #1
 810c0f2:	603b      	str	r3, [r7, #0]
 810c0f4:	2005      	movs	r0, #5
 810c0f6:	e025      	b.n	810c144 <__hexnan+0x130>
 810c0f8:	3501      	adds	r5, #1
 810c0fa:	2d08      	cmp	r5, #8
 810c0fc:	f10b 0b01 	add.w	fp, fp, #1
 810c100:	dd06      	ble.n	810c110 <__hexnan+0xfc>
 810c102:	4544      	cmp	r4, r8
 810c104:	d9c3      	bls.n	810c08e <__hexnan+0x7a>
 810c106:	2300      	movs	r3, #0
 810c108:	f844 3c04 	str.w	r3, [r4, #-4]
 810c10c:	2501      	movs	r5, #1
 810c10e:	3c04      	subs	r4, #4
 810c110:	6822      	ldr	r2, [r4, #0]
 810c112:	f000 000f 	and.w	r0, r0, #15
 810c116:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 810c11a:	6020      	str	r0, [r4, #0]
 810c11c:	e7b7      	b.n	810c08e <__hexnan+0x7a>
 810c11e:	2508      	movs	r5, #8
 810c120:	e7b5      	b.n	810c08e <__hexnan+0x7a>
 810c122:	9b01      	ldr	r3, [sp, #4]
 810c124:	2b00      	cmp	r3, #0
 810c126:	d0df      	beq.n	810c0e8 <__hexnan+0xd4>
 810c128:	f1c3 0320 	rsb	r3, r3, #32
 810c12c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810c130:	40da      	lsrs	r2, r3
 810c132:	f856 3c04 	ldr.w	r3, [r6, #-4]
 810c136:	4013      	ands	r3, r2
 810c138:	f846 3c04 	str.w	r3, [r6, #-4]
 810c13c:	e7d4      	b.n	810c0e8 <__hexnan+0xd4>
 810c13e:	3f04      	subs	r7, #4
 810c140:	e7d2      	b.n	810c0e8 <__hexnan+0xd4>
 810c142:	2004      	movs	r0, #4
 810c144:	b007      	add	sp, #28
 810c146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810c14a <__ssputs_r>:
 810c14a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810c14e:	688e      	ldr	r6, [r1, #8]
 810c150:	461f      	mov	r7, r3
 810c152:	42be      	cmp	r6, r7
 810c154:	680b      	ldr	r3, [r1, #0]
 810c156:	4682      	mov	sl, r0
 810c158:	460c      	mov	r4, r1
 810c15a:	4690      	mov	r8, r2
 810c15c:	d82c      	bhi.n	810c1b8 <__ssputs_r+0x6e>
 810c15e:	898a      	ldrh	r2, [r1, #12]
 810c160:	f412 6f90 	tst.w	r2, #1152	; 0x480
 810c164:	d026      	beq.n	810c1b4 <__ssputs_r+0x6a>
 810c166:	6965      	ldr	r5, [r4, #20]
 810c168:	6909      	ldr	r1, [r1, #16]
 810c16a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 810c16e:	eba3 0901 	sub.w	r9, r3, r1
 810c172:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 810c176:	1c7b      	adds	r3, r7, #1
 810c178:	444b      	add	r3, r9
 810c17a:	106d      	asrs	r5, r5, #1
 810c17c:	429d      	cmp	r5, r3
 810c17e:	bf38      	it	cc
 810c180:	461d      	movcc	r5, r3
 810c182:	0553      	lsls	r3, r2, #21
 810c184:	d527      	bpl.n	810c1d6 <__ssputs_r+0x8c>
 810c186:	4629      	mov	r1, r5
 810c188:	f000 f960 	bl	810c44c <_malloc_r>
 810c18c:	4606      	mov	r6, r0
 810c18e:	b360      	cbz	r0, 810c1ea <__ssputs_r+0xa0>
 810c190:	6921      	ldr	r1, [r4, #16]
 810c192:	464a      	mov	r2, r9
 810c194:	f7fe fdce 	bl	810ad34 <memcpy>
 810c198:	89a3      	ldrh	r3, [r4, #12]
 810c19a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 810c19e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810c1a2:	81a3      	strh	r3, [r4, #12]
 810c1a4:	6126      	str	r6, [r4, #16]
 810c1a6:	6165      	str	r5, [r4, #20]
 810c1a8:	444e      	add	r6, r9
 810c1aa:	eba5 0509 	sub.w	r5, r5, r9
 810c1ae:	6026      	str	r6, [r4, #0]
 810c1b0:	60a5      	str	r5, [r4, #8]
 810c1b2:	463e      	mov	r6, r7
 810c1b4:	42be      	cmp	r6, r7
 810c1b6:	d900      	bls.n	810c1ba <__ssputs_r+0x70>
 810c1b8:	463e      	mov	r6, r7
 810c1ba:	6820      	ldr	r0, [r4, #0]
 810c1bc:	4632      	mov	r2, r6
 810c1be:	4641      	mov	r1, r8
 810c1c0:	f000 ffce 	bl	810d160 <memmove>
 810c1c4:	68a3      	ldr	r3, [r4, #8]
 810c1c6:	1b9b      	subs	r3, r3, r6
 810c1c8:	60a3      	str	r3, [r4, #8]
 810c1ca:	6823      	ldr	r3, [r4, #0]
 810c1cc:	4433      	add	r3, r6
 810c1ce:	6023      	str	r3, [r4, #0]
 810c1d0:	2000      	movs	r0, #0
 810c1d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810c1d6:	462a      	mov	r2, r5
 810c1d8:	f000 ff86 	bl	810d0e8 <_realloc_r>
 810c1dc:	4606      	mov	r6, r0
 810c1de:	2800      	cmp	r0, #0
 810c1e0:	d1e0      	bne.n	810c1a4 <__ssputs_r+0x5a>
 810c1e2:	6921      	ldr	r1, [r4, #16]
 810c1e4:	4650      	mov	r0, sl
 810c1e6:	f001 f849 	bl	810d27c <_free_r>
 810c1ea:	230c      	movs	r3, #12
 810c1ec:	f8ca 3000 	str.w	r3, [sl]
 810c1f0:	89a3      	ldrh	r3, [r4, #12]
 810c1f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810c1f6:	81a3      	strh	r3, [r4, #12]
 810c1f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810c1fc:	e7e9      	b.n	810c1d2 <__ssputs_r+0x88>
	...

0810c200 <_svfiprintf_r>:
 810c200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c204:	4698      	mov	r8, r3
 810c206:	898b      	ldrh	r3, [r1, #12]
 810c208:	061b      	lsls	r3, r3, #24
 810c20a:	b09d      	sub	sp, #116	; 0x74
 810c20c:	4607      	mov	r7, r0
 810c20e:	460d      	mov	r5, r1
 810c210:	4614      	mov	r4, r2
 810c212:	d50e      	bpl.n	810c232 <_svfiprintf_r+0x32>
 810c214:	690b      	ldr	r3, [r1, #16]
 810c216:	b963      	cbnz	r3, 810c232 <_svfiprintf_r+0x32>
 810c218:	2140      	movs	r1, #64	; 0x40
 810c21a:	f000 f917 	bl	810c44c <_malloc_r>
 810c21e:	6028      	str	r0, [r5, #0]
 810c220:	6128      	str	r0, [r5, #16]
 810c222:	b920      	cbnz	r0, 810c22e <_svfiprintf_r+0x2e>
 810c224:	230c      	movs	r3, #12
 810c226:	603b      	str	r3, [r7, #0]
 810c228:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810c22c:	e0d0      	b.n	810c3d0 <_svfiprintf_r+0x1d0>
 810c22e:	2340      	movs	r3, #64	; 0x40
 810c230:	616b      	str	r3, [r5, #20]
 810c232:	2300      	movs	r3, #0
 810c234:	9309      	str	r3, [sp, #36]	; 0x24
 810c236:	2320      	movs	r3, #32
 810c238:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810c23c:	f8cd 800c 	str.w	r8, [sp, #12]
 810c240:	2330      	movs	r3, #48	; 0x30
 810c242:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 810c3e8 <_svfiprintf_r+0x1e8>
 810c246:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810c24a:	f04f 0901 	mov.w	r9, #1
 810c24e:	4623      	mov	r3, r4
 810c250:	469a      	mov	sl, r3
 810c252:	f813 2b01 	ldrb.w	r2, [r3], #1
 810c256:	b10a      	cbz	r2, 810c25c <_svfiprintf_r+0x5c>
 810c258:	2a25      	cmp	r2, #37	; 0x25
 810c25a:	d1f9      	bne.n	810c250 <_svfiprintf_r+0x50>
 810c25c:	ebba 0b04 	subs.w	fp, sl, r4
 810c260:	d00b      	beq.n	810c27a <_svfiprintf_r+0x7a>
 810c262:	465b      	mov	r3, fp
 810c264:	4622      	mov	r2, r4
 810c266:	4629      	mov	r1, r5
 810c268:	4638      	mov	r0, r7
 810c26a:	f7ff ff6e 	bl	810c14a <__ssputs_r>
 810c26e:	3001      	adds	r0, #1
 810c270:	f000 80a9 	beq.w	810c3c6 <_svfiprintf_r+0x1c6>
 810c274:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810c276:	445a      	add	r2, fp
 810c278:	9209      	str	r2, [sp, #36]	; 0x24
 810c27a:	f89a 3000 	ldrb.w	r3, [sl]
 810c27e:	2b00      	cmp	r3, #0
 810c280:	f000 80a1 	beq.w	810c3c6 <_svfiprintf_r+0x1c6>
 810c284:	2300      	movs	r3, #0
 810c286:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810c28a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810c28e:	f10a 0a01 	add.w	sl, sl, #1
 810c292:	9304      	str	r3, [sp, #16]
 810c294:	9307      	str	r3, [sp, #28]
 810c296:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810c29a:	931a      	str	r3, [sp, #104]	; 0x68
 810c29c:	4654      	mov	r4, sl
 810c29e:	2205      	movs	r2, #5
 810c2a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 810c2a4:	4850      	ldr	r0, [pc, #320]	; (810c3e8 <_svfiprintf_r+0x1e8>)
 810c2a6:	f7f4 f81b 	bl	81002e0 <memchr>
 810c2aa:	9a04      	ldr	r2, [sp, #16]
 810c2ac:	b9d8      	cbnz	r0, 810c2e6 <_svfiprintf_r+0xe6>
 810c2ae:	06d0      	lsls	r0, r2, #27
 810c2b0:	bf44      	itt	mi
 810c2b2:	2320      	movmi	r3, #32
 810c2b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810c2b8:	0711      	lsls	r1, r2, #28
 810c2ba:	bf44      	itt	mi
 810c2bc:	232b      	movmi	r3, #43	; 0x2b
 810c2be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810c2c2:	f89a 3000 	ldrb.w	r3, [sl]
 810c2c6:	2b2a      	cmp	r3, #42	; 0x2a
 810c2c8:	d015      	beq.n	810c2f6 <_svfiprintf_r+0xf6>
 810c2ca:	9a07      	ldr	r2, [sp, #28]
 810c2cc:	4654      	mov	r4, sl
 810c2ce:	2000      	movs	r0, #0
 810c2d0:	f04f 0c0a 	mov.w	ip, #10
 810c2d4:	4621      	mov	r1, r4
 810c2d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 810c2da:	3b30      	subs	r3, #48	; 0x30
 810c2dc:	2b09      	cmp	r3, #9
 810c2de:	d94d      	bls.n	810c37c <_svfiprintf_r+0x17c>
 810c2e0:	b1b0      	cbz	r0, 810c310 <_svfiprintf_r+0x110>
 810c2e2:	9207      	str	r2, [sp, #28]
 810c2e4:	e014      	b.n	810c310 <_svfiprintf_r+0x110>
 810c2e6:	eba0 0308 	sub.w	r3, r0, r8
 810c2ea:	fa09 f303 	lsl.w	r3, r9, r3
 810c2ee:	4313      	orrs	r3, r2
 810c2f0:	9304      	str	r3, [sp, #16]
 810c2f2:	46a2      	mov	sl, r4
 810c2f4:	e7d2      	b.n	810c29c <_svfiprintf_r+0x9c>
 810c2f6:	9b03      	ldr	r3, [sp, #12]
 810c2f8:	1d19      	adds	r1, r3, #4
 810c2fa:	681b      	ldr	r3, [r3, #0]
 810c2fc:	9103      	str	r1, [sp, #12]
 810c2fe:	2b00      	cmp	r3, #0
 810c300:	bfbb      	ittet	lt
 810c302:	425b      	neglt	r3, r3
 810c304:	f042 0202 	orrlt.w	r2, r2, #2
 810c308:	9307      	strge	r3, [sp, #28]
 810c30a:	9307      	strlt	r3, [sp, #28]
 810c30c:	bfb8      	it	lt
 810c30e:	9204      	strlt	r2, [sp, #16]
 810c310:	7823      	ldrb	r3, [r4, #0]
 810c312:	2b2e      	cmp	r3, #46	; 0x2e
 810c314:	d10c      	bne.n	810c330 <_svfiprintf_r+0x130>
 810c316:	7863      	ldrb	r3, [r4, #1]
 810c318:	2b2a      	cmp	r3, #42	; 0x2a
 810c31a:	d134      	bne.n	810c386 <_svfiprintf_r+0x186>
 810c31c:	9b03      	ldr	r3, [sp, #12]
 810c31e:	1d1a      	adds	r2, r3, #4
 810c320:	681b      	ldr	r3, [r3, #0]
 810c322:	9203      	str	r2, [sp, #12]
 810c324:	2b00      	cmp	r3, #0
 810c326:	bfb8      	it	lt
 810c328:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 810c32c:	3402      	adds	r4, #2
 810c32e:	9305      	str	r3, [sp, #20]
 810c330:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 810c3f8 <_svfiprintf_r+0x1f8>
 810c334:	7821      	ldrb	r1, [r4, #0]
 810c336:	2203      	movs	r2, #3
 810c338:	4650      	mov	r0, sl
 810c33a:	f7f3 ffd1 	bl	81002e0 <memchr>
 810c33e:	b138      	cbz	r0, 810c350 <_svfiprintf_r+0x150>
 810c340:	9b04      	ldr	r3, [sp, #16]
 810c342:	eba0 000a 	sub.w	r0, r0, sl
 810c346:	2240      	movs	r2, #64	; 0x40
 810c348:	4082      	lsls	r2, r0
 810c34a:	4313      	orrs	r3, r2
 810c34c:	3401      	adds	r4, #1
 810c34e:	9304      	str	r3, [sp, #16]
 810c350:	f814 1b01 	ldrb.w	r1, [r4], #1
 810c354:	4825      	ldr	r0, [pc, #148]	; (810c3ec <_svfiprintf_r+0x1ec>)
 810c356:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810c35a:	2206      	movs	r2, #6
 810c35c:	f7f3 ffc0 	bl	81002e0 <memchr>
 810c360:	2800      	cmp	r0, #0
 810c362:	d038      	beq.n	810c3d6 <_svfiprintf_r+0x1d6>
 810c364:	4b22      	ldr	r3, [pc, #136]	; (810c3f0 <_svfiprintf_r+0x1f0>)
 810c366:	bb1b      	cbnz	r3, 810c3b0 <_svfiprintf_r+0x1b0>
 810c368:	9b03      	ldr	r3, [sp, #12]
 810c36a:	3307      	adds	r3, #7
 810c36c:	f023 0307 	bic.w	r3, r3, #7
 810c370:	3308      	adds	r3, #8
 810c372:	9303      	str	r3, [sp, #12]
 810c374:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810c376:	4433      	add	r3, r6
 810c378:	9309      	str	r3, [sp, #36]	; 0x24
 810c37a:	e768      	b.n	810c24e <_svfiprintf_r+0x4e>
 810c37c:	fb0c 3202 	mla	r2, ip, r2, r3
 810c380:	460c      	mov	r4, r1
 810c382:	2001      	movs	r0, #1
 810c384:	e7a6      	b.n	810c2d4 <_svfiprintf_r+0xd4>
 810c386:	2300      	movs	r3, #0
 810c388:	3401      	adds	r4, #1
 810c38a:	9305      	str	r3, [sp, #20]
 810c38c:	4619      	mov	r1, r3
 810c38e:	f04f 0c0a 	mov.w	ip, #10
 810c392:	4620      	mov	r0, r4
 810c394:	f810 2b01 	ldrb.w	r2, [r0], #1
 810c398:	3a30      	subs	r2, #48	; 0x30
 810c39a:	2a09      	cmp	r2, #9
 810c39c:	d903      	bls.n	810c3a6 <_svfiprintf_r+0x1a6>
 810c39e:	2b00      	cmp	r3, #0
 810c3a0:	d0c6      	beq.n	810c330 <_svfiprintf_r+0x130>
 810c3a2:	9105      	str	r1, [sp, #20]
 810c3a4:	e7c4      	b.n	810c330 <_svfiprintf_r+0x130>
 810c3a6:	fb0c 2101 	mla	r1, ip, r1, r2
 810c3aa:	4604      	mov	r4, r0
 810c3ac:	2301      	movs	r3, #1
 810c3ae:	e7f0      	b.n	810c392 <_svfiprintf_r+0x192>
 810c3b0:	ab03      	add	r3, sp, #12
 810c3b2:	9300      	str	r3, [sp, #0]
 810c3b4:	462a      	mov	r2, r5
 810c3b6:	4b0f      	ldr	r3, [pc, #60]	; (810c3f4 <_svfiprintf_r+0x1f4>)
 810c3b8:	a904      	add	r1, sp, #16
 810c3ba:	4638      	mov	r0, r7
 810c3bc:	f7fc fe9c 	bl	81090f8 <_printf_float>
 810c3c0:	1c42      	adds	r2, r0, #1
 810c3c2:	4606      	mov	r6, r0
 810c3c4:	d1d6      	bne.n	810c374 <_svfiprintf_r+0x174>
 810c3c6:	89ab      	ldrh	r3, [r5, #12]
 810c3c8:	065b      	lsls	r3, r3, #25
 810c3ca:	f53f af2d 	bmi.w	810c228 <_svfiprintf_r+0x28>
 810c3ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 810c3d0:	b01d      	add	sp, #116	; 0x74
 810c3d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c3d6:	ab03      	add	r3, sp, #12
 810c3d8:	9300      	str	r3, [sp, #0]
 810c3da:	462a      	mov	r2, r5
 810c3dc:	4b05      	ldr	r3, [pc, #20]	; (810c3f4 <_svfiprintf_r+0x1f4>)
 810c3de:	a904      	add	r1, sp, #16
 810c3e0:	4638      	mov	r0, r7
 810c3e2:	f7fd f92d 	bl	8109640 <_printf_i>
 810c3e6:	e7eb      	b.n	810c3c0 <_svfiprintf_r+0x1c0>
 810c3e8:	0810eaab 	.word	0x0810eaab
 810c3ec:	0810eab5 	.word	0x0810eab5
 810c3f0:	081090f9 	.word	0x081090f9
 810c3f4:	0810c14b 	.word	0x0810c14b
 810c3f8:	0810eab1 	.word	0x0810eab1

0810c3fc <malloc>:
 810c3fc:	4b02      	ldr	r3, [pc, #8]	; (810c408 <malloc+0xc>)
 810c3fe:	4601      	mov	r1, r0
 810c400:	6818      	ldr	r0, [r3, #0]
 810c402:	f000 b823 	b.w	810c44c <_malloc_r>
 810c406:	bf00      	nop
 810c408:	100001d4 	.word	0x100001d4

0810c40c <sbrk_aligned>:
 810c40c:	b570      	push	{r4, r5, r6, lr}
 810c40e:	4e0e      	ldr	r6, [pc, #56]	; (810c448 <sbrk_aligned+0x3c>)
 810c410:	460c      	mov	r4, r1
 810c412:	6831      	ldr	r1, [r6, #0]
 810c414:	4605      	mov	r5, r0
 810c416:	b911      	cbnz	r1, 810c41e <sbrk_aligned+0x12>
 810c418:	f000 fef0 	bl	810d1fc <_sbrk_r>
 810c41c:	6030      	str	r0, [r6, #0]
 810c41e:	4621      	mov	r1, r4
 810c420:	4628      	mov	r0, r5
 810c422:	f000 feeb 	bl	810d1fc <_sbrk_r>
 810c426:	1c43      	adds	r3, r0, #1
 810c428:	d00a      	beq.n	810c440 <sbrk_aligned+0x34>
 810c42a:	1cc4      	adds	r4, r0, #3
 810c42c:	f024 0403 	bic.w	r4, r4, #3
 810c430:	42a0      	cmp	r0, r4
 810c432:	d007      	beq.n	810c444 <sbrk_aligned+0x38>
 810c434:	1a21      	subs	r1, r4, r0
 810c436:	4628      	mov	r0, r5
 810c438:	f000 fee0 	bl	810d1fc <_sbrk_r>
 810c43c:	3001      	adds	r0, #1
 810c43e:	d101      	bne.n	810c444 <sbrk_aligned+0x38>
 810c440:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 810c444:	4620      	mov	r0, r4
 810c446:	bd70      	pop	{r4, r5, r6, pc}
 810c448:	100004bc 	.word	0x100004bc

0810c44c <_malloc_r>:
 810c44c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810c450:	1ccd      	adds	r5, r1, #3
 810c452:	f025 0503 	bic.w	r5, r5, #3
 810c456:	3508      	adds	r5, #8
 810c458:	2d0c      	cmp	r5, #12
 810c45a:	bf38      	it	cc
 810c45c:	250c      	movcc	r5, #12
 810c45e:	2d00      	cmp	r5, #0
 810c460:	4607      	mov	r7, r0
 810c462:	db01      	blt.n	810c468 <_malloc_r+0x1c>
 810c464:	42a9      	cmp	r1, r5
 810c466:	d905      	bls.n	810c474 <_malloc_r+0x28>
 810c468:	230c      	movs	r3, #12
 810c46a:	603b      	str	r3, [r7, #0]
 810c46c:	2600      	movs	r6, #0
 810c46e:	4630      	mov	r0, r6
 810c470:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810c474:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 810c548 <_malloc_r+0xfc>
 810c478:	f000 f928 	bl	810c6cc <__malloc_lock>
 810c47c:	f8d8 3000 	ldr.w	r3, [r8]
 810c480:	461c      	mov	r4, r3
 810c482:	bb5c      	cbnz	r4, 810c4dc <_malloc_r+0x90>
 810c484:	4629      	mov	r1, r5
 810c486:	4638      	mov	r0, r7
 810c488:	f7ff ffc0 	bl	810c40c <sbrk_aligned>
 810c48c:	1c43      	adds	r3, r0, #1
 810c48e:	4604      	mov	r4, r0
 810c490:	d155      	bne.n	810c53e <_malloc_r+0xf2>
 810c492:	f8d8 4000 	ldr.w	r4, [r8]
 810c496:	4626      	mov	r6, r4
 810c498:	2e00      	cmp	r6, #0
 810c49a:	d145      	bne.n	810c528 <_malloc_r+0xdc>
 810c49c:	2c00      	cmp	r4, #0
 810c49e:	d048      	beq.n	810c532 <_malloc_r+0xe6>
 810c4a0:	6823      	ldr	r3, [r4, #0]
 810c4a2:	4631      	mov	r1, r6
 810c4a4:	4638      	mov	r0, r7
 810c4a6:	eb04 0903 	add.w	r9, r4, r3
 810c4aa:	f000 fea7 	bl	810d1fc <_sbrk_r>
 810c4ae:	4581      	cmp	r9, r0
 810c4b0:	d13f      	bne.n	810c532 <_malloc_r+0xe6>
 810c4b2:	6821      	ldr	r1, [r4, #0]
 810c4b4:	1a6d      	subs	r5, r5, r1
 810c4b6:	4629      	mov	r1, r5
 810c4b8:	4638      	mov	r0, r7
 810c4ba:	f7ff ffa7 	bl	810c40c <sbrk_aligned>
 810c4be:	3001      	adds	r0, #1
 810c4c0:	d037      	beq.n	810c532 <_malloc_r+0xe6>
 810c4c2:	6823      	ldr	r3, [r4, #0]
 810c4c4:	442b      	add	r3, r5
 810c4c6:	6023      	str	r3, [r4, #0]
 810c4c8:	f8d8 3000 	ldr.w	r3, [r8]
 810c4cc:	2b00      	cmp	r3, #0
 810c4ce:	d038      	beq.n	810c542 <_malloc_r+0xf6>
 810c4d0:	685a      	ldr	r2, [r3, #4]
 810c4d2:	42a2      	cmp	r2, r4
 810c4d4:	d12b      	bne.n	810c52e <_malloc_r+0xe2>
 810c4d6:	2200      	movs	r2, #0
 810c4d8:	605a      	str	r2, [r3, #4]
 810c4da:	e00f      	b.n	810c4fc <_malloc_r+0xb0>
 810c4dc:	6822      	ldr	r2, [r4, #0]
 810c4de:	1b52      	subs	r2, r2, r5
 810c4e0:	d41f      	bmi.n	810c522 <_malloc_r+0xd6>
 810c4e2:	2a0b      	cmp	r2, #11
 810c4e4:	d917      	bls.n	810c516 <_malloc_r+0xca>
 810c4e6:	1961      	adds	r1, r4, r5
 810c4e8:	42a3      	cmp	r3, r4
 810c4ea:	6025      	str	r5, [r4, #0]
 810c4ec:	bf18      	it	ne
 810c4ee:	6059      	strne	r1, [r3, #4]
 810c4f0:	6863      	ldr	r3, [r4, #4]
 810c4f2:	bf08      	it	eq
 810c4f4:	f8c8 1000 	streq.w	r1, [r8]
 810c4f8:	5162      	str	r2, [r4, r5]
 810c4fa:	604b      	str	r3, [r1, #4]
 810c4fc:	4638      	mov	r0, r7
 810c4fe:	f104 060b 	add.w	r6, r4, #11
 810c502:	f000 f8e9 	bl	810c6d8 <__malloc_unlock>
 810c506:	f026 0607 	bic.w	r6, r6, #7
 810c50a:	1d23      	adds	r3, r4, #4
 810c50c:	1af2      	subs	r2, r6, r3
 810c50e:	d0ae      	beq.n	810c46e <_malloc_r+0x22>
 810c510:	1b9b      	subs	r3, r3, r6
 810c512:	50a3      	str	r3, [r4, r2]
 810c514:	e7ab      	b.n	810c46e <_malloc_r+0x22>
 810c516:	42a3      	cmp	r3, r4
 810c518:	6862      	ldr	r2, [r4, #4]
 810c51a:	d1dd      	bne.n	810c4d8 <_malloc_r+0x8c>
 810c51c:	f8c8 2000 	str.w	r2, [r8]
 810c520:	e7ec      	b.n	810c4fc <_malloc_r+0xb0>
 810c522:	4623      	mov	r3, r4
 810c524:	6864      	ldr	r4, [r4, #4]
 810c526:	e7ac      	b.n	810c482 <_malloc_r+0x36>
 810c528:	4634      	mov	r4, r6
 810c52a:	6876      	ldr	r6, [r6, #4]
 810c52c:	e7b4      	b.n	810c498 <_malloc_r+0x4c>
 810c52e:	4613      	mov	r3, r2
 810c530:	e7cc      	b.n	810c4cc <_malloc_r+0x80>
 810c532:	230c      	movs	r3, #12
 810c534:	603b      	str	r3, [r7, #0]
 810c536:	4638      	mov	r0, r7
 810c538:	f000 f8ce 	bl	810c6d8 <__malloc_unlock>
 810c53c:	e797      	b.n	810c46e <_malloc_r+0x22>
 810c53e:	6025      	str	r5, [r4, #0]
 810c540:	e7dc      	b.n	810c4fc <_malloc_r+0xb0>
 810c542:	605b      	str	r3, [r3, #4]
 810c544:	deff      	udf	#255	; 0xff
 810c546:	bf00      	nop
 810c548:	100004b8 	.word	0x100004b8

0810c54c <__ascii_mbtowc>:
 810c54c:	b082      	sub	sp, #8
 810c54e:	b901      	cbnz	r1, 810c552 <__ascii_mbtowc+0x6>
 810c550:	a901      	add	r1, sp, #4
 810c552:	b142      	cbz	r2, 810c566 <__ascii_mbtowc+0x1a>
 810c554:	b14b      	cbz	r3, 810c56a <__ascii_mbtowc+0x1e>
 810c556:	7813      	ldrb	r3, [r2, #0]
 810c558:	600b      	str	r3, [r1, #0]
 810c55a:	7812      	ldrb	r2, [r2, #0]
 810c55c:	1e10      	subs	r0, r2, #0
 810c55e:	bf18      	it	ne
 810c560:	2001      	movne	r0, #1
 810c562:	b002      	add	sp, #8
 810c564:	4770      	bx	lr
 810c566:	4610      	mov	r0, r2
 810c568:	e7fb      	b.n	810c562 <__ascii_mbtowc+0x16>
 810c56a:	f06f 0001 	mvn.w	r0, #1
 810c56e:	e7f8      	b.n	810c562 <__ascii_mbtowc+0x16>

0810c570 <__sflush_r>:
 810c570:	898a      	ldrh	r2, [r1, #12]
 810c572:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810c576:	4605      	mov	r5, r0
 810c578:	0710      	lsls	r0, r2, #28
 810c57a:	460c      	mov	r4, r1
 810c57c:	d458      	bmi.n	810c630 <__sflush_r+0xc0>
 810c57e:	684b      	ldr	r3, [r1, #4]
 810c580:	2b00      	cmp	r3, #0
 810c582:	dc05      	bgt.n	810c590 <__sflush_r+0x20>
 810c584:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 810c586:	2b00      	cmp	r3, #0
 810c588:	dc02      	bgt.n	810c590 <__sflush_r+0x20>
 810c58a:	2000      	movs	r0, #0
 810c58c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810c590:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810c592:	2e00      	cmp	r6, #0
 810c594:	d0f9      	beq.n	810c58a <__sflush_r+0x1a>
 810c596:	2300      	movs	r3, #0
 810c598:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 810c59c:	682f      	ldr	r7, [r5, #0]
 810c59e:	6a21      	ldr	r1, [r4, #32]
 810c5a0:	602b      	str	r3, [r5, #0]
 810c5a2:	d032      	beq.n	810c60a <__sflush_r+0x9a>
 810c5a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 810c5a6:	89a3      	ldrh	r3, [r4, #12]
 810c5a8:	075a      	lsls	r2, r3, #29
 810c5aa:	d505      	bpl.n	810c5b8 <__sflush_r+0x48>
 810c5ac:	6863      	ldr	r3, [r4, #4]
 810c5ae:	1ac0      	subs	r0, r0, r3
 810c5b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 810c5b2:	b10b      	cbz	r3, 810c5b8 <__sflush_r+0x48>
 810c5b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 810c5b6:	1ac0      	subs	r0, r0, r3
 810c5b8:	2300      	movs	r3, #0
 810c5ba:	4602      	mov	r2, r0
 810c5bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810c5be:	6a21      	ldr	r1, [r4, #32]
 810c5c0:	4628      	mov	r0, r5
 810c5c2:	47b0      	blx	r6
 810c5c4:	1c43      	adds	r3, r0, #1
 810c5c6:	89a3      	ldrh	r3, [r4, #12]
 810c5c8:	d106      	bne.n	810c5d8 <__sflush_r+0x68>
 810c5ca:	6829      	ldr	r1, [r5, #0]
 810c5cc:	291d      	cmp	r1, #29
 810c5ce:	d82b      	bhi.n	810c628 <__sflush_r+0xb8>
 810c5d0:	4a29      	ldr	r2, [pc, #164]	; (810c678 <__sflush_r+0x108>)
 810c5d2:	410a      	asrs	r2, r1
 810c5d4:	07d6      	lsls	r6, r2, #31
 810c5d6:	d427      	bmi.n	810c628 <__sflush_r+0xb8>
 810c5d8:	2200      	movs	r2, #0
 810c5da:	6062      	str	r2, [r4, #4]
 810c5dc:	04d9      	lsls	r1, r3, #19
 810c5de:	6922      	ldr	r2, [r4, #16]
 810c5e0:	6022      	str	r2, [r4, #0]
 810c5e2:	d504      	bpl.n	810c5ee <__sflush_r+0x7e>
 810c5e4:	1c42      	adds	r2, r0, #1
 810c5e6:	d101      	bne.n	810c5ec <__sflush_r+0x7c>
 810c5e8:	682b      	ldr	r3, [r5, #0]
 810c5ea:	b903      	cbnz	r3, 810c5ee <__sflush_r+0x7e>
 810c5ec:	6560      	str	r0, [r4, #84]	; 0x54
 810c5ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810c5f0:	602f      	str	r7, [r5, #0]
 810c5f2:	2900      	cmp	r1, #0
 810c5f4:	d0c9      	beq.n	810c58a <__sflush_r+0x1a>
 810c5f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810c5fa:	4299      	cmp	r1, r3
 810c5fc:	d002      	beq.n	810c604 <__sflush_r+0x94>
 810c5fe:	4628      	mov	r0, r5
 810c600:	f000 fe3c 	bl	810d27c <_free_r>
 810c604:	2000      	movs	r0, #0
 810c606:	6360      	str	r0, [r4, #52]	; 0x34
 810c608:	e7c0      	b.n	810c58c <__sflush_r+0x1c>
 810c60a:	2301      	movs	r3, #1
 810c60c:	4628      	mov	r0, r5
 810c60e:	47b0      	blx	r6
 810c610:	1c41      	adds	r1, r0, #1
 810c612:	d1c8      	bne.n	810c5a6 <__sflush_r+0x36>
 810c614:	682b      	ldr	r3, [r5, #0]
 810c616:	2b00      	cmp	r3, #0
 810c618:	d0c5      	beq.n	810c5a6 <__sflush_r+0x36>
 810c61a:	2b1d      	cmp	r3, #29
 810c61c:	d001      	beq.n	810c622 <__sflush_r+0xb2>
 810c61e:	2b16      	cmp	r3, #22
 810c620:	d101      	bne.n	810c626 <__sflush_r+0xb6>
 810c622:	602f      	str	r7, [r5, #0]
 810c624:	e7b1      	b.n	810c58a <__sflush_r+0x1a>
 810c626:	89a3      	ldrh	r3, [r4, #12]
 810c628:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810c62c:	81a3      	strh	r3, [r4, #12]
 810c62e:	e7ad      	b.n	810c58c <__sflush_r+0x1c>
 810c630:	690f      	ldr	r7, [r1, #16]
 810c632:	2f00      	cmp	r7, #0
 810c634:	d0a9      	beq.n	810c58a <__sflush_r+0x1a>
 810c636:	0793      	lsls	r3, r2, #30
 810c638:	680e      	ldr	r6, [r1, #0]
 810c63a:	bf08      	it	eq
 810c63c:	694b      	ldreq	r3, [r1, #20]
 810c63e:	600f      	str	r7, [r1, #0]
 810c640:	bf18      	it	ne
 810c642:	2300      	movne	r3, #0
 810c644:	eba6 0807 	sub.w	r8, r6, r7
 810c648:	608b      	str	r3, [r1, #8]
 810c64a:	f1b8 0f00 	cmp.w	r8, #0
 810c64e:	dd9c      	ble.n	810c58a <__sflush_r+0x1a>
 810c650:	6a21      	ldr	r1, [r4, #32]
 810c652:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 810c654:	4643      	mov	r3, r8
 810c656:	463a      	mov	r2, r7
 810c658:	4628      	mov	r0, r5
 810c65a:	47b0      	blx	r6
 810c65c:	2800      	cmp	r0, #0
 810c65e:	dc06      	bgt.n	810c66e <__sflush_r+0xfe>
 810c660:	89a3      	ldrh	r3, [r4, #12]
 810c662:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810c666:	81a3      	strh	r3, [r4, #12]
 810c668:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810c66c:	e78e      	b.n	810c58c <__sflush_r+0x1c>
 810c66e:	4407      	add	r7, r0
 810c670:	eba8 0800 	sub.w	r8, r8, r0
 810c674:	e7e9      	b.n	810c64a <__sflush_r+0xda>
 810c676:	bf00      	nop
 810c678:	dfbffffe 	.word	0xdfbffffe

0810c67c <_fflush_r>:
 810c67c:	b538      	push	{r3, r4, r5, lr}
 810c67e:	690b      	ldr	r3, [r1, #16]
 810c680:	4605      	mov	r5, r0
 810c682:	460c      	mov	r4, r1
 810c684:	b913      	cbnz	r3, 810c68c <_fflush_r+0x10>
 810c686:	2500      	movs	r5, #0
 810c688:	4628      	mov	r0, r5
 810c68a:	bd38      	pop	{r3, r4, r5, pc}
 810c68c:	b118      	cbz	r0, 810c696 <_fflush_r+0x1a>
 810c68e:	6a03      	ldr	r3, [r0, #32]
 810c690:	b90b      	cbnz	r3, 810c696 <_fflush_r+0x1a>
 810c692:	f7fd fc0d 	bl	8109eb0 <__sinit>
 810c696:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810c69a:	2b00      	cmp	r3, #0
 810c69c:	d0f3      	beq.n	810c686 <_fflush_r+0xa>
 810c69e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 810c6a0:	07d0      	lsls	r0, r2, #31
 810c6a2:	d404      	bmi.n	810c6ae <_fflush_r+0x32>
 810c6a4:	0599      	lsls	r1, r3, #22
 810c6a6:	d402      	bmi.n	810c6ae <_fflush_r+0x32>
 810c6a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810c6aa:	f7fe fb41 	bl	810ad30 <__retarget_lock_acquire_recursive>
 810c6ae:	4628      	mov	r0, r5
 810c6b0:	4621      	mov	r1, r4
 810c6b2:	f7ff ff5d 	bl	810c570 <__sflush_r>
 810c6b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810c6b8:	07da      	lsls	r2, r3, #31
 810c6ba:	4605      	mov	r5, r0
 810c6bc:	d4e4      	bmi.n	810c688 <_fflush_r+0xc>
 810c6be:	89a3      	ldrh	r3, [r4, #12]
 810c6c0:	059b      	lsls	r3, r3, #22
 810c6c2:	d4e1      	bmi.n	810c688 <_fflush_r+0xc>
 810c6c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810c6c6:	f7fe fb34 	bl	810ad32 <__retarget_lock_release_recursive>
 810c6ca:	e7dd      	b.n	810c688 <_fflush_r+0xc>

0810c6cc <__malloc_lock>:
 810c6cc:	4801      	ldr	r0, [pc, #4]	; (810c6d4 <__malloc_lock+0x8>)
 810c6ce:	f7fe bb2f 	b.w	810ad30 <__retarget_lock_acquire_recursive>
 810c6d2:	bf00      	nop
 810c6d4:	100004b4 	.word	0x100004b4

0810c6d8 <__malloc_unlock>:
 810c6d8:	4801      	ldr	r0, [pc, #4]	; (810c6e0 <__malloc_unlock+0x8>)
 810c6da:	f7fe bb2a 	b.w	810ad32 <__retarget_lock_release_recursive>
 810c6de:	bf00      	nop
 810c6e0:	100004b4 	.word	0x100004b4

0810c6e4 <_Balloc>:
 810c6e4:	b570      	push	{r4, r5, r6, lr}
 810c6e6:	69c6      	ldr	r6, [r0, #28]
 810c6e8:	4604      	mov	r4, r0
 810c6ea:	460d      	mov	r5, r1
 810c6ec:	b976      	cbnz	r6, 810c70c <_Balloc+0x28>
 810c6ee:	2010      	movs	r0, #16
 810c6f0:	f7ff fe84 	bl	810c3fc <malloc>
 810c6f4:	4602      	mov	r2, r0
 810c6f6:	61e0      	str	r0, [r4, #28]
 810c6f8:	b920      	cbnz	r0, 810c704 <_Balloc+0x20>
 810c6fa:	4b18      	ldr	r3, [pc, #96]	; (810c75c <_Balloc+0x78>)
 810c6fc:	4818      	ldr	r0, [pc, #96]	; (810c760 <_Balloc+0x7c>)
 810c6fe:	216b      	movs	r1, #107	; 0x6b
 810c700:	f7fe fb34 	bl	810ad6c <__assert_func>
 810c704:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810c708:	6006      	str	r6, [r0, #0]
 810c70a:	60c6      	str	r6, [r0, #12]
 810c70c:	69e6      	ldr	r6, [r4, #28]
 810c70e:	68f3      	ldr	r3, [r6, #12]
 810c710:	b183      	cbz	r3, 810c734 <_Balloc+0x50>
 810c712:	69e3      	ldr	r3, [r4, #28]
 810c714:	68db      	ldr	r3, [r3, #12]
 810c716:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 810c71a:	b9b8      	cbnz	r0, 810c74c <_Balloc+0x68>
 810c71c:	2101      	movs	r1, #1
 810c71e:	fa01 f605 	lsl.w	r6, r1, r5
 810c722:	1d72      	adds	r2, r6, #5
 810c724:	0092      	lsls	r2, r2, #2
 810c726:	4620      	mov	r0, r4
 810c728:	f000 fd91 	bl	810d24e <_calloc_r>
 810c72c:	b160      	cbz	r0, 810c748 <_Balloc+0x64>
 810c72e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 810c732:	e00e      	b.n	810c752 <_Balloc+0x6e>
 810c734:	2221      	movs	r2, #33	; 0x21
 810c736:	2104      	movs	r1, #4
 810c738:	4620      	mov	r0, r4
 810c73a:	f000 fd88 	bl	810d24e <_calloc_r>
 810c73e:	69e3      	ldr	r3, [r4, #28]
 810c740:	60f0      	str	r0, [r6, #12]
 810c742:	68db      	ldr	r3, [r3, #12]
 810c744:	2b00      	cmp	r3, #0
 810c746:	d1e4      	bne.n	810c712 <_Balloc+0x2e>
 810c748:	2000      	movs	r0, #0
 810c74a:	bd70      	pop	{r4, r5, r6, pc}
 810c74c:	6802      	ldr	r2, [r0, #0]
 810c74e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 810c752:	2300      	movs	r3, #0
 810c754:	e9c0 3303 	strd	r3, r3, [r0, #12]
 810c758:	e7f7      	b.n	810c74a <_Balloc+0x66>
 810c75a:	bf00      	nop
 810c75c:	0810e7c9 	.word	0x0810e7c9
 810c760:	0810eabc 	.word	0x0810eabc

0810c764 <_Bfree>:
 810c764:	b570      	push	{r4, r5, r6, lr}
 810c766:	69c6      	ldr	r6, [r0, #28]
 810c768:	4605      	mov	r5, r0
 810c76a:	460c      	mov	r4, r1
 810c76c:	b976      	cbnz	r6, 810c78c <_Bfree+0x28>
 810c76e:	2010      	movs	r0, #16
 810c770:	f7ff fe44 	bl	810c3fc <malloc>
 810c774:	4602      	mov	r2, r0
 810c776:	61e8      	str	r0, [r5, #28]
 810c778:	b920      	cbnz	r0, 810c784 <_Bfree+0x20>
 810c77a:	4b09      	ldr	r3, [pc, #36]	; (810c7a0 <_Bfree+0x3c>)
 810c77c:	4809      	ldr	r0, [pc, #36]	; (810c7a4 <_Bfree+0x40>)
 810c77e:	218f      	movs	r1, #143	; 0x8f
 810c780:	f7fe faf4 	bl	810ad6c <__assert_func>
 810c784:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810c788:	6006      	str	r6, [r0, #0]
 810c78a:	60c6      	str	r6, [r0, #12]
 810c78c:	b13c      	cbz	r4, 810c79e <_Bfree+0x3a>
 810c78e:	69eb      	ldr	r3, [r5, #28]
 810c790:	6862      	ldr	r2, [r4, #4]
 810c792:	68db      	ldr	r3, [r3, #12]
 810c794:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 810c798:	6021      	str	r1, [r4, #0]
 810c79a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 810c79e:	bd70      	pop	{r4, r5, r6, pc}
 810c7a0:	0810e7c9 	.word	0x0810e7c9
 810c7a4:	0810eabc 	.word	0x0810eabc

0810c7a8 <__multadd>:
 810c7a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810c7ac:	690d      	ldr	r5, [r1, #16]
 810c7ae:	4607      	mov	r7, r0
 810c7b0:	460c      	mov	r4, r1
 810c7b2:	461e      	mov	r6, r3
 810c7b4:	f101 0c14 	add.w	ip, r1, #20
 810c7b8:	2000      	movs	r0, #0
 810c7ba:	f8dc 3000 	ldr.w	r3, [ip]
 810c7be:	b299      	uxth	r1, r3
 810c7c0:	fb02 6101 	mla	r1, r2, r1, r6
 810c7c4:	0c1e      	lsrs	r6, r3, #16
 810c7c6:	0c0b      	lsrs	r3, r1, #16
 810c7c8:	fb02 3306 	mla	r3, r2, r6, r3
 810c7cc:	b289      	uxth	r1, r1
 810c7ce:	3001      	adds	r0, #1
 810c7d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 810c7d4:	4285      	cmp	r5, r0
 810c7d6:	f84c 1b04 	str.w	r1, [ip], #4
 810c7da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 810c7de:	dcec      	bgt.n	810c7ba <__multadd+0x12>
 810c7e0:	b30e      	cbz	r6, 810c826 <__multadd+0x7e>
 810c7e2:	68a3      	ldr	r3, [r4, #8]
 810c7e4:	42ab      	cmp	r3, r5
 810c7e6:	dc19      	bgt.n	810c81c <__multadd+0x74>
 810c7e8:	6861      	ldr	r1, [r4, #4]
 810c7ea:	4638      	mov	r0, r7
 810c7ec:	3101      	adds	r1, #1
 810c7ee:	f7ff ff79 	bl	810c6e4 <_Balloc>
 810c7f2:	4680      	mov	r8, r0
 810c7f4:	b928      	cbnz	r0, 810c802 <__multadd+0x5a>
 810c7f6:	4602      	mov	r2, r0
 810c7f8:	4b0c      	ldr	r3, [pc, #48]	; (810c82c <__multadd+0x84>)
 810c7fa:	480d      	ldr	r0, [pc, #52]	; (810c830 <__multadd+0x88>)
 810c7fc:	21ba      	movs	r1, #186	; 0xba
 810c7fe:	f7fe fab5 	bl	810ad6c <__assert_func>
 810c802:	6922      	ldr	r2, [r4, #16]
 810c804:	3202      	adds	r2, #2
 810c806:	f104 010c 	add.w	r1, r4, #12
 810c80a:	0092      	lsls	r2, r2, #2
 810c80c:	300c      	adds	r0, #12
 810c80e:	f7fe fa91 	bl	810ad34 <memcpy>
 810c812:	4621      	mov	r1, r4
 810c814:	4638      	mov	r0, r7
 810c816:	f7ff ffa5 	bl	810c764 <_Bfree>
 810c81a:	4644      	mov	r4, r8
 810c81c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 810c820:	3501      	adds	r5, #1
 810c822:	615e      	str	r6, [r3, #20]
 810c824:	6125      	str	r5, [r4, #16]
 810c826:	4620      	mov	r0, r4
 810c828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810c82c:	0810ea3a 	.word	0x0810ea3a
 810c830:	0810eabc 	.word	0x0810eabc

0810c834 <__s2b>:
 810c834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810c838:	460c      	mov	r4, r1
 810c83a:	4615      	mov	r5, r2
 810c83c:	461f      	mov	r7, r3
 810c83e:	2209      	movs	r2, #9
 810c840:	3308      	adds	r3, #8
 810c842:	4606      	mov	r6, r0
 810c844:	fb93 f3f2 	sdiv	r3, r3, r2
 810c848:	2100      	movs	r1, #0
 810c84a:	2201      	movs	r2, #1
 810c84c:	429a      	cmp	r2, r3
 810c84e:	db09      	blt.n	810c864 <__s2b+0x30>
 810c850:	4630      	mov	r0, r6
 810c852:	f7ff ff47 	bl	810c6e4 <_Balloc>
 810c856:	b940      	cbnz	r0, 810c86a <__s2b+0x36>
 810c858:	4602      	mov	r2, r0
 810c85a:	4b19      	ldr	r3, [pc, #100]	; (810c8c0 <__s2b+0x8c>)
 810c85c:	4819      	ldr	r0, [pc, #100]	; (810c8c4 <__s2b+0x90>)
 810c85e:	21d3      	movs	r1, #211	; 0xd3
 810c860:	f7fe fa84 	bl	810ad6c <__assert_func>
 810c864:	0052      	lsls	r2, r2, #1
 810c866:	3101      	adds	r1, #1
 810c868:	e7f0      	b.n	810c84c <__s2b+0x18>
 810c86a:	9b08      	ldr	r3, [sp, #32]
 810c86c:	6143      	str	r3, [r0, #20]
 810c86e:	2d09      	cmp	r5, #9
 810c870:	f04f 0301 	mov.w	r3, #1
 810c874:	6103      	str	r3, [r0, #16]
 810c876:	dd16      	ble.n	810c8a6 <__s2b+0x72>
 810c878:	f104 0909 	add.w	r9, r4, #9
 810c87c:	46c8      	mov	r8, r9
 810c87e:	442c      	add	r4, r5
 810c880:	f818 3b01 	ldrb.w	r3, [r8], #1
 810c884:	4601      	mov	r1, r0
 810c886:	3b30      	subs	r3, #48	; 0x30
 810c888:	220a      	movs	r2, #10
 810c88a:	4630      	mov	r0, r6
 810c88c:	f7ff ff8c 	bl	810c7a8 <__multadd>
 810c890:	45a0      	cmp	r8, r4
 810c892:	d1f5      	bne.n	810c880 <__s2b+0x4c>
 810c894:	f1a5 0408 	sub.w	r4, r5, #8
 810c898:	444c      	add	r4, r9
 810c89a:	1b2d      	subs	r5, r5, r4
 810c89c:	1963      	adds	r3, r4, r5
 810c89e:	42bb      	cmp	r3, r7
 810c8a0:	db04      	blt.n	810c8ac <__s2b+0x78>
 810c8a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810c8a6:	340a      	adds	r4, #10
 810c8a8:	2509      	movs	r5, #9
 810c8aa:	e7f6      	b.n	810c89a <__s2b+0x66>
 810c8ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 810c8b0:	4601      	mov	r1, r0
 810c8b2:	3b30      	subs	r3, #48	; 0x30
 810c8b4:	220a      	movs	r2, #10
 810c8b6:	4630      	mov	r0, r6
 810c8b8:	f7ff ff76 	bl	810c7a8 <__multadd>
 810c8bc:	e7ee      	b.n	810c89c <__s2b+0x68>
 810c8be:	bf00      	nop
 810c8c0:	0810ea3a 	.word	0x0810ea3a
 810c8c4:	0810eabc 	.word	0x0810eabc

0810c8c8 <__hi0bits>:
 810c8c8:	0c03      	lsrs	r3, r0, #16
 810c8ca:	041b      	lsls	r3, r3, #16
 810c8cc:	b9d3      	cbnz	r3, 810c904 <__hi0bits+0x3c>
 810c8ce:	0400      	lsls	r0, r0, #16
 810c8d0:	2310      	movs	r3, #16
 810c8d2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 810c8d6:	bf04      	itt	eq
 810c8d8:	0200      	lsleq	r0, r0, #8
 810c8da:	3308      	addeq	r3, #8
 810c8dc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 810c8e0:	bf04      	itt	eq
 810c8e2:	0100      	lsleq	r0, r0, #4
 810c8e4:	3304      	addeq	r3, #4
 810c8e6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 810c8ea:	bf04      	itt	eq
 810c8ec:	0080      	lsleq	r0, r0, #2
 810c8ee:	3302      	addeq	r3, #2
 810c8f0:	2800      	cmp	r0, #0
 810c8f2:	db05      	blt.n	810c900 <__hi0bits+0x38>
 810c8f4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 810c8f8:	f103 0301 	add.w	r3, r3, #1
 810c8fc:	bf08      	it	eq
 810c8fe:	2320      	moveq	r3, #32
 810c900:	4618      	mov	r0, r3
 810c902:	4770      	bx	lr
 810c904:	2300      	movs	r3, #0
 810c906:	e7e4      	b.n	810c8d2 <__hi0bits+0xa>

0810c908 <__lo0bits>:
 810c908:	6803      	ldr	r3, [r0, #0]
 810c90a:	f013 0207 	ands.w	r2, r3, #7
 810c90e:	d00c      	beq.n	810c92a <__lo0bits+0x22>
 810c910:	07d9      	lsls	r1, r3, #31
 810c912:	d422      	bmi.n	810c95a <__lo0bits+0x52>
 810c914:	079a      	lsls	r2, r3, #30
 810c916:	bf49      	itett	mi
 810c918:	085b      	lsrmi	r3, r3, #1
 810c91a:	089b      	lsrpl	r3, r3, #2
 810c91c:	6003      	strmi	r3, [r0, #0]
 810c91e:	2201      	movmi	r2, #1
 810c920:	bf5c      	itt	pl
 810c922:	6003      	strpl	r3, [r0, #0]
 810c924:	2202      	movpl	r2, #2
 810c926:	4610      	mov	r0, r2
 810c928:	4770      	bx	lr
 810c92a:	b299      	uxth	r1, r3
 810c92c:	b909      	cbnz	r1, 810c932 <__lo0bits+0x2a>
 810c92e:	0c1b      	lsrs	r3, r3, #16
 810c930:	2210      	movs	r2, #16
 810c932:	b2d9      	uxtb	r1, r3
 810c934:	b909      	cbnz	r1, 810c93a <__lo0bits+0x32>
 810c936:	3208      	adds	r2, #8
 810c938:	0a1b      	lsrs	r3, r3, #8
 810c93a:	0719      	lsls	r1, r3, #28
 810c93c:	bf04      	itt	eq
 810c93e:	091b      	lsreq	r3, r3, #4
 810c940:	3204      	addeq	r2, #4
 810c942:	0799      	lsls	r1, r3, #30
 810c944:	bf04      	itt	eq
 810c946:	089b      	lsreq	r3, r3, #2
 810c948:	3202      	addeq	r2, #2
 810c94a:	07d9      	lsls	r1, r3, #31
 810c94c:	d403      	bmi.n	810c956 <__lo0bits+0x4e>
 810c94e:	085b      	lsrs	r3, r3, #1
 810c950:	f102 0201 	add.w	r2, r2, #1
 810c954:	d003      	beq.n	810c95e <__lo0bits+0x56>
 810c956:	6003      	str	r3, [r0, #0]
 810c958:	e7e5      	b.n	810c926 <__lo0bits+0x1e>
 810c95a:	2200      	movs	r2, #0
 810c95c:	e7e3      	b.n	810c926 <__lo0bits+0x1e>
 810c95e:	2220      	movs	r2, #32
 810c960:	e7e1      	b.n	810c926 <__lo0bits+0x1e>
	...

0810c964 <__i2b>:
 810c964:	b510      	push	{r4, lr}
 810c966:	460c      	mov	r4, r1
 810c968:	2101      	movs	r1, #1
 810c96a:	f7ff febb 	bl	810c6e4 <_Balloc>
 810c96e:	4602      	mov	r2, r0
 810c970:	b928      	cbnz	r0, 810c97e <__i2b+0x1a>
 810c972:	4b05      	ldr	r3, [pc, #20]	; (810c988 <__i2b+0x24>)
 810c974:	4805      	ldr	r0, [pc, #20]	; (810c98c <__i2b+0x28>)
 810c976:	f240 1145 	movw	r1, #325	; 0x145
 810c97a:	f7fe f9f7 	bl	810ad6c <__assert_func>
 810c97e:	2301      	movs	r3, #1
 810c980:	6144      	str	r4, [r0, #20]
 810c982:	6103      	str	r3, [r0, #16]
 810c984:	bd10      	pop	{r4, pc}
 810c986:	bf00      	nop
 810c988:	0810ea3a 	.word	0x0810ea3a
 810c98c:	0810eabc 	.word	0x0810eabc

0810c990 <__multiply>:
 810c990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c994:	4691      	mov	r9, r2
 810c996:	690a      	ldr	r2, [r1, #16]
 810c998:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810c99c:	429a      	cmp	r2, r3
 810c99e:	bfb8      	it	lt
 810c9a0:	460b      	movlt	r3, r1
 810c9a2:	460c      	mov	r4, r1
 810c9a4:	bfbc      	itt	lt
 810c9a6:	464c      	movlt	r4, r9
 810c9a8:	4699      	movlt	r9, r3
 810c9aa:	6927      	ldr	r7, [r4, #16]
 810c9ac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 810c9b0:	68a3      	ldr	r3, [r4, #8]
 810c9b2:	6861      	ldr	r1, [r4, #4]
 810c9b4:	eb07 060a 	add.w	r6, r7, sl
 810c9b8:	42b3      	cmp	r3, r6
 810c9ba:	b085      	sub	sp, #20
 810c9bc:	bfb8      	it	lt
 810c9be:	3101      	addlt	r1, #1
 810c9c0:	f7ff fe90 	bl	810c6e4 <_Balloc>
 810c9c4:	b930      	cbnz	r0, 810c9d4 <__multiply+0x44>
 810c9c6:	4602      	mov	r2, r0
 810c9c8:	4b44      	ldr	r3, [pc, #272]	; (810cadc <__multiply+0x14c>)
 810c9ca:	4845      	ldr	r0, [pc, #276]	; (810cae0 <__multiply+0x150>)
 810c9cc:	f44f 71b1 	mov.w	r1, #354	; 0x162
 810c9d0:	f7fe f9cc 	bl	810ad6c <__assert_func>
 810c9d4:	f100 0514 	add.w	r5, r0, #20
 810c9d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 810c9dc:	462b      	mov	r3, r5
 810c9de:	2200      	movs	r2, #0
 810c9e0:	4543      	cmp	r3, r8
 810c9e2:	d321      	bcc.n	810ca28 <__multiply+0x98>
 810c9e4:	f104 0314 	add.w	r3, r4, #20
 810c9e8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 810c9ec:	f109 0314 	add.w	r3, r9, #20
 810c9f0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 810c9f4:	9202      	str	r2, [sp, #8]
 810c9f6:	1b3a      	subs	r2, r7, r4
 810c9f8:	3a15      	subs	r2, #21
 810c9fa:	f022 0203 	bic.w	r2, r2, #3
 810c9fe:	3204      	adds	r2, #4
 810ca00:	f104 0115 	add.w	r1, r4, #21
 810ca04:	428f      	cmp	r7, r1
 810ca06:	bf38      	it	cc
 810ca08:	2204      	movcc	r2, #4
 810ca0a:	9201      	str	r2, [sp, #4]
 810ca0c:	9a02      	ldr	r2, [sp, #8]
 810ca0e:	9303      	str	r3, [sp, #12]
 810ca10:	429a      	cmp	r2, r3
 810ca12:	d80c      	bhi.n	810ca2e <__multiply+0x9e>
 810ca14:	2e00      	cmp	r6, #0
 810ca16:	dd03      	ble.n	810ca20 <__multiply+0x90>
 810ca18:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 810ca1c:	2b00      	cmp	r3, #0
 810ca1e:	d05b      	beq.n	810cad8 <__multiply+0x148>
 810ca20:	6106      	str	r6, [r0, #16]
 810ca22:	b005      	add	sp, #20
 810ca24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810ca28:	f843 2b04 	str.w	r2, [r3], #4
 810ca2c:	e7d8      	b.n	810c9e0 <__multiply+0x50>
 810ca2e:	f8b3 a000 	ldrh.w	sl, [r3]
 810ca32:	f1ba 0f00 	cmp.w	sl, #0
 810ca36:	d024      	beq.n	810ca82 <__multiply+0xf2>
 810ca38:	f104 0e14 	add.w	lr, r4, #20
 810ca3c:	46a9      	mov	r9, r5
 810ca3e:	f04f 0c00 	mov.w	ip, #0
 810ca42:	f85e 2b04 	ldr.w	r2, [lr], #4
 810ca46:	f8d9 1000 	ldr.w	r1, [r9]
 810ca4a:	fa1f fb82 	uxth.w	fp, r2
 810ca4e:	b289      	uxth	r1, r1
 810ca50:	fb0a 110b 	mla	r1, sl, fp, r1
 810ca54:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 810ca58:	f8d9 2000 	ldr.w	r2, [r9]
 810ca5c:	4461      	add	r1, ip
 810ca5e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 810ca62:	fb0a c20b 	mla	r2, sl, fp, ip
 810ca66:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 810ca6a:	b289      	uxth	r1, r1
 810ca6c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 810ca70:	4577      	cmp	r7, lr
 810ca72:	f849 1b04 	str.w	r1, [r9], #4
 810ca76:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 810ca7a:	d8e2      	bhi.n	810ca42 <__multiply+0xb2>
 810ca7c:	9a01      	ldr	r2, [sp, #4]
 810ca7e:	f845 c002 	str.w	ip, [r5, r2]
 810ca82:	9a03      	ldr	r2, [sp, #12]
 810ca84:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 810ca88:	3304      	adds	r3, #4
 810ca8a:	f1b9 0f00 	cmp.w	r9, #0
 810ca8e:	d021      	beq.n	810cad4 <__multiply+0x144>
 810ca90:	6829      	ldr	r1, [r5, #0]
 810ca92:	f104 0c14 	add.w	ip, r4, #20
 810ca96:	46ae      	mov	lr, r5
 810ca98:	f04f 0a00 	mov.w	sl, #0
 810ca9c:	f8bc b000 	ldrh.w	fp, [ip]
 810caa0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 810caa4:	fb09 220b 	mla	r2, r9, fp, r2
 810caa8:	4452      	add	r2, sl
 810caaa:	b289      	uxth	r1, r1
 810caac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 810cab0:	f84e 1b04 	str.w	r1, [lr], #4
 810cab4:	f85c 1b04 	ldr.w	r1, [ip], #4
 810cab8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 810cabc:	f8be 1000 	ldrh.w	r1, [lr]
 810cac0:	fb09 110a 	mla	r1, r9, sl, r1
 810cac4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 810cac8:	4567      	cmp	r7, ip
 810caca:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 810cace:	d8e5      	bhi.n	810ca9c <__multiply+0x10c>
 810cad0:	9a01      	ldr	r2, [sp, #4]
 810cad2:	50a9      	str	r1, [r5, r2]
 810cad4:	3504      	adds	r5, #4
 810cad6:	e799      	b.n	810ca0c <__multiply+0x7c>
 810cad8:	3e01      	subs	r6, #1
 810cada:	e79b      	b.n	810ca14 <__multiply+0x84>
 810cadc:	0810ea3a 	.word	0x0810ea3a
 810cae0:	0810eabc 	.word	0x0810eabc

0810cae4 <__pow5mult>:
 810cae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810cae8:	4615      	mov	r5, r2
 810caea:	f012 0203 	ands.w	r2, r2, #3
 810caee:	4606      	mov	r6, r0
 810caf0:	460f      	mov	r7, r1
 810caf2:	d007      	beq.n	810cb04 <__pow5mult+0x20>
 810caf4:	4c25      	ldr	r4, [pc, #148]	; (810cb8c <__pow5mult+0xa8>)
 810caf6:	3a01      	subs	r2, #1
 810caf8:	2300      	movs	r3, #0
 810cafa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 810cafe:	f7ff fe53 	bl	810c7a8 <__multadd>
 810cb02:	4607      	mov	r7, r0
 810cb04:	10ad      	asrs	r5, r5, #2
 810cb06:	d03d      	beq.n	810cb84 <__pow5mult+0xa0>
 810cb08:	69f4      	ldr	r4, [r6, #28]
 810cb0a:	b97c      	cbnz	r4, 810cb2c <__pow5mult+0x48>
 810cb0c:	2010      	movs	r0, #16
 810cb0e:	f7ff fc75 	bl	810c3fc <malloc>
 810cb12:	4602      	mov	r2, r0
 810cb14:	61f0      	str	r0, [r6, #28]
 810cb16:	b928      	cbnz	r0, 810cb24 <__pow5mult+0x40>
 810cb18:	4b1d      	ldr	r3, [pc, #116]	; (810cb90 <__pow5mult+0xac>)
 810cb1a:	481e      	ldr	r0, [pc, #120]	; (810cb94 <__pow5mult+0xb0>)
 810cb1c:	f240 11b3 	movw	r1, #435	; 0x1b3
 810cb20:	f7fe f924 	bl	810ad6c <__assert_func>
 810cb24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810cb28:	6004      	str	r4, [r0, #0]
 810cb2a:	60c4      	str	r4, [r0, #12]
 810cb2c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 810cb30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 810cb34:	b94c      	cbnz	r4, 810cb4a <__pow5mult+0x66>
 810cb36:	f240 2171 	movw	r1, #625	; 0x271
 810cb3a:	4630      	mov	r0, r6
 810cb3c:	f7ff ff12 	bl	810c964 <__i2b>
 810cb40:	2300      	movs	r3, #0
 810cb42:	f8c8 0008 	str.w	r0, [r8, #8]
 810cb46:	4604      	mov	r4, r0
 810cb48:	6003      	str	r3, [r0, #0]
 810cb4a:	f04f 0900 	mov.w	r9, #0
 810cb4e:	07eb      	lsls	r3, r5, #31
 810cb50:	d50a      	bpl.n	810cb68 <__pow5mult+0x84>
 810cb52:	4639      	mov	r1, r7
 810cb54:	4622      	mov	r2, r4
 810cb56:	4630      	mov	r0, r6
 810cb58:	f7ff ff1a 	bl	810c990 <__multiply>
 810cb5c:	4639      	mov	r1, r7
 810cb5e:	4680      	mov	r8, r0
 810cb60:	4630      	mov	r0, r6
 810cb62:	f7ff fdff 	bl	810c764 <_Bfree>
 810cb66:	4647      	mov	r7, r8
 810cb68:	106d      	asrs	r5, r5, #1
 810cb6a:	d00b      	beq.n	810cb84 <__pow5mult+0xa0>
 810cb6c:	6820      	ldr	r0, [r4, #0]
 810cb6e:	b938      	cbnz	r0, 810cb80 <__pow5mult+0x9c>
 810cb70:	4622      	mov	r2, r4
 810cb72:	4621      	mov	r1, r4
 810cb74:	4630      	mov	r0, r6
 810cb76:	f7ff ff0b 	bl	810c990 <__multiply>
 810cb7a:	6020      	str	r0, [r4, #0]
 810cb7c:	f8c0 9000 	str.w	r9, [r0]
 810cb80:	4604      	mov	r4, r0
 810cb82:	e7e4      	b.n	810cb4e <__pow5mult+0x6a>
 810cb84:	4638      	mov	r0, r7
 810cb86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810cb8a:	bf00      	nop
 810cb8c:	0810ec08 	.word	0x0810ec08
 810cb90:	0810e7c9 	.word	0x0810e7c9
 810cb94:	0810eabc 	.word	0x0810eabc

0810cb98 <__lshift>:
 810cb98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810cb9c:	460c      	mov	r4, r1
 810cb9e:	6849      	ldr	r1, [r1, #4]
 810cba0:	6923      	ldr	r3, [r4, #16]
 810cba2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 810cba6:	68a3      	ldr	r3, [r4, #8]
 810cba8:	4607      	mov	r7, r0
 810cbaa:	4691      	mov	r9, r2
 810cbac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 810cbb0:	f108 0601 	add.w	r6, r8, #1
 810cbb4:	42b3      	cmp	r3, r6
 810cbb6:	db0b      	blt.n	810cbd0 <__lshift+0x38>
 810cbb8:	4638      	mov	r0, r7
 810cbba:	f7ff fd93 	bl	810c6e4 <_Balloc>
 810cbbe:	4605      	mov	r5, r0
 810cbc0:	b948      	cbnz	r0, 810cbd6 <__lshift+0x3e>
 810cbc2:	4602      	mov	r2, r0
 810cbc4:	4b28      	ldr	r3, [pc, #160]	; (810cc68 <__lshift+0xd0>)
 810cbc6:	4829      	ldr	r0, [pc, #164]	; (810cc6c <__lshift+0xd4>)
 810cbc8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 810cbcc:	f7fe f8ce 	bl	810ad6c <__assert_func>
 810cbd0:	3101      	adds	r1, #1
 810cbd2:	005b      	lsls	r3, r3, #1
 810cbd4:	e7ee      	b.n	810cbb4 <__lshift+0x1c>
 810cbd6:	2300      	movs	r3, #0
 810cbd8:	f100 0114 	add.w	r1, r0, #20
 810cbdc:	f100 0210 	add.w	r2, r0, #16
 810cbe0:	4618      	mov	r0, r3
 810cbe2:	4553      	cmp	r3, sl
 810cbe4:	db33      	blt.n	810cc4e <__lshift+0xb6>
 810cbe6:	6920      	ldr	r0, [r4, #16]
 810cbe8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810cbec:	f104 0314 	add.w	r3, r4, #20
 810cbf0:	f019 091f 	ands.w	r9, r9, #31
 810cbf4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 810cbf8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 810cbfc:	d02b      	beq.n	810cc56 <__lshift+0xbe>
 810cbfe:	f1c9 0e20 	rsb	lr, r9, #32
 810cc02:	468a      	mov	sl, r1
 810cc04:	2200      	movs	r2, #0
 810cc06:	6818      	ldr	r0, [r3, #0]
 810cc08:	fa00 f009 	lsl.w	r0, r0, r9
 810cc0c:	4310      	orrs	r0, r2
 810cc0e:	f84a 0b04 	str.w	r0, [sl], #4
 810cc12:	f853 2b04 	ldr.w	r2, [r3], #4
 810cc16:	459c      	cmp	ip, r3
 810cc18:	fa22 f20e 	lsr.w	r2, r2, lr
 810cc1c:	d8f3      	bhi.n	810cc06 <__lshift+0x6e>
 810cc1e:	ebac 0304 	sub.w	r3, ip, r4
 810cc22:	3b15      	subs	r3, #21
 810cc24:	f023 0303 	bic.w	r3, r3, #3
 810cc28:	3304      	adds	r3, #4
 810cc2a:	f104 0015 	add.w	r0, r4, #21
 810cc2e:	4584      	cmp	ip, r0
 810cc30:	bf38      	it	cc
 810cc32:	2304      	movcc	r3, #4
 810cc34:	50ca      	str	r2, [r1, r3]
 810cc36:	b10a      	cbz	r2, 810cc3c <__lshift+0xa4>
 810cc38:	f108 0602 	add.w	r6, r8, #2
 810cc3c:	3e01      	subs	r6, #1
 810cc3e:	4638      	mov	r0, r7
 810cc40:	612e      	str	r6, [r5, #16]
 810cc42:	4621      	mov	r1, r4
 810cc44:	f7ff fd8e 	bl	810c764 <_Bfree>
 810cc48:	4628      	mov	r0, r5
 810cc4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810cc4e:	f842 0f04 	str.w	r0, [r2, #4]!
 810cc52:	3301      	adds	r3, #1
 810cc54:	e7c5      	b.n	810cbe2 <__lshift+0x4a>
 810cc56:	3904      	subs	r1, #4
 810cc58:	f853 2b04 	ldr.w	r2, [r3], #4
 810cc5c:	f841 2f04 	str.w	r2, [r1, #4]!
 810cc60:	459c      	cmp	ip, r3
 810cc62:	d8f9      	bhi.n	810cc58 <__lshift+0xc0>
 810cc64:	e7ea      	b.n	810cc3c <__lshift+0xa4>
 810cc66:	bf00      	nop
 810cc68:	0810ea3a 	.word	0x0810ea3a
 810cc6c:	0810eabc 	.word	0x0810eabc

0810cc70 <__mcmp>:
 810cc70:	b530      	push	{r4, r5, lr}
 810cc72:	6902      	ldr	r2, [r0, #16]
 810cc74:	690c      	ldr	r4, [r1, #16]
 810cc76:	1b12      	subs	r2, r2, r4
 810cc78:	d10e      	bne.n	810cc98 <__mcmp+0x28>
 810cc7a:	f100 0314 	add.w	r3, r0, #20
 810cc7e:	3114      	adds	r1, #20
 810cc80:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 810cc84:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 810cc88:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 810cc8c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 810cc90:	42a5      	cmp	r5, r4
 810cc92:	d003      	beq.n	810cc9c <__mcmp+0x2c>
 810cc94:	d305      	bcc.n	810cca2 <__mcmp+0x32>
 810cc96:	2201      	movs	r2, #1
 810cc98:	4610      	mov	r0, r2
 810cc9a:	bd30      	pop	{r4, r5, pc}
 810cc9c:	4283      	cmp	r3, r0
 810cc9e:	d3f3      	bcc.n	810cc88 <__mcmp+0x18>
 810cca0:	e7fa      	b.n	810cc98 <__mcmp+0x28>
 810cca2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810cca6:	e7f7      	b.n	810cc98 <__mcmp+0x28>

0810cca8 <__mdiff>:
 810cca8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ccac:	460c      	mov	r4, r1
 810ccae:	4606      	mov	r6, r0
 810ccb0:	4611      	mov	r1, r2
 810ccb2:	4620      	mov	r0, r4
 810ccb4:	4690      	mov	r8, r2
 810ccb6:	f7ff ffdb 	bl	810cc70 <__mcmp>
 810ccba:	1e05      	subs	r5, r0, #0
 810ccbc:	d110      	bne.n	810cce0 <__mdiff+0x38>
 810ccbe:	4629      	mov	r1, r5
 810ccc0:	4630      	mov	r0, r6
 810ccc2:	f7ff fd0f 	bl	810c6e4 <_Balloc>
 810ccc6:	b930      	cbnz	r0, 810ccd6 <__mdiff+0x2e>
 810ccc8:	4b3a      	ldr	r3, [pc, #232]	; (810cdb4 <__mdiff+0x10c>)
 810ccca:	4602      	mov	r2, r0
 810cccc:	f240 2137 	movw	r1, #567	; 0x237
 810ccd0:	4839      	ldr	r0, [pc, #228]	; (810cdb8 <__mdiff+0x110>)
 810ccd2:	f7fe f84b 	bl	810ad6c <__assert_func>
 810ccd6:	2301      	movs	r3, #1
 810ccd8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 810ccdc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810cce0:	bfa4      	itt	ge
 810cce2:	4643      	movge	r3, r8
 810cce4:	46a0      	movge	r8, r4
 810cce6:	4630      	mov	r0, r6
 810cce8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 810ccec:	bfa6      	itte	ge
 810ccee:	461c      	movge	r4, r3
 810ccf0:	2500      	movge	r5, #0
 810ccf2:	2501      	movlt	r5, #1
 810ccf4:	f7ff fcf6 	bl	810c6e4 <_Balloc>
 810ccf8:	b920      	cbnz	r0, 810cd04 <__mdiff+0x5c>
 810ccfa:	4b2e      	ldr	r3, [pc, #184]	; (810cdb4 <__mdiff+0x10c>)
 810ccfc:	4602      	mov	r2, r0
 810ccfe:	f240 2145 	movw	r1, #581	; 0x245
 810cd02:	e7e5      	b.n	810ccd0 <__mdiff+0x28>
 810cd04:	f8d8 7010 	ldr.w	r7, [r8, #16]
 810cd08:	6926      	ldr	r6, [r4, #16]
 810cd0a:	60c5      	str	r5, [r0, #12]
 810cd0c:	f104 0914 	add.w	r9, r4, #20
 810cd10:	f108 0514 	add.w	r5, r8, #20
 810cd14:	f100 0e14 	add.w	lr, r0, #20
 810cd18:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 810cd1c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 810cd20:	f108 0210 	add.w	r2, r8, #16
 810cd24:	46f2      	mov	sl, lr
 810cd26:	2100      	movs	r1, #0
 810cd28:	f859 3b04 	ldr.w	r3, [r9], #4
 810cd2c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 810cd30:	fa11 f88b 	uxtah	r8, r1, fp
 810cd34:	b299      	uxth	r1, r3
 810cd36:	0c1b      	lsrs	r3, r3, #16
 810cd38:	eba8 0801 	sub.w	r8, r8, r1
 810cd3c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 810cd40:	eb03 4328 	add.w	r3, r3, r8, asr #16
 810cd44:	fa1f f888 	uxth.w	r8, r8
 810cd48:	1419      	asrs	r1, r3, #16
 810cd4a:	454e      	cmp	r6, r9
 810cd4c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 810cd50:	f84a 3b04 	str.w	r3, [sl], #4
 810cd54:	d8e8      	bhi.n	810cd28 <__mdiff+0x80>
 810cd56:	1b33      	subs	r3, r6, r4
 810cd58:	3b15      	subs	r3, #21
 810cd5a:	f023 0303 	bic.w	r3, r3, #3
 810cd5e:	3304      	adds	r3, #4
 810cd60:	3415      	adds	r4, #21
 810cd62:	42a6      	cmp	r6, r4
 810cd64:	bf38      	it	cc
 810cd66:	2304      	movcc	r3, #4
 810cd68:	441d      	add	r5, r3
 810cd6a:	4473      	add	r3, lr
 810cd6c:	469e      	mov	lr, r3
 810cd6e:	462e      	mov	r6, r5
 810cd70:	4566      	cmp	r6, ip
 810cd72:	d30e      	bcc.n	810cd92 <__mdiff+0xea>
 810cd74:	f10c 0203 	add.w	r2, ip, #3
 810cd78:	1b52      	subs	r2, r2, r5
 810cd7a:	f022 0203 	bic.w	r2, r2, #3
 810cd7e:	3d03      	subs	r5, #3
 810cd80:	45ac      	cmp	ip, r5
 810cd82:	bf38      	it	cc
 810cd84:	2200      	movcc	r2, #0
 810cd86:	4413      	add	r3, r2
 810cd88:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 810cd8c:	b17a      	cbz	r2, 810cdae <__mdiff+0x106>
 810cd8e:	6107      	str	r7, [r0, #16]
 810cd90:	e7a4      	b.n	810ccdc <__mdiff+0x34>
 810cd92:	f856 8b04 	ldr.w	r8, [r6], #4
 810cd96:	fa11 f288 	uxtah	r2, r1, r8
 810cd9a:	1414      	asrs	r4, r2, #16
 810cd9c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 810cda0:	b292      	uxth	r2, r2
 810cda2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 810cda6:	f84e 2b04 	str.w	r2, [lr], #4
 810cdaa:	1421      	asrs	r1, r4, #16
 810cdac:	e7e0      	b.n	810cd70 <__mdiff+0xc8>
 810cdae:	3f01      	subs	r7, #1
 810cdb0:	e7ea      	b.n	810cd88 <__mdiff+0xe0>
 810cdb2:	bf00      	nop
 810cdb4:	0810ea3a 	.word	0x0810ea3a
 810cdb8:	0810eabc 	.word	0x0810eabc

0810cdbc <__ulp>:
 810cdbc:	b082      	sub	sp, #8
 810cdbe:	ed8d 0b00 	vstr	d0, [sp]
 810cdc2:	9a01      	ldr	r2, [sp, #4]
 810cdc4:	4b0f      	ldr	r3, [pc, #60]	; (810ce04 <__ulp+0x48>)
 810cdc6:	4013      	ands	r3, r2
 810cdc8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 810cdcc:	2b00      	cmp	r3, #0
 810cdce:	dc08      	bgt.n	810cde2 <__ulp+0x26>
 810cdd0:	425b      	negs	r3, r3
 810cdd2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 810cdd6:	ea4f 5223 	mov.w	r2, r3, asr #20
 810cdda:	da04      	bge.n	810cde6 <__ulp+0x2a>
 810cddc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 810cde0:	4113      	asrs	r3, r2
 810cde2:	2200      	movs	r2, #0
 810cde4:	e008      	b.n	810cdf8 <__ulp+0x3c>
 810cde6:	f1a2 0314 	sub.w	r3, r2, #20
 810cdea:	2b1e      	cmp	r3, #30
 810cdec:	bfda      	itte	le
 810cdee:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 810cdf2:	40da      	lsrle	r2, r3
 810cdf4:	2201      	movgt	r2, #1
 810cdf6:	2300      	movs	r3, #0
 810cdf8:	4619      	mov	r1, r3
 810cdfa:	4610      	mov	r0, r2
 810cdfc:	ec41 0b10 	vmov	d0, r0, r1
 810ce00:	b002      	add	sp, #8
 810ce02:	4770      	bx	lr
 810ce04:	7ff00000 	.word	0x7ff00000

0810ce08 <__b2d>:
 810ce08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810ce0c:	6906      	ldr	r6, [r0, #16]
 810ce0e:	f100 0814 	add.w	r8, r0, #20
 810ce12:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 810ce16:	1f37      	subs	r7, r6, #4
 810ce18:	f856 2c04 	ldr.w	r2, [r6, #-4]
 810ce1c:	4610      	mov	r0, r2
 810ce1e:	f7ff fd53 	bl	810c8c8 <__hi0bits>
 810ce22:	f1c0 0320 	rsb	r3, r0, #32
 810ce26:	280a      	cmp	r0, #10
 810ce28:	600b      	str	r3, [r1, #0]
 810ce2a:	491b      	ldr	r1, [pc, #108]	; (810ce98 <__b2d+0x90>)
 810ce2c:	dc15      	bgt.n	810ce5a <__b2d+0x52>
 810ce2e:	f1c0 0c0b 	rsb	ip, r0, #11
 810ce32:	fa22 f30c 	lsr.w	r3, r2, ip
 810ce36:	45b8      	cmp	r8, r7
 810ce38:	ea43 0501 	orr.w	r5, r3, r1
 810ce3c:	bf34      	ite	cc
 810ce3e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 810ce42:	2300      	movcs	r3, #0
 810ce44:	3015      	adds	r0, #21
 810ce46:	fa02 f000 	lsl.w	r0, r2, r0
 810ce4a:	fa23 f30c 	lsr.w	r3, r3, ip
 810ce4e:	4303      	orrs	r3, r0
 810ce50:	461c      	mov	r4, r3
 810ce52:	ec45 4b10 	vmov	d0, r4, r5
 810ce56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810ce5a:	45b8      	cmp	r8, r7
 810ce5c:	bf3a      	itte	cc
 810ce5e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 810ce62:	f1a6 0708 	subcc.w	r7, r6, #8
 810ce66:	2300      	movcs	r3, #0
 810ce68:	380b      	subs	r0, #11
 810ce6a:	d012      	beq.n	810ce92 <__b2d+0x8a>
 810ce6c:	f1c0 0120 	rsb	r1, r0, #32
 810ce70:	fa23 f401 	lsr.w	r4, r3, r1
 810ce74:	4082      	lsls	r2, r0
 810ce76:	4322      	orrs	r2, r4
 810ce78:	4547      	cmp	r7, r8
 810ce7a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 810ce7e:	bf8c      	ite	hi
 810ce80:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 810ce84:	2200      	movls	r2, #0
 810ce86:	4083      	lsls	r3, r0
 810ce88:	40ca      	lsrs	r2, r1
 810ce8a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 810ce8e:	4313      	orrs	r3, r2
 810ce90:	e7de      	b.n	810ce50 <__b2d+0x48>
 810ce92:	ea42 0501 	orr.w	r5, r2, r1
 810ce96:	e7db      	b.n	810ce50 <__b2d+0x48>
 810ce98:	3ff00000 	.word	0x3ff00000

0810ce9c <__d2b>:
 810ce9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 810cea0:	460f      	mov	r7, r1
 810cea2:	2101      	movs	r1, #1
 810cea4:	ec59 8b10 	vmov	r8, r9, d0
 810cea8:	4616      	mov	r6, r2
 810ceaa:	f7ff fc1b 	bl	810c6e4 <_Balloc>
 810ceae:	4604      	mov	r4, r0
 810ceb0:	b930      	cbnz	r0, 810cec0 <__d2b+0x24>
 810ceb2:	4602      	mov	r2, r0
 810ceb4:	4b24      	ldr	r3, [pc, #144]	; (810cf48 <__d2b+0xac>)
 810ceb6:	4825      	ldr	r0, [pc, #148]	; (810cf4c <__d2b+0xb0>)
 810ceb8:	f240 310f 	movw	r1, #783	; 0x30f
 810cebc:	f7fd ff56 	bl	810ad6c <__assert_func>
 810cec0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 810cec4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810cec8:	bb2d      	cbnz	r5, 810cf16 <__d2b+0x7a>
 810ceca:	9301      	str	r3, [sp, #4]
 810cecc:	f1b8 0300 	subs.w	r3, r8, #0
 810ced0:	d026      	beq.n	810cf20 <__d2b+0x84>
 810ced2:	4668      	mov	r0, sp
 810ced4:	9300      	str	r3, [sp, #0]
 810ced6:	f7ff fd17 	bl	810c908 <__lo0bits>
 810ceda:	e9dd 1200 	ldrd	r1, r2, [sp]
 810cede:	b1e8      	cbz	r0, 810cf1c <__d2b+0x80>
 810cee0:	f1c0 0320 	rsb	r3, r0, #32
 810cee4:	fa02 f303 	lsl.w	r3, r2, r3
 810cee8:	430b      	orrs	r3, r1
 810ceea:	40c2      	lsrs	r2, r0
 810ceec:	6163      	str	r3, [r4, #20]
 810ceee:	9201      	str	r2, [sp, #4]
 810cef0:	9b01      	ldr	r3, [sp, #4]
 810cef2:	61a3      	str	r3, [r4, #24]
 810cef4:	2b00      	cmp	r3, #0
 810cef6:	bf14      	ite	ne
 810cef8:	2202      	movne	r2, #2
 810cefa:	2201      	moveq	r2, #1
 810cefc:	6122      	str	r2, [r4, #16]
 810cefe:	b1bd      	cbz	r5, 810cf30 <__d2b+0x94>
 810cf00:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 810cf04:	4405      	add	r5, r0
 810cf06:	603d      	str	r5, [r7, #0]
 810cf08:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 810cf0c:	6030      	str	r0, [r6, #0]
 810cf0e:	4620      	mov	r0, r4
 810cf10:	b003      	add	sp, #12
 810cf12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810cf16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810cf1a:	e7d6      	b.n	810ceca <__d2b+0x2e>
 810cf1c:	6161      	str	r1, [r4, #20]
 810cf1e:	e7e7      	b.n	810cef0 <__d2b+0x54>
 810cf20:	a801      	add	r0, sp, #4
 810cf22:	f7ff fcf1 	bl	810c908 <__lo0bits>
 810cf26:	9b01      	ldr	r3, [sp, #4]
 810cf28:	6163      	str	r3, [r4, #20]
 810cf2a:	3020      	adds	r0, #32
 810cf2c:	2201      	movs	r2, #1
 810cf2e:	e7e5      	b.n	810cefc <__d2b+0x60>
 810cf30:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 810cf34:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 810cf38:	6038      	str	r0, [r7, #0]
 810cf3a:	6918      	ldr	r0, [r3, #16]
 810cf3c:	f7ff fcc4 	bl	810c8c8 <__hi0bits>
 810cf40:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 810cf44:	e7e2      	b.n	810cf0c <__d2b+0x70>
 810cf46:	bf00      	nop
 810cf48:	0810ea3a 	.word	0x0810ea3a
 810cf4c:	0810eabc 	.word	0x0810eabc

0810cf50 <__ratio>:
 810cf50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810cf54:	4688      	mov	r8, r1
 810cf56:	4669      	mov	r1, sp
 810cf58:	4681      	mov	r9, r0
 810cf5a:	f7ff ff55 	bl	810ce08 <__b2d>
 810cf5e:	a901      	add	r1, sp, #4
 810cf60:	4640      	mov	r0, r8
 810cf62:	ec55 4b10 	vmov	r4, r5, d0
 810cf66:	f7ff ff4f 	bl	810ce08 <__b2d>
 810cf6a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810cf6e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 810cf72:	eba3 0c02 	sub.w	ip, r3, r2
 810cf76:	e9dd 3200 	ldrd	r3, r2, [sp]
 810cf7a:	1a9b      	subs	r3, r3, r2
 810cf7c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 810cf80:	ec51 0b10 	vmov	r0, r1, d0
 810cf84:	2b00      	cmp	r3, #0
 810cf86:	bfd6      	itet	le
 810cf88:	460a      	movle	r2, r1
 810cf8a:	462a      	movgt	r2, r5
 810cf8c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 810cf90:	468b      	mov	fp, r1
 810cf92:	462f      	mov	r7, r5
 810cf94:	bfd4      	ite	le
 810cf96:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 810cf9a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 810cf9e:	4620      	mov	r0, r4
 810cfa0:	ee10 2a10 	vmov	r2, s0
 810cfa4:	465b      	mov	r3, fp
 810cfa6:	4639      	mov	r1, r7
 810cfa8:	f7f3 fcd8 	bl	810095c <__aeabi_ddiv>
 810cfac:	ec41 0b10 	vmov	d0, r0, r1
 810cfb0:	b003      	add	sp, #12
 810cfb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810cfb6 <__copybits>:
 810cfb6:	3901      	subs	r1, #1
 810cfb8:	b570      	push	{r4, r5, r6, lr}
 810cfba:	1149      	asrs	r1, r1, #5
 810cfbc:	6914      	ldr	r4, [r2, #16]
 810cfbe:	3101      	adds	r1, #1
 810cfc0:	f102 0314 	add.w	r3, r2, #20
 810cfc4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 810cfc8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 810cfcc:	1f05      	subs	r5, r0, #4
 810cfce:	42a3      	cmp	r3, r4
 810cfd0:	d30c      	bcc.n	810cfec <__copybits+0x36>
 810cfd2:	1aa3      	subs	r3, r4, r2
 810cfd4:	3b11      	subs	r3, #17
 810cfd6:	f023 0303 	bic.w	r3, r3, #3
 810cfda:	3211      	adds	r2, #17
 810cfdc:	42a2      	cmp	r2, r4
 810cfde:	bf88      	it	hi
 810cfe0:	2300      	movhi	r3, #0
 810cfe2:	4418      	add	r0, r3
 810cfe4:	2300      	movs	r3, #0
 810cfe6:	4288      	cmp	r0, r1
 810cfe8:	d305      	bcc.n	810cff6 <__copybits+0x40>
 810cfea:	bd70      	pop	{r4, r5, r6, pc}
 810cfec:	f853 6b04 	ldr.w	r6, [r3], #4
 810cff0:	f845 6f04 	str.w	r6, [r5, #4]!
 810cff4:	e7eb      	b.n	810cfce <__copybits+0x18>
 810cff6:	f840 3b04 	str.w	r3, [r0], #4
 810cffa:	e7f4      	b.n	810cfe6 <__copybits+0x30>

0810cffc <__any_on>:
 810cffc:	f100 0214 	add.w	r2, r0, #20
 810d000:	6900      	ldr	r0, [r0, #16]
 810d002:	114b      	asrs	r3, r1, #5
 810d004:	4298      	cmp	r0, r3
 810d006:	b510      	push	{r4, lr}
 810d008:	db11      	blt.n	810d02e <__any_on+0x32>
 810d00a:	dd0a      	ble.n	810d022 <__any_on+0x26>
 810d00c:	f011 011f 	ands.w	r1, r1, #31
 810d010:	d007      	beq.n	810d022 <__any_on+0x26>
 810d012:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 810d016:	fa24 f001 	lsr.w	r0, r4, r1
 810d01a:	fa00 f101 	lsl.w	r1, r0, r1
 810d01e:	428c      	cmp	r4, r1
 810d020:	d10b      	bne.n	810d03a <__any_on+0x3e>
 810d022:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 810d026:	4293      	cmp	r3, r2
 810d028:	d803      	bhi.n	810d032 <__any_on+0x36>
 810d02a:	2000      	movs	r0, #0
 810d02c:	bd10      	pop	{r4, pc}
 810d02e:	4603      	mov	r3, r0
 810d030:	e7f7      	b.n	810d022 <__any_on+0x26>
 810d032:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810d036:	2900      	cmp	r1, #0
 810d038:	d0f5      	beq.n	810d026 <__any_on+0x2a>
 810d03a:	2001      	movs	r0, #1
 810d03c:	e7f6      	b.n	810d02c <__any_on+0x30>

0810d03e <__sread>:
 810d03e:	b510      	push	{r4, lr}
 810d040:	460c      	mov	r4, r1
 810d042:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810d046:	f000 f8c7 	bl	810d1d8 <_read_r>
 810d04a:	2800      	cmp	r0, #0
 810d04c:	bfab      	itete	ge
 810d04e:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 810d050:	89a3      	ldrhlt	r3, [r4, #12]
 810d052:	181b      	addge	r3, r3, r0
 810d054:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 810d058:	bfac      	ite	ge
 810d05a:	6563      	strge	r3, [r4, #84]	; 0x54
 810d05c:	81a3      	strhlt	r3, [r4, #12]
 810d05e:	bd10      	pop	{r4, pc}

0810d060 <__swrite>:
 810d060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810d064:	461f      	mov	r7, r3
 810d066:	898b      	ldrh	r3, [r1, #12]
 810d068:	05db      	lsls	r3, r3, #23
 810d06a:	4605      	mov	r5, r0
 810d06c:	460c      	mov	r4, r1
 810d06e:	4616      	mov	r6, r2
 810d070:	d505      	bpl.n	810d07e <__swrite+0x1e>
 810d072:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810d076:	2302      	movs	r3, #2
 810d078:	2200      	movs	r2, #0
 810d07a:	f000 f89b 	bl	810d1b4 <_lseek_r>
 810d07e:	89a3      	ldrh	r3, [r4, #12]
 810d080:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810d084:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 810d088:	81a3      	strh	r3, [r4, #12]
 810d08a:	4632      	mov	r2, r6
 810d08c:	463b      	mov	r3, r7
 810d08e:	4628      	mov	r0, r5
 810d090:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810d094:	f000 b8c2 	b.w	810d21c <_write_r>

0810d098 <__sseek>:
 810d098:	b510      	push	{r4, lr}
 810d09a:	460c      	mov	r4, r1
 810d09c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810d0a0:	f000 f888 	bl	810d1b4 <_lseek_r>
 810d0a4:	1c43      	adds	r3, r0, #1
 810d0a6:	89a3      	ldrh	r3, [r4, #12]
 810d0a8:	bf15      	itete	ne
 810d0aa:	6560      	strne	r0, [r4, #84]	; 0x54
 810d0ac:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 810d0b0:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 810d0b4:	81a3      	strheq	r3, [r4, #12]
 810d0b6:	bf18      	it	ne
 810d0b8:	81a3      	strhne	r3, [r4, #12]
 810d0ba:	bd10      	pop	{r4, pc}

0810d0bc <__sclose>:
 810d0bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810d0c0:	f000 b868 	b.w	810d194 <_close_r>

0810d0c4 <fiprintf>:
 810d0c4:	b40e      	push	{r1, r2, r3}
 810d0c6:	b503      	push	{r0, r1, lr}
 810d0c8:	4601      	mov	r1, r0
 810d0ca:	ab03      	add	r3, sp, #12
 810d0cc:	4805      	ldr	r0, [pc, #20]	; (810d0e4 <fiprintf+0x20>)
 810d0ce:	f853 2b04 	ldr.w	r2, [r3], #4
 810d0d2:	6800      	ldr	r0, [r0, #0]
 810d0d4:	9301      	str	r3, [sp, #4]
 810d0d6:	f000 f947 	bl	810d368 <_vfiprintf_r>
 810d0da:	b002      	add	sp, #8
 810d0dc:	f85d eb04 	ldr.w	lr, [sp], #4
 810d0e0:	b003      	add	sp, #12
 810d0e2:	4770      	bx	lr
 810d0e4:	100001d4 	.word	0x100001d4

0810d0e8 <_realloc_r>:
 810d0e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810d0ec:	4680      	mov	r8, r0
 810d0ee:	4614      	mov	r4, r2
 810d0f0:	460e      	mov	r6, r1
 810d0f2:	b921      	cbnz	r1, 810d0fe <_realloc_r+0x16>
 810d0f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810d0f8:	4611      	mov	r1, r2
 810d0fa:	f7ff b9a7 	b.w	810c44c <_malloc_r>
 810d0fe:	b92a      	cbnz	r2, 810d10c <_realloc_r+0x24>
 810d100:	f000 f8bc 	bl	810d27c <_free_r>
 810d104:	4625      	mov	r5, r4
 810d106:	4628      	mov	r0, r5
 810d108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810d10c:	f000 fa46 	bl	810d59c <_malloc_usable_size_r>
 810d110:	4284      	cmp	r4, r0
 810d112:	4607      	mov	r7, r0
 810d114:	d802      	bhi.n	810d11c <_realloc_r+0x34>
 810d116:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 810d11a:	d812      	bhi.n	810d142 <_realloc_r+0x5a>
 810d11c:	4621      	mov	r1, r4
 810d11e:	4640      	mov	r0, r8
 810d120:	f7ff f994 	bl	810c44c <_malloc_r>
 810d124:	4605      	mov	r5, r0
 810d126:	2800      	cmp	r0, #0
 810d128:	d0ed      	beq.n	810d106 <_realloc_r+0x1e>
 810d12a:	42bc      	cmp	r4, r7
 810d12c:	4622      	mov	r2, r4
 810d12e:	4631      	mov	r1, r6
 810d130:	bf28      	it	cs
 810d132:	463a      	movcs	r2, r7
 810d134:	f7fd fdfe 	bl	810ad34 <memcpy>
 810d138:	4631      	mov	r1, r6
 810d13a:	4640      	mov	r0, r8
 810d13c:	f000 f89e 	bl	810d27c <_free_r>
 810d140:	e7e1      	b.n	810d106 <_realloc_r+0x1e>
 810d142:	4635      	mov	r5, r6
 810d144:	e7df      	b.n	810d106 <_realloc_r+0x1e>

0810d146 <__ascii_wctomb>:
 810d146:	b149      	cbz	r1, 810d15c <__ascii_wctomb+0x16>
 810d148:	2aff      	cmp	r2, #255	; 0xff
 810d14a:	bf85      	ittet	hi
 810d14c:	238a      	movhi	r3, #138	; 0x8a
 810d14e:	6003      	strhi	r3, [r0, #0]
 810d150:	700a      	strbls	r2, [r1, #0]
 810d152:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 810d156:	bf98      	it	ls
 810d158:	2001      	movls	r0, #1
 810d15a:	4770      	bx	lr
 810d15c:	4608      	mov	r0, r1
 810d15e:	4770      	bx	lr

0810d160 <memmove>:
 810d160:	4288      	cmp	r0, r1
 810d162:	b510      	push	{r4, lr}
 810d164:	eb01 0402 	add.w	r4, r1, r2
 810d168:	d902      	bls.n	810d170 <memmove+0x10>
 810d16a:	4284      	cmp	r4, r0
 810d16c:	4623      	mov	r3, r4
 810d16e:	d807      	bhi.n	810d180 <memmove+0x20>
 810d170:	1e43      	subs	r3, r0, #1
 810d172:	42a1      	cmp	r1, r4
 810d174:	d008      	beq.n	810d188 <memmove+0x28>
 810d176:	f811 2b01 	ldrb.w	r2, [r1], #1
 810d17a:	f803 2f01 	strb.w	r2, [r3, #1]!
 810d17e:	e7f8      	b.n	810d172 <memmove+0x12>
 810d180:	4402      	add	r2, r0
 810d182:	4601      	mov	r1, r0
 810d184:	428a      	cmp	r2, r1
 810d186:	d100      	bne.n	810d18a <memmove+0x2a>
 810d188:	bd10      	pop	{r4, pc}
 810d18a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810d18e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810d192:	e7f7      	b.n	810d184 <memmove+0x24>

0810d194 <_close_r>:
 810d194:	b538      	push	{r3, r4, r5, lr}
 810d196:	4d06      	ldr	r5, [pc, #24]	; (810d1b0 <_close_r+0x1c>)
 810d198:	2300      	movs	r3, #0
 810d19a:	4604      	mov	r4, r0
 810d19c:	4608      	mov	r0, r1
 810d19e:	602b      	str	r3, [r5, #0]
 810d1a0:	f7f5 f811 	bl	81021c6 <_close>
 810d1a4:	1c43      	adds	r3, r0, #1
 810d1a6:	d102      	bne.n	810d1ae <_close_r+0x1a>
 810d1a8:	682b      	ldr	r3, [r5, #0]
 810d1aa:	b103      	cbz	r3, 810d1ae <_close_r+0x1a>
 810d1ac:	6023      	str	r3, [r4, #0]
 810d1ae:	bd38      	pop	{r3, r4, r5, pc}
 810d1b0:	100004c0 	.word	0x100004c0

0810d1b4 <_lseek_r>:
 810d1b4:	b538      	push	{r3, r4, r5, lr}
 810d1b6:	4d07      	ldr	r5, [pc, #28]	; (810d1d4 <_lseek_r+0x20>)
 810d1b8:	4604      	mov	r4, r0
 810d1ba:	4608      	mov	r0, r1
 810d1bc:	4611      	mov	r1, r2
 810d1be:	2200      	movs	r2, #0
 810d1c0:	602a      	str	r2, [r5, #0]
 810d1c2:	461a      	mov	r2, r3
 810d1c4:	f7f5 f826 	bl	8102214 <_lseek>
 810d1c8:	1c43      	adds	r3, r0, #1
 810d1ca:	d102      	bne.n	810d1d2 <_lseek_r+0x1e>
 810d1cc:	682b      	ldr	r3, [r5, #0]
 810d1ce:	b103      	cbz	r3, 810d1d2 <_lseek_r+0x1e>
 810d1d0:	6023      	str	r3, [r4, #0]
 810d1d2:	bd38      	pop	{r3, r4, r5, pc}
 810d1d4:	100004c0 	.word	0x100004c0

0810d1d8 <_read_r>:
 810d1d8:	b538      	push	{r3, r4, r5, lr}
 810d1da:	4d07      	ldr	r5, [pc, #28]	; (810d1f8 <_read_r+0x20>)
 810d1dc:	4604      	mov	r4, r0
 810d1de:	4608      	mov	r0, r1
 810d1e0:	4611      	mov	r1, r2
 810d1e2:	2200      	movs	r2, #0
 810d1e4:	602a      	str	r2, [r5, #0]
 810d1e6:	461a      	mov	r2, r3
 810d1e8:	f7f4 ffb2 	bl	8102150 <_read>
 810d1ec:	1c43      	adds	r3, r0, #1
 810d1ee:	d102      	bne.n	810d1f6 <_read_r+0x1e>
 810d1f0:	682b      	ldr	r3, [r5, #0]
 810d1f2:	b103      	cbz	r3, 810d1f6 <_read_r+0x1e>
 810d1f4:	6023      	str	r3, [r4, #0]
 810d1f6:	bd38      	pop	{r3, r4, r5, pc}
 810d1f8:	100004c0 	.word	0x100004c0

0810d1fc <_sbrk_r>:
 810d1fc:	b538      	push	{r3, r4, r5, lr}
 810d1fe:	4d06      	ldr	r5, [pc, #24]	; (810d218 <_sbrk_r+0x1c>)
 810d200:	2300      	movs	r3, #0
 810d202:	4604      	mov	r4, r0
 810d204:	4608      	mov	r0, r1
 810d206:	602b      	str	r3, [r5, #0]
 810d208:	f7f5 f812 	bl	8102230 <_sbrk>
 810d20c:	1c43      	adds	r3, r0, #1
 810d20e:	d102      	bne.n	810d216 <_sbrk_r+0x1a>
 810d210:	682b      	ldr	r3, [r5, #0]
 810d212:	b103      	cbz	r3, 810d216 <_sbrk_r+0x1a>
 810d214:	6023      	str	r3, [r4, #0]
 810d216:	bd38      	pop	{r3, r4, r5, pc}
 810d218:	100004c0 	.word	0x100004c0

0810d21c <_write_r>:
 810d21c:	b538      	push	{r3, r4, r5, lr}
 810d21e:	4d07      	ldr	r5, [pc, #28]	; (810d23c <_write_r+0x20>)
 810d220:	4604      	mov	r4, r0
 810d222:	4608      	mov	r0, r1
 810d224:	4611      	mov	r1, r2
 810d226:	2200      	movs	r2, #0
 810d228:	602a      	str	r2, [r5, #0]
 810d22a:	461a      	mov	r2, r3
 810d22c:	f7f4 ffaf 	bl	810218e <_write>
 810d230:	1c43      	adds	r3, r0, #1
 810d232:	d102      	bne.n	810d23a <_write_r+0x1e>
 810d234:	682b      	ldr	r3, [r5, #0]
 810d236:	b103      	cbz	r3, 810d23a <_write_r+0x1e>
 810d238:	6023      	str	r3, [r4, #0]
 810d23a:	bd38      	pop	{r3, r4, r5, pc}
 810d23c:	100004c0 	.word	0x100004c0

0810d240 <abort>:
 810d240:	b508      	push	{r3, lr}
 810d242:	2006      	movs	r0, #6
 810d244:	f000 faf4 	bl	810d830 <raise>
 810d248:	2001      	movs	r0, #1
 810d24a:	f7f4 ff77 	bl	810213c <_exit>

0810d24e <_calloc_r>:
 810d24e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810d250:	fba1 2402 	umull	r2, r4, r1, r2
 810d254:	b94c      	cbnz	r4, 810d26a <_calloc_r+0x1c>
 810d256:	4611      	mov	r1, r2
 810d258:	9201      	str	r2, [sp, #4]
 810d25a:	f7ff f8f7 	bl	810c44c <_malloc_r>
 810d25e:	9a01      	ldr	r2, [sp, #4]
 810d260:	4605      	mov	r5, r0
 810d262:	b930      	cbnz	r0, 810d272 <_calloc_r+0x24>
 810d264:	4628      	mov	r0, r5
 810d266:	b003      	add	sp, #12
 810d268:	bd30      	pop	{r4, r5, pc}
 810d26a:	220c      	movs	r2, #12
 810d26c:	6002      	str	r2, [r0, #0]
 810d26e:	2500      	movs	r5, #0
 810d270:	e7f8      	b.n	810d264 <_calloc_r+0x16>
 810d272:	4621      	mov	r1, r4
 810d274:	f7fd fcfa 	bl	810ac6c <memset>
 810d278:	e7f4      	b.n	810d264 <_calloc_r+0x16>
	...

0810d27c <_free_r>:
 810d27c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810d27e:	2900      	cmp	r1, #0
 810d280:	d044      	beq.n	810d30c <_free_r+0x90>
 810d282:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810d286:	9001      	str	r0, [sp, #4]
 810d288:	2b00      	cmp	r3, #0
 810d28a:	f1a1 0404 	sub.w	r4, r1, #4
 810d28e:	bfb8      	it	lt
 810d290:	18e4      	addlt	r4, r4, r3
 810d292:	f7ff fa1b 	bl	810c6cc <__malloc_lock>
 810d296:	4a1e      	ldr	r2, [pc, #120]	; (810d310 <_free_r+0x94>)
 810d298:	9801      	ldr	r0, [sp, #4]
 810d29a:	6813      	ldr	r3, [r2, #0]
 810d29c:	b933      	cbnz	r3, 810d2ac <_free_r+0x30>
 810d29e:	6063      	str	r3, [r4, #4]
 810d2a0:	6014      	str	r4, [r2, #0]
 810d2a2:	b003      	add	sp, #12
 810d2a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 810d2a8:	f7ff ba16 	b.w	810c6d8 <__malloc_unlock>
 810d2ac:	42a3      	cmp	r3, r4
 810d2ae:	d908      	bls.n	810d2c2 <_free_r+0x46>
 810d2b0:	6825      	ldr	r5, [r4, #0]
 810d2b2:	1961      	adds	r1, r4, r5
 810d2b4:	428b      	cmp	r3, r1
 810d2b6:	bf01      	itttt	eq
 810d2b8:	6819      	ldreq	r1, [r3, #0]
 810d2ba:	685b      	ldreq	r3, [r3, #4]
 810d2bc:	1949      	addeq	r1, r1, r5
 810d2be:	6021      	streq	r1, [r4, #0]
 810d2c0:	e7ed      	b.n	810d29e <_free_r+0x22>
 810d2c2:	461a      	mov	r2, r3
 810d2c4:	685b      	ldr	r3, [r3, #4]
 810d2c6:	b10b      	cbz	r3, 810d2cc <_free_r+0x50>
 810d2c8:	42a3      	cmp	r3, r4
 810d2ca:	d9fa      	bls.n	810d2c2 <_free_r+0x46>
 810d2cc:	6811      	ldr	r1, [r2, #0]
 810d2ce:	1855      	adds	r5, r2, r1
 810d2d0:	42a5      	cmp	r5, r4
 810d2d2:	d10b      	bne.n	810d2ec <_free_r+0x70>
 810d2d4:	6824      	ldr	r4, [r4, #0]
 810d2d6:	4421      	add	r1, r4
 810d2d8:	1854      	adds	r4, r2, r1
 810d2da:	42a3      	cmp	r3, r4
 810d2dc:	6011      	str	r1, [r2, #0]
 810d2de:	d1e0      	bne.n	810d2a2 <_free_r+0x26>
 810d2e0:	681c      	ldr	r4, [r3, #0]
 810d2e2:	685b      	ldr	r3, [r3, #4]
 810d2e4:	6053      	str	r3, [r2, #4]
 810d2e6:	440c      	add	r4, r1
 810d2e8:	6014      	str	r4, [r2, #0]
 810d2ea:	e7da      	b.n	810d2a2 <_free_r+0x26>
 810d2ec:	d902      	bls.n	810d2f4 <_free_r+0x78>
 810d2ee:	230c      	movs	r3, #12
 810d2f0:	6003      	str	r3, [r0, #0]
 810d2f2:	e7d6      	b.n	810d2a2 <_free_r+0x26>
 810d2f4:	6825      	ldr	r5, [r4, #0]
 810d2f6:	1961      	adds	r1, r4, r5
 810d2f8:	428b      	cmp	r3, r1
 810d2fa:	bf04      	itt	eq
 810d2fc:	6819      	ldreq	r1, [r3, #0]
 810d2fe:	685b      	ldreq	r3, [r3, #4]
 810d300:	6063      	str	r3, [r4, #4]
 810d302:	bf04      	itt	eq
 810d304:	1949      	addeq	r1, r1, r5
 810d306:	6021      	streq	r1, [r4, #0]
 810d308:	6054      	str	r4, [r2, #4]
 810d30a:	e7ca      	b.n	810d2a2 <_free_r+0x26>
 810d30c:	b003      	add	sp, #12
 810d30e:	bd30      	pop	{r4, r5, pc}
 810d310:	100004b8 	.word	0x100004b8

0810d314 <__sfputc_r>:
 810d314:	6893      	ldr	r3, [r2, #8]
 810d316:	3b01      	subs	r3, #1
 810d318:	2b00      	cmp	r3, #0
 810d31a:	b410      	push	{r4}
 810d31c:	6093      	str	r3, [r2, #8]
 810d31e:	da08      	bge.n	810d332 <__sfputc_r+0x1e>
 810d320:	6994      	ldr	r4, [r2, #24]
 810d322:	42a3      	cmp	r3, r4
 810d324:	db01      	blt.n	810d32a <__sfputc_r+0x16>
 810d326:	290a      	cmp	r1, #10
 810d328:	d103      	bne.n	810d332 <__sfputc_r+0x1e>
 810d32a:	f85d 4b04 	ldr.w	r4, [sp], #4
 810d32e:	f000 b93d 	b.w	810d5ac <__swbuf_r>
 810d332:	6813      	ldr	r3, [r2, #0]
 810d334:	1c58      	adds	r0, r3, #1
 810d336:	6010      	str	r0, [r2, #0]
 810d338:	7019      	strb	r1, [r3, #0]
 810d33a:	4608      	mov	r0, r1
 810d33c:	f85d 4b04 	ldr.w	r4, [sp], #4
 810d340:	4770      	bx	lr

0810d342 <__sfputs_r>:
 810d342:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810d344:	4606      	mov	r6, r0
 810d346:	460f      	mov	r7, r1
 810d348:	4614      	mov	r4, r2
 810d34a:	18d5      	adds	r5, r2, r3
 810d34c:	42ac      	cmp	r4, r5
 810d34e:	d101      	bne.n	810d354 <__sfputs_r+0x12>
 810d350:	2000      	movs	r0, #0
 810d352:	e007      	b.n	810d364 <__sfputs_r+0x22>
 810d354:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d358:	463a      	mov	r2, r7
 810d35a:	4630      	mov	r0, r6
 810d35c:	f7ff ffda 	bl	810d314 <__sfputc_r>
 810d360:	1c43      	adds	r3, r0, #1
 810d362:	d1f3      	bne.n	810d34c <__sfputs_r+0xa>
 810d364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0810d368 <_vfiprintf_r>:
 810d368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d36c:	460d      	mov	r5, r1
 810d36e:	b09d      	sub	sp, #116	; 0x74
 810d370:	4614      	mov	r4, r2
 810d372:	4698      	mov	r8, r3
 810d374:	4606      	mov	r6, r0
 810d376:	b118      	cbz	r0, 810d380 <_vfiprintf_r+0x18>
 810d378:	6a03      	ldr	r3, [r0, #32]
 810d37a:	b90b      	cbnz	r3, 810d380 <_vfiprintf_r+0x18>
 810d37c:	f7fc fd98 	bl	8109eb0 <__sinit>
 810d380:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810d382:	07d9      	lsls	r1, r3, #31
 810d384:	d405      	bmi.n	810d392 <_vfiprintf_r+0x2a>
 810d386:	89ab      	ldrh	r3, [r5, #12]
 810d388:	059a      	lsls	r2, r3, #22
 810d38a:	d402      	bmi.n	810d392 <_vfiprintf_r+0x2a>
 810d38c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810d38e:	f7fd fccf 	bl	810ad30 <__retarget_lock_acquire_recursive>
 810d392:	89ab      	ldrh	r3, [r5, #12]
 810d394:	071b      	lsls	r3, r3, #28
 810d396:	d501      	bpl.n	810d39c <_vfiprintf_r+0x34>
 810d398:	692b      	ldr	r3, [r5, #16]
 810d39a:	b99b      	cbnz	r3, 810d3c4 <_vfiprintf_r+0x5c>
 810d39c:	4629      	mov	r1, r5
 810d39e:	4630      	mov	r0, r6
 810d3a0:	f000 f942 	bl	810d628 <__swsetup_r>
 810d3a4:	b170      	cbz	r0, 810d3c4 <_vfiprintf_r+0x5c>
 810d3a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810d3a8:	07dc      	lsls	r4, r3, #31
 810d3aa:	d504      	bpl.n	810d3b6 <_vfiprintf_r+0x4e>
 810d3ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810d3b0:	b01d      	add	sp, #116	; 0x74
 810d3b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810d3b6:	89ab      	ldrh	r3, [r5, #12]
 810d3b8:	0598      	lsls	r0, r3, #22
 810d3ba:	d4f7      	bmi.n	810d3ac <_vfiprintf_r+0x44>
 810d3bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810d3be:	f7fd fcb8 	bl	810ad32 <__retarget_lock_release_recursive>
 810d3c2:	e7f3      	b.n	810d3ac <_vfiprintf_r+0x44>
 810d3c4:	2300      	movs	r3, #0
 810d3c6:	9309      	str	r3, [sp, #36]	; 0x24
 810d3c8:	2320      	movs	r3, #32
 810d3ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810d3ce:	f8cd 800c 	str.w	r8, [sp, #12]
 810d3d2:	2330      	movs	r3, #48	; 0x30
 810d3d4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 810d588 <_vfiprintf_r+0x220>
 810d3d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810d3dc:	f04f 0901 	mov.w	r9, #1
 810d3e0:	4623      	mov	r3, r4
 810d3e2:	469a      	mov	sl, r3
 810d3e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 810d3e8:	b10a      	cbz	r2, 810d3ee <_vfiprintf_r+0x86>
 810d3ea:	2a25      	cmp	r2, #37	; 0x25
 810d3ec:	d1f9      	bne.n	810d3e2 <_vfiprintf_r+0x7a>
 810d3ee:	ebba 0b04 	subs.w	fp, sl, r4
 810d3f2:	d00b      	beq.n	810d40c <_vfiprintf_r+0xa4>
 810d3f4:	465b      	mov	r3, fp
 810d3f6:	4622      	mov	r2, r4
 810d3f8:	4629      	mov	r1, r5
 810d3fa:	4630      	mov	r0, r6
 810d3fc:	f7ff ffa1 	bl	810d342 <__sfputs_r>
 810d400:	3001      	adds	r0, #1
 810d402:	f000 80a9 	beq.w	810d558 <_vfiprintf_r+0x1f0>
 810d406:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810d408:	445a      	add	r2, fp
 810d40a:	9209      	str	r2, [sp, #36]	; 0x24
 810d40c:	f89a 3000 	ldrb.w	r3, [sl]
 810d410:	2b00      	cmp	r3, #0
 810d412:	f000 80a1 	beq.w	810d558 <_vfiprintf_r+0x1f0>
 810d416:	2300      	movs	r3, #0
 810d418:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810d41c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810d420:	f10a 0a01 	add.w	sl, sl, #1
 810d424:	9304      	str	r3, [sp, #16]
 810d426:	9307      	str	r3, [sp, #28]
 810d428:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810d42c:	931a      	str	r3, [sp, #104]	; 0x68
 810d42e:	4654      	mov	r4, sl
 810d430:	2205      	movs	r2, #5
 810d432:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d436:	4854      	ldr	r0, [pc, #336]	; (810d588 <_vfiprintf_r+0x220>)
 810d438:	f7f2 ff52 	bl	81002e0 <memchr>
 810d43c:	9a04      	ldr	r2, [sp, #16]
 810d43e:	b9d8      	cbnz	r0, 810d478 <_vfiprintf_r+0x110>
 810d440:	06d1      	lsls	r1, r2, #27
 810d442:	bf44      	itt	mi
 810d444:	2320      	movmi	r3, #32
 810d446:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810d44a:	0713      	lsls	r3, r2, #28
 810d44c:	bf44      	itt	mi
 810d44e:	232b      	movmi	r3, #43	; 0x2b
 810d450:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810d454:	f89a 3000 	ldrb.w	r3, [sl]
 810d458:	2b2a      	cmp	r3, #42	; 0x2a
 810d45a:	d015      	beq.n	810d488 <_vfiprintf_r+0x120>
 810d45c:	9a07      	ldr	r2, [sp, #28]
 810d45e:	4654      	mov	r4, sl
 810d460:	2000      	movs	r0, #0
 810d462:	f04f 0c0a 	mov.w	ip, #10
 810d466:	4621      	mov	r1, r4
 810d468:	f811 3b01 	ldrb.w	r3, [r1], #1
 810d46c:	3b30      	subs	r3, #48	; 0x30
 810d46e:	2b09      	cmp	r3, #9
 810d470:	d94d      	bls.n	810d50e <_vfiprintf_r+0x1a6>
 810d472:	b1b0      	cbz	r0, 810d4a2 <_vfiprintf_r+0x13a>
 810d474:	9207      	str	r2, [sp, #28]
 810d476:	e014      	b.n	810d4a2 <_vfiprintf_r+0x13a>
 810d478:	eba0 0308 	sub.w	r3, r0, r8
 810d47c:	fa09 f303 	lsl.w	r3, r9, r3
 810d480:	4313      	orrs	r3, r2
 810d482:	9304      	str	r3, [sp, #16]
 810d484:	46a2      	mov	sl, r4
 810d486:	e7d2      	b.n	810d42e <_vfiprintf_r+0xc6>
 810d488:	9b03      	ldr	r3, [sp, #12]
 810d48a:	1d19      	adds	r1, r3, #4
 810d48c:	681b      	ldr	r3, [r3, #0]
 810d48e:	9103      	str	r1, [sp, #12]
 810d490:	2b00      	cmp	r3, #0
 810d492:	bfbb      	ittet	lt
 810d494:	425b      	neglt	r3, r3
 810d496:	f042 0202 	orrlt.w	r2, r2, #2
 810d49a:	9307      	strge	r3, [sp, #28]
 810d49c:	9307      	strlt	r3, [sp, #28]
 810d49e:	bfb8      	it	lt
 810d4a0:	9204      	strlt	r2, [sp, #16]
 810d4a2:	7823      	ldrb	r3, [r4, #0]
 810d4a4:	2b2e      	cmp	r3, #46	; 0x2e
 810d4a6:	d10c      	bne.n	810d4c2 <_vfiprintf_r+0x15a>
 810d4a8:	7863      	ldrb	r3, [r4, #1]
 810d4aa:	2b2a      	cmp	r3, #42	; 0x2a
 810d4ac:	d134      	bne.n	810d518 <_vfiprintf_r+0x1b0>
 810d4ae:	9b03      	ldr	r3, [sp, #12]
 810d4b0:	1d1a      	adds	r2, r3, #4
 810d4b2:	681b      	ldr	r3, [r3, #0]
 810d4b4:	9203      	str	r2, [sp, #12]
 810d4b6:	2b00      	cmp	r3, #0
 810d4b8:	bfb8      	it	lt
 810d4ba:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 810d4be:	3402      	adds	r4, #2
 810d4c0:	9305      	str	r3, [sp, #20]
 810d4c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 810d598 <_vfiprintf_r+0x230>
 810d4c6:	7821      	ldrb	r1, [r4, #0]
 810d4c8:	2203      	movs	r2, #3
 810d4ca:	4650      	mov	r0, sl
 810d4cc:	f7f2 ff08 	bl	81002e0 <memchr>
 810d4d0:	b138      	cbz	r0, 810d4e2 <_vfiprintf_r+0x17a>
 810d4d2:	9b04      	ldr	r3, [sp, #16]
 810d4d4:	eba0 000a 	sub.w	r0, r0, sl
 810d4d8:	2240      	movs	r2, #64	; 0x40
 810d4da:	4082      	lsls	r2, r0
 810d4dc:	4313      	orrs	r3, r2
 810d4de:	3401      	adds	r4, #1
 810d4e0:	9304      	str	r3, [sp, #16]
 810d4e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d4e6:	4829      	ldr	r0, [pc, #164]	; (810d58c <_vfiprintf_r+0x224>)
 810d4e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810d4ec:	2206      	movs	r2, #6
 810d4ee:	f7f2 fef7 	bl	81002e0 <memchr>
 810d4f2:	2800      	cmp	r0, #0
 810d4f4:	d03f      	beq.n	810d576 <_vfiprintf_r+0x20e>
 810d4f6:	4b26      	ldr	r3, [pc, #152]	; (810d590 <_vfiprintf_r+0x228>)
 810d4f8:	bb1b      	cbnz	r3, 810d542 <_vfiprintf_r+0x1da>
 810d4fa:	9b03      	ldr	r3, [sp, #12]
 810d4fc:	3307      	adds	r3, #7
 810d4fe:	f023 0307 	bic.w	r3, r3, #7
 810d502:	3308      	adds	r3, #8
 810d504:	9303      	str	r3, [sp, #12]
 810d506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810d508:	443b      	add	r3, r7
 810d50a:	9309      	str	r3, [sp, #36]	; 0x24
 810d50c:	e768      	b.n	810d3e0 <_vfiprintf_r+0x78>
 810d50e:	fb0c 3202 	mla	r2, ip, r2, r3
 810d512:	460c      	mov	r4, r1
 810d514:	2001      	movs	r0, #1
 810d516:	e7a6      	b.n	810d466 <_vfiprintf_r+0xfe>
 810d518:	2300      	movs	r3, #0
 810d51a:	3401      	adds	r4, #1
 810d51c:	9305      	str	r3, [sp, #20]
 810d51e:	4619      	mov	r1, r3
 810d520:	f04f 0c0a 	mov.w	ip, #10
 810d524:	4620      	mov	r0, r4
 810d526:	f810 2b01 	ldrb.w	r2, [r0], #1
 810d52a:	3a30      	subs	r2, #48	; 0x30
 810d52c:	2a09      	cmp	r2, #9
 810d52e:	d903      	bls.n	810d538 <_vfiprintf_r+0x1d0>
 810d530:	2b00      	cmp	r3, #0
 810d532:	d0c6      	beq.n	810d4c2 <_vfiprintf_r+0x15a>
 810d534:	9105      	str	r1, [sp, #20]
 810d536:	e7c4      	b.n	810d4c2 <_vfiprintf_r+0x15a>
 810d538:	fb0c 2101 	mla	r1, ip, r1, r2
 810d53c:	4604      	mov	r4, r0
 810d53e:	2301      	movs	r3, #1
 810d540:	e7f0      	b.n	810d524 <_vfiprintf_r+0x1bc>
 810d542:	ab03      	add	r3, sp, #12
 810d544:	9300      	str	r3, [sp, #0]
 810d546:	462a      	mov	r2, r5
 810d548:	4b12      	ldr	r3, [pc, #72]	; (810d594 <_vfiprintf_r+0x22c>)
 810d54a:	a904      	add	r1, sp, #16
 810d54c:	4630      	mov	r0, r6
 810d54e:	f7fb fdd3 	bl	81090f8 <_printf_float>
 810d552:	4607      	mov	r7, r0
 810d554:	1c78      	adds	r0, r7, #1
 810d556:	d1d6      	bne.n	810d506 <_vfiprintf_r+0x19e>
 810d558:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810d55a:	07d9      	lsls	r1, r3, #31
 810d55c:	d405      	bmi.n	810d56a <_vfiprintf_r+0x202>
 810d55e:	89ab      	ldrh	r3, [r5, #12]
 810d560:	059a      	lsls	r2, r3, #22
 810d562:	d402      	bmi.n	810d56a <_vfiprintf_r+0x202>
 810d564:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810d566:	f7fd fbe4 	bl	810ad32 <__retarget_lock_release_recursive>
 810d56a:	89ab      	ldrh	r3, [r5, #12]
 810d56c:	065b      	lsls	r3, r3, #25
 810d56e:	f53f af1d 	bmi.w	810d3ac <_vfiprintf_r+0x44>
 810d572:	9809      	ldr	r0, [sp, #36]	; 0x24
 810d574:	e71c      	b.n	810d3b0 <_vfiprintf_r+0x48>
 810d576:	ab03      	add	r3, sp, #12
 810d578:	9300      	str	r3, [sp, #0]
 810d57a:	462a      	mov	r2, r5
 810d57c:	4b05      	ldr	r3, [pc, #20]	; (810d594 <_vfiprintf_r+0x22c>)
 810d57e:	a904      	add	r1, sp, #16
 810d580:	4630      	mov	r0, r6
 810d582:	f7fc f85d 	bl	8109640 <_printf_i>
 810d586:	e7e4      	b.n	810d552 <_vfiprintf_r+0x1ea>
 810d588:	0810eaab 	.word	0x0810eaab
 810d58c:	0810eab5 	.word	0x0810eab5
 810d590:	081090f9 	.word	0x081090f9
 810d594:	0810d343 	.word	0x0810d343
 810d598:	0810eab1 	.word	0x0810eab1

0810d59c <_malloc_usable_size_r>:
 810d59c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810d5a0:	1f18      	subs	r0, r3, #4
 810d5a2:	2b00      	cmp	r3, #0
 810d5a4:	bfbc      	itt	lt
 810d5a6:	580b      	ldrlt	r3, [r1, r0]
 810d5a8:	18c0      	addlt	r0, r0, r3
 810d5aa:	4770      	bx	lr

0810d5ac <__swbuf_r>:
 810d5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810d5ae:	460e      	mov	r6, r1
 810d5b0:	4614      	mov	r4, r2
 810d5b2:	4605      	mov	r5, r0
 810d5b4:	b118      	cbz	r0, 810d5be <__swbuf_r+0x12>
 810d5b6:	6a03      	ldr	r3, [r0, #32]
 810d5b8:	b90b      	cbnz	r3, 810d5be <__swbuf_r+0x12>
 810d5ba:	f7fc fc79 	bl	8109eb0 <__sinit>
 810d5be:	69a3      	ldr	r3, [r4, #24]
 810d5c0:	60a3      	str	r3, [r4, #8]
 810d5c2:	89a3      	ldrh	r3, [r4, #12]
 810d5c4:	071a      	lsls	r2, r3, #28
 810d5c6:	d525      	bpl.n	810d614 <__swbuf_r+0x68>
 810d5c8:	6923      	ldr	r3, [r4, #16]
 810d5ca:	b31b      	cbz	r3, 810d614 <__swbuf_r+0x68>
 810d5cc:	6823      	ldr	r3, [r4, #0]
 810d5ce:	6922      	ldr	r2, [r4, #16]
 810d5d0:	1a98      	subs	r0, r3, r2
 810d5d2:	6963      	ldr	r3, [r4, #20]
 810d5d4:	b2f6      	uxtb	r6, r6
 810d5d6:	4283      	cmp	r3, r0
 810d5d8:	4637      	mov	r7, r6
 810d5da:	dc04      	bgt.n	810d5e6 <__swbuf_r+0x3a>
 810d5dc:	4621      	mov	r1, r4
 810d5de:	4628      	mov	r0, r5
 810d5e0:	f7ff f84c 	bl	810c67c <_fflush_r>
 810d5e4:	b9e0      	cbnz	r0, 810d620 <__swbuf_r+0x74>
 810d5e6:	68a3      	ldr	r3, [r4, #8]
 810d5e8:	3b01      	subs	r3, #1
 810d5ea:	60a3      	str	r3, [r4, #8]
 810d5ec:	6823      	ldr	r3, [r4, #0]
 810d5ee:	1c5a      	adds	r2, r3, #1
 810d5f0:	6022      	str	r2, [r4, #0]
 810d5f2:	701e      	strb	r6, [r3, #0]
 810d5f4:	6962      	ldr	r2, [r4, #20]
 810d5f6:	1c43      	adds	r3, r0, #1
 810d5f8:	429a      	cmp	r2, r3
 810d5fa:	d004      	beq.n	810d606 <__swbuf_r+0x5a>
 810d5fc:	89a3      	ldrh	r3, [r4, #12]
 810d5fe:	07db      	lsls	r3, r3, #31
 810d600:	d506      	bpl.n	810d610 <__swbuf_r+0x64>
 810d602:	2e0a      	cmp	r6, #10
 810d604:	d104      	bne.n	810d610 <__swbuf_r+0x64>
 810d606:	4621      	mov	r1, r4
 810d608:	4628      	mov	r0, r5
 810d60a:	f7ff f837 	bl	810c67c <_fflush_r>
 810d60e:	b938      	cbnz	r0, 810d620 <__swbuf_r+0x74>
 810d610:	4638      	mov	r0, r7
 810d612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810d614:	4621      	mov	r1, r4
 810d616:	4628      	mov	r0, r5
 810d618:	f000 f806 	bl	810d628 <__swsetup_r>
 810d61c:	2800      	cmp	r0, #0
 810d61e:	d0d5      	beq.n	810d5cc <__swbuf_r+0x20>
 810d620:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 810d624:	e7f4      	b.n	810d610 <__swbuf_r+0x64>
	...

0810d628 <__swsetup_r>:
 810d628:	b538      	push	{r3, r4, r5, lr}
 810d62a:	4b2a      	ldr	r3, [pc, #168]	; (810d6d4 <__swsetup_r+0xac>)
 810d62c:	4605      	mov	r5, r0
 810d62e:	6818      	ldr	r0, [r3, #0]
 810d630:	460c      	mov	r4, r1
 810d632:	b118      	cbz	r0, 810d63c <__swsetup_r+0x14>
 810d634:	6a03      	ldr	r3, [r0, #32]
 810d636:	b90b      	cbnz	r3, 810d63c <__swsetup_r+0x14>
 810d638:	f7fc fc3a 	bl	8109eb0 <__sinit>
 810d63c:	89a3      	ldrh	r3, [r4, #12]
 810d63e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810d642:	0718      	lsls	r0, r3, #28
 810d644:	d422      	bmi.n	810d68c <__swsetup_r+0x64>
 810d646:	06d9      	lsls	r1, r3, #27
 810d648:	d407      	bmi.n	810d65a <__swsetup_r+0x32>
 810d64a:	2309      	movs	r3, #9
 810d64c:	602b      	str	r3, [r5, #0]
 810d64e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 810d652:	81a3      	strh	r3, [r4, #12]
 810d654:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810d658:	e034      	b.n	810d6c4 <__swsetup_r+0x9c>
 810d65a:	0758      	lsls	r0, r3, #29
 810d65c:	d512      	bpl.n	810d684 <__swsetup_r+0x5c>
 810d65e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810d660:	b141      	cbz	r1, 810d674 <__swsetup_r+0x4c>
 810d662:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810d666:	4299      	cmp	r1, r3
 810d668:	d002      	beq.n	810d670 <__swsetup_r+0x48>
 810d66a:	4628      	mov	r0, r5
 810d66c:	f7ff fe06 	bl	810d27c <_free_r>
 810d670:	2300      	movs	r3, #0
 810d672:	6363      	str	r3, [r4, #52]	; 0x34
 810d674:	89a3      	ldrh	r3, [r4, #12]
 810d676:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 810d67a:	81a3      	strh	r3, [r4, #12]
 810d67c:	2300      	movs	r3, #0
 810d67e:	6063      	str	r3, [r4, #4]
 810d680:	6923      	ldr	r3, [r4, #16]
 810d682:	6023      	str	r3, [r4, #0]
 810d684:	89a3      	ldrh	r3, [r4, #12]
 810d686:	f043 0308 	orr.w	r3, r3, #8
 810d68a:	81a3      	strh	r3, [r4, #12]
 810d68c:	6923      	ldr	r3, [r4, #16]
 810d68e:	b94b      	cbnz	r3, 810d6a4 <__swsetup_r+0x7c>
 810d690:	89a3      	ldrh	r3, [r4, #12]
 810d692:	f403 7320 	and.w	r3, r3, #640	; 0x280
 810d696:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810d69a:	d003      	beq.n	810d6a4 <__swsetup_r+0x7c>
 810d69c:	4621      	mov	r1, r4
 810d69e:	4628      	mov	r0, r5
 810d6a0:	f000 f840 	bl	810d724 <__smakebuf_r>
 810d6a4:	89a0      	ldrh	r0, [r4, #12]
 810d6a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810d6aa:	f010 0301 	ands.w	r3, r0, #1
 810d6ae:	d00a      	beq.n	810d6c6 <__swsetup_r+0x9e>
 810d6b0:	2300      	movs	r3, #0
 810d6b2:	60a3      	str	r3, [r4, #8]
 810d6b4:	6963      	ldr	r3, [r4, #20]
 810d6b6:	425b      	negs	r3, r3
 810d6b8:	61a3      	str	r3, [r4, #24]
 810d6ba:	6923      	ldr	r3, [r4, #16]
 810d6bc:	b943      	cbnz	r3, 810d6d0 <__swsetup_r+0xa8>
 810d6be:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 810d6c2:	d1c4      	bne.n	810d64e <__swsetup_r+0x26>
 810d6c4:	bd38      	pop	{r3, r4, r5, pc}
 810d6c6:	0781      	lsls	r1, r0, #30
 810d6c8:	bf58      	it	pl
 810d6ca:	6963      	ldrpl	r3, [r4, #20]
 810d6cc:	60a3      	str	r3, [r4, #8]
 810d6ce:	e7f4      	b.n	810d6ba <__swsetup_r+0x92>
 810d6d0:	2000      	movs	r0, #0
 810d6d2:	e7f7      	b.n	810d6c4 <__swsetup_r+0x9c>
 810d6d4:	100001d4 	.word	0x100001d4

0810d6d8 <__swhatbuf_r>:
 810d6d8:	b570      	push	{r4, r5, r6, lr}
 810d6da:	460c      	mov	r4, r1
 810d6dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810d6e0:	2900      	cmp	r1, #0
 810d6e2:	b096      	sub	sp, #88	; 0x58
 810d6e4:	4615      	mov	r5, r2
 810d6e6:	461e      	mov	r6, r3
 810d6e8:	da0d      	bge.n	810d706 <__swhatbuf_r+0x2e>
 810d6ea:	89a3      	ldrh	r3, [r4, #12]
 810d6ec:	f013 0f80 	tst.w	r3, #128	; 0x80
 810d6f0:	f04f 0100 	mov.w	r1, #0
 810d6f4:	bf0c      	ite	eq
 810d6f6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 810d6fa:	2340      	movne	r3, #64	; 0x40
 810d6fc:	2000      	movs	r0, #0
 810d6fe:	6031      	str	r1, [r6, #0]
 810d700:	602b      	str	r3, [r5, #0]
 810d702:	b016      	add	sp, #88	; 0x58
 810d704:	bd70      	pop	{r4, r5, r6, pc}
 810d706:	466a      	mov	r2, sp
 810d708:	f000 f848 	bl	810d79c <_fstat_r>
 810d70c:	2800      	cmp	r0, #0
 810d70e:	dbec      	blt.n	810d6ea <__swhatbuf_r+0x12>
 810d710:	9901      	ldr	r1, [sp, #4]
 810d712:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 810d716:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 810d71a:	4259      	negs	r1, r3
 810d71c:	4159      	adcs	r1, r3
 810d71e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810d722:	e7eb      	b.n	810d6fc <__swhatbuf_r+0x24>

0810d724 <__smakebuf_r>:
 810d724:	898b      	ldrh	r3, [r1, #12]
 810d726:	b573      	push	{r0, r1, r4, r5, r6, lr}
 810d728:	079d      	lsls	r5, r3, #30
 810d72a:	4606      	mov	r6, r0
 810d72c:	460c      	mov	r4, r1
 810d72e:	d507      	bpl.n	810d740 <__smakebuf_r+0x1c>
 810d730:	f104 0347 	add.w	r3, r4, #71	; 0x47
 810d734:	6023      	str	r3, [r4, #0]
 810d736:	6123      	str	r3, [r4, #16]
 810d738:	2301      	movs	r3, #1
 810d73a:	6163      	str	r3, [r4, #20]
 810d73c:	b002      	add	sp, #8
 810d73e:	bd70      	pop	{r4, r5, r6, pc}
 810d740:	ab01      	add	r3, sp, #4
 810d742:	466a      	mov	r2, sp
 810d744:	f7ff ffc8 	bl	810d6d8 <__swhatbuf_r>
 810d748:	9900      	ldr	r1, [sp, #0]
 810d74a:	4605      	mov	r5, r0
 810d74c:	4630      	mov	r0, r6
 810d74e:	f7fe fe7d 	bl	810c44c <_malloc_r>
 810d752:	b948      	cbnz	r0, 810d768 <__smakebuf_r+0x44>
 810d754:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810d758:	059a      	lsls	r2, r3, #22
 810d75a:	d4ef      	bmi.n	810d73c <__smakebuf_r+0x18>
 810d75c:	f023 0303 	bic.w	r3, r3, #3
 810d760:	f043 0302 	orr.w	r3, r3, #2
 810d764:	81a3      	strh	r3, [r4, #12]
 810d766:	e7e3      	b.n	810d730 <__smakebuf_r+0xc>
 810d768:	89a3      	ldrh	r3, [r4, #12]
 810d76a:	6020      	str	r0, [r4, #0]
 810d76c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810d770:	81a3      	strh	r3, [r4, #12]
 810d772:	9b00      	ldr	r3, [sp, #0]
 810d774:	6163      	str	r3, [r4, #20]
 810d776:	9b01      	ldr	r3, [sp, #4]
 810d778:	6120      	str	r0, [r4, #16]
 810d77a:	b15b      	cbz	r3, 810d794 <__smakebuf_r+0x70>
 810d77c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810d780:	4630      	mov	r0, r6
 810d782:	f000 f81d 	bl	810d7c0 <_isatty_r>
 810d786:	b128      	cbz	r0, 810d794 <__smakebuf_r+0x70>
 810d788:	89a3      	ldrh	r3, [r4, #12]
 810d78a:	f023 0303 	bic.w	r3, r3, #3
 810d78e:	f043 0301 	orr.w	r3, r3, #1
 810d792:	81a3      	strh	r3, [r4, #12]
 810d794:	89a3      	ldrh	r3, [r4, #12]
 810d796:	431d      	orrs	r5, r3
 810d798:	81a5      	strh	r5, [r4, #12]
 810d79a:	e7cf      	b.n	810d73c <__smakebuf_r+0x18>

0810d79c <_fstat_r>:
 810d79c:	b538      	push	{r3, r4, r5, lr}
 810d79e:	4d07      	ldr	r5, [pc, #28]	; (810d7bc <_fstat_r+0x20>)
 810d7a0:	2300      	movs	r3, #0
 810d7a2:	4604      	mov	r4, r0
 810d7a4:	4608      	mov	r0, r1
 810d7a6:	4611      	mov	r1, r2
 810d7a8:	602b      	str	r3, [r5, #0]
 810d7aa:	f7f4 fd18 	bl	81021de <_fstat>
 810d7ae:	1c43      	adds	r3, r0, #1
 810d7b0:	d102      	bne.n	810d7b8 <_fstat_r+0x1c>
 810d7b2:	682b      	ldr	r3, [r5, #0]
 810d7b4:	b103      	cbz	r3, 810d7b8 <_fstat_r+0x1c>
 810d7b6:	6023      	str	r3, [r4, #0]
 810d7b8:	bd38      	pop	{r3, r4, r5, pc}
 810d7ba:	bf00      	nop
 810d7bc:	100004c0 	.word	0x100004c0

0810d7c0 <_isatty_r>:
 810d7c0:	b538      	push	{r3, r4, r5, lr}
 810d7c2:	4d06      	ldr	r5, [pc, #24]	; (810d7dc <_isatty_r+0x1c>)
 810d7c4:	2300      	movs	r3, #0
 810d7c6:	4604      	mov	r4, r0
 810d7c8:	4608      	mov	r0, r1
 810d7ca:	602b      	str	r3, [r5, #0]
 810d7cc:	f7f4 fd17 	bl	81021fe <_isatty>
 810d7d0:	1c43      	adds	r3, r0, #1
 810d7d2:	d102      	bne.n	810d7da <_isatty_r+0x1a>
 810d7d4:	682b      	ldr	r3, [r5, #0]
 810d7d6:	b103      	cbz	r3, 810d7da <_isatty_r+0x1a>
 810d7d8:	6023      	str	r3, [r4, #0]
 810d7da:	bd38      	pop	{r3, r4, r5, pc}
 810d7dc:	100004c0 	.word	0x100004c0

0810d7e0 <_raise_r>:
 810d7e0:	291f      	cmp	r1, #31
 810d7e2:	b538      	push	{r3, r4, r5, lr}
 810d7e4:	4604      	mov	r4, r0
 810d7e6:	460d      	mov	r5, r1
 810d7e8:	d904      	bls.n	810d7f4 <_raise_r+0x14>
 810d7ea:	2316      	movs	r3, #22
 810d7ec:	6003      	str	r3, [r0, #0]
 810d7ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810d7f2:	bd38      	pop	{r3, r4, r5, pc}
 810d7f4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 810d7f6:	b112      	cbz	r2, 810d7fe <_raise_r+0x1e>
 810d7f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810d7fc:	b94b      	cbnz	r3, 810d812 <_raise_r+0x32>
 810d7fe:	4620      	mov	r0, r4
 810d800:	f000 f830 	bl	810d864 <_getpid_r>
 810d804:	462a      	mov	r2, r5
 810d806:	4601      	mov	r1, r0
 810d808:	4620      	mov	r0, r4
 810d80a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810d80e:	f000 b817 	b.w	810d840 <_kill_r>
 810d812:	2b01      	cmp	r3, #1
 810d814:	d00a      	beq.n	810d82c <_raise_r+0x4c>
 810d816:	1c59      	adds	r1, r3, #1
 810d818:	d103      	bne.n	810d822 <_raise_r+0x42>
 810d81a:	2316      	movs	r3, #22
 810d81c:	6003      	str	r3, [r0, #0]
 810d81e:	2001      	movs	r0, #1
 810d820:	e7e7      	b.n	810d7f2 <_raise_r+0x12>
 810d822:	2400      	movs	r4, #0
 810d824:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 810d828:	4628      	mov	r0, r5
 810d82a:	4798      	blx	r3
 810d82c:	2000      	movs	r0, #0
 810d82e:	e7e0      	b.n	810d7f2 <_raise_r+0x12>

0810d830 <raise>:
 810d830:	4b02      	ldr	r3, [pc, #8]	; (810d83c <raise+0xc>)
 810d832:	4601      	mov	r1, r0
 810d834:	6818      	ldr	r0, [r3, #0]
 810d836:	f7ff bfd3 	b.w	810d7e0 <_raise_r>
 810d83a:	bf00      	nop
 810d83c:	100001d4 	.word	0x100001d4

0810d840 <_kill_r>:
 810d840:	b538      	push	{r3, r4, r5, lr}
 810d842:	4d07      	ldr	r5, [pc, #28]	; (810d860 <_kill_r+0x20>)
 810d844:	2300      	movs	r3, #0
 810d846:	4604      	mov	r4, r0
 810d848:	4608      	mov	r0, r1
 810d84a:	4611      	mov	r1, r2
 810d84c:	602b      	str	r3, [r5, #0]
 810d84e:	f7f4 fc65 	bl	810211c <_kill>
 810d852:	1c43      	adds	r3, r0, #1
 810d854:	d102      	bne.n	810d85c <_kill_r+0x1c>
 810d856:	682b      	ldr	r3, [r5, #0]
 810d858:	b103      	cbz	r3, 810d85c <_kill_r+0x1c>
 810d85a:	6023      	str	r3, [r4, #0]
 810d85c:	bd38      	pop	{r3, r4, r5, pc}
 810d85e:	bf00      	nop
 810d860:	100004c0 	.word	0x100004c0

0810d864 <_getpid_r>:
 810d864:	f7f4 bc52 	b.w	810210c <_getpid>

0810d868 <pow>:
 810d868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810d86a:	ed2d 8b02 	vpush	{d8}
 810d86e:	eeb0 8a40 	vmov.f32	s16, s0
 810d872:	eef0 8a60 	vmov.f32	s17, s1
 810d876:	ec55 4b11 	vmov	r4, r5, d1
 810d87a:	f000 f871 	bl	810d960 <__ieee754_pow>
 810d87e:	4622      	mov	r2, r4
 810d880:	462b      	mov	r3, r5
 810d882:	4620      	mov	r0, r4
 810d884:	4629      	mov	r1, r5
 810d886:	ec57 6b10 	vmov	r6, r7, d0
 810d88a:	f7f3 f9d7 	bl	8100c3c <__aeabi_dcmpun>
 810d88e:	2800      	cmp	r0, #0
 810d890:	d13b      	bne.n	810d90a <pow+0xa2>
 810d892:	ec51 0b18 	vmov	r0, r1, d8
 810d896:	2200      	movs	r2, #0
 810d898:	2300      	movs	r3, #0
 810d89a:	f7f3 f99d 	bl	8100bd8 <__aeabi_dcmpeq>
 810d89e:	b1b8      	cbz	r0, 810d8d0 <pow+0x68>
 810d8a0:	2200      	movs	r2, #0
 810d8a2:	2300      	movs	r3, #0
 810d8a4:	4620      	mov	r0, r4
 810d8a6:	4629      	mov	r1, r5
 810d8a8:	f7f3 f996 	bl	8100bd8 <__aeabi_dcmpeq>
 810d8ac:	2800      	cmp	r0, #0
 810d8ae:	d146      	bne.n	810d93e <pow+0xd6>
 810d8b0:	ec45 4b10 	vmov	d0, r4, r5
 810d8b4:	f000 f848 	bl	810d948 <finite>
 810d8b8:	b338      	cbz	r0, 810d90a <pow+0xa2>
 810d8ba:	2200      	movs	r2, #0
 810d8bc:	2300      	movs	r3, #0
 810d8be:	4620      	mov	r0, r4
 810d8c0:	4629      	mov	r1, r5
 810d8c2:	f7f3 f993 	bl	8100bec <__aeabi_dcmplt>
 810d8c6:	b300      	cbz	r0, 810d90a <pow+0xa2>
 810d8c8:	f7fd fa08 	bl	810acdc <__errno>
 810d8cc:	2322      	movs	r3, #34	; 0x22
 810d8ce:	e01b      	b.n	810d908 <pow+0xa0>
 810d8d0:	ec47 6b10 	vmov	d0, r6, r7
 810d8d4:	f000 f838 	bl	810d948 <finite>
 810d8d8:	b9e0      	cbnz	r0, 810d914 <pow+0xac>
 810d8da:	eeb0 0a48 	vmov.f32	s0, s16
 810d8de:	eef0 0a68 	vmov.f32	s1, s17
 810d8e2:	f000 f831 	bl	810d948 <finite>
 810d8e6:	b1a8      	cbz	r0, 810d914 <pow+0xac>
 810d8e8:	ec45 4b10 	vmov	d0, r4, r5
 810d8ec:	f000 f82c 	bl	810d948 <finite>
 810d8f0:	b180      	cbz	r0, 810d914 <pow+0xac>
 810d8f2:	4632      	mov	r2, r6
 810d8f4:	463b      	mov	r3, r7
 810d8f6:	4630      	mov	r0, r6
 810d8f8:	4639      	mov	r1, r7
 810d8fa:	f7f3 f99f 	bl	8100c3c <__aeabi_dcmpun>
 810d8fe:	2800      	cmp	r0, #0
 810d900:	d0e2      	beq.n	810d8c8 <pow+0x60>
 810d902:	f7fd f9eb 	bl	810acdc <__errno>
 810d906:	2321      	movs	r3, #33	; 0x21
 810d908:	6003      	str	r3, [r0, #0]
 810d90a:	ecbd 8b02 	vpop	{d8}
 810d90e:	ec47 6b10 	vmov	d0, r6, r7
 810d912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810d914:	2200      	movs	r2, #0
 810d916:	2300      	movs	r3, #0
 810d918:	4630      	mov	r0, r6
 810d91a:	4639      	mov	r1, r7
 810d91c:	f7f3 f95c 	bl	8100bd8 <__aeabi_dcmpeq>
 810d920:	2800      	cmp	r0, #0
 810d922:	d0f2      	beq.n	810d90a <pow+0xa2>
 810d924:	eeb0 0a48 	vmov.f32	s0, s16
 810d928:	eef0 0a68 	vmov.f32	s1, s17
 810d92c:	f000 f80c 	bl	810d948 <finite>
 810d930:	2800      	cmp	r0, #0
 810d932:	d0ea      	beq.n	810d90a <pow+0xa2>
 810d934:	ec45 4b10 	vmov	d0, r4, r5
 810d938:	f000 f806 	bl	810d948 <finite>
 810d93c:	e7c3      	b.n	810d8c6 <pow+0x5e>
 810d93e:	4f01      	ldr	r7, [pc, #4]	; (810d944 <pow+0xdc>)
 810d940:	2600      	movs	r6, #0
 810d942:	e7e2      	b.n	810d90a <pow+0xa2>
 810d944:	3ff00000 	.word	0x3ff00000

0810d948 <finite>:
 810d948:	b082      	sub	sp, #8
 810d94a:	ed8d 0b00 	vstr	d0, [sp]
 810d94e:	9801      	ldr	r0, [sp, #4]
 810d950:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 810d954:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 810d958:	0fc0      	lsrs	r0, r0, #31
 810d95a:	b002      	add	sp, #8
 810d95c:	4770      	bx	lr
	...

0810d960 <__ieee754_pow>:
 810d960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d964:	ed2d 8b06 	vpush	{d8-d10}
 810d968:	b089      	sub	sp, #36	; 0x24
 810d96a:	ed8d 1b00 	vstr	d1, [sp]
 810d96e:	e9dd 2900 	ldrd	r2, r9, [sp]
 810d972:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 810d976:	ea58 0102 	orrs.w	r1, r8, r2
 810d97a:	ec57 6b10 	vmov	r6, r7, d0
 810d97e:	d115      	bne.n	810d9ac <__ieee754_pow+0x4c>
 810d980:	19b3      	adds	r3, r6, r6
 810d982:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 810d986:	4152      	adcs	r2, r2
 810d988:	4299      	cmp	r1, r3
 810d98a:	4b89      	ldr	r3, [pc, #548]	; (810dbb0 <__ieee754_pow+0x250>)
 810d98c:	4193      	sbcs	r3, r2
 810d98e:	f080 84d1 	bcs.w	810e334 <__ieee754_pow+0x9d4>
 810d992:	e9dd 2300 	ldrd	r2, r3, [sp]
 810d996:	4630      	mov	r0, r6
 810d998:	4639      	mov	r1, r7
 810d99a:	f7f2 fcff 	bl	810039c <__adddf3>
 810d99e:	ec41 0b10 	vmov	d0, r0, r1
 810d9a2:	b009      	add	sp, #36	; 0x24
 810d9a4:	ecbd 8b06 	vpop	{d8-d10}
 810d9a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810d9ac:	4b81      	ldr	r3, [pc, #516]	; (810dbb4 <__ieee754_pow+0x254>)
 810d9ae:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 810d9b2:	429c      	cmp	r4, r3
 810d9b4:	ee10 aa10 	vmov	sl, s0
 810d9b8:	463d      	mov	r5, r7
 810d9ba:	dc06      	bgt.n	810d9ca <__ieee754_pow+0x6a>
 810d9bc:	d101      	bne.n	810d9c2 <__ieee754_pow+0x62>
 810d9be:	2e00      	cmp	r6, #0
 810d9c0:	d1e7      	bne.n	810d992 <__ieee754_pow+0x32>
 810d9c2:	4598      	cmp	r8, r3
 810d9c4:	dc01      	bgt.n	810d9ca <__ieee754_pow+0x6a>
 810d9c6:	d10f      	bne.n	810d9e8 <__ieee754_pow+0x88>
 810d9c8:	b172      	cbz	r2, 810d9e8 <__ieee754_pow+0x88>
 810d9ca:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 810d9ce:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 810d9d2:	ea55 050a 	orrs.w	r5, r5, sl
 810d9d6:	d1dc      	bne.n	810d992 <__ieee754_pow+0x32>
 810d9d8:	e9dd 3200 	ldrd	r3, r2, [sp]
 810d9dc:	18db      	adds	r3, r3, r3
 810d9de:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 810d9e2:	4152      	adcs	r2, r2
 810d9e4:	429d      	cmp	r5, r3
 810d9e6:	e7d0      	b.n	810d98a <__ieee754_pow+0x2a>
 810d9e8:	2d00      	cmp	r5, #0
 810d9ea:	da3b      	bge.n	810da64 <__ieee754_pow+0x104>
 810d9ec:	4b72      	ldr	r3, [pc, #456]	; (810dbb8 <__ieee754_pow+0x258>)
 810d9ee:	4598      	cmp	r8, r3
 810d9f0:	dc51      	bgt.n	810da96 <__ieee754_pow+0x136>
 810d9f2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 810d9f6:	4598      	cmp	r8, r3
 810d9f8:	f340 84ab 	ble.w	810e352 <__ieee754_pow+0x9f2>
 810d9fc:	ea4f 5328 	mov.w	r3, r8, asr #20
 810da00:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 810da04:	2b14      	cmp	r3, #20
 810da06:	dd0f      	ble.n	810da28 <__ieee754_pow+0xc8>
 810da08:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 810da0c:	fa22 f103 	lsr.w	r1, r2, r3
 810da10:	fa01 f303 	lsl.w	r3, r1, r3
 810da14:	4293      	cmp	r3, r2
 810da16:	f040 849c 	bne.w	810e352 <__ieee754_pow+0x9f2>
 810da1a:	f001 0101 	and.w	r1, r1, #1
 810da1e:	f1c1 0302 	rsb	r3, r1, #2
 810da22:	9304      	str	r3, [sp, #16]
 810da24:	b182      	cbz	r2, 810da48 <__ieee754_pow+0xe8>
 810da26:	e05f      	b.n	810dae8 <__ieee754_pow+0x188>
 810da28:	2a00      	cmp	r2, #0
 810da2a:	d15b      	bne.n	810dae4 <__ieee754_pow+0x184>
 810da2c:	f1c3 0314 	rsb	r3, r3, #20
 810da30:	fa48 f103 	asr.w	r1, r8, r3
 810da34:	fa01 f303 	lsl.w	r3, r1, r3
 810da38:	4543      	cmp	r3, r8
 810da3a:	f040 8487 	bne.w	810e34c <__ieee754_pow+0x9ec>
 810da3e:	f001 0101 	and.w	r1, r1, #1
 810da42:	f1c1 0302 	rsb	r3, r1, #2
 810da46:	9304      	str	r3, [sp, #16]
 810da48:	4b5c      	ldr	r3, [pc, #368]	; (810dbbc <__ieee754_pow+0x25c>)
 810da4a:	4598      	cmp	r8, r3
 810da4c:	d132      	bne.n	810dab4 <__ieee754_pow+0x154>
 810da4e:	f1b9 0f00 	cmp.w	r9, #0
 810da52:	f280 8477 	bge.w	810e344 <__ieee754_pow+0x9e4>
 810da56:	4959      	ldr	r1, [pc, #356]	; (810dbbc <__ieee754_pow+0x25c>)
 810da58:	4632      	mov	r2, r6
 810da5a:	463b      	mov	r3, r7
 810da5c:	2000      	movs	r0, #0
 810da5e:	f7f2 ff7d 	bl	810095c <__aeabi_ddiv>
 810da62:	e79c      	b.n	810d99e <__ieee754_pow+0x3e>
 810da64:	2300      	movs	r3, #0
 810da66:	9304      	str	r3, [sp, #16]
 810da68:	2a00      	cmp	r2, #0
 810da6a:	d13d      	bne.n	810dae8 <__ieee754_pow+0x188>
 810da6c:	4b51      	ldr	r3, [pc, #324]	; (810dbb4 <__ieee754_pow+0x254>)
 810da6e:	4598      	cmp	r8, r3
 810da70:	d1ea      	bne.n	810da48 <__ieee754_pow+0xe8>
 810da72:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 810da76:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 810da7a:	ea53 030a 	orrs.w	r3, r3, sl
 810da7e:	f000 8459 	beq.w	810e334 <__ieee754_pow+0x9d4>
 810da82:	4b4f      	ldr	r3, [pc, #316]	; (810dbc0 <__ieee754_pow+0x260>)
 810da84:	429c      	cmp	r4, r3
 810da86:	dd08      	ble.n	810da9a <__ieee754_pow+0x13a>
 810da88:	f1b9 0f00 	cmp.w	r9, #0
 810da8c:	f2c0 8456 	blt.w	810e33c <__ieee754_pow+0x9dc>
 810da90:	e9dd 0100 	ldrd	r0, r1, [sp]
 810da94:	e783      	b.n	810d99e <__ieee754_pow+0x3e>
 810da96:	2302      	movs	r3, #2
 810da98:	e7e5      	b.n	810da66 <__ieee754_pow+0x106>
 810da9a:	f1b9 0f00 	cmp.w	r9, #0
 810da9e:	f04f 0000 	mov.w	r0, #0
 810daa2:	f04f 0100 	mov.w	r1, #0
 810daa6:	f6bf af7a 	bge.w	810d99e <__ieee754_pow+0x3e>
 810daaa:	e9dd 0300 	ldrd	r0, r3, [sp]
 810daae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 810dab2:	e774      	b.n	810d99e <__ieee754_pow+0x3e>
 810dab4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 810dab8:	d106      	bne.n	810dac8 <__ieee754_pow+0x168>
 810daba:	4632      	mov	r2, r6
 810dabc:	463b      	mov	r3, r7
 810dabe:	4630      	mov	r0, r6
 810dac0:	4639      	mov	r1, r7
 810dac2:	f7f2 fe21 	bl	8100708 <__aeabi_dmul>
 810dac6:	e76a      	b.n	810d99e <__ieee754_pow+0x3e>
 810dac8:	4b3e      	ldr	r3, [pc, #248]	; (810dbc4 <__ieee754_pow+0x264>)
 810daca:	4599      	cmp	r9, r3
 810dacc:	d10c      	bne.n	810dae8 <__ieee754_pow+0x188>
 810dace:	2d00      	cmp	r5, #0
 810dad0:	db0a      	blt.n	810dae8 <__ieee754_pow+0x188>
 810dad2:	ec47 6b10 	vmov	d0, r6, r7
 810dad6:	b009      	add	sp, #36	; 0x24
 810dad8:	ecbd 8b06 	vpop	{d8-d10}
 810dadc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810dae0:	f000 bd20 	b.w	810e524 <__ieee754_sqrt>
 810dae4:	2300      	movs	r3, #0
 810dae6:	9304      	str	r3, [sp, #16]
 810dae8:	ec47 6b10 	vmov	d0, r6, r7
 810daec:	f000 fc92 	bl	810e414 <fabs>
 810daf0:	ec51 0b10 	vmov	r0, r1, d0
 810daf4:	f1ba 0f00 	cmp.w	sl, #0
 810daf8:	d129      	bne.n	810db4e <__ieee754_pow+0x1ee>
 810dafa:	b124      	cbz	r4, 810db06 <__ieee754_pow+0x1a6>
 810dafc:	4b2f      	ldr	r3, [pc, #188]	; (810dbbc <__ieee754_pow+0x25c>)
 810dafe:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 810db02:	429a      	cmp	r2, r3
 810db04:	d123      	bne.n	810db4e <__ieee754_pow+0x1ee>
 810db06:	f1b9 0f00 	cmp.w	r9, #0
 810db0a:	da05      	bge.n	810db18 <__ieee754_pow+0x1b8>
 810db0c:	4602      	mov	r2, r0
 810db0e:	460b      	mov	r3, r1
 810db10:	2000      	movs	r0, #0
 810db12:	492a      	ldr	r1, [pc, #168]	; (810dbbc <__ieee754_pow+0x25c>)
 810db14:	f7f2 ff22 	bl	810095c <__aeabi_ddiv>
 810db18:	2d00      	cmp	r5, #0
 810db1a:	f6bf af40 	bge.w	810d99e <__ieee754_pow+0x3e>
 810db1e:	9b04      	ldr	r3, [sp, #16]
 810db20:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 810db24:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 810db28:	431c      	orrs	r4, r3
 810db2a:	d108      	bne.n	810db3e <__ieee754_pow+0x1de>
 810db2c:	4602      	mov	r2, r0
 810db2e:	460b      	mov	r3, r1
 810db30:	4610      	mov	r0, r2
 810db32:	4619      	mov	r1, r3
 810db34:	f7f2 fc30 	bl	8100398 <__aeabi_dsub>
 810db38:	4602      	mov	r2, r0
 810db3a:	460b      	mov	r3, r1
 810db3c:	e78f      	b.n	810da5e <__ieee754_pow+0xfe>
 810db3e:	9b04      	ldr	r3, [sp, #16]
 810db40:	2b01      	cmp	r3, #1
 810db42:	f47f af2c 	bne.w	810d99e <__ieee754_pow+0x3e>
 810db46:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810db4a:	4619      	mov	r1, r3
 810db4c:	e727      	b.n	810d99e <__ieee754_pow+0x3e>
 810db4e:	0feb      	lsrs	r3, r5, #31
 810db50:	3b01      	subs	r3, #1
 810db52:	9306      	str	r3, [sp, #24]
 810db54:	9a06      	ldr	r2, [sp, #24]
 810db56:	9b04      	ldr	r3, [sp, #16]
 810db58:	4313      	orrs	r3, r2
 810db5a:	d102      	bne.n	810db62 <__ieee754_pow+0x202>
 810db5c:	4632      	mov	r2, r6
 810db5e:	463b      	mov	r3, r7
 810db60:	e7e6      	b.n	810db30 <__ieee754_pow+0x1d0>
 810db62:	4b19      	ldr	r3, [pc, #100]	; (810dbc8 <__ieee754_pow+0x268>)
 810db64:	4598      	cmp	r8, r3
 810db66:	f340 80fb 	ble.w	810dd60 <__ieee754_pow+0x400>
 810db6a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 810db6e:	4598      	cmp	r8, r3
 810db70:	4b13      	ldr	r3, [pc, #76]	; (810dbc0 <__ieee754_pow+0x260>)
 810db72:	dd0c      	ble.n	810db8e <__ieee754_pow+0x22e>
 810db74:	429c      	cmp	r4, r3
 810db76:	dc0f      	bgt.n	810db98 <__ieee754_pow+0x238>
 810db78:	f1b9 0f00 	cmp.w	r9, #0
 810db7c:	da0f      	bge.n	810db9e <__ieee754_pow+0x23e>
 810db7e:	2000      	movs	r0, #0
 810db80:	b009      	add	sp, #36	; 0x24
 810db82:	ecbd 8b06 	vpop	{d8-d10}
 810db86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810db8a:	f000 bc3a 	b.w	810e402 <__math_oflow>
 810db8e:	429c      	cmp	r4, r3
 810db90:	dbf2      	blt.n	810db78 <__ieee754_pow+0x218>
 810db92:	4b0a      	ldr	r3, [pc, #40]	; (810dbbc <__ieee754_pow+0x25c>)
 810db94:	429c      	cmp	r4, r3
 810db96:	dd19      	ble.n	810dbcc <__ieee754_pow+0x26c>
 810db98:	f1b9 0f00 	cmp.w	r9, #0
 810db9c:	dcef      	bgt.n	810db7e <__ieee754_pow+0x21e>
 810db9e:	2000      	movs	r0, #0
 810dba0:	b009      	add	sp, #36	; 0x24
 810dba2:	ecbd 8b06 	vpop	{d8-d10}
 810dba6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810dbaa:	f000 bc21 	b.w	810e3f0 <__math_uflow>
 810dbae:	bf00      	nop
 810dbb0:	fff00000 	.word	0xfff00000
 810dbb4:	7ff00000 	.word	0x7ff00000
 810dbb8:	433fffff 	.word	0x433fffff
 810dbbc:	3ff00000 	.word	0x3ff00000
 810dbc0:	3fefffff 	.word	0x3fefffff
 810dbc4:	3fe00000 	.word	0x3fe00000
 810dbc8:	41e00000 	.word	0x41e00000
 810dbcc:	4b60      	ldr	r3, [pc, #384]	; (810dd50 <__ieee754_pow+0x3f0>)
 810dbce:	2200      	movs	r2, #0
 810dbd0:	f7f2 fbe2 	bl	8100398 <__aeabi_dsub>
 810dbd4:	a354      	add	r3, pc, #336	; (adr r3, 810dd28 <__ieee754_pow+0x3c8>)
 810dbd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 810dbda:	4604      	mov	r4, r0
 810dbdc:	460d      	mov	r5, r1
 810dbde:	f7f2 fd93 	bl	8100708 <__aeabi_dmul>
 810dbe2:	a353      	add	r3, pc, #332	; (adr r3, 810dd30 <__ieee754_pow+0x3d0>)
 810dbe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810dbe8:	4606      	mov	r6, r0
 810dbea:	460f      	mov	r7, r1
 810dbec:	4620      	mov	r0, r4
 810dbee:	4629      	mov	r1, r5
 810dbf0:	f7f2 fd8a 	bl	8100708 <__aeabi_dmul>
 810dbf4:	4b57      	ldr	r3, [pc, #348]	; (810dd54 <__ieee754_pow+0x3f4>)
 810dbf6:	4682      	mov	sl, r0
 810dbf8:	468b      	mov	fp, r1
 810dbfa:	2200      	movs	r2, #0
 810dbfc:	4620      	mov	r0, r4
 810dbfe:	4629      	mov	r1, r5
 810dc00:	f7f2 fd82 	bl	8100708 <__aeabi_dmul>
 810dc04:	4602      	mov	r2, r0
 810dc06:	460b      	mov	r3, r1
 810dc08:	a14b      	add	r1, pc, #300	; (adr r1, 810dd38 <__ieee754_pow+0x3d8>)
 810dc0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 810dc0e:	f7f2 fbc3 	bl	8100398 <__aeabi_dsub>
 810dc12:	4622      	mov	r2, r4
 810dc14:	462b      	mov	r3, r5
 810dc16:	f7f2 fd77 	bl	8100708 <__aeabi_dmul>
 810dc1a:	4602      	mov	r2, r0
 810dc1c:	460b      	mov	r3, r1
 810dc1e:	2000      	movs	r0, #0
 810dc20:	494d      	ldr	r1, [pc, #308]	; (810dd58 <__ieee754_pow+0x3f8>)
 810dc22:	f7f2 fbb9 	bl	8100398 <__aeabi_dsub>
 810dc26:	4622      	mov	r2, r4
 810dc28:	4680      	mov	r8, r0
 810dc2a:	4689      	mov	r9, r1
 810dc2c:	462b      	mov	r3, r5
 810dc2e:	4620      	mov	r0, r4
 810dc30:	4629      	mov	r1, r5
 810dc32:	f7f2 fd69 	bl	8100708 <__aeabi_dmul>
 810dc36:	4602      	mov	r2, r0
 810dc38:	460b      	mov	r3, r1
 810dc3a:	4640      	mov	r0, r8
 810dc3c:	4649      	mov	r1, r9
 810dc3e:	f7f2 fd63 	bl	8100708 <__aeabi_dmul>
 810dc42:	a33f      	add	r3, pc, #252	; (adr r3, 810dd40 <__ieee754_pow+0x3e0>)
 810dc44:	e9d3 2300 	ldrd	r2, r3, [r3]
 810dc48:	f7f2 fd5e 	bl	8100708 <__aeabi_dmul>
 810dc4c:	4602      	mov	r2, r0
 810dc4e:	460b      	mov	r3, r1
 810dc50:	4650      	mov	r0, sl
 810dc52:	4659      	mov	r1, fp
 810dc54:	f7f2 fba0 	bl	8100398 <__aeabi_dsub>
 810dc58:	4602      	mov	r2, r0
 810dc5a:	460b      	mov	r3, r1
 810dc5c:	4680      	mov	r8, r0
 810dc5e:	4689      	mov	r9, r1
 810dc60:	4630      	mov	r0, r6
 810dc62:	4639      	mov	r1, r7
 810dc64:	f7f2 fb9a 	bl	810039c <__adddf3>
 810dc68:	2000      	movs	r0, #0
 810dc6a:	4632      	mov	r2, r6
 810dc6c:	463b      	mov	r3, r7
 810dc6e:	4604      	mov	r4, r0
 810dc70:	460d      	mov	r5, r1
 810dc72:	f7f2 fb91 	bl	8100398 <__aeabi_dsub>
 810dc76:	4602      	mov	r2, r0
 810dc78:	460b      	mov	r3, r1
 810dc7a:	4640      	mov	r0, r8
 810dc7c:	4649      	mov	r1, r9
 810dc7e:	f7f2 fb8b 	bl	8100398 <__aeabi_dsub>
 810dc82:	9b04      	ldr	r3, [sp, #16]
 810dc84:	9a06      	ldr	r2, [sp, #24]
 810dc86:	3b01      	subs	r3, #1
 810dc88:	4313      	orrs	r3, r2
 810dc8a:	4682      	mov	sl, r0
 810dc8c:	468b      	mov	fp, r1
 810dc8e:	f040 81e7 	bne.w	810e060 <__ieee754_pow+0x700>
 810dc92:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 810dd48 <__ieee754_pow+0x3e8>
 810dc96:	eeb0 8a47 	vmov.f32	s16, s14
 810dc9a:	eef0 8a67 	vmov.f32	s17, s15
 810dc9e:	e9dd 6700 	ldrd	r6, r7, [sp]
 810dca2:	2600      	movs	r6, #0
 810dca4:	4632      	mov	r2, r6
 810dca6:	463b      	mov	r3, r7
 810dca8:	e9dd 0100 	ldrd	r0, r1, [sp]
 810dcac:	f7f2 fb74 	bl	8100398 <__aeabi_dsub>
 810dcb0:	4622      	mov	r2, r4
 810dcb2:	462b      	mov	r3, r5
 810dcb4:	f7f2 fd28 	bl	8100708 <__aeabi_dmul>
 810dcb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 810dcbc:	4680      	mov	r8, r0
 810dcbe:	4689      	mov	r9, r1
 810dcc0:	4650      	mov	r0, sl
 810dcc2:	4659      	mov	r1, fp
 810dcc4:	f7f2 fd20 	bl	8100708 <__aeabi_dmul>
 810dcc8:	4602      	mov	r2, r0
 810dcca:	460b      	mov	r3, r1
 810dccc:	4640      	mov	r0, r8
 810dcce:	4649      	mov	r1, r9
 810dcd0:	f7f2 fb64 	bl	810039c <__adddf3>
 810dcd4:	4632      	mov	r2, r6
 810dcd6:	463b      	mov	r3, r7
 810dcd8:	4680      	mov	r8, r0
 810dcda:	4689      	mov	r9, r1
 810dcdc:	4620      	mov	r0, r4
 810dcde:	4629      	mov	r1, r5
 810dce0:	f7f2 fd12 	bl	8100708 <__aeabi_dmul>
 810dce4:	460b      	mov	r3, r1
 810dce6:	4604      	mov	r4, r0
 810dce8:	460d      	mov	r5, r1
 810dcea:	4602      	mov	r2, r0
 810dcec:	4649      	mov	r1, r9
 810dcee:	4640      	mov	r0, r8
 810dcf0:	f7f2 fb54 	bl	810039c <__adddf3>
 810dcf4:	4b19      	ldr	r3, [pc, #100]	; (810dd5c <__ieee754_pow+0x3fc>)
 810dcf6:	4299      	cmp	r1, r3
 810dcf8:	ec45 4b19 	vmov	d9, r4, r5
 810dcfc:	4606      	mov	r6, r0
 810dcfe:	460f      	mov	r7, r1
 810dd00:	468b      	mov	fp, r1
 810dd02:	f340 82f0 	ble.w	810e2e6 <__ieee754_pow+0x986>
 810dd06:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 810dd0a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 810dd0e:	4303      	orrs	r3, r0
 810dd10:	f000 81e4 	beq.w	810e0dc <__ieee754_pow+0x77c>
 810dd14:	ec51 0b18 	vmov	r0, r1, d8
 810dd18:	2200      	movs	r2, #0
 810dd1a:	2300      	movs	r3, #0
 810dd1c:	f7f2 ff66 	bl	8100bec <__aeabi_dcmplt>
 810dd20:	3800      	subs	r0, #0
 810dd22:	bf18      	it	ne
 810dd24:	2001      	movne	r0, #1
 810dd26:	e72b      	b.n	810db80 <__ieee754_pow+0x220>
 810dd28:	60000000 	.word	0x60000000
 810dd2c:	3ff71547 	.word	0x3ff71547
 810dd30:	f85ddf44 	.word	0xf85ddf44
 810dd34:	3e54ae0b 	.word	0x3e54ae0b
 810dd38:	55555555 	.word	0x55555555
 810dd3c:	3fd55555 	.word	0x3fd55555
 810dd40:	652b82fe 	.word	0x652b82fe
 810dd44:	3ff71547 	.word	0x3ff71547
 810dd48:	00000000 	.word	0x00000000
 810dd4c:	bff00000 	.word	0xbff00000
 810dd50:	3ff00000 	.word	0x3ff00000
 810dd54:	3fd00000 	.word	0x3fd00000
 810dd58:	3fe00000 	.word	0x3fe00000
 810dd5c:	408fffff 	.word	0x408fffff
 810dd60:	4bd5      	ldr	r3, [pc, #852]	; (810e0b8 <__ieee754_pow+0x758>)
 810dd62:	402b      	ands	r3, r5
 810dd64:	2200      	movs	r2, #0
 810dd66:	b92b      	cbnz	r3, 810dd74 <__ieee754_pow+0x414>
 810dd68:	4bd4      	ldr	r3, [pc, #848]	; (810e0bc <__ieee754_pow+0x75c>)
 810dd6a:	f7f2 fccd 	bl	8100708 <__aeabi_dmul>
 810dd6e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 810dd72:	460c      	mov	r4, r1
 810dd74:	1523      	asrs	r3, r4, #20
 810dd76:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 810dd7a:	4413      	add	r3, r2
 810dd7c:	9305      	str	r3, [sp, #20]
 810dd7e:	4bd0      	ldr	r3, [pc, #832]	; (810e0c0 <__ieee754_pow+0x760>)
 810dd80:	f3c4 0413 	ubfx	r4, r4, #0, #20
 810dd84:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 810dd88:	429c      	cmp	r4, r3
 810dd8a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 810dd8e:	dd08      	ble.n	810dda2 <__ieee754_pow+0x442>
 810dd90:	4bcc      	ldr	r3, [pc, #816]	; (810e0c4 <__ieee754_pow+0x764>)
 810dd92:	429c      	cmp	r4, r3
 810dd94:	f340 8162 	ble.w	810e05c <__ieee754_pow+0x6fc>
 810dd98:	9b05      	ldr	r3, [sp, #20]
 810dd9a:	3301      	adds	r3, #1
 810dd9c:	9305      	str	r3, [sp, #20]
 810dd9e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 810dda2:	2400      	movs	r4, #0
 810dda4:	00e3      	lsls	r3, r4, #3
 810dda6:	9307      	str	r3, [sp, #28]
 810dda8:	4bc7      	ldr	r3, [pc, #796]	; (810e0c8 <__ieee754_pow+0x768>)
 810ddaa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 810ddae:	ed93 7b00 	vldr	d7, [r3]
 810ddb2:	4629      	mov	r1, r5
 810ddb4:	ec53 2b17 	vmov	r2, r3, d7
 810ddb8:	eeb0 9a47 	vmov.f32	s18, s14
 810ddbc:	eef0 9a67 	vmov.f32	s19, s15
 810ddc0:	4682      	mov	sl, r0
 810ddc2:	f7f2 fae9 	bl	8100398 <__aeabi_dsub>
 810ddc6:	4652      	mov	r2, sl
 810ddc8:	4606      	mov	r6, r0
 810ddca:	460f      	mov	r7, r1
 810ddcc:	462b      	mov	r3, r5
 810ddce:	ec51 0b19 	vmov	r0, r1, d9
 810ddd2:	f7f2 fae3 	bl	810039c <__adddf3>
 810ddd6:	4602      	mov	r2, r0
 810ddd8:	460b      	mov	r3, r1
 810ddda:	2000      	movs	r0, #0
 810dddc:	49bb      	ldr	r1, [pc, #748]	; (810e0cc <__ieee754_pow+0x76c>)
 810ddde:	f7f2 fdbd 	bl	810095c <__aeabi_ddiv>
 810dde2:	ec41 0b1a 	vmov	d10, r0, r1
 810dde6:	4602      	mov	r2, r0
 810dde8:	460b      	mov	r3, r1
 810ddea:	4630      	mov	r0, r6
 810ddec:	4639      	mov	r1, r7
 810ddee:	f7f2 fc8b 	bl	8100708 <__aeabi_dmul>
 810ddf2:	2300      	movs	r3, #0
 810ddf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810ddf8:	9302      	str	r3, [sp, #8]
 810ddfa:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 810ddfe:	46ab      	mov	fp, r5
 810de00:	106d      	asrs	r5, r5, #1
 810de02:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 810de06:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 810de0a:	ec41 0b18 	vmov	d8, r0, r1
 810de0e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 810de12:	2200      	movs	r2, #0
 810de14:	4640      	mov	r0, r8
 810de16:	4649      	mov	r1, r9
 810de18:	4614      	mov	r4, r2
 810de1a:	461d      	mov	r5, r3
 810de1c:	f7f2 fc74 	bl	8100708 <__aeabi_dmul>
 810de20:	4602      	mov	r2, r0
 810de22:	460b      	mov	r3, r1
 810de24:	4630      	mov	r0, r6
 810de26:	4639      	mov	r1, r7
 810de28:	f7f2 fab6 	bl	8100398 <__aeabi_dsub>
 810de2c:	ec53 2b19 	vmov	r2, r3, d9
 810de30:	4606      	mov	r6, r0
 810de32:	460f      	mov	r7, r1
 810de34:	4620      	mov	r0, r4
 810de36:	4629      	mov	r1, r5
 810de38:	f7f2 faae 	bl	8100398 <__aeabi_dsub>
 810de3c:	4602      	mov	r2, r0
 810de3e:	460b      	mov	r3, r1
 810de40:	4650      	mov	r0, sl
 810de42:	4659      	mov	r1, fp
 810de44:	f7f2 faa8 	bl	8100398 <__aeabi_dsub>
 810de48:	4642      	mov	r2, r8
 810de4a:	464b      	mov	r3, r9
 810de4c:	f7f2 fc5c 	bl	8100708 <__aeabi_dmul>
 810de50:	4602      	mov	r2, r0
 810de52:	460b      	mov	r3, r1
 810de54:	4630      	mov	r0, r6
 810de56:	4639      	mov	r1, r7
 810de58:	f7f2 fa9e 	bl	8100398 <__aeabi_dsub>
 810de5c:	ec53 2b1a 	vmov	r2, r3, d10
 810de60:	f7f2 fc52 	bl	8100708 <__aeabi_dmul>
 810de64:	ec53 2b18 	vmov	r2, r3, d8
 810de68:	ec41 0b19 	vmov	d9, r0, r1
 810de6c:	ec51 0b18 	vmov	r0, r1, d8
 810de70:	f7f2 fc4a 	bl	8100708 <__aeabi_dmul>
 810de74:	a37c      	add	r3, pc, #496	; (adr r3, 810e068 <__ieee754_pow+0x708>)
 810de76:	e9d3 2300 	ldrd	r2, r3, [r3]
 810de7a:	4604      	mov	r4, r0
 810de7c:	460d      	mov	r5, r1
 810de7e:	f7f2 fc43 	bl	8100708 <__aeabi_dmul>
 810de82:	a37b      	add	r3, pc, #492	; (adr r3, 810e070 <__ieee754_pow+0x710>)
 810de84:	e9d3 2300 	ldrd	r2, r3, [r3]
 810de88:	f7f2 fa88 	bl	810039c <__adddf3>
 810de8c:	4622      	mov	r2, r4
 810de8e:	462b      	mov	r3, r5
 810de90:	f7f2 fc3a 	bl	8100708 <__aeabi_dmul>
 810de94:	a378      	add	r3, pc, #480	; (adr r3, 810e078 <__ieee754_pow+0x718>)
 810de96:	e9d3 2300 	ldrd	r2, r3, [r3]
 810de9a:	f7f2 fa7f 	bl	810039c <__adddf3>
 810de9e:	4622      	mov	r2, r4
 810dea0:	462b      	mov	r3, r5
 810dea2:	f7f2 fc31 	bl	8100708 <__aeabi_dmul>
 810dea6:	a376      	add	r3, pc, #472	; (adr r3, 810e080 <__ieee754_pow+0x720>)
 810dea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 810deac:	f7f2 fa76 	bl	810039c <__adddf3>
 810deb0:	4622      	mov	r2, r4
 810deb2:	462b      	mov	r3, r5
 810deb4:	f7f2 fc28 	bl	8100708 <__aeabi_dmul>
 810deb8:	a373      	add	r3, pc, #460	; (adr r3, 810e088 <__ieee754_pow+0x728>)
 810deba:	e9d3 2300 	ldrd	r2, r3, [r3]
 810debe:	f7f2 fa6d 	bl	810039c <__adddf3>
 810dec2:	4622      	mov	r2, r4
 810dec4:	462b      	mov	r3, r5
 810dec6:	f7f2 fc1f 	bl	8100708 <__aeabi_dmul>
 810deca:	a371      	add	r3, pc, #452	; (adr r3, 810e090 <__ieee754_pow+0x730>)
 810decc:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ded0:	f7f2 fa64 	bl	810039c <__adddf3>
 810ded4:	4622      	mov	r2, r4
 810ded6:	4606      	mov	r6, r0
 810ded8:	460f      	mov	r7, r1
 810deda:	462b      	mov	r3, r5
 810dedc:	4620      	mov	r0, r4
 810dede:	4629      	mov	r1, r5
 810dee0:	f7f2 fc12 	bl	8100708 <__aeabi_dmul>
 810dee4:	4602      	mov	r2, r0
 810dee6:	460b      	mov	r3, r1
 810dee8:	4630      	mov	r0, r6
 810deea:	4639      	mov	r1, r7
 810deec:	f7f2 fc0c 	bl	8100708 <__aeabi_dmul>
 810def0:	4642      	mov	r2, r8
 810def2:	4604      	mov	r4, r0
 810def4:	460d      	mov	r5, r1
 810def6:	464b      	mov	r3, r9
 810def8:	ec51 0b18 	vmov	r0, r1, d8
 810defc:	f7f2 fa4e 	bl	810039c <__adddf3>
 810df00:	ec53 2b19 	vmov	r2, r3, d9
 810df04:	f7f2 fc00 	bl	8100708 <__aeabi_dmul>
 810df08:	4622      	mov	r2, r4
 810df0a:	462b      	mov	r3, r5
 810df0c:	f7f2 fa46 	bl	810039c <__adddf3>
 810df10:	4642      	mov	r2, r8
 810df12:	4682      	mov	sl, r0
 810df14:	468b      	mov	fp, r1
 810df16:	464b      	mov	r3, r9
 810df18:	4640      	mov	r0, r8
 810df1a:	4649      	mov	r1, r9
 810df1c:	f7f2 fbf4 	bl	8100708 <__aeabi_dmul>
 810df20:	4b6b      	ldr	r3, [pc, #428]	; (810e0d0 <__ieee754_pow+0x770>)
 810df22:	2200      	movs	r2, #0
 810df24:	4606      	mov	r6, r0
 810df26:	460f      	mov	r7, r1
 810df28:	f7f2 fa38 	bl	810039c <__adddf3>
 810df2c:	4652      	mov	r2, sl
 810df2e:	465b      	mov	r3, fp
 810df30:	f7f2 fa34 	bl	810039c <__adddf3>
 810df34:	2000      	movs	r0, #0
 810df36:	4604      	mov	r4, r0
 810df38:	460d      	mov	r5, r1
 810df3a:	4602      	mov	r2, r0
 810df3c:	460b      	mov	r3, r1
 810df3e:	4640      	mov	r0, r8
 810df40:	4649      	mov	r1, r9
 810df42:	f7f2 fbe1 	bl	8100708 <__aeabi_dmul>
 810df46:	4b62      	ldr	r3, [pc, #392]	; (810e0d0 <__ieee754_pow+0x770>)
 810df48:	4680      	mov	r8, r0
 810df4a:	4689      	mov	r9, r1
 810df4c:	2200      	movs	r2, #0
 810df4e:	4620      	mov	r0, r4
 810df50:	4629      	mov	r1, r5
 810df52:	f7f2 fa21 	bl	8100398 <__aeabi_dsub>
 810df56:	4632      	mov	r2, r6
 810df58:	463b      	mov	r3, r7
 810df5a:	f7f2 fa1d 	bl	8100398 <__aeabi_dsub>
 810df5e:	4602      	mov	r2, r0
 810df60:	460b      	mov	r3, r1
 810df62:	4650      	mov	r0, sl
 810df64:	4659      	mov	r1, fp
 810df66:	f7f2 fa17 	bl	8100398 <__aeabi_dsub>
 810df6a:	ec53 2b18 	vmov	r2, r3, d8
 810df6e:	f7f2 fbcb 	bl	8100708 <__aeabi_dmul>
 810df72:	4622      	mov	r2, r4
 810df74:	4606      	mov	r6, r0
 810df76:	460f      	mov	r7, r1
 810df78:	462b      	mov	r3, r5
 810df7a:	ec51 0b19 	vmov	r0, r1, d9
 810df7e:	f7f2 fbc3 	bl	8100708 <__aeabi_dmul>
 810df82:	4602      	mov	r2, r0
 810df84:	460b      	mov	r3, r1
 810df86:	4630      	mov	r0, r6
 810df88:	4639      	mov	r1, r7
 810df8a:	f7f2 fa07 	bl	810039c <__adddf3>
 810df8e:	4606      	mov	r6, r0
 810df90:	460f      	mov	r7, r1
 810df92:	4602      	mov	r2, r0
 810df94:	460b      	mov	r3, r1
 810df96:	4640      	mov	r0, r8
 810df98:	4649      	mov	r1, r9
 810df9a:	f7f2 f9ff 	bl	810039c <__adddf3>
 810df9e:	a33e      	add	r3, pc, #248	; (adr r3, 810e098 <__ieee754_pow+0x738>)
 810dfa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810dfa4:	2000      	movs	r0, #0
 810dfa6:	4604      	mov	r4, r0
 810dfa8:	460d      	mov	r5, r1
 810dfaa:	f7f2 fbad 	bl	8100708 <__aeabi_dmul>
 810dfae:	4642      	mov	r2, r8
 810dfb0:	ec41 0b18 	vmov	d8, r0, r1
 810dfb4:	464b      	mov	r3, r9
 810dfb6:	4620      	mov	r0, r4
 810dfb8:	4629      	mov	r1, r5
 810dfba:	f7f2 f9ed 	bl	8100398 <__aeabi_dsub>
 810dfbe:	4602      	mov	r2, r0
 810dfc0:	460b      	mov	r3, r1
 810dfc2:	4630      	mov	r0, r6
 810dfc4:	4639      	mov	r1, r7
 810dfc6:	f7f2 f9e7 	bl	8100398 <__aeabi_dsub>
 810dfca:	a335      	add	r3, pc, #212	; (adr r3, 810e0a0 <__ieee754_pow+0x740>)
 810dfcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 810dfd0:	f7f2 fb9a 	bl	8100708 <__aeabi_dmul>
 810dfd4:	a334      	add	r3, pc, #208	; (adr r3, 810e0a8 <__ieee754_pow+0x748>)
 810dfd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 810dfda:	4606      	mov	r6, r0
 810dfdc:	460f      	mov	r7, r1
 810dfde:	4620      	mov	r0, r4
 810dfe0:	4629      	mov	r1, r5
 810dfe2:	f7f2 fb91 	bl	8100708 <__aeabi_dmul>
 810dfe6:	4602      	mov	r2, r0
 810dfe8:	460b      	mov	r3, r1
 810dfea:	4630      	mov	r0, r6
 810dfec:	4639      	mov	r1, r7
 810dfee:	f7f2 f9d5 	bl	810039c <__adddf3>
 810dff2:	9a07      	ldr	r2, [sp, #28]
 810dff4:	4b37      	ldr	r3, [pc, #220]	; (810e0d4 <__ieee754_pow+0x774>)
 810dff6:	4413      	add	r3, r2
 810dff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 810dffc:	f7f2 f9ce 	bl	810039c <__adddf3>
 810e000:	4682      	mov	sl, r0
 810e002:	9805      	ldr	r0, [sp, #20]
 810e004:	468b      	mov	fp, r1
 810e006:	f7f2 fb15 	bl	8100634 <__aeabi_i2d>
 810e00a:	9a07      	ldr	r2, [sp, #28]
 810e00c:	4b32      	ldr	r3, [pc, #200]	; (810e0d8 <__ieee754_pow+0x778>)
 810e00e:	4413      	add	r3, r2
 810e010:	e9d3 8900 	ldrd	r8, r9, [r3]
 810e014:	4606      	mov	r6, r0
 810e016:	460f      	mov	r7, r1
 810e018:	4652      	mov	r2, sl
 810e01a:	465b      	mov	r3, fp
 810e01c:	ec51 0b18 	vmov	r0, r1, d8
 810e020:	f7f2 f9bc 	bl	810039c <__adddf3>
 810e024:	4642      	mov	r2, r8
 810e026:	464b      	mov	r3, r9
 810e028:	f7f2 f9b8 	bl	810039c <__adddf3>
 810e02c:	4632      	mov	r2, r6
 810e02e:	463b      	mov	r3, r7
 810e030:	f7f2 f9b4 	bl	810039c <__adddf3>
 810e034:	2000      	movs	r0, #0
 810e036:	4632      	mov	r2, r6
 810e038:	463b      	mov	r3, r7
 810e03a:	4604      	mov	r4, r0
 810e03c:	460d      	mov	r5, r1
 810e03e:	f7f2 f9ab 	bl	8100398 <__aeabi_dsub>
 810e042:	4642      	mov	r2, r8
 810e044:	464b      	mov	r3, r9
 810e046:	f7f2 f9a7 	bl	8100398 <__aeabi_dsub>
 810e04a:	ec53 2b18 	vmov	r2, r3, d8
 810e04e:	f7f2 f9a3 	bl	8100398 <__aeabi_dsub>
 810e052:	4602      	mov	r2, r0
 810e054:	460b      	mov	r3, r1
 810e056:	4650      	mov	r0, sl
 810e058:	4659      	mov	r1, fp
 810e05a:	e610      	b.n	810dc7e <__ieee754_pow+0x31e>
 810e05c:	2401      	movs	r4, #1
 810e05e:	e6a1      	b.n	810dda4 <__ieee754_pow+0x444>
 810e060:	ed9f 7b13 	vldr	d7, [pc, #76]	; 810e0b0 <__ieee754_pow+0x750>
 810e064:	e617      	b.n	810dc96 <__ieee754_pow+0x336>
 810e066:	bf00      	nop
 810e068:	4a454eef 	.word	0x4a454eef
 810e06c:	3fca7e28 	.word	0x3fca7e28
 810e070:	93c9db65 	.word	0x93c9db65
 810e074:	3fcd864a 	.word	0x3fcd864a
 810e078:	a91d4101 	.word	0xa91d4101
 810e07c:	3fd17460 	.word	0x3fd17460
 810e080:	518f264d 	.word	0x518f264d
 810e084:	3fd55555 	.word	0x3fd55555
 810e088:	db6fabff 	.word	0xdb6fabff
 810e08c:	3fdb6db6 	.word	0x3fdb6db6
 810e090:	33333303 	.word	0x33333303
 810e094:	3fe33333 	.word	0x3fe33333
 810e098:	e0000000 	.word	0xe0000000
 810e09c:	3feec709 	.word	0x3feec709
 810e0a0:	dc3a03fd 	.word	0xdc3a03fd
 810e0a4:	3feec709 	.word	0x3feec709
 810e0a8:	145b01f5 	.word	0x145b01f5
 810e0ac:	be3e2fe0 	.word	0xbe3e2fe0
 810e0b0:	00000000 	.word	0x00000000
 810e0b4:	3ff00000 	.word	0x3ff00000
 810e0b8:	7ff00000 	.word	0x7ff00000
 810e0bc:	43400000 	.word	0x43400000
 810e0c0:	0003988e 	.word	0x0003988e
 810e0c4:	000bb679 	.word	0x000bb679
 810e0c8:	0810ec18 	.word	0x0810ec18
 810e0cc:	3ff00000 	.word	0x3ff00000
 810e0d0:	40080000 	.word	0x40080000
 810e0d4:	0810ec38 	.word	0x0810ec38
 810e0d8:	0810ec28 	.word	0x0810ec28
 810e0dc:	a3b3      	add	r3, pc, #716	; (adr r3, 810e3ac <__ieee754_pow+0xa4c>)
 810e0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e0e2:	4640      	mov	r0, r8
 810e0e4:	4649      	mov	r1, r9
 810e0e6:	f7f2 f959 	bl	810039c <__adddf3>
 810e0ea:	4622      	mov	r2, r4
 810e0ec:	ec41 0b1a 	vmov	d10, r0, r1
 810e0f0:	462b      	mov	r3, r5
 810e0f2:	4630      	mov	r0, r6
 810e0f4:	4639      	mov	r1, r7
 810e0f6:	f7f2 f94f 	bl	8100398 <__aeabi_dsub>
 810e0fa:	4602      	mov	r2, r0
 810e0fc:	460b      	mov	r3, r1
 810e0fe:	ec51 0b1a 	vmov	r0, r1, d10
 810e102:	f7f2 fd91 	bl	8100c28 <__aeabi_dcmpgt>
 810e106:	2800      	cmp	r0, #0
 810e108:	f47f ae04 	bne.w	810dd14 <__ieee754_pow+0x3b4>
 810e10c:	4aa2      	ldr	r2, [pc, #648]	; (810e398 <__ieee754_pow+0xa38>)
 810e10e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 810e112:	4293      	cmp	r3, r2
 810e114:	f340 8107 	ble.w	810e326 <__ieee754_pow+0x9c6>
 810e118:	151b      	asrs	r3, r3, #20
 810e11a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 810e11e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 810e122:	fa4a fa03 	asr.w	sl, sl, r3
 810e126:	44da      	add	sl, fp
 810e128:	f3ca 510a 	ubfx	r1, sl, #20, #11
 810e12c:	489b      	ldr	r0, [pc, #620]	; (810e39c <__ieee754_pow+0xa3c>)
 810e12e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 810e132:	4108      	asrs	r0, r1
 810e134:	ea00 030a 	and.w	r3, r0, sl
 810e138:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 810e13c:	f1c1 0114 	rsb	r1, r1, #20
 810e140:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 810e144:	fa4a fa01 	asr.w	sl, sl, r1
 810e148:	f1bb 0f00 	cmp.w	fp, #0
 810e14c:	f04f 0200 	mov.w	r2, #0
 810e150:	4620      	mov	r0, r4
 810e152:	4629      	mov	r1, r5
 810e154:	bfb8      	it	lt
 810e156:	f1ca 0a00 	rsblt	sl, sl, #0
 810e15a:	f7f2 f91d 	bl	8100398 <__aeabi_dsub>
 810e15e:	ec41 0b19 	vmov	d9, r0, r1
 810e162:	4642      	mov	r2, r8
 810e164:	464b      	mov	r3, r9
 810e166:	ec51 0b19 	vmov	r0, r1, d9
 810e16a:	f7f2 f917 	bl	810039c <__adddf3>
 810e16e:	a37a      	add	r3, pc, #488	; (adr r3, 810e358 <__ieee754_pow+0x9f8>)
 810e170:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e174:	2000      	movs	r0, #0
 810e176:	4604      	mov	r4, r0
 810e178:	460d      	mov	r5, r1
 810e17a:	f7f2 fac5 	bl	8100708 <__aeabi_dmul>
 810e17e:	ec53 2b19 	vmov	r2, r3, d9
 810e182:	4606      	mov	r6, r0
 810e184:	460f      	mov	r7, r1
 810e186:	4620      	mov	r0, r4
 810e188:	4629      	mov	r1, r5
 810e18a:	f7f2 f905 	bl	8100398 <__aeabi_dsub>
 810e18e:	4602      	mov	r2, r0
 810e190:	460b      	mov	r3, r1
 810e192:	4640      	mov	r0, r8
 810e194:	4649      	mov	r1, r9
 810e196:	f7f2 f8ff 	bl	8100398 <__aeabi_dsub>
 810e19a:	a371      	add	r3, pc, #452	; (adr r3, 810e360 <__ieee754_pow+0xa00>)
 810e19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e1a0:	f7f2 fab2 	bl	8100708 <__aeabi_dmul>
 810e1a4:	a370      	add	r3, pc, #448	; (adr r3, 810e368 <__ieee754_pow+0xa08>)
 810e1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e1aa:	4680      	mov	r8, r0
 810e1ac:	4689      	mov	r9, r1
 810e1ae:	4620      	mov	r0, r4
 810e1b0:	4629      	mov	r1, r5
 810e1b2:	f7f2 faa9 	bl	8100708 <__aeabi_dmul>
 810e1b6:	4602      	mov	r2, r0
 810e1b8:	460b      	mov	r3, r1
 810e1ba:	4640      	mov	r0, r8
 810e1bc:	4649      	mov	r1, r9
 810e1be:	f7f2 f8ed 	bl	810039c <__adddf3>
 810e1c2:	4604      	mov	r4, r0
 810e1c4:	460d      	mov	r5, r1
 810e1c6:	4602      	mov	r2, r0
 810e1c8:	460b      	mov	r3, r1
 810e1ca:	4630      	mov	r0, r6
 810e1cc:	4639      	mov	r1, r7
 810e1ce:	f7f2 f8e5 	bl	810039c <__adddf3>
 810e1d2:	4632      	mov	r2, r6
 810e1d4:	463b      	mov	r3, r7
 810e1d6:	4680      	mov	r8, r0
 810e1d8:	4689      	mov	r9, r1
 810e1da:	f7f2 f8dd 	bl	8100398 <__aeabi_dsub>
 810e1de:	4602      	mov	r2, r0
 810e1e0:	460b      	mov	r3, r1
 810e1e2:	4620      	mov	r0, r4
 810e1e4:	4629      	mov	r1, r5
 810e1e6:	f7f2 f8d7 	bl	8100398 <__aeabi_dsub>
 810e1ea:	4642      	mov	r2, r8
 810e1ec:	4606      	mov	r6, r0
 810e1ee:	460f      	mov	r7, r1
 810e1f0:	464b      	mov	r3, r9
 810e1f2:	4640      	mov	r0, r8
 810e1f4:	4649      	mov	r1, r9
 810e1f6:	f7f2 fa87 	bl	8100708 <__aeabi_dmul>
 810e1fa:	a35d      	add	r3, pc, #372	; (adr r3, 810e370 <__ieee754_pow+0xa10>)
 810e1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e200:	4604      	mov	r4, r0
 810e202:	460d      	mov	r5, r1
 810e204:	f7f2 fa80 	bl	8100708 <__aeabi_dmul>
 810e208:	a35b      	add	r3, pc, #364	; (adr r3, 810e378 <__ieee754_pow+0xa18>)
 810e20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e20e:	f7f2 f8c3 	bl	8100398 <__aeabi_dsub>
 810e212:	4622      	mov	r2, r4
 810e214:	462b      	mov	r3, r5
 810e216:	f7f2 fa77 	bl	8100708 <__aeabi_dmul>
 810e21a:	a359      	add	r3, pc, #356	; (adr r3, 810e380 <__ieee754_pow+0xa20>)
 810e21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e220:	f7f2 f8bc 	bl	810039c <__adddf3>
 810e224:	4622      	mov	r2, r4
 810e226:	462b      	mov	r3, r5
 810e228:	f7f2 fa6e 	bl	8100708 <__aeabi_dmul>
 810e22c:	a356      	add	r3, pc, #344	; (adr r3, 810e388 <__ieee754_pow+0xa28>)
 810e22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e232:	f7f2 f8b1 	bl	8100398 <__aeabi_dsub>
 810e236:	4622      	mov	r2, r4
 810e238:	462b      	mov	r3, r5
 810e23a:	f7f2 fa65 	bl	8100708 <__aeabi_dmul>
 810e23e:	a354      	add	r3, pc, #336	; (adr r3, 810e390 <__ieee754_pow+0xa30>)
 810e240:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e244:	f7f2 f8aa 	bl	810039c <__adddf3>
 810e248:	4622      	mov	r2, r4
 810e24a:	462b      	mov	r3, r5
 810e24c:	f7f2 fa5c 	bl	8100708 <__aeabi_dmul>
 810e250:	4602      	mov	r2, r0
 810e252:	460b      	mov	r3, r1
 810e254:	4640      	mov	r0, r8
 810e256:	4649      	mov	r1, r9
 810e258:	f7f2 f89e 	bl	8100398 <__aeabi_dsub>
 810e25c:	4604      	mov	r4, r0
 810e25e:	460d      	mov	r5, r1
 810e260:	4602      	mov	r2, r0
 810e262:	460b      	mov	r3, r1
 810e264:	4640      	mov	r0, r8
 810e266:	4649      	mov	r1, r9
 810e268:	f7f2 fa4e 	bl	8100708 <__aeabi_dmul>
 810e26c:	2200      	movs	r2, #0
 810e26e:	ec41 0b19 	vmov	d9, r0, r1
 810e272:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 810e276:	4620      	mov	r0, r4
 810e278:	4629      	mov	r1, r5
 810e27a:	f7f2 f88d 	bl	8100398 <__aeabi_dsub>
 810e27e:	4602      	mov	r2, r0
 810e280:	460b      	mov	r3, r1
 810e282:	ec51 0b19 	vmov	r0, r1, d9
 810e286:	f7f2 fb69 	bl	810095c <__aeabi_ddiv>
 810e28a:	4632      	mov	r2, r6
 810e28c:	4604      	mov	r4, r0
 810e28e:	460d      	mov	r5, r1
 810e290:	463b      	mov	r3, r7
 810e292:	4640      	mov	r0, r8
 810e294:	4649      	mov	r1, r9
 810e296:	f7f2 fa37 	bl	8100708 <__aeabi_dmul>
 810e29a:	4632      	mov	r2, r6
 810e29c:	463b      	mov	r3, r7
 810e29e:	f7f2 f87d 	bl	810039c <__adddf3>
 810e2a2:	4602      	mov	r2, r0
 810e2a4:	460b      	mov	r3, r1
 810e2a6:	4620      	mov	r0, r4
 810e2a8:	4629      	mov	r1, r5
 810e2aa:	f7f2 f875 	bl	8100398 <__aeabi_dsub>
 810e2ae:	4642      	mov	r2, r8
 810e2b0:	464b      	mov	r3, r9
 810e2b2:	f7f2 f871 	bl	8100398 <__aeabi_dsub>
 810e2b6:	460b      	mov	r3, r1
 810e2b8:	4602      	mov	r2, r0
 810e2ba:	4939      	ldr	r1, [pc, #228]	; (810e3a0 <__ieee754_pow+0xa40>)
 810e2bc:	2000      	movs	r0, #0
 810e2be:	f7f2 f86b 	bl	8100398 <__aeabi_dsub>
 810e2c2:	ec41 0b10 	vmov	d0, r0, r1
 810e2c6:	ee10 3a90 	vmov	r3, s1
 810e2ca:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 810e2ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810e2d2:	da2b      	bge.n	810e32c <__ieee754_pow+0x9cc>
 810e2d4:	4650      	mov	r0, sl
 810e2d6:	f000 f8a7 	bl	810e428 <scalbn>
 810e2da:	ec51 0b10 	vmov	r0, r1, d0
 810e2de:	ec53 2b18 	vmov	r2, r3, d8
 810e2e2:	f7ff bbee 	b.w	810dac2 <__ieee754_pow+0x162>
 810e2e6:	4b2f      	ldr	r3, [pc, #188]	; (810e3a4 <__ieee754_pow+0xa44>)
 810e2e8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 810e2ec:	429e      	cmp	r6, r3
 810e2ee:	f77f af0d 	ble.w	810e10c <__ieee754_pow+0x7ac>
 810e2f2:	4b2d      	ldr	r3, [pc, #180]	; (810e3a8 <__ieee754_pow+0xa48>)
 810e2f4:	440b      	add	r3, r1
 810e2f6:	4303      	orrs	r3, r0
 810e2f8:	d009      	beq.n	810e30e <__ieee754_pow+0x9ae>
 810e2fa:	ec51 0b18 	vmov	r0, r1, d8
 810e2fe:	2200      	movs	r2, #0
 810e300:	2300      	movs	r3, #0
 810e302:	f7f2 fc73 	bl	8100bec <__aeabi_dcmplt>
 810e306:	3800      	subs	r0, #0
 810e308:	bf18      	it	ne
 810e30a:	2001      	movne	r0, #1
 810e30c:	e448      	b.n	810dba0 <__ieee754_pow+0x240>
 810e30e:	4622      	mov	r2, r4
 810e310:	462b      	mov	r3, r5
 810e312:	f7f2 f841 	bl	8100398 <__aeabi_dsub>
 810e316:	4642      	mov	r2, r8
 810e318:	464b      	mov	r3, r9
 810e31a:	f7f2 fc7b 	bl	8100c14 <__aeabi_dcmpge>
 810e31e:	2800      	cmp	r0, #0
 810e320:	f43f aef4 	beq.w	810e10c <__ieee754_pow+0x7ac>
 810e324:	e7e9      	b.n	810e2fa <__ieee754_pow+0x99a>
 810e326:	f04f 0a00 	mov.w	sl, #0
 810e32a:	e71a      	b.n	810e162 <__ieee754_pow+0x802>
 810e32c:	ec51 0b10 	vmov	r0, r1, d0
 810e330:	4619      	mov	r1, r3
 810e332:	e7d4      	b.n	810e2de <__ieee754_pow+0x97e>
 810e334:	491a      	ldr	r1, [pc, #104]	; (810e3a0 <__ieee754_pow+0xa40>)
 810e336:	2000      	movs	r0, #0
 810e338:	f7ff bb31 	b.w	810d99e <__ieee754_pow+0x3e>
 810e33c:	2000      	movs	r0, #0
 810e33e:	2100      	movs	r1, #0
 810e340:	f7ff bb2d 	b.w	810d99e <__ieee754_pow+0x3e>
 810e344:	4630      	mov	r0, r6
 810e346:	4639      	mov	r1, r7
 810e348:	f7ff bb29 	b.w	810d99e <__ieee754_pow+0x3e>
 810e34c:	9204      	str	r2, [sp, #16]
 810e34e:	f7ff bb7b 	b.w	810da48 <__ieee754_pow+0xe8>
 810e352:	2300      	movs	r3, #0
 810e354:	f7ff bb65 	b.w	810da22 <__ieee754_pow+0xc2>
 810e358:	00000000 	.word	0x00000000
 810e35c:	3fe62e43 	.word	0x3fe62e43
 810e360:	fefa39ef 	.word	0xfefa39ef
 810e364:	3fe62e42 	.word	0x3fe62e42
 810e368:	0ca86c39 	.word	0x0ca86c39
 810e36c:	be205c61 	.word	0xbe205c61
 810e370:	72bea4d0 	.word	0x72bea4d0
 810e374:	3e663769 	.word	0x3e663769
 810e378:	c5d26bf1 	.word	0xc5d26bf1
 810e37c:	3ebbbd41 	.word	0x3ebbbd41
 810e380:	af25de2c 	.word	0xaf25de2c
 810e384:	3f11566a 	.word	0x3f11566a
 810e388:	16bebd93 	.word	0x16bebd93
 810e38c:	3f66c16c 	.word	0x3f66c16c
 810e390:	5555553e 	.word	0x5555553e
 810e394:	3fc55555 	.word	0x3fc55555
 810e398:	3fe00000 	.word	0x3fe00000
 810e39c:	fff00000 	.word	0xfff00000
 810e3a0:	3ff00000 	.word	0x3ff00000
 810e3a4:	4090cbff 	.word	0x4090cbff
 810e3a8:	3f6f3400 	.word	0x3f6f3400
 810e3ac:	652b82fe 	.word	0x652b82fe
 810e3b0:	3c971547 	.word	0x3c971547

0810e3b4 <with_errno>:
 810e3b4:	b570      	push	{r4, r5, r6, lr}
 810e3b6:	4604      	mov	r4, r0
 810e3b8:	460d      	mov	r5, r1
 810e3ba:	4616      	mov	r6, r2
 810e3bc:	f7fc fc8e 	bl	810acdc <__errno>
 810e3c0:	4629      	mov	r1, r5
 810e3c2:	6006      	str	r6, [r0, #0]
 810e3c4:	4620      	mov	r0, r4
 810e3c6:	bd70      	pop	{r4, r5, r6, pc}

0810e3c8 <xflow>:
 810e3c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810e3ca:	4614      	mov	r4, r2
 810e3cc:	461d      	mov	r5, r3
 810e3ce:	b108      	cbz	r0, 810e3d4 <xflow+0xc>
 810e3d0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 810e3d4:	e9cd 2300 	strd	r2, r3, [sp]
 810e3d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 810e3dc:	4620      	mov	r0, r4
 810e3de:	4629      	mov	r1, r5
 810e3e0:	f7f2 f992 	bl	8100708 <__aeabi_dmul>
 810e3e4:	2222      	movs	r2, #34	; 0x22
 810e3e6:	b003      	add	sp, #12
 810e3e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 810e3ec:	f7ff bfe2 	b.w	810e3b4 <with_errno>

0810e3f0 <__math_uflow>:
 810e3f0:	b508      	push	{r3, lr}
 810e3f2:	2200      	movs	r2, #0
 810e3f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 810e3f8:	f7ff ffe6 	bl	810e3c8 <xflow>
 810e3fc:	ec41 0b10 	vmov	d0, r0, r1
 810e400:	bd08      	pop	{r3, pc}

0810e402 <__math_oflow>:
 810e402:	b508      	push	{r3, lr}
 810e404:	2200      	movs	r2, #0
 810e406:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 810e40a:	f7ff ffdd 	bl	810e3c8 <xflow>
 810e40e:	ec41 0b10 	vmov	d0, r0, r1
 810e412:	bd08      	pop	{r3, pc}

0810e414 <fabs>:
 810e414:	ec51 0b10 	vmov	r0, r1, d0
 810e418:	ee10 2a10 	vmov	r2, s0
 810e41c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 810e420:	ec43 2b10 	vmov	d0, r2, r3
 810e424:	4770      	bx	lr
	...

0810e428 <scalbn>:
 810e428:	b570      	push	{r4, r5, r6, lr}
 810e42a:	ec55 4b10 	vmov	r4, r5, d0
 810e42e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 810e432:	4606      	mov	r6, r0
 810e434:	462b      	mov	r3, r5
 810e436:	b999      	cbnz	r1, 810e460 <scalbn+0x38>
 810e438:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 810e43c:	4323      	orrs	r3, r4
 810e43e:	d03f      	beq.n	810e4c0 <scalbn+0x98>
 810e440:	4b35      	ldr	r3, [pc, #212]	; (810e518 <scalbn+0xf0>)
 810e442:	4629      	mov	r1, r5
 810e444:	ee10 0a10 	vmov	r0, s0
 810e448:	2200      	movs	r2, #0
 810e44a:	f7f2 f95d 	bl	8100708 <__aeabi_dmul>
 810e44e:	4b33      	ldr	r3, [pc, #204]	; (810e51c <scalbn+0xf4>)
 810e450:	429e      	cmp	r6, r3
 810e452:	4604      	mov	r4, r0
 810e454:	460d      	mov	r5, r1
 810e456:	da10      	bge.n	810e47a <scalbn+0x52>
 810e458:	a327      	add	r3, pc, #156	; (adr r3, 810e4f8 <scalbn+0xd0>)
 810e45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e45e:	e01f      	b.n	810e4a0 <scalbn+0x78>
 810e460:	f240 72ff 	movw	r2, #2047	; 0x7ff
 810e464:	4291      	cmp	r1, r2
 810e466:	d10c      	bne.n	810e482 <scalbn+0x5a>
 810e468:	ee10 2a10 	vmov	r2, s0
 810e46c:	4620      	mov	r0, r4
 810e46e:	4629      	mov	r1, r5
 810e470:	f7f1 ff94 	bl	810039c <__adddf3>
 810e474:	4604      	mov	r4, r0
 810e476:	460d      	mov	r5, r1
 810e478:	e022      	b.n	810e4c0 <scalbn+0x98>
 810e47a:	460b      	mov	r3, r1
 810e47c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 810e480:	3936      	subs	r1, #54	; 0x36
 810e482:	f24c 3250 	movw	r2, #50000	; 0xc350
 810e486:	4296      	cmp	r6, r2
 810e488:	dd0d      	ble.n	810e4a6 <scalbn+0x7e>
 810e48a:	2d00      	cmp	r5, #0
 810e48c:	a11c      	add	r1, pc, #112	; (adr r1, 810e500 <scalbn+0xd8>)
 810e48e:	e9d1 0100 	ldrd	r0, r1, [r1]
 810e492:	da02      	bge.n	810e49a <scalbn+0x72>
 810e494:	a11c      	add	r1, pc, #112	; (adr r1, 810e508 <scalbn+0xe0>)
 810e496:	e9d1 0100 	ldrd	r0, r1, [r1]
 810e49a:	a319      	add	r3, pc, #100	; (adr r3, 810e500 <scalbn+0xd8>)
 810e49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e4a0:	f7f2 f932 	bl	8100708 <__aeabi_dmul>
 810e4a4:	e7e6      	b.n	810e474 <scalbn+0x4c>
 810e4a6:	1872      	adds	r2, r6, r1
 810e4a8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 810e4ac:	428a      	cmp	r2, r1
 810e4ae:	dcec      	bgt.n	810e48a <scalbn+0x62>
 810e4b0:	2a00      	cmp	r2, #0
 810e4b2:	dd08      	ble.n	810e4c6 <scalbn+0x9e>
 810e4b4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 810e4b8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 810e4bc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 810e4c0:	ec45 4b10 	vmov	d0, r4, r5
 810e4c4:	bd70      	pop	{r4, r5, r6, pc}
 810e4c6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 810e4ca:	da08      	bge.n	810e4de <scalbn+0xb6>
 810e4cc:	2d00      	cmp	r5, #0
 810e4ce:	a10a      	add	r1, pc, #40	; (adr r1, 810e4f8 <scalbn+0xd0>)
 810e4d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 810e4d4:	dac0      	bge.n	810e458 <scalbn+0x30>
 810e4d6:	a10e      	add	r1, pc, #56	; (adr r1, 810e510 <scalbn+0xe8>)
 810e4d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 810e4dc:	e7bc      	b.n	810e458 <scalbn+0x30>
 810e4de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 810e4e2:	3236      	adds	r2, #54	; 0x36
 810e4e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 810e4e8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 810e4ec:	4620      	mov	r0, r4
 810e4ee:	4b0c      	ldr	r3, [pc, #48]	; (810e520 <scalbn+0xf8>)
 810e4f0:	2200      	movs	r2, #0
 810e4f2:	e7d5      	b.n	810e4a0 <scalbn+0x78>
 810e4f4:	f3af 8000 	nop.w
 810e4f8:	c2f8f359 	.word	0xc2f8f359
 810e4fc:	01a56e1f 	.word	0x01a56e1f
 810e500:	8800759c 	.word	0x8800759c
 810e504:	7e37e43c 	.word	0x7e37e43c
 810e508:	8800759c 	.word	0x8800759c
 810e50c:	fe37e43c 	.word	0xfe37e43c
 810e510:	c2f8f359 	.word	0xc2f8f359
 810e514:	81a56e1f 	.word	0x81a56e1f
 810e518:	43500000 	.word	0x43500000
 810e51c:	ffff3cb0 	.word	0xffff3cb0
 810e520:	3c900000 	.word	0x3c900000

0810e524 <__ieee754_sqrt>:
 810e524:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810e528:	ec55 4b10 	vmov	r4, r5, d0
 810e52c:	4e67      	ldr	r6, [pc, #412]	; (810e6cc <__ieee754_sqrt+0x1a8>)
 810e52e:	43ae      	bics	r6, r5
 810e530:	ee10 0a10 	vmov	r0, s0
 810e534:	ee10 2a10 	vmov	r2, s0
 810e538:	4629      	mov	r1, r5
 810e53a:	462b      	mov	r3, r5
 810e53c:	d10d      	bne.n	810e55a <__ieee754_sqrt+0x36>
 810e53e:	f7f2 f8e3 	bl	8100708 <__aeabi_dmul>
 810e542:	4602      	mov	r2, r0
 810e544:	460b      	mov	r3, r1
 810e546:	4620      	mov	r0, r4
 810e548:	4629      	mov	r1, r5
 810e54a:	f7f1 ff27 	bl	810039c <__adddf3>
 810e54e:	4604      	mov	r4, r0
 810e550:	460d      	mov	r5, r1
 810e552:	ec45 4b10 	vmov	d0, r4, r5
 810e556:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810e55a:	2d00      	cmp	r5, #0
 810e55c:	dc0b      	bgt.n	810e576 <__ieee754_sqrt+0x52>
 810e55e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 810e562:	4326      	orrs	r6, r4
 810e564:	d0f5      	beq.n	810e552 <__ieee754_sqrt+0x2e>
 810e566:	b135      	cbz	r5, 810e576 <__ieee754_sqrt+0x52>
 810e568:	f7f1 ff16 	bl	8100398 <__aeabi_dsub>
 810e56c:	4602      	mov	r2, r0
 810e56e:	460b      	mov	r3, r1
 810e570:	f7f2 f9f4 	bl	810095c <__aeabi_ddiv>
 810e574:	e7eb      	b.n	810e54e <__ieee754_sqrt+0x2a>
 810e576:	1509      	asrs	r1, r1, #20
 810e578:	f000 808d 	beq.w	810e696 <__ieee754_sqrt+0x172>
 810e57c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810e580:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 810e584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810e588:	07c9      	lsls	r1, r1, #31
 810e58a:	bf5c      	itt	pl
 810e58c:	005b      	lslpl	r3, r3, #1
 810e58e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 810e592:	ea4f 0343 	mov.w	r3, r3, lsl #1
 810e596:	bf58      	it	pl
 810e598:	0052      	lslpl	r2, r2, #1
 810e59a:	2500      	movs	r5, #0
 810e59c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 810e5a0:	1076      	asrs	r6, r6, #1
 810e5a2:	0052      	lsls	r2, r2, #1
 810e5a4:	f04f 0e16 	mov.w	lr, #22
 810e5a8:	46ac      	mov	ip, r5
 810e5aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 810e5ae:	eb0c 0001 	add.w	r0, ip, r1
 810e5b2:	4298      	cmp	r0, r3
 810e5b4:	bfde      	ittt	le
 810e5b6:	1a1b      	suble	r3, r3, r0
 810e5b8:	eb00 0c01 	addle.w	ip, r0, r1
 810e5bc:	186d      	addle	r5, r5, r1
 810e5be:	005b      	lsls	r3, r3, #1
 810e5c0:	f1be 0e01 	subs.w	lr, lr, #1
 810e5c4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 810e5c8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 810e5cc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 810e5d0:	d1ed      	bne.n	810e5ae <__ieee754_sqrt+0x8a>
 810e5d2:	4674      	mov	r4, lr
 810e5d4:	2720      	movs	r7, #32
 810e5d6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 810e5da:	4563      	cmp	r3, ip
 810e5dc:	eb01 000e 	add.w	r0, r1, lr
 810e5e0:	dc02      	bgt.n	810e5e8 <__ieee754_sqrt+0xc4>
 810e5e2:	d113      	bne.n	810e60c <__ieee754_sqrt+0xe8>
 810e5e4:	4290      	cmp	r0, r2
 810e5e6:	d811      	bhi.n	810e60c <__ieee754_sqrt+0xe8>
 810e5e8:	2800      	cmp	r0, #0
 810e5ea:	eb00 0e01 	add.w	lr, r0, r1
 810e5ee:	da57      	bge.n	810e6a0 <__ieee754_sqrt+0x17c>
 810e5f0:	f1be 0f00 	cmp.w	lr, #0
 810e5f4:	db54      	blt.n	810e6a0 <__ieee754_sqrt+0x17c>
 810e5f6:	f10c 0801 	add.w	r8, ip, #1
 810e5fa:	eba3 030c 	sub.w	r3, r3, ip
 810e5fe:	4290      	cmp	r0, r2
 810e600:	bf88      	it	hi
 810e602:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 810e606:	1a12      	subs	r2, r2, r0
 810e608:	440c      	add	r4, r1
 810e60a:	46c4      	mov	ip, r8
 810e60c:	005b      	lsls	r3, r3, #1
 810e60e:	3f01      	subs	r7, #1
 810e610:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 810e614:	ea4f 0151 	mov.w	r1, r1, lsr #1
 810e618:	ea4f 0242 	mov.w	r2, r2, lsl #1
 810e61c:	d1dd      	bne.n	810e5da <__ieee754_sqrt+0xb6>
 810e61e:	4313      	orrs	r3, r2
 810e620:	d01b      	beq.n	810e65a <__ieee754_sqrt+0x136>
 810e622:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 810e6d0 <__ieee754_sqrt+0x1ac>
 810e626:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 810e6d4 <__ieee754_sqrt+0x1b0>
 810e62a:	e9da 0100 	ldrd	r0, r1, [sl]
 810e62e:	e9db 2300 	ldrd	r2, r3, [fp]
 810e632:	f7f1 feb1 	bl	8100398 <__aeabi_dsub>
 810e636:	e9da 8900 	ldrd	r8, r9, [sl]
 810e63a:	4602      	mov	r2, r0
 810e63c:	460b      	mov	r3, r1
 810e63e:	4640      	mov	r0, r8
 810e640:	4649      	mov	r1, r9
 810e642:	f7f2 fadd 	bl	8100c00 <__aeabi_dcmple>
 810e646:	b140      	cbz	r0, 810e65a <__ieee754_sqrt+0x136>
 810e648:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 810e64c:	e9da 0100 	ldrd	r0, r1, [sl]
 810e650:	e9db 2300 	ldrd	r2, r3, [fp]
 810e654:	d126      	bne.n	810e6a4 <__ieee754_sqrt+0x180>
 810e656:	3501      	adds	r5, #1
 810e658:	463c      	mov	r4, r7
 810e65a:	106a      	asrs	r2, r5, #1
 810e65c:	0863      	lsrs	r3, r4, #1
 810e65e:	07e9      	lsls	r1, r5, #31
 810e660:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 810e664:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 810e668:	bf48      	it	mi
 810e66a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 810e66e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 810e672:	461c      	mov	r4, r3
 810e674:	e76d      	b.n	810e552 <__ieee754_sqrt+0x2e>
 810e676:	0ad3      	lsrs	r3, r2, #11
 810e678:	3815      	subs	r0, #21
 810e67a:	0552      	lsls	r2, r2, #21
 810e67c:	2b00      	cmp	r3, #0
 810e67e:	d0fa      	beq.n	810e676 <__ieee754_sqrt+0x152>
 810e680:	02dc      	lsls	r4, r3, #11
 810e682:	d50a      	bpl.n	810e69a <__ieee754_sqrt+0x176>
 810e684:	f1c1 0420 	rsb	r4, r1, #32
 810e688:	fa22 f404 	lsr.w	r4, r2, r4
 810e68c:	1e4d      	subs	r5, r1, #1
 810e68e:	408a      	lsls	r2, r1
 810e690:	4323      	orrs	r3, r4
 810e692:	1b41      	subs	r1, r0, r5
 810e694:	e772      	b.n	810e57c <__ieee754_sqrt+0x58>
 810e696:	4608      	mov	r0, r1
 810e698:	e7f0      	b.n	810e67c <__ieee754_sqrt+0x158>
 810e69a:	005b      	lsls	r3, r3, #1
 810e69c:	3101      	adds	r1, #1
 810e69e:	e7ef      	b.n	810e680 <__ieee754_sqrt+0x15c>
 810e6a0:	46e0      	mov	r8, ip
 810e6a2:	e7aa      	b.n	810e5fa <__ieee754_sqrt+0xd6>
 810e6a4:	f7f1 fe7a 	bl	810039c <__adddf3>
 810e6a8:	e9da 8900 	ldrd	r8, r9, [sl]
 810e6ac:	4602      	mov	r2, r0
 810e6ae:	460b      	mov	r3, r1
 810e6b0:	4640      	mov	r0, r8
 810e6b2:	4649      	mov	r1, r9
 810e6b4:	f7f2 fa9a 	bl	8100bec <__aeabi_dcmplt>
 810e6b8:	b120      	cbz	r0, 810e6c4 <__ieee754_sqrt+0x1a0>
 810e6ba:	1ca0      	adds	r0, r4, #2
 810e6bc:	bf08      	it	eq
 810e6be:	3501      	addeq	r5, #1
 810e6c0:	3402      	adds	r4, #2
 810e6c2:	e7ca      	b.n	810e65a <__ieee754_sqrt+0x136>
 810e6c4:	3401      	adds	r4, #1
 810e6c6:	f024 0401 	bic.w	r4, r4, #1
 810e6ca:	e7c6      	b.n	810e65a <__ieee754_sqrt+0x136>
 810e6cc:	7ff00000 	.word	0x7ff00000
 810e6d0:	100001d8 	.word	0x100001d8
 810e6d4:	100001e0 	.word	0x100001e0

0810e6d8 <_gettimeofday>:
 810e6d8:	4b02      	ldr	r3, [pc, #8]	; (810e6e4 <_gettimeofday+0xc>)
 810e6da:	2258      	movs	r2, #88	; 0x58
 810e6dc:	601a      	str	r2, [r3, #0]
 810e6de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810e6e2:	4770      	bx	lr
 810e6e4:	100004c0 	.word	0x100004c0

0810e6e8 <_init>:
 810e6e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810e6ea:	bf00      	nop
 810e6ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810e6ee:	bc08      	pop	{r3}
 810e6f0:	469e      	mov	lr, r3
 810e6f2:	4770      	bx	lr

0810e6f4 <_fini>:
 810e6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810e6f6:	bf00      	nop
 810e6f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810e6fa:	bc08      	pop	{r3}
 810e6fc:	469e      	mov	lr, r3
 810e6fe:	4770      	bx	lr
