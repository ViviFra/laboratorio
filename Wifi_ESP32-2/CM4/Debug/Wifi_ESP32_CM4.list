
Wifi_ESP32_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e490  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000548  0810e730  0810e730  0001e730  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810ec78  0810ec78  0001ec78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810ec80  0810ec80  0001ec80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810ec84  0810ec84  0001ec84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e8  10000000  0810ec88  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002e4  100001e8  0810ee70  000201e8  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  100004cc  0810ee70  000204cc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001804c  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002c60  00000000  00000000  000382a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001270  00000000  00000000  0003af08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000e75  00000000  00000000  0003c178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003bcff  00000000  00000000  0003cfed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00018b48  00000000  00000000  00078cec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0018b147  00000000  00000000  00091834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00006664  00000000  00000000  0021c97c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000071  00000000  00000000  00222fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	100001e8 	.word	0x100001e8
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810e718 	.word	0x0810e718

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	100001ec 	.word	0x100001ec
 81002dc:	0810e718 	.word	0x0810e718

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <strlen>:
 8100380:	4603      	mov	r3, r0
 8100382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8100386:	2a00      	cmp	r2, #0
 8100388:	d1fb      	bne.n	8100382 <strlen+0x2>
 810038a:	1a18      	subs	r0, r3, r0
 810038c:	3801      	subs	r0, #1
 810038e:	4770      	bx	lr

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	; 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2uiz>:
 8100cb8:	004a      	lsls	r2, r1, #1
 8100cba:	d211      	bcs.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100cc0:	d211      	bcs.n	8100ce6 <__aeabi_d2uiz+0x2e>
 8100cc2:	d50d      	bpl.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100ccc:	d40e      	bmi.n	8100cec <__aeabi_d2uiz+0x34>
 8100cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cda:	fa23 f002 	lsr.w	r0, r3, r2
 8100cde:	4770      	bx	lr
 8100ce0:	f04f 0000 	mov.w	r0, #0
 8100ce4:	4770      	bx	lr
 8100ce6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cea:	d102      	bne.n	8100cf2 <__aeabi_d2uiz+0x3a>
 8100cec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8100cf0:	4770      	bx	lr
 8100cf2:	f04f 0000 	mov.w	r0, #0
 8100cf6:	4770      	bx	lr

08100cf8 <__aeabi_d2f>:
 8100cf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100d00:	bf24      	itt	cs
 8100d02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100d06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100d0a:	d90d      	bls.n	8100d28 <__aeabi_d2f+0x30>
 8100d0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100d10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100d1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d20:	bf08      	it	eq
 8100d22:	f020 0001 	biceq.w	r0, r0, #1
 8100d26:	4770      	bx	lr
 8100d28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100d2c:	d121      	bne.n	8100d72 <__aeabi_d2f+0x7a>
 8100d2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100d32:	bfbc      	itt	lt
 8100d34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100d38:	4770      	bxlt	lr
 8100d3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100d3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d42:	f1c2 0218 	rsb	r2, r2, #24
 8100d46:	f1c2 0c20 	rsb	ip, r2, #32
 8100d4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d4e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d52:	bf18      	it	ne
 8100d54:	f040 0001 	orrne.w	r0, r0, #1
 8100d58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d64:	ea40 000c 	orr.w	r0, r0, ip
 8100d68:	fa23 f302 	lsr.w	r3, r3, r2
 8100d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d70:	e7cc      	b.n	8100d0c <__aeabi_d2f+0x14>
 8100d72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d76:	d107      	bne.n	8100d88 <__aeabi_d2f+0x90>
 8100d78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d7c:	bf1e      	ittt	ne
 8100d7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100d82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100d86:	4770      	bxne	lr
 8100d88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100d94:	4770      	bx	lr
 8100d96:	bf00      	nop

08100d98 <__aeabi_uldivmod>:
 8100d98:	b953      	cbnz	r3, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9a:	b94a      	cbnz	r2, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9c:	2900      	cmp	r1, #0
 8100d9e:	bf08      	it	eq
 8100da0:	2800      	cmpeq	r0, #0
 8100da2:	bf1c      	itt	ne
 8100da4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8100da8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8100dac:	f000 b9a6 	b.w	81010fc <__aeabi_idiv0>
 8100db0:	f1ad 0c08 	sub.w	ip, sp, #8
 8100db4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100db8:	f000 f83c 	bl	8100e34 <__udivmoddi4>
 8100dbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100dc4:	b004      	add	sp, #16
 8100dc6:	4770      	bx	lr

08100dc8 <__aeabi_d2lz>:
 8100dc8:	b538      	push	{r3, r4, r5, lr}
 8100dca:	2200      	movs	r2, #0
 8100dcc:	2300      	movs	r3, #0
 8100dce:	4604      	mov	r4, r0
 8100dd0:	460d      	mov	r5, r1
 8100dd2:	f7ff ff0b 	bl	8100bec <__aeabi_dcmplt>
 8100dd6:	b928      	cbnz	r0, 8100de4 <__aeabi_d2lz+0x1c>
 8100dd8:	4620      	mov	r0, r4
 8100dda:	4629      	mov	r1, r5
 8100ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100de0:	f000 b80a 	b.w	8100df8 <__aeabi_d2ulz>
 8100de4:	4620      	mov	r0, r4
 8100de6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8100dea:	f000 f805 	bl	8100df8 <__aeabi_d2ulz>
 8100dee:	4240      	negs	r0, r0
 8100df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100df4:	bd38      	pop	{r3, r4, r5, pc}
 8100df6:	bf00      	nop

08100df8 <__aeabi_d2ulz>:
 8100df8:	b5d0      	push	{r4, r6, r7, lr}
 8100dfa:	4b0c      	ldr	r3, [pc, #48]	; (8100e2c <__aeabi_d2ulz+0x34>)
 8100dfc:	2200      	movs	r2, #0
 8100dfe:	4606      	mov	r6, r0
 8100e00:	460f      	mov	r7, r1
 8100e02:	f7ff fc81 	bl	8100708 <__aeabi_dmul>
 8100e06:	f7ff ff57 	bl	8100cb8 <__aeabi_d2uiz>
 8100e0a:	4604      	mov	r4, r0
 8100e0c:	f7ff fc02 	bl	8100614 <__aeabi_ui2d>
 8100e10:	4b07      	ldr	r3, [pc, #28]	; (8100e30 <__aeabi_d2ulz+0x38>)
 8100e12:	2200      	movs	r2, #0
 8100e14:	f7ff fc78 	bl	8100708 <__aeabi_dmul>
 8100e18:	4602      	mov	r2, r0
 8100e1a:	460b      	mov	r3, r1
 8100e1c:	4630      	mov	r0, r6
 8100e1e:	4639      	mov	r1, r7
 8100e20:	f7ff faba 	bl	8100398 <__aeabi_dsub>
 8100e24:	f7ff ff48 	bl	8100cb8 <__aeabi_d2uiz>
 8100e28:	4621      	mov	r1, r4
 8100e2a:	bdd0      	pop	{r4, r6, r7, pc}
 8100e2c:	3df00000 	.word	0x3df00000
 8100e30:	41f00000 	.word	0x41f00000

08100e34 <__udivmoddi4>:
 8100e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100e38:	9e08      	ldr	r6, [sp, #32]
 8100e3a:	460d      	mov	r5, r1
 8100e3c:	4604      	mov	r4, r0
 8100e3e:	460f      	mov	r7, r1
 8100e40:	2b00      	cmp	r3, #0
 8100e42:	d14a      	bne.n	8100eda <__udivmoddi4+0xa6>
 8100e44:	428a      	cmp	r2, r1
 8100e46:	4694      	mov	ip, r2
 8100e48:	d965      	bls.n	8100f16 <__udivmoddi4+0xe2>
 8100e4a:	fab2 f382 	clz	r3, r2
 8100e4e:	b143      	cbz	r3, 8100e62 <__udivmoddi4+0x2e>
 8100e50:	fa02 fc03 	lsl.w	ip, r2, r3
 8100e54:	f1c3 0220 	rsb	r2, r3, #32
 8100e58:	409f      	lsls	r7, r3
 8100e5a:	fa20 f202 	lsr.w	r2, r0, r2
 8100e5e:	4317      	orrs	r7, r2
 8100e60:	409c      	lsls	r4, r3
 8100e62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8100e66:	fa1f f58c 	uxth.w	r5, ip
 8100e6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8100e6e:	0c22      	lsrs	r2, r4, #16
 8100e70:	fb0e 7711 	mls	r7, lr, r1, r7
 8100e74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8100e78:	fb01 f005 	mul.w	r0, r1, r5
 8100e7c:	4290      	cmp	r0, r2
 8100e7e:	d90a      	bls.n	8100e96 <__udivmoddi4+0x62>
 8100e80:	eb1c 0202 	adds.w	r2, ip, r2
 8100e84:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8100e88:	f080 811c 	bcs.w	81010c4 <__udivmoddi4+0x290>
 8100e8c:	4290      	cmp	r0, r2
 8100e8e:	f240 8119 	bls.w	81010c4 <__udivmoddi4+0x290>
 8100e92:	3902      	subs	r1, #2
 8100e94:	4462      	add	r2, ip
 8100e96:	1a12      	subs	r2, r2, r0
 8100e98:	b2a4      	uxth	r4, r4
 8100e9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8100e9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8100ea2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8100ea6:	fb00 f505 	mul.w	r5, r0, r5
 8100eaa:	42a5      	cmp	r5, r4
 8100eac:	d90a      	bls.n	8100ec4 <__udivmoddi4+0x90>
 8100eae:	eb1c 0404 	adds.w	r4, ip, r4
 8100eb2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8100eb6:	f080 8107 	bcs.w	81010c8 <__udivmoddi4+0x294>
 8100eba:	42a5      	cmp	r5, r4
 8100ebc:	f240 8104 	bls.w	81010c8 <__udivmoddi4+0x294>
 8100ec0:	4464      	add	r4, ip
 8100ec2:	3802      	subs	r0, #2
 8100ec4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8100ec8:	1b64      	subs	r4, r4, r5
 8100eca:	2100      	movs	r1, #0
 8100ecc:	b11e      	cbz	r6, 8100ed6 <__udivmoddi4+0xa2>
 8100ece:	40dc      	lsrs	r4, r3
 8100ed0:	2300      	movs	r3, #0
 8100ed2:	e9c6 4300 	strd	r4, r3, [r6]
 8100ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100eda:	428b      	cmp	r3, r1
 8100edc:	d908      	bls.n	8100ef0 <__udivmoddi4+0xbc>
 8100ede:	2e00      	cmp	r6, #0
 8100ee0:	f000 80ed 	beq.w	81010be <__udivmoddi4+0x28a>
 8100ee4:	2100      	movs	r1, #0
 8100ee6:	e9c6 0500 	strd	r0, r5, [r6]
 8100eea:	4608      	mov	r0, r1
 8100eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ef0:	fab3 f183 	clz	r1, r3
 8100ef4:	2900      	cmp	r1, #0
 8100ef6:	d149      	bne.n	8100f8c <__udivmoddi4+0x158>
 8100ef8:	42ab      	cmp	r3, r5
 8100efa:	d302      	bcc.n	8100f02 <__udivmoddi4+0xce>
 8100efc:	4282      	cmp	r2, r0
 8100efe:	f200 80f8 	bhi.w	81010f2 <__udivmoddi4+0x2be>
 8100f02:	1a84      	subs	r4, r0, r2
 8100f04:	eb65 0203 	sbc.w	r2, r5, r3
 8100f08:	2001      	movs	r0, #1
 8100f0a:	4617      	mov	r7, r2
 8100f0c:	2e00      	cmp	r6, #0
 8100f0e:	d0e2      	beq.n	8100ed6 <__udivmoddi4+0xa2>
 8100f10:	e9c6 4700 	strd	r4, r7, [r6]
 8100f14:	e7df      	b.n	8100ed6 <__udivmoddi4+0xa2>
 8100f16:	b902      	cbnz	r2, 8100f1a <__udivmoddi4+0xe6>
 8100f18:	deff      	udf	#255	; 0xff
 8100f1a:	fab2 f382 	clz	r3, r2
 8100f1e:	2b00      	cmp	r3, #0
 8100f20:	f040 8090 	bne.w	8101044 <__udivmoddi4+0x210>
 8100f24:	1a8a      	subs	r2, r1, r2
 8100f26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100f2a:	fa1f fe8c 	uxth.w	lr, ip
 8100f2e:	2101      	movs	r1, #1
 8100f30:	fbb2 f5f7 	udiv	r5, r2, r7
 8100f34:	fb07 2015 	mls	r0, r7, r5, r2
 8100f38:	0c22      	lsrs	r2, r4, #16
 8100f3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8100f3e:	fb0e f005 	mul.w	r0, lr, r5
 8100f42:	4290      	cmp	r0, r2
 8100f44:	d908      	bls.n	8100f58 <__udivmoddi4+0x124>
 8100f46:	eb1c 0202 	adds.w	r2, ip, r2
 8100f4a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8100f4e:	d202      	bcs.n	8100f56 <__udivmoddi4+0x122>
 8100f50:	4290      	cmp	r0, r2
 8100f52:	f200 80cb 	bhi.w	81010ec <__udivmoddi4+0x2b8>
 8100f56:	4645      	mov	r5, r8
 8100f58:	1a12      	subs	r2, r2, r0
 8100f5a:	b2a4      	uxth	r4, r4
 8100f5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8100f60:	fb07 2210 	mls	r2, r7, r0, r2
 8100f64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8100f68:	fb0e fe00 	mul.w	lr, lr, r0
 8100f6c:	45a6      	cmp	lr, r4
 8100f6e:	d908      	bls.n	8100f82 <__udivmoddi4+0x14e>
 8100f70:	eb1c 0404 	adds.w	r4, ip, r4
 8100f74:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8100f78:	d202      	bcs.n	8100f80 <__udivmoddi4+0x14c>
 8100f7a:	45a6      	cmp	lr, r4
 8100f7c:	f200 80bb 	bhi.w	81010f6 <__udivmoddi4+0x2c2>
 8100f80:	4610      	mov	r0, r2
 8100f82:	eba4 040e 	sub.w	r4, r4, lr
 8100f86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8100f8a:	e79f      	b.n	8100ecc <__udivmoddi4+0x98>
 8100f8c:	f1c1 0720 	rsb	r7, r1, #32
 8100f90:	408b      	lsls	r3, r1
 8100f92:	fa22 fc07 	lsr.w	ip, r2, r7
 8100f96:	ea4c 0c03 	orr.w	ip, ip, r3
 8100f9a:	fa05 f401 	lsl.w	r4, r5, r1
 8100f9e:	fa20 f307 	lsr.w	r3, r0, r7
 8100fa2:	40fd      	lsrs	r5, r7
 8100fa4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8100fa8:	4323      	orrs	r3, r4
 8100faa:	fbb5 f8f9 	udiv	r8, r5, r9
 8100fae:	fa1f fe8c 	uxth.w	lr, ip
 8100fb2:	fb09 5518 	mls	r5, r9, r8, r5
 8100fb6:	0c1c      	lsrs	r4, r3, #16
 8100fb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8100fbc:	fb08 f50e 	mul.w	r5, r8, lr
 8100fc0:	42a5      	cmp	r5, r4
 8100fc2:	fa02 f201 	lsl.w	r2, r2, r1
 8100fc6:	fa00 f001 	lsl.w	r0, r0, r1
 8100fca:	d90b      	bls.n	8100fe4 <__udivmoddi4+0x1b0>
 8100fcc:	eb1c 0404 	adds.w	r4, ip, r4
 8100fd0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8100fd4:	f080 8088 	bcs.w	81010e8 <__udivmoddi4+0x2b4>
 8100fd8:	42a5      	cmp	r5, r4
 8100fda:	f240 8085 	bls.w	81010e8 <__udivmoddi4+0x2b4>
 8100fde:	f1a8 0802 	sub.w	r8, r8, #2
 8100fe2:	4464      	add	r4, ip
 8100fe4:	1b64      	subs	r4, r4, r5
 8100fe6:	b29d      	uxth	r5, r3
 8100fe8:	fbb4 f3f9 	udiv	r3, r4, r9
 8100fec:	fb09 4413 	mls	r4, r9, r3, r4
 8100ff0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8100ff4:	fb03 fe0e 	mul.w	lr, r3, lr
 8100ff8:	45a6      	cmp	lr, r4
 8100ffa:	d908      	bls.n	810100e <__udivmoddi4+0x1da>
 8100ffc:	eb1c 0404 	adds.w	r4, ip, r4
 8101000:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8101004:	d26c      	bcs.n	81010e0 <__udivmoddi4+0x2ac>
 8101006:	45a6      	cmp	lr, r4
 8101008:	d96a      	bls.n	81010e0 <__udivmoddi4+0x2ac>
 810100a:	3b02      	subs	r3, #2
 810100c:	4464      	add	r4, ip
 810100e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8101012:	fba3 9502 	umull	r9, r5, r3, r2
 8101016:	eba4 040e 	sub.w	r4, r4, lr
 810101a:	42ac      	cmp	r4, r5
 810101c:	46c8      	mov	r8, r9
 810101e:	46ae      	mov	lr, r5
 8101020:	d356      	bcc.n	81010d0 <__udivmoddi4+0x29c>
 8101022:	d053      	beq.n	81010cc <__udivmoddi4+0x298>
 8101024:	b156      	cbz	r6, 810103c <__udivmoddi4+0x208>
 8101026:	ebb0 0208 	subs.w	r2, r0, r8
 810102a:	eb64 040e 	sbc.w	r4, r4, lr
 810102e:	fa04 f707 	lsl.w	r7, r4, r7
 8101032:	40ca      	lsrs	r2, r1
 8101034:	40cc      	lsrs	r4, r1
 8101036:	4317      	orrs	r7, r2
 8101038:	e9c6 7400 	strd	r7, r4, [r6]
 810103c:	4618      	mov	r0, r3
 810103e:	2100      	movs	r1, #0
 8101040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8101044:	f1c3 0120 	rsb	r1, r3, #32
 8101048:	fa02 fc03 	lsl.w	ip, r2, r3
 810104c:	fa20 f201 	lsr.w	r2, r0, r1
 8101050:	fa25 f101 	lsr.w	r1, r5, r1
 8101054:	409d      	lsls	r5, r3
 8101056:	432a      	orrs	r2, r5
 8101058:	ea4f 471c 	mov.w	r7, ip, lsr #16
 810105c:	fa1f fe8c 	uxth.w	lr, ip
 8101060:	fbb1 f0f7 	udiv	r0, r1, r7
 8101064:	fb07 1510 	mls	r5, r7, r0, r1
 8101068:	0c11      	lsrs	r1, r2, #16
 810106a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 810106e:	fb00 f50e 	mul.w	r5, r0, lr
 8101072:	428d      	cmp	r5, r1
 8101074:	fa04 f403 	lsl.w	r4, r4, r3
 8101078:	d908      	bls.n	810108c <__udivmoddi4+0x258>
 810107a:	eb1c 0101 	adds.w	r1, ip, r1
 810107e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8101082:	d22f      	bcs.n	81010e4 <__udivmoddi4+0x2b0>
 8101084:	428d      	cmp	r5, r1
 8101086:	d92d      	bls.n	81010e4 <__udivmoddi4+0x2b0>
 8101088:	3802      	subs	r0, #2
 810108a:	4461      	add	r1, ip
 810108c:	1b49      	subs	r1, r1, r5
 810108e:	b292      	uxth	r2, r2
 8101090:	fbb1 f5f7 	udiv	r5, r1, r7
 8101094:	fb07 1115 	mls	r1, r7, r5, r1
 8101098:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 810109c:	fb05 f10e 	mul.w	r1, r5, lr
 81010a0:	4291      	cmp	r1, r2
 81010a2:	d908      	bls.n	81010b6 <__udivmoddi4+0x282>
 81010a4:	eb1c 0202 	adds.w	r2, ip, r2
 81010a8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 81010ac:	d216      	bcs.n	81010dc <__udivmoddi4+0x2a8>
 81010ae:	4291      	cmp	r1, r2
 81010b0:	d914      	bls.n	81010dc <__udivmoddi4+0x2a8>
 81010b2:	3d02      	subs	r5, #2
 81010b4:	4462      	add	r2, ip
 81010b6:	1a52      	subs	r2, r2, r1
 81010b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 81010bc:	e738      	b.n	8100f30 <__udivmoddi4+0xfc>
 81010be:	4631      	mov	r1, r6
 81010c0:	4630      	mov	r0, r6
 81010c2:	e708      	b.n	8100ed6 <__udivmoddi4+0xa2>
 81010c4:	4639      	mov	r1, r7
 81010c6:	e6e6      	b.n	8100e96 <__udivmoddi4+0x62>
 81010c8:	4610      	mov	r0, r2
 81010ca:	e6fb      	b.n	8100ec4 <__udivmoddi4+0x90>
 81010cc:	4548      	cmp	r0, r9
 81010ce:	d2a9      	bcs.n	8101024 <__udivmoddi4+0x1f0>
 81010d0:	ebb9 0802 	subs.w	r8, r9, r2
 81010d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 81010d8:	3b01      	subs	r3, #1
 81010da:	e7a3      	b.n	8101024 <__udivmoddi4+0x1f0>
 81010dc:	4645      	mov	r5, r8
 81010de:	e7ea      	b.n	81010b6 <__udivmoddi4+0x282>
 81010e0:	462b      	mov	r3, r5
 81010e2:	e794      	b.n	810100e <__udivmoddi4+0x1da>
 81010e4:	4640      	mov	r0, r8
 81010e6:	e7d1      	b.n	810108c <__udivmoddi4+0x258>
 81010e8:	46d0      	mov	r8, sl
 81010ea:	e77b      	b.n	8100fe4 <__udivmoddi4+0x1b0>
 81010ec:	3d02      	subs	r5, #2
 81010ee:	4462      	add	r2, ip
 81010f0:	e732      	b.n	8100f58 <__udivmoddi4+0x124>
 81010f2:	4608      	mov	r0, r1
 81010f4:	e70a      	b.n	8100f0c <__udivmoddi4+0xd8>
 81010f6:	4464      	add	r4, ip
 81010f8:	3802      	subs	r0, #2
 81010fa:	e742      	b.n	8100f82 <__udivmoddi4+0x14e>

081010fc <__aeabi_idiv0>:
 81010fc:	4770      	bx	lr
 81010fe:	bf00      	nop

08101100 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8101100:	b480      	push	{r7}
 8101102:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8101104:	4b09      	ldr	r3, [pc, #36]	; (810112c <SystemInit+0x2c>)
 8101106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810110a:	4a08      	ldr	r2, [pc, #32]	; (810112c <SystemInit+0x2c>)
 810110c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8101110:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8101114:	4b05      	ldr	r3, [pc, #20]	; (810112c <SystemInit+0x2c>)
 8101116:	691b      	ldr	r3, [r3, #16]
 8101118:	4a04      	ldr	r2, [pc, #16]	; (810112c <SystemInit+0x2c>)
 810111a:	f043 0310 	orr.w	r3, r3, #16
 810111e:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8101120:	bf00      	nop
 8101122:	46bd      	mov	sp, r7
 8101124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101128:	4770      	bx	lr
 810112a:	bf00      	nop
 810112c:	e000ed00 	.word	0xe000ed00

08101130 <ftoa>:
	0.0000000005,		// 9
	0.00000000005		// 10
};

char * ftoa(double f, char * buf, int precision)
{
 8101130:	b5b0      	push	{r4, r5, r7, lr}
 8101132:	b08a      	sub	sp, #40	; 0x28
 8101134:	af00      	add	r7, sp, #0
 8101136:	ed87 0b02 	vstr	d0, [r7, #8]
 810113a:	6078      	str	r0, [r7, #4]
 810113c:	6039      	str	r1, [r7, #0]
	char * ptr = buf;
 810113e:	687b      	ldr	r3, [r7, #4]
 8101140:	627b      	str	r3, [r7, #36]	; 0x24
	char * p = ptr;
 8101142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101144:	623b      	str	r3, [r7, #32]
	char * p1;
	char c;
	long intPart;

	// check precision bounds
	if (precision > MAX_PRECISION)
 8101146:	683b      	ldr	r3, [r7, #0]
 8101148:	2b0a      	cmp	r3, #10
 810114a:	dd01      	ble.n	8101150 <ftoa+0x20>
		precision = MAX_PRECISION;
 810114c:	230a      	movs	r3, #10
 810114e:	603b      	str	r3, [r7, #0]

	// sign stuff
	if (f < 0)
 8101150:	f04f 0200 	mov.w	r2, #0
 8101154:	f04f 0300 	mov.w	r3, #0
 8101158:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810115c:	f7ff fd46 	bl	8100bec <__aeabi_dcmplt>
 8101160:	4603      	mov	r3, r0
 8101162:	2b00      	cmp	r3, #0
 8101164:	d00a      	beq.n	810117c <ftoa+0x4c>
	{
		f = -f;
 8101166:	68bc      	ldr	r4, [r7, #8]
 8101168:	68fb      	ldr	r3, [r7, #12]
 810116a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 810116e:	e9c7 4502 	strd	r4, r5, [r7, #8]
		*ptr++ = '-';
 8101172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101174:	1c5a      	adds	r2, r3, #1
 8101176:	627a      	str	r2, [r7, #36]	; 0x24
 8101178:	222d      	movs	r2, #45	; 0x2d
 810117a:	701a      	strb	r2, [r3, #0]
	}

	if (precision < 0)  // negative precision == automatic precision guess
 810117c:	683b      	ldr	r3, [r7, #0]
 810117e:	2b00      	cmp	r3, #0
 8101180:	da4f      	bge.n	8101222 <ftoa+0xf2>
	{
		if (f < 1.0) precision = 6;
 8101182:	f04f 0200 	mov.w	r2, #0
 8101186:	4b7c      	ldr	r3, [pc, #496]	; (8101378 <ftoa+0x248>)
 8101188:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810118c:	f7ff fd2e 	bl	8100bec <__aeabi_dcmplt>
 8101190:	4603      	mov	r3, r0
 8101192:	2b00      	cmp	r3, #0
 8101194:	d002      	beq.n	810119c <ftoa+0x6c>
 8101196:	2306      	movs	r3, #6
 8101198:	603b      	str	r3, [r7, #0]
 810119a:	e042      	b.n	8101222 <ftoa+0xf2>
		else if (f < 10.0) precision = 5;
 810119c:	f04f 0200 	mov.w	r2, #0
 81011a0:	4b76      	ldr	r3, [pc, #472]	; (810137c <ftoa+0x24c>)
 81011a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 81011a6:	f7ff fd21 	bl	8100bec <__aeabi_dcmplt>
 81011aa:	4603      	mov	r3, r0
 81011ac:	2b00      	cmp	r3, #0
 81011ae:	d002      	beq.n	81011b6 <ftoa+0x86>
 81011b0:	2305      	movs	r3, #5
 81011b2:	603b      	str	r3, [r7, #0]
 81011b4:	e035      	b.n	8101222 <ftoa+0xf2>
		else if (f < 100.0) precision = 4;
 81011b6:	f04f 0200 	mov.w	r2, #0
 81011ba:	4b71      	ldr	r3, [pc, #452]	; (8101380 <ftoa+0x250>)
 81011bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 81011c0:	f7ff fd14 	bl	8100bec <__aeabi_dcmplt>
 81011c4:	4603      	mov	r3, r0
 81011c6:	2b00      	cmp	r3, #0
 81011c8:	d002      	beq.n	81011d0 <ftoa+0xa0>
 81011ca:	2304      	movs	r3, #4
 81011cc:	603b      	str	r3, [r7, #0]
 81011ce:	e028      	b.n	8101222 <ftoa+0xf2>
		else if (f < 1000.0) precision = 3;
 81011d0:	f04f 0200 	mov.w	r2, #0
 81011d4:	4b6b      	ldr	r3, [pc, #428]	; (8101384 <ftoa+0x254>)
 81011d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 81011da:	f7ff fd07 	bl	8100bec <__aeabi_dcmplt>
 81011de:	4603      	mov	r3, r0
 81011e0:	2b00      	cmp	r3, #0
 81011e2:	d002      	beq.n	81011ea <ftoa+0xba>
 81011e4:	2303      	movs	r3, #3
 81011e6:	603b      	str	r3, [r7, #0]
 81011e8:	e01b      	b.n	8101222 <ftoa+0xf2>
		else if (f < 10000.0) precision = 2;
 81011ea:	a35f      	add	r3, pc, #380	; (adr r3, 8101368 <ftoa+0x238>)
 81011ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 81011f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 81011f4:	f7ff fcfa 	bl	8100bec <__aeabi_dcmplt>
 81011f8:	4603      	mov	r3, r0
 81011fa:	2b00      	cmp	r3, #0
 81011fc:	d002      	beq.n	8101204 <ftoa+0xd4>
 81011fe:	2302      	movs	r3, #2
 8101200:	603b      	str	r3, [r7, #0]
 8101202:	e00e      	b.n	8101222 <ftoa+0xf2>
		else if (f < 100000.0) precision = 1;
 8101204:	a35a      	add	r3, pc, #360	; (adr r3, 8101370 <ftoa+0x240>)
 8101206:	e9d3 2300 	ldrd	r2, r3, [r3]
 810120a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810120e:	f7ff fced 	bl	8100bec <__aeabi_dcmplt>
 8101212:	4603      	mov	r3, r0
 8101214:	2b00      	cmp	r3, #0
 8101216:	d002      	beq.n	810121e <ftoa+0xee>
 8101218:	2301      	movs	r3, #1
 810121a:	603b      	str	r3, [r7, #0]
 810121c:	e001      	b.n	8101222 <ftoa+0xf2>
		else precision = 0;
 810121e:	2300      	movs	r3, #0
 8101220:	603b      	str	r3, [r7, #0]
	}

	// round value according the precision
	if (precision)
 8101222:	683b      	ldr	r3, [r7, #0]
 8101224:	2b00      	cmp	r3, #0
 8101226:	d00d      	beq.n	8101244 <ftoa+0x114>
		f += rounders[precision];
 8101228:	4a57      	ldr	r2, [pc, #348]	; (8101388 <ftoa+0x258>)
 810122a:	683b      	ldr	r3, [r7, #0]
 810122c:	00db      	lsls	r3, r3, #3
 810122e:	4413      	add	r3, r2
 8101230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101234:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8101238:	f7ff f8b0 	bl	810039c <__adddf3>
 810123c:	4602      	mov	r2, r0
 810123e:	460b      	mov	r3, r1
 8101240:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// integer part...
	intPart = f;
 8101244:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8101248:	f7ff fd0e 	bl	8100c68 <__aeabi_d2iz>
 810124c:	4603      	mov	r3, r0
 810124e:	61fb      	str	r3, [r7, #28]
	f -= intPart;
 8101250:	69f8      	ldr	r0, [r7, #28]
 8101252:	f7ff f9ef 	bl	8100634 <__aeabi_i2d>
 8101256:	4602      	mov	r2, r0
 8101258:	460b      	mov	r3, r1
 810125a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810125e:	f7ff f89b 	bl	8100398 <__aeabi_dsub>
 8101262:	4602      	mov	r2, r0
 8101264:	460b      	mov	r3, r1
 8101266:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if (!intPart)
 810126a:	69fb      	ldr	r3, [r7, #28]
 810126c:	2b00      	cmp	r3, #0
 810126e:	d105      	bne.n	810127c <ftoa+0x14c>
		*ptr++ = '0';
 8101270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101272:	1c5a      	adds	r2, r3, #1
 8101274:	627a      	str	r2, [r7, #36]	; 0x24
 8101276:	2230      	movs	r2, #48	; 0x30
 8101278:	701a      	strb	r2, [r3, #0]
 810127a:	e038      	b.n	81012ee <ftoa+0x1be>
	else
	{
		// save start pointer
		p = ptr;
 810127c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810127e:	623b      	str	r3, [r7, #32]

		// convert (reverse order)
		while (intPart)
 8101280:	e01a      	b.n	81012b8 <ftoa+0x188>
		{
			*p++ = '0' + intPart % 10;
 8101282:	69fa      	ldr	r2, [r7, #28]
 8101284:	4b41      	ldr	r3, [pc, #260]	; (810138c <ftoa+0x25c>)
 8101286:	fb83 1302 	smull	r1, r3, r3, r2
 810128a:	1099      	asrs	r1, r3, #2
 810128c:	17d3      	asrs	r3, r2, #31
 810128e:	1ac9      	subs	r1, r1, r3
 8101290:	460b      	mov	r3, r1
 8101292:	009b      	lsls	r3, r3, #2
 8101294:	440b      	add	r3, r1
 8101296:	005b      	lsls	r3, r3, #1
 8101298:	1ad1      	subs	r1, r2, r3
 810129a:	b2ca      	uxtb	r2, r1
 810129c:	6a3b      	ldr	r3, [r7, #32]
 810129e:	1c59      	adds	r1, r3, #1
 81012a0:	6239      	str	r1, [r7, #32]
 81012a2:	3230      	adds	r2, #48	; 0x30
 81012a4:	b2d2      	uxtb	r2, r2
 81012a6:	701a      	strb	r2, [r3, #0]
			intPart /= 10;
 81012a8:	69fb      	ldr	r3, [r7, #28]
 81012aa:	4a38      	ldr	r2, [pc, #224]	; (810138c <ftoa+0x25c>)
 81012ac:	fb82 1203 	smull	r1, r2, r2, r3
 81012b0:	1092      	asrs	r2, r2, #2
 81012b2:	17db      	asrs	r3, r3, #31
 81012b4:	1ad3      	subs	r3, r2, r3
 81012b6:	61fb      	str	r3, [r7, #28]
		while (intPart)
 81012b8:	69fb      	ldr	r3, [r7, #28]
 81012ba:	2b00      	cmp	r3, #0
 81012bc:	d1e1      	bne.n	8101282 <ftoa+0x152>
		}

		// save end pos
		p1 = p;
 81012be:	6a3b      	ldr	r3, [r7, #32]
 81012c0:	61bb      	str	r3, [r7, #24]

		// reverse result
		while (p > ptr)
 81012c2:	e00e      	b.n	81012e2 <ftoa+0x1b2>
		{
			c = *--p;
 81012c4:	6a3b      	ldr	r3, [r7, #32]
 81012c6:	3b01      	subs	r3, #1
 81012c8:	623b      	str	r3, [r7, #32]
 81012ca:	6a3b      	ldr	r3, [r7, #32]
 81012cc:	781b      	ldrb	r3, [r3, #0]
 81012ce:	75fb      	strb	r3, [r7, #23]
			*p = *ptr;
 81012d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81012d2:	781a      	ldrb	r2, [r3, #0]
 81012d4:	6a3b      	ldr	r3, [r7, #32]
 81012d6:	701a      	strb	r2, [r3, #0]
			*ptr++ = c;
 81012d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81012da:	1c5a      	adds	r2, r3, #1
 81012dc:	627a      	str	r2, [r7, #36]	; 0x24
 81012de:	7dfa      	ldrb	r2, [r7, #23]
 81012e0:	701a      	strb	r2, [r3, #0]
		while (p > ptr)
 81012e2:	6a3a      	ldr	r2, [r7, #32]
 81012e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81012e6:	429a      	cmp	r2, r3
 81012e8:	d8ec      	bhi.n	81012c4 <ftoa+0x194>
		}

		// restore end pos
		ptr = p1;
 81012ea:	69bb      	ldr	r3, [r7, #24]
 81012ec:	627b      	str	r3, [r7, #36]	; 0x24
	}

	// decimal part
	if (precision)
 81012ee:	683b      	ldr	r3, [r7, #0]
 81012f0:	2b00      	cmp	r3, #0
 81012f2:	d030      	beq.n	8101356 <ftoa+0x226>
	{
		// place decimal point
		*ptr++ = '.';
 81012f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81012f6:	1c5a      	adds	r2, r3, #1
 81012f8:	627a      	str	r2, [r7, #36]	; 0x24
 81012fa:	222e      	movs	r2, #46	; 0x2e
 81012fc:	701a      	strb	r2, [r3, #0]

		// convert
		while (precision--)
 81012fe:	e025      	b.n	810134c <ftoa+0x21c>
		{
			f *= 10.0;
 8101300:	f04f 0200 	mov.w	r2, #0
 8101304:	4b1d      	ldr	r3, [pc, #116]	; (810137c <ftoa+0x24c>)
 8101306:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810130a:	f7ff f9fd 	bl	8100708 <__aeabi_dmul>
 810130e:	4602      	mov	r2, r0
 8101310:	460b      	mov	r3, r1
 8101312:	e9c7 2302 	strd	r2, r3, [r7, #8]
			c = f;
 8101316:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810131a:	f7ff fccd 	bl	8100cb8 <__aeabi_d2uiz>
 810131e:	4603      	mov	r3, r0
 8101320:	75fb      	strb	r3, [r7, #23]
			*ptr++ = '0' + c;
 8101322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101324:	1c5a      	adds	r2, r3, #1
 8101326:	627a      	str	r2, [r7, #36]	; 0x24
 8101328:	7dfa      	ldrb	r2, [r7, #23]
 810132a:	3230      	adds	r2, #48	; 0x30
 810132c:	b2d2      	uxtb	r2, r2
 810132e:	701a      	strb	r2, [r3, #0]
			f -= c;
 8101330:	7dfb      	ldrb	r3, [r7, #23]
 8101332:	4618      	mov	r0, r3
 8101334:	f7ff f97e 	bl	8100634 <__aeabi_i2d>
 8101338:	4602      	mov	r2, r0
 810133a:	460b      	mov	r3, r1
 810133c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8101340:	f7ff f82a 	bl	8100398 <__aeabi_dsub>
 8101344:	4602      	mov	r2, r0
 8101346:	460b      	mov	r3, r1
 8101348:	e9c7 2302 	strd	r2, r3, [r7, #8]
		while (precision--)
 810134c:	683b      	ldr	r3, [r7, #0]
 810134e:	1e5a      	subs	r2, r3, #1
 8101350:	603a      	str	r2, [r7, #0]
 8101352:	2b00      	cmp	r3, #0
 8101354:	d1d4      	bne.n	8101300 <ftoa+0x1d0>
		}
	}

	// terminating zero
	*ptr = 0;
 8101356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101358:	2200      	movs	r2, #0
 810135a:	701a      	strb	r2, [r3, #0]

	return buf;
 810135c:	687b      	ldr	r3, [r7, #4]
}
 810135e:	4618      	mov	r0, r3
 8101360:	3728      	adds	r7, #40	; 0x28
 8101362:	46bd      	mov	sp, r7
 8101364:	bdb0      	pop	{r4, r5, r7, pc}
 8101366:	bf00      	nop
 8101368:	00000000 	.word	0x00000000
 810136c:	40c38800 	.word	0x40c38800
 8101370:	00000000 	.word	0x00000000
 8101374:	40f86a00 	.word	0x40f86a00
 8101378:	3ff00000 	.word	0x3ff00000
 810137c:	40240000 	.word	0x40240000
 8101380:	40590000 	.word	0x40590000
 8101384:	408f4000 	.word	0x408f4000
 8101388:	0810e740 	.word	0x0810e740
 810138c:	66666667 	.word	0x66666667

08101390 <clearCommand>:
 * Function name: clearBuffer
 * Description : Clear the buffer array
 * Argument : none
 * Return value : none
 **********************************************/
void clearCommand(uint8_t data[]) {
 8101390:	b480      	push	{r7}
 8101392:	b085      	sub	sp, #20
 8101394:	af00      	add	r7, sp, #0
 8101396:	6078      	str	r0, [r7, #4]
	int i;
	for (i = 0; i < sizeof(data); i++) {
 8101398:	2300      	movs	r3, #0
 810139a:	60fb      	str	r3, [r7, #12]
 810139c:	e007      	b.n	81013ae <clearCommand+0x1e>
		data[i] = 0;
 810139e:	68fb      	ldr	r3, [r7, #12]
 81013a0:	687a      	ldr	r2, [r7, #4]
 81013a2:	4413      	add	r3, r2
 81013a4:	2200      	movs	r2, #0
 81013a6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < sizeof(data); i++) {
 81013a8:	68fb      	ldr	r3, [r7, #12]
 81013aa:	3301      	adds	r3, #1
 81013ac:	60fb      	str	r3, [r7, #12]
 81013ae:	68fb      	ldr	r3, [r7, #12]
 81013b0:	2b03      	cmp	r3, #3
 81013b2:	d9f4      	bls.n	810139e <clearCommand+0xe>
	}
}
 81013b4:	bf00      	nop
 81013b6:	bf00      	nop
 81013b8:	3714      	adds	r7, #20
 81013ba:	46bd      	mov	sp, r7
 81013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013c0:	4770      	bx	lr
	...

081013c4 <parseCommand>:
 * Function name: parseCommand
 * Description : Parse the received command
 * Argument : none
 * Return value : Char* pointing to the parsed command
 **********************************************/
void parseCommand(char *data) {
 81013c4:	b480      	push	{r7}
 81013c6:	b083      	sub	sp, #12
 81013c8:	af00      	add	r7, sp, #0
 81013ca:	6078      	str	r0, [r7, #4]
	if (data[2]) {
 81013cc:	687b      	ldr	r3, [r7, #4]
 81013ce:	3302      	adds	r3, #2
 81013d0:	781b      	ldrb	r3, [r3, #0]
 81013d2:	2b00      	cmp	r3, #0
 81013d4:	d00f      	beq.n	81013f6 <parseCommand+0x32>
		switch (data[2]) {
 81013d6:	687b      	ldr	r3, [r7, #4]
 81013d8:	3302      	adds	r3, #2
 81013da:	781b      	ldrb	r3, [r3, #0]
 81013dc:	2b44      	cmp	r3, #68	; 0x44
 81013de:	d005      	beq.n	81013ec <parseCommand+0x28>
 81013e0:	2b45      	cmp	r3, #69	; 0x45
 81013e2:	d107      	bne.n	81013f4 <parseCommand+0x30>

		case 'E': {
			TX_Flag_DSEND = 1;
 81013e4:	4b07      	ldr	r3, [pc, #28]	; (8101404 <parseCommand+0x40>)
 81013e6:	2201      	movs	r2, #1
 81013e8:	601a      	str	r2, [r3, #0]
		}
			break;
 81013ea:	e004      	b.n	81013f6 <parseCommand+0x32>

		case 'D': {
			TX_Flag_DSEND = 0;
 81013ec:	4b05      	ldr	r3, [pc, #20]	; (8101404 <parseCommand+0x40>)
 81013ee:	2200      	movs	r2, #0
 81013f0:	601a      	str	r2, [r3, #0]
		}
			break;
 81013f2:	e000      	b.n	81013f6 <parseCommand+0x32>

		default:
			break;
 81013f4:	bf00      	nop
		}
	}
}
 81013f6:	bf00      	nop
 81013f8:	370c      	adds	r7, #12
 81013fa:	46bd      	mov	sp, r7
 81013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101400:	4770      	bx	lr
 8101402:	bf00      	nop
 8101404:	10000204 	.word	0x10000204

08101408 <getFixedArray>:

//crea rispetto ad un double di partenza un array
//di unsigned int con senza perdita di cifre significative
void getFixedArray(double num, int nInt, int nDec, uint8_t *result) {
 8101408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810140c:	b08f      	sub	sp, #60	; 0x3c
 810140e:	af00      	add	r7, sp, #0
 8101410:	ed87 0b04 	vstr	d0, [r7, #16]
 8101414:	60f8      	str	r0, [r7, #12]
 8101416:	60b9      	str	r1, [r7, #8]
 8101418:	607a      	str	r2, [r7, #4]
 810141a:	466b      	mov	r3, sp
 810141c:	461e      	mov	r6, r3
	int p = 0;
 810141e:	2300      	movs	r3, #0
 8101420:	627b      	str	r3, [r7, #36]	; 0x24
	for (int i=0; ; i++) {
 8101422:	2300      	movs	r3, #0
 8101424:	637b      	str	r3, [r7, #52]	; 0x34
		int r = (int) num/pow(10,i);
 8101426:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 810142a:	f7ff fc1d 	bl	8100c68 <__aeabi_d2iz>
 810142e:	4603      	mov	r3, r0
 8101430:	4618      	mov	r0, r3
 8101432:	f7ff f8ff 	bl	8100634 <__aeabi_i2d>
 8101436:	4682      	mov	sl, r0
 8101438:	468b      	mov	fp, r1
 810143a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 810143c:	f7ff f8fa 	bl	8100634 <__aeabi_i2d>
 8101440:	4602      	mov	r2, r0
 8101442:	460b      	mov	r3, r1
 8101444:	ec43 2b11 	vmov	d1, r2, r3
 8101448:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8101578 <getFixedArray+0x170>
 810144c:	f00c fa24 	bl	810d898 <pow>
 8101450:	ec53 2b10 	vmov	r2, r3, d0
 8101454:	4650      	mov	r0, sl
 8101456:	4659      	mov	r1, fp
 8101458:	f7ff fa80 	bl	810095c <__aeabi_ddiv>
 810145c:	4602      	mov	r2, r0
 810145e:	460b      	mov	r3, r1
 8101460:	4610      	mov	r0, r2
 8101462:	4619      	mov	r1, r3
 8101464:	f7ff fc00 	bl	8100c68 <__aeabi_d2iz>
 8101468:	4603      	mov	r3, r0
 810146a:	623b      	str	r3, [r7, #32]
		if (r == 0) {
 810146c:	6a3b      	ldr	r3, [r7, #32]
 810146e:	2b00      	cmp	r3, #0
 8101470:	d136      	bne.n	81014e0 <getFixedArray+0xd8>
			p = i;
 8101472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101474:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8101476:	bf00      	nop
		}
	}
	char temp[nInt+nDec+1];
 8101478:	68fa      	ldr	r2, [r7, #12]
 810147a:	68bb      	ldr	r3, [r7, #8]
 810147c:	4413      	add	r3, r2
 810147e:	1c59      	adds	r1, r3, #1
 8101480:	1e4b      	subs	r3, r1, #1
 8101482:	61fb      	str	r3, [r7, #28]
 8101484:	460a      	mov	r2, r1
 8101486:	2300      	movs	r3, #0
 8101488:	4614      	mov	r4, r2
 810148a:	461d      	mov	r5, r3
 810148c:	f04f 0200 	mov.w	r2, #0
 8101490:	f04f 0300 	mov.w	r3, #0
 8101494:	00eb      	lsls	r3, r5, #3
 8101496:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 810149a:	00e2      	lsls	r2, r4, #3
 810149c:	460a      	mov	r2, r1
 810149e:	2300      	movs	r3, #0
 81014a0:	4690      	mov	r8, r2
 81014a2:	4699      	mov	r9, r3
 81014a4:	f04f 0200 	mov.w	r2, #0
 81014a8:	f04f 0300 	mov.w	r3, #0
 81014ac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 81014b0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 81014b4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 81014b8:	460b      	mov	r3, r1
 81014ba:	3307      	adds	r3, #7
 81014bc:	08db      	lsrs	r3, r3, #3
 81014be:	00db      	lsls	r3, r3, #3
 81014c0:	ebad 0d03 	sub.w	sp, sp, r3
 81014c4:	466b      	mov	r3, sp
 81014c6:	3300      	adds	r3, #0
 81014c8:	61bb      	str	r3, [r7, #24]
	ftoa(num, temp, nDec);
 81014ca:	68b9      	ldr	r1, [r7, #8]
 81014cc:	69b8      	ldr	r0, [r7, #24]
 81014ce:	ed97 0b04 	vldr	d0, [r7, #16]
 81014d2:	f7ff fe2d 	bl	8101130 <ftoa>
	int j=0;
 81014d6:	2300      	movs	r3, #0
 81014d8:	633b      	str	r3, [r7, #48]	; 0x30
	for (int i=0; i<nInt; i++) {
 81014da:	2300      	movs	r3, #0
 81014dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 81014de:	e01e      	b.n	810151e <getFixedArray+0x116>
	for (int i=0; ; i++) {
 81014e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81014e2:	3301      	adds	r3, #1
 81014e4:	637b      	str	r3, [r7, #52]	; 0x34
 81014e6:	e79e      	b.n	8101426 <getFixedArray+0x1e>
		if (nInt-p-i <= 0) {
 81014e8:	68fa      	ldr	r2, [r7, #12]
 81014ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81014ec:	1ad2      	subs	r2, r2, r3
 81014ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81014f0:	1ad3      	subs	r3, r2, r3
 81014f2:	2b00      	cmp	r3, #0
 81014f4:	dc0b      	bgt.n	810150e <getFixedArray+0x106>
			result[i] = temp[j];
 81014f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81014f8:	687a      	ldr	r2, [r7, #4]
 81014fa:	4413      	add	r3, r2
 81014fc:	69b9      	ldr	r1, [r7, #24]
 81014fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8101500:	440a      	add	r2, r1
 8101502:	7812      	ldrb	r2, [r2, #0]
 8101504:	701a      	strb	r2, [r3, #0]
			j++;
 8101506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101508:	3301      	adds	r3, #1
 810150a:	633b      	str	r3, [r7, #48]	; 0x30
 810150c:	e004      	b.n	8101518 <getFixedArray+0x110>
		} else {
			result[i] = '0';
 810150e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101510:	687a      	ldr	r2, [r7, #4]
 8101512:	4413      	add	r3, r2
 8101514:	2230      	movs	r2, #48	; 0x30
 8101516:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<nInt; i++) {
 8101518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810151a:	3301      	adds	r3, #1
 810151c:	62fb      	str	r3, [r7, #44]	; 0x2c
 810151e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8101520:	68fb      	ldr	r3, [r7, #12]
 8101522:	429a      	cmp	r2, r3
 8101524:	dbe0      	blt.n	81014e8 <getFixedArray+0xe0>
		}
	}
	if (p==0)
 8101526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101528:	2b00      	cmp	r3, #0
 810152a:	d102      	bne.n	8101532 <getFixedArray+0x12a>
		j++;
 810152c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810152e:	3301      	adds	r3, #1
 8101530:	633b      	str	r3, [r7, #48]	; 0x30
	j++;
 8101532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101534:	3301      	adds	r3, #1
 8101536:	633b      	str	r3, [r7, #48]	; 0x30
	for (int i=nInt; i<nInt+nDec; i++) {
 8101538:	68fb      	ldr	r3, [r7, #12]
 810153a:	62bb      	str	r3, [r7, #40]	; 0x28
 810153c:	e00d      	b.n	810155a <getFixedArray+0x152>
		result[i] = temp[j];
 810153e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101540:	687a      	ldr	r2, [r7, #4]
 8101542:	4413      	add	r3, r2
 8101544:	69b9      	ldr	r1, [r7, #24]
 8101546:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8101548:	440a      	add	r2, r1
 810154a:	7812      	ldrb	r2, [r2, #0]
 810154c:	701a      	strb	r2, [r3, #0]
		j++;
 810154e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101550:	3301      	adds	r3, #1
 8101552:	633b      	str	r3, [r7, #48]	; 0x30
	for (int i=nInt; i<nInt+nDec; i++) {
 8101554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101556:	3301      	adds	r3, #1
 8101558:	62bb      	str	r3, [r7, #40]	; 0x28
 810155a:	68fa      	ldr	r2, [r7, #12]
 810155c:	68bb      	ldr	r3, [r7, #8]
 810155e:	4413      	add	r3, r2
 8101560:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8101562:	429a      	cmp	r2, r3
 8101564:	dbeb      	blt.n	810153e <getFixedArray+0x136>
 8101566:	46b5      	mov	sp, r6
	}
}
 8101568:	bf00      	nop
 810156a:	373c      	adds	r7, #60	; 0x3c
 810156c:	46bd      	mov	sp, r7
 810156e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8101572:	bf00      	nop
 8101574:	f3af 8000 	nop.w
 8101578:	00000000 	.word	0x00000000
 810157c:	40240000 	.word	0x40240000

08101580 <HAL_UART_TxCpltCallback>:
//uint8_t pc_buffer[34]; //dimensione della stringa inviata (letta sul file .txt su Matlab)
uint8_t pc_buffer[33]; //dimensione della stringa inviata (letta sul file .txt su Matlab)
double duty_1 = 0, duty_2 = 0, duty_3 = 0, duty_4 = 0;

/* Callback per la trasmissione che si attiva una volta che tutti i dati sono pronti per l'invio*/ //(la scheda trasmette all'esp)
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8101580:	b480      	push	{r7}
 8101582:	b083      	sub	sp, #12
 8101584:	af00      	add	r7, sp, #0
 8101586:	6078      	str	r0, [r7, #4]

}
 8101588:	bf00      	nop
 810158a:	370c      	adds	r7, #12
 810158c:	46bd      	mov	sp, r7
 810158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101592:	4770      	bx	lr

08101594 <HAL_UART_RxCpltCallback>:

/* Callback per la ricezione che si attiva una volta ricevuti tutti i dati*/ //(la scheda riceve dall'esp)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8101594:	b580      	push	{r7, lr}
 8101596:	b082      	sub	sp, #8
 8101598:	af00      	add	r7, sp, #0
 810159a:	6078      	str	r0, [r7, #4]
	 HAL_UART_Receive_IT(&huart2, rxBuff, sizeof(rxBuff));
 810159c:	2204      	movs	r2, #4
 810159e:	4907      	ldr	r1, [pc, #28]	; (81015bc <HAL_UART_RxCpltCallback+0x28>)
 81015a0:	4807      	ldr	r0, [pc, #28]	; (81015c0 <HAL_UART_RxCpltCallback+0x2c>)
 81015a2:	f005 f907 	bl	81067b4 <HAL_UART_Receive_IT>
	 parseCommand(rxBuff); //parse del comando inviato da MATLAB all'ESP
 81015a6:	4805      	ldr	r0, [pc, #20]	; (81015bc <HAL_UART_RxCpltCallback+0x28>)
 81015a8:	f7ff ff0c 	bl	81013c4 <parseCommand>
	 clearCommand(rxBuff); //pulizia del buffer di ricezione;
 81015ac:	4803      	ldr	r0, [pc, #12]	; (81015bc <HAL_UART_RxCpltCallback+0x28>)
 81015ae:	f7ff feef 	bl	8101390 <clearCommand>
}
 81015b2:	bf00      	nop
 81015b4:	3708      	adds	r7, #8
 81015b6:	46bd      	mov	sp, r7
 81015b8:	bd80      	pop	{r7, pc}
 81015ba:	bf00      	nop
 81015bc:	10000330 	.word	0x10000330
 81015c0:	100002a0 	.word	0x100002a0
 81015c4:	00000000 	.word	0x00000000

081015c8 <generateRandomNumber>:

double generateRandomNumber(int min, int max) {
 81015c8:	b5b0      	push	{r4, r5, r7, lr}
 81015ca:	b084      	sub	sp, #16
 81015cc:	af00      	add	r7, sp, #0
 81015ce:	6078      	str	r0, [r7, #4]
 81015d0:	6039      	str	r1, [r7, #0]
	double scale = rand() / (double) RAND_MAX; /* [0, 1.0] */
 81015d2:	f008 fbcd 	bl	8109d70 <rand>
 81015d6:	4603      	mov	r3, r0
 81015d8:	4618      	mov	r0, r3
 81015da:	f7ff f82b 	bl	8100634 <__aeabi_i2d>
 81015de:	a314      	add	r3, pc, #80	; (adr r3, 8101630 <generateRandomNumber+0x68>)
 81015e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81015e4:	f7ff f9ba 	bl	810095c <__aeabi_ddiv>
 81015e8:	4602      	mov	r2, r0
 81015ea:	460b      	mov	r3, r1
 81015ec:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return (double) min + scale * (double) (max - min); /* [min, max] */
 81015f0:	6878      	ldr	r0, [r7, #4]
 81015f2:	f7ff f81f 	bl	8100634 <__aeabi_i2d>
 81015f6:	4604      	mov	r4, r0
 81015f8:	460d      	mov	r5, r1
 81015fa:	683a      	ldr	r2, [r7, #0]
 81015fc:	687b      	ldr	r3, [r7, #4]
 81015fe:	1ad3      	subs	r3, r2, r3
 8101600:	4618      	mov	r0, r3
 8101602:	f7ff f817 	bl	8100634 <__aeabi_i2d>
 8101606:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 810160a:	f7ff f87d 	bl	8100708 <__aeabi_dmul>
 810160e:	4602      	mov	r2, r0
 8101610:	460b      	mov	r3, r1
 8101612:	4620      	mov	r0, r4
 8101614:	4629      	mov	r1, r5
 8101616:	f7fe fec1 	bl	810039c <__adddf3>
 810161a:	4602      	mov	r2, r0
 810161c:	460b      	mov	r3, r1
 810161e:	ec43 2b17 	vmov	d7, r2, r3
}
 8101622:	eeb0 0a47 	vmov.f32	s0, s14
 8101626:	eef0 0a67 	vmov.f32	s1, s15
 810162a:	3710      	adds	r7, #16
 810162c:	46bd      	mov	sp, r7
 810162e:	bdb0      	pop	{r4, r5, r7, pc}
 8101630:	ffc00000 	.word	0xffc00000
 8101634:	41dfffff 	.word	0x41dfffff

08101638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8101638:	b580      	push	{r7, lr}
 810163a:	b082      	sub	sp, #8
 810163c:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 810163e:	4b91      	ldr	r3, [pc, #580]	; (8101884 <main+0x24c>)
 8101640:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101644:	4a8f      	ldr	r2, [pc, #572]	; (8101884 <main+0x24c>)
 8101646:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810164a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810164e:	4b8d      	ldr	r3, [pc, #564]	; (8101884 <main+0x24c>)
 8101650:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8101658:	603b      	str	r3, [r7, #0]
 810165a:	683b      	ldr	r3, [r7, #0]
	/* Activate HSEM notification for Cortex-M4*/
	HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810165c:	2001      	movs	r0, #1
 810165e:	f001 ff65 	bl	810352c <HAL_HSEM_ActivateNotification>
	/*
	 Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
	 perform system initialization (system clock config, external memory configuration.. )
	 */
	HAL_PWREx_ClearPendingEvent();
 8101662:	f001 ffef 	bl	8103644 <HAL_PWREx_ClearPendingEvent>
	HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE,
 8101666:	2201      	movs	r2, #1
 8101668:	2102      	movs	r1, #2
 810166a:	2000      	movs	r0, #0
 810166c:	f001 ff70 	bl	8103550 <HAL_PWREx_EnterSTOPMode>
	PWR_D2_DOMAIN);
	/* Clear HSEM flag */
	__HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101670:	4b85      	ldr	r3, [pc, #532]	; (8101888 <main+0x250>)
 8101672:	681b      	ldr	r3, [r3, #0]
 8101674:	091b      	lsrs	r3, r3, #4
 8101676:	f003 030f 	and.w	r3, r3, #15
 810167a:	2b07      	cmp	r3, #7
 810167c:	d108      	bne.n	8101690 <main+0x58>
 810167e:	4b83      	ldr	r3, [pc, #524]	; (810188c <main+0x254>)
 8101680:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8101684:	4a81      	ldr	r2, [pc, #516]	; (810188c <main+0x254>)
 8101686:	f043 0301 	orr.w	r3, r3, #1
 810168a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 810168e:	e007      	b.n	81016a0 <main+0x68>
 8101690:	4b7e      	ldr	r3, [pc, #504]	; (810188c <main+0x254>)
 8101692:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8101696:	4a7d      	ldr	r2, [pc, #500]	; (810188c <main+0x254>)
 8101698:	f043 0301 	orr.w	r3, r3, #1
 810169c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81016a0:	f000 fe3e 	bl	8102320 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81016a4:	f000 fa42 	bl	8101b2c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 81016a8:	f000 f9f4 	bl	8101a94 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 81016ac:	f000 f90c 	bl	81018c8 <MX_TIM2_Init>
  MX_TIM3_Init();
 81016b0:	f000 f958 	bl	8101964 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart2, rxBuff, sizeof(rxBuff));
 81016b4:	2204      	movs	r2, #4
 81016b6:	4976      	ldr	r1, [pc, #472]	; (8101890 <main+0x258>)
 81016b8:	4876      	ldr	r0, [pc, #472]	; (8101894 <main+0x25c>)
 81016ba:	f005 f87b 	bl	81067b4 <HAL_UART_Receive_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 81016be:	4876      	ldr	r0, [pc, #472]	; (8101898 <main+0x260>)
 81016c0:	f003 fd66 	bl	8105190 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 81016c4:	2100      	movs	r1, #0
 81016c6:	4875      	ldr	r0, [pc, #468]	; (810189c <main+0x264>)
 81016c8:	f003 fe3c 	bl	8105344 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 81016cc:	2104      	movs	r1, #4
 81016ce:	4873      	ldr	r0, [pc, #460]	; (810189c <main+0x264>)
 81016d0:	f003 fe38 	bl	8105344 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 81016d4:	2108      	movs	r1, #8
 81016d6:	4871      	ldr	r0, [pc, #452]	; (810189c <main+0x264>)
 81016d8:	f003 fe34 	bl	8105344 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 81016dc:	210c      	movs	r1, #12
 81016de:	486f      	ldr	r0, [pc, #444]	; (810189c <main+0x264>)
 81016e0:	f003 fe30 	bl	8105344 <HAL_TIM_PWM_Start>
	srand(time(NULL));
 81016e4:	2000      	movs	r0, #0
 81016e6:	f009 fae1 	bl	810acac <time>
 81016ea:	4602      	mov	r2, r0
 81016ec:	460b      	mov	r3, r1
 81016ee:	4613      	mov	r3, r2
 81016f0:	4618      	mov	r0, r3
 81016f2:	f008 fb0f 	bl	8109d14 <srand>
	int i = 0;
 81016f6:	2300      	movs	r3, #0
 81016f8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		TIM3->CCR1= 999 - i%1000;
 81016fa:	687a      	ldr	r2, [r7, #4]
 81016fc:	4b68      	ldr	r3, [pc, #416]	; (81018a0 <main+0x268>)
 81016fe:	fb83 1302 	smull	r1, r3, r3, r2
 8101702:	1199      	asrs	r1, r3, #6
 8101704:	17d3      	asrs	r3, r2, #31
 8101706:	1acb      	subs	r3, r1, r3
 8101708:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 810170c:	fb01 f303 	mul.w	r3, r1, r3
 8101710:	1ad3      	subs	r3, r2, r3
 8101712:	f5c3 7379 	rsb	r3, r3, #996	; 0x3e4
 8101716:	3303      	adds	r3, #3
 8101718:	4a62      	ldr	r2, [pc, #392]	; (81018a4 <main+0x26c>)
 810171a:	6353      	str	r3, [r2, #52]	; 0x34
		TIM3->CCR2= 999 - i%1000;
 810171c:	687a      	ldr	r2, [r7, #4]
 810171e:	4b60      	ldr	r3, [pc, #384]	; (81018a0 <main+0x268>)
 8101720:	fb83 1302 	smull	r1, r3, r3, r2
 8101724:	1199      	asrs	r1, r3, #6
 8101726:	17d3      	asrs	r3, r2, #31
 8101728:	1acb      	subs	r3, r1, r3
 810172a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 810172e:	fb01 f303 	mul.w	r3, r1, r3
 8101732:	1ad3      	subs	r3, r2, r3
 8101734:	f5c3 7379 	rsb	r3, r3, #996	; 0x3e4
 8101738:	3303      	adds	r3, #3
 810173a:	4a5a      	ldr	r2, [pc, #360]	; (81018a4 <main+0x26c>)
 810173c:	6393      	str	r3, [r2, #56]	; 0x38
		TIM3->CCR3= 999 - i%1000;
 810173e:	687a      	ldr	r2, [r7, #4]
 8101740:	4b57      	ldr	r3, [pc, #348]	; (81018a0 <main+0x268>)
 8101742:	fb83 1302 	smull	r1, r3, r3, r2
 8101746:	1199      	asrs	r1, r3, #6
 8101748:	17d3      	asrs	r3, r2, #31
 810174a:	1acb      	subs	r3, r1, r3
 810174c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8101750:	fb01 f303 	mul.w	r3, r1, r3
 8101754:	1ad3      	subs	r3, r2, r3
 8101756:	f5c3 7379 	rsb	r3, r3, #996	; 0x3e4
 810175a:	3303      	adds	r3, #3
 810175c:	4a51      	ldr	r2, [pc, #324]	; (81018a4 <main+0x26c>)
 810175e:	63d3      	str	r3, [r2, #60]	; 0x3c
		TIM3->CCR4= 999 - i%1000;
 8101760:	687a      	ldr	r2, [r7, #4]
 8101762:	4b4f      	ldr	r3, [pc, #316]	; (81018a0 <main+0x268>)
 8101764:	fb83 1302 	smull	r1, r3, r3, r2
 8101768:	1199      	asrs	r1, r3, #6
 810176a:	17d3      	asrs	r3, r2, #31
 810176c:	1acb      	subs	r3, r1, r3
 810176e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8101772:	fb01 f303 	mul.w	r3, r1, r3
 8101776:	1ad3      	subs	r3, r2, r3
 8101778:	f5c3 7379 	rsb	r3, r3, #996	; 0x3e4
 810177c:	3303      	adds	r3, #3
 810177e:	4a49      	ldr	r2, [pc, #292]	; (81018a4 <main+0x26c>)
 8101780:	6413      	str	r3, [r2, #64]	; 0x40
		duty_1 = (double) (i%1000) / 1000;
 8101782:	687b      	ldr	r3, [r7, #4]
 8101784:	4a46      	ldr	r2, [pc, #280]	; (81018a0 <main+0x268>)
 8101786:	fb82 1203 	smull	r1, r2, r2, r3
 810178a:	1191      	asrs	r1, r2, #6
 810178c:	17da      	asrs	r2, r3, #31
 810178e:	1a8a      	subs	r2, r1, r2
 8101790:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8101794:	fb01 f202 	mul.w	r2, r1, r2
 8101798:	1a9a      	subs	r2, r3, r2
 810179a:	4610      	mov	r0, r2
 810179c:	f7fe ff4a 	bl	8100634 <__aeabi_i2d>
 81017a0:	f04f 0200 	mov.w	r2, #0
 81017a4:	4b40      	ldr	r3, [pc, #256]	; (81018a8 <main+0x270>)
 81017a6:	f7ff f8d9 	bl	810095c <__aeabi_ddiv>
 81017aa:	4602      	mov	r2, r0
 81017ac:	460b      	mov	r3, r1
 81017ae:	493f      	ldr	r1, [pc, #252]	; (81018ac <main+0x274>)
 81017b0:	e9c1 2300 	strd	r2, r3, [r1]
		duty_2 = (double) (i%1000) / 1000;
 81017b4:	687b      	ldr	r3, [r7, #4]
 81017b6:	4a3a      	ldr	r2, [pc, #232]	; (81018a0 <main+0x268>)
 81017b8:	fb82 1203 	smull	r1, r2, r2, r3
 81017bc:	1191      	asrs	r1, r2, #6
 81017be:	17da      	asrs	r2, r3, #31
 81017c0:	1a8a      	subs	r2, r1, r2
 81017c2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 81017c6:	fb01 f202 	mul.w	r2, r1, r2
 81017ca:	1a9a      	subs	r2, r3, r2
 81017cc:	4610      	mov	r0, r2
 81017ce:	f7fe ff31 	bl	8100634 <__aeabi_i2d>
 81017d2:	f04f 0200 	mov.w	r2, #0
 81017d6:	4b34      	ldr	r3, [pc, #208]	; (81018a8 <main+0x270>)
 81017d8:	f7ff f8c0 	bl	810095c <__aeabi_ddiv>
 81017dc:	4602      	mov	r2, r0
 81017de:	460b      	mov	r3, r1
 81017e0:	4933      	ldr	r1, [pc, #204]	; (81018b0 <main+0x278>)
 81017e2:	e9c1 2300 	strd	r2, r3, [r1]
		duty_3 = (double) (i%1000) / 1000;
 81017e6:	687b      	ldr	r3, [r7, #4]
 81017e8:	4a2d      	ldr	r2, [pc, #180]	; (81018a0 <main+0x268>)
 81017ea:	fb82 1203 	smull	r1, r2, r2, r3
 81017ee:	1191      	asrs	r1, r2, #6
 81017f0:	17da      	asrs	r2, r3, #31
 81017f2:	1a8a      	subs	r2, r1, r2
 81017f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 81017f8:	fb01 f202 	mul.w	r2, r1, r2
 81017fc:	1a9a      	subs	r2, r3, r2
 81017fe:	4610      	mov	r0, r2
 8101800:	f7fe ff18 	bl	8100634 <__aeabi_i2d>
 8101804:	f04f 0200 	mov.w	r2, #0
 8101808:	4b27      	ldr	r3, [pc, #156]	; (81018a8 <main+0x270>)
 810180a:	f7ff f8a7 	bl	810095c <__aeabi_ddiv>
 810180e:	4602      	mov	r2, r0
 8101810:	460b      	mov	r3, r1
 8101812:	4928      	ldr	r1, [pc, #160]	; (81018b4 <main+0x27c>)
 8101814:	e9c1 2300 	strd	r2, r3, [r1]
		duty_4 = (double) (i%1000) / 1000;
 8101818:	687b      	ldr	r3, [r7, #4]
 810181a:	4a21      	ldr	r2, [pc, #132]	; (81018a0 <main+0x268>)
 810181c:	fb82 1203 	smull	r1, r2, r2, r3
 8101820:	1191      	asrs	r1, r2, #6
 8101822:	17da      	asrs	r2, r3, #31
 8101824:	1a8a      	subs	r2, r1, r2
 8101826:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 810182a:	fb01 f202 	mul.w	r2, r1, r2
 810182e:	1a9a      	subs	r2, r3, r2
 8101830:	4610      	mov	r0, r2
 8101832:	f7fe feff 	bl	8100634 <__aeabi_i2d>
 8101836:	f04f 0200 	mov.w	r2, #0
 810183a:	4b1b      	ldr	r3, [pc, #108]	; (81018a8 <main+0x270>)
 810183c:	f7ff f88e 	bl	810095c <__aeabi_ddiv>
 8101840:	4602      	mov	r2, r0
 8101842:	460b      	mov	r3, r1
 8101844:	491c      	ldr	r1, [pc, #112]	; (81018b8 <main+0x280>)
 8101846:	e9c1 2300 	strd	r2, r3, [r1]
		i++;
 810184a:	687b      	ldr	r3, [r7, #4]
 810184c:	3301      	adds	r3, #1
 810184e:	607b      	str	r3, [r7, #4]

        if (TX_Flag_DSEND) {
 8101850:	4b1a      	ldr	r3, [pc, #104]	; (81018bc <main+0x284>)
 8101852:	681b      	ldr	r3, [r3, #0]
 8101854:	2b00      	cmp	r3, #0
 8101856:	d00a      	beq.n	810186e <main+0x236>
		            // se c'è trasmissione
		            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); //accensione led verde
 8101858:	2201      	movs	r2, #1
 810185a:	2101      	movs	r1, #1
 810185c:	4818      	ldr	r0, [pc, #96]	; (81018c0 <main+0x288>)
 810185e:	f001 fe4b 	bl	81034f8 <HAL_GPIO_WritePin>
		            HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET); //spegnimento led giallo
 8101862:	2200      	movs	r2, #0
 8101864:	2102      	movs	r1, #2
 8101866:	4817      	ldr	r0, [pc, #92]	; (81018c4 <main+0x28c>)
 8101868:	f001 fe46 	bl	81034f8 <HAL_GPIO_WritePin>
 810186c:	e745      	b.n	81016fa <main+0xc2>
		        } else {
		            // se non c'è trasmissione
		            HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET); //accensione led giallo
 810186e:	2201      	movs	r2, #1
 8101870:	2102      	movs	r1, #2
 8101872:	4814      	ldr	r0, [pc, #80]	; (81018c4 <main+0x28c>)
 8101874:	f001 fe40 	bl	81034f8 <HAL_GPIO_WritePin>
		            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); //spegnimento led verde
 8101878:	2200      	movs	r2, #0
 810187a:	2101      	movs	r1, #1
 810187c:	4810      	ldr	r0, [pc, #64]	; (81018c0 <main+0x288>)
 810187e:	f001 fe3b 	bl	81034f8 <HAL_GPIO_WritePin>
		TIM3->CCR1= 999 - i%1000;
 8101882:	e73a      	b.n	81016fa <main+0xc2>
 8101884:	58024400 	.word	0x58024400
 8101888:	e000ed00 	.word	0xe000ed00
 810188c:	58026400 	.word	0x58026400
 8101890:	10000330 	.word	0x10000330
 8101894:	100002a0 	.word	0x100002a0
 8101898:	10000208 	.word	0x10000208
 810189c:	10000254 	.word	0x10000254
 81018a0:	10624dd3 	.word	0x10624dd3
 81018a4:	40000400 	.word	0x40000400
 81018a8:	408f4000 	.word	0x408f4000
 81018ac:	10000358 	.word	0x10000358
 81018b0:	10000360 	.word	0x10000360
 81018b4:	10000368 	.word	0x10000368
 81018b8:	10000370 	.word	0x10000370
 81018bc:	10000204 	.word	0x10000204
 81018c0:	58020400 	.word	0x58020400
 81018c4:	58021000 	.word	0x58021000

081018c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 81018c8:	b580      	push	{r7, lr}
 81018ca:	b088      	sub	sp, #32
 81018cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 81018ce:	f107 0310 	add.w	r3, r7, #16
 81018d2:	2200      	movs	r2, #0
 81018d4:	601a      	str	r2, [r3, #0]
 81018d6:	605a      	str	r2, [r3, #4]
 81018d8:	609a      	str	r2, [r3, #8]
 81018da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81018dc:	1d3b      	adds	r3, r7, #4
 81018de:	2200      	movs	r2, #0
 81018e0:	601a      	str	r2, [r3, #0]
 81018e2:	605a      	str	r2, [r3, #4]
 81018e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 81018e6:	4b1e      	ldr	r3, [pc, #120]	; (8101960 <MX_TIM2_Init+0x98>)
 81018e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 81018ec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24000-1;
 81018ee:	4b1c      	ldr	r3, [pc, #112]	; (8101960 <MX_TIM2_Init+0x98>)
 81018f0:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 81018f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 81018f6:	4b1a      	ldr	r3, [pc, #104]	; (8101960 <MX_TIM2_Init+0x98>)
 81018f8:	2200      	movs	r2, #0
 81018fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 81018fc:	4b18      	ldr	r3, [pc, #96]	; (8101960 <MX_TIM2_Init+0x98>)
 81018fe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8101902:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8101904:	4b16      	ldr	r3, [pc, #88]	; (8101960 <MX_TIM2_Init+0x98>)
 8101906:	2200      	movs	r2, #0
 8101908:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 810190a:	4b15      	ldr	r3, [pc, #84]	; (8101960 <MX_TIM2_Init+0x98>)
 810190c:	2200      	movs	r2, #0
 810190e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8101910:	4813      	ldr	r0, [pc, #76]	; (8101960 <MX_TIM2_Init+0x98>)
 8101912:	f003 fbe5 	bl	81050e0 <HAL_TIM_Base_Init>
 8101916:	4603      	mov	r3, r0
 8101918:	2b00      	cmp	r3, #0
 810191a:	d001      	beq.n	8101920 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 810191c:	f000 fa62 	bl	8101de4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8101920:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8101924:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8101926:	f107 0310 	add.w	r3, r7, #16
 810192a:	4619      	mov	r1, r3
 810192c:	480c      	ldr	r0, [pc, #48]	; (8101960 <MX_TIM2_Init+0x98>)
 810192e:	f004 f84b 	bl	81059c8 <HAL_TIM_ConfigClockSource>
 8101932:	4603      	mov	r3, r0
 8101934:	2b00      	cmp	r3, #0
 8101936:	d001      	beq.n	810193c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8101938:	f000 fa54 	bl	8101de4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 810193c:	2300      	movs	r3, #0
 810193e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8101940:	2300      	movs	r3, #0
 8101942:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8101944:	1d3b      	adds	r3, r7, #4
 8101946:	4619      	mov	r1, r3
 8101948:	4805      	ldr	r0, [pc, #20]	; (8101960 <MX_TIM2_Init+0x98>)
 810194a:	f004 fd8f 	bl	810646c <HAL_TIMEx_MasterConfigSynchronization>
 810194e:	4603      	mov	r3, r0
 8101950:	2b00      	cmp	r3, #0
 8101952:	d001      	beq.n	8101958 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8101954:	f000 fa46 	bl	8101de4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8101958:	bf00      	nop
 810195a:	3720      	adds	r7, #32
 810195c:	46bd      	mov	sp, r7
 810195e:	bd80      	pop	{r7, pc}
 8101960:	10000208 	.word	0x10000208

08101964 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8101964:	b580      	push	{r7, lr}
 8101966:	b08e      	sub	sp, #56	; 0x38
 8101968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 810196a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 810196e:	2200      	movs	r2, #0
 8101970:	601a      	str	r2, [r3, #0]
 8101972:	605a      	str	r2, [r3, #4]
 8101974:	609a      	str	r2, [r3, #8]
 8101976:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8101978:	f107 031c 	add.w	r3, r7, #28
 810197c:	2200      	movs	r2, #0
 810197e:	601a      	str	r2, [r3, #0]
 8101980:	605a      	str	r2, [r3, #4]
 8101982:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8101984:	463b      	mov	r3, r7
 8101986:	2200      	movs	r2, #0
 8101988:	601a      	str	r2, [r3, #0]
 810198a:	605a      	str	r2, [r3, #4]
 810198c:	609a      	str	r2, [r3, #8]
 810198e:	60da      	str	r2, [r3, #12]
 8101990:	611a      	str	r2, [r3, #16]
 8101992:	615a      	str	r2, [r3, #20]
 8101994:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8101996:	4b3d      	ldr	r3, [pc, #244]	; (8101a8c <MX_TIM3_Init+0x128>)
 8101998:	4a3d      	ldr	r2, [pc, #244]	; (8101a90 <MX_TIM3_Init+0x12c>)
 810199a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 240-1;
 810199c:	4b3b      	ldr	r3, [pc, #236]	; (8101a8c <MX_TIM3_Init+0x128>)
 810199e:	22ef      	movs	r2, #239	; 0xef
 81019a0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 81019a2:	4b3a      	ldr	r3, [pc, #232]	; (8101a8c <MX_TIM3_Init+0x128>)
 81019a4:	2200      	movs	r2, #0
 81019a6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 81019a8:	4b38      	ldr	r3, [pc, #224]	; (8101a8c <MX_TIM3_Init+0x128>)
 81019aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 81019ae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81019b0:	4b36      	ldr	r3, [pc, #216]	; (8101a8c <MX_TIM3_Init+0x128>)
 81019b2:	2200      	movs	r2, #0
 81019b4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81019b6:	4b35      	ldr	r3, [pc, #212]	; (8101a8c <MX_TIM3_Init+0x128>)
 81019b8:	2200      	movs	r2, #0
 81019ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 81019bc:	4833      	ldr	r0, [pc, #204]	; (8101a8c <MX_TIM3_Init+0x128>)
 81019be:	f003 fb8f 	bl	81050e0 <HAL_TIM_Base_Init>
 81019c2:	4603      	mov	r3, r0
 81019c4:	2b00      	cmp	r3, #0
 81019c6:	d001      	beq.n	81019cc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 81019c8:	f000 fa0c 	bl	8101de4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 81019cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 81019d0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 81019d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 81019d6:	4619      	mov	r1, r3
 81019d8:	482c      	ldr	r0, [pc, #176]	; (8101a8c <MX_TIM3_Init+0x128>)
 81019da:	f003 fff5 	bl	81059c8 <HAL_TIM_ConfigClockSource>
 81019de:	4603      	mov	r3, r0
 81019e0:	2b00      	cmp	r3, #0
 81019e2:	d001      	beq.n	81019e8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 81019e4:	f000 f9fe 	bl	8101de4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 81019e8:	4828      	ldr	r0, [pc, #160]	; (8101a8c <MX_TIM3_Init+0x128>)
 81019ea:	f003 fc49 	bl	8105280 <HAL_TIM_PWM_Init>
 81019ee:	4603      	mov	r3, r0
 81019f0:	2b00      	cmp	r3, #0
 81019f2:	d001      	beq.n	81019f8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 81019f4:	f000 f9f6 	bl	8101de4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 81019f8:	2300      	movs	r3, #0
 81019fa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 81019fc:	2300      	movs	r3, #0
 81019fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8101a00:	f107 031c 	add.w	r3, r7, #28
 8101a04:	4619      	mov	r1, r3
 8101a06:	4821      	ldr	r0, [pc, #132]	; (8101a8c <MX_TIM3_Init+0x128>)
 8101a08:	f004 fd30 	bl	810646c <HAL_TIMEx_MasterConfigSynchronization>
 8101a0c:	4603      	mov	r3, r0
 8101a0e:	2b00      	cmp	r3, #0
 8101a10:	d001      	beq.n	8101a16 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8101a12:	f000 f9e7 	bl	8101de4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8101a16:	2360      	movs	r3, #96	; 0x60
 8101a18:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8101a1a:	2300      	movs	r3, #0
 8101a1c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8101a1e:	2300      	movs	r3, #0
 8101a20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8101a22:	2300      	movs	r3, #0
 8101a24:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8101a26:	463b      	mov	r3, r7
 8101a28:	2200      	movs	r2, #0
 8101a2a:	4619      	mov	r1, r3
 8101a2c:	4817      	ldr	r0, [pc, #92]	; (8101a8c <MX_TIM3_Init+0x128>)
 8101a2e:	f003 feb7 	bl	81057a0 <HAL_TIM_PWM_ConfigChannel>
 8101a32:	4603      	mov	r3, r0
 8101a34:	2b00      	cmp	r3, #0
 8101a36:	d001      	beq.n	8101a3c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8101a38:	f000 f9d4 	bl	8101de4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8101a3c:	463b      	mov	r3, r7
 8101a3e:	2204      	movs	r2, #4
 8101a40:	4619      	mov	r1, r3
 8101a42:	4812      	ldr	r0, [pc, #72]	; (8101a8c <MX_TIM3_Init+0x128>)
 8101a44:	f003 feac 	bl	81057a0 <HAL_TIM_PWM_ConfigChannel>
 8101a48:	4603      	mov	r3, r0
 8101a4a:	2b00      	cmp	r3, #0
 8101a4c:	d001      	beq.n	8101a52 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8101a4e:	f000 f9c9 	bl	8101de4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8101a52:	463b      	mov	r3, r7
 8101a54:	2208      	movs	r2, #8
 8101a56:	4619      	mov	r1, r3
 8101a58:	480c      	ldr	r0, [pc, #48]	; (8101a8c <MX_TIM3_Init+0x128>)
 8101a5a:	f003 fea1 	bl	81057a0 <HAL_TIM_PWM_ConfigChannel>
 8101a5e:	4603      	mov	r3, r0
 8101a60:	2b00      	cmp	r3, #0
 8101a62:	d001      	beq.n	8101a68 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8101a64:	f000 f9be 	bl	8101de4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8101a68:	463b      	mov	r3, r7
 8101a6a:	220c      	movs	r2, #12
 8101a6c:	4619      	mov	r1, r3
 8101a6e:	4807      	ldr	r0, [pc, #28]	; (8101a8c <MX_TIM3_Init+0x128>)
 8101a70:	f003 fe96 	bl	81057a0 <HAL_TIM_PWM_ConfigChannel>
 8101a74:	4603      	mov	r3, r0
 8101a76:	2b00      	cmp	r3, #0
 8101a78:	d001      	beq.n	8101a7e <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8101a7a:	f000 f9b3 	bl	8101de4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8101a7e:	4803      	ldr	r0, [pc, #12]	; (8101a8c <MX_TIM3_Init+0x128>)
 8101a80:	f000 fa0e 	bl	8101ea0 <HAL_TIM_MspPostInit>

}
 8101a84:	bf00      	nop
 8101a86:	3738      	adds	r7, #56	; 0x38
 8101a88:	46bd      	mov	sp, r7
 8101a8a:	bd80      	pop	{r7, pc}
 8101a8c:	10000254 	.word	0x10000254
 8101a90:	40000400 	.word	0x40000400

08101a94 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8101a94:	b580      	push	{r7, lr}
 8101a96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8101a98:	4b22      	ldr	r3, [pc, #136]	; (8101b24 <MX_USART2_UART_Init+0x90>)
 8101a9a:	4a23      	ldr	r2, [pc, #140]	; (8101b28 <MX_USART2_UART_Init+0x94>)
 8101a9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8101a9e:	4b21      	ldr	r3, [pc, #132]	; (8101b24 <MX_USART2_UART_Init+0x90>)
 8101aa0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8101aa4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8101aa6:	4b1f      	ldr	r3, [pc, #124]	; (8101b24 <MX_USART2_UART_Init+0x90>)
 8101aa8:	2200      	movs	r2, #0
 8101aaa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8101aac:	4b1d      	ldr	r3, [pc, #116]	; (8101b24 <MX_USART2_UART_Init+0x90>)
 8101aae:	2200      	movs	r2, #0
 8101ab0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8101ab2:	4b1c      	ldr	r3, [pc, #112]	; (8101b24 <MX_USART2_UART_Init+0x90>)
 8101ab4:	2200      	movs	r2, #0
 8101ab6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8101ab8:	4b1a      	ldr	r3, [pc, #104]	; (8101b24 <MX_USART2_UART_Init+0x90>)
 8101aba:	220c      	movs	r2, #12
 8101abc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8101abe:	4b19      	ldr	r3, [pc, #100]	; (8101b24 <MX_USART2_UART_Init+0x90>)
 8101ac0:	2200      	movs	r2, #0
 8101ac2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8101ac4:	4b17      	ldr	r3, [pc, #92]	; (8101b24 <MX_USART2_UART_Init+0x90>)
 8101ac6:	2200      	movs	r2, #0
 8101ac8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8101aca:	4b16      	ldr	r3, [pc, #88]	; (8101b24 <MX_USART2_UART_Init+0x90>)
 8101acc:	2200      	movs	r2, #0
 8101ace:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8101ad0:	4b14      	ldr	r3, [pc, #80]	; (8101b24 <MX_USART2_UART_Init+0x90>)
 8101ad2:	2200      	movs	r2, #0
 8101ad4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8101ad6:	4b13      	ldr	r3, [pc, #76]	; (8101b24 <MX_USART2_UART_Init+0x90>)
 8101ad8:	2200      	movs	r2, #0
 8101ada:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8101adc:	4811      	ldr	r0, [pc, #68]	; (8101b24 <MX_USART2_UART_Init+0x90>)
 8101ade:	f004 fd71 	bl	81065c4 <HAL_UART_Init>
 8101ae2:	4603      	mov	r3, r0
 8101ae4:	2b00      	cmp	r3, #0
 8101ae6:	d001      	beq.n	8101aec <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8101ae8:	f000 f97c 	bl	8101de4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101aec:	2100      	movs	r1, #0
 8101aee:	480d      	ldr	r0, [pc, #52]	; (8101b24 <MX_USART2_UART_Init+0x90>)
 8101af0:	f007 f9af 	bl	8108e52 <HAL_UARTEx_SetTxFifoThreshold>
 8101af4:	4603      	mov	r3, r0
 8101af6:	2b00      	cmp	r3, #0
 8101af8:	d001      	beq.n	8101afe <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8101afa:	f000 f973 	bl	8101de4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101afe:	2100      	movs	r1, #0
 8101b00:	4808      	ldr	r0, [pc, #32]	; (8101b24 <MX_USART2_UART_Init+0x90>)
 8101b02:	f007 f9e4 	bl	8108ece <HAL_UARTEx_SetRxFifoThreshold>
 8101b06:	4603      	mov	r3, r0
 8101b08:	2b00      	cmp	r3, #0
 8101b0a:	d001      	beq.n	8101b10 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8101b0c:	f000 f96a 	bl	8101de4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8101b10:	4804      	ldr	r0, [pc, #16]	; (8101b24 <MX_USART2_UART_Init+0x90>)
 8101b12:	f007 f965 	bl	8108de0 <HAL_UARTEx_DisableFifoMode>
 8101b16:	4603      	mov	r3, r0
 8101b18:	2b00      	cmp	r3, #0
 8101b1a:	d001      	beq.n	8101b20 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8101b1c:	f000 f962 	bl	8101de4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8101b20:	bf00      	nop
 8101b22:	bd80      	pop	{r7, pc}
 8101b24:	100002a0 	.word	0x100002a0
 8101b28:	40004400 	.word	0x40004400

08101b2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8101b2c:	b580      	push	{r7, lr}
 8101b2e:	b08a      	sub	sp, #40	; 0x28
 8101b30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101b32:	f107 0314 	add.w	r3, r7, #20
 8101b36:	2200      	movs	r2, #0
 8101b38:	601a      	str	r2, [r3, #0]
 8101b3a:	605a      	str	r2, [r3, #4]
 8101b3c:	609a      	str	r2, [r3, #8]
 8101b3e:	60da      	str	r2, [r3, #12]
 8101b40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8101b42:	4b3a      	ldr	r3, [pc, #232]	; (8101c2c <MX_GPIO_Init+0x100>)
 8101b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b48:	4a38      	ldr	r2, [pc, #224]	; (8101c2c <MX_GPIO_Init+0x100>)
 8101b4a:	f043 0301 	orr.w	r3, r3, #1
 8101b4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101b52:	4b36      	ldr	r3, [pc, #216]	; (8101c2c <MX_GPIO_Init+0x100>)
 8101b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b58:	f003 0301 	and.w	r3, r3, #1
 8101b5c:	613b      	str	r3, [r7, #16]
 8101b5e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8101b60:	4b32      	ldr	r3, [pc, #200]	; (8101c2c <MX_GPIO_Init+0x100>)
 8101b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b66:	4a31      	ldr	r2, [pc, #196]	; (8101c2c <MX_GPIO_Init+0x100>)
 8101b68:	f043 0302 	orr.w	r3, r3, #2
 8101b6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101b70:	4b2e      	ldr	r3, [pc, #184]	; (8101c2c <MX_GPIO_Init+0x100>)
 8101b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b76:	f003 0302 	and.w	r3, r3, #2
 8101b7a:	60fb      	str	r3, [r7, #12]
 8101b7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8101b7e:	4b2b      	ldr	r3, [pc, #172]	; (8101c2c <MX_GPIO_Init+0x100>)
 8101b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b84:	4a29      	ldr	r2, [pc, #164]	; (8101c2c <MX_GPIO_Init+0x100>)
 8101b86:	f043 0304 	orr.w	r3, r3, #4
 8101b8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101b8e:	4b27      	ldr	r3, [pc, #156]	; (8101c2c <MX_GPIO_Init+0x100>)
 8101b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b94:	f003 0304 	and.w	r3, r3, #4
 8101b98:	60bb      	str	r3, [r7, #8]
 8101b9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8101b9c:	4b23      	ldr	r3, [pc, #140]	; (8101c2c <MX_GPIO_Init+0x100>)
 8101b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101ba2:	4a22      	ldr	r2, [pc, #136]	; (8101c2c <MX_GPIO_Init+0x100>)
 8101ba4:	f043 0308 	orr.w	r3, r3, #8
 8101ba8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101bac:	4b1f      	ldr	r3, [pc, #124]	; (8101c2c <MX_GPIO_Init+0x100>)
 8101bae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101bb2:	f003 0308 	and.w	r3, r3, #8
 8101bb6:	607b      	str	r3, [r7, #4]
 8101bb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8101bba:	4b1c      	ldr	r3, [pc, #112]	; (8101c2c <MX_GPIO_Init+0x100>)
 8101bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101bc0:	4a1a      	ldr	r2, [pc, #104]	; (8101c2c <MX_GPIO_Init+0x100>)
 8101bc2:	f043 0310 	orr.w	r3, r3, #16
 8101bc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101bca:	4b18      	ldr	r3, [pc, #96]	; (8101c2c <MX_GPIO_Init+0x100>)
 8101bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101bd0:	f003 0310 	and.w	r3, r3, #16
 8101bd4:	603b      	str	r3, [r7, #0]
 8101bd6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8101bd8:	2200      	movs	r2, #0
 8101bda:	2101      	movs	r1, #1
 8101bdc:	4814      	ldr	r0, [pc, #80]	; (8101c30 <MX_GPIO_Init+0x104>)
 8101bde:	f001 fc8b 	bl	81034f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8101be2:	2200      	movs	r2, #0
 8101be4:	2102      	movs	r1, #2
 8101be6:	4813      	ldr	r0, [pc, #76]	; (8101c34 <MX_GPIO_Init+0x108>)
 8101be8:	f001 fc86 	bl	81034f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8101bec:	2301      	movs	r3, #1
 8101bee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101bf0:	2301      	movs	r3, #1
 8101bf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101bf4:	2300      	movs	r3, #0
 8101bf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101bf8:	2300      	movs	r3, #0
 8101bfa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101bfc:	f107 0314 	add.w	r3, r7, #20
 8101c00:	4619      	mov	r1, r3
 8101c02:	480b      	ldr	r0, [pc, #44]	; (8101c30 <MX_GPIO_Init+0x104>)
 8101c04:	f001 fac8 	bl	8103198 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8101c08:	2302      	movs	r3, #2
 8101c0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101c0c:	2301      	movs	r3, #1
 8101c0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101c10:	2300      	movs	r3, #0
 8101c12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101c14:	2300      	movs	r3, #0
 8101c16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8101c18:	f107 0314 	add.w	r3, r7, #20
 8101c1c:	4619      	mov	r1, r3
 8101c1e:	4805      	ldr	r0, [pc, #20]	; (8101c34 <MX_GPIO_Init+0x108>)
 8101c20:	f001 faba 	bl	8103198 <HAL_GPIO_Init>

}
 8101c24:	bf00      	nop
 8101c26:	3728      	adds	r7, #40	; 0x28
 8101c28:	46bd      	mov	sp, r7
 8101c2a:	bd80      	pop	{r7, pc}
 8101c2c:	58024400 	.word	0x58024400
 8101c30:	58020400 	.word	0x58020400
 8101c34:	58021000 	.word	0x58021000

08101c38 <HAL_TIM_PeriodElapsedCallback>:
//questa callback trasmette
//ad ogni intervallo di tempo impostato dal timer htim2
//la stringa pc_buffer contenente tutti i dati di interesse del drone
//dall'esp alla seriale della scheda stm
//questo esempio serve per verificare che l'ESP funzioni correttamente
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8101c38:	b580      	push	{r7, lr}
 8101c3a:	b082      	sub	sp, #8
 8101c3c:	af00      	add	r7, sp, #0
 8101c3e:	6078      	str	r0, [r7, #4]
	// This callback is automatically called by the HAL on the UEV event
	if (htim == &htim2) {
 8101c40:	687b      	ldr	r3, [r7, #4]
 8101c42:	4a57      	ldr	r2, [pc, #348]	; (8101da0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8101c44:	4293      	cmp	r3, r2
 8101c46:	f040 80a7 	bne.w	8101d98 <HAL_TIM_PeriodElapsedCallback+0x160>
		if (TX_Flag_DSEND) {
 8101c4a:	4b56      	ldr	r3, [pc, #344]	; (8101da4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8101c4c:	681b      	ldr	r3, [r3, #0]
 8101c4e:	2b00      	cmp	r3, #0
 8101c50:	f000 80a2 	beq.w	8101d98 <HAL_TIM_PeriodElapsedCallback+0x160>
//			getFixedArray(generateRandomNumber(0, 360), 3, 1, &pc_buffer); //roll
			getFixedArray(generateRandomNumber(0, 360), 3, 1, &pc_buffer[0]);
 8101c54:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8101c58:	2000      	movs	r0, #0
 8101c5a:	f7ff fcb5 	bl	81015c8 <generateRandomNumber>
 8101c5e:	eeb0 7a40 	vmov.f32	s14, s0
 8101c62:	eef0 7a60 	vmov.f32	s15, s1
 8101c66:	4a50      	ldr	r2, [pc, #320]	; (8101da8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8101c68:	2101      	movs	r1, #1
 8101c6a:	2003      	movs	r0, #3
 8101c6c:	eeb0 0a47 	vmov.f32	s0, s14
 8101c70:	eef0 0a67 	vmov.f32	s1, s15
 8101c74:	f7ff fbc8 	bl	8101408 <getFixedArray>
			getFixedArray(generateRandomNumber(0, 360), 3, 1, &pc_buffer[4]); //pitch
 8101c78:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8101c7c:	2000      	movs	r0, #0
 8101c7e:	f7ff fca3 	bl	81015c8 <generateRandomNumber>
 8101c82:	eeb0 7a40 	vmov.f32	s14, s0
 8101c86:	eef0 7a60 	vmov.f32	s15, s1
 8101c8a:	4a48      	ldr	r2, [pc, #288]	; (8101dac <HAL_TIM_PeriodElapsedCallback+0x174>)
 8101c8c:	2101      	movs	r1, #1
 8101c8e:	2003      	movs	r0, #3
 8101c90:	eeb0 0a47 	vmov.f32	s0, s14
 8101c94:	eef0 0a67 	vmov.f32	s1, s15
 8101c98:	f7ff fbb6 	bl	8101408 <getFixedArray>
			getFixedArray(generateRandomNumber(0, 360), 3, 1, &pc_buffer[8]); //yaw
 8101c9c:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8101ca0:	2000      	movs	r0, #0
 8101ca2:	f7ff fc91 	bl	81015c8 <generateRandomNumber>
 8101ca6:	eeb0 7a40 	vmov.f32	s14, s0
 8101caa:	eef0 7a60 	vmov.f32	s15, s1
 8101cae:	4a40      	ldr	r2, [pc, #256]	; (8101db0 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8101cb0:	2101      	movs	r1, #1
 8101cb2:	2003      	movs	r0, #3
 8101cb4:	eeb0 0a47 	vmov.f32	s0, s14
 8101cb8:	eef0 0a67 	vmov.f32	s1, s15
 8101cbc:	f7ff fba4 	bl	8101408 <getFixedArray>



			getFixedArray(generateRandomNumber(0, 30), 2, 2, &pc_buffer[12]); //velocità angolare roll
 8101cc0:	211e      	movs	r1, #30
 8101cc2:	2000      	movs	r0, #0
 8101cc4:	f7ff fc80 	bl	81015c8 <generateRandomNumber>
 8101cc8:	eeb0 7a40 	vmov.f32	s14, s0
 8101ccc:	eef0 7a60 	vmov.f32	s15, s1
 8101cd0:	4a38      	ldr	r2, [pc, #224]	; (8101db4 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8101cd2:	2102      	movs	r1, #2
 8101cd4:	2002      	movs	r0, #2
 8101cd6:	eeb0 0a47 	vmov.f32	s0, s14
 8101cda:	eef0 0a67 	vmov.f32	s1, s15
 8101cde:	f7ff fb93 	bl	8101408 <getFixedArray>
			getFixedArray(generateRandomNumber(0, 30), 2, 2, &pc_buffer[16]); //velocità angolare pitch
 8101ce2:	211e      	movs	r1, #30
 8101ce4:	2000      	movs	r0, #0
 8101ce6:	f7ff fc6f 	bl	81015c8 <generateRandomNumber>
 8101cea:	eeb0 7a40 	vmov.f32	s14, s0
 8101cee:	eef0 7a60 	vmov.f32	s15, s1
 8101cf2:	4a31      	ldr	r2, [pc, #196]	; (8101db8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8101cf4:	2102      	movs	r1, #2
 8101cf6:	2002      	movs	r0, #2
 8101cf8:	eeb0 0a47 	vmov.f32	s0, s14
 8101cfc:	eef0 0a67 	vmov.f32	s1, s15
 8101d00:	f7ff fb82 	bl	8101408 <getFixedArray>
			getFixedArray(generateRandomNumber(0, 30), 2, 2, &pc_buffer[20]); //velocità angolare yaw
 8101d04:	211e      	movs	r1, #30
 8101d06:	2000      	movs	r0, #0
 8101d08:	f7ff fc5e 	bl	81015c8 <generateRandomNumber>
 8101d0c:	eeb0 7a40 	vmov.f32	s14, s0
 8101d10:	eef0 7a60 	vmov.f32	s15, s1
 8101d14:	4a29      	ldr	r2, [pc, #164]	; (8101dbc <HAL_TIM_PeriodElapsedCallback+0x184>)
 8101d16:	2102      	movs	r1, #2
 8101d18:	2002      	movs	r0, #2
 8101d1a:	eeb0 0a47 	vmov.f32	s0, s14
 8101d1e:	eef0 0a67 	vmov.f32	s1, s15
 8101d22:	f7ff fb71 	bl	8101408 <getFixedArray>



			getFixedArray(duty_1, 1, 1, &pc_buffer[24]); //duty del motore 1
 8101d26:	4b26      	ldr	r3, [pc, #152]	; (8101dc0 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8101d28:	ed93 7b00 	vldr	d7, [r3]
 8101d2c:	4a25      	ldr	r2, [pc, #148]	; (8101dc4 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8101d2e:	2101      	movs	r1, #1
 8101d30:	2001      	movs	r0, #1
 8101d32:	eeb0 0a47 	vmov.f32	s0, s14
 8101d36:	eef0 0a67 	vmov.f32	s1, s15
 8101d3a:	f7ff fb65 	bl	8101408 <getFixedArray>
			getFixedArray(duty_2, 1, 1, &pc_buffer[26]); //duty del motore 2
 8101d3e:	4b22      	ldr	r3, [pc, #136]	; (8101dc8 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8101d40:	ed93 7b00 	vldr	d7, [r3]
 8101d44:	4a21      	ldr	r2, [pc, #132]	; (8101dcc <HAL_TIM_PeriodElapsedCallback+0x194>)
 8101d46:	2101      	movs	r1, #1
 8101d48:	2001      	movs	r0, #1
 8101d4a:	eeb0 0a47 	vmov.f32	s0, s14
 8101d4e:	eef0 0a67 	vmov.f32	s1, s15
 8101d52:	f7ff fb59 	bl	8101408 <getFixedArray>
			getFixedArray(duty_3, 1, 1, &pc_buffer[28]); //duty del motore 3
 8101d56:	4b1e      	ldr	r3, [pc, #120]	; (8101dd0 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8101d58:	ed93 7b00 	vldr	d7, [r3]
 8101d5c:	4a1d      	ldr	r2, [pc, #116]	; (8101dd4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8101d5e:	2101      	movs	r1, #1
 8101d60:	2001      	movs	r0, #1
 8101d62:	eeb0 0a47 	vmov.f32	s0, s14
 8101d66:	eef0 0a67 	vmov.f32	s1, s15
 8101d6a:	f7ff fb4d 	bl	8101408 <getFixedArray>
		    getFixedArray(duty_4, 1, 1, &pc_buffer[30]); //duty del motore 4
 8101d6e:	4b1a      	ldr	r3, [pc, #104]	; (8101dd8 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8101d70:	ed93 7b00 	vldr	d7, [r3]
 8101d74:	4a19      	ldr	r2, [pc, #100]	; (8101ddc <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8101d76:	2101      	movs	r1, #1
 8101d78:	2001      	movs	r0, #1
 8101d7a:	eeb0 0a47 	vmov.f32	s0, s14
 8101d7e:	eef0 0a67 	vmov.f32	s1, s15
 8101d82:	f7ff fb41 	bl	8101408 <getFixedArray>

		    pc_buffer[32]= '\n' ;
 8101d86:	4b08      	ldr	r3, [pc, #32]	; (8101da8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8101d88:	220a      	movs	r2, #10
 8101d8a:	f883 2020 	strb.w	r2, [r3, #32]





			            HAL_UART_Transmit_IT(&huart2, pc_buffer, sizeof(pc_buffer));
 8101d8e:	2221      	movs	r2, #33	; 0x21
 8101d90:	4905      	ldr	r1, [pc, #20]	; (8101da8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8101d92:	4813      	ldr	r0, [pc, #76]	; (8101de0 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8101d94:	f004 fc66 	bl	8106664 <HAL_UART_Transmit_IT>
		}
	}
}
 8101d98:	bf00      	nop
 8101d9a:	3708      	adds	r7, #8
 8101d9c:	46bd      	mov	sp, r7
 8101d9e:	bd80      	pop	{r7, pc}
 8101da0:	10000208 	.word	0x10000208
 8101da4:	10000204 	.word	0x10000204
 8101da8:	10000334 	.word	0x10000334
 8101dac:	10000338 	.word	0x10000338
 8101db0:	1000033c 	.word	0x1000033c
 8101db4:	10000340 	.word	0x10000340
 8101db8:	10000344 	.word	0x10000344
 8101dbc:	10000348 	.word	0x10000348
 8101dc0:	10000358 	.word	0x10000358
 8101dc4:	1000034c 	.word	0x1000034c
 8101dc8:	10000360 	.word	0x10000360
 8101dcc:	1000034e 	.word	0x1000034e
 8101dd0:	10000368 	.word	0x10000368
 8101dd4:	10000350 	.word	0x10000350
 8101dd8:	10000370 	.word	0x10000370
 8101ddc:	10000352 	.word	0x10000352
 8101de0:	100002a0 	.word	0x100002a0

08101de4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101de4:	b480      	push	{r7}
 8101de6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8101de8:	b672      	cpsid	i
}
 8101dea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8101dec:	e7fe      	b.n	8101dec <Error_Handler+0x8>
	...

08101df0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101df0:	b480      	push	{r7}
 8101df2:	b083      	sub	sp, #12
 8101df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101df6:	4b0a      	ldr	r3, [pc, #40]	; (8101e20 <HAL_MspInit+0x30>)
 8101df8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101dfc:	4a08      	ldr	r2, [pc, #32]	; (8101e20 <HAL_MspInit+0x30>)
 8101dfe:	f043 0302 	orr.w	r3, r3, #2
 8101e02:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101e06:	4b06      	ldr	r3, [pc, #24]	; (8101e20 <HAL_MspInit+0x30>)
 8101e08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101e0c:	f003 0302 	and.w	r3, r3, #2
 8101e10:	607b      	str	r3, [r7, #4]
 8101e12:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101e14:	bf00      	nop
 8101e16:	370c      	adds	r7, #12
 8101e18:	46bd      	mov	sp, r7
 8101e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e1e:	4770      	bx	lr
 8101e20:	58024400 	.word	0x58024400

08101e24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8101e24:	b580      	push	{r7, lr}
 8101e26:	b084      	sub	sp, #16
 8101e28:	af00      	add	r7, sp, #0
 8101e2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8101e2c:	687b      	ldr	r3, [r7, #4]
 8101e2e:	681b      	ldr	r3, [r3, #0]
 8101e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101e34:	d117      	bne.n	8101e66 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8101e36:	4b18      	ldr	r3, [pc, #96]	; (8101e98 <HAL_TIM_Base_MspInit+0x74>)
 8101e38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101e3c:	4a16      	ldr	r2, [pc, #88]	; (8101e98 <HAL_TIM_Base_MspInit+0x74>)
 8101e3e:	f043 0301 	orr.w	r3, r3, #1
 8101e42:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101e46:	4b14      	ldr	r3, [pc, #80]	; (8101e98 <HAL_TIM_Base_MspInit+0x74>)
 8101e48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101e4c:	f003 0301 	and.w	r3, r3, #1
 8101e50:	60fb      	str	r3, [r7, #12]
 8101e52:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8101e54:	2200      	movs	r2, #0
 8101e56:	2100      	movs	r1, #0
 8101e58:	201c      	movs	r0, #28
 8101e5a:	f000 fbf0 	bl	810263e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8101e5e:	201c      	movs	r0, #28
 8101e60:	f000 fc07 	bl	8102672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8101e64:	e013      	b.n	8101e8e <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM3)
 8101e66:	687b      	ldr	r3, [r7, #4]
 8101e68:	681b      	ldr	r3, [r3, #0]
 8101e6a:	4a0c      	ldr	r2, [pc, #48]	; (8101e9c <HAL_TIM_Base_MspInit+0x78>)
 8101e6c:	4293      	cmp	r3, r2
 8101e6e:	d10e      	bne.n	8101e8e <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8101e70:	4b09      	ldr	r3, [pc, #36]	; (8101e98 <HAL_TIM_Base_MspInit+0x74>)
 8101e72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101e76:	4a08      	ldr	r2, [pc, #32]	; (8101e98 <HAL_TIM_Base_MspInit+0x74>)
 8101e78:	f043 0302 	orr.w	r3, r3, #2
 8101e7c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101e80:	4b05      	ldr	r3, [pc, #20]	; (8101e98 <HAL_TIM_Base_MspInit+0x74>)
 8101e82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101e86:	f003 0302 	and.w	r3, r3, #2
 8101e8a:	60bb      	str	r3, [r7, #8]
 8101e8c:	68bb      	ldr	r3, [r7, #8]
}
 8101e8e:	bf00      	nop
 8101e90:	3710      	adds	r7, #16
 8101e92:	46bd      	mov	sp, r7
 8101e94:	bd80      	pop	{r7, pc}
 8101e96:	bf00      	nop
 8101e98:	58024400 	.word	0x58024400
 8101e9c:	40000400 	.word	0x40000400

08101ea0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8101ea0:	b580      	push	{r7, lr}
 8101ea2:	b08a      	sub	sp, #40	; 0x28
 8101ea4:	af00      	add	r7, sp, #0
 8101ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101ea8:	f107 0314 	add.w	r3, r7, #20
 8101eac:	2200      	movs	r2, #0
 8101eae:	601a      	str	r2, [r3, #0]
 8101eb0:	605a      	str	r2, [r3, #4]
 8101eb2:	609a      	str	r2, [r3, #8]
 8101eb4:	60da      	str	r2, [r3, #12]
 8101eb6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8101eb8:	687b      	ldr	r3, [r7, #4]
 8101eba:	681b      	ldr	r3, [r3, #0]
 8101ebc:	4a32      	ldr	r2, [pc, #200]	; (8101f88 <HAL_TIM_MspPostInit+0xe8>)
 8101ebe:	4293      	cmp	r3, r2
 8101ec0:	d15d      	bne.n	8101f7e <HAL_TIM_MspPostInit+0xde>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101ec2:	4b32      	ldr	r3, [pc, #200]	; (8101f8c <HAL_TIM_MspPostInit+0xec>)
 8101ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101ec8:	4a30      	ldr	r2, [pc, #192]	; (8101f8c <HAL_TIM_MspPostInit+0xec>)
 8101eca:	f043 0301 	orr.w	r3, r3, #1
 8101ece:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101ed2:	4b2e      	ldr	r3, [pc, #184]	; (8101f8c <HAL_TIM_MspPostInit+0xec>)
 8101ed4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101ed8:	f003 0301 	and.w	r3, r3, #1
 8101edc:	613b      	str	r3, [r7, #16]
 8101ede:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101ee0:	4b2a      	ldr	r3, [pc, #168]	; (8101f8c <HAL_TIM_MspPostInit+0xec>)
 8101ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101ee6:	4a29      	ldr	r2, [pc, #164]	; (8101f8c <HAL_TIM_MspPostInit+0xec>)
 8101ee8:	f043 0302 	orr.w	r3, r3, #2
 8101eec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101ef0:	4b26      	ldr	r3, [pc, #152]	; (8101f8c <HAL_TIM_MspPostInit+0xec>)
 8101ef2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101ef6:	f003 0302 	and.w	r3, r3, #2
 8101efa:	60fb      	str	r3, [r7, #12]
 8101efc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8101efe:	4b23      	ldr	r3, [pc, #140]	; (8101f8c <HAL_TIM_MspPostInit+0xec>)
 8101f00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101f04:	4a21      	ldr	r2, [pc, #132]	; (8101f8c <HAL_TIM_MspPostInit+0xec>)
 8101f06:	f043 0304 	orr.w	r3, r3, #4
 8101f0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101f0e:	4b1f      	ldr	r3, [pc, #124]	; (8101f8c <HAL_TIM_MspPostInit+0xec>)
 8101f10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101f14:	f003 0304 	and.w	r3, r3, #4
 8101f18:	60bb      	str	r3, [r7, #8]
 8101f1a:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TIM3_CH1
    PB1     ------> TIM3_CH4
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8101f1c:	2340      	movs	r3, #64	; 0x40
 8101f1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101f20:	2302      	movs	r3, #2
 8101f22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101f24:	2300      	movs	r3, #0
 8101f26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101f28:	2300      	movs	r3, #0
 8101f2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8101f2c:	2302      	movs	r3, #2
 8101f2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101f30:	f107 0314 	add.w	r3, r7, #20
 8101f34:	4619      	mov	r1, r3
 8101f36:	4816      	ldr	r0, [pc, #88]	; (8101f90 <HAL_TIM_MspPostInit+0xf0>)
 8101f38:	f001 f92e 	bl	8103198 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8101f3c:	2302      	movs	r3, #2
 8101f3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101f40:	2302      	movs	r3, #2
 8101f42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101f44:	2300      	movs	r3, #0
 8101f46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101f48:	2300      	movs	r3, #0
 8101f4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8101f4c:	2302      	movs	r3, #2
 8101f4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101f50:	f107 0314 	add.w	r3, r7, #20
 8101f54:	4619      	mov	r1, r3
 8101f56:	480f      	ldr	r0, [pc, #60]	; (8101f94 <HAL_TIM_MspPostInit+0xf4>)
 8101f58:	f001 f91e 	bl	8103198 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8101f5c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8101f60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101f62:	2302      	movs	r3, #2
 8101f64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101f66:	2300      	movs	r3, #0
 8101f68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101f6a:	2300      	movs	r3, #0
 8101f6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8101f6e:	2302      	movs	r3, #2
 8101f70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8101f72:	f107 0314 	add.w	r3, r7, #20
 8101f76:	4619      	mov	r1, r3
 8101f78:	4807      	ldr	r0, [pc, #28]	; (8101f98 <HAL_TIM_MspPostInit+0xf8>)
 8101f7a:	f001 f90d 	bl	8103198 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8101f7e:	bf00      	nop
 8101f80:	3728      	adds	r7, #40	; 0x28
 8101f82:	46bd      	mov	sp, r7
 8101f84:	bd80      	pop	{r7, pc}
 8101f86:	bf00      	nop
 8101f88:	40000400 	.word	0x40000400
 8101f8c:	58024400 	.word	0x58024400
 8101f90:	58020000 	.word	0x58020000
 8101f94:	58020400 	.word	0x58020400
 8101f98:	58020800 	.word	0x58020800

08101f9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8101f9c:	b580      	push	{r7, lr}
 8101f9e:	b0ba      	sub	sp, #232	; 0xe8
 8101fa0:	af00      	add	r7, sp, #0
 8101fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101fa4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8101fa8:	2200      	movs	r2, #0
 8101faa:	601a      	str	r2, [r3, #0]
 8101fac:	605a      	str	r2, [r3, #4]
 8101fae:	609a      	str	r2, [r3, #8]
 8101fb0:	60da      	str	r2, [r3, #12]
 8101fb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101fb4:	f107 0318 	add.w	r3, r7, #24
 8101fb8:	22bc      	movs	r2, #188	; 0xbc
 8101fba:	2100      	movs	r1, #0
 8101fbc:	4618      	mov	r0, r3
 8101fbe:	f008 fe6d 	bl	810ac9c <memset>
  if(huart->Instance==USART2)
 8101fc2:	687b      	ldr	r3, [r7, #4]
 8101fc4:	681b      	ldr	r3, [r3, #0]
 8101fc6:	4a3a      	ldr	r2, [pc, #232]	; (81020b0 <HAL_UART_MspInit+0x114>)
 8101fc8:	4293      	cmp	r3, r2
 8101fca:	d16d      	bne.n	81020a8 <HAL_UART_MspInit+0x10c>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8101fcc:	2302      	movs	r3, #2
 8101fce:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8101fd0:	2300      	movs	r3, #0
 8101fd2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101fd6:	f107 0318 	add.w	r3, r7, #24
 8101fda:	4618      	mov	r0, r3
 8101fdc:	f001 fd18 	bl	8103a10 <HAL_RCCEx_PeriphCLKConfig>
 8101fe0:	4603      	mov	r3, r0
 8101fe2:	2b00      	cmp	r3, #0
 8101fe4:	d001      	beq.n	8101fea <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8101fe6:	f7ff fefd 	bl	8101de4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8101fea:	4b32      	ldr	r3, [pc, #200]	; (81020b4 <HAL_UART_MspInit+0x118>)
 8101fec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101ff0:	4a30      	ldr	r2, [pc, #192]	; (81020b4 <HAL_UART_MspInit+0x118>)
 8101ff2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101ff6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101ffa:	4b2e      	ldr	r3, [pc, #184]	; (81020b4 <HAL_UART_MspInit+0x118>)
 8101ffc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8102004:	617b      	str	r3, [r7, #20]
 8102006:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8102008:	4b2a      	ldr	r3, [pc, #168]	; (81020b4 <HAL_UART_MspInit+0x118>)
 810200a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810200e:	4a29      	ldr	r2, [pc, #164]	; (81020b4 <HAL_UART_MspInit+0x118>)
 8102010:	f043 0301 	orr.w	r3, r3, #1
 8102014:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102018:	4b26      	ldr	r3, [pc, #152]	; (81020b4 <HAL_UART_MspInit+0x118>)
 810201a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810201e:	f003 0301 	and.w	r3, r3, #1
 8102022:	613b      	str	r3, [r7, #16]
 8102024:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8102026:	4b23      	ldr	r3, [pc, #140]	; (81020b4 <HAL_UART_MspInit+0x118>)
 8102028:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810202c:	4a21      	ldr	r2, [pc, #132]	; (81020b4 <HAL_UART_MspInit+0x118>)
 810202e:	f043 0308 	orr.w	r3, r3, #8
 8102032:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102036:	4b1f      	ldr	r3, [pc, #124]	; (81020b4 <HAL_UART_MspInit+0x118>)
 8102038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810203c:	f003 0308 	and.w	r3, r3, #8
 8102040:	60fb      	str	r3, [r7, #12]
 8102042:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8102044:	2308      	movs	r3, #8
 8102046:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810204a:	2302      	movs	r3, #2
 810204c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102050:	2300      	movs	r3, #0
 8102052:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102056:	2300      	movs	r3, #0
 8102058:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 810205c:	2307      	movs	r3, #7
 810205e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8102062:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8102066:	4619      	mov	r1, r3
 8102068:	4813      	ldr	r0, [pc, #76]	; (81020b8 <HAL_UART_MspInit+0x11c>)
 810206a:	f001 f895 	bl	8103198 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 810206e:	2320      	movs	r3, #32
 8102070:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102074:	2302      	movs	r3, #2
 8102076:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810207a:	2300      	movs	r3, #0
 810207c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102080:	2300      	movs	r3, #0
 8102082:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8102086:	2307      	movs	r3, #7
 8102088:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 810208c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8102090:	4619      	mov	r1, r3
 8102092:	480a      	ldr	r0, [pc, #40]	; (81020bc <HAL_UART_MspInit+0x120>)
 8102094:	f001 f880 	bl	8103198 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8102098:	2200      	movs	r2, #0
 810209a:	2100      	movs	r1, #0
 810209c:	2026      	movs	r0, #38	; 0x26
 810209e:	f000 face 	bl	810263e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 81020a2:	2026      	movs	r0, #38	; 0x26
 81020a4:	f000 fae5 	bl	8102672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 81020a8:	bf00      	nop
 81020aa:	37e8      	adds	r7, #232	; 0xe8
 81020ac:	46bd      	mov	sp, r7
 81020ae:	bd80      	pop	{r7, pc}
 81020b0:	40004400 	.word	0x40004400
 81020b4:	58024400 	.word	0x58024400
 81020b8:	58020000 	.word	0x58020000
 81020bc:	58020c00 	.word	0x58020c00

081020c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81020c0:	b480      	push	{r7}
 81020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 81020c4:	e7fe      	b.n	81020c4 <NMI_Handler+0x4>

081020c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 81020c6:	b480      	push	{r7}
 81020c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81020ca:	e7fe      	b.n	81020ca <HardFault_Handler+0x4>

081020cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81020cc:	b480      	push	{r7}
 81020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81020d0:	e7fe      	b.n	81020d0 <MemManage_Handler+0x4>

081020d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81020d2:	b480      	push	{r7}
 81020d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81020d6:	e7fe      	b.n	81020d6 <BusFault_Handler+0x4>

081020d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81020d8:	b480      	push	{r7}
 81020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81020dc:	e7fe      	b.n	81020dc <UsageFault_Handler+0x4>

081020de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 81020de:	b480      	push	{r7}
 81020e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 81020e2:	bf00      	nop
 81020e4:	46bd      	mov	sp, r7
 81020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020ea:	4770      	bx	lr

081020ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81020ec:	b480      	push	{r7}
 81020ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81020f0:	bf00      	nop
 81020f2:	46bd      	mov	sp, r7
 81020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020f8:	4770      	bx	lr

081020fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81020fa:	b480      	push	{r7}
 81020fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81020fe:	bf00      	nop
 8102100:	46bd      	mov	sp, r7
 8102102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102106:	4770      	bx	lr

08102108 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8102108:	b580      	push	{r7, lr}
 810210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 810210c:	f000 f99c 	bl	8102448 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8102110:	bf00      	nop
 8102112:	bd80      	pop	{r7, pc}

08102114 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8102114:	b580      	push	{r7, lr}
 8102116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8102118:	4802      	ldr	r0, [pc, #8]	; (8102124 <TIM2_IRQHandler+0x10>)
 810211a:	f003 fa21 	bl	8105560 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 810211e:	bf00      	nop
 8102120:	bd80      	pop	{r7, pc}
 8102122:	bf00      	nop
 8102124:	10000208 	.word	0x10000208

08102128 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8102128:	b580      	push	{r7, lr}
 810212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 810212c:	4802      	ldr	r0, [pc, #8]	; (8102138 <USART2_IRQHandler+0x10>)
 810212e:	f004 fb97 	bl	8106860 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8102132:	bf00      	nop
 8102134:	bd80      	pop	{r7, pc}
 8102136:	bf00      	nop
 8102138:	100002a0 	.word	0x100002a0

0810213c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 810213c:	b480      	push	{r7}
 810213e:	af00      	add	r7, sp, #0
	return 1;
 8102140:	2301      	movs	r3, #1
}
 8102142:	4618      	mov	r0, r3
 8102144:	46bd      	mov	sp, r7
 8102146:	f85d 7b04 	ldr.w	r7, [sp], #4
 810214a:	4770      	bx	lr

0810214c <_kill>:

int _kill(int pid, int sig)
{
 810214c:	b580      	push	{r7, lr}
 810214e:	b082      	sub	sp, #8
 8102150:	af00      	add	r7, sp, #0
 8102152:	6078      	str	r0, [r7, #4]
 8102154:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8102156:	f008 fdd9 	bl	810ad0c <__errno>
 810215a:	4603      	mov	r3, r0
 810215c:	2216      	movs	r2, #22
 810215e:	601a      	str	r2, [r3, #0]
	return -1;
 8102160:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8102164:	4618      	mov	r0, r3
 8102166:	3708      	adds	r7, #8
 8102168:	46bd      	mov	sp, r7
 810216a:	bd80      	pop	{r7, pc}

0810216c <_exit>:

void _exit (int status)
{
 810216c:	b580      	push	{r7, lr}
 810216e:	b082      	sub	sp, #8
 8102170:	af00      	add	r7, sp, #0
 8102172:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8102174:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8102178:	6878      	ldr	r0, [r7, #4]
 810217a:	f7ff ffe7 	bl	810214c <_kill>
	while (1) {}		/* Make sure we hang here */
 810217e:	e7fe      	b.n	810217e <_exit+0x12>

08102180 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8102180:	b580      	push	{r7, lr}
 8102182:	b086      	sub	sp, #24
 8102184:	af00      	add	r7, sp, #0
 8102186:	60f8      	str	r0, [r7, #12]
 8102188:	60b9      	str	r1, [r7, #8]
 810218a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	len=1;
 810218c:	2301      	movs	r3, #1
 810218e:	607b      	str	r3, [r7, #4]

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8102190:	2300      	movs	r3, #0
 8102192:	617b      	str	r3, [r7, #20]
 8102194:	e00a      	b.n	81021ac <_read+0x2c>
	{
		*ptr++ = __io_getchar();
 8102196:	f3af 8000 	nop.w
 810219a:	4601      	mov	r1, r0
 810219c:	68bb      	ldr	r3, [r7, #8]
 810219e:	1c5a      	adds	r2, r3, #1
 81021a0:	60ba      	str	r2, [r7, #8]
 81021a2:	b2ca      	uxtb	r2, r1
 81021a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 81021a6:	697b      	ldr	r3, [r7, #20]
 81021a8:	3301      	adds	r3, #1
 81021aa:	617b      	str	r3, [r7, #20]
 81021ac:	697a      	ldr	r2, [r7, #20]
 81021ae:	687b      	ldr	r3, [r7, #4]
 81021b0:	429a      	cmp	r2, r3
 81021b2:	dbf0      	blt.n	8102196 <_read+0x16>
	}

return len;
 81021b4:	687b      	ldr	r3, [r7, #4]
}
 81021b6:	4618      	mov	r0, r3
 81021b8:	3718      	adds	r7, #24
 81021ba:	46bd      	mov	sp, r7
 81021bc:	bd80      	pop	{r7, pc}

081021be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 81021be:	b580      	push	{r7, lr}
 81021c0:	b086      	sub	sp, #24
 81021c2:	af00      	add	r7, sp, #0
 81021c4:	60f8      	str	r0, [r7, #12]
 81021c6:	60b9      	str	r1, [r7, #8]
 81021c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 81021ca:	2300      	movs	r3, #0
 81021cc:	617b      	str	r3, [r7, #20]
 81021ce:	e009      	b.n	81021e4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 81021d0:	68bb      	ldr	r3, [r7, #8]
 81021d2:	1c5a      	adds	r2, r3, #1
 81021d4:	60ba      	str	r2, [r7, #8]
 81021d6:	781b      	ldrb	r3, [r3, #0]
 81021d8:	4618      	mov	r0, r3
 81021da:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 81021de:	697b      	ldr	r3, [r7, #20]
 81021e0:	3301      	adds	r3, #1
 81021e2:	617b      	str	r3, [r7, #20]
 81021e4:	697a      	ldr	r2, [r7, #20]
 81021e6:	687b      	ldr	r3, [r7, #4]
 81021e8:	429a      	cmp	r2, r3
 81021ea:	dbf1      	blt.n	81021d0 <_write+0x12>
	}
	return len;
 81021ec:	687b      	ldr	r3, [r7, #4]
}
 81021ee:	4618      	mov	r0, r3
 81021f0:	3718      	adds	r7, #24
 81021f2:	46bd      	mov	sp, r7
 81021f4:	bd80      	pop	{r7, pc}

081021f6 <_close>:

int _close(int file)
{
 81021f6:	b480      	push	{r7}
 81021f8:	b083      	sub	sp, #12
 81021fa:	af00      	add	r7, sp, #0
 81021fc:	6078      	str	r0, [r7, #4]
	return -1;
 81021fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8102202:	4618      	mov	r0, r3
 8102204:	370c      	adds	r7, #12
 8102206:	46bd      	mov	sp, r7
 8102208:	f85d 7b04 	ldr.w	r7, [sp], #4
 810220c:	4770      	bx	lr

0810220e <_fstat>:


int _fstat(int file, struct stat *st)
{
 810220e:	b480      	push	{r7}
 8102210:	b083      	sub	sp, #12
 8102212:	af00      	add	r7, sp, #0
 8102214:	6078      	str	r0, [r7, #4]
 8102216:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8102218:	683b      	ldr	r3, [r7, #0]
 810221a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 810221e:	605a      	str	r2, [r3, #4]
	return 0;
 8102220:	2300      	movs	r3, #0
}
 8102222:	4618      	mov	r0, r3
 8102224:	370c      	adds	r7, #12
 8102226:	46bd      	mov	sp, r7
 8102228:	f85d 7b04 	ldr.w	r7, [sp], #4
 810222c:	4770      	bx	lr

0810222e <_isatty>:

int _isatty(int file)
{
 810222e:	b480      	push	{r7}
 8102230:	b083      	sub	sp, #12
 8102232:	af00      	add	r7, sp, #0
 8102234:	6078      	str	r0, [r7, #4]
	return 1;
 8102236:	2301      	movs	r3, #1
}
 8102238:	4618      	mov	r0, r3
 810223a:	370c      	adds	r7, #12
 810223c:	46bd      	mov	sp, r7
 810223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102242:	4770      	bx	lr

08102244 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8102244:	b480      	push	{r7}
 8102246:	b085      	sub	sp, #20
 8102248:	af00      	add	r7, sp, #0
 810224a:	60f8      	str	r0, [r7, #12]
 810224c:	60b9      	str	r1, [r7, #8]
 810224e:	607a      	str	r2, [r7, #4]
	return 0;
 8102250:	2300      	movs	r3, #0
}
 8102252:	4618      	mov	r0, r3
 8102254:	3714      	adds	r7, #20
 8102256:	46bd      	mov	sp, r7
 8102258:	f85d 7b04 	ldr.w	r7, [sp], #4
 810225c:	4770      	bx	lr
	...

08102260 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8102260:	b580      	push	{r7, lr}
 8102262:	b086      	sub	sp, #24
 8102264:	af00      	add	r7, sp, #0
 8102266:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8102268:	4a14      	ldr	r2, [pc, #80]	; (81022bc <_sbrk+0x5c>)
 810226a:	4b15      	ldr	r3, [pc, #84]	; (81022c0 <_sbrk+0x60>)
 810226c:	1ad3      	subs	r3, r2, r3
 810226e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8102270:	697b      	ldr	r3, [r7, #20]
 8102272:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8102274:	4b13      	ldr	r3, [pc, #76]	; (81022c4 <_sbrk+0x64>)
 8102276:	681b      	ldr	r3, [r3, #0]
 8102278:	2b00      	cmp	r3, #0
 810227a:	d102      	bne.n	8102282 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 810227c:	4b11      	ldr	r3, [pc, #68]	; (81022c4 <_sbrk+0x64>)
 810227e:	4a12      	ldr	r2, [pc, #72]	; (81022c8 <_sbrk+0x68>)
 8102280:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8102282:	4b10      	ldr	r3, [pc, #64]	; (81022c4 <_sbrk+0x64>)
 8102284:	681a      	ldr	r2, [r3, #0]
 8102286:	687b      	ldr	r3, [r7, #4]
 8102288:	4413      	add	r3, r2
 810228a:	693a      	ldr	r2, [r7, #16]
 810228c:	429a      	cmp	r2, r3
 810228e:	d207      	bcs.n	81022a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8102290:	f008 fd3c 	bl	810ad0c <__errno>
 8102294:	4603      	mov	r3, r0
 8102296:	220c      	movs	r2, #12
 8102298:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 810229a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 810229e:	e009      	b.n	81022b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 81022a0:	4b08      	ldr	r3, [pc, #32]	; (81022c4 <_sbrk+0x64>)
 81022a2:	681b      	ldr	r3, [r3, #0]
 81022a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 81022a6:	4b07      	ldr	r3, [pc, #28]	; (81022c4 <_sbrk+0x64>)
 81022a8:	681a      	ldr	r2, [r3, #0]
 81022aa:	687b      	ldr	r3, [r7, #4]
 81022ac:	4413      	add	r3, r2
 81022ae:	4a05      	ldr	r2, [pc, #20]	; (81022c4 <_sbrk+0x64>)
 81022b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 81022b2:	68fb      	ldr	r3, [r7, #12]
}
 81022b4:	4618      	mov	r0, r3
 81022b6:	3718      	adds	r7, #24
 81022b8:	46bd      	mov	sp, r7
 81022ba:	bd80      	pop	{r7, pc}
 81022bc:	10048000 	.word	0x10048000
 81022c0:	00000400 	.word	0x00000400
 81022c4:	10000378 	.word	0x10000378
 81022c8:	100004d0 	.word	0x100004d0

081022cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81022cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8102304 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81022d0:	f7fe ff16 	bl	8101100 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81022d4:	480c      	ldr	r0, [pc, #48]	; (8102308 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81022d6:	490d      	ldr	r1, [pc, #52]	; (810230c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81022d8:	4a0d      	ldr	r2, [pc, #52]	; (8102310 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81022da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81022dc:	e002      	b.n	81022e4 <LoopCopyDataInit>

081022de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81022de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81022e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81022e2:	3304      	adds	r3, #4

081022e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81022e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81022e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81022e8:	d3f9      	bcc.n	81022de <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81022ea:	4a0a      	ldr	r2, [pc, #40]	; (8102314 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81022ec:	4c0a      	ldr	r4, [pc, #40]	; (8102318 <LoopFillZerobss+0x22>)
  movs r3, #0
 81022ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 81022f0:	e001      	b.n	81022f6 <LoopFillZerobss>

081022f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81022f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81022f4:	3204      	adds	r2, #4

081022f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81022f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81022f8:	d3fb      	bcc.n	81022f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81022fa:	f008 fd0d 	bl	810ad18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81022fe:	f7ff f99b 	bl	8101638 <main>
  bx  lr
 8102302:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8102304:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8102308:	10000000 	.word	0x10000000
  ldr r1, =_edata
 810230c:	100001e8 	.word	0x100001e8
  ldr r2, =_sidata
 8102310:	0810ec88 	.word	0x0810ec88
  ldr r2, =_sbss
 8102314:	100001e8 	.word	0x100001e8
  ldr r4, =_ebss
 8102318:	100004cc 	.word	0x100004cc

0810231c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 810231c:	e7fe      	b.n	810231c <ADC3_IRQHandler>
	...

08102320 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8102320:	b580      	push	{r7, lr}
 8102322:	b082      	sub	sp, #8
 8102324:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8102326:	4b28      	ldr	r3, [pc, #160]	; (81023c8 <HAL_Init+0xa8>)
 8102328:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810232c:	4a26      	ldr	r2, [pc, #152]	; (81023c8 <HAL_Init+0xa8>)
 810232e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8102332:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8102336:	4b24      	ldr	r3, [pc, #144]	; (81023c8 <HAL_Init+0xa8>)
 8102338:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810233c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8102340:	603b      	str	r3, [r7, #0]
 8102342:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8102344:	4b21      	ldr	r3, [pc, #132]	; (81023cc <HAL_Init+0xac>)
 8102346:	681b      	ldr	r3, [r3, #0]
 8102348:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 810234c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8102350:	4a1e      	ldr	r2, [pc, #120]	; (81023cc <HAL_Init+0xac>)
 8102352:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8102356:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8102358:	4b1c      	ldr	r3, [pc, #112]	; (81023cc <HAL_Init+0xac>)
 810235a:	681b      	ldr	r3, [r3, #0]
 810235c:	4a1b      	ldr	r2, [pc, #108]	; (81023cc <HAL_Init+0xac>)
 810235e:	f043 0301 	orr.w	r3, r3, #1
 8102362:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8102364:	2003      	movs	r0, #3
 8102366:	f000 f95f 	bl	8102628 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810236a:	f001 f979 	bl	8103660 <HAL_RCC_GetSysClockFreq>
 810236e:	4602      	mov	r2, r0
 8102370:	4b15      	ldr	r3, [pc, #84]	; (81023c8 <HAL_Init+0xa8>)
 8102372:	699b      	ldr	r3, [r3, #24]
 8102374:	0a1b      	lsrs	r3, r3, #8
 8102376:	f003 030f 	and.w	r3, r3, #15
 810237a:	4915      	ldr	r1, [pc, #84]	; (81023d0 <HAL_Init+0xb0>)
 810237c:	5ccb      	ldrb	r3, [r1, r3]
 810237e:	f003 031f 	and.w	r3, r3, #31
 8102382:	fa22 f303 	lsr.w	r3, r2, r3
 8102386:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102388:	4b0f      	ldr	r3, [pc, #60]	; (81023c8 <HAL_Init+0xa8>)
 810238a:	699b      	ldr	r3, [r3, #24]
 810238c:	f003 030f 	and.w	r3, r3, #15
 8102390:	4a0f      	ldr	r2, [pc, #60]	; (81023d0 <HAL_Init+0xb0>)
 8102392:	5cd3      	ldrb	r3, [r2, r3]
 8102394:	f003 031f 	and.w	r3, r3, #31
 8102398:	687a      	ldr	r2, [r7, #4]
 810239a:	fa22 f303 	lsr.w	r3, r2, r3
 810239e:	4a0d      	ldr	r2, [pc, #52]	; (81023d4 <HAL_Init+0xb4>)
 81023a0:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81023a2:	4b0c      	ldr	r3, [pc, #48]	; (81023d4 <HAL_Init+0xb4>)
 81023a4:	681b      	ldr	r3, [r3, #0]
 81023a6:	4a0c      	ldr	r2, [pc, #48]	; (81023d8 <HAL_Init+0xb8>)
 81023a8:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81023aa:	2000      	movs	r0, #0
 81023ac:	f000 f816 	bl	81023dc <HAL_InitTick>
 81023b0:	4603      	mov	r3, r0
 81023b2:	2b00      	cmp	r3, #0
 81023b4:	d001      	beq.n	81023ba <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81023b6:	2301      	movs	r3, #1
 81023b8:	e002      	b.n	81023c0 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81023ba:	f7ff fd19 	bl	8101df0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81023be:	2300      	movs	r3, #0
}
 81023c0:	4618      	mov	r0, r3
 81023c2:	3708      	adds	r7, #8
 81023c4:	46bd      	mov	sp, r7
 81023c6:	bd80      	pop	{r7, pc}
 81023c8:	58024400 	.word	0x58024400
 81023cc:	40024400 	.word	0x40024400
 81023d0:	0810e730 	.word	0x0810e730
 81023d4:	10000004 	.word	0x10000004
 81023d8:	10000000 	.word	0x10000000

081023dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81023dc:	b580      	push	{r7, lr}
 81023de:	b082      	sub	sp, #8
 81023e0:	af00      	add	r7, sp, #0
 81023e2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 81023e4:	4b15      	ldr	r3, [pc, #84]	; (810243c <HAL_InitTick+0x60>)
 81023e6:	781b      	ldrb	r3, [r3, #0]
 81023e8:	2b00      	cmp	r3, #0
 81023ea:	d101      	bne.n	81023f0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 81023ec:	2301      	movs	r3, #1
 81023ee:	e021      	b.n	8102434 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 81023f0:	4b13      	ldr	r3, [pc, #76]	; (8102440 <HAL_InitTick+0x64>)
 81023f2:	681a      	ldr	r2, [r3, #0]
 81023f4:	4b11      	ldr	r3, [pc, #68]	; (810243c <HAL_InitTick+0x60>)
 81023f6:	781b      	ldrb	r3, [r3, #0]
 81023f8:	4619      	mov	r1, r3
 81023fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81023fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8102402:	fbb2 f3f3 	udiv	r3, r2, r3
 8102406:	4618      	mov	r0, r3
 8102408:	f000 f941 	bl	810268e <HAL_SYSTICK_Config>
 810240c:	4603      	mov	r3, r0
 810240e:	2b00      	cmp	r3, #0
 8102410:	d001      	beq.n	8102416 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8102412:	2301      	movs	r3, #1
 8102414:	e00e      	b.n	8102434 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8102416:	687b      	ldr	r3, [r7, #4]
 8102418:	2b0f      	cmp	r3, #15
 810241a:	d80a      	bhi.n	8102432 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 810241c:	2200      	movs	r2, #0
 810241e:	6879      	ldr	r1, [r7, #4]
 8102420:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8102424:	f000 f90b 	bl	810263e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8102428:	4a06      	ldr	r2, [pc, #24]	; (8102444 <HAL_InitTick+0x68>)
 810242a:	687b      	ldr	r3, [r7, #4]
 810242c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 810242e:	2300      	movs	r3, #0
 8102430:	e000      	b.n	8102434 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8102432:	2301      	movs	r3, #1
}
 8102434:	4618      	mov	r0, r3
 8102436:	3708      	adds	r7, #8
 8102438:	46bd      	mov	sp, r7
 810243a:	bd80      	pop	{r7, pc}
 810243c:	1000000c 	.word	0x1000000c
 8102440:	10000000 	.word	0x10000000
 8102444:	10000008 	.word	0x10000008

08102448 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8102448:	b480      	push	{r7}
 810244a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 810244c:	4b06      	ldr	r3, [pc, #24]	; (8102468 <HAL_IncTick+0x20>)
 810244e:	781b      	ldrb	r3, [r3, #0]
 8102450:	461a      	mov	r2, r3
 8102452:	4b06      	ldr	r3, [pc, #24]	; (810246c <HAL_IncTick+0x24>)
 8102454:	681b      	ldr	r3, [r3, #0]
 8102456:	4413      	add	r3, r2
 8102458:	4a04      	ldr	r2, [pc, #16]	; (810246c <HAL_IncTick+0x24>)
 810245a:	6013      	str	r3, [r2, #0]
}
 810245c:	bf00      	nop
 810245e:	46bd      	mov	sp, r7
 8102460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102464:	4770      	bx	lr
 8102466:	bf00      	nop
 8102468:	1000000c 	.word	0x1000000c
 810246c:	1000037c 	.word	0x1000037c

08102470 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8102470:	b480      	push	{r7}
 8102472:	af00      	add	r7, sp, #0
  return uwTick;
 8102474:	4b03      	ldr	r3, [pc, #12]	; (8102484 <HAL_GetTick+0x14>)
 8102476:	681b      	ldr	r3, [r3, #0]
}
 8102478:	4618      	mov	r0, r3
 810247a:	46bd      	mov	sp, r7
 810247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102480:	4770      	bx	lr
 8102482:	bf00      	nop
 8102484:	1000037c 	.word	0x1000037c

08102488 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102488:	b480      	push	{r7}
 810248a:	b085      	sub	sp, #20
 810248c:	af00      	add	r7, sp, #0
 810248e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8102490:	687b      	ldr	r3, [r7, #4]
 8102492:	f003 0307 	and.w	r3, r3, #7
 8102496:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8102498:	4b0c      	ldr	r3, [pc, #48]	; (81024cc <__NVIC_SetPriorityGrouping+0x44>)
 810249a:	68db      	ldr	r3, [r3, #12]
 810249c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810249e:	68ba      	ldr	r2, [r7, #8]
 81024a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 81024a4:	4013      	ands	r3, r2
 81024a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81024a8:	68fb      	ldr	r3, [r7, #12]
 81024aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81024ac:	68bb      	ldr	r3, [r7, #8]
 81024ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81024b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 81024b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81024b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81024ba:	4a04      	ldr	r2, [pc, #16]	; (81024cc <__NVIC_SetPriorityGrouping+0x44>)
 81024bc:	68bb      	ldr	r3, [r7, #8]
 81024be:	60d3      	str	r3, [r2, #12]
}
 81024c0:	bf00      	nop
 81024c2:	3714      	adds	r7, #20
 81024c4:	46bd      	mov	sp, r7
 81024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81024ca:	4770      	bx	lr
 81024cc:	e000ed00 	.word	0xe000ed00

081024d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81024d0:	b480      	push	{r7}
 81024d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81024d4:	4b04      	ldr	r3, [pc, #16]	; (81024e8 <__NVIC_GetPriorityGrouping+0x18>)
 81024d6:	68db      	ldr	r3, [r3, #12]
 81024d8:	0a1b      	lsrs	r3, r3, #8
 81024da:	f003 0307 	and.w	r3, r3, #7
}
 81024de:	4618      	mov	r0, r3
 81024e0:	46bd      	mov	sp, r7
 81024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81024e6:	4770      	bx	lr
 81024e8:	e000ed00 	.word	0xe000ed00

081024ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81024ec:	b480      	push	{r7}
 81024ee:	b083      	sub	sp, #12
 81024f0:	af00      	add	r7, sp, #0
 81024f2:	4603      	mov	r3, r0
 81024f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81024f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81024fa:	2b00      	cmp	r3, #0
 81024fc:	db0b      	blt.n	8102516 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81024fe:	88fb      	ldrh	r3, [r7, #6]
 8102500:	f003 021f 	and.w	r2, r3, #31
 8102504:	4907      	ldr	r1, [pc, #28]	; (8102524 <__NVIC_EnableIRQ+0x38>)
 8102506:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810250a:	095b      	lsrs	r3, r3, #5
 810250c:	2001      	movs	r0, #1
 810250e:	fa00 f202 	lsl.w	r2, r0, r2
 8102512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8102516:	bf00      	nop
 8102518:	370c      	adds	r7, #12
 810251a:	46bd      	mov	sp, r7
 810251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102520:	4770      	bx	lr
 8102522:	bf00      	nop
 8102524:	e000e100 	.word	0xe000e100

08102528 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8102528:	b480      	push	{r7}
 810252a:	b083      	sub	sp, #12
 810252c:	af00      	add	r7, sp, #0
 810252e:	4603      	mov	r3, r0
 8102530:	6039      	str	r1, [r7, #0]
 8102532:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8102534:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102538:	2b00      	cmp	r3, #0
 810253a:	db0a      	blt.n	8102552 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810253c:	683b      	ldr	r3, [r7, #0]
 810253e:	b2da      	uxtb	r2, r3
 8102540:	490c      	ldr	r1, [pc, #48]	; (8102574 <__NVIC_SetPriority+0x4c>)
 8102542:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102546:	0112      	lsls	r2, r2, #4
 8102548:	b2d2      	uxtb	r2, r2
 810254a:	440b      	add	r3, r1
 810254c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8102550:	e00a      	b.n	8102568 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102552:	683b      	ldr	r3, [r7, #0]
 8102554:	b2da      	uxtb	r2, r3
 8102556:	4908      	ldr	r1, [pc, #32]	; (8102578 <__NVIC_SetPriority+0x50>)
 8102558:	88fb      	ldrh	r3, [r7, #6]
 810255a:	f003 030f 	and.w	r3, r3, #15
 810255e:	3b04      	subs	r3, #4
 8102560:	0112      	lsls	r2, r2, #4
 8102562:	b2d2      	uxtb	r2, r2
 8102564:	440b      	add	r3, r1
 8102566:	761a      	strb	r2, [r3, #24]
}
 8102568:	bf00      	nop
 810256a:	370c      	adds	r7, #12
 810256c:	46bd      	mov	sp, r7
 810256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102572:	4770      	bx	lr
 8102574:	e000e100 	.word	0xe000e100
 8102578:	e000ed00 	.word	0xe000ed00

0810257c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810257c:	b480      	push	{r7}
 810257e:	b089      	sub	sp, #36	; 0x24
 8102580:	af00      	add	r7, sp, #0
 8102582:	60f8      	str	r0, [r7, #12]
 8102584:	60b9      	str	r1, [r7, #8]
 8102586:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8102588:	68fb      	ldr	r3, [r7, #12]
 810258a:	f003 0307 	and.w	r3, r3, #7
 810258e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8102590:	69fb      	ldr	r3, [r7, #28]
 8102592:	f1c3 0307 	rsb	r3, r3, #7
 8102596:	2b04      	cmp	r3, #4
 8102598:	bf28      	it	cs
 810259a:	2304      	movcs	r3, #4
 810259c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810259e:	69fb      	ldr	r3, [r7, #28]
 81025a0:	3304      	adds	r3, #4
 81025a2:	2b06      	cmp	r3, #6
 81025a4:	d902      	bls.n	81025ac <NVIC_EncodePriority+0x30>
 81025a6:	69fb      	ldr	r3, [r7, #28]
 81025a8:	3b03      	subs	r3, #3
 81025aa:	e000      	b.n	81025ae <NVIC_EncodePriority+0x32>
 81025ac:	2300      	movs	r3, #0
 81025ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81025b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 81025b4:	69bb      	ldr	r3, [r7, #24]
 81025b6:	fa02 f303 	lsl.w	r3, r2, r3
 81025ba:	43da      	mvns	r2, r3
 81025bc:	68bb      	ldr	r3, [r7, #8]
 81025be:	401a      	ands	r2, r3
 81025c0:	697b      	ldr	r3, [r7, #20]
 81025c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81025c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 81025c8:	697b      	ldr	r3, [r7, #20]
 81025ca:	fa01 f303 	lsl.w	r3, r1, r3
 81025ce:	43d9      	mvns	r1, r3
 81025d0:	687b      	ldr	r3, [r7, #4]
 81025d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81025d4:	4313      	orrs	r3, r2
         );
}
 81025d6:	4618      	mov	r0, r3
 81025d8:	3724      	adds	r7, #36	; 0x24
 81025da:	46bd      	mov	sp, r7
 81025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81025e0:	4770      	bx	lr
	...

081025e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 81025e4:	b580      	push	{r7, lr}
 81025e6:	b082      	sub	sp, #8
 81025e8:	af00      	add	r7, sp, #0
 81025ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 81025ec:	687b      	ldr	r3, [r7, #4]
 81025ee:	3b01      	subs	r3, #1
 81025f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81025f4:	d301      	bcc.n	81025fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 81025f6:	2301      	movs	r3, #1
 81025f8:	e00f      	b.n	810261a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 81025fa:	4a0a      	ldr	r2, [pc, #40]	; (8102624 <SysTick_Config+0x40>)
 81025fc:	687b      	ldr	r3, [r7, #4]
 81025fe:	3b01      	subs	r3, #1
 8102600:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8102602:	210f      	movs	r1, #15
 8102604:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8102608:	f7ff ff8e 	bl	8102528 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 810260c:	4b05      	ldr	r3, [pc, #20]	; (8102624 <SysTick_Config+0x40>)
 810260e:	2200      	movs	r2, #0
 8102610:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8102612:	4b04      	ldr	r3, [pc, #16]	; (8102624 <SysTick_Config+0x40>)
 8102614:	2207      	movs	r2, #7
 8102616:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8102618:	2300      	movs	r3, #0
}
 810261a:	4618      	mov	r0, r3
 810261c:	3708      	adds	r7, #8
 810261e:	46bd      	mov	sp, r7
 8102620:	bd80      	pop	{r7, pc}
 8102622:	bf00      	nop
 8102624:	e000e010 	.word	0xe000e010

08102628 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102628:	b580      	push	{r7, lr}
 810262a:	b082      	sub	sp, #8
 810262c:	af00      	add	r7, sp, #0
 810262e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8102630:	6878      	ldr	r0, [r7, #4]
 8102632:	f7ff ff29 	bl	8102488 <__NVIC_SetPriorityGrouping>
}
 8102636:	bf00      	nop
 8102638:	3708      	adds	r7, #8
 810263a:	46bd      	mov	sp, r7
 810263c:	bd80      	pop	{r7, pc}

0810263e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810263e:	b580      	push	{r7, lr}
 8102640:	b086      	sub	sp, #24
 8102642:	af00      	add	r7, sp, #0
 8102644:	4603      	mov	r3, r0
 8102646:	60b9      	str	r1, [r7, #8]
 8102648:	607a      	str	r2, [r7, #4]
 810264a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 810264c:	f7ff ff40 	bl	81024d0 <__NVIC_GetPriorityGrouping>
 8102650:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8102652:	687a      	ldr	r2, [r7, #4]
 8102654:	68b9      	ldr	r1, [r7, #8]
 8102656:	6978      	ldr	r0, [r7, #20]
 8102658:	f7ff ff90 	bl	810257c <NVIC_EncodePriority>
 810265c:	4602      	mov	r2, r0
 810265e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8102662:	4611      	mov	r1, r2
 8102664:	4618      	mov	r0, r3
 8102666:	f7ff ff5f 	bl	8102528 <__NVIC_SetPriority>
}
 810266a:	bf00      	nop
 810266c:	3718      	adds	r7, #24
 810266e:	46bd      	mov	sp, r7
 8102670:	bd80      	pop	{r7, pc}

08102672 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8102672:	b580      	push	{r7, lr}
 8102674:	b082      	sub	sp, #8
 8102676:	af00      	add	r7, sp, #0
 8102678:	4603      	mov	r3, r0
 810267a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 810267c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102680:	4618      	mov	r0, r3
 8102682:	f7ff ff33 	bl	81024ec <__NVIC_EnableIRQ>
}
 8102686:	bf00      	nop
 8102688:	3708      	adds	r7, #8
 810268a:	46bd      	mov	sp, r7
 810268c:	bd80      	pop	{r7, pc}

0810268e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 810268e:	b580      	push	{r7, lr}
 8102690:	b082      	sub	sp, #8
 8102692:	af00      	add	r7, sp, #0
 8102694:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8102696:	6878      	ldr	r0, [r7, #4]
 8102698:	f7ff ffa4 	bl	81025e4 <SysTick_Config>
 810269c:	4603      	mov	r3, r0
}
 810269e:	4618      	mov	r0, r3
 81026a0:	3708      	adds	r7, #8
 81026a2:	46bd      	mov	sp, r7
 81026a4:	bd80      	pop	{r7, pc}
	...

081026a8 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81026a8:	b480      	push	{r7}
 81026aa:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81026ac:	4b07      	ldr	r3, [pc, #28]	; (81026cc <HAL_GetCurrentCPUID+0x24>)
 81026ae:	681b      	ldr	r3, [r3, #0]
 81026b0:	091b      	lsrs	r3, r3, #4
 81026b2:	f003 030f 	and.w	r3, r3, #15
 81026b6:	2b07      	cmp	r3, #7
 81026b8:	d101      	bne.n	81026be <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81026ba:	2303      	movs	r3, #3
 81026bc:	e000      	b.n	81026c0 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 81026be:	2301      	movs	r3, #1
  }
}
 81026c0:	4618      	mov	r0, r3
 81026c2:	46bd      	mov	sp, r7
 81026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81026c8:	4770      	bx	lr
 81026ca:	bf00      	nop
 81026cc:	e000ed00 	.word	0xe000ed00

081026d0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 81026d0:	b580      	push	{r7, lr}
 81026d2:	b086      	sub	sp, #24
 81026d4:	af00      	add	r7, sp, #0
 81026d6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 81026d8:	f7ff feca 	bl	8102470 <HAL_GetTick>
 81026dc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 81026de:	687b      	ldr	r3, [r7, #4]
 81026e0:	2b00      	cmp	r3, #0
 81026e2:	d101      	bne.n	81026e8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 81026e4:	2301      	movs	r3, #1
 81026e6:	e2dc      	b.n	8102ca2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 81026e8:	687b      	ldr	r3, [r7, #4]
 81026ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 81026ee:	b2db      	uxtb	r3, r3
 81026f0:	2b02      	cmp	r3, #2
 81026f2:	d008      	beq.n	8102706 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 81026f4:	687b      	ldr	r3, [r7, #4]
 81026f6:	2280      	movs	r2, #128	; 0x80
 81026f8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 81026fa:	687b      	ldr	r3, [r7, #4]
 81026fc:	2200      	movs	r2, #0
 81026fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8102702:	2301      	movs	r3, #1
 8102704:	e2cd      	b.n	8102ca2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8102706:	687b      	ldr	r3, [r7, #4]
 8102708:	681b      	ldr	r3, [r3, #0]
 810270a:	4a76      	ldr	r2, [pc, #472]	; (81028e4 <HAL_DMA_Abort+0x214>)
 810270c:	4293      	cmp	r3, r2
 810270e:	d04a      	beq.n	81027a6 <HAL_DMA_Abort+0xd6>
 8102710:	687b      	ldr	r3, [r7, #4]
 8102712:	681b      	ldr	r3, [r3, #0]
 8102714:	4a74      	ldr	r2, [pc, #464]	; (81028e8 <HAL_DMA_Abort+0x218>)
 8102716:	4293      	cmp	r3, r2
 8102718:	d045      	beq.n	81027a6 <HAL_DMA_Abort+0xd6>
 810271a:	687b      	ldr	r3, [r7, #4]
 810271c:	681b      	ldr	r3, [r3, #0]
 810271e:	4a73      	ldr	r2, [pc, #460]	; (81028ec <HAL_DMA_Abort+0x21c>)
 8102720:	4293      	cmp	r3, r2
 8102722:	d040      	beq.n	81027a6 <HAL_DMA_Abort+0xd6>
 8102724:	687b      	ldr	r3, [r7, #4]
 8102726:	681b      	ldr	r3, [r3, #0]
 8102728:	4a71      	ldr	r2, [pc, #452]	; (81028f0 <HAL_DMA_Abort+0x220>)
 810272a:	4293      	cmp	r3, r2
 810272c:	d03b      	beq.n	81027a6 <HAL_DMA_Abort+0xd6>
 810272e:	687b      	ldr	r3, [r7, #4]
 8102730:	681b      	ldr	r3, [r3, #0]
 8102732:	4a70      	ldr	r2, [pc, #448]	; (81028f4 <HAL_DMA_Abort+0x224>)
 8102734:	4293      	cmp	r3, r2
 8102736:	d036      	beq.n	81027a6 <HAL_DMA_Abort+0xd6>
 8102738:	687b      	ldr	r3, [r7, #4]
 810273a:	681b      	ldr	r3, [r3, #0]
 810273c:	4a6e      	ldr	r2, [pc, #440]	; (81028f8 <HAL_DMA_Abort+0x228>)
 810273e:	4293      	cmp	r3, r2
 8102740:	d031      	beq.n	81027a6 <HAL_DMA_Abort+0xd6>
 8102742:	687b      	ldr	r3, [r7, #4]
 8102744:	681b      	ldr	r3, [r3, #0]
 8102746:	4a6d      	ldr	r2, [pc, #436]	; (81028fc <HAL_DMA_Abort+0x22c>)
 8102748:	4293      	cmp	r3, r2
 810274a:	d02c      	beq.n	81027a6 <HAL_DMA_Abort+0xd6>
 810274c:	687b      	ldr	r3, [r7, #4]
 810274e:	681b      	ldr	r3, [r3, #0]
 8102750:	4a6b      	ldr	r2, [pc, #428]	; (8102900 <HAL_DMA_Abort+0x230>)
 8102752:	4293      	cmp	r3, r2
 8102754:	d027      	beq.n	81027a6 <HAL_DMA_Abort+0xd6>
 8102756:	687b      	ldr	r3, [r7, #4]
 8102758:	681b      	ldr	r3, [r3, #0]
 810275a:	4a6a      	ldr	r2, [pc, #424]	; (8102904 <HAL_DMA_Abort+0x234>)
 810275c:	4293      	cmp	r3, r2
 810275e:	d022      	beq.n	81027a6 <HAL_DMA_Abort+0xd6>
 8102760:	687b      	ldr	r3, [r7, #4]
 8102762:	681b      	ldr	r3, [r3, #0]
 8102764:	4a68      	ldr	r2, [pc, #416]	; (8102908 <HAL_DMA_Abort+0x238>)
 8102766:	4293      	cmp	r3, r2
 8102768:	d01d      	beq.n	81027a6 <HAL_DMA_Abort+0xd6>
 810276a:	687b      	ldr	r3, [r7, #4]
 810276c:	681b      	ldr	r3, [r3, #0]
 810276e:	4a67      	ldr	r2, [pc, #412]	; (810290c <HAL_DMA_Abort+0x23c>)
 8102770:	4293      	cmp	r3, r2
 8102772:	d018      	beq.n	81027a6 <HAL_DMA_Abort+0xd6>
 8102774:	687b      	ldr	r3, [r7, #4]
 8102776:	681b      	ldr	r3, [r3, #0]
 8102778:	4a65      	ldr	r2, [pc, #404]	; (8102910 <HAL_DMA_Abort+0x240>)
 810277a:	4293      	cmp	r3, r2
 810277c:	d013      	beq.n	81027a6 <HAL_DMA_Abort+0xd6>
 810277e:	687b      	ldr	r3, [r7, #4]
 8102780:	681b      	ldr	r3, [r3, #0]
 8102782:	4a64      	ldr	r2, [pc, #400]	; (8102914 <HAL_DMA_Abort+0x244>)
 8102784:	4293      	cmp	r3, r2
 8102786:	d00e      	beq.n	81027a6 <HAL_DMA_Abort+0xd6>
 8102788:	687b      	ldr	r3, [r7, #4]
 810278a:	681b      	ldr	r3, [r3, #0]
 810278c:	4a62      	ldr	r2, [pc, #392]	; (8102918 <HAL_DMA_Abort+0x248>)
 810278e:	4293      	cmp	r3, r2
 8102790:	d009      	beq.n	81027a6 <HAL_DMA_Abort+0xd6>
 8102792:	687b      	ldr	r3, [r7, #4]
 8102794:	681b      	ldr	r3, [r3, #0]
 8102796:	4a61      	ldr	r2, [pc, #388]	; (810291c <HAL_DMA_Abort+0x24c>)
 8102798:	4293      	cmp	r3, r2
 810279a:	d004      	beq.n	81027a6 <HAL_DMA_Abort+0xd6>
 810279c:	687b      	ldr	r3, [r7, #4]
 810279e:	681b      	ldr	r3, [r3, #0]
 81027a0:	4a5f      	ldr	r2, [pc, #380]	; (8102920 <HAL_DMA_Abort+0x250>)
 81027a2:	4293      	cmp	r3, r2
 81027a4:	d101      	bne.n	81027aa <HAL_DMA_Abort+0xda>
 81027a6:	2301      	movs	r3, #1
 81027a8:	e000      	b.n	81027ac <HAL_DMA_Abort+0xdc>
 81027aa:	2300      	movs	r3, #0
 81027ac:	2b00      	cmp	r3, #0
 81027ae:	d013      	beq.n	81027d8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 81027b0:	687b      	ldr	r3, [r7, #4]
 81027b2:	681b      	ldr	r3, [r3, #0]
 81027b4:	681a      	ldr	r2, [r3, #0]
 81027b6:	687b      	ldr	r3, [r7, #4]
 81027b8:	681b      	ldr	r3, [r3, #0]
 81027ba:	f022 021e 	bic.w	r2, r2, #30
 81027be:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 81027c0:	687b      	ldr	r3, [r7, #4]
 81027c2:	681b      	ldr	r3, [r3, #0]
 81027c4:	695a      	ldr	r2, [r3, #20]
 81027c6:	687b      	ldr	r3, [r7, #4]
 81027c8:	681b      	ldr	r3, [r3, #0]
 81027ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 81027ce:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 81027d0:	687b      	ldr	r3, [r7, #4]
 81027d2:	681b      	ldr	r3, [r3, #0]
 81027d4:	617b      	str	r3, [r7, #20]
 81027d6:	e00a      	b.n	81027ee <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 81027d8:	687b      	ldr	r3, [r7, #4]
 81027da:	681b      	ldr	r3, [r3, #0]
 81027dc:	681a      	ldr	r2, [r3, #0]
 81027de:	687b      	ldr	r3, [r7, #4]
 81027e0:	681b      	ldr	r3, [r3, #0]
 81027e2:	f022 020e 	bic.w	r2, r2, #14
 81027e6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 81027e8:	687b      	ldr	r3, [r7, #4]
 81027ea:	681b      	ldr	r3, [r3, #0]
 81027ec:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81027ee:	687b      	ldr	r3, [r7, #4]
 81027f0:	681b      	ldr	r3, [r3, #0]
 81027f2:	4a3c      	ldr	r2, [pc, #240]	; (81028e4 <HAL_DMA_Abort+0x214>)
 81027f4:	4293      	cmp	r3, r2
 81027f6:	d072      	beq.n	81028de <HAL_DMA_Abort+0x20e>
 81027f8:	687b      	ldr	r3, [r7, #4]
 81027fa:	681b      	ldr	r3, [r3, #0]
 81027fc:	4a3a      	ldr	r2, [pc, #232]	; (81028e8 <HAL_DMA_Abort+0x218>)
 81027fe:	4293      	cmp	r3, r2
 8102800:	d06d      	beq.n	81028de <HAL_DMA_Abort+0x20e>
 8102802:	687b      	ldr	r3, [r7, #4]
 8102804:	681b      	ldr	r3, [r3, #0]
 8102806:	4a39      	ldr	r2, [pc, #228]	; (81028ec <HAL_DMA_Abort+0x21c>)
 8102808:	4293      	cmp	r3, r2
 810280a:	d068      	beq.n	81028de <HAL_DMA_Abort+0x20e>
 810280c:	687b      	ldr	r3, [r7, #4]
 810280e:	681b      	ldr	r3, [r3, #0]
 8102810:	4a37      	ldr	r2, [pc, #220]	; (81028f0 <HAL_DMA_Abort+0x220>)
 8102812:	4293      	cmp	r3, r2
 8102814:	d063      	beq.n	81028de <HAL_DMA_Abort+0x20e>
 8102816:	687b      	ldr	r3, [r7, #4]
 8102818:	681b      	ldr	r3, [r3, #0]
 810281a:	4a36      	ldr	r2, [pc, #216]	; (81028f4 <HAL_DMA_Abort+0x224>)
 810281c:	4293      	cmp	r3, r2
 810281e:	d05e      	beq.n	81028de <HAL_DMA_Abort+0x20e>
 8102820:	687b      	ldr	r3, [r7, #4]
 8102822:	681b      	ldr	r3, [r3, #0]
 8102824:	4a34      	ldr	r2, [pc, #208]	; (81028f8 <HAL_DMA_Abort+0x228>)
 8102826:	4293      	cmp	r3, r2
 8102828:	d059      	beq.n	81028de <HAL_DMA_Abort+0x20e>
 810282a:	687b      	ldr	r3, [r7, #4]
 810282c:	681b      	ldr	r3, [r3, #0]
 810282e:	4a33      	ldr	r2, [pc, #204]	; (81028fc <HAL_DMA_Abort+0x22c>)
 8102830:	4293      	cmp	r3, r2
 8102832:	d054      	beq.n	81028de <HAL_DMA_Abort+0x20e>
 8102834:	687b      	ldr	r3, [r7, #4]
 8102836:	681b      	ldr	r3, [r3, #0]
 8102838:	4a31      	ldr	r2, [pc, #196]	; (8102900 <HAL_DMA_Abort+0x230>)
 810283a:	4293      	cmp	r3, r2
 810283c:	d04f      	beq.n	81028de <HAL_DMA_Abort+0x20e>
 810283e:	687b      	ldr	r3, [r7, #4]
 8102840:	681b      	ldr	r3, [r3, #0]
 8102842:	4a30      	ldr	r2, [pc, #192]	; (8102904 <HAL_DMA_Abort+0x234>)
 8102844:	4293      	cmp	r3, r2
 8102846:	d04a      	beq.n	81028de <HAL_DMA_Abort+0x20e>
 8102848:	687b      	ldr	r3, [r7, #4]
 810284a:	681b      	ldr	r3, [r3, #0]
 810284c:	4a2e      	ldr	r2, [pc, #184]	; (8102908 <HAL_DMA_Abort+0x238>)
 810284e:	4293      	cmp	r3, r2
 8102850:	d045      	beq.n	81028de <HAL_DMA_Abort+0x20e>
 8102852:	687b      	ldr	r3, [r7, #4]
 8102854:	681b      	ldr	r3, [r3, #0]
 8102856:	4a2d      	ldr	r2, [pc, #180]	; (810290c <HAL_DMA_Abort+0x23c>)
 8102858:	4293      	cmp	r3, r2
 810285a:	d040      	beq.n	81028de <HAL_DMA_Abort+0x20e>
 810285c:	687b      	ldr	r3, [r7, #4]
 810285e:	681b      	ldr	r3, [r3, #0]
 8102860:	4a2b      	ldr	r2, [pc, #172]	; (8102910 <HAL_DMA_Abort+0x240>)
 8102862:	4293      	cmp	r3, r2
 8102864:	d03b      	beq.n	81028de <HAL_DMA_Abort+0x20e>
 8102866:	687b      	ldr	r3, [r7, #4]
 8102868:	681b      	ldr	r3, [r3, #0]
 810286a:	4a2a      	ldr	r2, [pc, #168]	; (8102914 <HAL_DMA_Abort+0x244>)
 810286c:	4293      	cmp	r3, r2
 810286e:	d036      	beq.n	81028de <HAL_DMA_Abort+0x20e>
 8102870:	687b      	ldr	r3, [r7, #4]
 8102872:	681b      	ldr	r3, [r3, #0]
 8102874:	4a28      	ldr	r2, [pc, #160]	; (8102918 <HAL_DMA_Abort+0x248>)
 8102876:	4293      	cmp	r3, r2
 8102878:	d031      	beq.n	81028de <HAL_DMA_Abort+0x20e>
 810287a:	687b      	ldr	r3, [r7, #4]
 810287c:	681b      	ldr	r3, [r3, #0]
 810287e:	4a27      	ldr	r2, [pc, #156]	; (810291c <HAL_DMA_Abort+0x24c>)
 8102880:	4293      	cmp	r3, r2
 8102882:	d02c      	beq.n	81028de <HAL_DMA_Abort+0x20e>
 8102884:	687b      	ldr	r3, [r7, #4]
 8102886:	681b      	ldr	r3, [r3, #0]
 8102888:	4a25      	ldr	r2, [pc, #148]	; (8102920 <HAL_DMA_Abort+0x250>)
 810288a:	4293      	cmp	r3, r2
 810288c:	d027      	beq.n	81028de <HAL_DMA_Abort+0x20e>
 810288e:	687b      	ldr	r3, [r7, #4]
 8102890:	681b      	ldr	r3, [r3, #0]
 8102892:	4a24      	ldr	r2, [pc, #144]	; (8102924 <HAL_DMA_Abort+0x254>)
 8102894:	4293      	cmp	r3, r2
 8102896:	d022      	beq.n	81028de <HAL_DMA_Abort+0x20e>
 8102898:	687b      	ldr	r3, [r7, #4]
 810289a:	681b      	ldr	r3, [r3, #0]
 810289c:	4a22      	ldr	r2, [pc, #136]	; (8102928 <HAL_DMA_Abort+0x258>)
 810289e:	4293      	cmp	r3, r2
 81028a0:	d01d      	beq.n	81028de <HAL_DMA_Abort+0x20e>
 81028a2:	687b      	ldr	r3, [r7, #4]
 81028a4:	681b      	ldr	r3, [r3, #0]
 81028a6:	4a21      	ldr	r2, [pc, #132]	; (810292c <HAL_DMA_Abort+0x25c>)
 81028a8:	4293      	cmp	r3, r2
 81028aa:	d018      	beq.n	81028de <HAL_DMA_Abort+0x20e>
 81028ac:	687b      	ldr	r3, [r7, #4]
 81028ae:	681b      	ldr	r3, [r3, #0]
 81028b0:	4a1f      	ldr	r2, [pc, #124]	; (8102930 <HAL_DMA_Abort+0x260>)
 81028b2:	4293      	cmp	r3, r2
 81028b4:	d013      	beq.n	81028de <HAL_DMA_Abort+0x20e>
 81028b6:	687b      	ldr	r3, [r7, #4]
 81028b8:	681b      	ldr	r3, [r3, #0]
 81028ba:	4a1e      	ldr	r2, [pc, #120]	; (8102934 <HAL_DMA_Abort+0x264>)
 81028bc:	4293      	cmp	r3, r2
 81028be:	d00e      	beq.n	81028de <HAL_DMA_Abort+0x20e>
 81028c0:	687b      	ldr	r3, [r7, #4]
 81028c2:	681b      	ldr	r3, [r3, #0]
 81028c4:	4a1c      	ldr	r2, [pc, #112]	; (8102938 <HAL_DMA_Abort+0x268>)
 81028c6:	4293      	cmp	r3, r2
 81028c8:	d009      	beq.n	81028de <HAL_DMA_Abort+0x20e>
 81028ca:	687b      	ldr	r3, [r7, #4]
 81028cc:	681b      	ldr	r3, [r3, #0]
 81028ce:	4a1b      	ldr	r2, [pc, #108]	; (810293c <HAL_DMA_Abort+0x26c>)
 81028d0:	4293      	cmp	r3, r2
 81028d2:	d004      	beq.n	81028de <HAL_DMA_Abort+0x20e>
 81028d4:	687b      	ldr	r3, [r7, #4]
 81028d6:	681b      	ldr	r3, [r3, #0]
 81028d8:	4a19      	ldr	r2, [pc, #100]	; (8102940 <HAL_DMA_Abort+0x270>)
 81028da:	4293      	cmp	r3, r2
 81028dc:	d132      	bne.n	8102944 <HAL_DMA_Abort+0x274>
 81028de:	2301      	movs	r3, #1
 81028e0:	e031      	b.n	8102946 <HAL_DMA_Abort+0x276>
 81028e2:	bf00      	nop
 81028e4:	40020010 	.word	0x40020010
 81028e8:	40020028 	.word	0x40020028
 81028ec:	40020040 	.word	0x40020040
 81028f0:	40020058 	.word	0x40020058
 81028f4:	40020070 	.word	0x40020070
 81028f8:	40020088 	.word	0x40020088
 81028fc:	400200a0 	.word	0x400200a0
 8102900:	400200b8 	.word	0x400200b8
 8102904:	40020410 	.word	0x40020410
 8102908:	40020428 	.word	0x40020428
 810290c:	40020440 	.word	0x40020440
 8102910:	40020458 	.word	0x40020458
 8102914:	40020470 	.word	0x40020470
 8102918:	40020488 	.word	0x40020488
 810291c:	400204a0 	.word	0x400204a0
 8102920:	400204b8 	.word	0x400204b8
 8102924:	58025408 	.word	0x58025408
 8102928:	5802541c 	.word	0x5802541c
 810292c:	58025430 	.word	0x58025430
 8102930:	58025444 	.word	0x58025444
 8102934:	58025458 	.word	0x58025458
 8102938:	5802546c 	.word	0x5802546c
 810293c:	58025480 	.word	0x58025480
 8102940:	58025494 	.word	0x58025494
 8102944:	2300      	movs	r3, #0
 8102946:	2b00      	cmp	r3, #0
 8102948:	d007      	beq.n	810295a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 810294a:	687b      	ldr	r3, [r7, #4]
 810294c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810294e:	681a      	ldr	r2, [r3, #0]
 8102950:	687b      	ldr	r3, [r7, #4]
 8102952:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102954:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8102958:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 810295a:	687b      	ldr	r3, [r7, #4]
 810295c:	681b      	ldr	r3, [r3, #0]
 810295e:	4a6d      	ldr	r2, [pc, #436]	; (8102b14 <HAL_DMA_Abort+0x444>)
 8102960:	4293      	cmp	r3, r2
 8102962:	d04a      	beq.n	81029fa <HAL_DMA_Abort+0x32a>
 8102964:	687b      	ldr	r3, [r7, #4]
 8102966:	681b      	ldr	r3, [r3, #0]
 8102968:	4a6b      	ldr	r2, [pc, #428]	; (8102b18 <HAL_DMA_Abort+0x448>)
 810296a:	4293      	cmp	r3, r2
 810296c:	d045      	beq.n	81029fa <HAL_DMA_Abort+0x32a>
 810296e:	687b      	ldr	r3, [r7, #4]
 8102970:	681b      	ldr	r3, [r3, #0]
 8102972:	4a6a      	ldr	r2, [pc, #424]	; (8102b1c <HAL_DMA_Abort+0x44c>)
 8102974:	4293      	cmp	r3, r2
 8102976:	d040      	beq.n	81029fa <HAL_DMA_Abort+0x32a>
 8102978:	687b      	ldr	r3, [r7, #4]
 810297a:	681b      	ldr	r3, [r3, #0]
 810297c:	4a68      	ldr	r2, [pc, #416]	; (8102b20 <HAL_DMA_Abort+0x450>)
 810297e:	4293      	cmp	r3, r2
 8102980:	d03b      	beq.n	81029fa <HAL_DMA_Abort+0x32a>
 8102982:	687b      	ldr	r3, [r7, #4]
 8102984:	681b      	ldr	r3, [r3, #0]
 8102986:	4a67      	ldr	r2, [pc, #412]	; (8102b24 <HAL_DMA_Abort+0x454>)
 8102988:	4293      	cmp	r3, r2
 810298a:	d036      	beq.n	81029fa <HAL_DMA_Abort+0x32a>
 810298c:	687b      	ldr	r3, [r7, #4]
 810298e:	681b      	ldr	r3, [r3, #0]
 8102990:	4a65      	ldr	r2, [pc, #404]	; (8102b28 <HAL_DMA_Abort+0x458>)
 8102992:	4293      	cmp	r3, r2
 8102994:	d031      	beq.n	81029fa <HAL_DMA_Abort+0x32a>
 8102996:	687b      	ldr	r3, [r7, #4]
 8102998:	681b      	ldr	r3, [r3, #0]
 810299a:	4a64      	ldr	r2, [pc, #400]	; (8102b2c <HAL_DMA_Abort+0x45c>)
 810299c:	4293      	cmp	r3, r2
 810299e:	d02c      	beq.n	81029fa <HAL_DMA_Abort+0x32a>
 81029a0:	687b      	ldr	r3, [r7, #4]
 81029a2:	681b      	ldr	r3, [r3, #0]
 81029a4:	4a62      	ldr	r2, [pc, #392]	; (8102b30 <HAL_DMA_Abort+0x460>)
 81029a6:	4293      	cmp	r3, r2
 81029a8:	d027      	beq.n	81029fa <HAL_DMA_Abort+0x32a>
 81029aa:	687b      	ldr	r3, [r7, #4]
 81029ac:	681b      	ldr	r3, [r3, #0]
 81029ae:	4a61      	ldr	r2, [pc, #388]	; (8102b34 <HAL_DMA_Abort+0x464>)
 81029b0:	4293      	cmp	r3, r2
 81029b2:	d022      	beq.n	81029fa <HAL_DMA_Abort+0x32a>
 81029b4:	687b      	ldr	r3, [r7, #4]
 81029b6:	681b      	ldr	r3, [r3, #0]
 81029b8:	4a5f      	ldr	r2, [pc, #380]	; (8102b38 <HAL_DMA_Abort+0x468>)
 81029ba:	4293      	cmp	r3, r2
 81029bc:	d01d      	beq.n	81029fa <HAL_DMA_Abort+0x32a>
 81029be:	687b      	ldr	r3, [r7, #4]
 81029c0:	681b      	ldr	r3, [r3, #0]
 81029c2:	4a5e      	ldr	r2, [pc, #376]	; (8102b3c <HAL_DMA_Abort+0x46c>)
 81029c4:	4293      	cmp	r3, r2
 81029c6:	d018      	beq.n	81029fa <HAL_DMA_Abort+0x32a>
 81029c8:	687b      	ldr	r3, [r7, #4]
 81029ca:	681b      	ldr	r3, [r3, #0]
 81029cc:	4a5c      	ldr	r2, [pc, #368]	; (8102b40 <HAL_DMA_Abort+0x470>)
 81029ce:	4293      	cmp	r3, r2
 81029d0:	d013      	beq.n	81029fa <HAL_DMA_Abort+0x32a>
 81029d2:	687b      	ldr	r3, [r7, #4]
 81029d4:	681b      	ldr	r3, [r3, #0]
 81029d6:	4a5b      	ldr	r2, [pc, #364]	; (8102b44 <HAL_DMA_Abort+0x474>)
 81029d8:	4293      	cmp	r3, r2
 81029da:	d00e      	beq.n	81029fa <HAL_DMA_Abort+0x32a>
 81029dc:	687b      	ldr	r3, [r7, #4]
 81029de:	681b      	ldr	r3, [r3, #0]
 81029e0:	4a59      	ldr	r2, [pc, #356]	; (8102b48 <HAL_DMA_Abort+0x478>)
 81029e2:	4293      	cmp	r3, r2
 81029e4:	d009      	beq.n	81029fa <HAL_DMA_Abort+0x32a>
 81029e6:	687b      	ldr	r3, [r7, #4]
 81029e8:	681b      	ldr	r3, [r3, #0]
 81029ea:	4a58      	ldr	r2, [pc, #352]	; (8102b4c <HAL_DMA_Abort+0x47c>)
 81029ec:	4293      	cmp	r3, r2
 81029ee:	d004      	beq.n	81029fa <HAL_DMA_Abort+0x32a>
 81029f0:	687b      	ldr	r3, [r7, #4]
 81029f2:	681b      	ldr	r3, [r3, #0]
 81029f4:	4a56      	ldr	r2, [pc, #344]	; (8102b50 <HAL_DMA_Abort+0x480>)
 81029f6:	4293      	cmp	r3, r2
 81029f8:	d108      	bne.n	8102a0c <HAL_DMA_Abort+0x33c>
 81029fa:	687b      	ldr	r3, [r7, #4]
 81029fc:	681b      	ldr	r3, [r3, #0]
 81029fe:	681a      	ldr	r2, [r3, #0]
 8102a00:	687b      	ldr	r3, [r7, #4]
 8102a02:	681b      	ldr	r3, [r3, #0]
 8102a04:	f022 0201 	bic.w	r2, r2, #1
 8102a08:	601a      	str	r2, [r3, #0]
 8102a0a:	e007      	b.n	8102a1c <HAL_DMA_Abort+0x34c>
 8102a0c:	687b      	ldr	r3, [r7, #4]
 8102a0e:	681b      	ldr	r3, [r3, #0]
 8102a10:	681a      	ldr	r2, [r3, #0]
 8102a12:	687b      	ldr	r3, [r7, #4]
 8102a14:	681b      	ldr	r3, [r3, #0]
 8102a16:	f022 0201 	bic.w	r2, r2, #1
 8102a1a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8102a1c:	e013      	b.n	8102a46 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8102a1e:	f7ff fd27 	bl	8102470 <HAL_GetTick>
 8102a22:	4602      	mov	r2, r0
 8102a24:	693b      	ldr	r3, [r7, #16]
 8102a26:	1ad3      	subs	r3, r2, r3
 8102a28:	2b05      	cmp	r3, #5
 8102a2a:	d90c      	bls.n	8102a46 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8102a2c:	687b      	ldr	r3, [r7, #4]
 8102a2e:	2220      	movs	r2, #32
 8102a30:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8102a32:	687b      	ldr	r3, [r7, #4]
 8102a34:	2203      	movs	r2, #3
 8102a36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8102a3a:	687b      	ldr	r3, [r7, #4]
 8102a3c:	2200      	movs	r2, #0
 8102a3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8102a42:	2301      	movs	r3, #1
 8102a44:	e12d      	b.n	8102ca2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8102a46:	697b      	ldr	r3, [r7, #20]
 8102a48:	681b      	ldr	r3, [r3, #0]
 8102a4a:	f003 0301 	and.w	r3, r3, #1
 8102a4e:	2b00      	cmp	r3, #0
 8102a50:	d1e5      	bne.n	8102a1e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8102a52:	687b      	ldr	r3, [r7, #4]
 8102a54:	681b      	ldr	r3, [r3, #0]
 8102a56:	4a2f      	ldr	r2, [pc, #188]	; (8102b14 <HAL_DMA_Abort+0x444>)
 8102a58:	4293      	cmp	r3, r2
 8102a5a:	d04a      	beq.n	8102af2 <HAL_DMA_Abort+0x422>
 8102a5c:	687b      	ldr	r3, [r7, #4]
 8102a5e:	681b      	ldr	r3, [r3, #0]
 8102a60:	4a2d      	ldr	r2, [pc, #180]	; (8102b18 <HAL_DMA_Abort+0x448>)
 8102a62:	4293      	cmp	r3, r2
 8102a64:	d045      	beq.n	8102af2 <HAL_DMA_Abort+0x422>
 8102a66:	687b      	ldr	r3, [r7, #4]
 8102a68:	681b      	ldr	r3, [r3, #0]
 8102a6a:	4a2c      	ldr	r2, [pc, #176]	; (8102b1c <HAL_DMA_Abort+0x44c>)
 8102a6c:	4293      	cmp	r3, r2
 8102a6e:	d040      	beq.n	8102af2 <HAL_DMA_Abort+0x422>
 8102a70:	687b      	ldr	r3, [r7, #4]
 8102a72:	681b      	ldr	r3, [r3, #0]
 8102a74:	4a2a      	ldr	r2, [pc, #168]	; (8102b20 <HAL_DMA_Abort+0x450>)
 8102a76:	4293      	cmp	r3, r2
 8102a78:	d03b      	beq.n	8102af2 <HAL_DMA_Abort+0x422>
 8102a7a:	687b      	ldr	r3, [r7, #4]
 8102a7c:	681b      	ldr	r3, [r3, #0]
 8102a7e:	4a29      	ldr	r2, [pc, #164]	; (8102b24 <HAL_DMA_Abort+0x454>)
 8102a80:	4293      	cmp	r3, r2
 8102a82:	d036      	beq.n	8102af2 <HAL_DMA_Abort+0x422>
 8102a84:	687b      	ldr	r3, [r7, #4]
 8102a86:	681b      	ldr	r3, [r3, #0]
 8102a88:	4a27      	ldr	r2, [pc, #156]	; (8102b28 <HAL_DMA_Abort+0x458>)
 8102a8a:	4293      	cmp	r3, r2
 8102a8c:	d031      	beq.n	8102af2 <HAL_DMA_Abort+0x422>
 8102a8e:	687b      	ldr	r3, [r7, #4]
 8102a90:	681b      	ldr	r3, [r3, #0]
 8102a92:	4a26      	ldr	r2, [pc, #152]	; (8102b2c <HAL_DMA_Abort+0x45c>)
 8102a94:	4293      	cmp	r3, r2
 8102a96:	d02c      	beq.n	8102af2 <HAL_DMA_Abort+0x422>
 8102a98:	687b      	ldr	r3, [r7, #4]
 8102a9a:	681b      	ldr	r3, [r3, #0]
 8102a9c:	4a24      	ldr	r2, [pc, #144]	; (8102b30 <HAL_DMA_Abort+0x460>)
 8102a9e:	4293      	cmp	r3, r2
 8102aa0:	d027      	beq.n	8102af2 <HAL_DMA_Abort+0x422>
 8102aa2:	687b      	ldr	r3, [r7, #4]
 8102aa4:	681b      	ldr	r3, [r3, #0]
 8102aa6:	4a23      	ldr	r2, [pc, #140]	; (8102b34 <HAL_DMA_Abort+0x464>)
 8102aa8:	4293      	cmp	r3, r2
 8102aaa:	d022      	beq.n	8102af2 <HAL_DMA_Abort+0x422>
 8102aac:	687b      	ldr	r3, [r7, #4]
 8102aae:	681b      	ldr	r3, [r3, #0]
 8102ab0:	4a21      	ldr	r2, [pc, #132]	; (8102b38 <HAL_DMA_Abort+0x468>)
 8102ab2:	4293      	cmp	r3, r2
 8102ab4:	d01d      	beq.n	8102af2 <HAL_DMA_Abort+0x422>
 8102ab6:	687b      	ldr	r3, [r7, #4]
 8102ab8:	681b      	ldr	r3, [r3, #0]
 8102aba:	4a20      	ldr	r2, [pc, #128]	; (8102b3c <HAL_DMA_Abort+0x46c>)
 8102abc:	4293      	cmp	r3, r2
 8102abe:	d018      	beq.n	8102af2 <HAL_DMA_Abort+0x422>
 8102ac0:	687b      	ldr	r3, [r7, #4]
 8102ac2:	681b      	ldr	r3, [r3, #0]
 8102ac4:	4a1e      	ldr	r2, [pc, #120]	; (8102b40 <HAL_DMA_Abort+0x470>)
 8102ac6:	4293      	cmp	r3, r2
 8102ac8:	d013      	beq.n	8102af2 <HAL_DMA_Abort+0x422>
 8102aca:	687b      	ldr	r3, [r7, #4]
 8102acc:	681b      	ldr	r3, [r3, #0]
 8102ace:	4a1d      	ldr	r2, [pc, #116]	; (8102b44 <HAL_DMA_Abort+0x474>)
 8102ad0:	4293      	cmp	r3, r2
 8102ad2:	d00e      	beq.n	8102af2 <HAL_DMA_Abort+0x422>
 8102ad4:	687b      	ldr	r3, [r7, #4]
 8102ad6:	681b      	ldr	r3, [r3, #0]
 8102ad8:	4a1b      	ldr	r2, [pc, #108]	; (8102b48 <HAL_DMA_Abort+0x478>)
 8102ada:	4293      	cmp	r3, r2
 8102adc:	d009      	beq.n	8102af2 <HAL_DMA_Abort+0x422>
 8102ade:	687b      	ldr	r3, [r7, #4]
 8102ae0:	681b      	ldr	r3, [r3, #0]
 8102ae2:	4a1a      	ldr	r2, [pc, #104]	; (8102b4c <HAL_DMA_Abort+0x47c>)
 8102ae4:	4293      	cmp	r3, r2
 8102ae6:	d004      	beq.n	8102af2 <HAL_DMA_Abort+0x422>
 8102ae8:	687b      	ldr	r3, [r7, #4]
 8102aea:	681b      	ldr	r3, [r3, #0]
 8102aec:	4a18      	ldr	r2, [pc, #96]	; (8102b50 <HAL_DMA_Abort+0x480>)
 8102aee:	4293      	cmp	r3, r2
 8102af0:	d101      	bne.n	8102af6 <HAL_DMA_Abort+0x426>
 8102af2:	2301      	movs	r3, #1
 8102af4:	e000      	b.n	8102af8 <HAL_DMA_Abort+0x428>
 8102af6:	2300      	movs	r3, #0
 8102af8:	2b00      	cmp	r3, #0
 8102afa:	d02b      	beq.n	8102b54 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8102afc:	687b      	ldr	r3, [r7, #4]
 8102afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102b00:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8102b02:	687b      	ldr	r3, [r7, #4]
 8102b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102b06:	f003 031f 	and.w	r3, r3, #31
 8102b0a:	223f      	movs	r2, #63	; 0x3f
 8102b0c:	409a      	lsls	r2, r3
 8102b0e:	68bb      	ldr	r3, [r7, #8]
 8102b10:	609a      	str	r2, [r3, #8]
 8102b12:	e02a      	b.n	8102b6a <HAL_DMA_Abort+0x49a>
 8102b14:	40020010 	.word	0x40020010
 8102b18:	40020028 	.word	0x40020028
 8102b1c:	40020040 	.word	0x40020040
 8102b20:	40020058 	.word	0x40020058
 8102b24:	40020070 	.word	0x40020070
 8102b28:	40020088 	.word	0x40020088
 8102b2c:	400200a0 	.word	0x400200a0
 8102b30:	400200b8 	.word	0x400200b8
 8102b34:	40020410 	.word	0x40020410
 8102b38:	40020428 	.word	0x40020428
 8102b3c:	40020440 	.word	0x40020440
 8102b40:	40020458 	.word	0x40020458
 8102b44:	40020470 	.word	0x40020470
 8102b48:	40020488 	.word	0x40020488
 8102b4c:	400204a0 	.word	0x400204a0
 8102b50:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8102b54:	687b      	ldr	r3, [r7, #4]
 8102b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102b58:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8102b5a:	687b      	ldr	r3, [r7, #4]
 8102b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102b5e:	f003 031f 	and.w	r3, r3, #31
 8102b62:	2201      	movs	r2, #1
 8102b64:	409a      	lsls	r2, r3
 8102b66:	68fb      	ldr	r3, [r7, #12]
 8102b68:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8102b6a:	687b      	ldr	r3, [r7, #4]
 8102b6c:	681b      	ldr	r3, [r3, #0]
 8102b6e:	4a4f      	ldr	r2, [pc, #316]	; (8102cac <HAL_DMA_Abort+0x5dc>)
 8102b70:	4293      	cmp	r3, r2
 8102b72:	d072      	beq.n	8102c5a <HAL_DMA_Abort+0x58a>
 8102b74:	687b      	ldr	r3, [r7, #4]
 8102b76:	681b      	ldr	r3, [r3, #0]
 8102b78:	4a4d      	ldr	r2, [pc, #308]	; (8102cb0 <HAL_DMA_Abort+0x5e0>)
 8102b7a:	4293      	cmp	r3, r2
 8102b7c:	d06d      	beq.n	8102c5a <HAL_DMA_Abort+0x58a>
 8102b7e:	687b      	ldr	r3, [r7, #4]
 8102b80:	681b      	ldr	r3, [r3, #0]
 8102b82:	4a4c      	ldr	r2, [pc, #304]	; (8102cb4 <HAL_DMA_Abort+0x5e4>)
 8102b84:	4293      	cmp	r3, r2
 8102b86:	d068      	beq.n	8102c5a <HAL_DMA_Abort+0x58a>
 8102b88:	687b      	ldr	r3, [r7, #4]
 8102b8a:	681b      	ldr	r3, [r3, #0]
 8102b8c:	4a4a      	ldr	r2, [pc, #296]	; (8102cb8 <HAL_DMA_Abort+0x5e8>)
 8102b8e:	4293      	cmp	r3, r2
 8102b90:	d063      	beq.n	8102c5a <HAL_DMA_Abort+0x58a>
 8102b92:	687b      	ldr	r3, [r7, #4]
 8102b94:	681b      	ldr	r3, [r3, #0]
 8102b96:	4a49      	ldr	r2, [pc, #292]	; (8102cbc <HAL_DMA_Abort+0x5ec>)
 8102b98:	4293      	cmp	r3, r2
 8102b9a:	d05e      	beq.n	8102c5a <HAL_DMA_Abort+0x58a>
 8102b9c:	687b      	ldr	r3, [r7, #4]
 8102b9e:	681b      	ldr	r3, [r3, #0]
 8102ba0:	4a47      	ldr	r2, [pc, #284]	; (8102cc0 <HAL_DMA_Abort+0x5f0>)
 8102ba2:	4293      	cmp	r3, r2
 8102ba4:	d059      	beq.n	8102c5a <HAL_DMA_Abort+0x58a>
 8102ba6:	687b      	ldr	r3, [r7, #4]
 8102ba8:	681b      	ldr	r3, [r3, #0]
 8102baa:	4a46      	ldr	r2, [pc, #280]	; (8102cc4 <HAL_DMA_Abort+0x5f4>)
 8102bac:	4293      	cmp	r3, r2
 8102bae:	d054      	beq.n	8102c5a <HAL_DMA_Abort+0x58a>
 8102bb0:	687b      	ldr	r3, [r7, #4]
 8102bb2:	681b      	ldr	r3, [r3, #0]
 8102bb4:	4a44      	ldr	r2, [pc, #272]	; (8102cc8 <HAL_DMA_Abort+0x5f8>)
 8102bb6:	4293      	cmp	r3, r2
 8102bb8:	d04f      	beq.n	8102c5a <HAL_DMA_Abort+0x58a>
 8102bba:	687b      	ldr	r3, [r7, #4]
 8102bbc:	681b      	ldr	r3, [r3, #0]
 8102bbe:	4a43      	ldr	r2, [pc, #268]	; (8102ccc <HAL_DMA_Abort+0x5fc>)
 8102bc0:	4293      	cmp	r3, r2
 8102bc2:	d04a      	beq.n	8102c5a <HAL_DMA_Abort+0x58a>
 8102bc4:	687b      	ldr	r3, [r7, #4]
 8102bc6:	681b      	ldr	r3, [r3, #0]
 8102bc8:	4a41      	ldr	r2, [pc, #260]	; (8102cd0 <HAL_DMA_Abort+0x600>)
 8102bca:	4293      	cmp	r3, r2
 8102bcc:	d045      	beq.n	8102c5a <HAL_DMA_Abort+0x58a>
 8102bce:	687b      	ldr	r3, [r7, #4]
 8102bd0:	681b      	ldr	r3, [r3, #0]
 8102bd2:	4a40      	ldr	r2, [pc, #256]	; (8102cd4 <HAL_DMA_Abort+0x604>)
 8102bd4:	4293      	cmp	r3, r2
 8102bd6:	d040      	beq.n	8102c5a <HAL_DMA_Abort+0x58a>
 8102bd8:	687b      	ldr	r3, [r7, #4]
 8102bda:	681b      	ldr	r3, [r3, #0]
 8102bdc:	4a3e      	ldr	r2, [pc, #248]	; (8102cd8 <HAL_DMA_Abort+0x608>)
 8102bde:	4293      	cmp	r3, r2
 8102be0:	d03b      	beq.n	8102c5a <HAL_DMA_Abort+0x58a>
 8102be2:	687b      	ldr	r3, [r7, #4]
 8102be4:	681b      	ldr	r3, [r3, #0]
 8102be6:	4a3d      	ldr	r2, [pc, #244]	; (8102cdc <HAL_DMA_Abort+0x60c>)
 8102be8:	4293      	cmp	r3, r2
 8102bea:	d036      	beq.n	8102c5a <HAL_DMA_Abort+0x58a>
 8102bec:	687b      	ldr	r3, [r7, #4]
 8102bee:	681b      	ldr	r3, [r3, #0]
 8102bf0:	4a3b      	ldr	r2, [pc, #236]	; (8102ce0 <HAL_DMA_Abort+0x610>)
 8102bf2:	4293      	cmp	r3, r2
 8102bf4:	d031      	beq.n	8102c5a <HAL_DMA_Abort+0x58a>
 8102bf6:	687b      	ldr	r3, [r7, #4]
 8102bf8:	681b      	ldr	r3, [r3, #0]
 8102bfa:	4a3a      	ldr	r2, [pc, #232]	; (8102ce4 <HAL_DMA_Abort+0x614>)
 8102bfc:	4293      	cmp	r3, r2
 8102bfe:	d02c      	beq.n	8102c5a <HAL_DMA_Abort+0x58a>
 8102c00:	687b      	ldr	r3, [r7, #4]
 8102c02:	681b      	ldr	r3, [r3, #0]
 8102c04:	4a38      	ldr	r2, [pc, #224]	; (8102ce8 <HAL_DMA_Abort+0x618>)
 8102c06:	4293      	cmp	r3, r2
 8102c08:	d027      	beq.n	8102c5a <HAL_DMA_Abort+0x58a>
 8102c0a:	687b      	ldr	r3, [r7, #4]
 8102c0c:	681b      	ldr	r3, [r3, #0]
 8102c0e:	4a37      	ldr	r2, [pc, #220]	; (8102cec <HAL_DMA_Abort+0x61c>)
 8102c10:	4293      	cmp	r3, r2
 8102c12:	d022      	beq.n	8102c5a <HAL_DMA_Abort+0x58a>
 8102c14:	687b      	ldr	r3, [r7, #4]
 8102c16:	681b      	ldr	r3, [r3, #0]
 8102c18:	4a35      	ldr	r2, [pc, #212]	; (8102cf0 <HAL_DMA_Abort+0x620>)
 8102c1a:	4293      	cmp	r3, r2
 8102c1c:	d01d      	beq.n	8102c5a <HAL_DMA_Abort+0x58a>
 8102c1e:	687b      	ldr	r3, [r7, #4]
 8102c20:	681b      	ldr	r3, [r3, #0]
 8102c22:	4a34      	ldr	r2, [pc, #208]	; (8102cf4 <HAL_DMA_Abort+0x624>)
 8102c24:	4293      	cmp	r3, r2
 8102c26:	d018      	beq.n	8102c5a <HAL_DMA_Abort+0x58a>
 8102c28:	687b      	ldr	r3, [r7, #4]
 8102c2a:	681b      	ldr	r3, [r3, #0]
 8102c2c:	4a32      	ldr	r2, [pc, #200]	; (8102cf8 <HAL_DMA_Abort+0x628>)
 8102c2e:	4293      	cmp	r3, r2
 8102c30:	d013      	beq.n	8102c5a <HAL_DMA_Abort+0x58a>
 8102c32:	687b      	ldr	r3, [r7, #4]
 8102c34:	681b      	ldr	r3, [r3, #0]
 8102c36:	4a31      	ldr	r2, [pc, #196]	; (8102cfc <HAL_DMA_Abort+0x62c>)
 8102c38:	4293      	cmp	r3, r2
 8102c3a:	d00e      	beq.n	8102c5a <HAL_DMA_Abort+0x58a>
 8102c3c:	687b      	ldr	r3, [r7, #4]
 8102c3e:	681b      	ldr	r3, [r3, #0]
 8102c40:	4a2f      	ldr	r2, [pc, #188]	; (8102d00 <HAL_DMA_Abort+0x630>)
 8102c42:	4293      	cmp	r3, r2
 8102c44:	d009      	beq.n	8102c5a <HAL_DMA_Abort+0x58a>
 8102c46:	687b      	ldr	r3, [r7, #4]
 8102c48:	681b      	ldr	r3, [r3, #0]
 8102c4a:	4a2e      	ldr	r2, [pc, #184]	; (8102d04 <HAL_DMA_Abort+0x634>)
 8102c4c:	4293      	cmp	r3, r2
 8102c4e:	d004      	beq.n	8102c5a <HAL_DMA_Abort+0x58a>
 8102c50:	687b      	ldr	r3, [r7, #4]
 8102c52:	681b      	ldr	r3, [r3, #0]
 8102c54:	4a2c      	ldr	r2, [pc, #176]	; (8102d08 <HAL_DMA_Abort+0x638>)
 8102c56:	4293      	cmp	r3, r2
 8102c58:	d101      	bne.n	8102c5e <HAL_DMA_Abort+0x58e>
 8102c5a:	2301      	movs	r3, #1
 8102c5c:	e000      	b.n	8102c60 <HAL_DMA_Abort+0x590>
 8102c5e:	2300      	movs	r3, #0
 8102c60:	2b00      	cmp	r3, #0
 8102c62:	d015      	beq.n	8102c90 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8102c64:	687b      	ldr	r3, [r7, #4]
 8102c66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102c68:	687a      	ldr	r2, [r7, #4]
 8102c6a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8102c6c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8102c6e:	687b      	ldr	r3, [r7, #4]
 8102c70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102c72:	2b00      	cmp	r3, #0
 8102c74:	d00c      	beq.n	8102c90 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8102c76:	687b      	ldr	r3, [r7, #4]
 8102c78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102c7a:	681a      	ldr	r2, [r3, #0]
 8102c7c:	687b      	ldr	r3, [r7, #4]
 8102c7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102c80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8102c84:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8102c86:	687b      	ldr	r3, [r7, #4]
 8102c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102c8a:	687a      	ldr	r2, [r7, #4]
 8102c8c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8102c8e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8102c90:	687b      	ldr	r3, [r7, #4]
 8102c92:	2201      	movs	r2, #1
 8102c94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8102c98:	687b      	ldr	r3, [r7, #4]
 8102c9a:	2200      	movs	r2, #0
 8102c9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8102ca0:	2300      	movs	r3, #0
}
 8102ca2:	4618      	mov	r0, r3
 8102ca4:	3718      	adds	r7, #24
 8102ca6:	46bd      	mov	sp, r7
 8102ca8:	bd80      	pop	{r7, pc}
 8102caa:	bf00      	nop
 8102cac:	40020010 	.word	0x40020010
 8102cb0:	40020028 	.word	0x40020028
 8102cb4:	40020040 	.word	0x40020040
 8102cb8:	40020058 	.word	0x40020058
 8102cbc:	40020070 	.word	0x40020070
 8102cc0:	40020088 	.word	0x40020088
 8102cc4:	400200a0 	.word	0x400200a0
 8102cc8:	400200b8 	.word	0x400200b8
 8102ccc:	40020410 	.word	0x40020410
 8102cd0:	40020428 	.word	0x40020428
 8102cd4:	40020440 	.word	0x40020440
 8102cd8:	40020458 	.word	0x40020458
 8102cdc:	40020470 	.word	0x40020470
 8102ce0:	40020488 	.word	0x40020488
 8102ce4:	400204a0 	.word	0x400204a0
 8102ce8:	400204b8 	.word	0x400204b8
 8102cec:	58025408 	.word	0x58025408
 8102cf0:	5802541c 	.word	0x5802541c
 8102cf4:	58025430 	.word	0x58025430
 8102cf8:	58025444 	.word	0x58025444
 8102cfc:	58025458 	.word	0x58025458
 8102d00:	5802546c 	.word	0x5802546c
 8102d04:	58025480 	.word	0x58025480
 8102d08:	58025494 	.word	0x58025494

08102d0c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8102d0c:	b580      	push	{r7, lr}
 8102d0e:	b084      	sub	sp, #16
 8102d10:	af00      	add	r7, sp, #0
 8102d12:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8102d14:	687b      	ldr	r3, [r7, #4]
 8102d16:	2b00      	cmp	r3, #0
 8102d18:	d101      	bne.n	8102d1e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8102d1a:	2301      	movs	r3, #1
 8102d1c:	e237      	b.n	810318e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8102d1e:	687b      	ldr	r3, [r7, #4]
 8102d20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8102d24:	b2db      	uxtb	r3, r3
 8102d26:	2b02      	cmp	r3, #2
 8102d28:	d004      	beq.n	8102d34 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8102d2a:	687b      	ldr	r3, [r7, #4]
 8102d2c:	2280      	movs	r2, #128	; 0x80
 8102d2e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8102d30:	2301      	movs	r3, #1
 8102d32:	e22c      	b.n	810318e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8102d34:	687b      	ldr	r3, [r7, #4]
 8102d36:	681b      	ldr	r3, [r3, #0]
 8102d38:	4a5c      	ldr	r2, [pc, #368]	; (8102eac <HAL_DMA_Abort_IT+0x1a0>)
 8102d3a:	4293      	cmp	r3, r2
 8102d3c:	d04a      	beq.n	8102dd4 <HAL_DMA_Abort_IT+0xc8>
 8102d3e:	687b      	ldr	r3, [r7, #4]
 8102d40:	681b      	ldr	r3, [r3, #0]
 8102d42:	4a5b      	ldr	r2, [pc, #364]	; (8102eb0 <HAL_DMA_Abort_IT+0x1a4>)
 8102d44:	4293      	cmp	r3, r2
 8102d46:	d045      	beq.n	8102dd4 <HAL_DMA_Abort_IT+0xc8>
 8102d48:	687b      	ldr	r3, [r7, #4]
 8102d4a:	681b      	ldr	r3, [r3, #0]
 8102d4c:	4a59      	ldr	r2, [pc, #356]	; (8102eb4 <HAL_DMA_Abort_IT+0x1a8>)
 8102d4e:	4293      	cmp	r3, r2
 8102d50:	d040      	beq.n	8102dd4 <HAL_DMA_Abort_IT+0xc8>
 8102d52:	687b      	ldr	r3, [r7, #4]
 8102d54:	681b      	ldr	r3, [r3, #0]
 8102d56:	4a58      	ldr	r2, [pc, #352]	; (8102eb8 <HAL_DMA_Abort_IT+0x1ac>)
 8102d58:	4293      	cmp	r3, r2
 8102d5a:	d03b      	beq.n	8102dd4 <HAL_DMA_Abort_IT+0xc8>
 8102d5c:	687b      	ldr	r3, [r7, #4]
 8102d5e:	681b      	ldr	r3, [r3, #0]
 8102d60:	4a56      	ldr	r2, [pc, #344]	; (8102ebc <HAL_DMA_Abort_IT+0x1b0>)
 8102d62:	4293      	cmp	r3, r2
 8102d64:	d036      	beq.n	8102dd4 <HAL_DMA_Abort_IT+0xc8>
 8102d66:	687b      	ldr	r3, [r7, #4]
 8102d68:	681b      	ldr	r3, [r3, #0]
 8102d6a:	4a55      	ldr	r2, [pc, #340]	; (8102ec0 <HAL_DMA_Abort_IT+0x1b4>)
 8102d6c:	4293      	cmp	r3, r2
 8102d6e:	d031      	beq.n	8102dd4 <HAL_DMA_Abort_IT+0xc8>
 8102d70:	687b      	ldr	r3, [r7, #4]
 8102d72:	681b      	ldr	r3, [r3, #0]
 8102d74:	4a53      	ldr	r2, [pc, #332]	; (8102ec4 <HAL_DMA_Abort_IT+0x1b8>)
 8102d76:	4293      	cmp	r3, r2
 8102d78:	d02c      	beq.n	8102dd4 <HAL_DMA_Abort_IT+0xc8>
 8102d7a:	687b      	ldr	r3, [r7, #4]
 8102d7c:	681b      	ldr	r3, [r3, #0]
 8102d7e:	4a52      	ldr	r2, [pc, #328]	; (8102ec8 <HAL_DMA_Abort_IT+0x1bc>)
 8102d80:	4293      	cmp	r3, r2
 8102d82:	d027      	beq.n	8102dd4 <HAL_DMA_Abort_IT+0xc8>
 8102d84:	687b      	ldr	r3, [r7, #4]
 8102d86:	681b      	ldr	r3, [r3, #0]
 8102d88:	4a50      	ldr	r2, [pc, #320]	; (8102ecc <HAL_DMA_Abort_IT+0x1c0>)
 8102d8a:	4293      	cmp	r3, r2
 8102d8c:	d022      	beq.n	8102dd4 <HAL_DMA_Abort_IT+0xc8>
 8102d8e:	687b      	ldr	r3, [r7, #4]
 8102d90:	681b      	ldr	r3, [r3, #0]
 8102d92:	4a4f      	ldr	r2, [pc, #316]	; (8102ed0 <HAL_DMA_Abort_IT+0x1c4>)
 8102d94:	4293      	cmp	r3, r2
 8102d96:	d01d      	beq.n	8102dd4 <HAL_DMA_Abort_IT+0xc8>
 8102d98:	687b      	ldr	r3, [r7, #4]
 8102d9a:	681b      	ldr	r3, [r3, #0]
 8102d9c:	4a4d      	ldr	r2, [pc, #308]	; (8102ed4 <HAL_DMA_Abort_IT+0x1c8>)
 8102d9e:	4293      	cmp	r3, r2
 8102da0:	d018      	beq.n	8102dd4 <HAL_DMA_Abort_IT+0xc8>
 8102da2:	687b      	ldr	r3, [r7, #4]
 8102da4:	681b      	ldr	r3, [r3, #0]
 8102da6:	4a4c      	ldr	r2, [pc, #304]	; (8102ed8 <HAL_DMA_Abort_IT+0x1cc>)
 8102da8:	4293      	cmp	r3, r2
 8102daa:	d013      	beq.n	8102dd4 <HAL_DMA_Abort_IT+0xc8>
 8102dac:	687b      	ldr	r3, [r7, #4]
 8102dae:	681b      	ldr	r3, [r3, #0]
 8102db0:	4a4a      	ldr	r2, [pc, #296]	; (8102edc <HAL_DMA_Abort_IT+0x1d0>)
 8102db2:	4293      	cmp	r3, r2
 8102db4:	d00e      	beq.n	8102dd4 <HAL_DMA_Abort_IT+0xc8>
 8102db6:	687b      	ldr	r3, [r7, #4]
 8102db8:	681b      	ldr	r3, [r3, #0]
 8102dba:	4a49      	ldr	r2, [pc, #292]	; (8102ee0 <HAL_DMA_Abort_IT+0x1d4>)
 8102dbc:	4293      	cmp	r3, r2
 8102dbe:	d009      	beq.n	8102dd4 <HAL_DMA_Abort_IT+0xc8>
 8102dc0:	687b      	ldr	r3, [r7, #4]
 8102dc2:	681b      	ldr	r3, [r3, #0]
 8102dc4:	4a47      	ldr	r2, [pc, #284]	; (8102ee4 <HAL_DMA_Abort_IT+0x1d8>)
 8102dc6:	4293      	cmp	r3, r2
 8102dc8:	d004      	beq.n	8102dd4 <HAL_DMA_Abort_IT+0xc8>
 8102dca:	687b      	ldr	r3, [r7, #4]
 8102dcc:	681b      	ldr	r3, [r3, #0]
 8102dce:	4a46      	ldr	r2, [pc, #280]	; (8102ee8 <HAL_DMA_Abort_IT+0x1dc>)
 8102dd0:	4293      	cmp	r3, r2
 8102dd2:	d101      	bne.n	8102dd8 <HAL_DMA_Abort_IT+0xcc>
 8102dd4:	2301      	movs	r3, #1
 8102dd6:	e000      	b.n	8102dda <HAL_DMA_Abort_IT+0xce>
 8102dd8:	2300      	movs	r3, #0
 8102dda:	2b00      	cmp	r3, #0
 8102ddc:	f000 8086 	beq.w	8102eec <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8102de0:	687b      	ldr	r3, [r7, #4]
 8102de2:	2204      	movs	r2, #4
 8102de4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8102de8:	687b      	ldr	r3, [r7, #4]
 8102dea:	681b      	ldr	r3, [r3, #0]
 8102dec:	4a2f      	ldr	r2, [pc, #188]	; (8102eac <HAL_DMA_Abort_IT+0x1a0>)
 8102dee:	4293      	cmp	r3, r2
 8102df0:	d04a      	beq.n	8102e88 <HAL_DMA_Abort_IT+0x17c>
 8102df2:	687b      	ldr	r3, [r7, #4]
 8102df4:	681b      	ldr	r3, [r3, #0]
 8102df6:	4a2e      	ldr	r2, [pc, #184]	; (8102eb0 <HAL_DMA_Abort_IT+0x1a4>)
 8102df8:	4293      	cmp	r3, r2
 8102dfa:	d045      	beq.n	8102e88 <HAL_DMA_Abort_IT+0x17c>
 8102dfc:	687b      	ldr	r3, [r7, #4]
 8102dfe:	681b      	ldr	r3, [r3, #0]
 8102e00:	4a2c      	ldr	r2, [pc, #176]	; (8102eb4 <HAL_DMA_Abort_IT+0x1a8>)
 8102e02:	4293      	cmp	r3, r2
 8102e04:	d040      	beq.n	8102e88 <HAL_DMA_Abort_IT+0x17c>
 8102e06:	687b      	ldr	r3, [r7, #4]
 8102e08:	681b      	ldr	r3, [r3, #0]
 8102e0a:	4a2b      	ldr	r2, [pc, #172]	; (8102eb8 <HAL_DMA_Abort_IT+0x1ac>)
 8102e0c:	4293      	cmp	r3, r2
 8102e0e:	d03b      	beq.n	8102e88 <HAL_DMA_Abort_IT+0x17c>
 8102e10:	687b      	ldr	r3, [r7, #4]
 8102e12:	681b      	ldr	r3, [r3, #0]
 8102e14:	4a29      	ldr	r2, [pc, #164]	; (8102ebc <HAL_DMA_Abort_IT+0x1b0>)
 8102e16:	4293      	cmp	r3, r2
 8102e18:	d036      	beq.n	8102e88 <HAL_DMA_Abort_IT+0x17c>
 8102e1a:	687b      	ldr	r3, [r7, #4]
 8102e1c:	681b      	ldr	r3, [r3, #0]
 8102e1e:	4a28      	ldr	r2, [pc, #160]	; (8102ec0 <HAL_DMA_Abort_IT+0x1b4>)
 8102e20:	4293      	cmp	r3, r2
 8102e22:	d031      	beq.n	8102e88 <HAL_DMA_Abort_IT+0x17c>
 8102e24:	687b      	ldr	r3, [r7, #4]
 8102e26:	681b      	ldr	r3, [r3, #0]
 8102e28:	4a26      	ldr	r2, [pc, #152]	; (8102ec4 <HAL_DMA_Abort_IT+0x1b8>)
 8102e2a:	4293      	cmp	r3, r2
 8102e2c:	d02c      	beq.n	8102e88 <HAL_DMA_Abort_IT+0x17c>
 8102e2e:	687b      	ldr	r3, [r7, #4]
 8102e30:	681b      	ldr	r3, [r3, #0]
 8102e32:	4a25      	ldr	r2, [pc, #148]	; (8102ec8 <HAL_DMA_Abort_IT+0x1bc>)
 8102e34:	4293      	cmp	r3, r2
 8102e36:	d027      	beq.n	8102e88 <HAL_DMA_Abort_IT+0x17c>
 8102e38:	687b      	ldr	r3, [r7, #4]
 8102e3a:	681b      	ldr	r3, [r3, #0]
 8102e3c:	4a23      	ldr	r2, [pc, #140]	; (8102ecc <HAL_DMA_Abort_IT+0x1c0>)
 8102e3e:	4293      	cmp	r3, r2
 8102e40:	d022      	beq.n	8102e88 <HAL_DMA_Abort_IT+0x17c>
 8102e42:	687b      	ldr	r3, [r7, #4]
 8102e44:	681b      	ldr	r3, [r3, #0]
 8102e46:	4a22      	ldr	r2, [pc, #136]	; (8102ed0 <HAL_DMA_Abort_IT+0x1c4>)
 8102e48:	4293      	cmp	r3, r2
 8102e4a:	d01d      	beq.n	8102e88 <HAL_DMA_Abort_IT+0x17c>
 8102e4c:	687b      	ldr	r3, [r7, #4]
 8102e4e:	681b      	ldr	r3, [r3, #0]
 8102e50:	4a20      	ldr	r2, [pc, #128]	; (8102ed4 <HAL_DMA_Abort_IT+0x1c8>)
 8102e52:	4293      	cmp	r3, r2
 8102e54:	d018      	beq.n	8102e88 <HAL_DMA_Abort_IT+0x17c>
 8102e56:	687b      	ldr	r3, [r7, #4]
 8102e58:	681b      	ldr	r3, [r3, #0]
 8102e5a:	4a1f      	ldr	r2, [pc, #124]	; (8102ed8 <HAL_DMA_Abort_IT+0x1cc>)
 8102e5c:	4293      	cmp	r3, r2
 8102e5e:	d013      	beq.n	8102e88 <HAL_DMA_Abort_IT+0x17c>
 8102e60:	687b      	ldr	r3, [r7, #4]
 8102e62:	681b      	ldr	r3, [r3, #0]
 8102e64:	4a1d      	ldr	r2, [pc, #116]	; (8102edc <HAL_DMA_Abort_IT+0x1d0>)
 8102e66:	4293      	cmp	r3, r2
 8102e68:	d00e      	beq.n	8102e88 <HAL_DMA_Abort_IT+0x17c>
 8102e6a:	687b      	ldr	r3, [r7, #4]
 8102e6c:	681b      	ldr	r3, [r3, #0]
 8102e6e:	4a1c      	ldr	r2, [pc, #112]	; (8102ee0 <HAL_DMA_Abort_IT+0x1d4>)
 8102e70:	4293      	cmp	r3, r2
 8102e72:	d009      	beq.n	8102e88 <HAL_DMA_Abort_IT+0x17c>
 8102e74:	687b      	ldr	r3, [r7, #4]
 8102e76:	681b      	ldr	r3, [r3, #0]
 8102e78:	4a1a      	ldr	r2, [pc, #104]	; (8102ee4 <HAL_DMA_Abort_IT+0x1d8>)
 8102e7a:	4293      	cmp	r3, r2
 8102e7c:	d004      	beq.n	8102e88 <HAL_DMA_Abort_IT+0x17c>
 8102e7e:	687b      	ldr	r3, [r7, #4]
 8102e80:	681b      	ldr	r3, [r3, #0]
 8102e82:	4a19      	ldr	r2, [pc, #100]	; (8102ee8 <HAL_DMA_Abort_IT+0x1dc>)
 8102e84:	4293      	cmp	r3, r2
 8102e86:	d108      	bne.n	8102e9a <HAL_DMA_Abort_IT+0x18e>
 8102e88:	687b      	ldr	r3, [r7, #4]
 8102e8a:	681b      	ldr	r3, [r3, #0]
 8102e8c:	681a      	ldr	r2, [r3, #0]
 8102e8e:	687b      	ldr	r3, [r7, #4]
 8102e90:	681b      	ldr	r3, [r3, #0]
 8102e92:	f022 0201 	bic.w	r2, r2, #1
 8102e96:	601a      	str	r2, [r3, #0]
 8102e98:	e178      	b.n	810318c <HAL_DMA_Abort_IT+0x480>
 8102e9a:	687b      	ldr	r3, [r7, #4]
 8102e9c:	681b      	ldr	r3, [r3, #0]
 8102e9e:	681a      	ldr	r2, [r3, #0]
 8102ea0:	687b      	ldr	r3, [r7, #4]
 8102ea2:	681b      	ldr	r3, [r3, #0]
 8102ea4:	f022 0201 	bic.w	r2, r2, #1
 8102ea8:	601a      	str	r2, [r3, #0]
 8102eaa:	e16f      	b.n	810318c <HAL_DMA_Abort_IT+0x480>
 8102eac:	40020010 	.word	0x40020010
 8102eb0:	40020028 	.word	0x40020028
 8102eb4:	40020040 	.word	0x40020040
 8102eb8:	40020058 	.word	0x40020058
 8102ebc:	40020070 	.word	0x40020070
 8102ec0:	40020088 	.word	0x40020088
 8102ec4:	400200a0 	.word	0x400200a0
 8102ec8:	400200b8 	.word	0x400200b8
 8102ecc:	40020410 	.word	0x40020410
 8102ed0:	40020428 	.word	0x40020428
 8102ed4:	40020440 	.word	0x40020440
 8102ed8:	40020458 	.word	0x40020458
 8102edc:	40020470 	.word	0x40020470
 8102ee0:	40020488 	.word	0x40020488
 8102ee4:	400204a0 	.word	0x400204a0
 8102ee8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8102eec:	687b      	ldr	r3, [r7, #4]
 8102eee:	681b      	ldr	r3, [r3, #0]
 8102ef0:	681a      	ldr	r2, [r3, #0]
 8102ef2:	687b      	ldr	r3, [r7, #4]
 8102ef4:	681b      	ldr	r3, [r3, #0]
 8102ef6:	f022 020e 	bic.w	r2, r2, #14
 8102efa:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8102efc:	687b      	ldr	r3, [r7, #4]
 8102efe:	681b      	ldr	r3, [r3, #0]
 8102f00:	4a6c      	ldr	r2, [pc, #432]	; (81030b4 <HAL_DMA_Abort_IT+0x3a8>)
 8102f02:	4293      	cmp	r3, r2
 8102f04:	d04a      	beq.n	8102f9c <HAL_DMA_Abort_IT+0x290>
 8102f06:	687b      	ldr	r3, [r7, #4]
 8102f08:	681b      	ldr	r3, [r3, #0]
 8102f0a:	4a6b      	ldr	r2, [pc, #428]	; (81030b8 <HAL_DMA_Abort_IT+0x3ac>)
 8102f0c:	4293      	cmp	r3, r2
 8102f0e:	d045      	beq.n	8102f9c <HAL_DMA_Abort_IT+0x290>
 8102f10:	687b      	ldr	r3, [r7, #4]
 8102f12:	681b      	ldr	r3, [r3, #0]
 8102f14:	4a69      	ldr	r2, [pc, #420]	; (81030bc <HAL_DMA_Abort_IT+0x3b0>)
 8102f16:	4293      	cmp	r3, r2
 8102f18:	d040      	beq.n	8102f9c <HAL_DMA_Abort_IT+0x290>
 8102f1a:	687b      	ldr	r3, [r7, #4]
 8102f1c:	681b      	ldr	r3, [r3, #0]
 8102f1e:	4a68      	ldr	r2, [pc, #416]	; (81030c0 <HAL_DMA_Abort_IT+0x3b4>)
 8102f20:	4293      	cmp	r3, r2
 8102f22:	d03b      	beq.n	8102f9c <HAL_DMA_Abort_IT+0x290>
 8102f24:	687b      	ldr	r3, [r7, #4]
 8102f26:	681b      	ldr	r3, [r3, #0]
 8102f28:	4a66      	ldr	r2, [pc, #408]	; (81030c4 <HAL_DMA_Abort_IT+0x3b8>)
 8102f2a:	4293      	cmp	r3, r2
 8102f2c:	d036      	beq.n	8102f9c <HAL_DMA_Abort_IT+0x290>
 8102f2e:	687b      	ldr	r3, [r7, #4]
 8102f30:	681b      	ldr	r3, [r3, #0]
 8102f32:	4a65      	ldr	r2, [pc, #404]	; (81030c8 <HAL_DMA_Abort_IT+0x3bc>)
 8102f34:	4293      	cmp	r3, r2
 8102f36:	d031      	beq.n	8102f9c <HAL_DMA_Abort_IT+0x290>
 8102f38:	687b      	ldr	r3, [r7, #4]
 8102f3a:	681b      	ldr	r3, [r3, #0]
 8102f3c:	4a63      	ldr	r2, [pc, #396]	; (81030cc <HAL_DMA_Abort_IT+0x3c0>)
 8102f3e:	4293      	cmp	r3, r2
 8102f40:	d02c      	beq.n	8102f9c <HAL_DMA_Abort_IT+0x290>
 8102f42:	687b      	ldr	r3, [r7, #4]
 8102f44:	681b      	ldr	r3, [r3, #0]
 8102f46:	4a62      	ldr	r2, [pc, #392]	; (81030d0 <HAL_DMA_Abort_IT+0x3c4>)
 8102f48:	4293      	cmp	r3, r2
 8102f4a:	d027      	beq.n	8102f9c <HAL_DMA_Abort_IT+0x290>
 8102f4c:	687b      	ldr	r3, [r7, #4]
 8102f4e:	681b      	ldr	r3, [r3, #0]
 8102f50:	4a60      	ldr	r2, [pc, #384]	; (81030d4 <HAL_DMA_Abort_IT+0x3c8>)
 8102f52:	4293      	cmp	r3, r2
 8102f54:	d022      	beq.n	8102f9c <HAL_DMA_Abort_IT+0x290>
 8102f56:	687b      	ldr	r3, [r7, #4]
 8102f58:	681b      	ldr	r3, [r3, #0]
 8102f5a:	4a5f      	ldr	r2, [pc, #380]	; (81030d8 <HAL_DMA_Abort_IT+0x3cc>)
 8102f5c:	4293      	cmp	r3, r2
 8102f5e:	d01d      	beq.n	8102f9c <HAL_DMA_Abort_IT+0x290>
 8102f60:	687b      	ldr	r3, [r7, #4]
 8102f62:	681b      	ldr	r3, [r3, #0]
 8102f64:	4a5d      	ldr	r2, [pc, #372]	; (81030dc <HAL_DMA_Abort_IT+0x3d0>)
 8102f66:	4293      	cmp	r3, r2
 8102f68:	d018      	beq.n	8102f9c <HAL_DMA_Abort_IT+0x290>
 8102f6a:	687b      	ldr	r3, [r7, #4]
 8102f6c:	681b      	ldr	r3, [r3, #0]
 8102f6e:	4a5c      	ldr	r2, [pc, #368]	; (81030e0 <HAL_DMA_Abort_IT+0x3d4>)
 8102f70:	4293      	cmp	r3, r2
 8102f72:	d013      	beq.n	8102f9c <HAL_DMA_Abort_IT+0x290>
 8102f74:	687b      	ldr	r3, [r7, #4]
 8102f76:	681b      	ldr	r3, [r3, #0]
 8102f78:	4a5a      	ldr	r2, [pc, #360]	; (81030e4 <HAL_DMA_Abort_IT+0x3d8>)
 8102f7a:	4293      	cmp	r3, r2
 8102f7c:	d00e      	beq.n	8102f9c <HAL_DMA_Abort_IT+0x290>
 8102f7e:	687b      	ldr	r3, [r7, #4]
 8102f80:	681b      	ldr	r3, [r3, #0]
 8102f82:	4a59      	ldr	r2, [pc, #356]	; (81030e8 <HAL_DMA_Abort_IT+0x3dc>)
 8102f84:	4293      	cmp	r3, r2
 8102f86:	d009      	beq.n	8102f9c <HAL_DMA_Abort_IT+0x290>
 8102f88:	687b      	ldr	r3, [r7, #4]
 8102f8a:	681b      	ldr	r3, [r3, #0]
 8102f8c:	4a57      	ldr	r2, [pc, #348]	; (81030ec <HAL_DMA_Abort_IT+0x3e0>)
 8102f8e:	4293      	cmp	r3, r2
 8102f90:	d004      	beq.n	8102f9c <HAL_DMA_Abort_IT+0x290>
 8102f92:	687b      	ldr	r3, [r7, #4]
 8102f94:	681b      	ldr	r3, [r3, #0]
 8102f96:	4a56      	ldr	r2, [pc, #344]	; (81030f0 <HAL_DMA_Abort_IT+0x3e4>)
 8102f98:	4293      	cmp	r3, r2
 8102f9a:	d108      	bne.n	8102fae <HAL_DMA_Abort_IT+0x2a2>
 8102f9c:	687b      	ldr	r3, [r7, #4]
 8102f9e:	681b      	ldr	r3, [r3, #0]
 8102fa0:	681a      	ldr	r2, [r3, #0]
 8102fa2:	687b      	ldr	r3, [r7, #4]
 8102fa4:	681b      	ldr	r3, [r3, #0]
 8102fa6:	f022 0201 	bic.w	r2, r2, #1
 8102faa:	601a      	str	r2, [r3, #0]
 8102fac:	e007      	b.n	8102fbe <HAL_DMA_Abort_IT+0x2b2>
 8102fae:	687b      	ldr	r3, [r7, #4]
 8102fb0:	681b      	ldr	r3, [r3, #0]
 8102fb2:	681a      	ldr	r2, [r3, #0]
 8102fb4:	687b      	ldr	r3, [r7, #4]
 8102fb6:	681b      	ldr	r3, [r3, #0]
 8102fb8:	f022 0201 	bic.w	r2, r2, #1
 8102fbc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8102fbe:	687b      	ldr	r3, [r7, #4]
 8102fc0:	681b      	ldr	r3, [r3, #0]
 8102fc2:	4a3c      	ldr	r2, [pc, #240]	; (81030b4 <HAL_DMA_Abort_IT+0x3a8>)
 8102fc4:	4293      	cmp	r3, r2
 8102fc6:	d072      	beq.n	81030ae <HAL_DMA_Abort_IT+0x3a2>
 8102fc8:	687b      	ldr	r3, [r7, #4]
 8102fca:	681b      	ldr	r3, [r3, #0]
 8102fcc:	4a3a      	ldr	r2, [pc, #232]	; (81030b8 <HAL_DMA_Abort_IT+0x3ac>)
 8102fce:	4293      	cmp	r3, r2
 8102fd0:	d06d      	beq.n	81030ae <HAL_DMA_Abort_IT+0x3a2>
 8102fd2:	687b      	ldr	r3, [r7, #4]
 8102fd4:	681b      	ldr	r3, [r3, #0]
 8102fd6:	4a39      	ldr	r2, [pc, #228]	; (81030bc <HAL_DMA_Abort_IT+0x3b0>)
 8102fd8:	4293      	cmp	r3, r2
 8102fda:	d068      	beq.n	81030ae <HAL_DMA_Abort_IT+0x3a2>
 8102fdc:	687b      	ldr	r3, [r7, #4]
 8102fde:	681b      	ldr	r3, [r3, #0]
 8102fe0:	4a37      	ldr	r2, [pc, #220]	; (81030c0 <HAL_DMA_Abort_IT+0x3b4>)
 8102fe2:	4293      	cmp	r3, r2
 8102fe4:	d063      	beq.n	81030ae <HAL_DMA_Abort_IT+0x3a2>
 8102fe6:	687b      	ldr	r3, [r7, #4]
 8102fe8:	681b      	ldr	r3, [r3, #0]
 8102fea:	4a36      	ldr	r2, [pc, #216]	; (81030c4 <HAL_DMA_Abort_IT+0x3b8>)
 8102fec:	4293      	cmp	r3, r2
 8102fee:	d05e      	beq.n	81030ae <HAL_DMA_Abort_IT+0x3a2>
 8102ff0:	687b      	ldr	r3, [r7, #4]
 8102ff2:	681b      	ldr	r3, [r3, #0]
 8102ff4:	4a34      	ldr	r2, [pc, #208]	; (81030c8 <HAL_DMA_Abort_IT+0x3bc>)
 8102ff6:	4293      	cmp	r3, r2
 8102ff8:	d059      	beq.n	81030ae <HAL_DMA_Abort_IT+0x3a2>
 8102ffa:	687b      	ldr	r3, [r7, #4]
 8102ffc:	681b      	ldr	r3, [r3, #0]
 8102ffe:	4a33      	ldr	r2, [pc, #204]	; (81030cc <HAL_DMA_Abort_IT+0x3c0>)
 8103000:	4293      	cmp	r3, r2
 8103002:	d054      	beq.n	81030ae <HAL_DMA_Abort_IT+0x3a2>
 8103004:	687b      	ldr	r3, [r7, #4]
 8103006:	681b      	ldr	r3, [r3, #0]
 8103008:	4a31      	ldr	r2, [pc, #196]	; (81030d0 <HAL_DMA_Abort_IT+0x3c4>)
 810300a:	4293      	cmp	r3, r2
 810300c:	d04f      	beq.n	81030ae <HAL_DMA_Abort_IT+0x3a2>
 810300e:	687b      	ldr	r3, [r7, #4]
 8103010:	681b      	ldr	r3, [r3, #0]
 8103012:	4a30      	ldr	r2, [pc, #192]	; (81030d4 <HAL_DMA_Abort_IT+0x3c8>)
 8103014:	4293      	cmp	r3, r2
 8103016:	d04a      	beq.n	81030ae <HAL_DMA_Abort_IT+0x3a2>
 8103018:	687b      	ldr	r3, [r7, #4]
 810301a:	681b      	ldr	r3, [r3, #0]
 810301c:	4a2e      	ldr	r2, [pc, #184]	; (81030d8 <HAL_DMA_Abort_IT+0x3cc>)
 810301e:	4293      	cmp	r3, r2
 8103020:	d045      	beq.n	81030ae <HAL_DMA_Abort_IT+0x3a2>
 8103022:	687b      	ldr	r3, [r7, #4]
 8103024:	681b      	ldr	r3, [r3, #0]
 8103026:	4a2d      	ldr	r2, [pc, #180]	; (81030dc <HAL_DMA_Abort_IT+0x3d0>)
 8103028:	4293      	cmp	r3, r2
 810302a:	d040      	beq.n	81030ae <HAL_DMA_Abort_IT+0x3a2>
 810302c:	687b      	ldr	r3, [r7, #4]
 810302e:	681b      	ldr	r3, [r3, #0]
 8103030:	4a2b      	ldr	r2, [pc, #172]	; (81030e0 <HAL_DMA_Abort_IT+0x3d4>)
 8103032:	4293      	cmp	r3, r2
 8103034:	d03b      	beq.n	81030ae <HAL_DMA_Abort_IT+0x3a2>
 8103036:	687b      	ldr	r3, [r7, #4]
 8103038:	681b      	ldr	r3, [r3, #0]
 810303a:	4a2a      	ldr	r2, [pc, #168]	; (81030e4 <HAL_DMA_Abort_IT+0x3d8>)
 810303c:	4293      	cmp	r3, r2
 810303e:	d036      	beq.n	81030ae <HAL_DMA_Abort_IT+0x3a2>
 8103040:	687b      	ldr	r3, [r7, #4]
 8103042:	681b      	ldr	r3, [r3, #0]
 8103044:	4a28      	ldr	r2, [pc, #160]	; (81030e8 <HAL_DMA_Abort_IT+0x3dc>)
 8103046:	4293      	cmp	r3, r2
 8103048:	d031      	beq.n	81030ae <HAL_DMA_Abort_IT+0x3a2>
 810304a:	687b      	ldr	r3, [r7, #4]
 810304c:	681b      	ldr	r3, [r3, #0]
 810304e:	4a27      	ldr	r2, [pc, #156]	; (81030ec <HAL_DMA_Abort_IT+0x3e0>)
 8103050:	4293      	cmp	r3, r2
 8103052:	d02c      	beq.n	81030ae <HAL_DMA_Abort_IT+0x3a2>
 8103054:	687b      	ldr	r3, [r7, #4]
 8103056:	681b      	ldr	r3, [r3, #0]
 8103058:	4a25      	ldr	r2, [pc, #148]	; (81030f0 <HAL_DMA_Abort_IT+0x3e4>)
 810305a:	4293      	cmp	r3, r2
 810305c:	d027      	beq.n	81030ae <HAL_DMA_Abort_IT+0x3a2>
 810305e:	687b      	ldr	r3, [r7, #4]
 8103060:	681b      	ldr	r3, [r3, #0]
 8103062:	4a24      	ldr	r2, [pc, #144]	; (81030f4 <HAL_DMA_Abort_IT+0x3e8>)
 8103064:	4293      	cmp	r3, r2
 8103066:	d022      	beq.n	81030ae <HAL_DMA_Abort_IT+0x3a2>
 8103068:	687b      	ldr	r3, [r7, #4]
 810306a:	681b      	ldr	r3, [r3, #0]
 810306c:	4a22      	ldr	r2, [pc, #136]	; (81030f8 <HAL_DMA_Abort_IT+0x3ec>)
 810306e:	4293      	cmp	r3, r2
 8103070:	d01d      	beq.n	81030ae <HAL_DMA_Abort_IT+0x3a2>
 8103072:	687b      	ldr	r3, [r7, #4]
 8103074:	681b      	ldr	r3, [r3, #0]
 8103076:	4a21      	ldr	r2, [pc, #132]	; (81030fc <HAL_DMA_Abort_IT+0x3f0>)
 8103078:	4293      	cmp	r3, r2
 810307a:	d018      	beq.n	81030ae <HAL_DMA_Abort_IT+0x3a2>
 810307c:	687b      	ldr	r3, [r7, #4]
 810307e:	681b      	ldr	r3, [r3, #0]
 8103080:	4a1f      	ldr	r2, [pc, #124]	; (8103100 <HAL_DMA_Abort_IT+0x3f4>)
 8103082:	4293      	cmp	r3, r2
 8103084:	d013      	beq.n	81030ae <HAL_DMA_Abort_IT+0x3a2>
 8103086:	687b      	ldr	r3, [r7, #4]
 8103088:	681b      	ldr	r3, [r3, #0]
 810308a:	4a1e      	ldr	r2, [pc, #120]	; (8103104 <HAL_DMA_Abort_IT+0x3f8>)
 810308c:	4293      	cmp	r3, r2
 810308e:	d00e      	beq.n	81030ae <HAL_DMA_Abort_IT+0x3a2>
 8103090:	687b      	ldr	r3, [r7, #4]
 8103092:	681b      	ldr	r3, [r3, #0]
 8103094:	4a1c      	ldr	r2, [pc, #112]	; (8103108 <HAL_DMA_Abort_IT+0x3fc>)
 8103096:	4293      	cmp	r3, r2
 8103098:	d009      	beq.n	81030ae <HAL_DMA_Abort_IT+0x3a2>
 810309a:	687b      	ldr	r3, [r7, #4]
 810309c:	681b      	ldr	r3, [r3, #0]
 810309e:	4a1b      	ldr	r2, [pc, #108]	; (810310c <HAL_DMA_Abort_IT+0x400>)
 81030a0:	4293      	cmp	r3, r2
 81030a2:	d004      	beq.n	81030ae <HAL_DMA_Abort_IT+0x3a2>
 81030a4:	687b      	ldr	r3, [r7, #4]
 81030a6:	681b      	ldr	r3, [r3, #0]
 81030a8:	4a19      	ldr	r2, [pc, #100]	; (8103110 <HAL_DMA_Abort_IT+0x404>)
 81030aa:	4293      	cmp	r3, r2
 81030ac:	d132      	bne.n	8103114 <HAL_DMA_Abort_IT+0x408>
 81030ae:	2301      	movs	r3, #1
 81030b0:	e031      	b.n	8103116 <HAL_DMA_Abort_IT+0x40a>
 81030b2:	bf00      	nop
 81030b4:	40020010 	.word	0x40020010
 81030b8:	40020028 	.word	0x40020028
 81030bc:	40020040 	.word	0x40020040
 81030c0:	40020058 	.word	0x40020058
 81030c4:	40020070 	.word	0x40020070
 81030c8:	40020088 	.word	0x40020088
 81030cc:	400200a0 	.word	0x400200a0
 81030d0:	400200b8 	.word	0x400200b8
 81030d4:	40020410 	.word	0x40020410
 81030d8:	40020428 	.word	0x40020428
 81030dc:	40020440 	.word	0x40020440
 81030e0:	40020458 	.word	0x40020458
 81030e4:	40020470 	.word	0x40020470
 81030e8:	40020488 	.word	0x40020488
 81030ec:	400204a0 	.word	0x400204a0
 81030f0:	400204b8 	.word	0x400204b8
 81030f4:	58025408 	.word	0x58025408
 81030f8:	5802541c 	.word	0x5802541c
 81030fc:	58025430 	.word	0x58025430
 8103100:	58025444 	.word	0x58025444
 8103104:	58025458 	.word	0x58025458
 8103108:	5802546c 	.word	0x5802546c
 810310c:	58025480 	.word	0x58025480
 8103110:	58025494 	.word	0x58025494
 8103114:	2300      	movs	r3, #0
 8103116:	2b00      	cmp	r3, #0
 8103118:	d028      	beq.n	810316c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 810311a:	687b      	ldr	r3, [r7, #4]
 810311c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810311e:	681a      	ldr	r2, [r3, #0]
 8103120:	687b      	ldr	r3, [r7, #4]
 8103122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103124:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8103128:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 810312a:	687b      	ldr	r3, [r7, #4]
 810312c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810312e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8103130:	687b      	ldr	r3, [r7, #4]
 8103132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103134:	f003 031f 	and.w	r3, r3, #31
 8103138:	2201      	movs	r2, #1
 810313a:	409a      	lsls	r2, r3
 810313c:	68fb      	ldr	r3, [r7, #12]
 810313e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8103140:	687b      	ldr	r3, [r7, #4]
 8103142:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103144:	687a      	ldr	r2, [r7, #4]
 8103146:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8103148:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 810314a:	687b      	ldr	r3, [r7, #4]
 810314c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810314e:	2b00      	cmp	r3, #0
 8103150:	d00c      	beq.n	810316c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8103152:	687b      	ldr	r3, [r7, #4]
 8103154:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103156:	681a      	ldr	r2, [r3, #0]
 8103158:	687b      	ldr	r3, [r7, #4]
 810315a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810315c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8103160:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8103162:	687b      	ldr	r3, [r7, #4]
 8103164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103166:	687a      	ldr	r2, [r7, #4]
 8103168:	6f52      	ldr	r2, [r2, #116]	; 0x74
 810316a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 810316c:	687b      	ldr	r3, [r7, #4]
 810316e:	2201      	movs	r2, #1
 8103170:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8103174:	687b      	ldr	r3, [r7, #4]
 8103176:	2200      	movs	r2, #0
 8103178:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 810317c:	687b      	ldr	r3, [r7, #4]
 810317e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103180:	2b00      	cmp	r3, #0
 8103182:	d003      	beq.n	810318c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8103184:	687b      	ldr	r3, [r7, #4]
 8103186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103188:	6878      	ldr	r0, [r7, #4]
 810318a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 810318c:	2300      	movs	r3, #0
}
 810318e:	4618      	mov	r0, r3
 8103190:	3710      	adds	r7, #16
 8103192:	46bd      	mov	sp, r7
 8103194:	bd80      	pop	{r7, pc}
 8103196:	bf00      	nop

08103198 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8103198:	b480      	push	{r7}
 810319a:	b089      	sub	sp, #36	; 0x24
 810319c:	af00      	add	r7, sp, #0
 810319e:	6078      	str	r0, [r7, #4]
 81031a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 81031a2:	2300      	movs	r3, #0
 81031a4:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 81031a6:	4b89      	ldr	r3, [pc, #548]	; (81033cc <HAL_GPIO_Init+0x234>)
 81031a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81031aa:	e194      	b.n	81034d6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 81031ac:	683b      	ldr	r3, [r7, #0]
 81031ae:	681a      	ldr	r2, [r3, #0]
 81031b0:	2101      	movs	r1, #1
 81031b2:	69fb      	ldr	r3, [r7, #28]
 81031b4:	fa01 f303 	lsl.w	r3, r1, r3
 81031b8:	4013      	ands	r3, r2
 81031ba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 81031bc:	693b      	ldr	r3, [r7, #16]
 81031be:	2b00      	cmp	r3, #0
 81031c0:	f000 8186 	beq.w	81034d0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 81031c4:	683b      	ldr	r3, [r7, #0]
 81031c6:	685b      	ldr	r3, [r3, #4]
 81031c8:	f003 0303 	and.w	r3, r3, #3
 81031cc:	2b01      	cmp	r3, #1
 81031ce:	d005      	beq.n	81031dc <HAL_GPIO_Init+0x44>
 81031d0:	683b      	ldr	r3, [r7, #0]
 81031d2:	685b      	ldr	r3, [r3, #4]
 81031d4:	f003 0303 	and.w	r3, r3, #3
 81031d8:	2b02      	cmp	r3, #2
 81031da:	d130      	bne.n	810323e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 81031dc:	687b      	ldr	r3, [r7, #4]
 81031de:	689b      	ldr	r3, [r3, #8]
 81031e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 81031e2:	69fb      	ldr	r3, [r7, #28]
 81031e4:	005b      	lsls	r3, r3, #1
 81031e6:	2203      	movs	r2, #3
 81031e8:	fa02 f303 	lsl.w	r3, r2, r3
 81031ec:	43db      	mvns	r3, r3
 81031ee:	69ba      	ldr	r2, [r7, #24]
 81031f0:	4013      	ands	r3, r2
 81031f2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 81031f4:	683b      	ldr	r3, [r7, #0]
 81031f6:	68da      	ldr	r2, [r3, #12]
 81031f8:	69fb      	ldr	r3, [r7, #28]
 81031fa:	005b      	lsls	r3, r3, #1
 81031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8103200:	69ba      	ldr	r2, [r7, #24]
 8103202:	4313      	orrs	r3, r2
 8103204:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8103206:	687b      	ldr	r3, [r7, #4]
 8103208:	69ba      	ldr	r2, [r7, #24]
 810320a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 810320c:	687b      	ldr	r3, [r7, #4]
 810320e:	685b      	ldr	r3, [r3, #4]
 8103210:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8103212:	2201      	movs	r2, #1
 8103214:	69fb      	ldr	r3, [r7, #28]
 8103216:	fa02 f303 	lsl.w	r3, r2, r3
 810321a:	43db      	mvns	r3, r3
 810321c:	69ba      	ldr	r2, [r7, #24]
 810321e:	4013      	ands	r3, r2
 8103220:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8103222:	683b      	ldr	r3, [r7, #0]
 8103224:	685b      	ldr	r3, [r3, #4]
 8103226:	091b      	lsrs	r3, r3, #4
 8103228:	f003 0201 	and.w	r2, r3, #1
 810322c:	69fb      	ldr	r3, [r7, #28]
 810322e:	fa02 f303 	lsl.w	r3, r2, r3
 8103232:	69ba      	ldr	r2, [r7, #24]
 8103234:	4313      	orrs	r3, r2
 8103236:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8103238:	687b      	ldr	r3, [r7, #4]
 810323a:	69ba      	ldr	r2, [r7, #24]
 810323c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 810323e:	683b      	ldr	r3, [r7, #0]
 8103240:	685b      	ldr	r3, [r3, #4]
 8103242:	f003 0303 	and.w	r3, r3, #3
 8103246:	2b03      	cmp	r3, #3
 8103248:	d017      	beq.n	810327a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 810324a:	687b      	ldr	r3, [r7, #4]
 810324c:	68db      	ldr	r3, [r3, #12]
 810324e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8103250:	69fb      	ldr	r3, [r7, #28]
 8103252:	005b      	lsls	r3, r3, #1
 8103254:	2203      	movs	r2, #3
 8103256:	fa02 f303 	lsl.w	r3, r2, r3
 810325a:	43db      	mvns	r3, r3
 810325c:	69ba      	ldr	r2, [r7, #24]
 810325e:	4013      	ands	r3, r2
 8103260:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8103262:	683b      	ldr	r3, [r7, #0]
 8103264:	689a      	ldr	r2, [r3, #8]
 8103266:	69fb      	ldr	r3, [r7, #28]
 8103268:	005b      	lsls	r3, r3, #1
 810326a:	fa02 f303 	lsl.w	r3, r2, r3
 810326e:	69ba      	ldr	r2, [r7, #24]
 8103270:	4313      	orrs	r3, r2
 8103272:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8103274:	687b      	ldr	r3, [r7, #4]
 8103276:	69ba      	ldr	r2, [r7, #24]
 8103278:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 810327a:	683b      	ldr	r3, [r7, #0]
 810327c:	685b      	ldr	r3, [r3, #4]
 810327e:	f003 0303 	and.w	r3, r3, #3
 8103282:	2b02      	cmp	r3, #2
 8103284:	d123      	bne.n	81032ce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8103286:	69fb      	ldr	r3, [r7, #28]
 8103288:	08da      	lsrs	r2, r3, #3
 810328a:	687b      	ldr	r3, [r7, #4]
 810328c:	3208      	adds	r2, #8
 810328e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8103292:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8103294:	69fb      	ldr	r3, [r7, #28]
 8103296:	f003 0307 	and.w	r3, r3, #7
 810329a:	009b      	lsls	r3, r3, #2
 810329c:	220f      	movs	r2, #15
 810329e:	fa02 f303 	lsl.w	r3, r2, r3
 81032a2:	43db      	mvns	r3, r3
 81032a4:	69ba      	ldr	r2, [r7, #24]
 81032a6:	4013      	ands	r3, r2
 81032a8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 81032aa:	683b      	ldr	r3, [r7, #0]
 81032ac:	691a      	ldr	r2, [r3, #16]
 81032ae:	69fb      	ldr	r3, [r7, #28]
 81032b0:	f003 0307 	and.w	r3, r3, #7
 81032b4:	009b      	lsls	r3, r3, #2
 81032b6:	fa02 f303 	lsl.w	r3, r2, r3
 81032ba:	69ba      	ldr	r2, [r7, #24]
 81032bc:	4313      	orrs	r3, r2
 81032be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 81032c0:	69fb      	ldr	r3, [r7, #28]
 81032c2:	08da      	lsrs	r2, r3, #3
 81032c4:	687b      	ldr	r3, [r7, #4]
 81032c6:	3208      	adds	r2, #8
 81032c8:	69b9      	ldr	r1, [r7, #24]
 81032ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 81032ce:	687b      	ldr	r3, [r7, #4]
 81032d0:	681b      	ldr	r3, [r3, #0]
 81032d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 81032d4:	69fb      	ldr	r3, [r7, #28]
 81032d6:	005b      	lsls	r3, r3, #1
 81032d8:	2203      	movs	r2, #3
 81032da:	fa02 f303 	lsl.w	r3, r2, r3
 81032de:	43db      	mvns	r3, r3
 81032e0:	69ba      	ldr	r2, [r7, #24]
 81032e2:	4013      	ands	r3, r2
 81032e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81032e6:	683b      	ldr	r3, [r7, #0]
 81032e8:	685b      	ldr	r3, [r3, #4]
 81032ea:	f003 0203 	and.w	r2, r3, #3
 81032ee:	69fb      	ldr	r3, [r7, #28]
 81032f0:	005b      	lsls	r3, r3, #1
 81032f2:	fa02 f303 	lsl.w	r3, r2, r3
 81032f6:	69ba      	ldr	r2, [r7, #24]
 81032f8:	4313      	orrs	r3, r2
 81032fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81032fc:	687b      	ldr	r3, [r7, #4]
 81032fe:	69ba      	ldr	r2, [r7, #24]
 8103300:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8103302:	683b      	ldr	r3, [r7, #0]
 8103304:	685b      	ldr	r3, [r3, #4]
 8103306:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 810330a:	2b00      	cmp	r3, #0
 810330c:	f000 80e0 	beq.w	81034d0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8103310:	4b2f      	ldr	r3, [pc, #188]	; (81033d0 <HAL_GPIO_Init+0x238>)
 8103312:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8103316:	4a2e      	ldr	r2, [pc, #184]	; (81033d0 <HAL_GPIO_Init+0x238>)
 8103318:	f043 0302 	orr.w	r3, r3, #2
 810331c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8103320:	4b2b      	ldr	r3, [pc, #172]	; (81033d0 <HAL_GPIO_Init+0x238>)
 8103322:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8103326:	f003 0302 	and.w	r3, r3, #2
 810332a:	60fb      	str	r3, [r7, #12]
 810332c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 810332e:	4a29      	ldr	r2, [pc, #164]	; (81033d4 <HAL_GPIO_Init+0x23c>)
 8103330:	69fb      	ldr	r3, [r7, #28]
 8103332:	089b      	lsrs	r3, r3, #2
 8103334:	3302      	adds	r3, #2
 8103336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810333a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 810333c:	69fb      	ldr	r3, [r7, #28]
 810333e:	f003 0303 	and.w	r3, r3, #3
 8103342:	009b      	lsls	r3, r3, #2
 8103344:	220f      	movs	r2, #15
 8103346:	fa02 f303 	lsl.w	r3, r2, r3
 810334a:	43db      	mvns	r3, r3
 810334c:	69ba      	ldr	r2, [r7, #24]
 810334e:	4013      	ands	r3, r2
 8103350:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8103352:	687b      	ldr	r3, [r7, #4]
 8103354:	4a20      	ldr	r2, [pc, #128]	; (81033d8 <HAL_GPIO_Init+0x240>)
 8103356:	4293      	cmp	r3, r2
 8103358:	d052      	beq.n	8103400 <HAL_GPIO_Init+0x268>
 810335a:	687b      	ldr	r3, [r7, #4]
 810335c:	4a1f      	ldr	r2, [pc, #124]	; (81033dc <HAL_GPIO_Init+0x244>)
 810335e:	4293      	cmp	r3, r2
 8103360:	d031      	beq.n	81033c6 <HAL_GPIO_Init+0x22e>
 8103362:	687b      	ldr	r3, [r7, #4]
 8103364:	4a1e      	ldr	r2, [pc, #120]	; (81033e0 <HAL_GPIO_Init+0x248>)
 8103366:	4293      	cmp	r3, r2
 8103368:	d02b      	beq.n	81033c2 <HAL_GPIO_Init+0x22a>
 810336a:	687b      	ldr	r3, [r7, #4]
 810336c:	4a1d      	ldr	r2, [pc, #116]	; (81033e4 <HAL_GPIO_Init+0x24c>)
 810336e:	4293      	cmp	r3, r2
 8103370:	d025      	beq.n	81033be <HAL_GPIO_Init+0x226>
 8103372:	687b      	ldr	r3, [r7, #4]
 8103374:	4a1c      	ldr	r2, [pc, #112]	; (81033e8 <HAL_GPIO_Init+0x250>)
 8103376:	4293      	cmp	r3, r2
 8103378:	d01f      	beq.n	81033ba <HAL_GPIO_Init+0x222>
 810337a:	687b      	ldr	r3, [r7, #4]
 810337c:	4a1b      	ldr	r2, [pc, #108]	; (81033ec <HAL_GPIO_Init+0x254>)
 810337e:	4293      	cmp	r3, r2
 8103380:	d019      	beq.n	81033b6 <HAL_GPIO_Init+0x21e>
 8103382:	687b      	ldr	r3, [r7, #4]
 8103384:	4a1a      	ldr	r2, [pc, #104]	; (81033f0 <HAL_GPIO_Init+0x258>)
 8103386:	4293      	cmp	r3, r2
 8103388:	d013      	beq.n	81033b2 <HAL_GPIO_Init+0x21a>
 810338a:	687b      	ldr	r3, [r7, #4]
 810338c:	4a19      	ldr	r2, [pc, #100]	; (81033f4 <HAL_GPIO_Init+0x25c>)
 810338e:	4293      	cmp	r3, r2
 8103390:	d00d      	beq.n	81033ae <HAL_GPIO_Init+0x216>
 8103392:	687b      	ldr	r3, [r7, #4]
 8103394:	4a18      	ldr	r2, [pc, #96]	; (81033f8 <HAL_GPIO_Init+0x260>)
 8103396:	4293      	cmp	r3, r2
 8103398:	d007      	beq.n	81033aa <HAL_GPIO_Init+0x212>
 810339a:	687b      	ldr	r3, [r7, #4]
 810339c:	4a17      	ldr	r2, [pc, #92]	; (81033fc <HAL_GPIO_Init+0x264>)
 810339e:	4293      	cmp	r3, r2
 81033a0:	d101      	bne.n	81033a6 <HAL_GPIO_Init+0x20e>
 81033a2:	2309      	movs	r3, #9
 81033a4:	e02d      	b.n	8103402 <HAL_GPIO_Init+0x26a>
 81033a6:	230a      	movs	r3, #10
 81033a8:	e02b      	b.n	8103402 <HAL_GPIO_Init+0x26a>
 81033aa:	2308      	movs	r3, #8
 81033ac:	e029      	b.n	8103402 <HAL_GPIO_Init+0x26a>
 81033ae:	2307      	movs	r3, #7
 81033b0:	e027      	b.n	8103402 <HAL_GPIO_Init+0x26a>
 81033b2:	2306      	movs	r3, #6
 81033b4:	e025      	b.n	8103402 <HAL_GPIO_Init+0x26a>
 81033b6:	2305      	movs	r3, #5
 81033b8:	e023      	b.n	8103402 <HAL_GPIO_Init+0x26a>
 81033ba:	2304      	movs	r3, #4
 81033bc:	e021      	b.n	8103402 <HAL_GPIO_Init+0x26a>
 81033be:	2303      	movs	r3, #3
 81033c0:	e01f      	b.n	8103402 <HAL_GPIO_Init+0x26a>
 81033c2:	2302      	movs	r3, #2
 81033c4:	e01d      	b.n	8103402 <HAL_GPIO_Init+0x26a>
 81033c6:	2301      	movs	r3, #1
 81033c8:	e01b      	b.n	8103402 <HAL_GPIO_Init+0x26a>
 81033ca:	bf00      	nop
 81033cc:	580000c0 	.word	0x580000c0
 81033d0:	58024400 	.word	0x58024400
 81033d4:	58000400 	.word	0x58000400
 81033d8:	58020000 	.word	0x58020000
 81033dc:	58020400 	.word	0x58020400
 81033e0:	58020800 	.word	0x58020800
 81033e4:	58020c00 	.word	0x58020c00
 81033e8:	58021000 	.word	0x58021000
 81033ec:	58021400 	.word	0x58021400
 81033f0:	58021800 	.word	0x58021800
 81033f4:	58021c00 	.word	0x58021c00
 81033f8:	58022000 	.word	0x58022000
 81033fc:	58022400 	.word	0x58022400
 8103400:	2300      	movs	r3, #0
 8103402:	69fa      	ldr	r2, [r7, #28]
 8103404:	f002 0203 	and.w	r2, r2, #3
 8103408:	0092      	lsls	r2, r2, #2
 810340a:	4093      	lsls	r3, r2
 810340c:	69ba      	ldr	r2, [r7, #24]
 810340e:	4313      	orrs	r3, r2
 8103410:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8103412:	4938      	ldr	r1, [pc, #224]	; (81034f4 <HAL_GPIO_Init+0x35c>)
 8103414:	69fb      	ldr	r3, [r7, #28]
 8103416:	089b      	lsrs	r3, r3, #2
 8103418:	3302      	adds	r3, #2
 810341a:	69ba      	ldr	r2, [r7, #24]
 810341c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8103420:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8103424:	681b      	ldr	r3, [r3, #0]
 8103426:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103428:	693b      	ldr	r3, [r7, #16]
 810342a:	43db      	mvns	r3, r3
 810342c:	69ba      	ldr	r2, [r7, #24]
 810342e:	4013      	ands	r3, r2
 8103430:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8103432:	683b      	ldr	r3, [r7, #0]
 8103434:	685b      	ldr	r3, [r3, #4]
 8103436:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810343a:	2b00      	cmp	r3, #0
 810343c:	d003      	beq.n	8103446 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 810343e:	69ba      	ldr	r2, [r7, #24]
 8103440:	693b      	ldr	r3, [r7, #16]
 8103442:	4313      	orrs	r3, r2
 8103444:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8103446:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 810344a:	69bb      	ldr	r3, [r7, #24]
 810344c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 810344e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8103452:	685b      	ldr	r3, [r3, #4]
 8103454:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103456:	693b      	ldr	r3, [r7, #16]
 8103458:	43db      	mvns	r3, r3
 810345a:	69ba      	ldr	r2, [r7, #24]
 810345c:	4013      	ands	r3, r2
 810345e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8103460:	683b      	ldr	r3, [r7, #0]
 8103462:	685b      	ldr	r3, [r3, #4]
 8103464:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8103468:	2b00      	cmp	r3, #0
 810346a:	d003      	beq.n	8103474 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 810346c:	69ba      	ldr	r2, [r7, #24]
 810346e:	693b      	ldr	r3, [r7, #16]
 8103470:	4313      	orrs	r3, r2
 8103472:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8103474:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8103478:	69bb      	ldr	r3, [r7, #24]
 810347a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 810347c:	697b      	ldr	r3, [r7, #20]
 810347e:	685b      	ldr	r3, [r3, #4]
 8103480:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103482:	693b      	ldr	r3, [r7, #16]
 8103484:	43db      	mvns	r3, r3
 8103486:	69ba      	ldr	r2, [r7, #24]
 8103488:	4013      	ands	r3, r2
 810348a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 810348c:	683b      	ldr	r3, [r7, #0]
 810348e:	685b      	ldr	r3, [r3, #4]
 8103490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8103494:	2b00      	cmp	r3, #0
 8103496:	d003      	beq.n	81034a0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8103498:	69ba      	ldr	r2, [r7, #24]
 810349a:	693b      	ldr	r3, [r7, #16]
 810349c:	4313      	orrs	r3, r2
 810349e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 81034a0:	697b      	ldr	r3, [r7, #20]
 81034a2:	69ba      	ldr	r2, [r7, #24]
 81034a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 81034a6:	697b      	ldr	r3, [r7, #20]
 81034a8:	681b      	ldr	r3, [r3, #0]
 81034aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81034ac:	693b      	ldr	r3, [r7, #16]
 81034ae:	43db      	mvns	r3, r3
 81034b0:	69ba      	ldr	r2, [r7, #24]
 81034b2:	4013      	ands	r3, r2
 81034b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 81034b6:	683b      	ldr	r3, [r7, #0]
 81034b8:	685b      	ldr	r3, [r3, #4]
 81034ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81034be:	2b00      	cmp	r3, #0
 81034c0:	d003      	beq.n	81034ca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 81034c2:	69ba      	ldr	r2, [r7, #24]
 81034c4:	693b      	ldr	r3, [r7, #16]
 81034c6:	4313      	orrs	r3, r2
 81034c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 81034ca:	697b      	ldr	r3, [r7, #20]
 81034cc:	69ba      	ldr	r2, [r7, #24]
 81034ce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 81034d0:	69fb      	ldr	r3, [r7, #28]
 81034d2:	3301      	adds	r3, #1
 81034d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81034d6:	683b      	ldr	r3, [r7, #0]
 81034d8:	681a      	ldr	r2, [r3, #0]
 81034da:	69fb      	ldr	r3, [r7, #28]
 81034dc:	fa22 f303 	lsr.w	r3, r2, r3
 81034e0:	2b00      	cmp	r3, #0
 81034e2:	f47f ae63 	bne.w	81031ac <HAL_GPIO_Init+0x14>
  }
}
 81034e6:	bf00      	nop
 81034e8:	bf00      	nop
 81034ea:	3724      	adds	r7, #36	; 0x24
 81034ec:	46bd      	mov	sp, r7
 81034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034f2:	4770      	bx	lr
 81034f4:	58000400 	.word	0x58000400

081034f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 81034f8:	b480      	push	{r7}
 81034fa:	b083      	sub	sp, #12
 81034fc:	af00      	add	r7, sp, #0
 81034fe:	6078      	str	r0, [r7, #4]
 8103500:	460b      	mov	r3, r1
 8103502:	807b      	strh	r3, [r7, #2]
 8103504:	4613      	mov	r3, r2
 8103506:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8103508:	787b      	ldrb	r3, [r7, #1]
 810350a:	2b00      	cmp	r3, #0
 810350c:	d003      	beq.n	8103516 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 810350e:	887a      	ldrh	r2, [r7, #2]
 8103510:	687b      	ldr	r3, [r7, #4]
 8103512:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8103514:	e003      	b.n	810351e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8103516:	887b      	ldrh	r3, [r7, #2]
 8103518:	041a      	lsls	r2, r3, #16
 810351a:	687b      	ldr	r3, [r7, #4]
 810351c:	619a      	str	r2, [r3, #24]
}
 810351e:	bf00      	nop
 8103520:	370c      	adds	r7, #12
 8103522:	46bd      	mov	sp, r7
 8103524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103528:	4770      	bx	lr
	...

0810352c <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 810352c:	b480      	push	{r7}
 810352e:	b083      	sub	sp, #12
 8103530:	af00      	add	r7, sp, #0
 8103532:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8103534:	4b05      	ldr	r3, [pc, #20]	; (810354c <HAL_HSEM_ActivateNotification+0x20>)
 8103536:	681a      	ldr	r2, [r3, #0]
 8103538:	4904      	ldr	r1, [pc, #16]	; (810354c <HAL_HSEM_ActivateNotification+0x20>)
 810353a:	687b      	ldr	r3, [r7, #4]
 810353c:	4313      	orrs	r3, r2
 810353e:	600b      	str	r3, [r1, #0]
#endif
}
 8103540:	bf00      	nop
 8103542:	370c      	adds	r7, #12
 8103544:	46bd      	mov	sp, r7
 8103546:	f85d 7b04 	ldr.w	r7, [sp], #4
 810354a:	4770      	bx	lr
 810354c:	58026510 	.word	0x58026510

08103550 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8103550:	b580      	push	{r7, lr}
 8103552:	b084      	sub	sp, #16
 8103554:	af00      	add	r7, sp, #0
 8103556:	60f8      	str	r0, [r7, #12]
 8103558:	460b      	mov	r3, r1
 810355a:	607a      	str	r2, [r7, #4]
 810355c:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810355e:	4b37      	ldr	r3, [pc, #220]	; (810363c <HAL_PWREx_EnterSTOPMode+0xec>)
 8103560:	681b      	ldr	r3, [r3, #0]
 8103562:	f023 0201 	bic.w	r2, r3, #1
 8103566:	4935      	ldr	r1, [pc, #212]	; (810363c <HAL_PWREx_EnterSTOPMode+0xec>)
 8103568:	68fb      	ldr	r3, [r7, #12]
 810356a:	4313      	orrs	r3, r2
 810356c:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 810356e:	687b      	ldr	r3, [r7, #4]
 8103570:	2b00      	cmp	r3, #0
 8103572:	d123      	bne.n	81035bc <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8103574:	f7ff f898 	bl	81026a8 <HAL_GetCurrentCPUID>
 8103578:	4603      	mov	r3, r0
 810357a:	2b03      	cmp	r3, #3
 810357c:	d158      	bne.n	8103630 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 810357e:	4b2f      	ldr	r3, [pc, #188]	; (810363c <HAL_PWREx_EnterSTOPMode+0xec>)
 8103580:	691b      	ldr	r3, [r3, #16]
 8103582:	4a2e      	ldr	r2, [pc, #184]	; (810363c <HAL_PWREx_EnterSTOPMode+0xec>)
 8103584:	f023 0301 	bic.w	r3, r3, #1
 8103588:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810358a:	4b2d      	ldr	r3, [pc, #180]	; (8103640 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810358c:	691b      	ldr	r3, [r3, #16]
 810358e:	4a2c      	ldr	r2, [pc, #176]	; (8103640 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103590:	f043 0304 	orr.w	r3, r3, #4
 8103594:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8103596:	f3bf 8f4f 	dsb	sy
}
 810359a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810359c:	f3bf 8f6f 	isb	sy
}
 81035a0:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81035a2:	7afb      	ldrb	r3, [r7, #11]
 81035a4:	2b01      	cmp	r3, #1
 81035a6:	d101      	bne.n	81035ac <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81035a8:	bf30      	wfi
 81035aa:	e000      	b.n	81035ae <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81035ac:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81035ae:	4b24      	ldr	r3, [pc, #144]	; (8103640 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81035b0:	691b      	ldr	r3, [r3, #16]
 81035b2:	4a23      	ldr	r2, [pc, #140]	; (8103640 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81035b4:	f023 0304 	bic.w	r3, r3, #4
 81035b8:	6113      	str	r3, [r2, #16]
 81035ba:	e03c      	b.n	8103636 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 81035bc:	687b      	ldr	r3, [r7, #4]
 81035be:	2b01      	cmp	r3, #1
 81035c0:	d123      	bne.n	810360a <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 81035c2:	f7ff f871 	bl	81026a8 <HAL_GetCurrentCPUID>
 81035c6:	4603      	mov	r3, r0
 81035c8:	2b01      	cmp	r3, #1
 81035ca:	d133      	bne.n	8103634 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 81035cc:	4b1b      	ldr	r3, [pc, #108]	; (810363c <HAL_PWREx_EnterSTOPMode+0xec>)
 81035ce:	695b      	ldr	r3, [r3, #20]
 81035d0:	4a1a      	ldr	r2, [pc, #104]	; (810363c <HAL_PWREx_EnterSTOPMode+0xec>)
 81035d2:	f023 0302 	bic.w	r3, r3, #2
 81035d6:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81035d8:	4b19      	ldr	r3, [pc, #100]	; (8103640 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81035da:	691b      	ldr	r3, [r3, #16]
 81035dc:	4a18      	ldr	r2, [pc, #96]	; (8103640 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81035de:	f043 0304 	orr.w	r3, r3, #4
 81035e2:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81035e4:	f3bf 8f4f 	dsb	sy
}
 81035e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81035ea:	f3bf 8f6f 	isb	sy
}
 81035ee:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81035f0:	7afb      	ldrb	r3, [r7, #11]
 81035f2:	2b01      	cmp	r3, #1
 81035f4:	d101      	bne.n	81035fa <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81035f6:	bf30      	wfi
 81035f8:	e000      	b.n	81035fc <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81035fa:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81035fc:	4b10      	ldr	r3, [pc, #64]	; (8103640 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81035fe:	691b      	ldr	r3, [r3, #16]
 8103600:	4a0f      	ldr	r2, [pc, #60]	; (8103640 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103602:	f023 0304 	bic.w	r3, r3, #4
 8103606:	6113      	str	r3, [r2, #16]
 8103608:	e015      	b.n	8103636 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810360a:	f7ff f84d 	bl	81026a8 <HAL_GetCurrentCPUID>
 810360e:	4603      	mov	r3, r0
 8103610:	2b03      	cmp	r3, #3
 8103612:	d106      	bne.n	8103622 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8103614:	4b09      	ldr	r3, [pc, #36]	; (810363c <HAL_PWREx_EnterSTOPMode+0xec>)
 8103616:	691b      	ldr	r3, [r3, #16]
 8103618:	4a08      	ldr	r2, [pc, #32]	; (810363c <HAL_PWREx_EnterSTOPMode+0xec>)
 810361a:	f023 0304 	bic.w	r3, r3, #4
 810361e:	6113      	str	r3, [r2, #16]
 8103620:	e009      	b.n	8103636 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8103622:	4b06      	ldr	r3, [pc, #24]	; (810363c <HAL_PWREx_EnterSTOPMode+0xec>)
 8103624:	695b      	ldr	r3, [r3, #20]
 8103626:	4a05      	ldr	r2, [pc, #20]	; (810363c <HAL_PWREx_EnterSTOPMode+0xec>)
 8103628:	f023 0304 	bic.w	r3, r3, #4
 810362c:	6153      	str	r3, [r2, #20]
 810362e:	e002      	b.n	8103636 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103630:	bf00      	nop
 8103632:	e000      	b.n	8103636 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103634:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8103636:	3710      	adds	r7, #16
 8103638:	46bd      	mov	sp, r7
 810363a:	bd80      	pop	{r7, pc}
 810363c:	58024800 	.word	0x58024800
 8103640:	e000ed00 	.word	0xe000ed00

08103644 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8103644:	b580      	push	{r7, lr}
 8103646:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8103648:	f7ff f82e 	bl	81026a8 <HAL_GetCurrentCPUID>
 810364c:	4603      	mov	r3, r0
 810364e:	2b03      	cmp	r3, #3
 8103650:	d101      	bne.n	8103656 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8103652:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8103654:	e001      	b.n	810365a <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8103656:	bf40      	sev
    __WFE ();
 8103658:	bf20      	wfe
}
 810365a:	bf00      	nop
 810365c:	bd80      	pop	{r7, pc}
	...

08103660 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8103660:	b480      	push	{r7}
 8103662:	b089      	sub	sp, #36	; 0x24
 8103664:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8103666:	4bb3      	ldr	r3, [pc, #716]	; (8103934 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103668:	691b      	ldr	r3, [r3, #16]
 810366a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810366e:	2b18      	cmp	r3, #24
 8103670:	f200 8155 	bhi.w	810391e <HAL_RCC_GetSysClockFreq+0x2be>
 8103674:	a201      	add	r2, pc, #4	; (adr r2, 810367c <HAL_RCC_GetSysClockFreq+0x1c>)
 8103676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810367a:	bf00      	nop
 810367c:	081036e1 	.word	0x081036e1
 8103680:	0810391f 	.word	0x0810391f
 8103684:	0810391f 	.word	0x0810391f
 8103688:	0810391f 	.word	0x0810391f
 810368c:	0810391f 	.word	0x0810391f
 8103690:	0810391f 	.word	0x0810391f
 8103694:	0810391f 	.word	0x0810391f
 8103698:	0810391f 	.word	0x0810391f
 810369c:	08103707 	.word	0x08103707
 81036a0:	0810391f 	.word	0x0810391f
 81036a4:	0810391f 	.word	0x0810391f
 81036a8:	0810391f 	.word	0x0810391f
 81036ac:	0810391f 	.word	0x0810391f
 81036b0:	0810391f 	.word	0x0810391f
 81036b4:	0810391f 	.word	0x0810391f
 81036b8:	0810391f 	.word	0x0810391f
 81036bc:	0810370d 	.word	0x0810370d
 81036c0:	0810391f 	.word	0x0810391f
 81036c4:	0810391f 	.word	0x0810391f
 81036c8:	0810391f 	.word	0x0810391f
 81036cc:	0810391f 	.word	0x0810391f
 81036d0:	0810391f 	.word	0x0810391f
 81036d4:	0810391f 	.word	0x0810391f
 81036d8:	0810391f 	.word	0x0810391f
 81036dc:	08103713 	.word	0x08103713
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81036e0:	4b94      	ldr	r3, [pc, #592]	; (8103934 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81036e2:	681b      	ldr	r3, [r3, #0]
 81036e4:	f003 0320 	and.w	r3, r3, #32
 81036e8:	2b00      	cmp	r3, #0
 81036ea:	d009      	beq.n	8103700 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81036ec:	4b91      	ldr	r3, [pc, #580]	; (8103934 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81036ee:	681b      	ldr	r3, [r3, #0]
 81036f0:	08db      	lsrs	r3, r3, #3
 81036f2:	f003 0303 	and.w	r3, r3, #3
 81036f6:	4a90      	ldr	r2, [pc, #576]	; (8103938 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81036f8:	fa22 f303 	lsr.w	r3, r2, r3
 81036fc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 81036fe:	e111      	b.n	8103924 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8103700:	4b8d      	ldr	r3, [pc, #564]	; (8103938 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103702:	61bb      	str	r3, [r7, #24]
    break;
 8103704:	e10e      	b.n	8103924 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8103706:	4b8d      	ldr	r3, [pc, #564]	; (810393c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8103708:	61bb      	str	r3, [r7, #24]
    break;
 810370a:	e10b      	b.n	8103924 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 810370c:	4b8c      	ldr	r3, [pc, #560]	; (8103940 <HAL_RCC_GetSysClockFreq+0x2e0>)
 810370e:	61bb      	str	r3, [r7, #24]
    break;
 8103710:	e108      	b.n	8103924 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8103712:	4b88      	ldr	r3, [pc, #544]	; (8103934 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103716:	f003 0303 	and.w	r3, r3, #3
 810371a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 810371c:	4b85      	ldr	r3, [pc, #532]	; (8103934 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810371e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103720:	091b      	lsrs	r3, r3, #4
 8103722:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8103726:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8103728:	4b82      	ldr	r3, [pc, #520]	; (8103934 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810372a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810372c:	f003 0301 	and.w	r3, r3, #1
 8103730:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8103732:	4b80      	ldr	r3, [pc, #512]	; (8103934 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8103736:	08db      	lsrs	r3, r3, #3
 8103738:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810373c:	68fa      	ldr	r2, [r7, #12]
 810373e:	fb02 f303 	mul.w	r3, r2, r3
 8103742:	ee07 3a90 	vmov	s15, r3
 8103746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810374a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 810374e:	693b      	ldr	r3, [r7, #16]
 8103750:	2b00      	cmp	r3, #0
 8103752:	f000 80e1 	beq.w	8103918 <HAL_RCC_GetSysClockFreq+0x2b8>
 8103756:	697b      	ldr	r3, [r7, #20]
 8103758:	2b02      	cmp	r3, #2
 810375a:	f000 8083 	beq.w	8103864 <HAL_RCC_GetSysClockFreq+0x204>
 810375e:	697b      	ldr	r3, [r7, #20]
 8103760:	2b02      	cmp	r3, #2
 8103762:	f200 80a1 	bhi.w	81038a8 <HAL_RCC_GetSysClockFreq+0x248>
 8103766:	697b      	ldr	r3, [r7, #20]
 8103768:	2b00      	cmp	r3, #0
 810376a:	d003      	beq.n	8103774 <HAL_RCC_GetSysClockFreq+0x114>
 810376c:	697b      	ldr	r3, [r7, #20]
 810376e:	2b01      	cmp	r3, #1
 8103770:	d056      	beq.n	8103820 <HAL_RCC_GetSysClockFreq+0x1c0>
 8103772:	e099      	b.n	81038a8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103774:	4b6f      	ldr	r3, [pc, #444]	; (8103934 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103776:	681b      	ldr	r3, [r3, #0]
 8103778:	f003 0320 	and.w	r3, r3, #32
 810377c:	2b00      	cmp	r3, #0
 810377e:	d02d      	beq.n	81037dc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8103780:	4b6c      	ldr	r3, [pc, #432]	; (8103934 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103782:	681b      	ldr	r3, [r3, #0]
 8103784:	08db      	lsrs	r3, r3, #3
 8103786:	f003 0303 	and.w	r3, r3, #3
 810378a:	4a6b      	ldr	r2, [pc, #428]	; (8103938 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810378c:	fa22 f303 	lsr.w	r3, r2, r3
 8103790:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103792:	687b      	ldr	r3, [r7, #4]
 8103794:	ee07 3a90 	vmov	s15, r3
 8103798:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810379c:	693b      	ldr	r3, [r7, #16]
 810379e:	ee07 3a90 	vmov	s15, r3
 81037a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81037a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81037aa:	4b62      	ldr	r3, [pc, #392]	; (8103934 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81037ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81037ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81037b2:	ee07 3a90 	vmov	s15, r3
 81037b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81037ba:	ed97 6a02 	vldr	s12, [r7, #8]
 81037be:	eddf 5a61 	vldr	s11, [pc, #388]	; 8103944 <HAL_RCC_GetSysClockFreq+0x2e4>
 81037c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81037c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81037ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81037ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81037d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81037d6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 81037da:	e087      	b.n	81038ec <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81037dc:	693b      	ldr	r3, [r7, #16]
 81037de:	ee07 3a90 	vmov	s15, r3
 81037e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81037e6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8103948 <HAL_RCC_GetSysClockFreq+0x2e8>
 81037ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81037ee:	4b51      	ldr	r3, [pc, #324]	; (8103934 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81037f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81037f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81037f6:	ee07 3a90 	vmov	s15, r3
 81037fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81037fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8103802:	eddf 5a50 	vldr	s11, [pc, #320]	; 8103944 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103806:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810380a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810380e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103812:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103816:	ee67 7a27 	vmul.f32	s15, s14, s15
 810381a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810381e:	e065      	b.n	81038ec <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103820:	693b      	ldr	r3, [r7, #16]
 8103822:	ee07 3a90 	vmov	s15, r3
 8103826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810382a:	eddf 6a48 	vldr	s13, [pc, #288]	; 810394c <HAL_RCC_GetSysClockFreq+0x2ec>
 810382e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103832:	4b40      	ldr	r3, [pc, #256]	; (8103934 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810383a:	ee07 3a90 	vmov	s15, r3
 810383e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103842:	ed97 6a02 	vldr	s12, [r7, #8]
 8103846:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8103944 <HAL_RCC_GetSysClockFreq+0x2e4>
 810384a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810384e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103852:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103856:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810385a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810385e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103862:	e043      	b.n	81038ec <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103864:	693b      	ldr	r3, [r7, #16]
 8103866:	ee07 3a90 	vmov	s15, r3
 810386a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810386e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8103950 <HAL_RCC_GetSysClockFreq+0x2f0>
 8103872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103876:	4b2f      	ldr	r3, [pc, #188]	; (8103934 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810387a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810387e:	ee07 3a90 	vmov	s15, r3
 8103882:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103886:	ed97 6a02 	vldr	s12, [r7, #8]
 810388a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8103944 <HAL_RCC_GetSysClockFreq+0x2e4>
 810388e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103892:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103896:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810389a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810389e:	ee67 7a27 	vmul.f32	s15, s14, s15
 81038a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81038a6:	e021      	b.n	81038ec <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81038a8:	693b      	ldr	r3, [r7, #16]
 81038aa:	ee07 3a90 	vmov	s15, r3
 81038ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81038b2:	eddf 6a26 	vldr	s13, [pc, #152]	; 810394c <HAL_RCC_GetSysClockFreq+0x2ec>
 81038b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81038ba:	4b1e      	ldr	r3, [pc, #120]	; (8103934 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81038bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81038be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81038c2:	ee07 3a90 	vmov	s15, r3
 81038c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81038ca:	ed97 6a02 	vldr	s12, [r7, #8]
 81038ce:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8103944 <HAL_RCC_GetSysClockFreq+0x2e4>
 81038d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81038d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81038da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81038de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81038e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81038e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81038ea:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 81038ec:	4b11      	ldr	r3, [pc, #68]	; (8103934 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81038ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81038f0:	0a5b      	lsrs	r3, r3, #9
 81038f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81038f6:	3301      	adds	r3, #1
 81038f8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 81038fa:	683b      	ldr	r3, [r7, #0]
 81038fc:	ee07 3a90 	vmov	s15, r3
 8103900:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8103904:	edd7 6a07 	vldr	s13, [r7, #28]
 8103908:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810390c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103910:	ee17 3a90 	vmov	r3, s15
 8103914:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8103916:	e005      	b.n	8103924 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8103918:	2300      	movs	r3, #0
 810391a:	61bb      	str	r3, [r7, #24]
    break;
 810391c:	e002      	b.n	8103924 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 810391e:	4b07      	ldr	r3, [pc, #28]	; (810393c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8103920:	61bb      	str	r3, [r7, #24]
    break;
 8103922:	bf00      	nop
  }

  return sysclockfreq;
 8103924:	69bb      	ldr	r3, [r7, #24]
}
 8103926:	4618      	mov	r0, r3
 8103928:	3724      	adds	r7, #36	; 0x24
 810392a:	46bd      	mov	sp, r7
 810392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103930:	4770      	bx	lr
 8103932:	bf00      	nop
 8103934:	58024400 	.word	0x58024400
 8103938:	03d09000 	.word	0x03d09000
 810393c:	003d0900 	.word	0x003d0900
 8103940:	007a1200 	.word	0x007a1200
 8103944:	46000000 	.word	0x46000000
 8103948:	4c742400 	.word	0x4c742400
 810394c:	4a742400 	.word	0x4a742400
 8103950:	4af42400 	.word	0x4af42400

08103954 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8103954:	b580      	push	{r7, lr}
 8103956:	b082      	sub	sp, #8
 8103958:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810395a:	f7ff fe81 	bl	8103660 <HAL_RCC_GetSysClockFreq>
 810395e:	4602      	mov	r2, r0
 8103960:	4b11      	ldr	r3, [pc, #68]	; (81039a8 <HAL_RCC_GetHCLKFreq+0x54>)
 8103962:	699b      	ldr	r3, [r3, #24]
 8103964:	0a1b      	lsrs	r3, r3, #8
 8103966:	f003 030f 	and.w	r3, r3, #15
 810396a:	4910      	ldr	r1, [pc, #64]	; (81039ac <HAL_RCC_GetHCLKFreq+0x58>)
 810396c:	5ccb      	ldrb	r3, [r1, r3]
 810396e:	f003 031f 	and.w	r3, r3, #31
 8103972:	fa22 f303 	lsr.w	r3, r2, r3
 8103976:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8103978:	4b0b      	ldr	r3, [pc, #44]	; (81039a8 <HAL_RCC_GetHCLKFreq+0x54>)
 810397a:	699b      	ldr	r3, [r3, #24]
 810397c:	f003 030f 	and.w	r3, r3, #15
 8103980:	4a0a      	ldr	r2, [pc, #40]	; (81039ac <HAL_RCC_GetHCLKFreq+0x58>)
 8103982:	5cd3      	ldrb	r3, [r2, r3]
 8103984:	f003 031f 	and.w	r3, r3, #31
 8103988:	687a      	ldr	r2, [r7, #4]
 810398a:	fa22 f303 	lsr.w	r3, r2, r3
 810398e:	4a08      	ldr	r2, [pc, #32]	; (81039b0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8103990:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8103992:	4b07      	ldr	r3, [pc, #28]	; (81039b0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8103994:	681b      	ldr	r3, [r3, #0]
 8103996:	4a07      	ldr	r2, [pc, #28]	; (81039b4 <HAL_RCC_GetHCLKFreq+0x60>)
 8103998:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 810399a:	4b05      	ldr	r3, [pc, #20]	; (81039b0 <HAL_RCC_GetHCLKFreq+0x5c>)
 810399c:	681b      	ldr	r3, [r3, #0]
}
 810399e:	4618      	mov	r0, r3
 81039a0:	3708      	adds	r7, #8
 81039a2:	46bd      	mov	sp, r7
 81039a4:	bd80      	pop	{r7, pc}
 81039a6:	bf00      	nop
 81039a8:	58024400 	.word	0x58024400
 81039ac:	0810e730 	.word	0x0810e730
 81039b0:	10000004 	.word	0x10000004
 81039b4:	10000000 	.word	0x10000000

081039b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 81039b8:	b580      	push	{r7, lr}
 81039ba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 81039bc:	f7ff ffca 	bl	8103954 <HAL_RCC_GetHCLKFreq>
 81039c0:	4602      	mov	r2, r0
 81039c2:	4b06      	ldr	r3, [pc, #24]	; (81039dc <HAL_RCC_GetPCLK1Freq+0x24>)
 81039c4:	69db      	ldr	r3, [r3, #28]
 81039c6:	091b      	lsrs	r3, r3, #4
 81039c8:	f003 0307 	and.w	r3, r3, #7
 81039cc:	4904      	ldr	r1, [pc, #16]	; (81039e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 81039ce:	5ccb      	ldrb	r3, [r1, r3]
 81039d0:	f003 031f 	and.w	r3, r3, #31
 81039d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 81039d8:	4618      	mov	r0, r3
 81039da:	bd80      	pop	{r7, pc}
 81039dc:	58024400 	.word	0x58024400
 81039e0:	0810e730 	.word	0x0810e730

081039e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 81039e4:	b580      	push	{r7, lr}
 81039e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 81039e8:	f7ff ffb4 	bl	8103954 <HAL_RCC_GetHCLKFreq>
 81039ec:	4602      	mov	r2, r0
 81039ee:	4b06      	ldr	r3, [pc, #24]	; (8103a08 <HAL_RCC_GetPCLK2Freq+0x24>)
 81039f0:	69db      	ldr	r3, [r3, #28]
 81039f2:	0a1b      	lsrs	r3, r3, #8
 81039f4:	f003 0307 	and.w	r3, r3, #7
 81039f8:	4904      	ldr	r1, [pc, #16]	; (8103a0c <HAL_RCC_GetPCLK2Freq+0x28>)
 81039fa:	5ccb      	ldrb	r3, [r1, r3]
 81039fc:	f003 031f 	and.w	r3, r3, #31
 8103a00:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8103a04:	4618      	mov	r0, r3
 8103a06:	bd80      	pop	{r7, pc}
 8103a08:	58024400 	.word	0x58024400
 8103a0c:	0810e730 	.word	0x0810e730

08103a10 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8103a10:	b580      	push	{r7, lr}
 8103a12:	b086      	sub	sp, #24
 8103a14:	af00      	add	r7, sp, #0
 8103a16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8103a18:	2300      	movs	r3, #0
 8103a1a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8103a1c:	2300      	movs	r3, #0
 8103a1e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8103a20:	687b      	ldr	r3, [r7, #4]
 8103a22:	681b      	ldr	r3, [r3, #0]
 8103a24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8103a28:	2b00      	cmp	r3, #0
 8103a2a:	d03f      	beq.n	8103aac <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8103a2c:	687b      	ldr	r3, [r7, #4]
 8103a2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103a30:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103a34:	d02a      	beq.n	8103a8c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8103a36:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103a3a:	d824      	bhi.n	8103a86 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8103a3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103a40:	d018      	beq.n	8103a74 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8103a42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103a46:	d81e      	bhi.n	8103a86 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8103a48:	2b00      	cmp	r3, #0
 8103a4a:	d003      	beq.n	8103a54 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8103a4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103a50:	d007      	beq.n	8103a62 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8103a52:	e018      	b.n	8103a86 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103a54:	4ba3      	ldr	r3, [pc, #652]	; (8103ce4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103a58:	4aa2      	ldr	r2, [pc, #648]	; (8103ce4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103a5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103a5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8103a60:	e015      	b.n	8103a8e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8103a62:	687b      	ldr	r3, [r7, #4]
 8103a64:	3304      	adds	r3, #4
 8103a66:	2102      	movs	r1, #2
 8103a68:	4618      	mov	r0, r3
 8103a6a:	f001 f9d5 	bl	8104e18 <RCCEx_PLL2_Config>
 8103a6e:	4603      	mov	r3, r0
 8103a70:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8103a72:	e00c      	b.n	8103a8e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103a74:	687b      	ldr	r3, [r7, #4]
 8103a76:	3324      	adds	r3, #36	; 0x24
 8103a78:	2102      	movs	r1, #2
 8103a7a:	4618      	mov	r0, r3
 8103a7c:	f001 fa7e 	bl	8104f7c <RCCEx_PLL3_Config>
 8103a80:	4603      	mov	r3, r0
 8103a82:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8103a84:	e003      	b.n	8103a8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103a86:	2301      	movs	r3, #1
 8103a88:	75fb      	strb	r3, [r7, #23]
      break;
 8103a8a:	e000      	b.n	8103a8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8103a8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103a8e:	7dfb      	ldrb	r3, [r7, #23]
 8103a90:	2b00      	cmp	r3, #0
 8103a92:	d109      	bne.n	8103aa8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8103a94:	4b93      	ldr	r3, [pc, #588]	; (8103ce4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103a98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8103a9c:	687b      	ldr	r3, [r7, #4]
 8103a9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103aa0:	4990      	ldr	r1, [pc, #576]	; (8103ce4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103aa2:	4313      	orrs	r3, r2
 8103aa4:	650b      	str	r3, [r1, #80]	; 0x50
 8103aa6:	e001      	b.n	8103aac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103aa8:	7dfb      	ldrb	r3, [r7, #23]
 8103aaa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8103aac:	687b      	ldr	r3, [r7, #4]
 8103aae:	681b      	ldr	r3, [r3, #0]
 8103ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103ab4:	2b00      	cmp	r3, #0
 8103ab6:	d03d      	beq.n	8103b34 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8103ab8:	687b      	ldr	r3, [r7, #4]
 8103aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103abc:	2b04      	cmp	r3, #4
 8103abe:	d826      	bhi.n	8103b0e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8103ac0:	a201      	add	r2, pc, #4	; (adr r2, 8103ac8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8103ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103ac6:	bf00      	nop
 8103ac8:	08103add 	.word	0x08103add
 8103acc:	08103aeb 	.word	0x08103aeb
 8103ad0:	08103afd 	.word	0x08103afd
 8103ad4:	08103b15 	.word	0x08103b15
 8103ad8:	08103b15 	.word	0x08103b15
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103adc:	4b81      	ldr	r3, [pc, #516]	; (8103ce4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103ae0:	4a80      	ldr	r2, [pc, #512]	; (8103ce4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103ae2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103ae6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103ae8:	e015      	b.n	8103b16 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103aea:	687b      	ldr	r3, [r7, #4]
 8103aec:	3304      	adds	r3, #4
 8103aee:	2100      	movs	r1, #0
 8103af0:	4618      	mov	r0, r3
 8103af2:	f001 f991 	bl	8104e18 <RCCEx_PLL2_Config>
 8103af6:	4603      	mov	r3, r0
 8103af8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103afa:	e00c      	b.n	8103b16 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8103afc:	687b      	ldr	r3, [r7, #4]
 8103afe:	3324      	adds	r3, #36	; 0x24
 8103b00:	2100      	movs	r1, #0
 8103b02:	4618      	mov	r0, r3
 8103b04:	f001 fa3a 	bl	8104f7c <RCCEx_PLL3_Config>
 8103b08:	4603      	mov	r3, r0
 8103b0a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103b0c:	e003      	b.n	8103b16 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103b0e:	2301      	movs	r3, #1
 8103b10:	75fb      	strb	r3, [r7, #23]
      break;
 8103b12:	e000      	b.n	8103b16 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8103b14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103b16:	7dfb      	ldrb	r3, [r7, #23]
 8103b18:	2b00      	cmp	r3, #0
 8103b1a:	d109      	bne.n	8103b30 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8103b1c:	4b71      	ldr	r3, [pc, #452]	; (8103ce4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103b1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103b20:	f023 0207 	bic.w	r2, r3, #7
 8103b24:	687b      	ldr	r3, [r7, #4]
 8103b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103b28:	496e      	ldr	r1, [pc, #440]	; (8103ce4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103b2a:	4313      	orrs	r3, r2
 8103b2c:	650b      	str	r3, [r1, #80]	; 0x50
 8103b2e:	e001      	b.n	8103b34 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103b30:	7dfb      	ldrb	r3, [r7, #23]
 8103b32:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8103b34:	687b      	ldr	r3, [r7, #4]
 8103b36:	681b      	ldr	r3, [r3, #0]
 8103b38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8103b3c:	2b00      	cmp	r3, #0
 8103b3e:	d042      	beq.n	8103bc6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8103b40:	687b      	ldr	r3, [r7, #4]
 8103b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103b44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103b48:	d02b      	beq.n	8103ba2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8103b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103b4e:	d825      	bhi.n	8103b9c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8103b50:	2bc0      	cmp	r3, #192	; 0xc0
 8103b52:	d028      	beq.n	8103ba6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8103b54:	2bc0      	cmp	r3, #192	; 0xc0
 8103b56:	d821      	bhi.n	8103b9c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8103b58:	2b80      	cmp	r3, #128	; 0x80
 8103b5a:	d016      	beq.n	8103b8a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8103b5c:	2b80      	cmp	r3, #128	; 0x80
 8103b5e:	d81d      	bhi.n	8103b9c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8103b60:	2b00      	cmp	r3, #0
 8103b62:	d002      	beq.n	8103b6a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8103b64:	2b40      	cmp	r3, #64	; 0x40
 8103b66:	d007      	beq.n	8103b78 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8103b68:	e018      	b.n	8103b9c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103b6a:	4b5e      	ldr	r3, [pc, #376]	; (8103ce4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103b6e:	4a5d      	ldr	r2, [pc, #372]	; (8103ce4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103b70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103b74:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8103b76:	e017      	b.n	8103ba8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103b78:	687b      	ldr	r3, [r7, #4]
 8103b7a:	3304      	adds	r3, #4
 8103b7c:	2100      	movs	r1, #0
 8103b7e:	4618      	mov	r0, r3
 8103b80:	f001 f94a 	bl	8104e18 <RCCEx_PLL2_Config>
 8103b84:	4603      	mov	r3, r0
 8103b86:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8103b88:	e00e      	b.n	8103ba8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8103b8a:	687b      	ldr	r3, [r7, #4]
 8103b8c:	3324      	adds	r3, #36	; 0x24
 8103b8e:	2100      	movs	r1, #0
 8103b90:	4618      	mov	r0, r3
 8103b92:	f001 f9f3 	bl	8104f7c <RCCEx_PLL3_Config>
 8103b96:	4603      	mov	r3, r0
 8103b98:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8103b9a:	e005      	b.n	8103ba8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103b9c:	2301      	movs	r3, #1
 8103b9e:	75fb      	strb	r3, [r7, #23]
      break;
 8103ba0:	e002      	b.n	8103ba8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8103ba2:	bf00      	nop
 8103ba4:	e000      	b.n	8103ba8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8103ba6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103ba8:	7dfb      	ldrb	r3, [r7, #23]
 8103baa:	2b00      	cmp	r3, #0
 8103bac:	d109      	bne.n	8103bc2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8103bae:	4b4d      	ldr	r3, [pc, #308]	; (8103ce4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103bb2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8103bb6:	687b      	ldr	r3, [r7, #4]
 8103bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103bba:	494a      	ldr	r1, [pc, #296]	; (8103ce4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103bbc:	4313      	orrs	r3, r2
 8103bbe:	650b      	str	r3, [r1, #80]	; 0x50
 8103bc0:	e001      	b.n	8103bc6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103bc2:	7dfb      	ldrb	r3, [r7, #23]
 8103bc4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8103bc6:	687b      	ldr	r3, [r7, #4]
 8103bc8:	681b      	ldr	r3, [r3, #0]
 8103bca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8103bce:	2b00      	cmp	r3, #0
 8103bd0:	d049      	beq.n	8103c66 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8103bd2:	687b      	ldr	r3, [r7, #4]
 8103bd4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8103bd8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8103bdc:	d030      	beq.n	8103c40 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8103bde:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8103be2:	d82a      	bhi.n	8103c3a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8103be4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8103be8:	d02c      	beq.n	8103c44 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8103bea:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8103bee:	d824      	bhi.n	8103c3a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8103bf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103bf4:	d018      	beq.n	8103c28 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8103bf6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103bfa:	d81e      	bhi.n	8103c3a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8103bfc:	2b00      	cmp	r3, #0
 8103bfe:	d003      	beq.n	8103c08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8103c00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103c04:	d007      	beq.n	8103c16 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8103c06:	e018      	b.n	8103c3a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103c08:	4b36      	ldr	r3, [pc, #216]	; (8103ce4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103c0c:	4a35      	ldr	r2, [pc, #212]	; (8103ce4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103c0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103c12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103c14:	e017      	b.n	8103c46 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103c16:	687b      	ldr	r3, [r7, #4]
 8103c18:	3304      	adds	r3, #4
 8103c1a:	2100      	movs	r1, #0
 8103c1c:	4618      	mov	r0, r3
 8103c1e:	f001 f8fb 	bl	8104e18 <RCCEx_PLL2_Config>
 8103c22:	4603      	mov	r3, r0
 8103c24:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8103c26:	e00e      	b.n	8103c46 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8103c28:	687b      	ldr	r3, [r7, #4]
 8103c2a:	3324      	adds	r3, #36	; 0x24
 8103c2c:	2100      	movs	r1, #0
 8103c2e:	4618      	mov	r0, r3
 8103c30:	f001 f9a4 	bl	8104f7c <RCCEx_PLL3_Config>
 8103c34:	4603      	mov	r3, r0
 8103c36:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103c38:	e005      	b.n	8103c46 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8103c3a:	2301      	movs	r3, #1
 8103c3c:	75fb      	strb	r3, [r7, #23]
      break;
 8103c3e:	e002      	b.n	8103c46 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8103c40:	bf00      	nop
 8103c42:	e000      	b.n	8103c46 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8103c44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103c46:	7dfb      	ldrb	r3, [r7, #23]
 8103c48:	2b00      	cmp	r3, #0
 8103c4a:	d10a      	bne.n	8103c62 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8103c4c:	4b25      	ldr	r3, [pc, #148]	; (8103ce4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103c50:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8103c54:	687b      	ldr	r3, [r7, #4]
 8103c56:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8103c5a:	4922      	ldr	r1, [pc, #136]	; (8103ce4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103c5c:	4313      	orrs	r3, r2
 8103c5e:	658b      	str	r3, [r1, #88]	; 0x58
 8103c60:	e001      	b.n	8103c66 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103c62:	7dfb      	ldrb	r3, [r7, #23]
 8103c64:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8103c66:	687b      	ldr	r3, [r7, #4]
 8103c68:	681b      	ldr	r3, [r3, #0]
 8103c6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8103c6e:	2b00      	cmp	r3, #0
 8103c70:	d04b      	beq.n	8103d0a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8103c72:	687b      	ldr	r3, [r7, #4]
 8103c74:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8103c78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8103c7c:	d030      	beq.n	8103ce0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8103c7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8103c82:	d82a      	bhi.n	8103cda <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8103c84:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8103c88:	d02e      	beq.n	8103ce8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8103c8a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8103c8e:	d824      	bhi.n	8103cda <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8103c90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8103c94:	d018      	beq.n	8103cc8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8103c96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8103c9a:	d81e      	bhi.n	8103cda <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8103c9c:	2b00      	cmp	r3, #0
 8103c9e:	d003      	beq.n	8103ca8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8103ca0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8103ca4:	d007      	beq.n	8103cb6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8103ca6:	e018      	b.n	8103cda <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103ca8:	4b0e      	ldr	r3, [pc, #56]	; (8103ce4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103cac:	4a0d      	ldr	r2, [pc, #52]	; (8103ce4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103cae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103cb2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103cb4:	e019      	b.n	8103cea <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103cb6:	687b      	ldr	r3, [r7, #4]
 8103cb8:	3304      	adds	r3, #4
 8103cba:	2100      	movs	r1, #0
 8103cbc:	4618      	mov	r0, r3
 8103cbe:	f001 f8ab 	bl	8104e18 <RCCEx_PLL2_Config>
 8103cc2:	4603      	mov	r3, r0
 8103cc4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8103cc6:	e010      	b.n	8103cea <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103cc8:	687b      	ldr	r3, [r7, #4]
 8103cca:	3324      	adds	r3, #36	; 0x24
 8103ccc:	2100      	movs	r1, #0
 8103cce:	4618      	mov	r0, r3
 8103cd0:	f001 f954 	bl	8104f7c <RCCEx_PLL3_Config>
 8103cd4:	4603      	mov	r3, r0
 8103cd6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103cd8:	e007      	b.n	8103cea <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8103cda:	2301      	movs	r3, #1
 8103cdc:	75fb      	strb	r3, [r7, #23]
      break;
 8103cde:	e004      	b.n	8103cea <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8103ce0:	bf00      	nop
 8103ce2:	e002      	b.n	8103cea <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8103ce4:	58024400 	.word	0x58024400
      break;
 8103ce8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103cea:	7dfb      	ldrb	r3, [r7, #23]
 8103cec:	2b00      	cmp	r3, #0
 8103cee:	d10a      	bne.n	8103d06 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8103cf0:	4b99      	ldr	r3, [pc, #612]	; (8103f58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103cf4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8103cf8:	687b      	ldr	r3, [r7, #4]
 8103cfa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8103cfe:	4996      	ldr	r1, [pc, #600]	; (8103f58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103d00:	4313      	orrs	r3, r2
 8103d02:	658b      	str	r3, [r1, #88]	; 0x58
 8103d04:	e001      	b.n	8103d0a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103d06:	7dfb      	ldrb	r3, [r7, #23]
 8103d08:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8103d0a:	687b      	ldr	r3, [r7, #4]
 8103d0c:	681b      	ldr	r3, [r3, #0]
 8103d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8103d12:	2b00      	cmp	r3, #0
 8103d14:	d032      	beq.n	8103d7c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8103d16:	687b      	ldr	r3, [r7, #4]
 8103d18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103d1a:	2b30      	cmp	r3, #48	; 0x30
 8103d1c:	d01c      	beq.n	8103d58 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8103d1e:	2b30      	cmp	r3, #48	; 0x30
 8103d20:	d817      	bhi.n	8103d52 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8103d22:	2b20      	cmp	r3, #32
 8103d24:	d00c      	beq.n	8103d40 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8103d26:	2b20      	cmp	r3, #32
 8103d28:	d813      	bhi.n	8103d52 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8103d2a:	2b00      	cmp	r3, #0
 8103d2c:	d016      	beq.n	8103d5c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8103d2e:	2b10      	cmp	r3, #16
 8103d30:	d10f      	bne.n	8103d52 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103d32:	4b89      	ldr	r3, [pc, #548]	; (8103f58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103d36:	4a88      	ldr	r2, [pc, #544]	; (8103f58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103d3c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8103d3e:	e00e      	b.n	8103d5e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8103d40:	687b      	ldr	r3, [r7, #4]
 8103d42:	3304      	adds	r3, #4
 8103d44:	2102      	movs	r1, #2
 8103d46:	4618      	mov	r0, r3
 8103d48:	f001 f866 	bl	8104e18 <RCCEx_PLL2_Config>
 8103d4c:	4603      	mov	r3, r0
 8103d4e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8103d50:	e005      	b.n	8103d5e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8103d52:	2301      	movs	r3, #1
 8103d54:	75fb      	strb	r3, [r7, #23]
      break;
 8103d56:	e002      	b.n	8103d5e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8103d58:	bf00      	nop
 8103d5a:	e000      	b.n	8103d5e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8103d5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103d5e:	7dfb      	ldrb	r3, [r7, #23]
 8103d60:	2b00      	cmp	r3, #0
 8103d62:	d109      	bne.n	8103d78 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8103d64:	4b7c      	ldr	r3, [pc, #496]	; (8103f58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103d68:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8103d6c:	687b      	ldr	r3, [r7, #4]
 8103d6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103d70:	4979      	ldr	r1, [pc, #484]	; (8103f58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103d72:	4313      	orrs	r3, r2
 8103d74:	64cb      	str	r3, [r1, #76]	; 0x4c
 8103d76:	e001      	b.n	8103d7c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103d78:	7dfb      	ldrb	r3, [r7, #23]
 8103d7a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8103d7c:	687b      	ldr	r3, [r7, #4]
 8103d7e:	681b      	ldr	r3, [r3, #0]
 8103d80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8103d84:	2b00      	cmp	r3, #0
 8103d86:	d047      	beq.n	8103e18 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8103d88:	687b      	ldr	r3, [r7, #4]
 8103d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103d8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103d90:	d030      	beq.n	8103df4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8103d92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103d96:	d82a      	bhi.n	8103dee <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8103d98:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8103d9c:	d02c      	beq.n	8103df8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8103d9e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8103da2:	d824      	bhi.n	8103dee <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8103da4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103da8:	d018      	beq.n	8103ddc <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8103daa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103dae:	d81e      	bhi.n	8103dee <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8103db0:	2b00      	cmp	r3, #0
 8103db2:	d003      	beq.n	8103dbc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8103db4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103db8:	d007      	beq.n	8103dca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8103dba:	e018      	b.n	8103dee <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103dbc:	4b66      	ldr	r3, [pc, #408]	; (8103f58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103dc0:	4a65      	ldr	r2, [pc, #404]	; (8103f58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103dc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103dc6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8103dc8:	e017      	b.n	8103dfa <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103dca:	687b      	ldr	r3, [r7, #4]
 8103dcc:	3304      	adds	r3, #4
 8103dce:	2100      	movs	r1, #0
 8103dd0:	4618      	mov	r0, r3
 8103dd2:	f001 f821 	bl	8104e18 <RCCEx_PLL2_Config>
 8103dd6:	4603      	mov	r3, r0
 8103dd8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8103dda:	e00e      	b.n	8103dfa <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8103ddc:	687b      	ldr	r3, [r7, #4]
 8103dde:	3324      	adds	r3, #36	; 0x24
 8103de0:	2100      	movs	r1, #0
 8103de2:	4618      	mov	r0, r3
 8103de4:	f001 f8ca 	bl	8104f7c <RCCEx_PLL3_Config>
 8103de8:	4603      	mov	r3, r0
 8103dea:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8103dec:	e005      	b.n	8103dfa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103dee:	2301      	movs	r3, #1
 8103df0:	75fb      	strb	r3, [r7, #23]
      break;
 8103df2:	e002      	b.n	8103dfa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8103df4:	bf00      	nop
 8103df6:	e000      	b.n	8103dfa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8103df8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103dfa:	7dfb      	ldrb	r3, [r7, #23]
 8103dfc:	2b00      	cmp	r3, #0
 8103dfe:	d109      	bne.n	8103e14 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8103e00:	4b55      	ldr	r3, [pc, #340]	; (8103f58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103e04:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8103e08:	687b      	ldr	r3, [r7, #4]
 8103e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103e0c:	4952      	ldr	r1, [pc, #328]	; (8103f58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103e0e:	4313      	orrs	r3, r2
 8103e10:	650b      	str	r3, [r1, #80]	; 0x50
 8103e12:	e001      	b.n	8103e18 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103e14:	7dfb      	ldrb	r3, [r7, #23]
 8103e16:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8103e18:	687b      	ldr	r3, [r7, #4]
 8103e1a:	681b      	ldr	r3, [r3, #0]
 8103e1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8103e20:	2b00      	cmp	r3, #0
 8103e22:	d049      	beq.n	8103eb8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8103e24:	687b      	ldr	r3, [r7, #4]
 8103e26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103e28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8103e2c:	d02e      	beq.n	8103e8c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8103e2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8103e32:	d828      	bhi.n	8103e86 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8103e34:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8103e38:	d02a      	beq.n	8103e90 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8103e3a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8103e3e:	d822      	bhi.n	8103e86 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8103e40:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103e44:	d026      	beq.n	8103e94 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8103e46:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103e4a:	d81c      	bhi.n	8103e86 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8103e4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103e50:	d010      	beq.n	8103e74 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8103e52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103e56:	d816      	bhi.n	8103e86 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8103e58:	2b00      	cmp	r3, #0
 8103e5a:	d01d      	beq.n	8103e98 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8103e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103e60:	d111      	bne.n	8103e86 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103e62:	687b      	ldr	r3, [r7, #4]
 8103e64:	3304      	adds	r3, #4
 8103e66:	2101      	movs	r1, #1
 8103e68:	4618      	mov	r0, r3
 8103e6a:	f000 ffd5 	bl	8104e18 <RCCEx_PLL2_Config>
 8103e6e:	4603      	mov	r3, r0
 8103e70:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8103e72:	e012      	b.n	8103e9a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103e74:	687b      	ldr	r3, [r7, #4]
 8103e76:	3324      	adds	r3, #36	; 0x24
 8103e78:	2101      	movs	r1, #1
 8103e7a:	4618      	mov	r0, r3
 8103e7c:	f001 f87e 	bl	8104f7c <RCCEx_PLL3_Config>
 8103e80:	4603      	mov	r3, r0
 8103e82:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8103e84:	e009      	b.n	8103e9a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103e86:	2301      	movs	r3, #1
 8103e88:	75fb      	strb	r3, [r7, #23]
      break;
 8103e8a:	e006      	b.n	8103e9a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8103e8c:	bf00      	nop
 8103e8e:	e004      	b.n	8103e9a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8103e90:	bf00      	nop
 8103e92:	e002      	b.n	8103e9a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8103e94:	bf00      	nop
 8103e96:	e000      	b.n	8103e9a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8103e98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103e9a:	7dfb      	ldrb	r3, [r7, #23]
 8103e9c:	2b00      	cmp	r3, #0
 8103e9e:	d109      	bne.n	8103eb4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8103ea0:	4b2d      	ldr	r3, [pc, #180]	; (8103f58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103ea2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103ea4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8103ea8:	687b      	ldr	r3, [r7, #4]
 8103eaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103eac:	492a      	ldr	r1, [pc, #168]	; (8103f58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103eae:	4313      	orrs	r3, r2
 8103eb0:	650b      	str	r3, [r1, #80]	; 0x50
 8103eb2:	e001      	b.n	8103eb8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103eb4:	7dfb      	ldrb	r3, [r7, #23]
 8103eb6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8103eb8:	687b      	ldr	r3, [r7, #4]
 8103eba:	681b      	ldr	r3, [r3, #0]
 8103ebc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8103ec0:	2b00      	cmp	r3, #0
 8103ec2:	d04d      	beq.n	8103f60 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8103ec4:	687b      	ldr	r3, [r7, #4]
 8103ec6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8103eca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103ece:	d02e      	beq.n	8103f2e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8103ed0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103ed4:	d828      	bhi.n	8103f28 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8103ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103eda:	d02a      	beq.n	8103f32 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8103edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103ee0:	d822      	bhi.n	8103f28 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8103ee2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103ee6:	d026      	beq.n	8103f36 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8103ee8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103eec:	d81c      	bhi.n	8103f28 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8103eee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103ef2:	d010      	beq.n	8103f16 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8103ef4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103ef8:	d816      	bhi.n	8103f28 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8103efa:	2b00      	cmp	r3, #0
 8103efc:	d01d      	beq.n	8103f3a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8103efe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103f02:	d111      	bne.n	8103f28 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103f04:	687b      	ldr	r3, [r7, #4]
 8103f06:	3304      	adds	r3, #4
 8103f08:	2101      	movs	r1, #1
 8103f0a:	4618      	mov	r0, r3
 8103f0c:	f000 ff84 	bl	8104e18 <RCCEx_PLL2_Config>
 8103f10:	4603      	mov	r3, r0
 8103f12:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8103f14:	e012      	b.n	8103f3c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103f16:	687b      	ldr	r3, [r7, #4]
 8103f18:	3324      	adds	r3, #36	; 0x24
 8103f1a:	2101      	movs	r1, #1
 8103f1c:	4618      	mov	r0, r3
 8103f1e:	f001 f82d 	bl	8104f7c <RCCEx_PLL3_Config>
 8103f22:	4603      	mov	r3, r0
 8103f24:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8103f26:	e009      	b.n	8103f3c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8103f28:	2301      	movs	r3, #1
 8103f2a:	75fb      	strb	r3, [r7, #23]
      break;
 8103f2c:	e006      	b.n	8103f3c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8103f2e:	bf00      	nop
 8103f30:	e004      	b.n	8103f3c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8103f32:	bf00      	nop
 8103f34:	e002      	b.n	8103f3c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8103f36:	bf00      	nop
 8103f38:	e000      	b.n	8103f3c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8103f3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103f3c:	7dfb      	ldrb	r3, [r7, #23]
 8103f3e:	2b00      	cmp	r3, #0
 8103f40:	d10c      	bne.n	8103f5c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8103f42:	4b05      	ldr	r3, [pc, #20]	; (8103f58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103f46:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8103f4a:	687b      	ldr	r3, [r7, #4]
 8103f4c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8103f50:	4901      	ldr	r1, [pc, #4]	; (8103f58 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103f52:	4313      	orrs	r3, r2
 8103f54:	658b      	str	r3, [r1, #88]	; 0x58
 8103f56:	e003      	b.n	8103f60 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8103f58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103f5c:	7dfb      	ldrb	r3, [r7, #23]
 8103f5e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8103f60:	687b      	ldr	r3, [r7, #4]
 8103f62:	681b      	ldr	r3, [r3, #0]
 8103f64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8103f68:	2b00      	cmp	r3, #0
 8103f6a:	d02f      	beq.n	8103fcc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8103f6c:	687b      	ldr	r3, [r7, #4]
 8103f6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103f70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103f74:	d00e      	beq.n	8103f94 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8103f76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103f7a:	d814      	bhi.n	8103fa6 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8103f7c:	2b00      	cmp	r3, #0
 8103f7e:	d015      	beq.n	8103fac <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8103f80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103f84:	d10f      	bne.n	8103fa6 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103f86:	4bb0      	ldr	r3, [pc, #704]	; (8104248 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103f8a:	4aaf      	ldr	r2, [pc, #700]	; (8104248 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103f90:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8103f92:	e00c      	b.n	8103fae <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103f94:	687b      	ldr	r3, [r7, #4]
 8103f96:	3304      	adds	r3, #4
 8103f98:	2101      	movs	r1, #1
 8103f9a:	4618      	mov	r0, r3
 8103f9c:	f000 ff3c 	bl	8104e18 <RCCEx_PLL2_Config>
 8103fa0:	4603      	mov	r3, r0
 8103fa2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8103fa4:	e003      	b.n	8103fae <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103fa6:	2301      	movs	r3, #1
 8103fa8:	75fb      	strb	r3, [r7, #23]
      break;
 8103faa:	e000      	b.n	8103fae <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8103fac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103fae:	7dfb      	ldrb	r3, [r7, #23]
 8103fb0:	2b00      	cmp	r3, #0
 8103fb2:	d109      	bne.n	8103fc8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8103fb4:	4ba4      	ldr	r3, [pc, #656]	; (8104248 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103fb8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8103fbc:	687b      	ldr	r3, [r7, #4]
 8103fbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103fc0:	49a1      	ldr	r1, [pc, #644]	; (8104248 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103fc2:	4313      	orrs	r3, r2
 8103fc4:	650b      	str	r3, [r1, #80]	; 0x50
 8103fc6:	e001      	b.n	8103fcc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103fc8:	7dfb      	ldrb	r3, [r7, #23]
 8103fca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8103fcc:	687b      	ldr	r3, [r7, #4]
 8103fce:	681b      	ldr	r3, [r3, #0]
 8103fd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8103fd4:	2b00      	cmp	r3, #0
 8103fd6:	d032      	beq.n	810403e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8103fd8:	687b      	ldr	r3, [r7, #4]
 8103fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103fdc:	2b03      	cmp	r3, #3
 8103fde:	d81b      	bhi.n	8104018 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8103fe0:	a201      	add	r2, pc, #4	; (adr r2, 8103fe8 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8103fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103fe6:	bf00      	nop
 8103fe8:	0810401f 	.word	0x0810401f
 8103fec:	08103ff9 	.word	0x08103ff9
 8103ff0:	08104007 	.word	0x08104007
 8103ff4:	0810401f 	.word	0x0810401f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103ff8:	4b93      	ldr	r3, [pc, #588]	; (8104248 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103ffc:	4a92      	ldr	r2, [pc, #584]	; (8104248 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103ffe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104002:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8104004:	e00c      	b.n	8104020 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8104006:	687b      	ldr	r3, [r7, #4]
 8104008:	3304      	adds	r3, #4
 810400a:	2102      	movs	r1, #2
 810400c:	4618      	mov	r0, r3
 810400e:	f000 ff03 	bl	8104e18 <RCCEx_PLL2_Config>
 8104012:	4603      	mov	r3, r0
 8104014:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8104016:	e003      	b.n	8104020 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8104018:	2301      	movs	r3, #1
 810401a:	75fb      	strb	r3, [r7, #23]
      break;
 810401c:	e000      	b.n	8104020 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 810401e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104020:	7dfb      	ldrb	r3, [r7, #23]
 8104022:	2b00      	cmp	r3, #0
 8104024:	d109      	bne.n	810403a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8104026:	4b88      	ldr	r3, [pc, #544]	; (8104248 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810402a:	f023 0203 	bic.w	r2, r3, #3
 810402e:	687b      	ldr	r3, [r7, #4]
 8104030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104032:	4985      	ldr	r1, [pc, #532]	; (8104248 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104034:	4313      	orrs	r3, r2
 8104036:	64cb      	str	r3, [r1, #76]	; 0x4c
 8104038:	e001      	b.n	810403e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810403a:	7dfb      	ldrb	r3, [r7, #23]
 810403c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 810403e:	687b      	ldr	r3, [r7, #4]
 8104040:	681b      	ldr	r3, [r3, #0]
 8104042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8104046:	2b00      	cmp	r3, #0
 8104048:	f000 8088 	beq.w	810415c <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 810404c:	4b7f      	ldr	r3, [pc, #508]	; (810424c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 810404e:	681b      	ldr	r3, [r3, #0]
 8104050:	4a7e      	ldr	r2, [pc, #504]	; (810424c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8104052:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8104056:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8104058:	f7fe fa0a 	bl	8102470 <HAL_GetTick>
 810405c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810405e:	e009      	b.n	8104074 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8104060:	f7fe fa06 	bl	8102470 <HAL_GetTick>
 8104064:	4602      	mov	r2, r0
 8104066:	693b      	ldr	r3, [r7, #16]
 8104068:	1ad3      	subs	r3, r2, r3
 810406a:	2b64      	cmp	r3, #100	; 0x64
 810406c:	d902      	bls.n	8104074 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 810406e:	2303      	movs	r3, #3
 8104070:	75fb      	strb	r3, [r7, #23]
        break;
 8104072:	e005      	b.n	8104080 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8104074:	4b75      	ldr	r3, [pc, #468]	; (810424c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8104076:	681b      	ldr	r3, [r3, #0]
 8104078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810407c:	2b00      	cmp	r3, #0
 810407e:	d0ef      	beq.n	8104060 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8104080:	7dfb      	ldrb	r3, [r7, #23]
 8104082:	2b00      	cmp	r3, #0
 8104084:	d168      	bne.n	8104158 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8104086:	4b70      	ldr	r3, [pc, #448]	; (8104248 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104088:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 810408a:	687b      	ldr	r3, [r7, #4]
 810408c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8104090:	4053      	eors	r3, r2
 8104092:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8104096:	2b00      	cmp	r3, #0
 8104098:	d013      	beq.n	81040c2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 810409a:	4b6b      	ldr	r3, [pc, #428]	; (8104248 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810409c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810409e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81040a2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 81040a4:	4b68      	ldr	r3, [pc, #416]	; (8104248 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81040a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81040a8:	4a67      	ldr	r2, [pc, #412]	; (8104248 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81040aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 81040ae:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 81040b0:	4b65      	ldr	r3, [pc, #404]	; (8104248 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81040b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81040b4:	4a64      	ldr	r2, [pc, #400]	; (8104248 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81040b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81040ba:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 81040bc:	4a62      	ldr	r2, [pc, #392]	; (8104248 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81040be:	68fb      	ldr	r3, [r7, #12]
 81040c0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 81040c2:	687b      	ldr	r3, [r7, #4]
 81040c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81040c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81040cc:	d115      	bne.n	81040fa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81040ce:	f7fe f9cf 	bl	8102470 <HAL_GetTick>
 81040d2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81040d4:	e00b      	b.n	81040ee <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 81040d6:	f7fe f9cb 	bl	8102470 <HAL_GetTick>
 81040da:	4602      	mov	r2, r0
 81040dc:	693b      	ldr	r3, [r7, #16]
 81040de:	1ad3      	subs	r3, r2, r3
 81040e0:	f241 3288 	movw	r2, #5000	; 0x1388
 81040e4:	4293      	cmp	r3, r2
 81040e6:	d902      	bls.n	81040ee <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 81040e8:	2303      	movs	r3, #3
 81040ea:	75fb      	strb	r3, [r7, #23]
            break;
 81040ec:	e005      	b.n	81040fa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81040ee:	4b56      	ldr	r3, [pc, #344]	; (8104248 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81040f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81040f2:	f003 0302 	and.w	r3, r3, #2
 81040f6:	2b00      	cmp	r3, #0
 81040f8:	d0ed      	beq.n	81040d6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 81040fa:	7dfb      	ldrb	r3, [r7, #23]
 81040fc:	2b00      	cmp	r3, #0
 81040fe:	d128      	bne.n	8104152 <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8104100:	687b      	ldr	r3, [r7, #4]
 8104102:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8104106:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810410a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810410e:	d10f      	bne.n	8104130 <HAL_RCCEx_PeriphCLKConfig+0x720>
 8104110:	4b4d      	ldr	r3, [pc, #308]	; (8104248 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104112:	691b      	ldr	r3, [r3, #16]
 8104114:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8104118:	687b      	ldr	r3, [r7, #4]
 810411a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810411e:	091b      	lsrs	r3, r3, #4
 8104120:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8104124:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8104128:	4947      	ldr	r1, [pc, #284]	; (8104248 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810412a:	4313      	orrs	r3, r2
 810412c:	610b      	str	r3, [r1, #16]
 810412e:	e005      	b.n	810413c <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8104130:	4b45      	ldr	r3, [pc, #276]	; (8104248 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104132:	691b      	ldr	r3, [r3, #16]
 8104134:	4a44      	ldr	r2, [pc, #272]	; (8104248 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104136:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 810413a:	6113      	str	r3, [r2, #16]
 810413c:	4b42      	ldr	r3, [pc, #264]	; (8104248 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810413e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8104140:	687b      	ldr	r3, [r7, #4]
 8104142:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8104146:	f3c3 030b 	ubfx	r3, r3, #0, #12
 810414a:	493f      	ldr	r1, [pc, #252]	; (8104248 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810414c:	4313      	orrs	r3, r2
 810414e:	670b      	str	r3, [r1, #112]	; 0x70
 8104150:	e004      	b.n	810415c <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8104152:	7dfb      	ldrb	r3, [r7, #23]
 8104154:	75bb      	strb	r3, [r7, #22]
 8104156:	e001      	b.n	810415c <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104158:	7dfb      	ldrb	r3, [r7, #23]
 810415a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 810415c:	687b      	ldr	r3, [r7, #4]
 810415e:	681b      	ldr	r3, [r3, #0]
 8104160:	f003 0301 	and.w	r3, r3, #1
 8104164:	2b00      	cmp	r3, #0
 8104166:	f000 8083 	beq.w	8104270 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 810416a:	687b      	ldr	r3, [r7, #4]
 810416c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810416e:	2b28      	cmp	r3, #40	; 0x28
 8104170:	d866      	bhi.n	8104240 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8104172:	a201      	add	r2, pc, #4	; (adr r2, 8104178 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8104174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104178:	08104251 	.word	0x08104251
 810417c:	08104241 	.word	0x08104241
 8104180:	08104241 	.word	0x08104241
 8104184:	08104241 	.word	0x08104241
 8104188:	08104241 	.word	0x08104241
 810418c:	08104241 	.word	0x08104241
 8104190:	08104241 	.word	0x08104241
 8104194:	08104241 	.word	0x08104241
 8104198:	0810421d 	.word	0x0810421d
 810419c:	08104241 	.word	0x08104241
 81041a0:	08104241 	.word	0x08104241
 81041a4:	08104241 	.word	0x08104241
 81041a8:	08104241 	.word	0x08104241
 81041ac:	08104241 	.word	0x08104241
 81041b0:	08104241 	.word	0x08104241
 81041b4:	08104241 	.word	0x08104241
 81041b8:	0810422f 	.word	0x0810422f
 81041bc:	08104241 	.word	0x08104241
 81041c0:	08104241 	.word	0x08104241
 81041c4:	08104241 	.word	0x08104241
 81041c8:	08104241 	.word	0x08104241
 81041cc:	08104241 	.word	0x08104241
 81041d0:	08104241 	.word	0x08104241
 81041d4:	08104241 	.word	0x08104241
 81041d8:	08104251 	.word	0x08104251
 81041dc:	08104241 	.word	0x08104241
 81041e0:	08104241 	.word	0x08104241
 81041e4:	08104241 	.word	0x08104241
 81041e8:	08104241 	.word	0x08104241
 81041ec:	08104241 	.word	0x08104241
 81041f0:	08104241 	.word	0x08104241
 81041f4:	08104241 	.word	0x08104241
 81041f8:	08104251 	.word	0x08104251
 81041fc:	08104241 	.word	0x08104241
 8104200:	08104241 	.word	0x08104241
 8104204:	08104241 	.word	0x08104241
 8104208:	08104241 	.word	0x08104241
 810420c:	08104241 	.word	0x08104241
 8104210:	08104241 	.word	0x08104241
 8104214:	08104241 	.word	0x08104241
 8104218:	08104251 	.word	0x08104251
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810421c:	687b      	ldr	r3, [r7, #4]
 810421e:	3304      	adds	r3, #4
 8104220:	2101      	movs	r1, #1
 8104222:	4618      	mov	r0, r3
 8104224:	f000 fdf8 	bl	8104e18 <RCCEx_PLL2_Config>
 8104228:	4603      	mov	r3, r0
 810422a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 810422c:	e011      	b.n	8104252 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810422e:	687b      	ldr	r3, [r7, #4]
 8104230:	3324      	adds	r3, #36	; 0x24
 8104232:	2101      	movs	r1, #1
 8104234:	4618      	mov	r0, r3
 8104236:	f000 fea1 	bl	8104f7c <RCCEx_PLL3_Config>
 810423a:	4603      	mov	r3, r0
 810423c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 810423e:	e008      	b.n	8104252 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104240:	2301      	movs	r3, #1
 8104242:	75fb      	strb	r3, [r7, #23]
      break;
 8104244:	e005      	b.n	8104252 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8104246:	bf00      	nop
 8104248:	58024400 	.word	0x58024400
 810424c:	58024800 	.word	0x58024800
      break;
 8104250:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104252:	7dfb      	ldrb	r3, [r7, #23]
 8104254:	2b00      	cmp	r3, #0
 8104256:	d109      	bne.n	810426c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8104258:	4b96      	ldr	r3, [pc, #600]	; (81044b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810425a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810425c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8104260:	687b      	ldr	r3, [r7, #4]
 8104262:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8104264:	4993      	ldr	r1, [pc, #588]	; (81044b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8104266:	4313      	orrs	r3, r2
 8104268:	654b      	str	r3, [r1, #84]	; 0x54
 810426a:	e001      	b.n	8104270 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810426c:	7dfb      	ldrb	r3, [r7, #23]
 810426e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8104270:	687b      	ldr	r3, [r7, #4]
 8104272:	681b      	ldr	r3, [r3, #0]
 8104274:	f003 0302 	and.w	r3, r3, #2
 8104278:	2b00      	cmp	r3, #0
 810427a:	d038      	beq.n	81042ee <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 810427c:	687b      	ldr	r3, [r7, #4]
 810427e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8104280:	2b05      	cmp	r3, #5
 8104282:	d821      	bhi.n	81042c8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8104284:	a201      	add	r2, pc, #4	; (adr r2, 810428c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8104286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810428a:	bf00      	nop
 810428c:	081042cf 	.word	0x081042cf
 8104290:	081042a5 	.word	0x081042a5
 8104294:	081042b7 	.word	0x081042b7
 8104298:	081042cf 	.word	0x081042cf
 810429c:	081042cf 	.word	0x081042cf
 81042a0:	081042cf 	.word	0x081042cf
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81042a4:	687b      	ldr	r3, [r7, #4]
 81042a6:	3304      	adds	r3, #4
 81042a8:	2101      	movs	r1, #1
 81042aa:	4618      	mov	r0, r3
 81042ac:	f000 fdb4 	bl	8104e18 <RCCEx_PLL2_Config>
 81042b0:	4603      	mov	r3, r0
 81042b2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 81042b4:	e00c      	b.n	81042d0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81042b6:	687b      	ldr	r3, [r7, #4]
 81042b8:	3324      	adds	r3, #36	; 0x24
 81042ba:	2101      	movs	r1, #1
 81042bc:	4618      	mov	r0, r3
 81042be:	f000 fe5d 	bl	8104f7c <RCCEx_PLL3_Config>
 81042c2:	4603      	mov	r3, r0
 81042c4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 81042c6:	e003      	b.n	81042d0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81042c8:	2301      	movs	r3, #1
 81042ca:	75fb      	strb	r3, [r7, #23]
      break;
 81042cc:	e000      	b.n	81042d0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 81042ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 81042d0:	7dfb      	ldrb	r3, [r7, #23]
 81042d2:	2b00      	cmp	r3, #0
 81042d4:	d109      	bne.n	81042ea <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 81042d6:	4b77      	ldr	r3, [pc, #476]	; (81044b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81042d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81042da:	f023 0207 	bic.w	r2, r3, #7
 81042de:	687b      	ldr	r3, [r7, #4]
 81042e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81042e2:	4974      	ldr	r1, [pc, #464]	; (81044b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81042e4:	4313      	orrs	r3, r2
 81042e6:	654b      	str	r3, [r1, #84]	; 0x54
 81042e8:	e001      	b.n	81042ee <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81042ea:	7dfb      	ldrb	r3, [r7, #23]
 81042ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 81042ee:	687b      	ldr	r3, [r7, #4]
 81042f0:	681b      	ldr	r3, [r3, #0]
 81042f2:	f003 0304 	and.w	r3, r3, #4
 81042f6:	2b00      	cmp	r3, #0
 81042f8:	d03a      	beq.n	8104370 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 81042fa:	687b      	ldr	r3, [r7, #4]
 81042fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8104300:	2b05      	cmp	r3, #5
 8104302:	d821      	bhi.n	8104348 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8104304:	a201      	add	r2, pc, #4	; (adr r2, 810430c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8104306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810430a:	bf00      	nop
 810430c:	0810434f 	.word	0x0810434f
 8104310:	08104325 	.word	0x08104325
 8104314:	08104337 	.word	0x08104337
 8104318:	0810434f 	.word	0x0810434f
 810431c:	0810434f 	.word	0x0810434f
 8104320:	0810434f 	.word	0x0810434f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8104324:	687b      	ldr	r3, [r7, #4]
 8104326:	3304      	adds	r3, #4
 8104328:	2101      	movs	r1, #1
 810432a:	4618      	mov	r0, r3
 810432c:	f000 fd74 	bl	8104e18 <RCCEx_PLL2_Config>
 8104330:	4603      	mov	r3, r0
 8104332:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8104334:	e00c      	b.n	8104350 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8104336:	687b      	ldr	r3, [r7, #4]
 8104338:	3324      	adds	r3, #36	; 0x24
 810433a:	2101      	movs	r1, #1
 810433c:	4618      	mov	r0, r3
 810433e:	f000 fe1d 	bl	8104f7c <RCCEx_PLL3_Config>
 8104342:	4603      	mov	r3, r0
 8104344:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8104346:	e003      	b.n	8104350 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104348:	2301      	movs	r3, #1
 810434a:	75fb      	strb	r3, [r7, #23]
      break;
 810434c:	e000      	b.n	8104350 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 810434e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104350:	7dfb      	ldrb	r3, [r7, #23]
 8104352:	2b00      	cmp	r3, #0
 8104354:	d10a      	bne.n	810436c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8104356:	4b57      	ldr	r3, [pc, #348]	; (81044b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8104358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810435a:	f023 0207 	bic.w	r2, r3, #7
 810435e:	687b      	ldr	r3, [r7, #4]
 8104360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8104364:	4953      	ldr	r1, [pc, #332]	; (81044b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8104366:	4313      	orrs	r3, r2
 8104368:	658b      	str	r3, [r1, #88]	; 0x58
 810436a:	e001      	b.n	8104370 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810436c:	7dfb      	ldrb	r3, [r7, #23]
 810436e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8104370:	687b      	ldr	r3, [r7, #4]
 8104372:	681b      	ldr	r3, [r3, #0]
 8104374:	f003 0320 	and.w	r3, r3, #32
 8104378:	2b00      	cmp	r3, #0
 810437a:	d04b      	beq.n	8104414 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 810437c:	687b      	ldr	r3, [r7, #4]
 810437e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8104382:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8104386:	d02e      	beq.n	81043e6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8104388:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810438c:	d828      	bhi.n	81043e0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 810438e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104392:	d02a      	beq.n	81043ea <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8104394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104398:	d822      	bhi.n	81043e0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 810439a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810439e:	d026      	beq.n	81043ee <HAL_RCCEx_PeriphCLKConfig+0x9de>
 81043a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81043a4:	d81c      	bhi.n	81043e0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 81043a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81043aa:	d010      	beq.n	81043ce <HAL_RCCEx_PeriphCLKConfig+0x9be>
 81043ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81043b0:	d816      	bhi.n	81043e0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 81043b2:	2b00      	cmp	r3, #0
 81043b4:	d01d      	beq.n	81043f2 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 81043b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81043ba:	d111      	bne.n	81043e0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81043bc:	687b      	ldr	r3, [r7, #4]
 81043be:	3304      	adds	r3, #4
 81043c0:	2100      	movs	r1, #0
 81043c2:	4618      	mov	r0, r3
 81043c4:	f000 fd28 	bl	8104e18 <RCCEx_PLL2_Config>
 81043c8:	4603      	mov	r3, r0
 81043ca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 81043cc:	e012      	b.n	81043f4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81043ce:	687b      	ldr	r3, [r7, #4]
 81043d0:	3324      	adds	r3, #36	; 0x24
 81043d2:	2102      	movs	r1, #2
 81043d4:	4618      	mov	r0, r3
 81043d6:	f000 fdd1 	bl	8104f7c <RCCEx_PLL3_Config>
 81043da:	4603      	mov	r3, r0
 81043dc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 81043de:	e009      	b.n	81043f4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81043e0:	2301      	movs	r3, #1
 81043e2:	75fb      	strb	r3, [r7, #23]
      break;
 81043e4:	e006      	b.n	81043f4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81043e6:	bf00      	nop
 81043e8:	e004      	b.n	81043f4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81043ea:	bf00      	nop
 81043ec:	e002      	b.n	81043f4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81043ee:	bf00      	nop
 81043f0:	e000      	b.n	81043f4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81043f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81043f4:	7dfb      	ldrb	r3, [r7, #23]
 81043f6:	2b00      	cmp	r3, #0
 81043f8:	d10a      	bne.n	8104410 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 81043fa:	4b2e      	ldr	r3, [pc, #184]	; (81044b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81043fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81043fe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8104402:	687b      	ldr	r3, [r7, #4]
 8104404:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8104408:	492a      	ldr	r1, [pc, #168]	; (81044b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810440a:	4313      	orrs	r3, r2
 810440c:	654b      	str	r3, [r1, #84]	; 0x54
 810440e:	e001      	b.n	8104414 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104410:	7dfb      	ldrb	r3, [r7, #23]
 8104412:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8104414:	687b      	ldr	r3, [r7, #4]
 8104416:	681b      	ldr	r3, [r3, #0]
 8104418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810441c:	2b00      	cmp	r3, #0
 810441e:	d04d      	beq.n	81044bc <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8104420:	687b      	ldr	r3, [r7, #4]
 8104422:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8104426:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 810442a:	d02e      	beq.n	810448a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 810442c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8104430:	d828      	bhi.n	8104484 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8104432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104436:	d02a      	beq.n	810448e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8104438:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810443c:	d822      	bhi.n	8104484 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 810443e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8104442:	d026      	beq.n	8104492 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8104444:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8104448:	d81c      	bhi.n	8104484 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 810444a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810444e:	d010      	beq.n	8104472 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8104450:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8104454:	d816      	bhi.n	8104484 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8104456:	2b00      	cmp	r3, #0
 8104458:	d01d      	beq.n	8104496 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 810445a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 810445e:	d111      	bne.n	8104484 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104460:	687b      	ldr	r3, [r7, #4]
 8104462:	3304      	adds	r3, #4
 8104464:	2100      	movs	r1, #0
 8104466:	4618      	mov	r0, r3
 8104468:	f000 fcd6 	bl	8104e18 <RCCEx_PLL2_Config>
 810446c:	4603      	mov	r3, r0
 810446e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8104470:	e012      	b.n	8104498 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8104472:	687b      	ldr	r3, [r7, #4]
 8104474:	3324      	adds	r3, #36	; 0x24
 8104476:	2102      	movs	r1, #2
 8104478:	4618      	mov	r0, r3
 810447a:	f000 fd7f 	bl	8104f7c <RCCEx_PLL3_Config>
 810447e:	4603      	mov	r3, r0
 8104480:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8104482:	e009      	b.n	8104498 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104484:	2301      	movs	r3, #1
 8104486:	75fb      	strb	r3, [r7, #23]
      break;
 8104488:	e006      	b.n	8104498 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 810448a:	bf00      	nop
 810448c:	e004      	b.n	8104498 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 810448e:	bf00      	nop
 8104490:	e002      	b.n	8104498 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8104492:	bf00      	nop
 8104494:	e000      	b.n	8104498 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8104496:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104498:	7dfb      	ldrb	r3, [r7, #23]
 810449a:	2b00      	cmp	r3, #0
 810449c:	d10c      	bne.n	81044b8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 810449e:	4b05      	ldr	r3, [pc, #20]	; (81044b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81044a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81044a2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 81044a6:	687b      	ldr	r3, [r7, #4]
 81044a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 81044ac:	4901      	ldr	r1, [pc, #4]	; (81044b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81044ae:	4313      	orrs	r3, r2
 81044b0:	658b      	str	r3, [r1, #88]	; 0x58
 81044b2:	e003      	b.n	81044bc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 81044b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81044b8:	7dfb      	ldrb	r3, [r7, #23]
 81044ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 81044bc:	687b      	ldr	r3, [r7, #4]
 81044be:	681b      	ldr	r3, [r3, #0]
 81044c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81044c4:	2b00      	cmp	r3, #0
 81044c6:	d04b      	beq.n	8104560 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 81044c8:	687b      	ldr	r3, [r7, #4]
 81044ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81044ce:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81044d2:	d02e      	beq.n	8104532 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 81044d4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81044d8:	d828      	bhi.n	810452c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 81044da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81044de:	d02a      	beq.n	8104536 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 81044e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81044e4:	d822      	bhi.n	810452c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 81044e6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81044ea:	d026      	beq.n	810453a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 81044ec:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81044f0:	d81c      	bhi.n	810452c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 81044f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81044f6:	d010      	beq.n	810451a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 81044f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81044fc:	d816      	bhi.n	810452c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 81044fe:	2b00      	cmp	r3, #0
 8104500:	d01d      	beq.n	810453e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8104502:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8104506:	d111      	bne.n	810452c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104508:	687b      	ldr	r3, [r7, #4]
 810450a:	3304      	adds	r3, #4
 810450c:	2100      	movs	r1, #0
 810450e:	4618      	mov	r0, r3
 8104510:	f000 fc82 	bl	8104e18 <RCCEx_PLL2_Config>
 8104514:	4603      	mov	r3, r0
 8104516:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8104518:	e012      	b.n	8104540 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810451a:	687b      	ldr	r3, [r7, #4]
 810451c:	3324      	adds	r3, #36	; 0x24
 810451e:	2102      	movs	r1, #2
 8104520:	4618      	mov	r0, r3
 8104522:	f000 fd2b 	bl	8104f7c <RCCEx_PLL3_Config>
 8104526:	4603      	mov	r3, r0
 8104528:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 810452a:	e009      	b.n	8104540 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810452c:	2301      	movs	r3, #1
 810452e:	75fb      	strb	r3, [r7, #23]
      break;
 8104530:	e006      	b.n	8104540 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8104532:	bf00      	nop
 8104534:	e004      	b.n	8104540 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8104536:	bf00      	nop
 8104538:	e002      	b.n	8104540 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 810453a:	bf00      	nop
 810453c:	e000      	b.n	8104540 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 810453e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104540:	7dfb      	ldrb	r3, [r7, #23]
 8104542:	2b00      	cmp	r3, #0
 8104544:	d10a      	bne.n	810455c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8104546:	4b9d      	ldr	r3, [pc, #628]	; (81047bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810454a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 810454e:	687b      	ldr	r3, [r7, #4]
 8104550:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8104554:	4999      	ldr	r1, [pc, #612]	; (81047bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104556:	4313      	orrs	r3, r2
 8104558:	658b      	str	r3, [r1, #88]	; 0x58
 810455a:	e001      	b.n	8104560 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810455c:	7dfb      	ldrb	r3, [r7, #23]
 810455e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8104560:	687b      	ldr	r3, [r7, #4]
 8104562:	681b      	ldr	r3, [r3, #0]
 8104564:	f003 0308 	and.w	r3, r3, #8
 8104568:	2b00      	cmp	r3, #0
 810456a:	d01a      	beq.n	81045a2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 810456c:	687b      	ldr	r3, [r7, #4]
 810456e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8104572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104576:	d10a      	bne.n	810458e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8104578:	687b      	ldr	r3, [r7, #4]
 810457a:	3324      	adds	r3, #36	; 0x24
 810457c:	2102      	movs	r1, #2
 810457e:	4618      	mov	r0, r3
 8104580:	f000 fcfc 	bl	8104f7c <RCCEx_PLL3_Config>
 8104584:	4603      	mov	r3, r0
 8104586:	2b00      	cmp	r3, #0
 8104588:	d001      	beq.n	810458e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 810458a:	2301      	movs	r3, #1
 810458c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 810458e:	4b8b      	ldr	r3, [pc, #556]	; (81047bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104592:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8104596:	687b      	ldr	r3, [r7, #4]
 8104598:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810459c:	4987      	ldr	r1, [pc, #540]	; (81047bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810459e:	4313      	orrs	r3, r2
 81045a0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 81045a2:	687b      	ldr	r3, [r7, #4]
 81045a4:	681b      	ldr	r3, [r3, #0]
 81045a6:	f003 0310 	and.w	r3, r3, #16
 81045aa:	2b00      	cmp	r3, #0
 81045ac:	d01a      	beq.n	81045e4 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 81045ae:	687b      	ldr	r3, [r7, #4]
 81045b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81045b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81045b8:	d10a      	bne.n	81045d0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 81045ba:	687b      	ldr	r3, [r7, #4]
 81045bc:	3324      	adds	r3, #36	; 0x24
 81045be:	2102      	movs	r1, #2
 81045c0:	4618      	mov	r0, r3
 81045c2:	f000 fcdb 	bl	8104f7c <RCCEx_PLL3_Config>
 81045c6:	4603      	mov	r3, r0
 81045c8:	2b00      	cmp	r3, #0
 81045ca:	d001      	beq.n	81045d0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 81045cc:	2301      	movs	r3, #1
 81045ce:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 81045d0:	4b7a      	ldr	r3, [pc, #488]	; (81047bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81045d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81045d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81045d8:	687b      	ldr	r3, [r7, #4]
 81045da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81045de:	4977      	ldr	r1, [pc, #476]	; (81047bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81045e0:	4313      	orrs	r3, r2
 81045e2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 81045e4:	687b      	ldr	r3, [r7, #4]
 81045e6:	681b      	ldr	r3, [r3, #0]
 81045e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 81045ec:	2b00      	cmp	r3, #0
 81045ee:	d034      	beq.n	810465a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 81045f0:	687b      	ldr	r3, [r7, #4]
 81045f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81045f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81045fa:	d01d      	beq.n	8104638 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 81045fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104600:	d817      	bhi.n	8104632 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8104602:	2b00      	cmp	r3, #0
 8104604:	d003      	beq.n	810460e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8104606:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810460a:	d009      	beq.n	8104620 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 810460c:	e011      	b.n	8104632 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810460e:	687b      	ldr	r3, [r7, #4]
 8104610:	3304      	adds	r3, #4
 8104612:	2100      	movs	r1, #0
 8104614:	4618      	mov	r0, r3
 8104616:	f000 fbff 	bl	8104e18 <RCCEx_PLL2_Config>
 810461a:	4603      	mov	r3, r0
 810461c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 810461e:	e00c      	b.n	810463a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8104620:	687b      	ldr	r3, [r7, #4]
 8104622:	3324      	adds	r3, #36	; 0x24
 8104624:	2102      	movs	r1, #2
 8104626:	4618      	mov	r0, r3
 8104628:	f000 fca8 	bl	8104f7c <RCCEx_PLL3_Config>
 810462c:	4603      	mov	r3, r0
 810462e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8104630:	e003      	b.n	810463a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104632:	2301      	movs	r3, #1
 8104634:	75fb      	strb	r3, [r7, #23]
      break;
 8104636:	e000      	b.n	810463a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8104638:	bf00      	nop
    }

    if(ret == HAL_OK)
 810463a:	7dfb      	ldrb	r3, [r7, #23]
 810463c:	2b00      	cmp	r3, #0
 810463e:	d10a      	bne.n	8104656 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8104640:	4b5e      	ldr	r3, [pc, #376]	; (81047bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104644:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8104648:	687b      	ldr	r3, [r7, #4]
 810464a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 810464e:	495b      	ldr	r1, [pc, #364]	; (81047bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104650:	4313      	orrs	r3, r2
 8104652:	658b      	str	r3, [r1, #88]	; 0x58
 8104654:	e001      	b.n	810465a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104656:	7dfb      	ldrb	r3, [r7, #23]
 8104658:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 810465a:	687b      	ldr	r3, [r7, #4]
 810465c:	681b      	ldr	r3, [r3, #0]
 810465e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8104662:	2b00      	cmp	r3, #0
 8104664:	d033      	beq.n	81046ce <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8104666:	687b      	ldr	r3, [r7, #4]
 8104668:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810466c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104670:	d01c      	beq.n	81046ac <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8104672:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104676:	d816      	bhi.n	81046a6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8104678:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810467c:	d003      	beq.n	8104686 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 810467e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104682:	d007      	beq.n	8104694 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8104684:	e00f      	b.n	81046a6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104686:	4b4d      	ldr	r3, [pc, #308]	; (81047bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810468a:	4a4c      	ldr	r2, [pc, #304]	; (81047bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810468c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104690:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8104692:	e00c      	b.n	81046ae <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8104694:	687b      	ldr	r3, [r7, #4]
 8104696:	3324      	adds	r3, #36	; 0x24
 8104698:	2101      	movs	r1, #1
 810469a:	4618      	mov	r0, r3
 810469c:	f000 fc6e 	bl	8104f7c <RCCEx_PLL3_Config>
 81046a0:	4603      	mov	r3, r0
 81046a2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 81046a4:	e003      	b.n	81046ae <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81046a6:	2301      	movs	r3, #1
 81046a8:	75fb      	strb	r3, [r7, #23]
      break;
 81046aa:	e000      	b.n	81046ae <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 81046ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 81046ae:	7dfb      	ldrb	r3, [r7, #23]
 81046b0:	2b00      	cmp	r3, #0
 81046b2:	d10a      	bne.n	81046ca <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 81046b4:	4b41      	ldr	r3, [pc, #260]	; (81047bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81046b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81046b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 81046bc:	687b      	ldr	r3, [r7, #4]
 81046be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81046c2:	493e      	ldr	r1, [pc, #248]	; (81047bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81046c4:	4313      	orrs	r3, r2
 81046c6:	654b      	str	r3, [r1, #84]	; 0x54
 81046c8:	e001      	b.n	81046ce <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81046ca:	7dfb      	ldrb	r3, [r7, #23]
 81046cc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 81046ce:	687b      	ldr	r3, [r7, #4]
 81046d0:	681b      	ldr	r3, [r3, #0]
 81046d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81046d6:	2b00      	cmp	r3, #0
 81046d8:	d029      	beq.n	810472e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 81046da:	687b      	ldr	r3, [r7, #4]
 81046dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81046de:	2b00      	cmp	r3, #0
 81046e0:	d003      	beq.n	81046ea <HAL_RCCEx_PeriphCLKConfig+0xcda>
 81046e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81046e6:	d007      	beq.n	81046f8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 81046e8:	e00f      	b.n	810470a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81046ea:	4b34      	ldr	r3, [pc, #208]	; (81047bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81046ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81046ee:	4a33      	ldr	r2, [pc, #204]	; (81047bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81046f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81046f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 81046f6:	e00b      	b.n	8104710 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81046f8:	687b      	ldr	r3, [r7, #4]
 81046fa:	3304      	adds	r3, #4
 81046fc:	2102      	movs	r1, #2
 81046fe:	4618      	mov	r0, r3
 8104700:	f000 fb8a 	bl	8104e18 <RCCEx_PLL2_Config>
 8104704:	4603      	mov	r3, r0
 8104706:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8104708:	e002      	b.n	8104710 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 810470a:	2301      	movs	r3, #1
 810470c:	75fb      	strb	r3, [r7, #23]
      break;
 810470e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104710:	7dfb      	ldrb	r3, [r7, #23]
 8104712:	2b00      	cmp	r3, #0
 8104714:	d109      	bne.n	810472a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8104716:	4b29      	ldr	r3, [pc, #164]	; (81047bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810471a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 810471e:	687b      	ldr	r3, [r7, #4]
 8104720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104722:	4926      	ldr	r1, [pc, #152]	; (81047bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104724:	4313      	orrs	r3, r2
 8104726:	64cb      	str	r3, [r1, #76]	; 0x4c
 8104728:	e001      	b.n	810472e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810472a:	7dfb      	ldrb	r3, [r7, #23]
 810472c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 810472e:	687b      	ldr	r3, [r7, #4]
 8104730:	681b      	ldr	r3, [r3, #0]
 8104732:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104736:	2b00      	cmp	r3, #0
 8104738:	d00a      	beq.n	8104750 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 810473a:	687b      	ldr	r3, [r7, #4]
 810473c:	3324      	adds	r3, #36	; 0x24
 810473e:	2102      	movs	r1, #2
 8104740:	4618      	mov	r0, r3
 8104742:	f000 fc1b 	bl	8104f7c <RCCEx_PLL3_Config>
 8104746:	4603      	mov	r3, r0
 8104748:	2b00      	cmp	r3, #0
 810474a:	d001      	beq.n	8104750 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 810474c:	2301      	movs	r3, #1
 810474e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8104750:	687b      	ldr	r3, [r7, #4]
 8104752:	681b      	ldr	r3, [r3, #0]
 8104754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104758:	2b00      	cmp	r3, #0
 810475a:	d033      	beq.n	81047c4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 810475c:	687b      	ldr	r3, [r7, #4]
 810475e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104760:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8104764:	d017      	beq.n	8104796 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8104766:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810476a:	d811      	bhi.n	8104790 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 810476c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8104770:	d013      	beq.n	810479a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8104772:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8104776:	d80b      	bhi.n	8104790 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8104778:	2b00      	cmp	r3, #0
 810477a:	d010      	beq.n	810479e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 810477c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104780:	d106      	bne.n	8104790 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104782:	4b0e      	ldr	r3, [pc, #56]	; (81047bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104786:	4a0d      	ldr	r2, [pc, #52]	; (81047bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810478c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 810478e:	e007      	b.n	81047a0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104790:	2301      	movs	r3, #1
 8104792:	75fb      	strb	r3, [r7, #23]
      break;
 8104794:	e004      	b.n	81047a0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8104796:	bf00      	nop
 8104798:	e002      	b.n	81047a0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 810479a:	bf00      	nop
 810479c:	e000      	b.n	81047a0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 810479e:	bf00      	nop
    }

    if(ret == HAL_OK)
 81047a0:	7dfb      	ldrb	r3, [r7, #23]
 81047a2:	2b00      	cmp	r3, #0
 81047a4:	d10c      	bne.n	81047c0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 81047a6:	4b05      	ldr	r3, [pc, #20]	; (81047bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81047a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81047aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81047ae:	687b      	ldr	r3, [r7, #4]
 81047b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81047b2:	4902      	ldr	r1, [pc, #8]	; (81047bc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81047b4:	4313      	orrs	r3, r2
 81047b6:	654b      	str	r3, [r1, #84]	; 0x54
 81047b8:	e004      	b.n	81047c4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 81047ba:	bf00      	nop
 81047bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81047c0:	7dfb      	ldrb	r3, [r7, #23]
 81047c2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 81047c4:	687b      	ldr	r3, [r7, #4]
 81047c6:	681b      	ldr	r3, [r3, #0]
 81047c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81047cc:	2b00      	cmp	r3, #0
 81047ce:	d008      	beq.n	81047e2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 81047d0:	4b31      	ldr	r3, [pc, #196]	; (8104898 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81047d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81047d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 81047d8:	687b      	ldr	r3, [r7, #4]
 81047da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81047dc:	492e      	ldr	r1, [pc, #184]	; (8104898 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81047de:	4313      	orrs	r3, r2
 81047e0:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 81047e2:	687b      	ldr	r3, [r7, #4]
 81047e4:	681b      	ldr	r3, [r3, #0]
 81047e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 81047ea:	2b00      	cmp	r3, #0
 81047ec:	d009      	beq.n	8104802 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 81047ee:	4b2a      	ldr	r3, [pc, #168]	; (8104898 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81047f0:	691b      	ldr	r3, [r3, #16]
 81047f2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 81047f6:	687b      	ldr	r3, [r7, #4]
 81047f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 81047fc:	4926      	ldr	r1, [pc, #152]	; (8104898 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81047fe:	4313      	orrs	r3, r2
 8104800:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8104802:	687b      	ldr	r3, [r7, #4]
 8104804:	681b      	ldr	r3, [r3, #0]
 8104806:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 810480a:	2b00      	cmp	r3, #0
 810480c:	d008      	beq.n	8104820 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 810480e:	4b22      	ldr	r3, [pc, #136]	; (8104898 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104810:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104812:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8104816:	687b      	ldr	r3, [r7, #4]
 8104818:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810481a:	491f      	ldr	r1, [pc, #124]	; (8104898 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810481c:	4313      	orrs	r3, r2
 810481e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8104820:	687b      	ldr	r3, [r7, #4]
 8104822:	681b      	ldr	r3, [r3, #0]
 8104824:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8104828:	2b00      	cmp	r3, #0
 810482a:	d00d      	beq.n	8104848 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 810482c:	4b1a      	ldr	r3, [pc, #104]	; (8104898 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810482e:	691b      	ldr	r3, [r3, #16]
 8104830:	4a19      	ldr	r2, [pc, #100]	; (8104898 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104832:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8104836:	6113      	str	r3, [r2, #16]
 8104838:	4b17      	ldr	r3, [pc, #92]	; (8104898 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810483a:	691a      	ldr	r2, [r3, #16]
 810483c:	687b      	ldr	r3, [r7, #4]
 810483e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8104842:	4915      	ldr	r1, [pc, #84]	; (8104898 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104844:	4313      	orrs	r3, r2
 8104846:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8104848:	687b      	ldr	r3, [r7, #4]
 810484a:	681b      	ldr	r3, [r3, #0]
 810484c:	2b00      	cmp	r3, #0
 810484e:	da08      	bge.n	8104862 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8104850:	4b11      	ldr	r3, [pc, #68]	; (8104898 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104854:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8104858:	687b      	ldr	r3, [r7, #4]
 810485a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810485c:	490e      	ldr	r1, [pc, #56]	; (8104898 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810485e:	4313      	orrs	r3, r2
 8104860:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8104862:	687b      	ldr	r3, [r7, #4]
 8104864:	681b      	ldr	r3, [r3, #0]
 8104866:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810486a:	2b00      	cmp	r3, #0
 810486c:	d009      	beq.n	8104882 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 810486e:	4b0a      	ldr	r3, [pc, #40]	; (8104898 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104872:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8104876:	687b      	ldr	r3, [r7, #4]
 8104878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810487c:	4906      	ldr	r1, [pc, #24]	; (8104898 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810487e:	4313      	orrs	r3, r2
 8104880:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8104882:	7dbb      	ldrb	r3, [r7, #22]
 8104884:	2b00      	cmp	r3, #0
 8104886:	d101      	bne.n	810488c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8104888:	2300      	movs	r3, #0
 810488a:	e000      	b.n	810488e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 810488c:	2301      	movs	r3, #1
}
 810488e:	4618      	mov	r0, r3
 8104890:	3718      	adds	r7, #24
 8104892:	46bd      	mov	sp, r7
 8104894:	bd80      	pop	{r7, pc}
 8104896:	bf00      	nop
 8104898:	58024400 	.word	0x58024400

0810489c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 810489c:	b580      	push	{r7, lr}
 810489e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 81048a0:	f7ff f858 	bl	8103954 <HAL_RCC_GetHCLKFreq>
 81048a4:	4602      	mov	r2, r0
 81048a6:	4b06      	ldr	r3, [pc, #24]	; (81048c0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 81048a8:	6a1b      	ldr	r3, [r3, #32]
 81048aa:	091b      	lsrs	r3, r3, #4
 81048ac:	f003 0307 	and.w	r3, r3, #7
 81048b0:	4904      	ldr	r1, [pc, #16]	; (81048c4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 81048b2:	5ccb      	ldrb	r3, [r1, r3]
 81048b4:	f003 031f 	and.w	r3, r3, #31
 81048b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 81048bc:	4618      	mov	r0, r3
 81048be:	bd80      	pop	{r7, pc}
 81048c0:	58024400 	.word	0x58024400
 81048c4:	0810e730 	.word	0x0810e730

081048c8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 81048c8:	b480      	push	{r7}
 81048ca:	b089      	sub	sp, #36	; 0x24
 81048cc:	af00      	add	r7, sp, #0
 81048ce:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81048d0:	4ba1      	ldr	r3, [pc, #644]	; (8104b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81048d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81048d4:	f003 0303 	and.w	r3, r3, #3
 81048d8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 81048da:	4b9f      	ldr	r3, [pc, #636]	; (8104b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81048dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81048de:	0b1b      	lsrs	r3, r3, #12
 81048e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81048e4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 81048e6:	4b9c      	ldr	r3, [pc, #624]	; (8104b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81048e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81048ea:	091b      	lsrs	r3, r3, #4
 81048ec:	f003 0301 	and.w	r3, r3, #1
 81048f0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 81048f2:	4b99      	ldr	r3, [pc, #612]	; (8104b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81048f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81048f6:	08db      	lsrs	r3, r3, #3
 81048f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81048fc:	693a      	ldr	r2, [r7, #16]
 81048fe:	fb02 f303 	mul.w	r3, r2, r3
 8104902:	ee07 3a90 	vmov	s15, r3
 8104906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810490a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 810490e:	697b      	ldr	r3, [r7, #20]
 8104910:	2b00      	cmp	r3, #0
 8104912:	f000 8111 	beq.w	8104b38 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8104916:	69bb      	ldr	r3, [r7, #24]
 8104918:	2b02      	cmp	r3, #2
 810491a:	f000 8083 	beq.w	8104a24 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 810491e:	69bb      	ldr	r3, [r7, #24]
 8104920:	2b02      	cmp	r3, #2
 8104922:	f200 80a1 	bhi.w	8104a68 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8104926:	69bb      	ldr	r3, [r7, #24]
 8104928:	2b00      	cmp	r3, #0
 810492a:	d003      	beq.n	8104934 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 810492c:	69bb      	ldr	r3, [r7, #24]
 810492e:	2b01      	cmp	r3, #1
 8104930:	d056      	beq.n	81049e0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8104932:	e099      	b.n	8104a68 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104934:	4b88      	ldr	r3, [pc, #544]	; (8104b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104936:	681b      	ldr	r3, [r3, #0]
 8104938:	f003 0320 	and.w	r3, r3, #32
 810493c:	2b00      	cmp	r3, #0
 810493e:	d02d      	beq.n	810499c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8104940:	4b85      	ldr	r3, [pc, #532]	; (8104b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104942:	681b      	ldr	r3, [r3, #0]
 8104944:	08db      	lsrs	r3, r3, #3
 8104946:	f003 0303 	and.w	r3, r3, #3
 810494a:	4a84      	ldr	r2, [pc, #528]	; (8104b5c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 810494c:	fa22 f303 	lsr.w	r3, r2, r3
 8104950:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8104952:	68bb      	ldr	r3, [r7, #8]
 8104954:	ee07 3a90 	vmov	s15, r3
 8104958:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810495c:	697b      	ldr	r3, [r7, #20]
 810495e:	ee07 3a90 	vmov	s15, r3
 8104962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810496a:	4b7b      	ldr	r3, [pc, #492]	; (8104b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810496c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810496e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104972:	ee07 3a90 	vmov	s15, r3
 8104976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810497a:	ed97 6a03 	vldr	s12, [r7, #12]
 810497e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8104b60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810498a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810498e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104996:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 810499a:	e087      	b.n	8104aac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810499c:	697b      	ldr	r3, [r7, #20]
 810499e:	ee07 3a90 	vmov	s15, r3
 81049a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81049a6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8104b64 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 81049aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81049ae:	4b6a      	ldr	r3, [pc, #424]	; (8104b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81049b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81049b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81049b6:	ee07 3a90 	vmov	s15, r3
 81049ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81049be:	ed97 6a03 	vldr	s12, [r7, #12]
 81049c2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8104b60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81049c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81049ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81049ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81049d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81049d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81049da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81049de:	e065      	b.n	8104aac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81049e0:	697b      	ldr	r3, [r7, #20]
 81049e2:	ee07 3a90 	vmov	s15, r3
 81049e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81049ea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8104b68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81049ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81049f2:	4b59      	ldr	r3, [pc, #356]	; (8104b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81049f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81049f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81049fa:	ee07 3a90 	vmov	s15, r3
 81049fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104a02:	ed97 6a03 	vldr	s12, [r7, #12]
 8104a06:	eddf 5a56 	vldr	s11, [pc, #344]	; 8104b60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104a12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104a1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104a22:	e043      	b.n	8104aac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8104a24:	697b      	ldr	r3, [r7, #20]
 8104a26:	ee07 3a90 	vmov	s15, r3
 8104a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104a2e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8104b6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8104a32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104a36:	4b48      	ldr	r3, [pc, #288]	; (8104b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104a3e:	ee07 3a90 	vmov	s15, r3
 8104a42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104a46:	ed97 6a03 	vldr	s12, [r7, #12]
 8104a4a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8104b60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104a4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104a52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104a56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104a62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104a66:	e021      	b.n	8104aac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8104a68:	697b      	ldr	r3, [r7, #20]
 8104a6a:	ee07 3a90 	vmov	s15, r3
 8104a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104a72:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8104b68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8104a76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104a7a:	4b37      	ldr	r3, [pc, #220]	; (8104b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104a82:	ee07 3a90 	vmov	s15, r3
 8104a86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104a8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8104a8e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8104b60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104a92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104a9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104a9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104aa6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104aaa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8104aac:	4b2a      	ldr	r3, [pc, #168]	; (8104b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104ab0:	0a5b      	lsrs	r3, r3, #9
 8104ab2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104ab6:	ee07 3a90 	vmov	s15, r3
 8104aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104abe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104ac2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104ac6:	edd7 6a07 	vldr	s13, [r7, #28]
 8104aca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104ace:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104ad2:	ee17 2a90 	vmov	r2, s15
 8104ad6:	687b      	ldr	r3, [r7, #4]
 8104ad8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8104ada:	4b1f      	ldr	r3, [pc, #124]	; (8104b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104ade:	0c1b      	lsrs	r3, r3, #16
 8104ae0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104ae4:	ee07 3a90 	vmov	s15, r3
 8104ae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104aec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104af0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104af4:	edd7 6a07 	vldr	s13, [r7, #28]
 8104af8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104afc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104b00:	ee17 2a90 	vmov	r2, s15
 8104b04:	687b      	ldr	r3, [r7, #4]
 8104b06:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8104b08:	4b13      	ldr	r3, [pc, #76]	; (8104b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104b0c:	0e1b      	lsrs	r3, r3, #24
 8104b0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104b12:	ee07 3a90 	vmov	s15, r3
 8104b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104b1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104b1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104b22:	edd7 6a07 	vldr	s13, [r7, #28]
 8104b26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104b2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104b2e:	ee17 2a90 	vmov	r2, s15
 8104b32:	687b      	ldr	r3, [r7, #4]
 8104b34:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8104b36:	e008      	b.n	8104b4a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8104b38:	687b      	ldr	r3, [r7, #4]
 8104b3a:	2200      	movs	r2, #0
 8104b3c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8104b3e:	687b      	ldr	r3, [r7, #4]
 8104b40:	2200      	movs	r2, #0
 8104b42:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8104b44:	687b      	ldr	r3, [r7, #4]
 8104b46:	2200      	movs	r2, #0
 8104b48:	609a      	str	r2, [r3, #8]
}
 8104b4a:	bf00      	nop
 8104b4c:	3724      	adds	r7, #36	; 0x24
 8104b4e:	46bd      	mov	sp, r7
 8104b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b54:	4770      	bx	lr
 8104b56:	bf00      	nop
 8104b58:	58024400 	.word	0x58024400
 8104b5c:	03d09000 	.word	0x03d09000
 8104b60:	46000000 	.word	0x46000000
 8104b64:	4c742400 	.word	0x4c742400
 8104b68:	4a742400 	.word	0x4a742400
 8104b6c:	4af42400 	.word	0x4af42400

08104b70 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8104b70:	b480      	push	{r7}
 8104b72:	b089      	sub	sp, #36	; 0x24
 8104b74:	af00      	add	r7, sp, #0
 8104b76:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104b78:	4ba1      	ldr	r3, [pc, #644]	; (8104e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104b7c:	f003 0303 	and.w	r3, r3, #3
 8104b80:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8104b82:	4b9f      	ldr	r3, [pc, #636]	; (8104e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104b86:	0d1b      	lsrs	r3, r3, #20
 8104b88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8104b8c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8104b8e:	4b9c      	ldr	r3, [pc, #624]	; (8104e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104b92:	0a1b      	lsrs	r3, r3, #8
 8104b94:	f003 0301 	and.w	r3, r3, #1
 8104b98:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8104b9a:	4b99      	ldr	r3, [pc, #612]	; (8104e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104b9e:	08db      	lsrs	r3, r3, #3
 8104ba0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8104ba4:	693a      	ldr	r2, [r7, #16]
 8104ba6:	fb02 f303 	mul.w	r3, r2, r3
 8104baa:	ee07 3a90 	vmov	s15, r3
 8104bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104bb2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8104bb6:	697b      	ldr	r3, [r7, #20]
 8104bb8:	2b00      	cmp	r3, #0
 8104bba:	f000 8111 	beq.w	8104de0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8104bbe:	69bb      	ldr	r3, [r7, #24]
 8104bc0:	2b02      	cmp	r3, #2
 8104bc2:	f000 8083 	beq.w	8104ccc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8104bc6:	69bb      	ldr	r3, [r7, #24]
 8104bc8:	2b02      	cmp	r3, #2
 8104bca:	f200 80a1 	bhi.w	8104d10 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8104bce:	69bb      	ldr	r3, [r7, #24]
 8104bd0:	2b00      	cmp	r3, #0
 8104bd2:	d003      	beq.n	8104bdc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8104bd4:	69bb      	ldr	r3, [r7, #24]
 8104bd6:	2b01      	cmp	r3, #1
 8104bd8:	d056      	beq.n	8104c88 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8104bda:	e099      	b.n	8104d10 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104bdc:	4b88      	ldr	r3, [pc, #544]	; (8104e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104bde:	681b      	ldr	r3, [r3, #0]
 8104be0:	f003 0320 	and.w	r3, r3, #32
 8104be4:	2b00      	cmp	r3, #0
 8104be6:	d02d      	beq.n	8104c44 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8104be8:	4b85      	ldr	r3, [pc, #532]	; (8104e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104bea:	681b      	ldr	r3, [r3, #0]
 8104bec:	08db      	lsrs	r3, r3, #3
 8104bee:	f003 0303 	and.w	r3, r3, #3
 8104bf2:	4a84      	ldr	r2, [pc, #528]	; (8104e04 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8104bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8104bf8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8104bfa:	68bb      	ldr	r3, [r7, #8]
 8104bfc:	ee07 3a90 	vmov	s15, r3
 8104c00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104c04:	697b      	ldr	r3, [r7, #20]
 8104c06:	ee07 3a90 	vmov	s15, r3
 8104c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104c0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104c12:	4b7b      	ldr	r3, [pc, #492]	; (8104e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104c1a:	ee07 3a90 	vmov	s15, r3
 8104c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104c22:	ed97 6a03 	vldr	s12, [r7, #12]
 8104c26:	eddf 5a78 	vldr	s11, [pc, #480]	; 8104e08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104c32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104c3e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8104c42:	e087      	b.n	8104d54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8104c44:	697b      	ldr	r3, [r7, #20]
 8104c46:	ee07 3a90 	vmov	s15, r3
 8104c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104c4e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8104e0c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8104c52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104c56:	4b6a      	ldr	r3, [pc, #424]	; (8104e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104c5e:	ee07 3a90 	vmov	s15, r3
 8104c62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104c66:	ed97 6a03 	vldr	s12, [r7, #12]
 8104c6a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8104e08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104c6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104c72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104c76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104c7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104c82:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104c86:	e065      	b.n	8104d54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8104c88:	697b      	ldr	r3, [r7, #20]
 8104c8a:	ee07 3a90 	vmov	s15, r3
 8104c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104c92:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8104e10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8104c96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104c9a:	4b59      	ldr	r3, [pc, #356]	; (8104e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104ca2:	ee07 3a90 	vmov	s15, r3
 8104ca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104caa:	ed97 6a03 	vldr	s12, [r7, #12]
 8104cae:	eddf 5a56 	vldr	s11, [pc, #344]	; 8104e08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104cb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104cb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104cba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104cbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104cc6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104cca:	e043      	b.n	8104d54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8104ccc:	697b      	ldr	r3, [r7, #20]
 8104cce:	ee07 3a90 	vmov	s15, r3
 8104cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104cd6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8104e14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8104cda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104cde:	4b48      	ldr	r3, [pc, #288]	; (8104e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104ce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104ce6:	ee07 3a90 	vmov	s15, r3
 8104cea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104cee:	ed97 6a03 	vldr	s12, [r7, #12]
 8104cf2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8104e08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104cf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104cfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104cfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104d02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104d0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104d0e:	e021      	b.n	8104d54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8104d10:	697b      	ldr	r3, [r7, #20]
 8104d12:	ee07 3a90 	vmov	s15, r3
 8104d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104d1a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8104e10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8104d1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104d22:	4b37      	ldr	r3, [pc, #220]	; (8104e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104d26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104d2a:	ee07 3a90 	vmov	s15, r3
 8104d2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104d32:	ed97 6a03 	vldr	s12, [r7, #12]
 8104d36:	eddf 5a34 	vldr	s11, [pc, #208]	; 8104e08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104d3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104d3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104d42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104d46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104d4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104d52:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8104d54:	4b2a      	ldr	r3, [pc, #168]	; (8104e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104d58:	0a5b      	lsrs	r3, r3, #9
 8104d5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104d5e:	ee07 3a90 	vmov	s15, r3
 8104d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104d66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104d6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104d6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8104d72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104d76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104d7a:	ee17 2a90 	vmov	r2, s15
 8104d7e:	687b      	ldr	r3, [r7, #4]
 8104d80:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8104d82:	4b1f      	ldr	r3, [pc, #124]	; (8104e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104d86:	0c1b      	lsrs	r3, r3, #16
 8104d88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104d8c:	ee07 3a90 	vmov	s15, r3
 8104d90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104d94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104d98:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104d9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8104da0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104da4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104da8:	ee17 2a90 	vmov	r2, s15
 8104dac:	687b      	ldr	r3, [r7, #4]
 8104dae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8104db0:	4b13      	ldr	r3, [pc, #76]	; (8104e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104db4:	0e1b      	lsrs	r3, r3, #24
 8104db6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104dba:	ee07 3a90 	vmov	s15, r3
 8104dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104dc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104dc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104dca:	edd7 6a07 	vldr	s13, [r7, #28]
 8104dce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104dd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104dd6:	ee17 2a90 	vmov	r2, s15
 8104dda:	687b      	ldr	r3, [r7, #4]
 8104ddc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8104dde:	e008      	b.n	8104df2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8104de0:	687b      	ldr	r3, [r7, #4]
 8104de2:	2200      	movs	r2, #0
 8104de4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8104de6:	687b      	ldr	r3, [r7, #4]
 8104de8:	2200      	movs	r2, #0
 8104dea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8104dec:	687b      	ldr	r3, [r7, #4]
 8104dee:	2200      	movs	r2, #0
 8104df0:	609a      	str	r2, [r3, #8]
}
 8104df2:	bf00      	nop
 8104df4:	3724      	adds	r7, #36	; 0x24
 8104df6:	46bd      	mov	sp, r7
 8104df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104dfc:	4770      	bx	lr
 8104dfe:	bf00      	nop
 8104e00:	58024400 	.word	0x58024400
 8104e04:	03d09000 	.word	0x03d09000
 8104e08:	46000000 	.word	0x46000000
 8104e0c:	4c742400 	.word	0x4c742400
 8104e10:	4a742400 	.word	0x4a742400
 8104e14:	4af42400 	.word	0x4af42400

08104e18 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8104e18:	b580      	push	{r7, lr}
 8104e1a:	b084      	sub	sp, #16
 8104e1c:	af00      	add	r7, sp, #0
 8104e1e:	6078      	str	r0, [r7, #4]
 8104e20:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8104e22:	2300      	movs	r3, #0
 8104e24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8104e26:	4b54      	ldr	r3, [pc, #336]	; (8104f78 <RCCEx_PLL2_Config+0x160>)
 8104e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104e2a:	f003 0303 	and.w	r3, r3, #3
 8104e2e:	2b03      	cmp	r3, #3
 8104e30:	d101      	bne.n	8104e36 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8104e32:	2301      	movs	r3, #1
 8104e34:	e09b      	b.n	8104f6e <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8104e36:	4b50      	ldr	r3, [pc, #320]	; (8104f78 <RCCEx_PLL2_Config+0x160>)
 8104e38:	681b      	ldr	r3, [r3, #0]
 8104e3a:	4a4f      	ldr	r2, [pc, #316]	; (8104f78 <RCCEx_PLL2_Config+0x160>)
 8104e3c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8104e40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104e42:	f7fd fb15 	bl	8102470 <HAL_GetTick>
 8104e46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8104e48:	e008      	b.n	8104e5c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8104e4a:	f7fd fb11 	bl	8102470 <HAL_GetTick>
 8104e4e:	4602      	mov	r2, r0
 8104e50:	68bb      	ldr	r3, [r7, #8]
 8104e52:	1ad3      	subs	r3, r2, r3
 8104e54:	2b02      	cmp	r3, #2
 8104e56:	d901      	bls.n	8104e5c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8104e58:	2303      	movs	r3, #3
 8104e5a:	e088      	b.n	8104f6e <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8104e5c:	4b46      	ldr	r3, [pc, #280]	; (8104f78 <RCCEx_PLL2_Config+0x160>)
 8104e5e:	681b      	ldr	r3, [r3, #0]
 8104e60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104e64:	2b00      	cmp	r3, #0
 8104e66:	d1f0      	bne.n	8104e4a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8104e68:	4b43      	ldr	r3, [pc, #268]	; (8104f78 <RCCEx_PLL2_Config+0x160>)
 8104e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104e6c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8104e70:	687b      	ldr	r3, [r7, #4]
 8104e72:	681b      	ldr	r3, [r3, #0]
 8104e74:	031b      	lsls	r3, r3, #12
 8104e76:	4940      	ldr	r1, [pc, #256]	; (8104f78 <RCCEx_PLL2_Config+0x160>)
 8104e78:	4313      	orrs	r3, r2
 8104e7a:	628b      	str	r3, [r1, #40]	; 0x28
 8104e7c:	687b      	ldr	r3, [r7, #4]
 8104e7e:	685b      	ldr	r3, [r3, #4]
 8104e80:	3b01      	subs	r3, #1
 8104e82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8104e86:	687b      	ldr	r3, [r7, #4]
 8104e88:	689b      	ldr	r3, [r3, #8]
 8104e8a:	3b01      	subs	r3, #1
 8104e8c:	025b      	lsls	r3, r3, #9
 8104e8e:	b29b      	uxth	r3, r3
 8104e90:	431a      	orrs	r2, r3
 8104e92:	687b      	ldr	r3, [r7, #4]
 8104e94:	68db      	ldr	r3, [r3, #12]
 8104e96:	3b01      	subs	r3, #1
 8104e98:	041b      	lsls	r3, r3, #16
 8104e9a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8104e9e:	431a      	orrs	r2, r3
 8104ea0:	687b      	ldr	r3, [r7, #4]
 8104ea2:	691b      	ldr	r3, [r3, #16]
 8104ea4:	3b01      	subs	r3, #1
 8104ea6:	061b      	lsls	r3, r3, #24
 8104ea8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8104eac:	4932      	ldr	r1, [pc, #200]	; (8104f78 <RCCEx_PLL2_Config+0x160>)
 8104eae:	4313      	orrs	r3, r2
 8104eb0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8104eb2:	4b31      	ldr	r3, [pc, #196]	; (8104f78 <RCCEx_PLL2_Config+0x160>)
 8104eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104eb6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8104eba:	687b      	ldr	r3, [r7, #4]
 8104ebc:	695b      	ldr	r3, [r3, #20]
 8104ebe:	492e      	ldr	r1, [pc, #184]	; (8104f78 <RCCEx_PLL2_Config+0x160>)
 8104ec0:	4313      	orrs	r3, r2
 8104ec2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8104ec4:	4b2c      	ldr	r3, [pc, #176]	; (8104f78 <RCCEx_PLL2_Config+0x160>)
 8104ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104ec8:	f023 0220 	bic.w	r2, r3, #32
 8104ecc:	687b      	ldr	r3, [r7, #4]
 8104ece:	699b      	ldr	r3, [r3, #24]
 8104ed0:	4929      	ldr	r1, [pc, #164]	; (8104f78 <RCCEx_PLL2_Config+0x160>)
 8104ed2:	4313      	orrs	r3, r2
 8104ed4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8104ed6:	4b28      	ldr	r3, [pc, #160]	; (8104f78 <RCCEx_PLL2_Config+0x160>)
 8104ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104eda:	4a27      	ldr	r2, [pc, #156]	; (8104f78 <RCCEx_PLL2_Config+0x160>)
 8104edc:	f023 0310 	bic.w	r3, r3, #16
 8104ee0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8104ee2:	4b25      	ldr	r3, [pc, #148]	; (8104f78 <RCCEx_PLL2_Config+0x160>)
 8104ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104ee6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8104eea:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8104eee:	687a      	ldr	r2, [r7, #4]
 8104ef0:	69d2      	ldr	r2, [r2, #28]
 8104ef2:	00d2      	lsls	r2, r2, #3
 8104ef4:	4920      	ldr	r1, [pc, #128]	; (8104f78 <RCCEx_PLL2_Config+0x160>)
 8104ef6:	4313      	orrs	r3, r2
 8104ef8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8104efa:	4b1f      	ldr	r3, [pc, #124]	; (8104f78 <RCCEx_PLL2_Config+0x160>)
 8104efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104efe:	4a1e      	ldr	r2, [pc, #120]	; (8104f78 <RCCEx_PLL2_Config+0x160>)
 8104f00:	f043 0310 	orr.w	r3, r3, #16
 8104f04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8104f06:	683b      	ldr	r3, [r7, #0]
 8104f08:	2b00      	cmp	r3, #0
 8104f0a:	d106      	bne.n	8104f1a <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8104f0c:	4b1a      	ldr	r3, [pc, #104]	; (8104f78 <RCCEx_PLL2_Config+0x160>)
 8104f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104f10:	4a19      	ldr	r2, [pc, #100]	; (8104f78 <RCCEx_PLL2_Config+0x160>)
 8104f12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8104f16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8104f18:	e00f      	b.n	8104f3a <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8104f1a:	683b      	ldr	r3, [r7, #0]
 8104f1c:	2b01      	cmp	r3, #1
 8104f1e:	d106      	bne.n	8104f2e <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8104f20:	4b15      	ldr	r3, [pc, #84]	; (8104f78 <RCCEx_PLL2_Config+0x160>)
 8104f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104f24:	4a14      	ldr	r2, [pc, #80]	; (8104f78 <RCCEx_PLL2_Config+0x160>)
 8104f26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8104f2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8104f2c:	e005      	b.n	8104f3a <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8104f2e:	4b12      	ldr	r3, [pc, #72]	; (8104f78 <RCCEx_PLL2_Config+0x160>)
 8104f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104f32:	4a11      	ldr	r2, [pc, #68]	; (8104f78 <RCCEx_PLL2_Config+0x160>)
 8104f34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8104f38:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8104f3a:	4b0f      	ldr	r3, [pc, #60]	; (8104f78 <RCCEx_PLL2_Config+0x160>)
 8104f3c:	681b      	ldr	r3, [r3, #0]
 8104f3e:	4a0e      	ldr	r2, [pc, #56]	; (8104f78 <RCCEx_PLL2_Config+0x160>)
 8104f40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8104f44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104f46:	f7fd fa93 	bl	8102470 <HAL_GetTick>
 8104f4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8104f4c:	e008      	b.n	8104f60 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8104f4e:	f7fd fa8f 	bl	8102470 <HAL_GetTick>
 8104f52:	4602      	mov	r2, r0
 8104f54:	68bb      	ldr	r3, [r7, #8]
 8104f56:	1ad3      	subs	r3, r2, r3
 8104f58:	2b02      	cmp	r3, #2
 8104f5a:	d901      	bls.n	8104f60 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8104f5c:	2303      	movs	r3, #3
 8104f5e:	e006      	b.n	8104f6e <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8104f60:	4b05      	ldr	r3, [pc, #20]	; (8104f78 <RCCEx_PLL2_Config+0x160>)
 8104f62:	681b      	ldr	r3, [r3, #0]
 8104f64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104f68:	2b00      	cmp	r3, #0
 8104f6a:	d0f0      	beq.n	8104f4e <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8104f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8104f6e:	4618      	mov	r0, r3
 8104f70:	3710      	adds	r7, #16
 8104f72:	46bd      	mov	sp, r7
 8104f74:	bd80      	pop	{r7, pc}
 8104f76:	bf00      	nop
 8104f78:	58024400 	.word	0x58024400

08104f7c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8104f7c:	b580      	push	{r7, lr}
 8104f7e:	b084      	sub	sp, #16
 8104f80:	af00      	add	r7, sp, #0
 8104f82:	6078      	str	r0, [r7, #4]
 8104f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8104f86:	2300      	movs	r3, #0
 8104f88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8104f8a:	4b54      	ldr	r3, [pc, #336]	; (81050dc <RCCEx_PLL3_Config+0x160>)
 8104f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104f8e:	f003 0303 	and.w	r3, r3, #3
 8104f92:	2b03      	cmp	r3, #3
 8104f94:	d101      	bne.n	8104f9a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8104f96:	2301      	movs	r3, #1
 8104f98:	e09b      	b.n	81050d2 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8104f9a:	4b50      	ldr	r3, [pc, #320]	; (81050dc <RCCEx_PLL3_Config+0x160>)
 8104f9c:	681b      	ldr	r3, [r3, #0]
 8104f9e:	4a4f      	ldr	r2, [pc, #316]	; (81050dc <RCCEx_PLL3_Config+0x160>)
 8104fa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8104fa4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104fa6:	f7fd fa63 	bl	8102470 <HAL_GetTick>
 8104faa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8104fac:	e008      	b.n	8104fc0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8104fae:	f7fd fa5f 	bl	8102470 <HAL_GetTick>
 8104fb2:	4602      	mov	r2, r0
 8104fb4:	68bb      	ldr	r3, [r7, #8]
 8104fb6:	1ad3      	subs	r3, r2, r3
 8104fb8:	2b02      	cmp	r3, #2
 8104fba:	d901      	bls.n	8104fc0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8104fbc:	2303      	movs	r3, #3
 8104fbe:	e088      	b.n	81050d2 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8104fc0:	4b46      	ldr	r3, [pc, #280]	; (81050dc <RCCEx_PLL3_Config+0x160>)
 8104fc2:	681b      	ldr	r3, [r3, #0]
 8104fc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104fc8:	2b00      	cmp	r3, #0
 8104fca:	d1f0      	bne.n	8104fae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8104fcc:	4b43      	ldr	r3, [pc, #268]	; (81050dc <RCCEx_PLL3_Config+0x160>)
 8104fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104fd0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8104fd4:	687b      	ldr	r3, [r7, #4]
 8104fd6:	681b      	ldr	r3, [r3, #0]
 8104fd8:	051b      	lsls	r3, r3, #20
 8104fda:	4940      	ldr	r1, [pc, #256]	; (81050dc <RCCEx_PLL3_Config+0x160>)
 8104fdc:	4313      	orrs	r3, r2
 8104fde:	628b      	str	r3, [r1, #40]	; 0x28
 8104fe0:	687b      	ldr	r3, [r7, #4]
 8104fe2:	685b      	ldr	r3, [r3, #4]
 8104fe4:	3b01      	subs	r3, #1
 8104fe6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8104fea:	687b      	ldr	r3, [r7, #4]
 8104fec:	689b      	ldr	r3, [r3, #8]
 8104fee:	3b01      	subs	r3, #1
 8104ff0:	025b      	lsls	r3, r3, #9
 8104ff2:	b29b      	uxth	r3, r3
 8104ff4:	431a      	orrs	r2, r3
 8104ff6:	687b      	ldr	r3, [r7, #4]
 8104ff8:	68db      	ldr	r3, [r3, #12]
 8104ffa:	3b01      	subs	r3, #1
 8104ffc:	041b      	lsls	r3, r3, #16
 8104ffe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8105002:	431a      	orrs	r2, r3
 8105004:	687b      	ldr	r3, [r7, #4]
 8105006:	691b      	ldr	r3, [r3, #16]
 8105008:	3b01      	subs	r3, #1
 810500a:	061b      	lsls	r3, r3, #24
 810500c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8105010:	4932      	ldr	r1, [pc, #200]	; (81050dc <RCCEx_PLL3_Config+0x160>)
 8105012:	4313      	orrs	r3, r2
 8105014:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8105016:	4b31      	ldr	r3, [pc, #196]	; (81050dc <RCCEx_PLL3_Config+0x160>)
 8105018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810501a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 810501e:	687b      	ldr	r3, [r7, #4]
 8105020:	695b      	ldr	r3, [r3, #20]
 8105022:	492e      	ldr	r1, [pc, #184]	; (81050dc <RCCEx_PLL3_Config+0x160>)
 8105024:	4313      	orrs	r3, r2
 8105026:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8105028:	4b2c      	ldr	r3, [pc, #176]	; (81050dc <RCCEx_PLL3_Config+0x160>)
 810502a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810502c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8105030:	687b      	ldr	r3, [r7, #4]
 8105032:	699b      	ldr	r3, [r3, #24]
 8105034:	4929      	ldr	r1, [pc, #164]	; (81050dc <RCCEx_PLL3_Config+0x160>)
 8105036:	4313      	orrs	r3, r2
 8105038:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 810503a:	4b28      	ldr	r3, [pc, #160]	; (81050dc <RCCEx_PLL3_Config+0x160>)
 810503c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810503e:	4a27      	ldr	r2, [pc, #156]	; (81050dc <RCCEx_PLL3_Config+0x160>)
 8105040:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8105044:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8105046:	4b25      	ldr	r3, [pc, #148]	; (81050dc <RCCEx_PLL3_Config+0x160>)
 8105048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810504a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810504e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8105052:	687a      	ldr	r2, [r7, #4]
 8105054:	69d2      	ldr	r2, [r2, #28]
 8105056:	00d2      	lsls	r2, r2, #3
 8105058:	4920      	ldr	r1, [pc, #128]	; (81050dc <RCCEx_PLL3_Config+0x160>)
 810505a:	4313      	orrs	r3, r2
 810505c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 810505e:	4b1f      	ldr	r3, [pc, #124]	; (81050dc <RCCEx_PLL3_Config+0x160>)
 8105060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105062:	4a1e      	ldr	r2, [pc, #120]	; (81050dc <RCCEx_PLL3_Config+0x160>)
 8105064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8105068:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 810506a:	683b      	ldr	r3, [r7, #0]
 810506c:	2b00      	cmp	r3, #0
 810506e:	d106      	bne.n	810507e <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8105070:	4b1a      	ldr	r3, [pc, #104]	; (81050dc <RCCEx_PLL3_Config+0x160>)
 8105072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105074:	4a19      	ldr	r2, [pc, #100]	; (81050dc <RCCEx_PLL3_Config+0x160>)
 8105076:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 810507a:	62d3      	str	r3, [r2, #44]	; 0x2c
 810507c:	e00f      	b.n	810509e <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 810507e:	683b      	ldr	r3, [r7, #0]
 8105080:	2b01      	cmp	r3, #1
 8105082:	d106      	bne.n	8105092 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8105084:	4b15      	ldr	r3, [pc, #84]	; (81050dc <RCCEx_PLL3_Config+0x160>)
 8105086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105088:	4a14      	ldr	r2, [pc, #80]	; (81050dc <RCCEx_PLL3_Config+0x160>)
 810508a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 810508e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8105090:	e005      	b.n	810509e <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8105092:	4b12      	ldr	r3, [pc, #72]	; (81050dc <RCCEx_PLL3_Config+0x160>)
 8105094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105096:	4a11      	ldr	r2, [pc, #68]	; (81050dc <RCCEx_PLL3_Config+0x160>)
 8105098:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 810509c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 810509e:	4b0f      	ldr	r3, [pc, #60]	; (81050dc <RCCEx_PLL3_Config+0x160>)
 81050a0:	681b      	ldr	r3, [r3, #0]
 81050a2:	4a0e      	ldr	r2, [pc, #56]	; (81050dc <RCCEx_PLL3_Config+0x160>)
 81050a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 81050a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81050aa:	f7fd f9e1 	bl	8102470 <HAL_GetTick>
 81050ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81050b0:	e008      	b.n	81050c4 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 81050b2:	f7fd f9dd 	bl	8102470 <HAL_GetTick>
 81050b6:	4602      	mov	r2, r0
 81050b8:	68bb      	ldr	r3, [r7, #8]
 81050ba:	1ad3      	subs	r3, r2, r3
 81050bc:	2b02      	cmp	r3, #2
 81050be:	d901      	bls.n	81050c4 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 81050c0:	2303      	movs	r3, #3
 81050c2:	e006      	b.n	81050d2 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81050c4:	4b05      	ldr	r3, [pc, #20]	; (81050dc <RCCEx_PLL3_Config+0x160>)
 81050c6:	681b      	ldr	r3, [r3, #0]
 81050c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81050cc:	2b00      	cmp	r3, #0
 81050ce:	d0f0      	beq.n	81050b2 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 81050d0:	7bfb      	ldrb	r3, [r7, #15]
}
 81050d2:	4618      	mov	r0, r3
 81050d4:	3710      	adds	r7, #16
 81050d6:	46bd      	mov	sp, r7
 81050d8:	bd80      	pop	{r7, pc}
 81050da:	bf00      	nop
 81050dc:	58024400 	.word	0x58024400

081050e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 81050e0:	b580      	push	{r7, lr}
 81050e2:	b082      	sub	sp, #8
 81050e4:	af00      	add	r7, sp, #0
 81050e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81050e8:	687b      	ldr	r3, [r7, #4]
 81050ea:	2b00      	cmp	r3, #0
 81050ec:	d101      	bne.n	81050f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 81050ee:	2301      	movs	r3, #1
 81050f0:	e049      	b.n	8105186 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81050f2:	687b      	ldr	r3, [r7, #4]
 81050f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81050f8:	b2db      	uxtb	r3, r3
 81050fa:	2b00      	cmp	r3, #0
 81050fc:	d106      	bne.n	810510c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81050fe:	687b      	ldr	r3, [r7, #4]
 8105100:	2200      	movs	r2, #0
 8105102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8105106:	6878      	ldr	r0, [r7, #4]
 8105108:	f7fc fe8c 	bl	8101e24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810510c:	687b      	ldr	r3, [r7, #4]
 810510e:	2202      	movs	r2, #2
 8105110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8105114:	687b      	ldr	r3, [r7, #4]
 8105116:	681a      	ldr	r2, [r3, #0]
 8105118:	687b      	ldr	r3, [r7, #4]
 810511a:	3304      	adds	r3, #4
 810511c:	4619      	mov	r1, r3
 810511e:	4610      	mov	r0, r2
 8105120:	f000 fd72 	bl	8105c08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8105124:	687b      	ldr	r3, [r7, #4]
 8105126:	2201      	movs	r2, #1
 8105128:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810512c:	687b      	ldr	r3, [r7, #4]
 810512e:	2201      	movs	r2, #1
 8105130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8105134:	687b      	ldr	r3, [r7, #4]
 8105136:	2201      	movs	r2, #1
 8105138:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 810513c:	687b      	ldr	r3, [r7, #4]
 810513e:	2201      	movs	r2, #1
 8105140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8105144:	687b      	ldr	r3, [r7, #4]
 8105146:	2201      	movs	r2, #1
 8105148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 810514c:	687b      	ldr	r3, [r7, #4]
 810514e:	2201      	movs	r2, #1
 8105150:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8105154:	687b      	ldr	r3, [r7, #4]
 8105156:	2201      	movs	r2, #1
 8105158:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810515c:	687b      	ldr	r3, [r7, #4]
 810515e:	2201      	movs	r2, #1
 8105160:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8105164:	687b      	ldr	r3, [r7, #4]
 8105166:	2201      	movs	r2, #1
 8105168:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810516c:	687b      	ldr	r3, [r7, #4]
 810516e:	2201      	movs	r2, #1
 8105170:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8105174:	687b      	ldr	r3, [r7, #4]
 8105176:	2201      	movs	r2, #1
 8105178:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810517c:	687b      	ldr	r3, [r7, #4]
 810517e:	2201      	movs	r2, #1
 8105180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8105184:	2300      	movs	r3, #0
}
 8105186:	4618      	mov	r0, r3
 8105188:	3708      	adds	r7, #8
 810518a:	46bd      	mov	sp, r7
 810518c:	bd80      	pop	{r7, pc}
	...

08105190 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8105190:	b480      	push	{r7}
 8105192:	b085      	sub	sp, #20
 8105194:	af00      	add	r7, sp, #0
 8105196:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8105198:	687b      	ldr	r3, [r7, #4]
 810519a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 810519e:	b2db      	uxtb	r3, r3
 81051a0:	2b01      	cmp	r3, #1
 81051a2:	d001      	beq.n	81051a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 81051a4:	2301      	movs	r3, #1
 81051a6:	e054      	b.n	8105252 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81051a8:	687b      	ldr	r3, [r7, #4]
 81051aa:	2202      	movs	r2, #2
 81051ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 81051b0:	687b      	ldr	r3, [r7, #4]
 81051b2:	681b      	ldr	r3, [r3, #0]
 81051b4:	68da      	ldr	r2, [r3, #12]
 81051b6:	687b      	ldr	r3, [r7, #4]
 81051b8:	681b      	ldr	r3, [r3, #0]
 81051ba:	f042 0201 	orr.w	r2, r2, #1
 81051be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81051c0:	687b      	ldr	r3, [r7, #4]
 81051c2:	681b      	ldr	r3, [r3, #0]
 81051c4:	4a26      	ldr	r2, [pc, #152]	; (8105260 <HAL_TIM_Base_Start_IT+0xd0>)
 81051c6:	4293      	cmp	r3, r2
 81051c8:	d022      	beq.n	8105210 <HAL_TIM_Base_Start_IT+0x80>
 81051ca:	687b      	ldr	r3, [r7, #4]
 81051cc:	681b      	ldr	r3, [r3, #0]
 81051ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81051d2:	d01d      	beq.n	8105210 <HAL_TIM_Base_Start_IT+0x80>
 81051d4:	687b      	ldr	r3, [r7, #4]
 81051d6:	681b      	ldr	r3, [r3, #0]
 81051d8:	4a22      	ldr	r2, [pc, #136]	; (8105264 <HAL_TIM_Base_Start_IT+0xd4>)
 81051da:	4293      	cmp	r3, r2
 81051dc:	d018      	beq.n	8105210 <HAL_TIM_Base_Start_IT+0x80>
 81051de:	687b      	ldr	r3, [r7, #4]
 81051e0:	681b      	ldr	r3, [r3, #0]
 81051e2:	4a21      	ldr	r2, [pc, #132]	; (8105268 <HAL_TIM_Base_Start_IT+0xd8>)
 81051e4:	4293      	cmp	r3, r2
 81051e6:	d013      	beq.n	8105210 <HAL_TIM_Base_Start_IT+0x80>
 81051e8:	687b      	ldr	r3, [r7, #4]
 81051ea:	681b      	ldr	r3, [r3, #0]
 81051ec:	4a1f      	ldr	r2, [pc, #124]	; (810526c <HAL_TIM_Base_Start_IT+0xdc>)
 81051ee:	4293      	cmp	r3, r2
 81051f0:	d00e      	beq.n	8105210 <HAL_TIM_Base_Start_IT+0x80>
 81051f2:	687b      	ldr	r3, [r7, #4]
 81051f4:	681b      	ldr	r3, [r3, #0]
 81051f6:	4a1e      	ldr	r2, [pc, #120]	; (8105270 <HAL_TIM_Base_Start_IT+0xe0>)
 81051f8:	4293      	cmp	r3, r2
 81051fa:	d009      	beq.n	8105210 <HAL_TIM_Base_Start_IT+0x80>
 81051fc:	687b      	ldr	r3, [r7, #4]
 81051fe:	681b      	ldr	r3, [r3, #0]
 8105200:	4a1c      	ldr	r2, [pc, #112]	; (8105274 <HAL_TIM_Base_Start_IT+0xe4>)
 8105202:	4293      	cmp	r3, r2
 8105204:	d004      	beq.n	8105210 <HAL_TIM_Base_Start_IT+0x80>
 8105206:	687b      	ldr	r3, [r7, #4]
 8105208:	681b      	ldr	r3, [r3, #0]
 810520a:	4a1b      	ldr	r2, [pc, #108]	; (8105278 <HAL_TIM_Base_Start_IT+0xe8>)
 810520c:	4293      	cmp	r3, r2
 810520e:	d115      	bne.n	810523c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8105210:	687b      	ldr	r3, [r7, #4]
 8105212:	681b      	ldr	r3, [r3, #0]
 8105214:	689a      	ldr	r2, [r3, #8]
 8105216:	4b19      	ldr	r3, [pc, #100]	; (810527c <HAL_TIM_Base_Start_IT+0xec>)
 8105218:	4013      	ands	r3, r2
 810521a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810521c:	68fb      	ldr	r3, [r7, #12]
 810521e:	2b06      	cmp	r3, #6
 8105220:	d015      	beq.n	810524e <HAL_TIM_Base_Start_IT+0xbe>
 8105222:	68fb      	ldr	r3, [r7, #12]
 8105224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105228:	d011      	beq.n	810524e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 810522a:	687b      	ldr	r3, [r7, #4]
 810522c:	681b      	ldr	r3, [r3, #0]
 810522e:	681a      	ldr	r2, [r3, #0]
 8105230:	687b      	ldr	r3, [r7, #4]
 8105232:	681b      	ldr	r3, [r3, #0]
 8105234:	f042 0201 	orr.w	r2, r2, #1
 8105238:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810523a:	e008      	b.n	810524e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 810523c:	687b      	ldr	r3, [r7, #4]
 810523e:	681b      	ldr	r3, [r3, #0]
 8105240:	681a      	ldr	r2, [r3, #0]
 8105242:	687b      	ldr	r3, [r7, #4]
 8105244:	681b      	ldr	r3, [r3, #0]
 8105246:	f042 0201 	orr.w	r2, r2, #1
 810524a:	601a      	str	r2, [r3, #0]
 810524c:	e000      	b.n	8105250 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810524e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8105250:	2300      	movs	r3, #0
}
 8105252:	4618      	mov	r0, r3
 8105254:	3714      	adds	r7, #20
 8105256:	46bd      	mov	sp, r7
 8105258:	f85d 7b04 	ldr.w	r7, [sp], #4
 810525c:	4770      	bx	lr
 810525e:	bf00      	nop
 8105260:	40010000 	.word	0x40010000
 8105264:	40000400 	.word	0x40000400
 8105268:	40000800 	.word	0x40000800
 810526c:	40000c00 	.word	0x40000c00
 8105270:	40010400 	.word	0x40010400
 8105274:	40001800 	.word	0x40001800
 8105278:	40014000 	.word	0x40014000
 810527c:	00010007 	.word	0x00010007

08105280 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8105280:	b580      	push	{r7, lr}
 8105282:	b082      	sub	sp, #8
 8105284:	af00      	add	r7, sp, #0
 8105286:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8105288:	687b      	ldr	r3, [r7, #4]
 810528a:	2b00      	cmp	r3, #0
 810528c:	d101      	bne.n	8105292 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 810528e:	2301      	movs	r3, #1
 8105290:	e049      	b.n	8105326 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8105292:	687b      	ldr	r3, [r7, #4]
 8105294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8105298:	b2db      	uxtb	r3, r3
 810529a:	2b00      	cmp	r3, #0
 810529c:	d106      	bne.n	81052ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810529e:	687b      	ldr	r3, [r7, #4]
 81052a0:	2200      	movs	r2, #0
 81052a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 81052a6:	6878      	ldr	r0, [r7, #4]
 81052a8:	f000 f841 	bl	810532e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81052ac:	687b      	ldr	r3, [r7, #4]
 81052ae:	2202      	movs	r2, #2
 81052b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 81052b4:	687b      	ldr	r3, [r7, #4]
 81052b6:	681a      	ldr	r2, [r3, #0]
 81052b8:	687b      	ldr	r3, [r7, #4]
 81052ba:	3304      	adds	r3, #4
 81052bc:	4619      	mov	r1, r3
 81052be:	4610      	mov	r0, r2
 81052c0:	f000 fca2 	bl	8105c08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81052c4:	687b      	ldr	r3, [r7, #4]
 81052c6:	2201      	movs	r2, #1
 81052c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81052cc:	687b      	ldr	r3, [r7, #4]
 81052ce:	2201      	movs	r2, #1
 81052d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 81052d4:	687b      	ldr	r3, [r7, #4]
 81052d6:	2201      	movs	r2, #1
 81052d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 81052dc:	687b      	ldr	r3, [r7, #4]
 81052de:	2201      	movs	r2, #1
 81052e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 81052e4:	687b      	ldr	r3, [r7, #4]
 81052e6:	2201      	movs	r2, #1
 81052e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 81052ec:	687b      	ldr	r3, [r7, #4]
 81052ee:	2201      	movs	r2, #1
 81052f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 81052f4:	687b      	ldr	r3, [r7, #4]
 81052f6:	2201      	movs	r2, #1
 81052f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81052fc:	687b      	ldr	r3, [r7, #4]
 81052fe:	2201      	movs	r2, #1
 8105300:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8105304:	687b      	ldr	r3, [r7, #4]
 8105306:	2201      	movs	r2, #1
 8105308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810530c:	687b      	ldr	r3, [r7, #4]
 810530e:	2201      	movs	r2, #1
 8105310:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8105314:	687b      	ldr	r3, [r7, #4]
 8105316:	2201      	movs	r2, #1
 8105318:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810531c:	687b      	ldr	r3, [r7, #4]
 810531e:	2201      	movs	r2, #1
 8105320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8105324:	2300      	movs	r3, #0
}
 8105326:	4618      	mov	r0, r3
 8105328:	3708      	adds	r7, #8
 810532a:	46bd      	mov	sp, r7
 810532c:	bd80      	pop	{r7, pc}

0810532e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 810532e:	b480      	push	{r7}
 8105330:	b083      	sub	sp, #12
 8105332:	af00      	add	r7, sp, #0
 8105334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8105336:	bf00      	nop
 8105338:	370c      	adds	r7, #12
 810533a:	46bd      	mov	sp, r7
 810533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105340:	4770      	bx	lr
	...

08105344 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8105344:	b580      	push	{r7, lr}
 8105346:	b084      	sub	sp, #16
 8105348:	af00      	add	r7, sp, #0
 810534a:	6078      	str	r0, [r7, #4]
 810534c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 810534e:	683b      	ldr	r3, [r7, #0]
 8105350:	2b00      	cmp	r3, #0
 8105352:	d109      	bne.n	8105368 <HAL_TIM_PWM_Start+0x24>
 8105354:	687b      	ldr	r3, [r7, #4]
 8105356:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 810535a:	b2db      	uxtb	r3, r3
 810535c:	2b01      	cmp	r3, #1
 810535e:	bf14      	ite	ne
 8105360:	2301      	movne	r3, #1
 8105362:	2300      	moveq	r3, #0
 8105364:	b2db      	uxtb	r3, r3
 8105366:	e03c      	b.n	81053e2 <HAL_TIM_PWM_Start+0x9e>
 8105368:	683b      	ldr	r3, [r7, #0]
 810536a:	2b04      	cmp	r3, #4
 810536c:	d109      	bne.n	8105382 <HAL_TIM_PWM_Start+0x3e>
 810536e:	687b      	ldr	r3, [r7, #4]
 8105370:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8105374:	b2db      	uxtb	r3, r3
 8105376:	2b01      	cmp	r3, #1
 8105378:	bf14      	ite	ne
 810537a:	2301      	movne	r3, #1
 810537c:	2300      	moveq	r3, #0
 810537e:	b2db      	uxtb	r3, r3
 8105380:	e02f      	b.n	81053e2 <HAL_TIM_PWM_Start+0x9e>
 8105382:	683b      	ldr	r3, [r7, #0]
 8105384:	2b08      	cmp	r3, #8
 8105386:	d109      	bne.n	810539c <HAL_TIM_PWM_Start+0x58>
 8105388:	687b      	ldr	r3, [r7, #4]
 810538a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810538e:	b2db      	uxtb	r3, r3
 8105390:	2b01      	cmp	r3, #1
 8105392:	bf14      	ite	ne
 8105394:	2301      	movne	r3, #1
 8105396:	2300      	moveq	r3, #0
 8105398:	b2db      	uxtb	r3, r3
 810539a:	e022      	b.n	81053e2 <HAL_TIM_PWM_Start+0x9e>
 810539c:	683b      	ldr	r3, [r7, #0]
 810539e:	2b0c      	cmp	r3, #12
 81053a0:	d109      	bne.n	81053b6 <HAL_TIM_PWM_Start+0x72>
 81053a2:	687b      	ldr	r3, [r7, #4]
 81053a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81053a8:	b2db      	uxtb	r3, r3
 81053aa:	2b01      	cmp	r3, #1
 81053ac:	bf14      	ite	ne
 81053ae:	2301      	movne	r3, #1
 81053b0:	2300      	moveq	r3, #0
 81053b2:	b2db      	uxtb	r3, r3
 81053b4:	e015      	b.n	81053e2 <HAL_TIM_PWM_Start+0x9e>
 81053b6:	683b      	ldr	r3, [r7, #0]
 81053b8:	2b10      	cmp	r3, #16
 81053ba:	d109      	bne.n	81053d0 <HAL_TIM_PWM_Start+0x8c>
 81053bc:	687b      	ldr	r3, [r7, #4]
 81053be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 81053c2:	b2db      	uxtb	r3, r3
 81053c4:	2b01      	cmp	r3, #1
 81053c6:	bf14      	ite	ne
 81053c8:	2301      	movne	r3, #1
 81053ca:	2300      	moveq	r3, #0
 81053cc:	b2db      	uxtb	r3, r3
 81053ce:	e008      	b.n	81053e2 <HAL_TIM_PWM_Start+0x9e>
 81053d0:	687b      	ldr	r3, [r7, #4]
 81053d2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 81053d6:	b2db      	uxtb	r3, r3
 81053d8:	2b01      	cmp	r3, #1
 81053da:	bf14      	ite	ne
 81053dc:	2301      	movne	r3, #1
 81053de:	2300      	moveq	r3, #0
 81053e0:	b2db      	uxtb	r3, r3
 81053e2:	2b00      	cmp	r3, #0
 81053e4:	d001      	beq.n	81053ea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 81053e6:	2301      	movs	r3, #1
 81053e8:	e0a1      	b.n	810552e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 81053ea:	683b      	ldr	r3, [r7, #0]
 81053ec:	2b00      	cmp	r3, #0
 81053ee:	d104      	bne.n	81053fa <HAL_TIM_PWM_Start+0xb6>
 81053f0:	687b      	ldr	r3, [r7, #4]
 81053f2:	2202      	movs	r2, #2
 81053f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 81053f8:	e023      	b.n	8105442 <HAL_TIM_PWM_Start+0xfe>
 81053fa:	683b      	ldr	r3, [r7, #0]
 81053fc:	2b04      	cmp	r3, #4
 81053fe:	d104      	bne.n	810540a <HAL_TIM_PWM_Start+0xc6>
 8105400:	687b      	ldr	r3, [r7, #4]
 8105402:	2202      	movs	r2, #2
 8105404:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8105408:	e01b      	b.n	8105442 <HAL_TIM_PWM_Start+0xfe>
 810540a:	683b      	ldr	r3, [r7, #0]
 810540c:	2b08      	cmp	r3, #8
 810540e:	d104      	bne.n	810541a <HAL_TIM_PWM_Start+0xd6>
 8105410:	687b      	ldr	r3, [r7, #4]
 8105412:	2202      	movs	r2, #2
 8105414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8105418:	e013      	b.n	8105442 <HAL_TIM_PWM_Start+0xfe>
 810541a:	683b      	ldr	r3, [r7, #0]
 810541c:	2b0c      	cmp	r3, #12
 810541e:	d104      	bne.n	810542a <HAL_TIM_PWM_Start+0xe6>
 8105420:	687b      	ldr	r3, [r7, #4]
 8105422:	2202      	movs	r2, #2
 8105424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8105428:	e00b      	b.n	8105442 <HAL_TIM_PWM_Start+0xfe>
 810542a:	683b      	ldr	r3, [r7, #0]
 810542c:	2b10      	cmp	r3, #16
 810542e:	d104      	bne.n	810543a <HAL_TIM_PWM_Start+0xf6>
 8105430:	687b      	ldr	r3, [r7, #4]
 8105432:	2202      	movs	r2, #2
 8105434:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8105438:	e003      	b.n	8105442 <HAL_TIM_PWM_Start+0xfe>
 810543a:	687b      	ldr	r3, [r7, #4]
 810543c:	2202      	movs	r2, #2
 810543e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8105442:	687b      	ldr	r3, [r7, #4]
 8105444:	681b      	ldr	r3, [r3, #0]
 8105446:	2201      	movs	r2, #1
 8105448:	6839      	ldr	r1, [r7, #0]
 810544a:	4618      	mov	r0, r3
 810544c:	f000 ffe8 	bl	8106420 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8105450:	687b      	ldr	r3, [r7, #4]
 8105452:	681b      	ldr	r3, [r3, #0]
 8105454:	4a38      	ldr	r2, [pc, #224]	; (8105538 <HAL_TIM_PWM_Start+0x1f4>)
 8105456:	4293      	cmp	r3, r2
 8105458:	d013      	beq.n	8105482 <HAL_TIM_PWM_Start+0x13e>
 810545a:	687b      	ldr	r3, [r7, #4]
 810545c:	681b      	ldr	r3, [r3, #0]
 810545e:	4a37      	ldr	r2, [pc, #220]	; (810553c <HAL_TIM_PWM_Start+0x1f8>)
 8105460:	4293      	cmp	r3, r2
 8105462:	d00e      	beq.n	8105482 <HAL_TIM_PWM_Start+0x13e>
 8105464:	687b      	ldr	r3, [r7, #4]
 8105466:	681b      	ldr	r3, [r3, #0]
 8105468:	4a35      	ldr	r2, [pc, #212]	; (8105540 <HAL_TIM_PWM_Start+0x1fc>)
 810546a:	4293      	cmp	r3, r2
 810546c:	d009      	beq.n	8105482 <HAL_TIM_PWM_Start+0x13e>
 810546e:	687b      	ldr	r3, [r7, #4]
 8105470:	681b      	ldr	r3, [r3, #0]
 8105472:	4a34      	ldr	r2, [pc, #208]	; (8105544 <HAL_TIM_PWM_Start+0x200>)
 8105474:	4293      	cmp	r3, r2
 8105476:	d004      	beq.n	8105482 <HAL_TIM_PWM_Start+0x13e>
 8105478:	687b      	ldr	r3, [r7, #4]
 810547a:	681b      	ldr	r3, [r3, #0]
 810547c:	4a32      	ldr	r2, [pc, #200]	; (8105548 <HAL_TIM_PWM_Start+0x204>)
 810547e:	4293      	cmp	r3, r2
 8105480:	d101      	bne.n	8105486 <HAL_TIM_PWM_Start+0x142>
 8105482:	2301      	movs	r3, #1
 8105484:	e000      	b.n	8105488 <HAL_TIM_PWM_Start+0x144>
 8105486:	2300      	movs	r3, #0
 8105488:	2b00      	cmp	r3, #0
 810548a:	d007      	beq.n	810549c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 810548c:	687b      	ldr	r3, [r7, #4]
 810548e:	681b      	ldr	r3, [r3, #0]
 8105490:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8105492:	687b      	ldr	r3, [r7, #4]
 8105494:	681b      	ldr	r3, [r3, #0]
 8105496:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 810549a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810549c:	687b      	ldr	r3, [r7, #4]
 810549e:	681b      	ldr	r3, [r3, #0]
 81054a0:	4a25      	ldr	r2, [pc, #148]	; (8105538 <HAL_TIM_PWM_Start+0x1f4>)
 81054a2:	4293      	cmp	r3, r2
 81054a4:	d022      	beq.n	81054ec <HAL_TIM_PWM_Start+0x1a8>
 81054a6:	687b      	ldr	r3, [r7, #4]
 81054a8:	681b      	ldr	r3, [r3, #0]
 81054aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81054ae:	d01d      	beq.n	81054ec <HAL_TIM_PWM_Start+0x1a8>
 81054b0:	687b      	ldr	r3, [r7, #4]
 81054b2:	681b      	ldr	r3, [r3, #0]
 81054b4:	4a25      	ldr	r2, [pc, #148]	; (810554c <HAL_TIM_PWM_Start+0x208>)
 81054b6:	4293      	cmp	r3, r2
 81054b8:	d018      	beq.n	81054ec <HAL_TIM_PWM_Start+0x1a8>
 81054ba:	687b      	ldr	r3, [r7, #4]
 81054bc:	681b      	ldr	r3, [r3, #0]
 81054be:	4a24      	ldr	r2, [pc, #144]	; (8105550 <HAL_TIM_PWM_Start+0x20c>)
 81054c0:	4293      	cmp	r3, r2
 81054c2:	d013      	beq.n	81054ec <HAL_TIM_PWM_Start+0x1a8>
 81054c4:	687b      	ldr	r3, [r7, #4]
 81054c6:	681b      	ldr	r3, [r3, #0]
 81054c8:	4a22      	ldr	r2, [pc, #136]	; (8105554 <HAL_TIM_PWM_Start+0x210>)
 81054ca:	4293      	cmp	r3, r2
 81054cc:	d00e      	beq.n	81054ec <HAL_TIM_PWM_Start+0x1a8>
 81054ce:	687b      	ldr	r3, [r7, #4]
 81054d0:	681b      	ldr	r3, [r3, #0]
 81054d2:	4a1a      	ldr	r2, [pc, #104]	; (810553c <HAL_TIM_PWM_Start+0x1f8>)
 81054d4:	4293      	cmp	r3, r2
 81054d6:	d009      	beq.n	81054ec <HAL_TIM_PWM_Start+0x1a8>
 81054d8:	687b      	ldr	r3, [r7, #4]
 81054da:	681b      	ldr	r3, [r3, #0]
 81054dc:	4a1e      	ldr	r2, [pc, #120]	; (8105558 <HAL_TIM_PWM_Start+0x214>)
 81054de:	4293      	cmp	r3, r2
 81054e0:	d004      	beq.n	81054ec <HAL_TIM_PWM_Start+0x1a8>
 81054e2:	687b      	ldr	r3, [r7, #4]
 81054e4:	681b      	ldr	r3, [r3, #0]
 81054e6:	4a16      	ldr	r2, [pc, #88]	; (8105540 <HAL_TIM_PWM_Start+0x1fc>)
 81054e8:	4293      	cmp	r3, r2
 81054ea:	d115      	bne.n	8105518 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 81054ec:	687b      	ldr	r3, [r7, #4]
 81054ee:	681b      	ldr	r3, [r3, #0]
 81054f0:	689a      	ldr	r2, [r3, #8]
 81054f2:	4b1a      	ldr	r3, [pc, #104]	; (810555c <HAL_TIM_PWM_Start+0x218>)
 81054f4:	4013      	ands	r3, r2
 81054f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81054f8:	68fb      	ldr	r3, [r7, #12]
 81054fa:	2b06      	cmp	r3, #6
 81054fc:	d015      	beq.n	810552a <HAL_TIM_PWM_Start+0x1e6>
 81054fe:	68fb      	ldr	r3, [r7, #12]
 8105500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105504:	d011      	beq.n	810552a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8105506:	687b      	ldr	r3, [r7, #4]
 8105508:	681b      	ldr	r3, [r3, #0]
 810550a:	681a      	ldr	r2, [r3, #0]
 810550c:	687b      	ldr	r3, [r7, #4]
 810550e:	681b      	ldr	r3, [r3, #0]
 8105510:	f042 0201 	orr.w	r2, r2, #1
 8105514:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8105516:	e008      	b.n	810552a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8105518:	687b      	ldr	r3, [r7, #4]
 810551a:	681b      	ldr	r3, [r3, #0]
 810551c:	681a      	ldr	r2, [r3, #0]
 810551e:	687b      	ldr	r3, [r7, #4]
 8105520:	681b      	ldr	r3, [r3, #0]
 8105522:	f042 0201 	orr.w	r2, r2, #1
 8105526:	601a      	str	r2, [r3, #0]
 8105528:	e000      	b.n	810552c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810552a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 810552c:	2300      	movs	r3, #0
}
 810552e:	4618      	mov	r0, r3
 8105530:	3710      	adds	r7, #16
 8105532:	46bd      	mov	sp, r7
 8105534:	bd80      	pop	{r7, pc}
 8105536:	bf00      	nop
 8105538:	40010000 	.word	0x40010000
 810553c:	40010400 	.word	0x40010400
 8105540:	40014000 	.word	0x40014000
 8105544:	40014400 	.word	0x40014400
 8105548:	40014800 	.word	0x40014800
 810554c:	40000400 	.word	0x40000400
 8105550:	40000800 	.word	0x40000800
 8105554:	40000c00 	.word	0x40000c00
 8105558:	40001800 	.word	0x40001800
 810555c:	00010007 	.word	0x00010007

08105560 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8105560:	b580      	push	{r7, lr}
 8105562:	b082      	sub	sp, #8
 8105564:	af00      	add	r7, sp, #0
 8105566:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8105568:	687b      	ldr	r3, [r7, #4]
 810556a:	681b      	ldr	r3, [r3, #0]
 810556c:	691b      	ldr	r3, [r3, #16]
 810556e:	f003 0302 	and.w	r3, r3, #2
 8105572:	2b02      	cmp	r3, #2
 8105574:	d122      	bne.n	81055bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8105576:	687b      	ldr	r3, [r7, #4]
 8105578:	681b      	ldr	r3, [r3, #0]
 810557a:	68db      	ldr	r3, [r3, #12]
 810557c:	f003 0302 	and.w	r3, r3, #2
 8105580:	2b02      	cmp	r3, #2
 8105582:	d11b      	bne.n	81055bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8105584:	687b      	ldr	r3, [r7, #4]
 8105586:	681b      	ldr	r3, [r3, #0]
 8105588:	f06f 0202 	mvn.w	r2, #2
 810558c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 810558e:	687b      	ldr	r3, [r7, #4]
 8105590:	2201      	movs	r2, #1
 8105592:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8105594:	687b      	ldr	r3, [r7, #4]
 8105596:	681b      	ldr	r3, [r3, #0]
 8105598:	699b      	ldr	r3, [r3, #24]
 810559a:	f003 0303 	and.w	r3, r3, #3
 810559e:	2b00      	cmp	r3, #0
 81055a0:	d003      	beq.n	81055aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 81055a2:	6878      	ldr	r0, [r7, #4]
 81055a4:	f000 fb12 	bl	8105bcc <HAL_TIM_IC_CaptureCallback>
 81055a8:	e005      	b.n	81055b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 81055aa:	6878      	ldr	r0, [r7, #4]
 81055ac:	f000 fb04 	bl	8105bb8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 81055b0:	6878      	ldr	r0, [r7, #4]
 81055b2:	f000 fb15 	bl	8105be0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81055b6:	687b      	ldr	r3, [r7, #4]
 81055b8:	2200      	movs	r2, #0
 81055ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 81055bc:	687b      	ldr	r3, [r7, #4]
 81055be:	681b      	ldr	r3, [r3, #0]
 81055c0:	691b      	ldr	r3, [r3, #16]
 81055c2:	f003 0304 	and.w	r3, r3, #4
 81055c6:	2b04      	cmp	r3, #4
 81055c8:	d122      	bne.n	8105610 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 81055ca:	687b      	ldr	r3, [r7, #4]
 81055cc:	681b      	ldr	r3, [r3, #0]
 81055ce:	68db      	ldr	r3, [r3, #12]
 81055d0:	f003 0304 	and.w	r3, r3, #4
 81055d4:	2b04      	cmp	r3, #4
 81055d6:	d11b      	bne.n	8105610 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 81055d8:	687b      	ldr	r3, [r7, #4]
 81055da:	681b      	ldr	r3, [r3, #0]
 81055dc:	f06f 0204 	mvn.w	r2, #4
 81055e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 81055e2:	687b      	ldr	r3, [r7, #4]
 81055e4:	2202      	movs	r2, #2
 81055e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 81055e8:	687b      	ldr	r3, [r7, #4]
 81055ea:	681b      	ldr	r3, [r3, #0]
 81055ec:	699b      	ldr	r3, [r3, #24]
 81055ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81055f2:	2b00      	cmp	r3, #0
 81055f4:	d003      	beq.n	81055fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81055f6:	6878      	ldr	r0, [r7, #4]
 81055f8:	f000 fae8 	bl	8105bcc <HAL_TIM_IC_CaptureCallback>
 81055fc:	e005      	b.n	810560a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81055fe:	6878      	ldr	r0, [r7, #4]
 8105600:	f000 fada 	bl	8105bb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8105604:	6878      	ldr	r0, [r7, #4]
 8105606:	f000 faeb 	bl	8105be0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810560a:	687b      	ldr	r3, [r7, #4]
 810560c:	2200      	movs	r2, #0
 810560e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8105610:	687b      	ldr	r3, [r7, #4]
 8105612:	681b      	ldr	r3, [r3, #0]
 8105614:	691b      	ldr	r3, [r3, #16]
 8105616:	f003 0308 	and.w	r3, r3, #8
 810561a:	2b08      	cmp	r3, #8
 810561c:	d122      	bne.n	8105664 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 810561e:	687b      	ldr	r3, [r7, #4]
 8105620:	681b      	ldr	r3, [r3, #0]
 8105622:	68db      	ldr	r3, [r3, #12]
 8105624:	f003 0308 	and.w	r3, r3, #8
 8105628:	2b08      	cmp	r3, #8
 810562a:	d11b      	bne.n	8105664 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 810562c:	687b      	ldr	r3, [r7, #4]
 810562e:	681b      	ldr	r3, [r3, #0]
 8105630:	f06f 0208 	mvn.w	r2, #8
 8105634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8105636:	687b      	ldr	r3, [r7, #4]
 8105638:	2204      	movs	r2, #4
 810563a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 810563c:	687b      	ldr	r3, [r7, #4]
 810563e:	681b      	ldr	r3, [r3, #0]
 8105640:	69db      	ldr	r3, [r3, #28]
 8105642:	f003 0303 	and.w	r3, r3, #3
 8105646:	2b00      	cmp	r3, #0
 8105648:	d003      	beq.n	8105652 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810564a:	6878      	ldr	r0, [r7, #4]
 810564c:	f000 fabe 	bl	8105bcc <HAL_TIM_IC_CaptureCallback>
 8105650:	e005      	b.n	810565e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8105652:	6878      	ldr	r0, [r7, #4]
 8105654:	f000 fab0 	bl	8105bb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8105658:	6878      	ldr	r0, [r7, #4]
 810565a:	f000 fac1 	bl	8105be0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810565e:	687b      	ldr	r3, [r7, #4]
 8105660:	2200      	movs	r2, #0
 8105662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8105664:	687b      	ldr	r3, [r7, #4]
 8105666:	681b      	ldr	r3, [r3, #0]
 8105668:	691b      	ldr	r3, [r3, #16]
 810566a:	f003 0310 	and.w	r3, r3, #16
 810566e:	2b10      	cmp	r3, #16
 8105670:	d122      	bne.n	81056b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8105672:	687b      	ldr	r3, [r7, #4]
 8105674:	681b      	ldr	r3, [r3, #0]
 8105676:	68db      	ldr	r3, [r3, #12]
 8105678:	f003 0310 	and.w	r3, r3, #16
 810567c:	2b10      	cmp	r3, #16
 810567e:	d11b      	bne.n	81056b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8105680:	687b      	ldr	r3, [r7, #4]
 8105682:	681b      	ldr	r3, [r3, #0]
 8105684:	f06f 0210 	mvn.w	r2, #16
 8105688:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 810568a:	687b      	ldr	r3, [r7, #4]
 810568c:	2208      	movs	r2, #8
 810568e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8105690:	687b      	ldr	r3, [r7, #4]
 8105692:	681b      	ldr	r3, [r3, #0]
 8105694:	69db      	ldr	r3, [r3, #28]
 8105696:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810569a:	2b00      	cmp	r3, #0
 810569c:	d003      	beq.n	81056a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810569e:	6878      	ldr	r0, [r7, #4]
 81056a0:	f000 fa94 	bl	8105bcc <HAL_TIM_IC_CaptureCallback>
 81056a4:	e005      	b.n	81056b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81056a6:	6878      	ldr	r0, [r7, #4]
 81056a8:	f000 fa86 	bl	8105bb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81056ac:	6878      	ldr	r0, [r7, #4]
 81056ae:	f000 fa97 	bl	8105be0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81056b2:	687b      	ldr	r3, [r7, #4]
 81056b4:	2200      	movs	r2, #0
 81056b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 81056b8:	687b      	ldr	r3, [r7, #4]
 81056ba:	681b      	ldr	r3, [r3, #0]
 81056bc:	691b      	ldr	r3, [r3, #16]
 81056be:	f003 0301 	and.w	r3, r3, #1
 81056c2:	2b01      	cmp	r3, #1
 81056c4:	d10e      	bne.n	81056e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 81056c6:	687b      	ldr	r3, [r7, #4]
 81056c8:	681b      	ldr	r3, [r3, #0]
 81056ca:	68db      	ldr	r3, [r3, #12]
 81056cc:	f003 0301 	and.w	r3, r3, #1
 81056d0:	2b01      	cmp	r3, #1
 81056d2:	d107      	bne.n	81056e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 81056d4:	687b      	ldr	r3, [r7, #4]
 81056d6:	681b      	ldr	r3, [r3, #0]
 81056d8:	f06f 0201 	mvn.w	r2, #1
 81056dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 81056de:	6878      	ldr	r0, [r7, #4]
 81056e0:	f7fc faaa 	bl	8101c38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 81056e4:	687b      	ldr	r3, [r7, #4]
 81056e6:	681b      	ldr	r3, [r3, #0]
 81056e8:	691b      	ldr	r3, [r3, #16]
 81056ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81056ee:	2b80      	cmp	r3, #128	; 0x80
 81056f0:	d10e      	bne.n	8105710 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 81056f2:	687b      	ldr	r3, [r7, #4]
 81056f4:	681b      	ldr	r3, [r3, #0]
 81056f6:	68db      	ldr	r3, [r3, #12]
 81056f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81056fc:	2b80      	cmp	r3, #128	; 0x80
 81056fe:	d107      	bne.n	8105710 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8105700:	687b      	ldr	r3, [r7, #4]
 8105702:	681b      	ldr	r3, [r3, #0]
 8105704:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8105708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 810570a:	6878      	ldr	r0, [r7, #4]
 810570c:	f000 ff46 	bl	810659c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8105710:	687b      	ldr	r3, [r7, #4]
 8105712:	681b      	ldr	r3, [r3, #0]
 8105714:	691b      	ldr	r3, [r3, #16]
 8105716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810571a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810571e:	d10e      	bne.n	810573e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8105720:	687b      	ldr	r3, [r7, #4]
 8105722:	681b      	ldr	r3, [r3, #0]
 8105724:	68db      	ldr	r3, [r3, #12]
 8105726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810572a:	2b80      	cmp	r3, #128	; 0x80
 810572c:	d107      	bne.n	810573e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 810572e:	687b      	ldr	r3, [r7, #4]
 8105730:	681b      	ldr	r3, [r3, #0]
 8105732:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8105736:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8105738:	6878      	ldr	r0, [r7, #4]
 810573a:	f000 ff39 	bl	81065b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 810573e:	687b      	ldr	r3, [r7, #4]
 8105740:	681b      	ldr	r3, [r3, #0]
 8105742:	691b      	ldr	r3, [r3, #16]
 8105744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8105748:	2b40      	cmp	r3, #64	; 0x40
 810574a:	d10e      	bne.n	810576a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 810574c:	687b      	ldr	r3, [r7, #4]
 810574e:	681b      	ldr	r3, [r3, #0]
 8105750:	68db      	ldr	r3, [r3, #12]
 8105752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8105756:	2b40      	cmp	r3, #64	; 0x40
 8105758:	d107      	bne.n	810576a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 810575a:	687b      	ldr	r3, [r7, #4]
 810575c:	681b      	ldr	r3, [r3, #0]
 810575e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8105762:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8105764:	6878      	ldr	r0, [r7, #4]
 8105766:	f000 fa45 	bl	8105bf4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 810576a:	687b      	ldr	r3, [r7, #4]
 810576c:	681b      	ldr	r3, [r3, #0]
 810576e:	691b      	ldr	r3, [r3, #16]
 8105770:	f003 0320 	and.w	r3, r3, #32
 8105774:	2b20      	cmp	r3, #32
 8105776:	d10e      	bne.n	8105796 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8105778:	687b      	ldr	r3, [r7, #4]
 810577a:	681b      	ldr	r3, [r3, #0]
 810577c:	68db      	ldr	r3, [r3, #12]
 810577e:	f003 0320 	and.w	r3, r3, #32
 8105782:	2b20      	cmp	r3, #32
 8105784:	d107      	bne.n	8105796 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8105786:	687b      	ldr	r3, [r7, #4]
 8105788:	681b      	ldr	r3, [r3, #0]
 810578a:	f06f 0220 	mvn.w	r2, #32
 810578e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8105790:	6878      	ldr	r0, [r7, #4]
 8105792:	f000 fef9 	bl	8106588 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8105796:	bf00      	nop
 8105798:	3708      	adds	r7, #8
 810579a:	46bd      	mov	sp, r7
 810579c:	bd80      	pop	{r7, pc}
	...

081057a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 81057a0:	b580      	push	{r7, lr}
 81057a2:	b086      	sub	sp, #24
 81057a4:	af00      	add	r7, sp, #0
 81057a6:	60f8      	str	r0, [r7, #12]
 81057a8:	60b9      	str	r1, [r7, #8]
 81057aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 81057ac:	2300      	movs	r3, #0
 81057ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 81057b0:	68fb      	ldr	r3, [r7, #12]
 81057b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 81057b6:	2b01      	cmp	r3, #1
 81057b8:	d101      	bne.n	81057be <HAL_TIM_PWM_ConfigChannel+0x1e>
 81057ba:	2302      	movs	r3, #2
 81057bc:	e0ff      	b.n	81059be <HAL_TIM_PWM_ConfigChannel+0x21e>
 81057be:	68fb      	ldr	r3, [r7, #12]
 81057c0:	2201      	movs	r2, #1
 81057c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 81057c6:	687b      	ldr	r3, [r7, #4]
 81057c8:	2b14      	cmp	r3, #20
 81057ca:	f200 80f0 	bhi.w	81059ae <HAL_TIM_PWM_ConfigChannel+0x20e>
 81057ce:	a201      	add	r2, pc, #4	; (adr r2, 81057d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 81057d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81057d4:	08105829 	.word	0x08105829
 81057d8:	081059af 	.word	0x081059af
 81057dc:	081059af 	.word	0x081059af
 81057e0:	081059af 	.word	0x081059af
 81057e4:	08105869 	.word	0x08105869
 81057e8:	081059af 	.word	0x081059af
 81057ec:	081059af 	.word	0x081059af
 81057f0:	081059af 	.word	0x081059af
 81057f4:	081058ab 	.word	0x081058ab
 81057f8:	081059af 	.word	0x081059af
 81057fc:	081059af 	.word	0x081059af
 8105800:	081059af 	.word	0x081059af
 8105804:	081058eb 	.word	0x081058eb
 8105808:	081059af 	.word	0x081059af
 810580c:	081059af 	.word	0x081059af
 8105810:	081059af 	.word	0x081059af
 8105814:	0810592d 	.word	0x0810592d
 8105818:	081059af 	.word	0x081059af
 810581c:	081059af 	.word	0x081059af
 8105820:	081059af 	.word	0x081059af
 8105824:	0810596d 	.word	0x0810596d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8105828:	68fb      	ldr	r3, [r7, #12]
 810582a:	681b      	ldr	r3, [r3, #0]
 810582c:	68b9      	ldr	r1, [r7, #8]
 810582e:	4618      	mov	r0, r3
 8105830:	f000 fa84 	bl	8105d3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8105834:	68fb      	ldr	r3, [r7, #12]
 8105836:	681b      	ldr	r3, [r3, #0]
 8105838:	699a      	ldr	r2, [r3, #24]
 810583a:	68fb      	ldr	r3, [r7, #12]
 810583c:	681b      	ldr	r3, [r3, #0]
 810583e:	f042 0208 	orr.w	r2, r2, #8
 8105842:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8105844:	68fb      	ldr	r3, [r7, #12]
 8105846:	681b      	ldr	r3, [r3, #0]
 8105848:	699a      	ldr	r2, [r3, #24]
 810584a:	68fb      	ldr	r3, [r7, #12]
 810584c:	681b      	ldr	r3, [r3, #0]
 810584e:	f022 0204 	bic.w	r2, r2, #4
 8105852:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8105854:	68fb      	ldr	r3, [r7, #12]
 8105856:	681b      	ldr	r3, [r3, #0]
 8105858:	6999      	ldr	r1, [r3, #24]
 810585a:	68bb      	ldr	r3, [r7, #8]
 810585c:	691a      	ldr	r2, [r3, #16]
 810585e:	68fb      	ldr	r3, [r7, #12]
 8105860:	681b      	ldr	r3, [r3, #0]
 8105862:	430a      	orrs	r2, r1
 8105864:	619a      	str	r2, [r3, #24]
      break;
 8105866:	e0a5      	b.n	81059b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8105868:	68fb      	ldr	r3, [r7, #12]
 810586a:	681b      	ldr	r3, [r3, #0]
 810586c:	68b9      	ldr	r1, [r7, #8]
 810586e:	4618      	mov	r0, r3
 8105870:	f000 faf4 	bl	8105e5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8105874:	68fb      	ldr	r3, [r7, #12]
 8105876:	681b      	ldr	r3, [r3, #0]
 8105878:	699a      	ldr	r2, [r3, #24]
 810587a:	68fb      	ldr	r3, [r7, #12]
 810587c:	681b      	ldr	r3, [r3, #0]
 810587e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8105882:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8105884:	68fb      	ldr	r3, [r7, #12]
 8105886:	681b      	ldr	r3, [r3, #0]
 8105888:	699a      	ldr	r2, [r3, #24]
 810588a:	68fb      	ldr	r3, [r7, #12]
 810588c:	681b      	ldr	r3, [r3, #0]
 810588e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8105892:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8105894:	68fb      	ldr	r3, [r7, #12]
 8105896:	681b      	ldr	r3, [r3, #0]
 8105898:	6999      	ldr	r1, [r3, #24]
 810589a:	68bb      	ldr	r3, [r7, #8]
 810589c:	691b      	ldr	r3, [r3, #16]
 810589e:	021a      	lsls	r2, r3, #8
 81058a0:	68fb      	ldr	r3, [r7, #12]
 81058a2:	681b      	ldr	r3, [r3, #0]
 81058a4:	430a      	orrs	r2, r1
 81058a6:	619a      	str	r2, [r3, #24]
      break;
 81058a8:	e084      	b.n	81059b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 81058aa:	68fb      	ldr	r3, [r7, #12]
 81058ac:	681b      	ldr	r3, [r3, #0]
 81058ae:	68b9      	ldr	r1, [r7, #8]
 81058b0:	4618      	mov	r0, r3
 81058b2:	f000 fb5d 	bl	8105f70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 81058b6:	68fb      	ldr	r3, [r7, #12]
 81058b8:	681b      	ldr	r3, [r3, #0]
 81058ba:	69da      	ldr	r2, [r3, #28]
 81058bc:	68fb      	ldr	r3, [r7, #12]
 81058be:	681b      	ldr	r3, [r3, #0]
 81058c0:	f042 0208 	orr.w	r2, r2, #8
 81058c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 81058c6:	68fb      	ldr	r3, [r7, #12]
 81058c8:	681b      	ldr	r3, [r3, #0]
 81058ca:	69da      	ldr	r2, [r3, #28]
 81058cc:	68fb      	ldr	r3, [r7, #12]
 81058ce:	681b      	ldr	r3, [r3, #0]
 81058d0:	f022 0204 	bic.w	r2, r2, #4
 81058d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 81058d6:	68fb      	ldr	r3, [r7, #12]
 81058d8:	681b      	ldr	r3, [r3, #0]
 81058da:	69d9      	ldr	r1, [r3, #28]
 81058dc:	68bb      	ldr	r3, [r7, #8]
 81058de:	691a      	ldr	r2, [r3, #16]
 81058e0:	68fb      	ldr	r3, [r7, #12]
 81058e2:	681b      	ldr	r3, [r3, #0]
 81058e4:	430a      	orrs	r2, r1
 81058e6:	61da      	str	r2, [r3, #28]
      break;
 81058e8:	e064      	b.n	81059b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 81058ea:	68fb      	ldr	r3, [r7, #12]
 81058ec:	681b      	ldr	r3, [r3, #0]
 81058ee:	68b9      	ldr	r1, [r7, #8]
 81058f0:	4618      	mov	r0, r3
 81058f2:	f000 fbc5 	bl	8106080 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 81058f6:	68fb      	ldr	r3, [r7, #12]
 81058f8:	681b      	ldr	r3, [r3, #0]
 81058fa:	69da      	ldr	r2, [r3, #28]
 81058fc:	68fb      	ldr	r3, [r7, #12]
 81058fe:	681b      	ldr	r3, [r3, #0]
 8105900:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8105904:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8105906:	68fb      	ldr	r3, [r7, #12]
 8105908:	681b      	ldr	r3, [r3, #0]
 810590a:	69da      	ldr	r2, [r3, #28]
 810590c:	68fb      	ldr	r3, [r7, #12]
 810590e:	681b      	ldr	r3, [r3, #0]
 8105910:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8105914:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8105916:	68fb      	ldr	r3, [r7, #12]
 8105918:	681b      	ldr	r3, [r3, #0]
 810591a:	69d9      	ldr	r1, [r3, #28]
 810591c:	68bb      	ldr	r3, [r7, #8]
 810591e:	691b      	ldr	r3, [r3, #16]
 8105920:	021a      	lsls	r2, r3, #8
 8105922:	68fb      	ldr	r3, [r7, #12]
 8105924:	681b      	ldr	r3, [r3, #0]
 8105926:	430a      	orrs	r2, r1
 8105928:	61da      	str	r2, [r3, #28]
      break;
 810592a:	e043      	b.n	81059b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 810592c:	68fb      	ldr	r3, [r7, #12]
 810592e:	681b      	ldr	r3, [r3, #0]
 8105930:	68b9      	ldr	r1, [r7, #8]
 8105932:	4618      	mov	r0, r3
 8105934:	f000 fc0e 	bl	8106154 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8105938:	68fb      	ldr	r3, [r7, #12]
 810593a:	681b      	ldr	r3, [r3, #0]
 810593c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810593e:	68fb      	ldr	r3, [r7, #12]
 8105940:	681b      	ldr	r3, [r3, #0]
 8105942:	f042 0208 	orr.w	r2, r2, #8
 8105946:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8105948:	68fb      	ldr	r3, [r7, #12]
 810594a:	681b      	ldr	r3, [r3, #0]
 810594c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810594e:	68fb      	ldr	r3, [r7, #12]
 8105950:	681b      	ldr	r3, [r3, #0]
 8105952:	f022 0204 	bic.w	r2, r2, #4
 8105956:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8105958:	68fb      	ldr	r3, [r7, #12]
 810595a:	681b      	ldr	r3, [r3, #0]
 810595c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 810595e:	68bb      	ldr	r3, [r7, #8]
 8105960:	691a      	ldr	r2, [r3, #16]
 8105962:	68fb      	ldr	r3, [r7, #12]
 8105964:	681b      	ldr	r3, [r3, #0]
 8105966:	430a      	orrs	r2, r1
 8105968:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 810596a:	e023      	b.n	81059b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 810596c:	68fb      	ldr	r3, [r7, #12]
 810596e:	681b      	ldr	r3, [r3, #0]
 8105970:	68b9      	ldr	r1, [r7, #8]
 8105972:	4618      	mov	r0, r3
 8105974:	f000 fc52 	bl	810621c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8105978:	68fb      	ldr	r3, [r7, #12]
 810597a:	681b      	ldr	r3, [r3, #0]
 810597c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810597e:	68fb      	ldr	r3, [r7, #12]
 8105980:	681b      	ldr	r3, [r3, #0]
 8105982:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8105986:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8105988:	68fb      	ldr	r3, [r7, #12]
 810598a:	681b      	ldr	r3, [r3, #0]
 810598c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810598e:	68fb      	ldr	r3, [r7, #12]
 8105990:	681b      	ldr	r3, [r3, #0]
 8105992:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8105996:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8105998:	68fb      	ldr	r3, [r7, #12]
 810599a:	681b      	ldr	r3, [r3, #0]
 810599c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 810599e:	68bb      	ldr	r3, [r7, #8]
 81059a0:	691b      	ldr	r3, [r3, #16]
 81059a2:	021a      	lsls	r2, r3, #8
 81059a4:	68fb      	ldr	r3, [r7, #12]
 81059a6:	681b      	ldr	r3, [r3, #0]
 81059a8:	430a      	orrs	r2, r1
 81059aa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 81059ac:	e002      	b.n	81059b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 81059ae:	2301      	movs	r3, #1
 81059b0:	75fb      	strb	r3, [r7, #23]
      break;
 81059b2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 81059b4:	68fb      	ldr	r3, [r7, #12]
 81059b6:	2200      	movs	r2, #0
 81059b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 81059bc:	7dfb      	ldrb	r3, [r7, #23]
}
 81059be:	4618      	mov	r0, r3
 81059c0:	3718      	adds	r7, #24
 81059c2:	46bd      	mov	sp, r7
 81059c4:	bd80      	pop	{r7, pc}
 81059c6:	bf00      	nop

081059c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 81059c8:	b580      	push	{r7, lr}
 81059ca:	b084      	sub	sp, #16
 81059cc:	af00      	add	r7, sp, #0
 81059ce:	6078      	str	r0, [r7, #4]
 81059d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 81059d2:	2300      	movs	r3, #0
 81059d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 81059d6:	687b      	ldr	r3, [r7, #4]
 81059d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 81059dc:	2b01      	cmp	r3, #1
 81059de:	d101      	bne.n	81059e4 <HAL_TIM_ConfigClockSource+0x1c>
 81059e0:	2302      	movs	r3, #2
 81059e2:	e0de      	b.n	8105ba2 <HAL_TIM_ConfigClockSource+0x1da>
 81059e4:	687b      	ldr	r3, [r7, #4]
 81059e6:	2201      	movs	r2, #1
 81059e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 81059ec:	687b      	ldr	r3, [r7, #4]
 81059ee:	2202      	movs	r2, #2
 81059f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 81059f4:	687b      	ldr	r3, [r7, #4]
 81059f6:	681b      	ldr	r3, [r3, #0]
 81059f8:	689b      	ldr	r3, [r3, #8]
 81059fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 81059fc:	68bb      	ldr	r3, [r7, #8]
 81059fe:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8105a02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8105a06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8105a08:	68bb      	ldr	r3, [r7, #8]
 8105a0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8105a0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8105a10:	687b      	ldr	r3, [r7, #4]
 8105a12:	681b      	ldr	r3, [r3, #0]
 8105a14:	68ba      	ldr	r2, [r7, #8]
 8105a16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8105a18:	683b      	ldr	r3, [r7, #0]
 8105a1a:	681b      	ldr	r3, [r3, #0]
 8105a1c:	4a63      	ldr	r2, [pc, #396]	; (8105bac <HAL_TIM_ConfigClockSource+0x1e4>)
 8105a1e:	4293      	cmp	r3, r2
 8105a20:	f000 80a9 	beq.w	8105b76 <HAL_TIM_ConfigClockSource+0x1ae>
 8105a24:	4a61      	ldr	r2, [pc, #388]	; (8105bac <HAL_TIM_ConfigClockSource+0x1e4>)
 8105a26:	4293      	cmp	r3, r2
 8105a28:	f200 80ae 	bhi.w	8105b88 <HAL_TIM_ConfigClockSource+0x1c0>
 8105a2c:	4a60      	ldr	r2, [pc, #384]	; (8105bb0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8105a2e:	4293      	cmp	r3, r2
 8105a30:	f000 80a1 	beq.w	8105b76 <HAL_TIM_ConfigClockSource+0x1ae>
 8105a34:	4a5e      	ldr	r2, [pc, #376]	; (8105bb0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8105a36:	4293      	cmp	r3, r2
 8105a38:	f200 80a6 	bhi.w	8105b88 <HAL_TIM_ConfigClockSource+0x1c0>
 8105a3c:	4a5d      	ldr	r2, [pc, #372]	; (8105bb4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8105a3e:	4293      	cmp	r3, r2
 8105a40:	f000 8099 	beq.w	8105b76 <HAL_TIM_ConfigClockSource+0x1ae>
 8105a44:	4a5b      	ldr	r2, [pc, #364]	; (8105bb4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8105a46:	4293      	cmp	r3, r2
 8105a48:	f200 809e 	bhi.w	8105b88 <HAL_TIM_ConfigClockSource+0x1c0>
 8105a4c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8105a50:	f000 8091 	beq.w	8105b76 <HAL_TIM_ConfigClockSource+0x1ae>
 8105a54:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8105a58:	f200 8096 	bhi.w	8105b88 <HAL_TIM_ConfigClockSource+0x1c0>
 8105a5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8105a60:	f000 8089 	beq.w	8105b76 <HAL_TIM_ConfigClockSource+0x1ae>
 8105a64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8105a68:	f200 808e 	bhi.w	8105b88 <HAL_TIM_ConfigClockSource+0x1c0>
 8105a6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105a70:	d03e      	beq.n	8105af0 <HAL_TIM_ConfigClockSource+0x128>
 8105a72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105a76:	f200 8087 	bhi.w	8105b88 <HAL_TIM_ConfigClockSource+0x1c0>
 8105a7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105a7e:	f000 8086 	beq.w	8105b8e <HAL_TIM_ConfigClockSource+0x1c6>
 8105a82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105a86:	d87f      	bhi.n	8105b88 <HAL_TIM_ConfigClockSource+0x1c0>
 8105a88:	2b70      	cmp	r3, #112	; 0x70
 8105a8a:	d01a      	beq.n	8105ac2 <HAL_TIM_ConfigClockSource+0xfa>
 8105a8c:	2b70      	cmp	r3, #112	; 0x70
 8105a8e:	d87b      	bhi.n	8105b88 <HAL_TIM_ConfigClockSource+0x1c0>
 8105a90:	2b60      	cmp	r3, #96	; 0x60
 8105a92:	d050      	beq.n	8105b36 <HAL_TIM_ConfigClockSource+0x16e>
 8105a94:	2b60      	cmp	r3, #96	; 0x60
 8105a96:	d877      	bhi.n	8105b88 <HAL_TIM_ConfigClockSource+0x1c0>
 8105a98:	2b50      	cmp	r3, #80	; 0x50
 8105a9a:	d03c      	beq.n	8105b16 <HAL_TIM_ConfigClockSource+0x14e>
 8105a9c:	2b50      	cmp	r3, #80	; 0x50
 8105a9e:	d873      	bhi.n	8105b88 <HAL_TIM_ConfigClockSource+0x1c0>
 8105aa0:	2b40      	cmp	r3, #64	; 0x40
 8105aa2:	d058      	beq.n	8105b56 <HAL_TIM_ConfigClockSource+0x18e>
 8105aa4:	2b40      	cmp	r3, #64	; 0x40
 8105aa6:	d86f      	bhi.n	8105b88 <HAL_TIM_ConfigClockSource+0x1c0>
 8105aa8:	2b30      	cmp	r3, #48	; 0x30
 8105aaa:	d064      	beq.n	8105b76 <HAL_TIM_ConfigClockSource+0x1ae>
 8105aac:	2b30      	cmp	r3, #48	; 0x30
 8105aae:	d86b      	bhi.n	8105b88 <HAL_TIM_ConfigClockSource+0x1c0>
 8105ab0:	2b20      	cmp	r3, #32
 8105ab2:	d060      	beq.n	8105b76 <HAL_TIM_ConfigClockSource+0x1ae>
 8105ab4:	2b20      	cmp	r3, #32
 8105ab6:	d867      	bhi.n	8105b88 <HAL_TIM_ConfigClockSource+0x1c0>
 8105ab8:	2b00      	cmp	r3, #0
 8105aba:	d05c      	beq.n	8105b76 <HAL_TIM_ConfigClockSource+0x1ae>
 8105abc:	2b10      	cmp	r3, #16
 8105abe:	d05a      	beq.n	8105b76 <HAL_TIM_ConfigClockSource+0x1ae>
 8105ac0:	e062      	b.n	8105b88 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8105ac2:	687b      	ldr	r3, [r7, #4]
 8105ac4:	6818      	ldr	r0, [r3, #0]
 8105ac6:	683b      	ldr	r3, [r7, #0]
 8105ac8:	6899      	ldr	r1, [r3, #8]
 8105aca:	683b      	ldr	r3, [r7, #0]
 8105acc:	685a      	ldr	r2, [r3, #4]
 8105ace:	683b      	ldr	r3, [r7, #0]
 8105ad0:	68db      	ldr	r3, [r3, #12]
 8105ad2:	f000 fc85 	bl	81063e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8105ad6:	687b      	ldr	r3, [r7, #4]
 8105ad8:	681b      	ldr	r3, [r3, #0]
 8105ada:	689b      	ldr	r3, [r3, #8]
 8105adc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8105ade:	68bb      	ldr	r3, [r7, #8]
 8105ae0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8105ae4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8105ae6:	687b      	ldr	r3, [r7, #4]
 8105ae8:	681b      	ldr	r3, [r3, #0]
 8105aea:	68ba      	ldr	r2, [r7, #8]
 8105aec:	609a      	str	r2, [r3, #8]
      break;
 8105aee:	e04f      	b.n	8105b90 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8105af0:	687b      	ldr	r3, [r7, #4]
 8105af2:	6818      	ldr	r0, [r3, #0]
 8105af4:	683b      	ldr	r3, [r7, #0]
 8105af6:	6899      	ldr	r1, [r3, #8]
 8105af8:	683b      	ldr	r3, [r7, #0]
 8105afa:	685a      	ldr	r2, [r3, #4]
 8105afc:	683b      	ldr	r3, [r7, #0]
 8105afe:	68db      	ldr	r3, [r3, #12]
 8105b00:	f000 fc6e 	bl	81063e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8105b04:	687b      	ldr	r3, [r7, #4]
 8105b06:	681b      	ldr	r3, [r3, #0]
 8105b08:	689a      	ldr	r2, [r3, #8]
 8105b0a:	687b      	ldr	r3, [r7, #4]
 8105b0c:	681b      	ldr	r3, [r3, #0]
 8105b0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8105b12:	609a      	str	r2, [r3, #8]
      break;
 8105b14:	e03c      	b.n	8105b90 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8105b16:	687b      	ldr	r3, [r7, #4]
 8105b18:	6818      	ldr	r0, [r3, #0]
 8105b1a:	683b      	ldr	r3, [r7, #0]
 8105b1c:	6859      	ldr	r1, [r3, #4]
 8105b1e:	683b      	ldr	r3, [r7, #0]
 8105b20:	68db      	ldr	r3, [r3, #12]
 8105b22:	461a      	mov	r2, r3
 8105b24:	f000 fbe0 	bl	81062e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8105b28:	687b      	ldr	r3, [r7, #4]
 8105b2a:	681b      	ldr	r3, [r3, #0]
 8105b2c:	2150      	movs	r1, #80	; 0x50
 8105b2e:	4618      	mov	r0, r3
 8105b30:	f000 fc39 	bl	81063a6 <TIM_ITRx_SetConfig>
      break;
 8105b34:	e02c      	b.n	8105b90 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8105b36:	687b      	ldr	r3, [r7, #4]
 8105b38:	6818      	ldr	r0, [r3, #0]
 8105b3a:	683b      	ldr	r3, [r7, #0]
 8105b3c:	6859      	ldr	r1, [r3, #4]
 8105b3e:	683b      	ldr	r3, [r7, #0]
 8105b40:	68db      	ldr	r3, [r3, #12]
 8105b42:	461a      	mov	r2, r3
 8105b44:	f000 fbff 	bl	8106346 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8105b48:	687b      	ldr	r3, [r7, #4]
 8105b4a:	681b      	ldr	r3, [r3, #0]
 8105b4c:	2160      	movs	r1, #96	; 0x60
 8105b4e:	4618      	mov	r0, r3
 8105b50:	f000 fc29 	bl	81063a6 <TIM_ITRx_SetConfig>
      break;
 8105b54:	e01c      	b.n	8105b90 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8105b56:	687b      	ldr	r3, [r7, #4]
 8105b58:	6818      	ldr	r0, [r3, #0]
 8105b5a:	683b      	ldr	r3, [r7, #0]
 8105b5c:	6859      	ldr	r1, [r3, #4]
 8105b5e:	683b      	ldr	r3, [r7, #0]
 8105b60:	68db      	ldr	r3, [r3, #12]
 8105b62:	461a      	mov	r2, r3
 8105b64:	f000 fbc0 	bl	81062e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8105b68:	687b      	ldr	r3, [r7, #4]
 8105b6a:	681b      	ldr	r3, [r3, #0]
 8105b6c:	2140      	movs	r1, #64	; 0x40
 8105b6e:	4618      	mov	r0, r3
 8105b70:	f000 fc19 	bl	81063a6 <TIM_ITRx_SetConfig>
      break;
 8105b74:	e00c      	b.n	8105b90 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8105b76:	687b      	ldr	r3, [r7, #4]
 8105b78:	681a      	ldr	r2, [r3, #0]
 8105b7a:	683b      	ldr	r3, [r7, #0]
 8105b7c:	681b      	ldr	r3, [r3, #0]
 8105b7e:	4619      	mov	r1, r3
 8105b80:	4610      	mov	r0, r2
 8105b82:	f000 fc10 	bl	81063a6 <TIM_ITRx_SetConfig>
      break;
 8105b86:	e003      	b.n	8105b90 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8105b88:	2301      	movs	r3, #1
 8105b8a:	73fb      	strb	r3, [r7, #15]
      break;
 8105b8c:	e000      	b.n	8105b90 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8105b8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8105b90:	687b      	ldr	r3, [r7, #4]
 8105b92:	2201      	movs	r2, #1
 8105b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8105b98:	687b      	ldr	r3, [r7, #4]
 8105b9a:	2200      	movs	r2, #0
 8105b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8105ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8105ba2:	4618      	mov	r0, r3
 8105ba4:	3710      	adds	r7, #16
 8105ba6:	46bd      	mov	sp, r7
 8105ba8:	bd80      	pop	{r7, pc}
 8105baa:	bf00      	nop
 8105bac:	00100040 	.word	0x00100040
 8105bb0:	00100030 	.word	0x00100030
 8105bb4:	00100020 	.word	0x00100020

08105bb8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8105bb8:	b480      	push	{r7}
 8105bba:	b083      	sub	sp, #12
 8105bbc:	af00      	add	r7, sp, #0
 8105bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8105bc0:	bf00      	nop
 8105bc2:	370c      	adds	r7, #12
 8105bc4:	46bd      	mov	sp, r7
 8105bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105bca:	4770      	bx	lr

08105bcc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8105bcc:	b480      	push	{r7}
 8105bce:	b083      	sub	sp, #12
 8105bd0:	af00      	add	r7, sp, #0
 8105bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8105bd4:	bf00      	nop
 8105bd6:	370c      	adds	r7, #12
 8105bd8:	46bd      	mov	sp, r7
 8105bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105bde:	4770      	bx	lr

08105be0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8105be0:	b480      	push	{r7}
 8105be2:	b083      	sub	sp, #12
 8105be4:	af00      	add	r7, sp, #0
 8105be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8105be8:	bf00      	nop
 8105bea:	370c      	adds	r7, #12
 8105bec:	46bd      	mov	sp, r7
 8105bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105bf2:	4770      	bx	lr

08105bf4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8105bf4:	b480      	push	{r7}
 8105bf6:	b083      	sub	sp, #12
 8105bf8:	af00      	add	r7, sp, #0
 8105bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8105bfc:	bf00      	nop
 8105bfe:	370c      	adds	r7, #12
 8105c00:	46bd      	mov	sp, r7
 8105c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c06:	4770      	bx	lr

08105c08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8105c08:	b480      	push	{r7}
 8105c0a:	b085      	sub	sp, #20
 8105c0c:	af00      	add	r7, sp, #0
 8105c0e:	6078      	str	r0, [r7, #4]
 8105c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8105c12:	687b      	ldr	r3, [r7, #4]
 8105c14:	681b      	ldr	r3, [r3, #0]
 8105c16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8105c18:	687b      	ldr	r3, [r7, #4]
 8105c1a:	4a40      	ldr	r2, [pc, #256]	; (8105d1c <TIM_Base_SetConfig+0x114>)
 8105c1c:	4293      	cmp	r3, r2
 8105c1e:	d013      	beq.n	8105c48 <TIM_Base_SetConfig+0x40>
 8105c20:	687b      	ldr	r3, [r7, #4]
 8105c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105c26:	d00f      	beq.n	8105c48 <TIM_Base_SetConfig+0x40>
 8105c28:	687b      	ldr	r3, [r7, #4]
 8105c2a:	4a3d      	ldr	r2, [pc, #244]	; (8105d20 <TIM_Base_SetConfig+0x118>)
 8105c2c:	4293      	cmp	r3, r2
 8105c2e:	d00b      	beq.n	8105c48 <TIM_Base_SetConfig+0x40>
 8105c30:	687b      	ldr	r3, [r7, #4]
 8105c32:	4a3c      	ldr	r2, [pc, #240]	; (8105d24 <TIM_Base_SetConfig+0x11c>)
 8105c34:	4293      	cmp	r3, r2
 8105c36:	d007      	beq.n	8105c48 <TIM_Base_SetConfig+0x40>
 8105c38:	687b      	ldr	r3, [r7, #4]
 8105c3a:	4a3b      	ldr	r2, [pc, #236]	; (8105d28 <TIM_Base_SetConfig+0x120>)
 8105c3c:	4293      	cmp	r3, r2
 8105c3e:	d003      	beq.n	8105c48 <TIM_Base_SetConfig+0x40>
 8105c40:	687b      	ldr	r3, [r7, #4]
 8105c42:	4a3a      	ldr	r2, [pc, #232]	; (8105d2c <TIM_Base_SetConfig+0x124>)
 8105c44:	4293      	cmp	r3, r2
 8105c46:	d108      	bne.n	8105c5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8105c48:	68fb      	ldr	r3, [r7, #12]
 8105c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8105c4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8105c50:	683b      	ldr	r3, [r7, #0]
 8105c52:	685b      	ldr	r3, [r3, #4]
 8105c54:	68fa      	ldr	r2, [r7, #12]
 8105c56:	4313      	orrs	r3, r2
 8105c58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8105c5a:	687b      	ldr	r3, [r7, #4]
 8105c5c:	4a2f      	ldr	r2, [pc, #188]	; (8105d1c <TIM_Base_SetConfig+0x114>)
 8105c5e:	4293      	cmp	r3, r2
 8105c60:	d01f      	beq.n	8105ca2 <TIM_Base_SetConfig+0x9a>
 8105c62:	687b      	ldr	r3, [r7, #4]
 8105c64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105c68:	d01b      	beq.n	8105ca2 <TIM_Base_SetConfig+0x9a>
 8105c6a:	687b      	ldr	r3, [r7, #4]
 8105c6c:	4a2c      	ldr	r2, [pc, #176]	; (8105d20 <TIM_Base_SetConfig+0x118>)
 8105c6e:	4293      	cmp	r3, r2
 8105c70:	d017      	beq.n	8105ca2 <TIM_Base_SetConfig+0x9a>
 8105c72:	687b      	ldr	r3, [r7, #4]
 8105c74:	4a2b      	ldr	r2, [pc, #172]	; (8105d24 <TIM_Base_SetConfig+0x11c>)
 8105c76:	4293      	cmp	r3, r2
 8105c78:	d013      	beq.n	8105ca2 <TIM_Base_SetConfig+0x9a>
 8105c7a:	687b      	ldr	r3, [r7, #4]
 8105c7c:	4a2a      	ldr	r2, [pc, #168]	; (8105d28 <TIM_Base_SetConfig+0x120>)
 8105c7e:	4293      	cmp	r3, r2
 8105c80:	d00f      	beq.n	8105ca2 <TIM_Base_SetConfig+0x9a>
 8105c82:	687b      	ldr	r3, [r7, #4]
 8105c84:	4a29      	ldr	r2, [pc, #164]	; (8105d2c <TIM_Base_SetConfig+0x124>)
 8105c86:	4293      	cmp	r3, r2
 8105c88:	d00b      	beq.n	8105ca2 <TIM_Base_SetConfig+0x9a>
 8105c8a:	687b      	ldr	r3, [r7, #4]
 8105c8c:	4a28      	ldr	r2, [pc, #160]	; (8105d30 <TIM_Base_SetConfig+0x128>)
 8105c8e:	4293      	cmp	r3, r2
 8105c90:	d007      	beq.n	8105ca2 <TIM_Base_SetConfig+0x9a>
 8105c92:	687b      	ldr	r3, [r7, #4]
 8105c94:	4a27      	ldr	r2, [pc, #156]	; (8105d34 <TIM_Base_SetConfig+0x12c>)
 8105c96:	4293      	cmp	r3, r2
 8105c98:	d003      	beq.n	8105ca2 <TIM_Base_SetConfig+0x9a>
 8105c9a:	687b      	ldr	r3, [r7, #4]
 8105c9c:	4a26      	ldr	r2, [pc, #152]	; (8105d38 <TIM_Base_SetConfig+0x130>)
 8105c9e:	4293      	cmp	r3, r2
 8105ca0:	d108      	bne.n	8105cb4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8105ca2:	68fb      	ldr	r3, [r7, #12]
 8105ca4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8105ca8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8105caa:	683b      	ldr	r3, [r7, #0]
 8105cac:	68db      	ldr	r3, [r3, #12]
 8105cae:	68fa      	ldr	r2, [r7, #12]
 8105cb0:	4313      	orrs	r3, r2
 8105cb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8105cb4:	68fb      	ldr	r3, [r7, #12]
 8105cb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8105cba:	683b      	ldr	r3, [r7, #0]
 8105cbc:	695b      	ldr	r3, [r3, #20]
 8105cbe:	4313      	orrs	r3, r2
 8105cc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8105cc2:	687b      	ldr	r3, [r7, #4]
 8105cc4:	68fa      	ldr	r2, [r7, #12]
 8105cc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8105cc8:	683b      	ldr	r3, [r7, #0]
 8105cca:	689a      	ldr	r2, [r3, #8]
 8105ccc:	687b      	ldr	r3, [r7, #4]
 8105cce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8105cd0:	683b      	ldr	r3, [r7, #0]
 8105cd2:	681a      	ldr	r2, [r3, #0]
 8105cd4:	687b      	ldr	r3, [r7, #4]
 8105cd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8105cd8:	687b      	ldr	r3, [r7, #4]
 8105cda:	4a10      	ldr	r2, [pc, #64]	; (8105d1c <TIM_Base_SetConfig+0x114>)
 8105cdc:	4293      	cmp	r3, r2
 8105cde:	d00f      	beq.n	8105d00 <TIM_Base_SetConfig+0xf8>
 8105ce0:	687b      	ldr	r3, [r7, #4]
 8105ce2:	4a12      	ldr	r2, [pc, #72]	; (8105d2c <TIM_Base_SetConfig+0x124>)
 8105ce4:	4293      	cmp	r3, r2
 8105ce6:	d00b      	beq.n	8105d00 <TIM_Base_SetConfig+0xf8>
 8105ce8:	687b      	ldr	r3, [r7, #4]
 8105cea:	4a11      	ldr	r2, [pc, #68]	; (8105d30 <TIM_Base_SetConfig+0x128>)
 8105cec:	4293      	cmp	r3, r2
 8105cee:	d007      	beq.n	8105d00 <TIM_Base_SetConfig+0xf8>
 8105cf0:	687b      	ldr	r3, [r7, #4]
 8105cf2:	4a10      	ldr	r2, [pc, #64]	; (8105d34 <TIM_Base_SetConfig+0x12c>)
 8105cf4:	4293      	cmp	r3, r2
 8105cf6:	d003      	beq.n	8105d00 <TIM_Base_SetConfig+0xf8>
 8105cf8:	687b      	ldr	r3, [r7, #4]
 8105cfa:	4a0f      	ldr	r2, [pc, #60]	; (8105d38 <TIM_Base_SetConfig+0x130>)
 8105cfc:	4293      	cmp	r3, r2
 8105cfe:	d103      	bne.n	8105d08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8105d00:	683b      	ldr	r3, [r7, #0]
 8105d02:	691a      	ldr	r2, [r3, #16]
 8105d04:	687b      	ldr	r3, [r7, #4]
 8105d06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8105d08:	687b      	ldr	r3, [r7, #4]
 8105d0a:	2201      	movs	r2, #1
 8105d0c:	615a      	str	r2, [r3, #20]
}
 8105d0e:	bf00      	nop
 8105d10:	3714      	adds	r7, #20
 8105d12:	46bd      	mov	sp, r7
 8105d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105d18:	4770      	bx	lr
 8105d1a:	bf00      	nop
 8105d1c:	40010000 	.word	0x40010000
 8105d20:	40000400 	.word	0x40000400
 8105d24:	40000800 	.word	0x40000800
 8105d28:	40000c00 	.word	0x40000c00
 8105d2c:	40010400 	.word	0x40010400
 8105d30:	40014000 	.word	0x40014000
 8105d34:	40014400 	.word	0x40014400
 8105d38:	40014800 	.word	0x40014800

08105d3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8105d3c:	b480      	push	{r7}
 8105d3e:	b087      	sub	sp, #28
 8105d40:	af00      	add	r7, sp, #0
 8105d42:	6078      	str	r0, [r7, #4]
 8105d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8105d46:	687b      	ldr	r3, [r7, #4]
 8105d48:	6a1b      	ldr	r3, [r3, #32]
 8105d4a:	f023 0201 	bic.w	r2, r3, #1
 8105d4e:	687b      	ldr	r3, [r7, #4]
 8105d50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8105d52:	687b      	ldr	r3, [r7, #4]
 8105d54:	6a1b      	ldr	r3, [r3, #32]
 8105d56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8105d58:	687b      	ldr	r3, [r7, #4]
 8105d5a:	685b      	ldr	r3, [r3, #4]
 8105d5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8105d5e:	687b      	ldr	r3, [r7, #4]
 8105d60:	699b      	ldr	r3, [r3, #24]
 8105d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8105d64:	68fb      	ldr	r3, [r7, #12]
 8105d66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8105d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8105d6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8105d70:	68fb      	ldr	r3, [r7, #12]
 8105d72:	f023 0303 	bic.w	r3, r3, #3
 8105d76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8105d78:	683b      	ldr	r3, [r7, #0]
 8105d7a:	681b      	ldr	r3, [r3, #0]
 8105d7c:	68fa      	ldr	r2, [r7, #12]
 8105d7e:	4313      	orrs	r3, r2
 8105d80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8105d82:	697b      	ldr	r3, [r7, #20]
 8105d84:	f023 0302 	bic.w	r3, r3, #2
 8105d88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8105d8a:	683b      	ldr	r3, [r7, #0]
 8105d8c:	689b      	ldr	r3, [r3, #8]
 8105d8e:	697a      	ldr	r2, [r7, #20]
 8105d90:	4313      	orrs	r3, r2
 8105d92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8105d94:	687b      	ldr	r3, [r7, #4]
 8105d96:	4a2c      	ldr	r2, [pc, #176]	; (8105e48 <TIM_OC1_SetConfig+0x10c>)
 8105d98:	4293      	cmp	r3, r2
 8105d9a:	d00f      	beq.n	8105dbc <TIM_OC1_SetConfig+0x80>
 8105d9c:	687b      	ldr	r3, [r7, #4]
 8105d9e:	4a2b      	ldr	r2, [pc, #172]	; (8105e4c <TIM_OC1_SetConfig+0x110>)
 8105da0:	4293      	cmp	r3, r2
 8105da2:	d00b      	beq.n	8105dbc <TIM_OC1_SetConfig+0x80>
 8105da4:	687b      	ldr	r3, [r7, #4]
 8105da6:	4a2a      	ldr	r2, [pc, #168]	; (8105e50 <TIM_OC1_SetConfig+0x114>)
 8105da8:	4293      	cmp	r3, r2
 8105daa:	d007      	beq.n	8105dbc <TIM_OC1_SetConfig+0x80>
 8105dac:	687b      	ldr	r3, [r7, #4]
 8105dae:	4a29      	ldr	r2, [pc, #164]	; (8105e54 <TIM_OC1_SetConfig+0x118>)
 8105db0:	4293      	cmp	r3, r2
 8105db2:	d003      	beq.n	8105dbc <TIM_OC1_SetConfig+0x80>
 8105db4:	687b      	ldr	r3, [r7, #4]
 8105db6:	4a28      	ldr	r2, [pc, #160]	; (8105e58 <TIM_OC1_SetConfig+0x11c>)
 8105db8:	4293      	cmp	r3, r2
 8105dba:	d10c      	bne.n	8105dd6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8105dbc:	697b      	ldr	r3, [r7, #20]
 8105dbe:	f023 0308 	bic.w	r3, r3, #8
 8105dc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8105dc4:	683b      	ldr	r3, [r7, #0]
 8105dc6:	68db      	ldr	r3, [r3, #12]
 8105dc8:	697a      	ldr	r2, [r7, #20]
 8105dca:	4313      	orrs	r3, r2
 8105dcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8105dce:	697b      	ldr	r3, [r7, #20]
 8105dd0:	f023 0304 	bic.w	r3, r3, #4
 8105dd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8105dd6:	687b      	ldr	r3, [r7, #4]
 8105dd8:	4a1b      	ldr	r2, [pc, #108]	; (8105e48 <TIM_OC1_SetConfig+0x10c>)
 8105dda:	4293      	cmp	r3, r2
 8105ddc:	d00f      	beq.n	8105dfe <TIM_OC1_SetConfig+0xc2>
 8105dde:	687b      	ldr	r3, [r7, #4]
 8105de0:	4a1a      	ldr	r2, [pc, #104]	; (8105e4c <TIM_OC1_SetConfig+0x110>)
 8105de2:	4293      	cmp	r3, r2
 8105de4:	d00b      	beq.n	8105dfe <TIM_OC1_SetConfig+0xc2>
 8105de6:	687b      	ldr	r3, [r7, #4]
 8105de8:	4a19      	ldr	r2, [pc, #100]	; (8105e50 <TIM_OC1_SetConfig+0x114>)
 8105dea:	4293      	cmp	r3, r2
 8105dec:	d007      	beq.n	8105dfe <TIM_OC1_SetConfig+0xc2>
 8105dee:	687b      	ldr	r3, [r7, #4]
 8105df0:	4a18      	ldr	r2, [pc, #96]	; (8105e54 <TIM_OC1_SetConfig+0x118>)
 8105df2:	4293      	cmp	r3, r2
 8105df4:	d003      	beq.n	8105dfe <TIM_OC1_SetConfig+0xc2>
 8105df6:	687b      	ldr	r3, [r7, #4]
 8105df8:	4a17      	ldr	r2, [pc, #92]	; (8105e58 <TIM_OC1_SetConfig+0x11c>)
 8105dfa:	4293      	cmp	r3, r2
 8105dfc:	d111      	bne.n	8105e22 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8105dfe:	693b      	ldr	r3, [r7, #16]
 8105e00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8105e04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8105e06:	693b      	ldr	r3, [r7, #16]
 8105e08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8105e0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8105e0e:	683b      	ldr	r3, [r7, #0]
 8105e10:	695b      	ldr	r3, [r3, #20]
 8105e12:	693a      	ldr	r2, [r7, #16]
 8105e14:	4313      	orrs	r3, r2
 8105e16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8105e18:	683b      	ldr	r3, [r7, #0]
 8105e1a:	699b      	ldr	r3, [r3, #24]
 8105e1c:	693a      	ldr	r2, [r7, #16]
 8105e1e:	4313      	orrs	r3, r2
 8105e20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8105e22:	687b      	ldr	r3, [r7, #4]
 8105e24:	693a      	ldr	r2, [r7, #16]
 8105e26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8105e28:	687b      	ldr	r3, [r7, #4]
 8105e2a:	68fa      	ldr	r2, [r7, #12]
 8105e2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8105e2e:	683b      	ldr	r3, [r7, #0]
 8105e30:	685a      	ldr	r2, [r3, #4]
 8105e32:	687b      	ldr	r3, [r7, #4]
 8105e34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8105e36:	687b      	ldr	r3, [r7, #4]
 8105e38:	697a      	ldr	r2, [r7, #20]
 8105e3a:	621a      	str	r2, [r3, #32]
}
 8105e3c:	bf00      	nop
 8105e3e:	371c      	adds	r7, #28
 8105e40:	46bd      	mov	sp, r7
 8105e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105e46:	4770      	bx	lr
 8105e48:	40010000 	.word	0x40010000
 8105e4c:	40010400 	.word	0x40010400
 8105e50:	40014000 	.word	0x40014000
 8105e54:	40014400 	.word	0x40014400
 8105e58:	40014800 	.word	0x40014800

08105e5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8105e5c:	b480      	push	{r7}
 8105e5e:	b087      	sub	sp, #28
 8105e60:	af00      	add	r7, sp, #0
 8105e62:	6078      	str	r0, [r7, #4]
 8105e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8105e66:	687b      	ldr	r3, [r7, #4]
 8105e68:	6a1b      	ldr	r3, [r3, #32]
 8105e6a:	f023 0210 	bic.w	r2, r3, #16
 8105e6e:	687b      	ldr	r3, [r7, #4]
 8105e70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8105e72:	687b      	ldr	r3, [r7, #4]
 8105e74:	6a1b      	ldr	r3, [r3, #32]
 8105e76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8105e78:	687b      	ldr	r3, [r7, #4]
 8105e7a:	685b      	ldr	r3, [r3, #4]
 8105e7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8105e7e:	687b      	ldr	r3, [r7, #4]
 8105e80:	699b      	ldr	r3, [r3, #24]
 8105e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8105e84:	68fb      	ldr	r3, [r7, #12]
 8105e86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8105e8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8105e8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8105e90:	68fb      	ldr	r3, [r7, #12]
 8105e92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8105e96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8105e98:	683b      	ldr	r3, [r7, #0]
 8105e9a:	681b      	ldr	r3, [r3, #0]
 8105e9c:	021b      	lsls	r3, r3, #8
 8105e9e:	68fa      	ldr	r2, [r7, #12]
 8105ea0:	4313      	orrs	r3, r2
 8105ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8105ea4:	697b      	ldr	r3, [r7, #20]
 8105ea6:	f023 0320 	bic.w	r3, r3, #32
 8105eaa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8105eac:	683b      	ldr	r3, [r7, #0]
 8105eae:	689b      	ldr	r3, [r3, #8]
 8105eb0:	011b      	lsls	r3, r3, #4
 8105eb2:	697a      	ldr	r2, [r7, #20]
 8105eb4:	4313      	orrs	r3, r2
 8105eb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8105eb8:	687b      	ldr	r3, [r7, #4]
 8105eba:	4a28      	ldr	r2, [pc, #160]	; (8105f5c <TIM_OC2_SetConfig+0x100>)
 8105ebc:	4293      	cmp	r3, r2
 8105ebe:	d003      	beq.n	8105ec8 <TIM_OC2_SetConfig+0x6c>
 8105ec0:	687b      	ldr	r3, [r7, #4]
 8105ec2:	4a27      	ldr	r2, [pc, #156]	; (8105f60 <TIM_OC2_SetConfig+0x104>)
 8105ec4:	4293      	cmp	r3, r2
 8105ec6:	d10d      	bne.n	8105ee4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8105ec8:	697b      	ldr	r3, [r7, #20]
 8105eca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8105ece:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8105ed0:	683b      	ldr	r3, [r7, #0]
 8105ed2:	68db      	ldr	r3, [r3, #12]
 8105ed4:	011b      	lsls	r3, r3, #4
 8105ed6:	697a      	ldr	r2, [r7, #20]
 8105ed8:	4313      	orrs	r3, r2
 8105eda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8105edc:	697b      	ldr	r3, [r7, #20]
 8105ede:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8105ee2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8105ee4:	687b      	ldr	r3, [r7, #4]
 8105ee6:	4a1d      	ldr	r2, [pc, #116]	; (8105f5c <TIM_OC2_SetConfig+0x100>)
 8105ee8:	4293      	cmp	r3, r2
 8105eea:	d00f      	beq.n	8105f0c <TIM_OC2_SetConfig+0xb0>
 8105eec:	687b      	ldr	r3, [r7, #4]
 8105eee:	4a1c      	ldr	r2, [pc, #112]	; (8105f60 <TIM_OC2_SetConfig+0x104>)
 8105ef0:	4293      	cmp	r3, r2
 8105ef2:	d00b      	beq.n	8105f0c <TIM_OC2_SetConfig+0xb0>
 8105ef4:	687b      	ldr	r3, [r7, #4]
 8105ef6:	4a1b      	ldr	r2, [pc, #108]	; (8105f64 <TIM_OC2_SetConfig+0x108>)
 8105ef8:	4293      	cmp	r3, r2
 8105efa:	d007      	beq.n	8105f0c <TIM_OC2_SetConfig+0xb0>
 8105efc:	687b      	ldr	r3, [r7, #4]
 8105efe:	4a1a      	ldr	r2, [pc, #104]	; (8105f68 <TIM_OC2_SetConfig+0x10c>)
 8105f00:	4293      	cmp	r3, r2
 8105f02:	d003      	beq.n	8105f0c <TIM_OC2_SetConfig+0xb0>
 8105f04:	687b      	ldr	r3, [r7, #4]
 8105f06:	4a19      	ldr	r2, [pc, #100]	; (8105f6c <TIM_OC2_SetConfig+0x110>)
 8105f08:	4293      	cmp	r3, r2
 8105f0a:	d113      	bne.n	8105f34 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8105f0c:	693b      	ldr	r3, [r7, #16]
 8105f0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8105f12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8105f14:	693b      	ldr	r3, [r7, #16]
 8105f16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8105f1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8105f1c:	683b      	ldr	r3, [r7, #0]
 8105f1e:	695b      	ldr	r3, [r3, #20]
 8105f20:	009b      	lsls	r3, r3, #2
 8105f22:	693a      	ldr	r2, [r7, #16]
 8105f24:	4313      	orrs	r3, r2
 8105f26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8105f28:	683b      	ldr	r3, [r7, #0]
 8105f2a:	699b      	ldr	r3, [r3, #24]
 8105f2c:	009b      	lsls	r3, r3, #2
 8105f2e:	693a      	ldr	r2, [r7, #16]
 8105f30:	4313      	orrs	r3, r2
 8105f32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8105f34:	687b      	ldr	r3, [r7, #4]
 8105f36:	693a      	ldr	r2, [r7, #16]
 8105f38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8105f3a:	687b      	ldr	r3, [r7, #4]
 8105f3c:	68fa      	ldr	r2, [r7, #12]
 8105f3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8105f40:	683b      	ldr	r3, [r7, #0]
 8105f42:	685a      	ldr	r2, [r3, #4]
 8105f44:	687b      	ldr	r3, [r7, #4]
 8105f46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8105f48:	687b      	ldr	r3, [r7, #4]
 8105f4a:	697a      	ldr	r2, [r7, #20]
 8105f4c:	621a      	str	r2, [r3, #32]
}
 8105f4e:	bf00      	nop
 8105f50:	371c      	adds	r7, #28
 8105f52:	46bd      	mov	sp, r7
 8105f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105f58:	4770      	bx	lr
 8105f5a:	bf00      	nop
 8105f5c:	40010000 	.word	0x40010000
 8105f60:	40010400 	.word	0x40010400
 8105f64:	40014000 	.word	0x40014000
 8105f68:	40014400 	.word	0x40014400
 8105f6c:	40014800 	.word	0x40014800

08105f70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8105f70:	b480      	push	{r7}
 8105f72:	b087      	sub	sp, #28
 8105f74:	af00      	add	r7, sp, #0
 8105f76:	6078      	str	r0, [r7, #4]
 8105f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8105f7a:	687b      	ldr	r3, [r7, #4]
 8105f7c:	6a1b      	ldr	r3, [r3, #32]
 8105f7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8105f82:	687b      	ldr	r3, [r7, #4]
 8105f84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8105f86:	687b      	ldr	r3, [r7, #4]
 8105f88:	6a1b      	ldr	r3, [r3, #32]
 8105f8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8105f8c:	687b      	ldr	r3, [r7, #4]
 8105f8e:	685b      	ldr	r3, [r3, #4]
 8105f90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8105f92:	687b      	ldr	r3, [r7, #4]
 8105f94:	69db      	ldr	r3, [r3, #28]
 8105f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8105f98:	68fb      	ldr	r3, [r7, #12]
 8105f9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8105f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8105fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8105fa4:	68fb      	ldr	r3, [r7, #12]
 8105fa6:	f023 0303 	bic.w	r3, r3, #3
 8105faa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8105fac:	683b      	ldr	r3, [r7, #0]
 8105fae:	681b      	ldr	r3, [r3, #0]
 8105fb0:	68fa      	ldr	r2, [r7, #12]
 8105fb2:	4313      	orrs	r3, r2
 8105fb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8105fb6:	697b      	ldr	r3, [r7, #20]
 8105fb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8105fbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8105fbe:	683b      	ldr	r3, [r7, #0]
 8105fc0:	689b      	ldr	r3, [r3, #8]
 8105fc2:	021b      	lsls	r3, r3, #8
 8105fc4:	697a      	ldr	r2, [r7, #20]
 8105fc6:	4313      	orrs	r3, r2
 8105fc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8105fca:	687b      	ldr	r3, [r7, #4]
 8105fcc:	4a27      	ldr	r2, [pc, #156]	; (810606c <TIM_OC3_SetConfig+0xfc>)
 8105fce:	4293      	cmp	r3, r2
 8105fd0:	d003      	beq.n	8105fda <TIM_OC3_SetConfig+0x6a>
 8105fd2:	687b      	ldr	r3, [r7, #4]
 8105fd4:	4a26      	ldr	r2, [pc, #152]	; (8106070 <TIM_OC3_SetConfig+0x100>)
 8105fd6:	4293      	cmp	r3, r2
 8105fd8:	d10d      	bne.n	8105ff6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8105fda:	697b      	ldr	r3, [r7, #20]
 8105fdc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8105fe0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8105fe2:	683b      	ldr	r3, [r7, #0]
 8105fe4:	68db      	ldr	r3, [r3, #12]
 8105fe6:	021b      	lsls	r3, r3, #8
 8105fe8:	697a      	ldr	r2, [r7, #20]
 8105fea:	4313      	orrs	r3, r2
 8105fec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8105fee:	697b      	ldr	r3, [r7, #20]
 8105ff0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8105ff4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8105ff6:	687b      	ldr	r3, [r7, #4]
 8105ff8:	4a1c      	ldr	r2, [pc, #112]	; (810606c <TIM_OC3_SetConfig+0xfc>)
 8105ffa:	4293      	cmp	r3, r2
 8105ffc:	d00f      	beq.n	810601e <TIM_OC3_SetConfig+0xae>
 8105ffe:	687b      	ldr	r3, [r7, #4]
 8106000:	4a1b      	ldr	r2, [pc, #108]	; (8106070 <TIM_OC3_SetConfig+0x100>)
 8106002:	4293      	cmp	r3, r2
 8106004:	d00b      	beq.n	810601e <TIM_OC3_SetConfig+0xae>
 8106006:	687b      	ldr	r3, [r7, #4]
 8106008:	4a1a      	ldr	r2, [pc, #104]	; (8106074 <TIM_OC3_SetConfig+0x104>)
 810600a:	4293      	cmp	r3, r2
 810600c:	d007      	beq.n	810601e <TIM_OC3_SetConfig+0xae>
 810600e:	687b      	ldr	r3, [r7, #4]
 8106010:	4a19      	ldr	r2, [pc, #100]	; (8106078 <TIM_OC3_SetConfig+0x108>)
 8106012:	4293      	cmp	r3, r2
 8106014:	d003      	beq.n	810601e <TIM_OC3_SetConfig+0xae>
 8106016:	687b      	ldr	r3, [r7, #4]
 8106018:	4a18      	ldr	r2, [pc, #96]	; (810607c <TIM_OC3_SetConfig+0x10c>)
 810601a:	4293      	cmp	r3, r2
 810601c:	d113      	bne.n	8106046 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 810601e:	693b      	ldr	r3, [r7, #16]
 8106020:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8106024:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8106026:	693b      	ldr	r3, [r7, #16]
 8106028:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 810602c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 810602e:	683b      	ldr	r3, [r7, #0]
 8106030:	695b      	ldr	r3, [r3, #20]
 8106032:	011b      	lsls	r3, r3, #4
 8106034:	693a      	ldr	r2, [r7, #16]
 8106036:	4313      	orrs	r3, r2
 8106038:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 810603a:	683b      	ldr	r3, [r7, #0]
 810603c:	699b      	ldr	r3, [r3, #24]
 810603e:	011b      	lsls	r3, r3, #4
 8106040:	693a      	ldr	r2, [r7, #16]
 8106042:	4313      	orrs	r3, r2
 8106044:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8106046:	687b      	ldr	r3, [r7, #4]
 8106048:	693a      	ldr	r2, [r7, #16]
 810604a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810604c:	687b      	ldr	r3, [r7, #4]
 810604e:	68fa      	ldr	r2, [r7, #12]
 8106050:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8106052:	683b      	ldr	r3, [r7, #0]
 8106054:	685a      	ldr	r2, [r3, #4]
 8106056:	687b      	ldr	r3, [r7, #4]
 8106058:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810605a:	687b      	ldr	r3, [r7, #4]
 810605c:	697a      	ldr	r2, [r7, #20]
 810605e:	621a      	str	r2, [r3, #32]
}
 8106060:	bf00      	nop
 8106062:	371c      	adds	r7, #28
 8106064:	46bd      	mov	sp, r7
 8106066:	f85d 7b04 	ldr.w	r7, [sp], #4
 810606a:	4770      	bx	lr
 810606c:	40010000 	.word	0x40010000
 8106070:	40010400 	.word	0x40010400
 8106074:	40014000 	.word	0x40014000
 8106078:	40014400 	.word	0x40014400
 810607c:	40014800 	.word	0x40014800

08106080 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8106080:	b480      	push	{r7}
 8106082:	b087      	sub	sp, #28
 8106084:	af00      	add	r7, sp, #0
 8106086:	6078      	str	r0, [r7, #4]
 8106088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 810608a:	687b      	ldr	r3, [r7, #4]
 810608c:	6a1b      	ldr	r3, [r3, #32]
 810608e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8106092:	687b      	ldr	r3, [r7, #4]
 8106094:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8106096:	687b      	ldr	r3, [r7, #4]
 8106098:	6a1b      	ldr	r3, [r3, #32]
 810609a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810609c:	687b      	ldr	r3, [r7, #4]
 810609e:	685b      	ldr	r3, [r3, #4]
 81060a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 81060a2:	687b      	ldr	r3, [r7, #4]
 81060a4:	69db      	ldr	r3, [r3, #28]
 81060a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 81060a8:	68fb      	ldr	r3, [r7, #12]
 81060aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 81060ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 81060b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 81060b4:	68fb      	ldr	r3, [r7, #12]
 81060b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81060ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 81060bc:	683b      	ldr	r3, [r7, #0]
 81060be:	681b      	ldr	r3, [r3, #0]
 81060c0:	021b      	lsls	r3, r3, #8
 81060c2:	68fa      	ldr	r2, [r7, #12]
 81060c4:	4313      	orrs	r3, r2
 81060c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 81060c8:	693b      	ldr	r3, [r7, #16]
 81060ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 81060ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 81060d0:	683b      	ldr	r3, [r7, #0]
 81060d2:	689b      	ldr	r3, [r3, #8]
 81060d4:	031b      	lsls	r3, r3, #12
 81060d6:	693a      	ldr	r2, [r7, #16]
 81060d8:	4313      	orrs	r3, r2
 81060da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81060dc:	687b      	ldr	r3, [r7, #4]
 81060de:	4a18      	ldr	r2, [pc, #96]	; (8106140 <TIM_OC4_SetConfig+0xc0>)
 81060e0:	4293      	cmp	r3, r2
 81060e2:	d00f      	beq.n	8106104 <TIM_OC4_SetConfig+0x84>
 81060e4:	687b      	ldr	r3, [r7, #4]
 81060e6:	4a17      	ldr	r2, [pc, #92]	; (8106144 <TIM_OC4_SetConfig+0xc4>)
 81060e8:	4293      	cmp	r3, r2
 81060ea:	d00b      	beq.n	8106104 <TIM_OC4_SetConfig+0x84>
 81060ec:	687b      	ldr	r3, [r7, #4]
 81060ee:	4a16      	ldr	r2, [pc, #88]	; (8106148 <TIM_OC4_SetConfig+0xc8>)
 81060f0:	4293      	cmp	r3, r2
 81060f2:	d007      	beq.n	8106104 <TIM_OC4_SetConfig+0x84>
 81060f4:	687b      	ldr	r3, [r7, #4]
 81060f6:	4a15      	ldr	r2, [pc, #84]	; (810614c <TIM_OC4_SetConfig+0xcc>)
 81060f8:	4293      	cmp	r3, r2
 81060fa:	d003      	beq.n	8106104 <TIM_OC4_SetConfig+0x84>
 81060fc:	687b      	ldr	r3, [r7, #4]
 81060fe:	4a14      	ldr	r2, [pc, #80]	; (8106150 <TIM_OC4_SetConfig+0xd0>)
 8106100:	4293      	cmp	r3, r2
 8106102:	d109      	bne.n	8106118 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8106104:	697b      	ldr	r3, [r7, #20]
 8106106:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 810610a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 810610c:	683b      	ldr	r3, [r7, #0]
 810610e:	695b      	ldr	r3, [r3, #20]
 8106110:	019b      	lsls	r3, r3, #6
 8106112:	697a      	ldr	r2, [r7, #20]
 8106114:	4313      	orrs	r3, r2
 8106116:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8106118:	687b      	ldr	r3, [r7, #4]
 810611a:	697a      	ldr	r2, [r7, #20]
 810611c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810611e:	687b      	ldr	r3, [r7, #4]
 8106120:	68fa      	ldr	r2, [r7, #12]
 8106122:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8106124:	683b      	ldr	r3, [r7, #0]
 8106126:	685a      	ldr	r2, [r3, #4]
 8106128:	687b      	ldr	r3, [r7, #4]
 810612a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810612c:	687b      	ldr	r3, [r7, #4]
 810612e:	693a      	ldr	r2, [r7, #16]
 8106130:	621a      	str	r2, [r3, #32]
}
 8106132:	bf00      	nop
 8106134:	371c      	adds	r7, #28
 8106136:	46bd      	mov	sp, r7
 8106138:	f85d 7b04 	ldr.w	r7, [sp], #4
 810613c:	4770      	bx	lr
 810613e:	bf00      	nop
 8106140:	40010000 	.word	0x40010000
 8106144:	40010400 	.word	0x40010400
 8106148:	40014000 	.word	0x40014000
 810614c:	40014400 	.word	0x40014400
 8106150:	40014800 	.word	0x40014800

08106154 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8106154:	b480      	push	{r7}
 8106156:	b087      	sub	sp, #28
 8106158:	af00      	add	r7, sp, #0
 810615a:	6078      	str	r0, [r7, #4]
 810615c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 810615e:	687b      	ldr	r3, [r7, #4]
 8106160:	6a1b      	ldr	r3, [r3, #32]
 8106162:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8106166:	687b      	ldr	r3, [r7, #4]
 8106168:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810616a:	687b      	ldr	r3, [r7, #4]
 810616c:	6a1b      	ldr	r3, [r3, #32]
 810616e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8106170:	687b      	ldr	r3, [r7, #4]
 8106172:	685b      	ldr	r3, [r3, #4]
 8106174:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8106176:	687b      	ldr	r3, [r7, #4]
 8106178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810617a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 810617c:	68fb      	ldr	r3, [r7, #12]
 810617e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8106182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8106186:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8106188:	683b      	ldr	r3, [r7, #0]
 810618a:	681b      	ldr	r3, [r3, #0]
 810618c:	68fa      	ldr	r2, [r7, #12]
 810618e:	4313      	orrs	r3, r2
 8106190:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8106192:	693b      	ldr	r3, [r7, #16]
 8106194:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8106198:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 810619a:	683b      	ldr	r3, [r7, #0]
 810619c:	689b      	ldr	r3, [r3, #8]
 810619e:	041b      	lsls	r3, r3, #16
 81061a0:	693a      	ldr	r2, [r7, #16]
 81061a2:	4313      	orrs	r3, r2
 81061a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81061a6:	687b      	ldr	r3, [r7, #4]
 81061a8:	4a17      	ldr	r2, [pc, #92]	; (8106208 <TIM_OC5_SetConfig+0xb4>)
 81061aa:	4293      	cmp	r3, r2
 81061ac:	d00f      	beq.n	81061ce <TIM_OC5_SetConfig+0x7a>
 81061ae:	687b      	ldr	r3, [r7, #4]
 81061b0:	4a16      	ldr	r2, [pc, #88]	; (810620c <TIM_OC5_SetConfig+0xb8>)
 81061b2:	4293      	cmp	r3, r2
 81061b4:	d00b      	beq.n	81061ce <TIM_OC5_SetConfig+0x7a>
 81061b6:	687b      	ldr	r3, [r7, #4]
 81061b8:	4a15      	ldr	r2, [pc, #84]	; (8106210 <TIM_OC5_SetConfig+0xbc>)
 81061ba:	4293      	cmp	r3, r2
 81061bc:	d007      	beq.n	81061ce <TIM_OC5_SetConfig+0x7a>
 81061be:	687b      	ldr	r3, [r7, #4]
 81061c0:	4a14      	ldr	r2, [pc, #80]	; (8106214 <TIM_OC5_SetConfig+0xc0>)
 81061c2:	4293      	cmp	r3, r2
 81061c4:	d003      	beq.n	81061ce <TIM_OC5_SetConfig+0x7a>
 81061c6:	687b      	ldr	r3, [r7, #4]
 81061c8:	4a13      	ldr	r2, [pc, #76]	; (8106218 <TIM_OC5_SetConfig+0xc4>)
 81061ca:	4293      	cmp	r3, r2
 81061cc:	d109      	bne.n	81061e2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 81061ce:	697b      	ldr	r3, [r7, #20]
 81061d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81061d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 81061d6:	683b      	ldr	r3, [r7, #0]
 81061d8:	695b      	ldr	r3, [r3, #20]
 81061da:	021b      	lsls	r3, r3, #8
 81061dc:	697a      	ldr	r2, [r7, #20]
 81061de:	4313      	orrs	r3, r2
 81061e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81061e2:	687b      	ldr	r3, [r7, #4]
 81061e4:	697a      	ldr	r2, [r7, #20]
 81061e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 81061e8:	687b      	ldr	r3, [r7, #4]
 81061ea:	68fa      	ldr	r2, [r7, #12]
 81061ec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 81061ee:	683b      	ldr	r3, [r7, #0]
 81061f0:	685a      	ldr	r2, [r3, #4]
 81061f2:	687b      	ldr	r3, [r7, #4]
 81061f4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81061f6:	687b      	ldr	r3, [r7, #4]
 81061f8:	693a      	ldr	r2, [r7, #16]
 81061fa:	621a      	str	r2, [r3, #32]
}
 81061fc:	bf00      	nop
 81061fe:	371c      	adds	r7, #28
 8106200:	46bd      	mov	sp, r7
 8106202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106206:	4770      	bx	lr
 8106208:	40010000 	.word	0x40010000
 810620c:	40010400 	.word	0x40010400
 8106210:	40014000 	.word	0x40014000
 8106214:	40014400 	.word	0x40014400
 8106218:	40014800 	.word	0x40014800

0810621c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 810621c:	b480      	push	{r7}
 810621e:	b087      	sub	sp, #28
 8106220:	af00      	add	r7, sp, #0
 8106222:	6078      	str	r0, [r7, #4]
 8106224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8106226:	687b      	ldr	r3, [r7, #4]
 8106228:	6a1b      	ldr	r3, [r3, #32]
 810622a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 810622e:	687b      	ldr	r3, [r7, #4]
 8106230:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8106232:	687b      	ldr	r3, [r7, #4]
 8106234:	6a1b      	ldr	r3, [r3, #32]
 8106236:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8106238:	687b      	ldr	r3, [r7, #4]
 810623a:	685b      	ldr	r3, [r3, #4]
 810623c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810623e:	687b      	ldr	r3, [r7, #4]
 8106240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8106244:	68fb      	ldr	r3, [r7, #12]
 8106246:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 810624a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810624e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8106250:	683b      	ldr	r3, [r7, #0]
 8106252:	681b      	ldr	r3, [r3, #0]
 8106254:	021b      	lsls	r3, r3, #8
 8106256:	68fa      	ldr	r2, [r7, #12]
 8106258:	4313      	orrs	r3, r2
 810625a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 810625c:	693b      	ldr	r3, [r7, #16]
 810625e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8106262:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8106264:	683b      	ldr	r3, [r7, #0]
 8106266:	689b      	ldr	r3, [r3, #8]
 8106268:	051b      	lsls	r3, r3, #20
 810626a:	693a      	ldr	r2, [r7, #16]
 810626c:	4313      	orrs	r3, r2
 810626e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8106270:	687b      	ldr	r3, [r7, #4]
 8106272:	4a18      	ldr	r2, [pc, #96]	; (81062d4 <TIM_OC6_SetConfig+0xb8>)
 8106274:	4293      	cmp	r3, r2
 8106276:	d00f      	beq.n	8106298 <TIM_OC6_SetConfig+0x7c>
 8106278:	687b      	ldr	r3, [r7, #4]
 810627a:	4a17      	ldr	r2, [pc, #92]	; (81062d8 <TIM_OC6_SetConfig+0xbc>)
 810627c:	4293      	cmp	r3, r2
 810627e:	d00b      	beq.n	8106298 <TIM_OC6_SetConfig+0x7c>
 8106280:	687b      	ldr	r3, [r7, #4]
 8106282:	4a16      	ldr	r2, [pc, #88]	; (81062dc <TIM_OC6_SetConfig+0xc0>)
 8106284:	4293      	cmp	r3, r2
 8106286:	d007      	beq.n	8106298 <TIM_OC6_SetConfig+0x7c>
 8106288:	687b      	ldr	r3, [r7, #4]
 810628a:	4a15      	ldr	r2, [pc, #84]	; (81062e0 <TIM_OC6_SetConfig+0xc4>)
 810628c:	4293      	cmp	r3, r2
 810628e:	d003      	beq.n	8106298 <TIM_OC6_SetConfig+0x7c>
 8106290:	687b      	ldr	r3, [r7, #4]
 8106292:	4a14      	ldr	r2, [pc, #80]	; (81062e4 <TIM_OC6_SetConfig+0xc8>)
 8106294:	4293      	cmp	r3, r2
 8106296:	d109      	bne.n	81062ac <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8106298:	697b      	ldr	r3, [r7, #20]
 810629a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 810629e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 81062a0:	683b      	ldr	r3, [r7, #0]
 81062a2:	695b      	ldr	r3, [r3, #20]
 81062a4:	029b      	lsls	r3, r3, #10
 81062a6:	697a      	ldr	r2, [r7, #20]
 81062a8:	4313      	orrs	r3, r2
 81062aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81062ac:	687b      	ldr	r3, [r7, #4]
 81062ae:	697a      	ldr	r2, [r7, #20]
 81062b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 81062b2:	687b      	ldr	r3, [r7, #4]
 81062b4:	68fa      	ldr	r2, [r7, #12]
 81062b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 81062b8:	683b      	ldr	r3, [r7, #0]
 81062ba:	685a      	ldr	r2, [r3, #4]
 81062bc:	687b      	ldr	r3, [r7, #4]
 81062be:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81062c0:	687b      	ldr	r3, [r7, #4]
 81062c2:	693a      	ldr	r2, [r7, #16]
 81062c4:	621a      	str	r2, [r3, #32]
}
 81062c6:	bf00      	nop
 81062c8:	371c      	adds	r7, #28
 81062ca:	46bd      	mov	sp, r7
 81062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81062d0:	4770      	bx	lr
 81062d2:	bf00      	nop
 81062d4:	40010000 	.word	0x40010000
 81062d8:	40010400 	.word	0x40010400
 81062dc:	40014000 	.word	0x40014000
 81062e0:	40014400 	.word	0x40014400
 81062e4:	40014800 	.word	0x40014800

081062e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 81062e8:	b480      	push	{r7}
 81062ea:	b087      	sub	sp, #28
 81062ec:	af00      	add	r7, sp, #0
 81062ee:	60f8      	str	r0, [r7, #12]
 81062f0:	60b9      	str	r1, [r7, #8]
 81062f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 81062f4:	68fb      	ldr	r3, [r7, #12]
 81062f6:	6a1b      	ldr	r3, [r3, #32]
 81062f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 81062fa:	68fb      	ldr	r3, [r7, #12]
 81062fc:	6a1b      	ldr	r3, [r3, #32]
 81062fe:	f023 0201 	bic.w	r2, r3, #1
 8106302:	68fb      	ldr	r3, [r7, #12]
 8106304:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8106306:	68fb      	ldr	r3, [r7, #12]
 8106308:	699b      	ldr	r3, [r3, #24]
 810630a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 810630c:	693b      	ldr	r3, [r7, #16]
 810630e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8106312:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8106314:	687b      	ldr	r3, [r7, #4]
 8106316:	011b      	lsls	r3, r3, #4
 8106318:	693a      	ldr	r2, [r7, #16]
 810631a:	4313      	orrs	r3, r2
 810631c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 810631e:	697b      	ldr	r3, [r7, #20]
 8106320:	f023 030a 	bic.w	r3, r3, #10
 8106324:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8106326:	697a      	ldr	r2, [r7, #20]
 8106328:	68bb      	ldr	r3, [r7, #8]
 810632a:	4313      	orrs	r3, r2
 810632c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 810632e:	68fb      	ldr	r3, [r7, #12]
 8106330:	693a      	ldr	r2, [r7, #16]
 8106332:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8106334:	68fb      	ldr	r3, [r7, #12]
 8106336:	697a      	ldr	r2, [r7, #20]
 8106338:	621a      	str	r2, [r3, #32]
}
 810633a:	bf00      	nop
 810633c:	371c      	adds	r7, #28
 810633e:	46bd      	mov	sp, r7
 8106340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106344:	4770      	bx	lr

08106346 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8106346:	b480      	push	{r7}
 8106348:	b087      	sub	sp, #28
 810634a:	af00      	add	r7, sp, #0
 810634c:	60f8      	str	r0, [r7, #12]
 810634e:	60b9      	str	r1, [r7, #8]
 8106350:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8106352:	68fb      	ldr	r3, [r7, #12]
 8106354:	6a1b      	ldr	r3, [r3, #32]
 8106356:	f023 0210 	bic.w	r2, r3, #16
 810635a:	68fb      	ldr	r3, [r7, #12]
 810635c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810635e:	68fb      	ldr	r3, [r7, #12]
 8106360:	699b      	ldr	r3, [r3, #24]
 8106362:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8106364:	68fb      	ldr	r3, [r7, #12]
 8106366:	6a1b      	ldr	r3, [r3, #32]
 8106368:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 810636a:	697b      	ldr	r3, [r7, #20]
 810636c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8106370:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8106372:	687b      	ldr	r3, [r7, #4]
 8106374:	031b      	lsls	r3, r3, #12
 8106376:	697a      	ldr	r2, [r7, #20]
 8106378:	4313      	orrs	r3, r2
 810637a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 810637c:	693b      	ldr	r3, [r7, #16]
 810637e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8106382:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8106384:	68bb      	ldr	r3, [r7, #8]
 8106386:	011b      	lsls	r3, r3, #4
 8106388:	693a      	ldr	r2, [r7, #16]
 810638a:	4313      	orrs	r3, r2
 810638c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 810638e:	68fb      	ldr	r3, [r7, #12]
 8106390:	697a      	ldr	r2, [r7, #20]
 8106392:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8106394:	68fb      	ldr	r3, [r7, #12]
 8106396:	693a      	ldr	r2, [r7, #16]
 8106398:	621a      	str	r2, [r3, #32]
}
 810639a:	bf00      	nop
 810639c:	371c      	adds	r7, #28
 810639e:	46bd      	mov	sp, r7
 81063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81063a4:	4770      	bx	lr

081063a6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 81063a6:	b480      	push	{r7}
 81063a8:	b085      	sub	sp, #20
 81063aa:	af00      	add	r7, sp, #0
 81063ac:	6078      	str	r0, [r7, #4]
 81063ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 81063b0:	687b      	ldr	r3, [r7, #4]
 81063b2:	689b      	ldr	r3, [r3, #8]
 81063b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 81063b6:	68fb      	ldr	r3, [r7, #12]
 81063b8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 81063bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81063c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 81063c2:	683a      	ldr	r2, [r7, #0]
 81063c4:	68fb      	ldr	r3, [r7, #12]
 81063c6:	4313      	orrs	r3, r2
 81063c8:	f043 0307 	orr.w	r3, r3, #7
 81063cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 81063ce:	687b      	ldr	r3, [r7, #4]
 81063d0:	68fa      	ldr	r2, [r7, #12]
 81063d2:	609a      	str	r2, [r3, #8]
}
 81063d4:	bf00      	nop
 81063d6:	3714      	adds	r7, #20
 81063d8:	46bd      	mov	sp, r7
 81063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81063de:	4770      	bx	lr

081063e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 81063e0:	b480      	push	{r7}
 81063e2:	b087      	sub	sp, #28
 81063e4:	af00      	add	r7, sp, #0
 81063e6:	60f8      	str	r0, [r7, #12]
 81063e8:	60b9      	str	r1, [r7, #8]
 81063ea:	607a      	str	r2, [r7, #4]
 81063ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 81063ee:	68fb      	ldr	r3, [r7, #12]
 81063f0:	689b      	ldr	r3, [r3, #8]
 81063f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 81063f4:	697b      	ldr	r3, [r7, #20]
 81063f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81063fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 81063fc:	683b      	ldr	r3, [r7, #0]
 81063fe:	021a      	lsls	r2, r3, #8
 8106400:	687b      	ldr	r3, [r7, #4]
 8106402:	431a      	orrs	r2, r3
 8106404:	68bb      	ldr	r3, [r7, #8]
 8106406:	4313      	orrs	r3, r2
 8106408:	697a      	ldr	r2, [r7, #20]
 810640a:	4313      	orrs	r3, r2
 810640c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 810640e:	68fb      	ldr	r3, [r7, #12]
 8106410:	697a      	ldr	r2, [r7, #20]
 8106412:	609a      	str	r2, [r3, #8]
}
 8106414:	bf00      	nop
 8106416:	371c      	adds	r7, #28
 8106418:	46bd      	mov	sp, r7
 810641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810641e:	4770      	bx	lr

08106420 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8106420:	b480      	push	{r7}
 8106422:	b087      	sub	sp, #28
 8106424:	af00      	add	r7, sp, #0
 8106426:	60f8      	str	r0, [r7, #12]
 8106428:	60b9      	str	r1, [r7, #8]
 810642a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 810642c:	68bb      	ldr	r3, [r7, #8]
 810642e:	f003 031f 	and.w	r3, r3, #31
 8106432:	2201      	movs	r2, #1
 8106434:	fa02 f303 	lsl.w	r3, r2, r3
 8106438:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 810643a:	68fb      	ldr	r3, [r7, #12]
 810643c:	6a1a      	ldr	r2, [r3, #32]
 810643e:	697b      	ldr	r3, [r7, #20]
 8106440:	43db      	mvns	r3, r3
 8106442:	401a      	ands	r2, r3
 8106444:	68fb      	ldr	r3, [r7, #12]
 8106446:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8106448:	68fb      	ldr	r3, [r7, #12]
 810644a:	6a1a      	ldr	r2, [r3, #32]
 810644c:	68bb      	ldr	r3, [r7, #8]
 810644e:	f003 031f 	and.w	r3, r3, #31
 8106452:	6879      	ldr	r1, [r7, #4]
 8106454:	fa01 f303 	lsl.w	r3, r1, r3
 8106458:	431a      	orrs	r2, r3
 810645a:	68fb      	ldr	r3, [r7, #12]
 810645c:	621a      	str	r2, [r3, #32]
}
 810645e:	bf00      	nop
 8106460:	371c      	adds	r7, #28
 8106462:	46bd      	mov	sp, r7
 8106464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106468:	4770      	bx	lr
	...

0810646c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 810646c:	b480      	push	{r7}
 810646e:	b085      	sub	sp, #20
 8106470:	af00      	add	r7, sp, #0
 8106472:	6078      	str	r0, [r7, #4]
 8106474:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8106476:	687b      	ldr	r3, [r7, #4]
 8106478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 810647c:	2b01      	cmp	r3, #1
 810647e:	d101      	bne.n	8106484 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8106480:	2302      	movs	r3, #2
 8106482:	e06d      	b.n	8106560 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8106484:	687b      	ldr	r3, [r7, #4]
 8106486:	2201      	movs	r2, #1
 8106488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 810648c:	687b      	ldr	r3, [r7, #4]
 810648e:	2202      	movs	r2, #2
 8106490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8106494:	687b      	ldr	r3, [r7, #4]
 8106496:	681b      	ldr	r3, [r3, #0]
 8106498:	685b      	ldr	r3, [r3, #4]
 810649a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 810649c:	687b      	ldr	r3, [r7, #4]
 810649e:	681b      	ldr	r3, [r3, #0]
 81064a0:	689b      	ldr	r3, [r3, #8]
 81064a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 81064a4:	687b      	ldr	r3, [r7, #4]
 81064a6:	681b      	ldr	r3, [r3, #0]
 81064a8:	4a30      	ldr	r2, [pc, #192]	; (810656c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 81064aa:	4293      	cmp	r3, r2
 81064ac:	d004      	beq.n	81064b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 81064ae:	687b      	ldr	r3, [r7, #4]
 81064b0:	681b      	ldr	r3, [r3, #0]
 81064b2:	4a2f      	ldr	r2, [pc, #188]	; (8106570 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 81064b4:	4293      	cmp	r3, r2
 81064b6:	d108      	bne.n	81064ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 81064b8:	68fb      	ldr	r3, [r7, #12]
 81064ba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 81064be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 81064c0:	683b      	ldr	r3, [r7, #0]
 81064c2:	685b      	ldr	r3, [r3, #4]
 81064c4:	68fa      	ldr	r2, [r7, #12]
 81064c6:	4313      	orrs	r3, r2
 81064c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 81064ca:	68fb      	ldr	r3, [r7, #12]
 81064cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81064d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 81064d2:	683b      	ldr	r3, [r7, #0]
 81064d4:	681b      	ldr	r3, [r3, #0]
 81064d6:	68fa      	ldr	r2, [r7, #12]
 81064d8:	4313      	orrs	r3, r2
 81064da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 81064dc:	687b      	ldr	r3, [r7, #4]
 81064de:	681b      	ldr	r3, [r3, #0]
 81064e0:	68fa      	ldr	r2, [r7, #12]
 81064e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81064e4:	687b      	ldr	r3, [r7, #4]
 81064e6:	681b      	ldr	r3, [r3, #0]
 81064e8:	4a20      	ldr	r2, [pc, #128]	; (810656c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 81064ea:	4293      	cmp	r3, r2
 81064ec:	d022      	beq.n	8106534 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81064ee:	687b      	ldr	r3, [r7, #4]
 81064f0:	681b      	ldr	r3, [r3, #0]
 81064f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81064f6:	d01d      	beq.n	8106534 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81064f8:	687b      	ldr	r3, [r7, #4]
 81064fa:	681b      	ldr	r3, [r3, #0]
 81064fc:	4a1d      	ldr	r2, [pc, #116]	; (8106574 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 81064fe:	4293      	cmp	r3, r2
 8106500:	d018      	beq.n	8106534 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8106502:	687b      	ldr	r3, [r7, #4]
 8106504:	681b      	ldr	r3, [r3, #0]
 8106506:	4a1c      	ldr	r2, [pc, #112]	; (8106578 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8106508:	4293      	cmp	r3, r2
 810650a:	d013      	beq.n	8106534 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810650c:	687b      	ldr	r3, [r7, #4]
 810650e:	681b      	ldr	r3, [r3, #0]
 8106510:	4a1a      	ldr	r2, [pc, #104]	; (810657c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8106512:	4293      	cmp	r3, r2
 8106514:	d00e      	beq.n	8106534 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8106516:	687b      	ldr	r3, [r7, #4]
 8106518:	681b      	ldr	r3, [r3, #0]
 810651a:	4a15      	ldr	r2, [pc, #84]	; (8106570 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810651c:	4293      	cmp	r3, r2
 810651e:	d009      	beq.n	8106534 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8106520:	687b      	ldr	r3, [r7, #4]
 8106522:	681b      	ldr	r3, [r3, #0]
 8106524:	4a16      	ldr	r2, [pc, #88]	; (8106580 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8106526:	4293      	cmp	r3, r2
 8106528:	d004      	beq.n	8106534 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810652a:	687b      	ldr	r3, [r7, #4]
 810652c:	681b      	ldr	r3, [r3, #0]
 810652e:	4a15      	ldr	r2, [pc, #84]	; (8106584 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8106530:	4293      	cmp	r3, r2
 8106532:	d10c      	bne.n	810654e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8106534:	68bb      	ldr	r3, [r7, #8]
 8106536:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 810653a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 810653c:	683b      	ldr	r3, [r7, #0]
 810653e:	689b      	ldr	r3, [r3, #8]
 8106540:	68ba      	ldr	r2, [r7, #8]
 8106542:	4313      	orrs	r3, r2
 8106544:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8106546:	687b      	ldr	r3, [r7, #4]
 8106548:	681b      	ldr	r3, [r3, #0]
 810654a:	68ba      	ldr	r2, [r7, #8]
 810654c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 810654e:	687b      	ldr	r3, [r7, #4]
 8106550:	2201      	movs	r2, #1
 8106552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8106556:	687b      	ldr	r3, [r7, #4]
 8106558:	2200      	movs	r2, #0
 810655a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 810655e:	2300      	movs	r3, #0
}
 8106560:	4618      	mov	r0, r3
 8106562:	3714      	adds	r7, #20
 8106564:	46bd      	mov	sp, r7
 8106566:	f85d 7b04 	ldr.w	r7, [sp], #4
 810656a:	4770      	bx	lr
 810656c:	40010000 	.word	0x40010000
 8106570:	40010400 	.word	0x40010400
 8106574:	40000400 	.word	0x40000400
 8106578:	40000800 	.word	0x40000800
 810657c:	40000c00 	.word	0x40000c00
 8106580:	40001800 	.word	0x40001800
 8106584:	40014000 	.word	0x40014000

08106588 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8106588:	b480      	push	{r7}
 810658a:	b083      	sub	sp, #12
 810658c:	af00      	add	r7, sp, #0
 810658e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8106590:	bf00      	nop
 8106592:	370c      	adds	r7, #12
 8106594:	46bd      	mov	sp, r7
 8106596:	f85d 7b04 	ldr.w	r7, [sp], #4
 810659a:	4770      	bx	lr

0810659c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 810659c:	b480      	push	{r7}
 810659e:	b083      	sub	sp, #12
 81065a0:	af00      	add	r7, sp, #0
 81065a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 81065a4:	bf00      	nop
 81065a6:	370c      	adds	r7, #12
 81065a8:	46bd      	mov	sp, r7
 81065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81065ae:	4770      	bx	lr

081065b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 81065b0:	b480      	push	{r7}
 81065b2:	b083      	sub	sp, #12
 81065b4:	af00      	add	r7, sp, #0
 81065b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 81065b8:	bf00      	nop
 81065ba:	370c      	adds	r7, #12
 81065bc:	46bd      	mov	sp, r7
 81065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81065c2:	4770      	bx	lr

081065c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 81065c4:	b580      	push	{r7, lr}
 81065c6:	b082      	sub	sp, #8
 81065c8:	af00      	add	r7, sp, #0
 81065ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 81065cc:	687b      	ldr	r3, [r7, #4]
 81065ce:	2b00      	cmp	r3, #0
 81065d0:	d101      	bne.n	81065d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 81065d2:	2301      	movs	r3, #1
 81065d4:	e042      	b.n	810665c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 81065d6:	687b      	ldr	r3, [r7, #4]
 81065d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81065dc:	2b00      	cmp	r3, #0
 81065de:	d106      	bne.n	81065ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 81065e0:	687b      	ldr	r3, [r7, #4]
 81065e2:	2200      	movs	r2, #0
 81065e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 81065e8:	6878      	ldr	r0, [r7, #4]
 81065ea:	f7fb fcd7 	bl	8101f9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 81065ee:	687b      	ldr	r3, [r7, #4]
 81065f0:	2224      	movs	r2, #36	; 0x24
 81065f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 81065f6:	687b      	ldr	r3, [r7, #4]
 81065f8:	681b      	ldr	r3, [r3, #0]
 81065fa:	681a      	ldr	r2, [r3, #0]
 81065fc:	687b      	ldr	r3, [r7, #4]
 81065fe:	681b      	ldr	r3, [r3, #0]
 8106600:	f022 0201 	bic.w	r2, r2, #1
 8106604:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8106606:	6878      	ldr	r0, [r7, #4]
 8106608:	f000 fcde 	bl	8106fc8 <UART_SetConfig>
 810660c:	4603      	mov	r3, r0
 810660e:	2b01      	cmp	r3, #1
 8106610:	d101      	bne.n	8106616 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8106612:	2301      	movs	r3, #1
 8106614:	e022      	b.n	810665c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8106616:	687b      	ldr	r3, [r7, #4]
 8106618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810661a:	2b00      	cmp	r3, #0
 810661c:	d002      	beq.n	8106624 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 810661e:	6878      	ldr	r0, [r7, #4]
 8106620:	f001 fa3a 	bl	8107a98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8106624:	687b      	ldr	r3, [r7, #4]
 8106626:	681b      	ldr	r3, [r3, #0]
 8106628:	685a      	ldr	r2, [r3, #4]
 810662a:	687b      	ldr	r3, [r7, #4]
 810662c:	681b      	ldr	r3, [r3, #0]
 810662e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8106632:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8106634:	687b      	ldr	r3, [r7, #4]
 8106636:	681b      	ldr	r3, [r3, #0]
 8106638:	689a      	ldr	r2, [r3, #8]
 810663a:	687b      	ldr	r3, [r7, #4]
 810663c:	681b      	ldr	r3, [r3, #0]
 810663e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8106642:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8106644:	687b      	ldr	r3, [r7, #4]
 8106646:	681b      	ldr	r3, [r3, #0]
 8106648:	681a      	ldr	r2, [r3, #0]
 810664a:	687b      	ldr	r3, [r7, #4]
 810664c:	681b      	ldr	r3, [r3, #0]
 810664e:	f042 0201 	orr.w	r2, r2, #1
 8106652:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8106654:	6878      	ldr	r0, [r7, #4]
 8106656:	f001 fac1 	bl	8107bdc <UART_CheckIdleState>
 810665a:	4603      	mov	r3, r0
}
 810665c:	4618      	mov	r0, r3
 810665e:	3708      	adds	r7, #8
 8106660:	46bd      	mov	sp, r7
 8106662:	bd80      	pop	{r7, pc}

08106664 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8106664:	b480      	push	{r7}
 8106666:	b091      	sub	sp, #68	; 0x44
 8106668:	af00      	add	r7, sp, #0
 810666a:	60f8      	str	r0, [r7, #12]
 810666c:	60b9      	str	r1, [r7, #8]
 810666e:	4613      	mov	r3, r2
 8106670:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8106672:	68fb      	ldr	r3, [r7, #12]
 8106674:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106678:	2b20      	cmp	r3, #32
 810667a:	f040 808c 	bne.w	8106796 <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 810667e:	68bb      	ldr	r3, [r7, #8]
 8106680:	2b00      	cmp	r3, #0
 8106682:	d002      	beq.n	810668a <HAL_UART_Transmit_IT+0x26>
 8106684:	88fb      	ldrh	r3, [r7, #6]
 8106686:	2b00      	cmp	r3, #0
 8106688:	d101      	bne.n	810668e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 810668a:	2301      	movs	r3, #1
 810668c:	e084      	b.n	8106798 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 810668e:	68fb      	ldr	r3, [r7, #12]
 8106690:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8106694:	2b01      	cmp	r3, #1
 8106696:	d101      	bne.n	810669c <HAL_UART_Transmit_IT+0x38>
 8106698:	2302      	movs	r3, #2
 810669a:	e07d      	b.n	8106798 <HAL_UART_Transmit_IT+0x134>
 810669c:	68fb      	ldr	r3, [r7, #12]
 810669e:	2201      	movs	r2, #1
 81066a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 81066a4:	68fb      	ldr	r3, [r7, #12]
 81066a6:	68ba      	ldr	r2, [r7, #8]
 81066a8:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 81066aa:	68fb      	ldr	r3, [r7, #12]
 81066ac:	88fa      	ldrh	r2, [r7, #6]
 81066ae:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 81066b2:	68fb      	ldr	r3, [r7, #12]
 81066b4:	88fa      	ldrh	r2, [r7, #6]
 81066b6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 81066ba:	68fb      	ldr	r3, [r7, #12]
 81066bc:	2200      	movs	r2, #0
 81066be:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 81066c0:	68fb      	ldr	r3, [r7, #12]
 81066c2:	2200      	movs	r2, #0
 81066c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 81066c8:	68fb      	ldr	r3, [r7, #12]
 81066ca:	2221      	movs	r2, #33	; 0x21
 81066cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 81066d0:	68fb      	ldr	r3, [r7, #12]
 81066d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81066d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81066d8:	d12e      	bne.n	8106738 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 81066da:	68fb      	ldr	r3, [r7, #12]
 81066dc:	689b      	ldr	r3, [r3, #8]
 81066de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81066e2:	d107      	bne.n	81066f4 <HAL_UART_Transmit_IT+0x90>
 81066e4:	68fb      	ldr	r3, [r7, #12]
 81066e6:	691b      	ldr	r3, [r3, #16]
 81066e8:	2b00      	cmp	r3, #0
 81066ea:	d103      	bne.n	81066f4 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 81066ec:	68fb      	ldr	r3, [r7, #12]
 81066ee:	4a2d      	ldr	r2, [pc, #180]	; (81067a4 <HAL_UART_Transmit_IT+0x140>)
 81066f0:	675a      	str	r2, [r3, #116]	; 0x74
 81066f2:	e002      	b.n	81066fa <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 81066f4:	68fb      	ldr	r3, [r7, #12]
 81066f6:	4a2c      	ldr	r2, [pc, #176]	; (81067a8 <HAL_UART_Transmit_IT+0x144>)
 81066f8:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 81066fa:	68fb      	ldr	r3, [r7, #12]
 81066fc:	2200      	movs	r2, #0
 81066fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8106702:	68fb      	ldr	r3, [r7, #12]
 8106704:	681b      	ldr	r3, [r3, #0]
 8106706:	3308      	adds	r3, #8
 8106708:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810670a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810670c:	e853 3f00 	ldrex	r3, [r3]
 8106710:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8106712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106714:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8106718:	63bb      	str	r3, [r7, #56]	; 0x38
 810671a:	68fb      	ldr	r3, [r7, #12]
 810671c:	681b      	ldr	r3, [r3, #0]
 810671e:	3308      	adds	r3, #8
 8106720:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8106722:	637a      	str	r2, [r7, #52]	; 0x34
 8106724:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106726:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8106728:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810672a:	e841 2300 	strex	r3, r2, [r1]
 810672e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8106730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106732:	2b00      	cmp	r3, #0
 8106734:	d1e5      	bne.n	8106702 <HAL_UART_Transmit_IT+0x9e>
 8106736:	e02c      	b.n	8106792 <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8106738:	68fb      	ldr	r3, [r7, #12]
 810673a:	689b      	ldr	r3, [r3, #8]
 810673c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106740:	d107      	bne.n	8106752 <HAL_UART_Transmit_IT+0xee>
 8106742:	68fb      	ldr	r3, [r7, #12]
 8106744:	691b      	ldr	r3, [r3, #16]
 8106746:	2b00      	cmp	r3, #0
 8106748:	d103      	bne.n	8106752 <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 810674a:	68fb      	ldr	r3, [r7, #12]
 810674c:	4a17      	ldr	r2, [pc, #92]	; (81067ac <HAL_UART_Transmit_IT+0x148>)
 810674e:	675a      	str	r2, [r3, #116]	; 0x74
 8106750:	e002      	b.n	8106758 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8106752:	68fb      	ldr	r3, [r7, #12]
 8106754:	4a16      	ldr	r2, [pc, #88]	; (81067b0 <HAL_UART_Transmit_IT+0x14c>)
 8106756:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8106758:	68fb      	ldr	r3, [r7, #12]
 810675a:	2200      	movs	r2, #0
 810675c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8106760:	68fb      	ldr	r3, [r7, #12]
 8106762:	681b      	ldr	r3, [r3, #0]
 8106764:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106766:	697b      	ldr	r3, [r7, #20]
 8106768:	e853 3f00 	ldrex	r3, [r3]
 810676c:	613b      	str	r3, [r7, #16]
   return(result);
 810676e:	693b      	ldr	r3, [r7, #16]
 8106770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8106774:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106776:	68fb      	ldr	r3, [r7, #12]
 8106778:	681b      	ldr	r3, [r3, #0]
 810677a:	461a      	mov	r2, r3
 810677c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810677e:	623b      	str	r3, [r7, #32]
 8106780:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106782:	69f9      	ldr	r1, [r7, #28]
 8106784:	6a3a      	ldr	r2, [r7, #32]
 8106786:	e841 2300 	strex	r3, r2, [r1]
 810678a:	61bb      	str	r3, [r7, #24]
   return(result);
 810678c:	69bb      	ldr	r3, [r7, #24]
 810678e:	2b00      	cmp	r3, #0
 8106790:	d1e6      	bne.n	8106760 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 8106792:	2300      	movs	r3, #0
 8106794:	e000      	b.n	8106798 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 8106796:	2302      	movs	r3, #2
  }
}
 8106798:	4618      	mov	r0, r3
 810679a:	3744      	adds	r7, #68	; 0x44
 810679c:	46bd      	mov	sp, r7
 810679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81067a2:	4770      	bx	lr
 81067a4:	081083ab 	.word	0x081083ab
 81067a8:	081082cb 	.word	0x081082cb
 81067ac:	08108209 	.word	0x08108209
 81067b0:	08108151 	.word	0x08108151

081067b4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 81067b4:	b580      	push	{r7, lr}
 81067b6:	b08a      	sub	sp, #40	; 0x28
 81067b8:	af00      	add	r7, sp, #0
 81067ba:	60f8      	str	r0, [r7, #12]
 81067bc:	60b9      	str	r1, [r7, #8]
 81067be:	4613      	mov	r3, r2
 81067c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 81067c2:	68fb      	ldr	r3, [r7, #12]
 81067c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81067c8:	2b20      	cmp	r3, #32
 81067ca:	d142      	bne.n	8106852 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 81067cc:	68bb      	ldr	r3, [r7, #8]
 81067ce:	2b00      	cmp	r3, #0
 81067d0:	d002      	beq.n	81067d8 <HAL_UART_Receive_IT+0x24>
 81067d2:	88fb      	ldrh	r3, [r7, #6]
 81067d4:	2b00      	cmp	r3, #0
 81067d6:	d101      	bne.n	81067dc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 81067d8:	2301      	movs	r3, #1
 81067da:	e03b      	b.n	8106854 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 81067dc:	68fb      	ldr	r3, [r7, #12]
 81067de:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 81067e2:	2b01      	cmp	r3, #1
 81067e4:	d101      	bne.n	81067ea <HAL_UART_Receive_IT+0x36>
 81067e6:	2302      	movs	r3, #2
 81067e8:	e034      	b.n	8106854 <HAL_UART_Receive_IT+0xa0>
 81067ea:	68fb      	ldr	r3, [r7, #12]
 81067ec:	2201      	movs	r2, #1
 81067ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 81067f2:	68fb      	ldr	r3, [r7, #12]
 81067f4:	2200      	movs	r2, #0
 81067f6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 81067f8:	68fb      	ldr	r3, [r7, #12]
 81067fa:	681b      	ldr	r3, [r3, #0]
 81067fc:	4a17      	ldr	r2, [pc, #92]	; (810685c <HAL_UART_Receive_IT+0xa8>)
 81067fe:	4293      	cmp	r3, r2
 8106800:	d01f      	beq.n	8106842 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8106802:	68fb      	ldr	r3, [r7, #12]
 8106804:	681b      	ldr	r3, [r3, #0]
 8106806:	685b      	ldr	r3, [r3, #4]
 8106808:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810680c:	2b00      	cmp	r3, #0
 810680e:	d018      	beq.n	8106842 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8106810:	68fb      	ldr	r3, [r7, #12]
 8106812:	681b      	ldr	r3, [r3, #0]
 8106814:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106816:	697b      	ldr	r3, [r7, #20]
 8106818:	e853 3f00 	ldrex	r3, [r3]
 810681c:	613b      	str	r3, [r7, #16]
   return(result);
 810681e:	693b      	ldr	r3, [r7, #16]
 8106820:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8106824:	627b      	str	r3, [r7, #36]	; 0x24
 8106826:	68fb      	ldr	r3, [r7, #12]
 8106828:	681b      	ldr	r3, [r3, #0]
 810682a:	461a      	mov	r2, r3
 810682c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810682e:	623b      	str	r3, [r7, #32]
 8106830:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106832:	69f9      	ldr	r1, [r7, #28]
 8106834:	6a3a      	ldr	r2, [r7, #32]
 8106836:	e841 2300 	strex	r3, r2, [r1]
 810683a:	61bb      	str	r3, [r7, #24]
   return(result);
 810683c:	69bb      	ldr	r3, [r7, #24]
 810683e:	2b00      	cmp	r3, #0
 8106840:	d1e6      	bne.n	8106810 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8106842:	88fb      	ldrh	r3, [r7, #6]
 8106844:	461a      	mov	r2, r3
 8106846:	68b9      	ldr	r1, [r7, #8]
 8106848:	68f8      	ldr	r0, [r7, #12]
 810684a:	f001 fadb 	bl	8107e04 <UART_Start_Receive_IT>
 810684e:	4603      	mov	r3, r0
 8106850:	e000      	b.n	8106854 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8106852:	2302      	movs	r3, #2
  }
}
 8106854:	4618      	mov	r0, r3
 8106856:	3728      	adds	r7, #40	; 0x28
 8106858:	46bd      	mov	sp, r7
 810685a:	bd80      	pop	{r7, pc}
 810685c:	58000c00 	.word	0x58000c00

08106860 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8106860:	b580      	push	{r7, lr}
 8106862:	b0ba      	sub	sp, #232	; 0xe8
 8106864:	af00      	add	r7, sp, #0
 8106866:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8106868:	687b      	ldr	r3, [r7, #4]
 810686a:	681b      	ldr	r3, [r3, #0]
 810686c:	69db      	ldr	r3, [r3, #28]
 810686e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8106872:	687b      	ldr	r3, [r7, #4]
 8106874:	681b      	ldr	r3, [r3, #0]
 8106876:	681b      	ldr	r3, [r3, #0]
 8106878:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 810687c:	687b      	ldr	r3, [r7, #4]
 810687e:	681b      	ldr	r3, [r3, #0]
 8106880:	689b      	ldr	r3, [r3, #8]
 8106882:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8106886:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 810688a:	f640 030f 	movw	r3, #2063	; 0x80f
 810688e:	4013      	ands	r3, r2
 8106890:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8106894:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8106898:	2b00      	cmp	r3, #0
 810689a:	d11b      	bne.n	81068d4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 810689c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 81068a0:	f003 0320 	and.w	r3, r3, #32
 81068a4:	2b00      	cmp	r3, #0
 81068a6:	d015      	beq.n	81068d4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 81068a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 81068ac:	f003 0320 	and.w	r3, r3, #32
 81068b0:	2b00      	cmp	r3, #0
 81068b2:	d105      	bne.n	81068c0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 81068b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 81068b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 81068bc:	2b00      	cmp	r3, #0
 81068be:	d009      	beq.n	81068d4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 81068c0:	687b      	ldr	r3, [r7, #4]
 81068c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81068c4:	2b00      	cmp	r3, #0
 81068c6:	f000 835c 	beq.w	8106f82 <HAL_UART_IRQHandler+0x722>
      {
        huart->RxISR(huart);
 81068ca:	687b      	ldr	r3, [r7, #4]
 81068cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81068ce:	6878      	ldr	r0, [r7, #4]
 81068d0:	4798      	blx	r3
      }
      return;
 81068d2:	e356      	b.n	8106f82 <HAL_UART_IRQHandler+0x722>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 81068d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 81068d8:	2b00      	cmp	r3, #0
 81068da:	f000 811f 	beq.w	8106b1c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 81068de:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 81068e2:	4b8b      	ldr	r3, [pc, #556]	; (8106b10 <HAL_UART_IRQHandler+0x2b0>)
 81068e4:	4013      	ands	r3, r2
 81068e6:	2b00      	cmp	r3, #0
 81068e8:	d106      	bne.n	81068f8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 81068ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 81068ee:	4b89      	ldr	r3, [pc, #548]	; (8106b14 <HAL_UART_IRQHandler+0x2b4>)
 81068f0:	4013      	ands	r3, r2
 81068f2:	2b00      	cmp	r3, #0
 81068f4:	f000 8112 	beq.w	8106b1c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 81068f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 81068fc:	f003 0301 	and.w	r3, r3, #1
 8106900:	2b00      	cmp	r3, #0
 8106902:	d011      	beq.n	8106928 <HAL_UART_IRQHandler+0xc8>
 8106904:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8106908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810690c:	2b00      	cmp	r3, #0
 810690e:	d00b      	beq.n	8106928 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8106910:	687b      	ldr	r3, [r7, #4]
 8106912:	681b      	ldr	r3, [r3, #0]
 8106914:	2201      	movs	r2, #1
 8106916:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8106918:	687b      	ldr	r3, [r7, #4]
 810691a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810691e:	f043 0201 	orr.w	r2, r3, #1
 8106922:	687b      	ldr	r3, [r7, #4]
 8106924:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8106928:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 810692c:	f003 0302 	and.w	r3, r3, #2
 8106930:	2b00      	cmp	r3, #0
 8106932:	d011      	beq.n	8106958 <HAL_UART_IRQHandler+0xf8>
 8106934:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8106938:	f003 0301 	and.w	r3, r3, #1
 810693c:	2b00      	cmp	r3, #0
 810693e:	d00b      	beq.n	8106958 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8106940:	687b      	ldr	r3, [r7, #4]
 8106942:	681b      	ldr	r3, [r3, #0]
 8106944:	2202      	movs	r2, #2
 8106946:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8106948:	687b      	ldr	r3, [r7, #4]
 810694a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810694e:	f043 0204 	orr.w	r2, r3, #4
 8106952:	687b      	ldr	r3, [r7, #4]
 8106954:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8106958:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 810695c:	f003 0304 	and.w	r3, r3, #4
 8106960:	2b00      	cmp	r3, #0
 8106962:	d011      	beq.n	8106988 <HAL_UART_IRQHandler+0x128>
 8106964:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8106968:	f003 0301 	and.w	r3, r3, #1
 810696c:	2b00      	cmp	r3, #0
 810696e:	d00b      	beq.n	8106988 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8106970:	687b      	ldr	r3, [r7, #4]
 8106972:	681b      	ldr	r3, [r3, #0]
 8106974:	2204      	movs	r2, #4
 8106976:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8106978:	687b      	ldr	r3, [r7, #4]
 810697a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810697e:	f043 0202 	orr.w	r2, r3, #2
 8106982:	687b      	ldr	r3, [r7, #4]
 8106984:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8106988:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 810698c:	f003 0308 	and.w	r3, r3, #8
 8106990:	2b00      	cmp	r3, #0
 8106992:	d017      	beq.n	81069c4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8106994:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8106998:	f003 0320 	and.w	r3, r3, #32
 810699c:	2b00      	cmp	r3, #0
 810699e:	d105      	bne.n	81069ac <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 81069a0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 81069a4:	4b5a      	ldr	r3, [pc, #360]	; (8106b10 <HAL_UART_IRQHandler+0x2b0>)
 81069a6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 81069a8:	2b00      	cmp	r3, #0
 81069aa:	d00b      	beq.n	81069c4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 81069ac:	687b      	ldr	r3, [r7, #4]
 81069ae:	681b      	ldr	r3, [r3, #0]
 81069b0:	2208      	movs	r2, #8
 81069b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 81069b4:	687b      	ldr	r3, [r7, #4]
 81069b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81069ba:	f043 0208 	orr.w	r2, r3, #8
 81069be:	687b      	ldr	r3, [r7, #4]
 81069c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 81069c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 81069c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 81069cc:	2b00      	cmp	r3, #0
 81069ce:	d012      	beq.n	81069f6 <HAL_UART_IRQHandler+0x196>
 81069d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 81069d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 81069d8:	2b00      	cmp	r3, #0
 81069da:	d00c      	beq.n	81069f6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 81069dc:	687b      	ldr	r3, [r7, #4]
 81069de:	681b      	ldr	r3, [r3, #0]
 81069e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 81069e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 81069e6:	687b      	ldr	r3, [r7, #4]
 81069e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81069ec:	f043 0220 	orr.w	r2, r3, #32
 81069f0:	687b      	ldr	r3, [r7, #4]
 81069f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 81069f6:	687b      	ldr	r3, [r7, #4]
 81069f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81069fc:	2b00      	cmp	r3, #0
 81069fe:	f000 82c2 	beq.w	8106f86 <HAL_UART_IRQHandler+0x726>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8106a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8106a06:	f003 0320 	and.w	r3, r3, #32
 8106a0a:	2b00      	cmp	r3, #0
 8106a0c:	d013      	beq.n	8106a36 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8106a0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8106a12:	f003 0320 	and.w	r3, r3, #32
 8106a16:	2b00      	cmp	r3, #0
 8106a18:	d105      	bne.n	8106a26 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8106a1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8106a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8106a22:	2b00      	cmp	r3, #0
 8106a24:	d007      	beq.n	8106a36 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8106a26:	687b      	ldr	r3, [r7, #4]
 8106a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8106a2a:	2b00      	cmp	r3, #0
 8106a2c:	d003      	beq.n	8106a36 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8106a2e:	687b      	ldr	r3, [r7, #4]
 8106a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8106a32:	6878      	ldr	r0, [r7, #4]
 8106a34:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8106a36:	687b      	ldr	r3, [r7, #4]
 8106a38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8106a3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8106a40:	687b      	ldr	r3, [r7, #4]
 8106a42:	681b      	ldr	r3, [r3, #0]
 8106a44:	689b      	ldr	r3, [r3, #8]
 8106a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106a4a:	2b40      	cmp	r3, #64	; 0x40
 8106a4c:	d005      	beq.n	8106a5a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8106a4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8106a52:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8106a56:	2b00      	cmp	r3, #0
 8106a58:	d04f      	beq.n	8106afa <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8106a5a:	6878      	ldr	r0, [r7, #4]
 8106a5c:	f001 fafc 	bl	8108058 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8106a60:	687b      	ldr	r3, [r7, #4]
 8106a62:	681b      	ldr	r3, [r3, #0]
 8106a64:	689b      	ldr	r3, [r3, #8]
 8106a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106a6a:	2b40      	cmp	r3, #64	; 0x40
 8106a6c:	d141      	bne.n	8106af2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8106a6e:	687b      	ldr	r3, [r7, #4]
 8106a70:	681b      	ldr	r3, [r3, #0]
 8106a72:	3308      	adds	r3, #8
 8106a74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106a78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8106a7c:	e853 3f00 	ldrex	r3, [r3]
 8106a80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8106a84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8106a88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8106a8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8106a90:	687b      	ldr	r3, [r7, #4]
 8106a92:	681b      	ldr	r3, [r3, #0]
 8106a94:	3308      	adds	r3, #8
 8106a96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8106a9a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8106a9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106aa2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8106aa6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8106aaa:	e841 2300 	strex	r3, r2, [r1]
 8106aae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8106ab2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8106ab6:	2b00      	cmp	r3, #0
 8106ab8:	d1d9      	bne.n	8106a6e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8106aba:	687b      	ldr	r3, [r7, #4]
 8106abc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106abe:	2b00      	cmp	r3, #0
 8106ac0:	d013      	beq.n	8106aea <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8106ac2:	687b      	ldr	r3, [r7, #4]
 8106ac4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106ac6:	4a14      	ldr	r2, [pc, #80]	; (8106b18 <HAL_UART_IRQHandler+0x2b8>)
 8106ac8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8106aca:	687b      	ldr	r3, [r7, #4]
 8106acc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106ace:	4618      	mov	r0, r3
 8106ad0:	f7fc f91c 	bl	8102d0c <HAL_DMA_Abort_IT>
 8106ad4:	4603      	mov	r3, r0
 8106ad6:	2b00      	cmp	r3, #0
 8106ad8:	d017      	beq.n	8106b0a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8106ada:	687b      	ldr	r3, [r7, #4]
 8106adc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106ade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106ae0:	687a      	ldr	r2, [r7, #4]
 8106ae2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8106ae4:	4610      	mov	r0, r2
 8106ae6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8106ae8:	e00f      	b.n	8106b0a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8106aea:	6878      	ldr	r0, [r7, #4]
 8106aec:	f000 fa56 	bl	8106f9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8106af0:	e00b      	b.n	8106b0a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8106af2:	6878      	ldr	r0, [r7, #4]
 8106af4:	f000 fa52 	bl	8106f9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8106af8:	e007      	b.n	8106b0a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8106afa:	6878      	ldr	r0, [r7, #4]
 8106afc:	f000 fa4e 	bl	8106f9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8106b00:	687b      	ldr	r3, [r7, #4]
 8106b02:	2200      	movs	r2, #0
 8106b04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8106b08:	e23d      	b.n	8106f86 <HAL_UART_IRQHandler+0x726>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8106b0a:	bf00      	nop
    return;
 8106b0c:	e23b      	b.n	8106f86 <HAL_UART_IRQHandler+0x726>
 8106b0e:	bf00      	nop
 8106b10:	10000001 	.word	0x10000001
 8106b14:	04000120 	.word	0x04000120
 8106b18:	08108125 	.word	0x08108125

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8106b1c:	687b      	ldr	r3, [r7, #4]
 8106b1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8106b20:	2b01      	cmp	r3, #1
 8106b22:	f040 81d0 	bne.w	8106ec6 <HAL_UART_IRQHandler+0x666>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8106b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8106b2a:	f003 0310 	and.w	r3, r3, #16
 8106b2e:	2b00      	cmp	r3, #0
 8106b30:	f000 81c9 	beq.w	8106ec6 <HAL_UART_IRQHandler+0x666>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8106b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8106b38:	f003 0310 	and.w	r3, r3, #16
 8106b3c:	2b00      	cmp	r3, #0
 8106b3e:	f000 81c2 	beq.w	8106ec6 <HAL_UART_IRQHandler+0x666>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8106b42:	687b      	ldr	r3, [r7, #4]
 8106b44:	681b      	ldr	r3, [r3, #0]
 8106b46:	2210      	movs	r2, #16
 8106b48:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8106b4a:	687b      	ldr	r3, [r7, #4]
 8106b4c:	681b      	ldr	r3, [r3, #0]
 8106b4e:	689b      	ldr	r3, [r3, #8]
 8106b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106b54:	2b40      	cmp	r3, #64	; 0x40
 8106b56:	f040 813b 	bne.w	8106dd0 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8106b5a:	687b      	ldr	r3, [r7, #4]
 8106b5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106b5e:	681b      	ldr	r3, [r3, #0]
 8106b60:	4a8b      	ldr	r2, [pc, #556]	; (8106d90 <HAL_UART_IRQHandler+0x530>)
 8106b62:	4293      	cmp	r3, r2
 8106b64:	d059      	beq.n	8106c1a <HAL_UART_IRQHandler+0x3ba>
 8106b66:	687b      	ldr	r3, [r7, #4]
 8106b68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106b6a:	681b      	ldr	r3, [r3, #0]
 8106b6c:	4a89      	ldr	r2, [pc, #548]	; (8106d94 <HAL_UART_IRQHandler+0x534>)
 8106b6e:	4293      	cmp	r3, r2
 8106b70:	d053      	beq.n	8106c1a <HAL_UART_IRQHandler+0x3ba>
 8106b72:	687b      	ldr	r3, [r7, #4]
 8106b74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106b76:	681b      	ldr	r3, [r3, #0]
 8106b78:	4a87      	ldr	r2, [pc, #540]	; (8106d98 <HAL_UART_IRQHandler+0x538>)
 8106b7a:	4293      	cmp	r3, r2
 8106b7c:	d04d      	beq.n	8106c1a <HAL_UART_IRQHandler+0x3ba>
 8106b7e:	687b      	ldr	r3, [r7, #4]
 8106b80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106b82:	681b      	ldr	r3, [r3, #0]
 8106b84:	4a85      	ldr	r2, [pc, #532]	; (8106d9c <HAL_UART_IRQHandler+0x53c>)
 8106b86:	4293      	cmp	r3, r2
 8106b88:	d047      	beq.n	8106c1a <HAL_UART_IRQHandler+0x3ba>
 8106b8a:	687b      	ldr	r3, [r7, #4]
 8106b8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106b8e:	681b      	ldr	r3, [r3, #0]
 8106b90:	4a83      	ldr	r2, [pc, #524]	; (8106da0 <HAL_UART_IRQHandler+0x540>)
 8106b92:	4293      	cmp	r3, r2
 8106b94:	d041      	beq.n	8106c1a <HAL_UART_IRQHandler+0x3ba>
 8106b96:	687b      	ldr	r3, [r7, #4]
 8106b98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106b9a:	681b      	ldr	r3, [r3, #0]
 8106b9c:	4a81      	ldr	r2, [pc, #516]	; (8106da4 <HAL_UART_IRQHandler+0x544>)
 8106b9e:	4293      	cmp	r3, r2
 8106ba0:	d03b      	beq.n	8106c1a <HAL_UART_IRQHandler+0x3ba>
 8106ba2:	687b      	ldr	r3, [r7, #4]
 8106ba4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106ba6:	681b      	ldr	r3, [r3, #0]
 8106ba8:	4a7f      	ldr	r2, [pc, #508]	; (8106da8 <HAL_UART_IRQHandler+0x548>)
 8106baa:	4293      	cmp	r3, r2
 8106bac:	d035      	beq.n	8106c1a <HAL_UART_IRQHandler+0x3ba>
 8106bae:	687b      	ldr	r3, [r7, #4]
 8106bb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106bb2:	681b      	ldr	r3, [r3, #0]
 8106bb4:	4a7d      	ldr	r2, [pc, #500]	; (8106dac <HAL_UART_IRQHandler+0x54c>)
 8106bb6:	4293      	cmp	r3, r2
 8106bb8:	d02f      	beq.n	8106c1a <HAL_UART_IRQHandler+0x3ba>
 8106bba:	687b      	ldr	r3, [r7, #4]
 8106bbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106bbe:	681b      	ldr	r3, [r3, #0]
 8106bc0:	4a7b      	ldr	r2, [pc, #492]	; (8106db0 <HAL_UART_IRQHandler+0x550>)
 8106bc2:	4293      	cmp	r3, r2
 8106bc4:	d029      	beq.n	8106c1a <HAL_UART_IRQHandler+0x3ba>
 8106bc6:	687b      	ldr	r3, [r7, #4]
 8106bc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106bca:	681b      	ldr	r3, [r3, #0]
 8106bcc:	4a79      	ldr	r2, [pc, #484]	; (8106db4 <HAL_UART_IRQHandler+0x554>)
 8106bce:	4293      	cmp	r3, r2
 8106bd0:	d023      	beq.n	8106c1a <HAL_UART_IRQHandler+0x3ba>
 8106bd2:	687b      	ldr	r3, [r7, #4]
 8106bd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106bd6:	681b      	ldr	r3, [r3, #0]
 8106bd8:	4a77      	ldr	r2, [pc, #476]	; (8106db8 <HAL_UART_IRQHandler+0x558>)
 8106bda:	4293      	cmp	r3, r2
 8106bdc:	d01d      	beq.n	8106c1a <HAL_UART_IRQHandler+0x3ba>
 8106bde:	687b      	ldr	r3, [r7, #4]
 8106be0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106be2:	681b      	ldr	r3, [r3, #0]
 8106be4:	4a75      	ldr	r2, [pc, #468]	; (8106dbc <HAL_UART_IRQHandler+0x55c>)
 8106be6:	4293      	cmp	r3, r2
 8106be8:	d017      	beq.n	8106c1a <HAL_UART_IRQHandler+0x3ba>
 8106bea:	687b      	ldr	r3, [r7, #4]
 8106bec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106bee:	681b      	ldr	r3, [r3, #0]
 8106bf0:	4a73      	ldr	r2, [pc, #460]	; (8106dc0 <HAL_UART_IRQHandler+0x560>)
 8106bf2:	4293      	cmp	r3, r2
 8106bf4:	d011      	beq.n	8106c1a <HAL_UART_IRQHandler+0x3ba>
 8106bf6:	687b      	ldr	r3, [r7, #4]
 8106bf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106bfa:	681b      	ldr	r3, [r3, #0]
 8106bfc:	4a71      	ldr	r2, [pc, #452]	; (8106dc4 <HAL_UART_IRQHandler+0x564>)
 8106bfe:	4293      	cmp	r3, r2
 8106c00:	d00b      	beq.n	8106c1a <HAL_UART_IRQHandler+0x3ba>
 8106c02:	687b      	ldr	r3, [r7, #4]
 8106c04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106c06:	681b      	ldr	r3, [r3, #0]
 8106c08:	4a6f      	ldr	r2, [pc, #444]	; (8106dc8 <HAL_UART_IRQHandler+0x568>)
 8106c0a:	4293      	cmp	r3, r2
 8106c0c:	d005      	beq.n	8106c1a <HAL_UART_IRQHandler+0x3ba>
 8106c0e:	687b      	ldr	r3, [r7, #4]
 8106c10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106c12:	681b      	ldr	r3, [r3, #0]
 8106c14:	4a6d      	ldr	r2, [pc, #436]	; (8106dcc <HAL_UART_IRQHandler+0x56c>)
 8106c16:	4293      	cmp	r3, r2
 8106c18:	d105      	bne.n	8106c26 <HAL_UART_IRQHandler+0x3c6>
 8106c1a:	687b      	ldr	r3, [r7, #4]
 8106c1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106c1e:	681b      	ldr	r3, [r3, #0]
 8106c20:	685b      	ldr	r3, [r3, #4]
 8106c22:	b29b      	uxth	r3, r3
 8106c24:	e004      	b.n	8106c30 <HAL_UART_IRQHandler+0x3d0>
 8106c26:	687b      	ldr	r3, [r7, #4]
 8106c28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106c2a:	681b      	ldr	r3, [r3, #0]
 8106c2c:	685b      	ldr	r3, [r3, #4]
 8106c2e:	b29b      	uxth	r3, r3
 8106c30:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8106c34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8106c38:	2b00      	cmp	r3, #0
 8106c3a:	f000 81a6 	beq.w	8106f8a <HAL_UART_IRQHandler+0x72a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8106c3e:	687b      	ldr	r3, [r7, #4]
 8106c40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8106c44:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8106c48:	429a      	cmp	r2, r3
 8106c4a:	f080 819e 	bcs.w	8106f8a <HAL_UART_IRQHandler+0x72a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8106c4e:	687b      	ldr	r3, [r7, #4]
 8106c50:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8106c54:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8106c58:	687b      	ldr	r3, [r7, #4]
 8106c5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106c5c:	69db      	ldr	r3, [r3, #28]
 8106c5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106c62:	f000 8086 	beq.w	8106d72 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8106c66:	687b      	ldr	r3, [r7, #4]
 8106c68:	681b      	ldr	r3, [r3, #0]
 8106c6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106c6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8106c72:	e853 3f00 	ldrex	r3, [r3]
 8106c76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8106c7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8106c7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8106c82:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8106c86:	687b      	ldr	r3, [r7, #4]
 8106c88:	681b      	ldr	r3, [r3, #0]
 8106c8a:	461a      	mov	r2, r3
 8106c8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8106c90:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8106c94:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106c98:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8106c9c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8106ca0:	e841 2300 	strex	r3, r2, [r1]
 8106ca4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8106ca8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8106cac:	2b00      	cmp	r3, #0
 8106cae:	d1da      	bne.n	8106c66 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8106cb0:	687b      	ldr	r3, [r7, #4]
 8106cb2:	681b      	ldr	r3, [r3, #0]
 8106cb4:	3308      	adds	r3, #8
 8106cb6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106cb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8106cba:	e853 3f00 	ldrex	r3, [r3]
 8106cbe:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8106cc0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8106cc2:	f023 0301 	bic.w	r3, r3, #1
 8106cc6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8106cca:	687b      	ldr	r3, [r7, #4]
 8106ccc:	681b      	ldr	r3, [r3, #0]
 8106cce:	3308      	adds	r3, #8
 8106cd0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8106cd4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8106cd8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106cda:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8106cdc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8106ce0:	e841 2300 	strex	r3, r2, [r1]
 8106ce4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8106ce6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8106ce8:	2b00      	cmp	r3, #0
 8106cea:	d1e1      	bne.n	8106cb0 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8106cec:	687b      	ldr	r3, [r7, #4]
 8106cee:	681b      	ldr	r3, [r3, #0]
 8106cf0:	3308      	adds	r3, #8
 8106cf2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106cf4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8106cf6:	e853 3f00 	ldrex	r3, [r3]
 8106cfa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8106cfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8106cfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8106d02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8106d06:	687b      	ldr	r3, [r7, #4]
 8106d08:	681b      	ldr	r3, [r3, #0]
 8106d0a:	3308      	adds	r3, #8
 8106d0c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8106d10:	66fa      	str	r2, [r7, #108]	; 0x6c
 8106d12:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106d14:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8106d16:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8106d18:	e841 2300 	strex	r3, r2, [r1]
 8106d1c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8106d1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8106d20:	2b00      	cmp	r3, #0
 8106d22:	d1e3      	bne.n	8106cec <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8106d24:	687b      	ldr	r3, [r7, #4]
 8106d26:	2220      	movs	r2, #32
 8106d28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8106d2c:	687b      	ldr	r3, [r7, #4]
 8106d2e:	2200      	movs	r2, #0
 8106d30:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8106d32:	687b      	ldr	r3, [r7, #4]
 8106d34:	681b      	ldr	r3, [r3, #0]
 8106d36:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106d38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8106d3a:	e853 3f00 	ldrex	r3, [r3]
 8106d3e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8106d40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8106d42:	f023 0310 	bic.w	r3, r3, #16
 8106d46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8106d4a:	687b      	ldr	r3, [r7, #4]
 8106d4c:	681b      	ldr	r3, [r3, #0]
 8106d4e:	461a      	mov	r2, r3
 8106d50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8106d54:	65bb      	str	r3, [r7, #88]	; 0x58
 8106d56:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106d58:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8106d5a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8106d5c:	e841 2300 	strex	r3, r2, [r1]
 8106d60:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8106d62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8106d64:	2b00      	cmp	r3, #0
 8106d66:	d1e4      	bne.n	8106d32 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8106d68:	687b      	ldr	r3, [r7, #4]
 8106d6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106d6c:	4618      	mov	r0, r3
 8106d6e:	f7fb fcaf 	bl	81026d0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8106d72:	687b      	ldr	r3, [r7, #4]
 8106d74:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8106d78:	687b      	ldr	r3, [r7, #4]
 8106d7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8106d7e:	b29b      	uxth	r3, r3
 8106d80:	1ad3      	subs	r3, r2, r3
 8106d82:	b29b      	uxth	r3, r3
 8106d84:	4619      	mov	r1, r3
 8106d86:	6878      	ldr	r0, [r7, #4]
 8106d88:	f000 f912 	bl	8106fb0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8106d8c:	e0fd      	b.n	8106f8a <HAL_UART_IRQHandler+0x72a>
 8106d8e:	bf00      	nop
 8106d90:	40020010 	.word	0x40020010
 8106d94:	40020028 	.word	0x40020028
 8106d98:	40020040 	.word	0x40020040
 8106d9c:	40020058 	.word	0x40020058
 8106da0:	40020070 	.word	0x40020070
 8106da4:	40020088 	.word	0x40020088
 8106da8:	400200a0 	.word	0x400200a0
 8106dac:	400200b8 	.word	0x400200b8
 8106db0:	40020410 	.word	0x40020410
 8106db4:	40020428 	.word	0x40020428
 8106db8:	40020440 	.word	0x40020440
 8106dbc:	40020458 	.word	0x40020458
 8106dc0:	40020470 	.word	0x40020470
 8106dc4:	40020488 	.word	0x40020488
 8106dc8:	400204a0 	.word	0x400204a0
 8106dcc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8106dd0:	687b      	ldr	r3, [r7, #4]
 8106dd2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8106dd6:	687b      	ldr	r3, [r7, #4]
 8106dd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8106ddc:	b29b      	uxth	r3, r3
 8106dde:	1ad3      	subs	r3, r2, r3
 8106de0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8106de4:	687b      	ldr	r3, [r7, #4]
 8106de6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8106dea:	b29b      	uxth	r3, r3
 8106dec:	2b00      	cmp	r3, #0
 8106dee:	f000 80ce 	beq.w	8106f8e <HAL_UART_IRQHandler+0x72e>
          && (nb_rx_data > 0U))
 8106df2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8106df6:	2b00      	cmp	r3, #0
 8106df8:	f000 80c9 	beq.w	8106f8e <HAL_UART_IRQHandler+0x72e>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8106dfc:	687b      	ldr	r3, [r7, #4]
 8106dfe:	681b      	ldr	r3, [r3, #0]
 8106e00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106e04:	e853 3f00 	ldrex	r3, [r3]
 8106e08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8106e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106e0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8106e10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8106e14:	687b      	ldr	r3, [r7, #4]
 8106e16:	681b      	ldr	r3, [r3, #0]
 8106e18:	461a      	mov	r2, r3
 8106e1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8106e1e:	647b      	str	r3, [r7, #68]	; 0x44
 8106e20:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106e22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8106e24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8106e26:	e841 2300 	strex	r3, r2, [r1]
 8106e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8106e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8106e2e:	2b00      	cmp	r3, #0
 8106e30:	d1e4      	bne.n	8106dfc <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8106e32:	687b      	ldr	r3, [r7, #4]
 8106e34:	681b      	ldr	r3, [r3, #0]
 8106e36:	3308      	adds	r3, #8
 8106e38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106e3c:	e853 3f00 	ldrex	r3, [r3]
 8106e40:	623b      	str	r3, [r7, #32]
   return(result);
 8106e42:	6a3b      	ldr	r3, [r7, #32]
 8106e44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8106e48:	f023 0301 	bic.w	r3, r3, #1
 8106e4c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8106e50:	687b      	ldr	r3, [r7, #4]
 8106e52:	681b      	ldr	r3, [r3, #0]
 8106e54:	3308      	adds	r3, #8
 8106e56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8106e5a:	633a      	str	r2, [r7, #48]	; 0x30
 8106e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106e5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8106e60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8106e62:	e841 2300 	strex	r3, r2, [r1]
 8106e66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8106e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106e6a:	2b00      	cmp	r3, #0
 8106e6c:	d1e1      	bne.n	8106e32 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8106e6e:	687b      	ldr	r3, [r7, #4]
 8106e70:	2220      	movs	r2, #32
 8106e72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8106e76:	687b      	ldr	r3, [r7, #4]
 8106e78:	2200      	movs	r2, #0
 8106e7a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8106e7c:	687b      	ldr	r3, [r7, #4]
 8106e7e:	2200      	movs	r2, #0
 8106e80:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8106e82:	687b      	ldr	r3, [r7, #4]
 8106e84:	681b      	ldr	r3, [r3, #0]
 8106e86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106e88:	693b      	ldr	r3, [r7, #16]
 8106e8a:	e853 3f00 	ldrex	r3, [r3]
 8106e8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8106e90:	68fb      	ldr	r3, [r7, #12]
 8106e92:	f023 0310 	bic.w	r3, r3, #16
 8106e96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8106e9a:	687b      	ldr	r3, [r7, #4]
 8106e9c:	681b      	ldr	r3, [r3, #0]
 8106e9e:	461a      	mov	r2, r3
 8106ea0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8106ea4:	61fb      	str	r3, [r7, #28]
 8106ea6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106ea8:	69b9      	ldr	r1, [r7, #24]
 8106eaa:	69fa      	ldr	r2, [r7, #28]
 8106eac:	e841 2300 	strex	r3, r2, [r1]
 8106eb0:	617b      	str	r3, [r7, #20]
   return(result);
 8106eb2:	697b      	ldr	r3, [r7, #20]
 8106eb4:	2b00      	cmp	r3, #0
 8106eb6:	d1e4      	bne.n	8106e82 <HAL_UART_IRQHandler+0x622>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8106eb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8106ebc:	4619      	mov	r1, r3
 8106ebe:	6878      	ldr	r0, [r7, #4]
 8106ec0:	f000 f876 	bl	8106fb0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8106ec4:	e063      	b.n	8106f8e <HAL_UART_IRQHandler+0x72e>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8106ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8106eca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8106ece:	2b00      	cmp	r3, #0
 8106ed0:	d00e      	beq.n	8106ef0 <HAL_UART_IRQHandler+0x690>
 8106ed2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8106ed6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8106eda:	2b00      	cmp	r3, #0
 8106edc:	d008      	beq.n	8106ef0 <HAL_UART_IRQHandler+0x690>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8106ede:	687b      	ldr	r3, [r7, #4]
 8106ee0:	681b      	ldr	r3, [r3, #0]
 8106ee2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8106ee6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8106ee8:	6878      	ldr	r0, [r7, #4]
 8106eea:	f001 ff5b 	bl	8108da4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8106eee:	e051      	b.n	8106f94 <HAL_UART_IRQHandler+0x734>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8106ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8106ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8106ef8:	2b00      	cmp	r3, #0
 8106efa:	d014      	beq.n	8106f26 <HAL_UART_IRQHandler+0x6c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8106efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8106f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8106f04:	2b00      	cmp	r3, #0
 8106f06:	d105      	bne.n	8106f14 <HAL_UART_IRQHandler+0x6b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8106f08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8106f0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8106f10:	2b00      	cmp	r3, #0
 8106f12:	d008      	beq.n	8106f26 <HAL_UART_IRQHandler+0x6c6>
  {
    if (huart->TxISR != NULL)
 8106f14:	687b      	ldr	r3, [r7, #4]
 8106f16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8106f18:	2b00      	cmp	r3, #0
 8106f1a:	d03a      	beq.n	8106f92 <HAL_UART_IRQHandler+0x732>
    {
      huart->TxISR(huart);
 8106f1c:	687b      	ldr	r3, [r7, #4]
 8106f1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8106f20:	6878      	ldr	r0, [r7, #4]
 8106f22:	4798      	blx	r3
    }
    return;
 8106f24:	e035      	b.n	8106f92 <HAL_UART_IRQHandler+0x732>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8106f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8106f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106f2e:	2b00      	cmp	r3, #0
 8106f30:	d009      	beq.n	8106f46 <HAL_UART_IRQHandler+0x6e6>
 8106f32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8106f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106f3a:	2b00      	cmp	r3, #0
 8106f3c:	d003      	beq.n	8106f46 <HAL_UART_IRQHandler+0x6e6>
  {
    UART_EndTransmit_IT(huart);
 8106f3e:	6878      	ldr	r0, [r7, #4]
 8106f40:	f001 faa8 	bl	8108494 <UART_EndTransmit_IT>
    return;
 8106f44:	e026      	b.n	8106f94 <HAL_UART_IRQHandler+0x734>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8106f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8106f4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8106f4e:	2b00      	cmp	r3, #0
 8106f50:	d009      	beq.n	8106f66 <HAL_UART_IRQHandler+0x706>
 8106f52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8106f56:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8106f5a:	2b00      	cmp	r3, #0
 8106f5c:	d003      	beq.n	8106f66 <HAL_UART_IRQHandler+0x706>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8106f5e:	6878      	ldr	r0, [r7, #4]
 8106f60:	f001 ff34 	bl	8108dcc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8106f64:	e016      	b.n	8106f94 <HAL_UART_IRQHandler+0x734>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8106f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8106f6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8106f6e:	2b00      	cmp	r3, #0
 8106f70:	d010      	beq.n	8106f94 <HAL_UART_IRQHandler+0x734>
 8106f72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8106f76:	2b00      	cmp	r3, #0
 8106f78:	da0c      	bge.n	8106f94 <HAL_UART_IRQHandler+0x734>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8106f7a:	6878      	ldr	r0, [r7, #4]
 8106f7c:	f001 ff1c 	bl	8108db8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8106f80:	e008      	b.n	8106f94 <HAL_UART_IRQHandler+0x734>
      return;
 8106f82:	bf00      	nop
 8106f84:	e006      	b.n	8106f94 <HAL_UART_IRQHandler+0x734>
    return;
 8106f86:	bf00      	nop
 8106f88:	e004      	b.n	8106f94 <HAL_UART_IRQHandler+0x734>
      return;
 8106f8a:	bf00      	nop
 8106f8c:	e002      	b.n	8106f94 <HAL_UART_IRQHandler+0x734>
      return;
 8106f8e:	bf00      	nop
 8106f90:	e000      	b.n	8106f94 <HAL_UART_IRQHandler+0x734>
    return;
 8106f92:	bf00      	nop
  }
}
 8106f94:	37e8      	adds	r7, #232	; 0xe8
 8106f96:	46bd      	mov	sp, r7
 8106f98:	bd80      	pop	{r7, pc}
 8106f9a:	bf00      	nop

08106f9c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8106f9c:	b480      	push	{r7}
 8106f9e:	b083      	sub	sp, #12
 8106fa0:	af00      	add	r7, sp, #0
 8106fa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8106fa4:	bf00      	nop
 8106fa6:	370c      	adds	r7, #12
 8106fa8:	46bd      	mov	sp, r7
 8106faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106fae:	4770      	bx	lr

08106fb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8106fb0:	b480      	push	{r7}
 8106fb2:	b083      	sub	sp, #12
 8106fb4:	af00      	add	r7, sp, #0
 8106fb6:	6078      	str	r0, [r7, #4]
 8106fb8:	460b      	mov	r3, r1
 8106fba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8106fbc:	bf00      	nop
 8106fbe:	370c      	adds	r7, #12
 8106fc0:	46bd      	mov	sp, r7
 8106fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106fc6:	4770      	bx	lr

08106fc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8106fc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8106fcc:	b092      	sub	sp, #72	; 0x48
 8106fce:	af00      	add	r7, sp, #0
 8106fd0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8106fd2:	2300      	movs	r3, #0
 8106fd4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8106fd8:	697b      	ldr	r3, [r7, #20]
 8106fda:	689a      	ldr	r2, [r3, #8]
 8106fdc:	697b      	ldr	r3, [r7, #20]
 8106fde:	691b      	ldr	r3, [r3, #16]
 8106fe0:	431a      	orrs	r2, r3
 8106fe2:	697b      	ldr	r3, [r7, #20]
 8106fe4:	695b      	ldr	r3, [r3, #20]
 8106fe6:	431a      	orrs	r2, r3
 8106fe8:	697b      	ldr	r3, [r7, #20]
 8106fea:	69db      	ldr	r3, [r3, #28]
 8106fec:	4313      	orrs	r3, r2
 8106fee:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8106ff0:	697b      	ldr	r3, [r7, #20]
 8106ff2:	681b      	ldr	r3, [r3, #0]
 8106ff4:	681a      	ldr	r2, [r3, #0]
 8106ff6:	4bbd      	ldr	r3, [pc, #756]	; (81072ec <UART_SetConfig+0x324>)
 8106ff8:	4013      	ands	r3, r2
 8106ffa:	697a      	ldr	r2, [r7, #20]
 8106ffc:	6812      	ldr	r2, [r2, #0]
 8106ffe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8107000:	430b      	orrs	r3, r1
 8107002:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8107004:	697b      	ldr	r3, [r7, #20]
 8107006:	681b      	ldr	r3, [r3, #0]
 8107008:	685b      	ldr	r3, [r3, #4]
 810700a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 810700e:	697b      	ldr	r3, [r7, #20]
 8107010:	68da      	ldr	r2, [r3, #12]
 8107012:	697b      	ldr	r3, [r7, #20]
 8107014:	681b      	ldr	r3, [r3, #0]
 8107016:	430a      	orrs	r2, r1
 8107018:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 810701a:	697b      	ldr	r3, [r7, #20]
 810701c:	699b      	ldr	r3, [r3, #24]
 810701e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8107020:	697b      	ldr	r3, [r7, #20]
 8107022:	681b      	ldr	r3, [r3, #0]
 8107024:	4ab2      	ldr	r2, [pc, #712]	; (81072f0 <UART_SetConfig+0x328>)
 8107026:	4293      	cmp	r3, r2
 8107028:	d004      	beq.n	8107034 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 810702a:	697b      	ldr	r3, [r7, #20]
 810702c:	6a1b      	ldr	r3, [r3, #32]
 810702e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8107030:	4313      	orrs	r3, r2
 8107032:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8107034:	697b      	ldr	r3, [r7, #20]
 8107036:	681b      	ldr	r3, [r3, #0]
 8107038:	689b      	ldr	r3, [r3, #8]
 810703a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 810703e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8107042:	697a      	ldr	r2, [r7, #20]
 8107044:	6812      	ldr	r2, [r2, #0]
 8107046:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8107048:	430b      	orrs	r3, r1
 810704a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 810704c:	697b      	ldr	r3, [r7, #20]
 810704e:	681b      	ldr	r3, [r3, #0]
 8107050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107052:	f023 010f 	bic.w	r1, r3, #15
 8107056:	697b      	ldr	r3, [r7, #20]
 8107058:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 810705a:	697b      	ldr	r3, [r7, #20]
 810705c:	681b      	ldr	r3, [r3, #0]
 810705e:	430a      	orrs	r2, r1
 8107060:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8107062:	697b      	ldr	r3, [r7, #20]
 8107064:	681b      	ldr	r3, [r3, #0]
 8107066:	4aa3      	ldr	r2, [pc, #652]	; (81072f4 <UART_SetConfig+0x32c>)
 8107068:	4293      	cmp	r3, r2
 810706a:	d177      	bne.n	810715c <UART_SetConfig+0x194>
 810706c:	4ba2      	ldr	r3, [pc, #648]	; (81072f8 <UART_SetConfig+0x330>)
 810706e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107070:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8107074:	2b28      	cmp	r3, #40	; 0x28
 8107076:	d86d      	bhi.n	8107154 <UART_SetConfig+0x18c>
 8107078:	a201      	add	r2, pc, #4	; (adr r2, 8107080 <UART_SetConfig+0xb8>)
 810707a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810707e:	bf00      	nop
 8107080:	08107125 	.word	0x08107125
 8107084:	08107155 	.word	0x08107155
 8107088:	08107155 	.word	0x08107155
 810708c:	08107155 	.word	0x08107155
 8107090:	08107155 	.word	0x08107155
 8107094:	08107155 	.word	0x08107155
 8107098:	08107155 	.word	0x08107155
 810709c:	08107155 	.word	0x08107155
 81070a0:	0810712d 	.word	0x0810712d
 81070a4:	08107155 	.word	0x08107155
 81070a8:	08107155 	.word	0x08107155
 81070ac:	08107155 	.word	0x08107155
 81070b0:	08107155 	.word	0x08107155
 81070b4:	08107155 	.word	0x08107155
 81070b8:	08107155 	.word	0x08107155
 81070bc:	08107155 	.word	0x08107155
 81070c0:	08107135 	.word	0x08107135
 81070c4:	08107155 	.word	0x08107155
 81070c8:	08107155 	.word	0x08107155
 81070cc:	08107155 	.word	0x08107155
 81070d0:	08107155 	.word	0x08107155
 81070d4:	08107155 	.word	0x08107155
 81070d8:	08107155 	.word	0x08107155
 81070dc:	08107155 	.word	0x08107155
 81070e0:	0810713d 	.word	0x0810713d
 81070e4:	08107155 	.word	0x08107155
 81070e8:	08107155 	.word	0x08107155
 81070ec:	08107155 	.word	0x08107155
 81070f0:	08107155 	.word	0x08107155
 81070f4:	08107155 	.word	0x08107155
 81070f8:	08107155 	.word	0x08107155
 81070fc:	08107155 	.word	0x08107155
 8107100:	08107145 	.word	0x08107145
 8107104:	08107155 	.word	0x08107155
 8107108:	08107155 	.word	0x08107155
 810710c:	08107155 	.word	0x08107155
 8107110:	08107155 	.word	0x08107155
 8107114:	08107155 	.word	0x08107155
 8107118:	08107155 	.word	0x08107155
 810711c:	08107155 	.word	0x08107155
 8107120:	0810714d 	.word	0x0810714d
 8107124:	2301      	movs	r3, #1
 8107126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810712a:	e220      	b.n	810756e <UART_SetConfig+0x5a6>
 810712c:	2304      	movs	r3, #4
 810712e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107132:	e21c      	b.n	810756e <UART_SetConfig+0x5a6>
 8107134:	2308      	movs	r3, #8
 8107136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810713a:	e218      	b.n	810756e <UART_SetConfig+0x5a6>
 810713c:	2310      	movs	r3, #16
 810713e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107142:	e214      	b.n	810756e <UART_SetConfig+0x5a6>
 8107144:	2320      	movs	r3, #32
 8107146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810714a:	e210      	b.n	810756e <UART_SetConfig+0x5a6>
 810714c:	2340      	movs	r3, #64	; 0x40
 810714e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107152:	e20c      	b.n	810756e <UART_SetConfig+0x5a6>
 8107154:	2380      	movs	r3, #128	; 0x80
 8107156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810715a:	e208      	b.n	810756e <UART_SetConfig+0x5a6>
 810715c:	697b      	ldr	r3, [r7, #20]
 810715e:	681b      	ldr	r3, [r3, #0]
 8107160:	4a66      	ldr	r2, [pc, #408]	; (81072fc <UART_SetConfig+0x334>)
 8107162:	4293      	cmp	r3, r2
 8107164:	d130      	bne.n	81071c8 <UART_SetConfig+0x200>
 8107166:	4b64      	ldr	r3, [pc, #400]	; (81072f8 <UART_SetConfig+0x330>)
 8107168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810716a:	f003 0307 	and.w	r3, r3, #7
 810716e:	2b05      	cmp	r3, #5
 8107170:	d826      	bhi.n	81071c0 <UART_SetConfig+0x1f8>
 8107172:	a201      	add	r2, pc, #4	; (adr r2, 8107178 <UART_SetConfig+0x1b0>)
 8107174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107178:	08107191 	.word	0x08107191
 810717c:	08107199 	.word	0x08107199
 8107180:	081071a1 	.word	0x081071a1
 8107184:	081071a9 	.word	0x081071a9
 8107188:	081071b1 	.word	0x081071b1
 810718c:	081071b9 	.word	0x081071b9
 8107190:	2300      	movs	r3, #0
 8107192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107196:	e1ea      	b.n	810756e <UART_SetConfig+0x5a6>
 8107198:	2304      	movs	r3, #4
 810719a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810719e:	e1e6      	b.n	810756e <UART_SetConfig+0x5a6>
 81071a0:	2308      	movs	r3, #8
 81071a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81071a6:	e1e2      	b.n	810756e <UART_SetConfig+0x5a6>
 81071a8:	2310      	movs	r3, #16
 81071aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81071ae:	e1de      	b.n	810756e <UART_SetConfig+0x5a6>
 81071b0:	2320      	movs	r3, #32
 81071b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81071b6:	e1da      	b.n	810756e <UART_SetConfig+0x5a6>
 81071b8:	2340      	movs	r3, #64	; 0x40
 81071ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81071be:	e1d6      	b.n	810756e <UART_SetConfig+0x5a6>
 81071c0:	2380      	movs	r3, #128	; 0x80
 81071c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81071c6:	e1d2      	b.n	810756e <UART_SetConfig+0x5a6>
 81071c8:	697b      	ldr	r3, [r7, #20]
 81071ca:	681b      	ldr	r3, [r3, #0]
 81071cc:	4a4c      	ldr	r2, [pc, #304]	; (8107300 <UART_SetConfig+0x338>)
 81071ce:	4293      	cmp	r3, r2
 81071d0:	d130      	bne.n	8107234 <UART_SetConfig+0x26c>
 81071d2:	4b49      	ldr	r3, [pc, #292]	; (81072f8 <UART_SetConfig+0x330>)
 81071d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81071d6:	f003 0307 	and.w	r3, r3, #7
 81071da:	2b05      	cmp	r3, #5
 81071dc:	d826      	bhi.n	810722c <UART_SetConfig+0x264>
 81071de:	a201      	add	r2, pc, #4	; (adr r2, 81071e4 <UART_SetConfig+0x21c>)
 81071e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81071e4:	081071fd 	.word	0x081071fd
 81071e8:	08107205 	.word	0x08107205
 81071ec:	0810720d 	.word	0x0810720d
 81071f0:	08107215 	.word	0x08107215
 81071f4:	0810721d 	.word	0x0810721d
 81071f8:	08107225 	.word	0x08107225
 81071fc:	2300      	movs	r3, #0
 81071fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107202:	e1b4      	b.n	810756e <UART_SetConfig+0x5a6>
 8107204:	2304      	movs	r3, #4
 8107206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810720a:	e1b0      	b.n	810756e <UART_SetConfig+0x5a6>
 810720c:	2308      	movs	r3, #8
 810720e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107212:	e1ac      	b.n	810756e <UART_SetConfig+0x5a6>
 8107214:	2310      	movs	r3, #16
 8107216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810721a:	e1a8      	b.n	810756e <UART_SetConfig+0x5a6>
 810721c:	2320      	movs	r3, #32
 810721e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107222:	e1a4      	b.n	810756e <UART_SetConfig+0x5a6>
 8107224:	2340      	movs	r3, #64	; 0x40
 8107226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810722a:	e1a0      	b.n	810756e <UART_SetConfig+0x5a6>
 810722c:	2380      	movs	r3, #128	; 0x80
 810722e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107232:	e19c      	b.n	810756e <UART_SetConfig+0x5a6>
 8107234:	697b      	ldr	r3, [r7, #20]
 8107236:	681b      	ldr	r3, [r3, #0]
 8107238:	4a32      	ldr	r2, [pc, #200]	; (8107304 <UART_SetConfig+0x33c>)
 810723a:	4293      	cmp	r3, r2
 810723c:	d130      	bne.n	81072a0 <UART_SetConfig+0x2d8>
 810723e:	4b2e      	ldr	r3, [pc, #184]	; (81072f8 <UART_SetConfig+0x330>)
 8107240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107242:	f003 0307 	and.w	r3, r3, #7
 8107246:	2b05      	cmp	r3, #5
 8107248:	d826      	bhi.n	8107298 <UART_SetConfig+0x2d0>
 810724a:	a201      	add	r2, pc, #4	; (adr r2, 8107250 <UART_SetConfig+0x288>)
 810724c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107250:	08107269 	.word	0x08107269
 8107254:	08107271 	.word	0x08107271
 8107258:	08107279 	.word	0x08107279
 810725c:	08107281 	.word	0x08107281
 8107260:	08107289 	.word	0x08107289
 8107264:	08107291 	.word	0x08107291
 8107268:	2300      	movs	r3, #0
 810726a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810726e:	e17e      	b.n	810756e <UART_SetConfig+0x5a6>
 8107270:	2304      	movs	r3, #4
 8107272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107276:	e17a      	b.n	810756e <UART_SetConfig+0x5a6>
 8107278:	2308      	movs	r3, #8
 810727a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810727e:	e176      	b.n	810756e <UART_SetConfig+0x5a6>
 8107280:	2310      	movs	r3, #16
 8107282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107286:	e172      	b.n	810756e <UART_SetConfig+0x5a6>
 8107288:	2320      	movs	r3, #32
 810728a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810728e:	e16e      	b.n	810756e <UART_SetConfig+0x5a6>
 8107290:	2340      	movs	r3, #64	; 0x40
 8107292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107296:	e16a      	b.n	810756e <UART_SetConfig+0x5a6>
 8107298:	2380      	movs	r3, #128	; 0x80
 810729a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810729e:	e166      	b.n	810756e <UART_SetConfig+0x5a6>
 81072a0:	697b      	ldr	r3, [r7, #20]
 81072a2:	681b      	ldr	r3, [r3, #0]
 81072a4:	4a18      	ldr	r2, [pc, #96]	; (8107308 <UART_SetConfig+0x340>)
 81072a6:	4293      	cmp	r3, r2
 81072a8:	d140      	bne.n	810732c <UART_SetConfig+0x364>
 81072aa:	4b13      	ldr	r3, [pc, #76]	; (81072f8 <UART_SetConfig+0x330>)
 81072ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81072ae:	f003 0307 	and.w	r3, r3, #7
 81072b2:	2b05      	cmp	r3, #5
 81072b4:	d836      	bhi.n	8107324 <UART_SetConfig+0x35c>
 81072b6:	a201      	add	r2, pc, #4	; (adr r2, 81072bc <UART_SetConfig+0x2f4>)
 81072b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81072bc:	081072d5 	.word	0x081072d5
 81072c0:	081072dd 	.word	0x081072dd
 81072c4:	081072e5 	.word	0x081072e5
 81072c8:	0810730d 	.word	0x0810730d
 81072cc:	08107315 	.word	0x08107315
 81072d0:	0810731d 	.word	0x0810731d
 81072d4:	2300      	movs	r3, #0
 81072d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81072da:	e148      	b.n	810756e <UART_SetConfig+0x5a6>
 81072dc:	2304      	movs	r3, #4
 81072de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81072e2:	e144      	b.n	810756e <UART_SetConfig+0x5a6>
 81072e4:	2308      	movs	r3, #8
 81072e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81072ea:	e140      	b.n	810756e <UART_SetConfig+0x5a6>
 81072ec:	cfff69f3 	.word	0xcfff69f3
 81072f0:	58000c00 	.word	0x58000c00
 81072f4:	40011000 	.word	0x40011000
 81072f8:	58024400 	.word	0x58024400
 81072fc:	40004400 	.word	0x40004400
 8107300:	40004800 	.word	0x40004800
 8107304:	40004c00 	.word	0x40004c00
 8107308:	40005000 	.word	0x40005000
 810730c:	2310      	movs	r3, #16
 810730e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107312:	e12c      	b.n	810756e <UART_SetConfig+0x5a6>
 8107314:	2320      	movs	r3, #32
 8107316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810731a:	e128      	b.n	810756e <UART_SetConfig+0x5a6>
 810731c:	2340      	movs	r3, #64	; 0x40
 810731e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107322:	e124      	b.n	810756e <UART_SetConfig+0x5a6>
 8107324:	2380      	movs	r3, #128	; 0x80
 8107326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810732a:	e120      	b.n	810756e <UART_SetConfig+0x5a6>
 810732c:	697b      	ldr	r3, [r7, #20]
 810732e:	681b      	ldr	r3, [r3, #0]
 8107330:	4acb      	ldr	r2, [pc, #812]	; (8107660 <UART_SetConfig+0x698>)
 8107332:	4293      	cmp	r3, r2
 8107334:	d176      	bne.n	8107424 <UART_SetConfig+0x45c>
 8107336:	4bcb      	ldr	r3, [pc, #812]	; (8107664 <UART_SetConfig+0x69c>)
 8107338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810733a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810733e:	2b28      	cmp	r3, #40	; 0x28
 8107340:	d86c      	bhi.n	810741c <UART_SetConfig+0x454>
 8107342:	a201      	add	r2, pc, #4	; (adr r2, 8107348 <UART_SetConfig+0x380>)
 8107344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107348:	081073ed 	.word	0x081073ed
 810734c:	0810741d 	.word	0x0810741d
 8107350:	0810741d 	.word	0x0810741d
 8107354:	0810741d 	.word	0x0810741d
 8107358:	0810741d 	.word	0x0810741d
 810735c:	0810741d 	.word	0x0810741d
 8107360:	0810741d 	.word	0x0810741d
 8107364:	0810741d 	.word	0x0810741d
 8107368:	081073f5 	.word	0x081073f5
 810736c:	0810741d 	.word	0x0810741d
 8107370:	0810741d 	.word	0x0810741d
 8107374:	0810741d 	.word	0x0810741d
 8107378:	0810741d 	.word	0x0810741d
 810737c:	0810741d 	.word	0x0810741d
 8107380:	0810741d 	.word	0x0810741d
 8107384:	0810741d 	.word	0x0810741d
 8107388:	081073fd 	.word	0x081073fd
 810738c:	0810741d 	.word	0x0810741d
 8107390:	0810741d 	.word	0x0810741d
 8107394:	0810741d 	.word	0x0810741d
 8107398:	0810741d 	.word	0x0810741d
 810739c:	0810741d 	.word	0x0810741d
 81073a0:	0810741d 	.word	0x0810741d
 81073a4:	0810741d 	.word	0x0810741d
 81073a8:	08107405 	.word	0x08107405
 81073ac:	0810741d 	.word	0x0810741d
 81073b0:	0810741d 	.word	0x0810741d
 81073b4:	0810741d 	.word	0x0810741d
 81073b8:	0810741d 	.word	0x0810741d
 81073bc:	0810741d 	.word	0x0810741d
 81073c0:	0810741d 	.word	0x0810741d
 81073c4:	0810741d 	.word	0x0810741d
 81073c8:	0810740d 	.word	0x0810740d
 81073cc:	0810741d 	.word	0x0810741d
 81073d0:	0810741d 	.word	0x0810741d
 81073d4:	0810741d 	.word	0x0810741d
 81073d8:	0810741d 	.word	0x0810741d
 81073dc:	0810741d 	.word	0x0810741d
 81073e0:	0810741d 	.word	0x0810741d
 81073e4:	0810741d 	.word	0x0810741d
 81073e8:	08107415 	.word	0x08107415
 81073ec:	2301      	movs	r3, #1
 81073ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81073f2:	e0bc      	b.n	810756e <UART_SetConfig+0x5a6>
 81073f4:	2304      	movs	r3, #4
 81073f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81073fa:	e0b8      	b.n	810756e <UART_SetConfig+0x5a6>
 81073fc:	2308      	movs	r3, #8
 81073fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107402:	e0b4      	b.n	810756e <UART_SetConfig+0x5a6>
 8107404:	2310      	movs	r3, #16
 8107406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810740a:	e0b0      	b.n	810756e <UART_SetConfig+0x5a6>
 810740c:	2320      	movs	r3, #32
 810740e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107412:	e0ac      	b.n	810756e <UART_SetConfig+0x5a6>
 8107414:	2340      	movs	r3, #64	; 0x40
 8107416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810741a:	e0a8      	b.n	810756e <UART_SetConfig+0x5a6>
 810741c:	2380      	movs	r3, #128	; 0x80
 810741e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107422:	e0a4      	b.n	810756e <UART_SetConfig+0x5a6>
 8107424:	697b      	ldr	r3, [r7, #20]
 8107426:	681b      	ldr	r3, [r3, #0]
 8107428:	4a8f      	ldr	r2, [pc, #572]	; (8107668 <UART_SetConfig+0x6a0>)
 810742a:	4293      	cmp	r3, r2
 810742c:	d130      	bne.n	8107490 <UART_SetConfig+0x4c8>
 810742e:	4b8d      	ldr	r3, [pc, #564]	; (8107664 <UART_SetConfig+0x69c>)
 8107430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107432:	f003 0307 	and.w	r3, r3, #7
 8107436:	2b05      	cmp	r3, #5
 8107438:	d826      	bhi.n	8107488 <UART_SetConfig+0x4c0>
 810743a:	a201      	add	r2, pc, #4	; (adr r2, 8107440 <UART_SetConfig+0x478>)
 810743c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107440:	08107459 	.word	0x08107459
 8107444:	08107461 	.word	0x08107461
 8107448:	08107469 	.word	0x08107469
 810744c:	08107471 	.word	0x08107471
 8107450:	08107479 	.word	0x08107479
 8107454:	08107481 	.word	0x08107481
 8107458:	2300      	movs	r3, #0
 810745a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810745e:	e086      	b.n	810756e <UART_SetConfig+0x5a6>
 8107460:	2304      	movs	r3, #4
 8107462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107466:	e082      	b.n	810756e <UART_SetConfig+0x5a6>
 8107468:	2308      	movs	r3, #8
 810746a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810746e:	e07e      	b.n	810756e <UART_SetConfig+0x5a6>
 8107470:	2310      	movs	r3, #16
 8107472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107476:	e07a      	b.n	810756e <UART_SetConfig+0x5a6>
 8107478:	2320      	movs	r3, #32
 810747a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810747e:	e076      	b.n	810756e <UART_SetConfig+0x5a6>
 8107480:	2340      	movs	r3, #64	; 0x40
 8107482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107486:	e072      	b.n	810756e <UART_SetConfig+0x5a6>
 8107488:	2380      	movs	r3, #128	; 0x80
 810748a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810748e:	e06e      	b.n	810756e <UART_SetConfig+0x5a6>
 8107490:	697b      	ldr	r3, [r7, #20]
 8107492:	681b      	ldr	r3, [r3, #0]
 8107494:	4a75      	ldr	r2, [pc, #468]	; (810766c <UART_SetConfig+0x6a4>)
 8107496:	4293      	cmp	r3, r2
 8107498:	d130      	bne.n	81074fc <UART_SetConfig+0x534>
 810749a:	4b72      	ldr	r3, [pc, #456]	; (8107664 <UART_SetConfig+0x69c>)
 810749c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810749e:	f003 0307 	and.w	r3, r3, #7
 81074a2:	2b05      	cmp	r3, #5
 81074a4:	d826      	bhi.n	81074f4 <UART_SetConfig+0x52c>
 81074a6:	a201      	add	r2, pc, #4	; (adr r2, 81074ac <UART_SetConfig+0x4e4>)
 81074a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81074ac:	081074c5 	.word	0x081074c5
 81074b0:	081074cd 	.word	0x081074cd
 81074b4:	081074d5 	.word	0x081074d5
 81074b8:	081074dd 	.word	0x081074dd
 81074bc:	081074e5 	.word	0x081074e5
 81074c0:	081074ed 	.word	0x081074ed
 81074c4:	2300      	movs	r3, #0
 81074c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81074ca:	e050      	b.n	810756e <UART_SetConfig+0x5a6>
 81074cc:	2304      	movs	r3, #4
 81074ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81074d2:	e04c      	b.n	810756e <UART_SetConfig+0x5a6>
 81074d4:	2308      	movs	r3, #8
 81074d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81074da:	e048      	b.n	810756e <UART_SetConfig+0x5a6>
 81074dc:	2310      	movs	r3, #16
 81074de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81074e2:	e044      	b.n	810756e <UART_SetConfig+0x5a6>
 81074e4:	2320      	movs	r3, #32
 81074e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81074ea:	e040      	b.n	810756e <UART_SetConfig+0x5a6>
 81074ec:	2340      	movs	r3, #64	; 0x40
 81074ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81074f2:	e03c      	b.n	810756e <UART_SetConfig+0x5a6>
 81074f4:	2380      	movs	r3, #128	; 0x80
 81074f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81074fa:	e038      	b.n	810756e <UART_SetConfig+0x5a6>
 81074fc:	697b      	ldr	r3, [r7, #20]
 81074fe:	681b      	ldr	r3, [r3, #0]
 8107500:	4a5b      	ldr	r2, [pc, #364]	; (8107670 <UART_SetConfig+0x6a8>)
 8107502:	4293      	cmp	r3, r2
 8107504:	d130      	bne.n	8107568 <UART_SetConfig+0x5a0>
 8107506:	4b57      	ldr	r3, [pc, #348]	; (8107664 <UART_SetConfig+0x69c>)
 8107508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810750a:	f003 0307 	and.w	r3, r3, #7
 810750e:	2b05      	cmp	r3, #5
 8107510:	d826      	bhi.n	8107560 <UART_SetConfig+0x598>
 8107512:	a201      	add	r2, pc, #4	; (adr r2, 8107518 <UART_SetConfig+0x550>)
 8107514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107518:	08107531 	.word	0x08107531
 810751c:	08107539 	.word	0x08107539
 8107520:	08107541 	.word	0x08107541
 8107524:	08107549 	.word	0x08107549
 8107528:	08107551 	.word	0x08107551
 810752c:	08107559 	.word	0x08107559
 8107530:	2302      	movs	r3, #2
 8107532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107536:	e01a      	b.n	810756e <UART_SetConfig+0x5a6>
 8107538:	2304      	movs	r3, #4
 810753a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810753e:	e016      	b.n	810756e <UART_SetConfig+0x5a6>
 8107540:	2308      	movs	r3, #8
 8107542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107546:	e012      	b.n	810756e <UART_SetConfig+0x5a6>
 8107548:	2310      	movs	r3, #16
 810754a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810754e:	e00e      	b.n	810756e <UART_SetConfig+0x5a6>
 8107550:	2320      	movs	r3, #32
 8107552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107556:	e00a      	b.n	810756e <UART_SetConfig+0x5a6>
 8107558:	2340      	movs	r3, #64	; 0x40
 810755a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810755e:	e006      	b.n	810756e <UART_SetConfig+0x5a6>
 8107560:	2380      	movs	r3, #128	; 0x80
 8107562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107566:	e002      	b.n	810756e <UART_SetConfig+0x5a6>
 8107568:	2380      	movs	r3, #128	; 0x80
 810756a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810756e:	697b      	ldr	r3, [r7, #20]
 8107570:	681b      	ldr	r3, [r3, #0]
 8107572:	4a3f      	ldr	r2, [pc, #252]	; (8107670 <UART_SetConfig+0x6a8>)
 8107574:	4293      	cmp	r3, r2
 8107576:	f040 80f8 	bne.w	810776a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 810757a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 810757e:	2b20      	cmp	r3, #32
 8107580:	dc46      	bgt.n	8107610 <UART_SetConfig+0x648>
 8107582:	2b02      	cmp	r3, #2
 8107584:	f2c0 8082 	blt.w	810768c <UART_SetConfig+0x6c4>
 8107588:	3b02      	subs	r3, #2
 810758a:	2b1e      	cmp	r3, #30
 810758c:	d87e      	bhi.n	810768c <UART_SetConfig+0x6c4>
 810758e:	a201      	add	r2, pc, #4	; (adr r2, 8107594 <UART_SetConfig+0x5cc>)
 8107590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107594:	08107617 	.word	0x08107617
 8107598:	0810768d 	.word	0x0810768d
 810759c:	0810761f 	.word	0x0810761f
 81075a0:	0810768d 	.word	0x0810768d
 81075a4:	0810768d 	.word	0x0810768d
 81075a8:	0810768d 	.word	0x0810768d
 81075ac:	0810762f 	.word	0x0810762f
 81075b0:	0810768d 	.word	0x0810768d
 81075b4:	0810768d 	.word	0x0810768d
 81075b8:	0810768d 	.word	0x0810768d
 81075bc:	0810768d 	.word	0x0810768d
 81075c0:	0810768d 	.word	0x0810768d
 81075c4:	0810768d 	.word	0x0810768d
 81075c8:	0810768d 	.word	0x0810768d
 81075cc:	0810763f 	.word	0x0810763f
 81075d0:	0810768d 	.word	0x0810768d
 81075d4:	0810768d 	.word	0x0810768d
 81075d8:	0810768d 	.word	0x0810768d
 81075dc:	0810768d 	.word	0x0810768d
 81075e0:	0810768d 	.word	0x0810768d
 81075e4:	0810768d 	.word	0x0810768d
 81075e8:	0810768d 	.word	0x0810768d
 81075ec:	0810768d 	.word	0x0810768d
 81075f0:	0810768d 	.word	0x0810768d
 81075f4:	0810768d 	.word	0x0810768d
 81075f8:	0810768d 	.word	0x0810768d
 81075fc:	0810768d 	.word	0x0810768d
 8107600:	0810768d 	.word	0x0810768d
 8107604:	0810768d 	.word	0x0810768d
 8107608:	0810768d 	.word	0x0810768d
 810760c:	0810767f 	.word	0x0810767f
 8107610:	2b40      	cmp	r3, #64	; 0x40
 8107612:	d037      	beq.n	8107684 <UART_SetConfig+0x6bc>
 8107614:	e03a      	b.n	810768c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8107616:	f7fd f941 	bl	810489c <HAL_RCCEx_GetD3PCLK1Freq>
 810761a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810761c:	e03c      	b.n	8107698 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810761e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8107622:	4618      	mov	r0, r3
 8107624:	f7fd f950 	bl	81048c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8107628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810762a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810762c:	e034      	b.n	8107698 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810762e:	f107 0318 	add.w	r3, r7, #24
 8107632:	4618      	mov	r0, r3
 8107634:	f7fd fa9c 	bl	8104b70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8107638:	69fb      	ldr	r3, [r7, #28]
 810763a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810763c:	e02c      	b.n	8107698 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810763e:	4b09      	ldr	r3, [pc, #36]	; (8107664 <UART_SetConfig+0x69c>)
 8107640:	681b      	ldr	r3, [r3, #0]
 8107642:	f003 0320 	and.w	r3, r3, #32
 8107646:	2b00      	cmp	r3, #0
 8107648:	d016      	beq.n	8107678 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810764a:	4b06      	ldr	r3, [pc, #24]	; (8107664 <UART_SetConfig+0x69c>)
 810764c:	681b      	ldr	r3, [r3, #0]
 810764e:	08db      	lsrs	r3, r3, #3
 8107650:	f003 0303 	and.w	r3, r3, #3
 8107654:	4a07      	ldr	r2, [pc, #28]	; (8107674 <UART_SetConfig+0x6ac>)
 8107656:	fa22 f303 	lsr.w	r3, r2, r3
 810765a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810765c:	e01c      	b.n	8107698 <UART_SetConfig+0x6d0>
 810765e:	bf00      	nop
 8107660:	40011400 	.word	0x40011400
 8107664:	58024400 	.word	0x58024400
 8107668:	40007800 	.word	0x40007800
 810766c:	40007c00 	.word	0x40007c00
 8107670:	58000c00 	.word	0x58000c00
 8107674:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8107678:	4b9d      	ldr	r3, [pc, #628]	; (81078f0 <UART_SetConfig+0x928>)
 810767a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810767c:	e00c      	b.n	8107698 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810767e:	4b9d      	ldr	r3, [pc, #628]	; (81078f4 <UART_SetConfig+0x92c>)
 8107680:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107682:	e009      	b.n	8107698 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8107684:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8107688:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810768a:	e005      	b.n	8107698 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 810768c:	2300      	movs	r3, #0
 810768e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8107690:	2301      	movs	r3, #1
 8107692:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8107696:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8107698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810769a:	2b00      	cmp	r3, #0
 810769c:	f000 81de 	beq.w	8107a5c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 81076a0:	697b      	ldr	r3, [r7, #20]
 81076a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81076a4:	4a94      	ldr	r2, [pc, #592]	; (81078f8 <UART_SetConfig+0x930>)
 81076a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81076aa:	461a      	mov	r2, r3
 81076ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81076ae:	fbb3 f3f2 	udiv	r3, r3, r2
 81076b2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 81076b4:	697b      	ldr	r3, [r7, #20]
 81076b6:	685a      	ldr	r2, [r3, #4]
 81076b8:	4613      	mov	r3, r2
 81076ba:	005b      	lsls	r3, r3, #1
 81076bc:	4413      	add	r3, r2
 81076be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81076c0:	429a      	cmp	r2, r3
 81076c2:	d305      	bcc.n	81076d0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 81076c4:	697b      	ldr	r3, [r7, #20]
 81076c6:	685b      	ldr	r3, [r3, #4]
 81076c8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 81076ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81076cc:	429a      	cmp	r2, r3
 81076ce:	d903      	bls.n	81076d8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 81076d0:	2301      	movs	r3, #1
 81076d2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 81076d6:	e1c1      	b.n	8107a5c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81076d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81076da:	2200      	movs	r2, #0
 81076dc:	60bb      	str	r3, [r7, #8]
 81076de:	60fa      	str	r2, [r7, #12]
 81076e0:	697b      	ldr	r3, [r7, #20]
 81076e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81076e4:	4a84      	ldr	r2, [pc, #528]	; (81078f8 <UART_SetConfig+0x930>)
 81076e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81076ea:	b29b      	uxth	r3, r3
 81076ec:	2200      	movs	r2, #0
 81076ee:	603b      	str	r3, [r7, #0]
 81076f0:	607a      	str	r2, [r7, #4]
 81076f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 81076f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 81076fa:	f7f9 fb4d 	bl	8100d98 <__aeabi_uldivmod>
 81076fe:	4602      	mov	r2, r0
 8107700:	460b      	mov	r3, r1
 8107702:	4610      	mov	r0, r2
 8107704:	4619      	mov	r1, r3
 8107706:	f04f 0200 	mov.w	r2, #0
 810770a:	f04f 0300 	mov.w	r3, #0
 810770e:	020b      	lsls	r3, r1, #8
 8107710:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8107714:	0202      	lsls	r2, r0, #8
 8107716:	6979      	ldr	r1, [r7, #20]
 8107718:	6849      	ldr	r1, [r1, #4]
 810771a:	0849      	lsrs	r1, r1, #1
 810771c:	2000      	movs	r0, #0
 810771e:	460c      	mov	r4, r1
 8107720:	4605      	mov	r5, r0
 8107722:	eb12 0804 	adds.w	r8, r2, r4
 8107726:	eb43 0905 	adc.w	r9, r3, r5
 810772a:	697b      	ldr	r3, [r7, #20]
 810772c:	685b      	ldr	r3, [r3, #4]
 810772e:	2200      	movs	r2, #0
 8107730:	469a      	mov	sl, r3
 8107732:	4693      	mov	fp, r2
 8107734:	4652      	mov	r2, sl
 8107736:	465b      	mov	r3, fp
 8107738:	4640      	mov	r0, r8
 810773a:	4649      	mov	r1, r9
 810773c:	f7f9 fb2c 	bl	8100d98 <__aeabi_uldivmod>
 8107740:	4602      	mov	r2, r0
 8107742:	460b      	mov	r3, r1
 8107744:	4613      	mov	r3, r2
 8107746:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8107748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810774a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810774e:	d308      	bcc.n	8107762 <UART_SetConfig+0x79a>
 8107750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107752:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8107756:	d204      	bcs.n	8107762 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8107758:	697b      	ldr	r3, [r7, #20]
 810775a:	681b      	ldr	r3, [r3, #0]
 810775c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 810775e:	60da      	str	r2, [r3, #12]
 8107760:	e17c      	b.n	8107a5c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8107762:	2301      	movs	r3, #1
 8107764:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8107768:	e178      	b.n	8107a5c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 810776a:	697b      	ldr	r3, [r7, #20]
 810776c:	69db      	ldr	r3, [r3, #28]
 810776e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8107772:	f040 80c5 	bne.w	8107900 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8107776:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 810777a:	2b20      	cmp	r3, #32
 810777c:	dc48      	bgt.n	8107810 <UART_SetConfig+0x848>
 810777e:	2b00      	cmp	r3, #0
 8107780:	db7b      	blt.n	810787a <UART_SetConfig+0x8b2>
 8107782:	2b20      	cmp	r3, #32
 8107784:	d879      	bhi.n	810787a <UART_SetConfig+0x8b2>
 8107786:	a201      	add	r2, pc, #4	; (adr r2, 810778c <UART_SetConfig+0x7c4>)
 8107788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810778c:	08107817 	.word	0x08107817
 8107790:	0810781f 	.word	0x0810781f
 8107794:	0810787b 	.word	0x0810787b
 8107798:	0810787b 	.word	0x0810787b
 810779c:	08107827 	.word	0x08107827
 81077a0:	0810787b 	.word	0x0810787b
 81077a4:	0810787b 	.word	0x0810787b
 81077a8:	0810787b 	.word	0x0810787b
 81077ac:	08107837 	.word	0x08107837
 81077b0:	0810787b 	.word	0x0810787b
 81077b4:	0810787b 	.word	0x0810787b
 81077b8:	0810787b 	.word	0x0810787b
 81077bc:	0810787b 	.word	0x0810787b
 81077c0:	0810787b 	.word	0x0810787b
 81077c4:	0810787b 	.word	0x0810787b
 81077c8:	0810787b 	.word	0x0810787b
 81077cc:	08107847 	.word	0x08107847
 81077d0:	0810787b 	.word	0x0810787b
 81077d4:	0810787b 	.word	0x0810787b
 81077d8:	0810787b 	.word	0x0810787b
 81077dc:	0810787b 	.word	0x0810787b
 81077e0:	0810787b 	.word	0x0810787b
 81077e4:	0810787b 	.word	0x0810787b
 81077e8:	0810787b 	.word	0x0810787b
 81077ec:	0810787b 	.word	0x0810787b
 81077f0:	0810787b 	.word	0x0810787b
 81077f4:	0810787b 	.word	0x0810787b
 81077f8:	0810787b 	.word	0x0810787b
 81077fc:	0810787b 	.word	0x0810787b
 8107800:	0810787b 	.word	0x0810787b
 8107804:	0810787b 	.word	0x0810787b
 8107808:	0810787b 	.word	0x0810787b
 810780c:	0810786d 	.word	0x0810786d
 8107810:	2b40      	cmp	r3, #64	; 0x40
 8107812:	d02e      	beq.n	8107872 <UART_SetConfig+0x8aa>
 8107814:	e031      	b.n	810787a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8107816:	f7fc f8cf 	bl	81039b8 <HAL_RCC_GetPCLK1Freq>
 810781a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810781c:	e033      	b.n	8107886 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810781e:	f7fc f8e1 	bl	81039e4 <HAL_RCC_GetPCLK2Freq>
 8107822:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8107824:	e02f      	b.n	8107886 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107826:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810782a:	4618      	mov	r0, r3
 810782c:	f7fd f84c 	bl	81048c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8107830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107832:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107834:	e027      	b.n	8107886 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107836:	f107 0318 	add.w	r3, r7, #24
 810783a:	4618      	mov	r0, r3
 810783c:	f7fd f998 	bl	8104b70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8107840:	69fb      	ldr	r3, [r7, #28]
 8107842:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107844:	e01f      	b.n	8107886 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107846:	4b2d      	ldr	r3, [pc, #180]	; (81078fc <UART_SetConfig+0x934>)
 8107848:	681b      	ldr	r3, [r3, #0]
 810784a:	f003 0320 	and.w	r3, r3, #32
 810784e:	2b00      	cmp	r3, #0
 8107850:	d009      	beq.n	8107866 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8107852:	4b2a      	ldr	r3, [pc, #168]	; (81078fc <UART_SetConfig+0x934>)
 8107854:	681b      	ldr	r3, [r3, #0]
 8107856:	08db      	lsrs	r3, r3, #3
 8107858:	f003 0303 	and.w	r3, r3, #3
 810785c:	4a24      	ldr	r2, [pc, #144]	; (81078f0 <UART_SetConfig+0x928>)
 810785e:	fa22 f303 	lsr.w	r3, r2, r3
 8107862:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8107864:	e00f      	b.n	8107886 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8107866:	4b22      	ldr	r3, [pc, #136]	; (81078f0 <UART_SetConfig+0x928>)
 8107868:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810786a:	e00c      	b.n	8107886 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810786c:	4b21      	ldr	r3, [pc, #132]	; (81078f4 <UART_SetConfig+0x92c>)
 810786e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107870:	e009      	b.n	8107886 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8107872:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8107876:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107878:	e005      	b.n	8107886 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 810787a:	2300      	movs	r3, #0
 810787c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 810787e:	2301      	movs	r3, #1
 8107880:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8107884:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8107886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8107888:	2b00      	cmp	r3, #0
 810788a:	f000 80e7 	beq.w	8107a5c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810788e:	697b      	ldr	r3, [r7, #20]
 8107890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107892:	4a19      	ldr	r2, [pc, #100]	; (81078f8 <UART_SetConfig+0x930>)
 8107894:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8107898:	461a      	mov	r2, r3
 810789a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810789c:	fbb3 f3f2 	udiv	r3, r3, r2
 81078a0:	005a      	lsls	r2, r3, #1
 81078a2:	697b      	ldr	r3, [r7, #20]
 81078a4:	685b      	ldr	r3, [r3, #4]
 81078a6:	085b      	lsrs	r3, r3, #1
 81078a8:	441a      	add	r2, r3
 81078aa:	697b      	ldr	r3, [r7, #20]
 81078ac:	685b      	ldr	r3, [r3, #4]
 81078ae:	fbb2 f3f3 	udiv	r3, r2, r3
 81078b2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 81078b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81078b6:	2b0f      	cmp	r3, #15
 81078b8:	d916      	bls.n	81078e8 <UART_SetConfig+0x920>
 81078ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81078bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81078c0:	d212      	bcs.n	81078e8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 81078c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81078c4:	b29b      	uxth	r3, r3
 81078c6:	f023 030f 	bic.w	r3, r3, #15
 81078ca:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 81078cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81078ce:	085b      	lsrs	r3, r3, #1
 81078d0:	b29b      	uxth	r3, r3
 81078d2:	f003 0307 	and.w	r3, r3, #7
 81078d6:	b29a      	uxth	r2, r3
 81078d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 81078da:	4313      	orrs	r3, r2
 81078dc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 81078de:	697b      	ldr	r3, [r7, #20]
 81078e0:	681b      	ldr	r3, [r3, #0]
 81078e2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 81078e4:	60da      	str	r2, [r3, #12]
 81078e6:	e0b9      	b.n	8107a5c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 81078e8:	2301      	movs	r3, #1
 81078ea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 81078ee:	e0b5      	b.n	8107a5c <UART_SetConfig+0xa94>
 81078f0:	03d09000 	.word	0x03d09000
 81078f4:	003d0900 	.word	0x003d0900
 81078f8:	0810e798 	.word	0x0810e798
 81078fc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8107900:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8107904:	2b20      	cmp	r3, #32
 8107906:	dc49      	bgt.n	810799c <UART_SetConfig+0x9d4>
 8107908:	2b00      	cmp	r3, #0
 810790a:	db7c      	blt.n	8107a06 <UART_SetConfig+0xa3e>
 810790c:	2b20      	cmp	r3, #32
 810790e:	d87a      	bhi.n	8107a06 <UART_SetConfig+0xa3e>
 8107910:	a201      	add	r2, pc, #4	; (adr r2, 8107918 <UART_SetConfig+0x950>)
 8107912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107916:	bf00      	nop
 8107918:	081079a3 	.word	0x081079a3
 810791c:	081079ab 	.word	0x081079ab
 8107920:	08107a07 	.word	0x08107a07
 8107924:	08107a07 	.word	0x08107a07
 8107928:	081079b3 	.word	0x081079b3
 810792c:	08107a07 	.word	0x08107a07
 8107930:	08107a07 	.word	0x08107a07
 8107934:	08107a07 	.word	0x08107a07
 8107938:	081079c3 	.word	0x081079c3
 810793c:	08107a07 	.word	0x08107a07
 8107940:	08107a07 	.word	0x08107a07
 8107944:	08107a07 	.word	0x08107a07
 8107948:	08107a07 	.word	0x08107a07
 810794c:	08107a07 	.word	0x08107a07
 8107950:	08107a07 	.word	0x08107a07
 8107954:	08107a07 	.word	0x08107a07
 8107958:	081079d3 	.word	0x081079d3
 810795c:	08107a07 	.word	0x08107a07
 8107960:	08107a07 	.word	0x08107a07
 8107964:	08107a07 	.word	0x08107a07
 8107968:	08107a07 	.word	0x08107a07
 810796c:	08107a07 	.word	0x08107a07
 8107970:	08107a07 	.word	0x08107a07
 8107974:	08107a07 	.word	0x08107a07
 8107978:	08107a07 	.word	0x08107a07
 810797c:	08107a07 	.word	0x08107a07
 8107980:	08107a07 	.word	0x08107a07
 8107984:	08107a07 	.word	0x08107a07
 8107988:	08107a07 	.word	0x08107a07
 810798c:	08107a07 	.word	0x08107a07
 8107990:	08107a07 	.word	0x08107a07
 8107994:	08107a07 	.word	0x08107a07
 8107998:	081079f9 	.word	0x081079f9
 810799c:	2b40      	cmp	r3, #64	; 0x40
 810799e:	d02e      	beq.n	81079fe <UART_SetConfig+0xa36>
 81079a0:	e031      	b.n	8107a06 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 81079a2:	f7fc f809 	bl	81039b8 <HAL_RCC_GetPCLK1Freq>
 81079a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 81079a8:	e033      	b.n	8107a12 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 81079aa:	f7fc f81b 	bl	81039e4 <HAL_RCC_GetPCLK2Freq>
 81079ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 81079b0:	e02f      	b.n	8107a12 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81079b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81079b6:	4618      	mov	r0, r3
 81079b8:	f7fc ff86 	bl	81048c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81079bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81079be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81079c0:	e027      	b.n	8107a12 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81079c2:	f107 0318 	add.w	r3, r7, #24
 81079c6:	4618      	mov	r0, r3
 81079c8:	f7fd f8d2 	bl	8104b70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81079cc:	69fb      	ldr	r3, [r7, #28]
 81079ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81079d0:	e01f      	b.n	8107a12 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81079d2:	4b2d      	ldr	r3, [pc, #180]	; (8107a88 <UART_SetConfig+0xac0>)
 81079d4:	681b      	ldr	r3, [r3, #0]
 81079d6:	f003 0320 	and.w	r3, r3, #32
 81079da:	2b00      	cmp	r3, #0
 81079dc:	d009      	beq.n	81079f2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81079de:	4b2a      	ldr	r3, [pc, #168]	; (8107a88 <UART_SetConfig+0xac0>)
 81079e0:	681b      	ldr	r3, [r3, #0]
 81079e2:	08db      	lsrs	r3, r3, #3
 81079e4:	f003 0303 	and.w	r3, r3, #3
 81079e8:	4a28      	ldr	r2, [pc, #160]	; (8107a8c <UART_SetConfig+0xac4>)
 81079ea:	fa22 f303 	lsr.w	r3, r2, r3
 81079ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81079f0:	e00f      	b.n	8107a12 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 81079f2:	4b26      	ldr	r3, [pc, #152]	; (8107a8c <UART_SetConfig+0xac4>)
 81079f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81079f6:	e00c      	b.n	8107a12 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81079f8:	4b25      	ldr	r3, [pc, #148]	; (8107a90 <UART_SetConfig+0xac8>)
 81079fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81079fc:	e009      	b.n	8107a12 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81079fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8107a02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107a04:	e005      	b.n	8107a12 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8107a06:	2300      	movs	r3, #0
 8107a08:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8107a0a:	2301      	movs	r3, #1
 8107a0c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8107a10:	bf00      	nop
    }

    if (pclk != 0U)
 8107a12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8107a14:	2b00      	cmp	r3, #0
 8107a16:	d021      	beq.n	8107a5c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8107a18:	697b      	ldr	r3, [r7, #20]
 8107a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107a1c:	4a1d      	ldr	r2, [pc, #116]	; (8107a94 <UART_SetConfig+0xacc>)
 8107a1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8107a22:	461a      	mov	r2, r3
 8107a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8107a26:	fbb3 f2f2 	udiv	r2, r3, r2
 8107a2a:	697b      	ldr	r3, [r7, #20]
 8107a2c:	685b      	ldr	r3, [r3, #4]
 8107a2e:	085b      	lsrs	r3, r3, #1
 8107a30:	441a      	add	r2, r3
 8107a32:	697b      	ldr	r3, [r7, #20]
 8107a34:	685b      	ldr	r3, [r3, #4]
 8107a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8107a3a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8107a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107a3e:	2b0f      	cmp	r3, #15
 8107a40:	d909      	bls.n	8107a56 <UART_SetConfig+0xa8e>
 8107a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8107a48:	d205      	bcs.n	8107a56 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8107a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107a4c:	b29a      	uxth	r2, r3
 8107a4e:	697b      	ldr	r3, [r7, #20]
 8107a50:	681b      	ldr	r3, [r3, #0]
 8107a52:	60da      	str	r2, [r3, #12]
 8107a54:	e002      	b.n	8107a5c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8107a56:	2301      	movs	r3, #1
 8107a58:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8107a5c:	697b      	ldr	r3, [r7, #20]
 8107a5e:	2201      	movs	r2, #1
 8107a60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8107a64:	697b      	ldr	r3, [r7, #20]
 8107a66:	2201      	movs	r2, #1
 8107a68:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8107a6c:	697b      	ldr	r3, [r7, #20]
 8107a6e:	2200      	movs	r2, #0
 8107a70:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8107a72:	697b      	ldr	r3, [r7, #20]
 8107a74:	2200      	movs	r2, #0
 8107a76:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8107a78:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8107a7c:	4618      	mov	r0, r3
 8107a7e:	3748      	adds	r7, #72	; 0x48
 8107a80:	46bd      	mov	sp, r7
 8107a82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8107a86:	bf00      	nop
 8107a88:	58024400 	.word	0x58024400
 8107a8c:	03d09000 	.word	0x03d09000
 8107a90:	003d0900 	.word	0x003d0900
 8107a94:	0810e798 	.word	0x0810e798

08107a98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8107a98:	b480      	push	{r7}
 8107a9a:	b083      	sub	sp, #12
 8107a9c:	af00      	add	r7, sp, #0
 8107a9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8107aa0:	687b      	ldr	r3, [r7, #4]
 8107aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107aa4:	f003 0301 	and.w	r3, r3, #1
 8107aa8:	2b00      	cmp	r3, #0
 8107aaa:	d00a      	beq.n	8107ac2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8107aac:	687b      	ldr	r3, [r7, #4]
 8107aae:	681b      	ldr	r3, [r3, #0]
 8107ab0:	685b      	ldr	r3, [r3, #4]
 8107ab2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8107ab6:	687b      	ldr	r3, [r7, #4]
 8107ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8107aba:	687b      	ldr	r3, [r7, #4]
 8107abc:	681b      	ldr	r3, [r3, #0]
 8107abe:	430a      	orrs	r2, r1
 8107ac0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8107ac2:	687b      	ldr	r3, [r7, #4]
 8107ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107ac6:	f003 0302 	and.w	r3, r3, #2
 8107aca:	2b00      	cmp	r3, #0
 8107acc:	d00a      	beq.n	8107ae4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8107ace:	687b      	ldr	r3, [r7, #4]
 8107ad0:	681b      	ldr	r3, [r3, #0]
 8107ad2:	685b      	ldr	r3, [r3, #4]
 8107ad4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8107ad8:	687b      	ldr	r3, [r7, #4]
 8107ada:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8107adc:	687b      	ldr	r3, [r7, #4]
 8107ade:	681b      	ldr	r3, [r3, #0]
 8107ae0:	430a      	orrs	r2, r1
 8107ae2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8107ae4:	687b      	ldr	r3, [r7, #4]
 8107ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107ae8:	f003 0304 	and.w	r3, r3, #4
 8107aec:	2b00      	cmp	r3, #0
 8107aee:	d00a      	beq.n	8107b06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8107af0:	687b      	ldr	r3, [r7, #4]
 8107af2:	681b      	ldr	r3, [r3, #0]
 8107af4:	685b      	ldr	r3, [r3, #4]
 8107af6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8107afa:	687b      	ldr	r3, [r7, #4]
 8107afc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8107afe:	687b      	ldr	r3, [r7, #4]
 8107b00:	681b      	ldr	r3, [r3, #0]
 8107b02:	430a      	orrs	r2, r1
 8107b04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8107b06:	687b      	ldr	r3, [r7, #4]
 8107b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107b0a:	f003 0308 	and.w	r3, r3, #8
 8107b0e:	2b00      	cmp	r3, #0
 8107b10:	d00a      	beq.n	8107b28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8107b12:	687b      	ldr	r3, [r7, #4]
 8107b14:	681b      	ldr	r3, [r3, #0]
 8107b16:	685b      	ldr	r3, [r3, #4]
 8107b18:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8107b1c:	687b      	ldr	r3, [r7, #4]
 8107b1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8107b20:	687b      	ldr	r3, [r7, #4]
 8107b22:	681b      	ldr	r3, [r3, #0]
 8107b24:	430a      	orrs	r2, r1
 8107b26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8107b28:	687b      	ldr	r3, [r7, #4]
 8107b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107b2c:	f003 0310 	and.w	r3, r3, #16
 8107b30:	2b00      	cmp	r3, #0
 8107b32:	d00a      	beq.n	8107b4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8107b34:	687b      	ldr	r3, [r7, #4]
 8107b36:	681b      	ldr	r3, [r3, #0]
 8107b38:	689b      	ldr	r3, [r3, #8]
 8107b3a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8107b3e:	687b      	ldr	r3, [r7, #4]
 8107b40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8107b42:	687b      	ldr	r3, [r7, #4]
 8107b44:	681b      	ldr	r3, [r3, #0]
 8107b46:	430a      	orrs	r2, r1
 8107b48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8107b4a:	687b      	ldr	r3, [r7, #4]
 8107b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107b4e:	f003 0320 	and.w	r3, r3, #32
 8107b52:	2b00      	cmp	r3, #0
 8107b54:	d00a      	beq.n	8107b6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8107b56:	687b      	ldr	r3, [r7, #4]
 8107b58:	681b      	ldr	r3, [r3, #0]
 8107b5a:	689b      	ldr	r3, [r3, #8]
 8107b5c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8107b60:	687b      	ldr	r3, [r7, #4]
 8107b62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8107b64:	687b      	ldr	r3, [r7, #4]
 8107b66:	681b      	ldr	r3, [r3, #0]
 8107b68:	430a      	orrs	r2, r1
 8107b6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8107b6c:	687b      	ldr	r3, [r7, #4]
 8107b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107b74:	2b00      	cmp	r3, #0
 8107b76:	d01a      	beq.n	8107bae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8107b78:	687b      	ldr	r3, [r7, #4]
 8107b7a:	681b      	ldr	r3, [r3, #0]
 8107b7c:	685b      	ldr	r3, [r3, #4]
 8107b7e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8107b82:	687b      	ldr	r3, [r7, #4]
 8107b84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8107b86:	687b      	ldr	r3, [r7, #4]
 8107b88:	681b      	ldr	r3, [r3, #0]
 8107b8a:	430a      	orrs	r2, r1
 8107b8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8107b8e:	687b      	ldr	r3, [r7, #4]
 8107b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107b92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8107b96:	d10a      	bne.n	8107bae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8107b98:	687b      	ldr	r3, [r7, #4]
 8107b9a:	681b      	ldr	r3, [r3, #0]
 8107b9c:	685b      	ldr	r3, [r3, #4]
 8107b9e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8107ba2:	687b      	ldr	r3, [r7, #4]
 8107ba4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8107ba6:	687b      	ldr	r3, [r7, #4]
 8107ba8:	681b      	ldr	r3, [r3, #0]
 8107baa:	430a      	orrs	r2, r1
 8107bac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8107bae:	687b      	ldr	r3, [r7, #4]
 8107bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8107bb6:	2b00      	cmp	r3, #0
 8107bb8:	d00a      	beq.n	8107bd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8107bba:	687b      	ldr	r3, [r7, #4]
 8107bbc:	681b      	ldr	r3, [r3, #0]
 8107bbe:	685b      	ldr	r3, [r3, #4]
 8107bc0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8107bc4:	687b      	ldr	r3, [r7, #4]
 8107bc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8107bc8:	687b      	ldr	r3, [r7, #4]
 8107bca:	681b      	ldr	r3, [r3, #0]
 8107bcc:	430a      	orrs	r2, r1
 8107bce:	605a      	str	r2, [r3, #4]
  }
}
 8107bd0:	bf00      	nop
 8107bd2:	370c      	adds	r7, #12
 8107bd4:	46bd      	mov	sp, r7
 8107bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107bda:	4770      	bx	lr

08107bdc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8107bdc:	b580      	push	{r7, lr}
 8107bde:	b086      	sub	sp, #24
 8107be0:	af02      	add	r7, sp, #8
 8107be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8107be4:	687b      	ldr	r3, [r7, #4]
 8107be6:	2200      	movs	r2, #0
 8107be8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8107bec:	f7fa fc40 	bl	8102470 <HAL_GetTick>
 8107bf0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8107bf2:	687b      	ldr	r3, [r7, #4]
 8107bf4:	681b      	ldr	r3, [r3, #0]
 8107bf6:	681b      	ldr	r3, [r3, #0]
 8107bf8:	f003 0308 	and.w	r3, r3, #8
 8107bfc:	2b08      	cmp	r3, #8
 8107bfe:	d10e      	bne.n	8107c1e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8107c00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8107c04:	9300      	str	r3, [sp, #0]
 8107c06:	68fb      	ldr	r3, [r7, #12]
 8107c08:	2200      	movs	r2, #0
 8107c0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8107c0e:	6878      	ldr	r0, [r7, #4]
 8107c10:	f000 f82f 	bl	8107c72 <UART_WaitOnFlagUntilTimeout>
 8107c14:	4603      	mov	r3, r0
 8107c16:	2b00      	cmp	r3, #0
 8107c18:	d001      	beq.n	8107c1e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8107c1a:	2303      	movs	r3, #3
 8107c1c:	e025      	b.n	8107c6a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8107c1e:	687b      	ldr	r3, [r7, #4]
 8107c20:	681b      	ldr	r3, [r3, #0]
 8107c22:	681b      	ldr	r3, [r3, #0]
 8107c24:	f003 0304 	and.w	r3, r3, #4
 8107c28:	2b04      	cmp	r3, #4
 8107c2a:	d10e      	bne.n	8107c4a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8107c2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8107c30:	9300      	str	r3, [sp, #0]
 8107c32:	68fb      	ldr	r3, [r7, #12]
 8107c34:	2200      	movs	r2, #0
 8107c36:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8107c3a:	6878      	ldr	r0, [r7, #4]
 8107c3c:	f000 f819 	bl	8107c72 <UART_WaitOnFlagUntilTimeout>
 8107c40:	4603      	mov	r3, r0
 8107c42:	2b00      	cmp	r3, #0
 8107c44:	d001      	beq.n	8107c4a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8107c46:	2303      	movs	r3, #3
 8107c48:	e00f      	b.n	8107c6a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8107c4a:	687b      	ldr	r3, [r7, #4]
 8107c4c:	2220      	movs	r2, #32
 8107c4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8107c52:	687b      	ldr	r3, [r7, #4]
 8107c54:	2220      	movs	r2, #32
 8107c56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8107c5a:	687b      	ldr	r3, [r7, #4]
 8107c5c:	2200      	movs	r2, #0
 8107c5e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8107c60:	687b      	ldr	r3, [r7, #4]
 8107c62:	2200      	movs	r2, #0
 8107c64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8107c68:	2300      	movs	r3, #0
}
 8107c6a:	4618      	mov	r0, r3
 8107c6c:	3710      	adds	r7, #16
 8107c6e:	46bd      	mov	sp, r7
 8107c70:	bd80      	pop	{r7, pc}

08107c72 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8107c72:	b580      	push	{r7, lr}
 8107c74:	b09c      	sub	sp, #112	; 0x70
 8107c76:	af00      	add	r7, sp, #0
 8107c78:	60f8      	str	r0, [r7, #12]
 8107c7a:	60b9      	str	r1, [r7, #8]
 8107c7c:	603b      	str	r3, [r7, #0]
 8107c7e:	4613      	mov	r3, r2
 8107c80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8107c82:	e0a9      	b.n	8107dd8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8107c84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8107c86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8107c8a:	f000 80a5 	beq.w	8107dd8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8107c8e:	f7fa fbef 	bl	8102470 <HAL_GetTick>
 8107c92:	4602      	mov	r2, r0
 8107c94:	683b      	ldr	r3, [r7, #0]
 8107c96:	1ad3      	subs	r3, r2, r3
 8107c98:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8107c9a:	429a      	cmp	r2, r3
 8107c9c:	d302      	bcc.n	8107ca4 <UART_WaitOnFlagUntilTimeout+0x32>
 8107c9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8107ca0:	2b00      	cmp	r3, #0
 8107ca2:	d140      	bne.n	8107d26 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8107ca4:	68fb      	ldr	r3, [r7, #12]
 8107ca6:	681b      	ldr	r3, [r3, #0]
 8107ca8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107caa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8107cac:	e853 3f00 	ldrex	r3, [r3]
 8107cb0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8107cb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8107cb4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8107cb8:	667b      	str	r3, [r7, #100]	; 0x64
 8107cba:	68fb      	ldr	r3, [r7, #12]
 8107cbc:	681b      	ldr	r3, [r3, #0]
 8107cbe:	461a      	mov	r2, r3
 8107cc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8107cc2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8107cc4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107cc6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8107cc8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8107cca:	e841 2300 	strex	r3, r2, [r1]
 8107cce:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8107cd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8107cd2:	2b00      	cmp	r3, #0
 8107cd4:	d1e6      	bne.n	8107ca4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8107cd6:	68fb      	ldr	r3, [r7, #12]
 8107cd8:	681b      	ldr	r3, [r3, #0]
 8107cda:	3308      	adds	r3, #8
 8107cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107cde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8107ce0:	e853 3f00 	ldrex	r3, [r3]
 8107ce4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8107ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107ce8:	f023 0301 	bic.w	r3, r3, #1
 8107cec:	663b      	str	r3, [r7, #96]	; 0x60
 8107cee:	68fb      	ldr	r3, [r7, #12]
 8107cf0:	681b      	ldr	r3, [r3, #0]
 8107cf2:	3308      	adds	r3, #8
 8107cf4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8107cf6:	64ba      	str	r2, [r7, #72]	; 0x48
 8107cf8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107cfa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8107cfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8107cfe:	e841 2300 	strex	r3, r2, [r1]
 8107d02:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8107d04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8107d06:	2b00      	cmp	r3, #0
 8107d08:	d1e5      	bne.n	8107cd6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8107d0a:	68fb      	ldr	r3, [r7, #12]
 8107d0c:	2220      	movs	r2, #32
 8107d0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8107d12:	68fb      	ldr	r3, [r7, #12]
 8107d14:	2220      	movs	r2, #32
 8107d16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8107d1a:	68fb      	ldr	r3, [r7, #12]
 8107d1c:	2200      	movs	r2, #0
 8107d1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8107d22:	2303      	movs	r3, #3
 8107d24:	e069      	b.n	8107dfa <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8107d26:	68fb      	ldr	r3, [r7, #12]
 8107d28:	681b      	ldr	r3, [r3, #0]
 8107d2a:	681b      	ldr	r3, [r3, #0]
 8107d2c:	f003 0304 	and.w	r3, r3, #4
 8107d30:	2b00      	cmp	r3, #0
 8107d32:	d051      	beq.n	8107dd8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8107d34:	68fb      	ldr	r3, [r7, #12]
 8107d36:	681b      	ldr	r3, [r3, #0]
 8107d38:	69db      	ldr	r3, [r3, #28]
 8107d3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8107d3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8107d42:	d149      	bne.n	8107dd8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8107d44:	68fb      	ldr	r3, [r7, #12]
 8107d46:	681b      	ldr	r3, [r3, #0]
 8107d48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8107d4c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8107d4e:	68fb      	ldr	r3, [r7, #12]
 8107d50:	681b      	ldr	r3, [r3, #0]
 8107d52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107d56:	e853 3f00 	ldrex	r3, [r3]
 8107d5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8107d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8107d5e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8107d62:	66fb      	str	r3, [r7, #108]	; 0x6c
 8107d64:	68fb      	ldr	r3, [r7, #12]
 8107d66:	681b      	ldr	r3, [r3, #0]
 8107d68:	461a      	mov	r2, r3
 8107d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8107d6c:	637b      	str	r3, [r7, #52]	; 0x34
 8107d6e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107d70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8107d72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8107d74:	e841 2300 	strex	r3, r2, [r1]
 8107d78:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8107d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107d7c:	2b00      	cmp	r3, #0
 8107d7e:	d1e6      	bne.n	8107d4e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8107d80:	68fb      	ldr	r3, [r7, #12]
 8107d82:	681b      	ldr	r3, [r3, #0]
 8107d84:	3308      	adds	r3, #8
 8107d86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107d88:	697b      	ldr	r3, [r7, #20]
 8107d8a:	e853 3f00 	ldrex	r3, [r3]
 8107d8e:	613b      	str	r3, [r7, #16]
   return(result);
 8107d90:	693b      	ldr	r3, [r7, #16]
 8107d92:	f023 0301 	bic.w	r3, r3, #1
 8107d96:	66bb      	str	r3, [r7, #104]	; 0x68
 8107d98:	68fb      	ldr	r3, [r7, #12]
 8107d9a:	681b      	ldr	r3, [r3, #0]
 8107d9c:	3308      	adds	r3, #8
 8107d9e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8107da0:	623a      	str	r2, [r7, #32]
 8107da2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107da4:	69f9      	ldr	r1, [r7, #28]
 8107da6:	6a3a      	ldr	r2, [r7, #32]
 8107da8:	e841 2300 	strex	r3, r2, [r1]
 8107dac:	61bb      	str	r3, [r7, #24]
   return(result);
 8107dae:	69bb      	ldr	r3, [r7, #24]
 8107db0:	2b00      	cmp	r3, #0
 8107db2:	d1e5      	bne.n	8107d80 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8107db4:	68fb      	ldr	r3, [r7, #12]
 8107db6:	2220      	movs	r2, #32
 8107db8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8107dbc:	68fb      	ldr	r3, [r7, #12]
 8107dbe:	2220      	movs	r2, #32
 8107dc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8107dc4:	68fb      	ldr	r3, [r7, #12]
 8107dc6:	2220      	movs	r2, #32
 8107dc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8107dcc:	68fb      	ldr	r3, [r7, #12]
 8107dce:	2200      	movs	r2, #0
 8107dd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8107dd4:	2303      	movs	r3, #3
 8107dd6:	e010      	b.n	8107dfa <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8107dd8:	68fb      	ldr	r3, [r7, #12]
 8107dda:	681b      	ldr	r3, [r3, #0]
 8107ddc:	69da      	ldr	r2, [r3, #28]
 8107dde:	68bb      	ldr	r3, [r7, #8]
 8107de0:	4013      	ands	r3, r2
 8107de2:	68ba      	ldr	r2, [r7, #8]
 8107de4:	429a      	cmp	r2, r3
 8107de6:	bf0c      	ite	eq
 8107de8:	2301      	moveq	r3, #1
 8107dea:	2300      	movne	r3, #0
 8107dec:	b2db      	uxtb	r3, r3
 8107dee:	461a      	mov	r2, r3
 8107df0:	79fb      	ldrb	r3, [r7, #7]
 8107df2:	429a      	cmp	r2, r3
 8107df4:	f43f af46 	beq.w	8107c84 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8107df8:	2300      	movs	r3, #0
}
 8107dfa:	4618      	mov	r0, r3
 8107dfc:	3770      	adds	r7, #112	; 0x70
 8107dfe:	46bd      	mov	sp, r7
 8107e00:	bd80      	pop	{r7, pc}
	...

08107e04 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8107e04:	b480      	push	{r7}
 8107e06:	b0a3      	sub	sp, #140	; 0x8c
 8107e08:	af00      	add	r7, sp, #0
 8107e0a:	60f8      	str	r0, [r7, #12]
 8107e0c:	60b9      	str	r1, [r7, #8]
 8107e0e:	4613      	mov	r3, r2
 8107e10:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8107e12:	68fb      	ldr	r3, [r7, #12]
 8107e14:	68ba      	ldr	r2, [r7, #8]
 8107e16:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8107e18:	68fb      	ldr	r3, [r7, #12]
 8107e1a:	88fa      	ldrh	r2, [r7, #6]
 8107e1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8107e20:	68fb      	ldr	r3, [r7, #12]
 8107e22:	88fa      	ldrh	r2, [r7, #6]
 8107e24:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8107e28:	68fb      	ldr	r3, [r7, #12]
 8107e2a:	2200      	movs	r2, #0
 8107e2c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8107e2e:	68fb      	ldr	r3, [r7, #12]
 8107e30:	689b      	ldr	r3, [r3, #8]
 8107e32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8107e36:	d10e      	bne.n	8107e56 <UART_Start_Receive_IT+0x52>
 8107e38:	68fb      	ldr	r3, [r7, #12]
 8107e3a:	691b      	ldr	r3, [r3, #16]
 8107e3c:	2b00      	cmp	r3, #0
 8107e3e:	d105      	bne.n	8107e4c <UART_Start_Receive_IT+0x48>
 8107e40:	68fb      	ldr	r3, [r7, #12]
 8107e42:	f240 12ff 	movw	r2, #511	; 0x1ff
 8107e46:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8107e4a:	e02d      	b.n	8107ea8 <UART_Start_Receive_IT+0xa4>
 8107e4c:	68fb      	ldr	r3, [r7, #12]
 8107e4e:	22ff      	movs	r2, #255	; 0xff
 8107e50:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8107e54:	e028      	b.n	8107ea8 <UART_Start_Receive_IT+0xa4>
 8107e56:	68fb      	ldr	r3, [r7, #12]
 8107e58:	689b      	ldr	r3, [r3, #8]
 8107e5a:	2b00      	cmp	r3, #0
 8107e5c:	d10d      	bne.n	8107e7a <UART_Start_Receive_IT+0x76>
 8107e5e:	68fb      	ldr	r3, [r7, #12]
 8107e60:	691b      	ldr	r3, [r3, #16]
 8107e62:	2b00      	cmp	r3, #0
 8107e64:	d104      	bne.n	8107e70 <UART_Start_Receive_IT+0x6c>
 8107e66:	68fb      	ldr	r3, [r7, #12]
 8107e68:	22ff      	movs	r2, #255	; 0xff
 8107e6a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8107e6e:	e01b      	b.n	8107ea8 <UART_Start_Receive_IT+0xa4>
 8107e70:	68fb      	ldr	r3, [r7, #12]
 8107e72:	227f      	movs	r2, #127	; 0x7f
 8107e74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8107e78:	e016      	b.n	8107ea8 <UART_Start_Receive_IT+0xa4>
 8107e7a:	68fb      	ldr	r3, [r7, #12]
 8107e7c:	689b      	ldr	r3, [r3, #8]
 8107e7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8107e82:	d10d      	bne.n	8107ea0 <UART_Start_Receive_IT+0x9c>
 8107e84:	68fb      	ldr	r3, [r7, #12]
 8107e86:	691b      	ldr	r3, [r3, #16]
 8107e88:	2b00      	cmp	r3, #0
 8107e8a:	d104      	bne.n	8107e96 <UART_Start_Receive_IT+0x92>
 8107e8c:	68fb      	ldr	r3, [r7, #12]
 8107e8e:	227f      	movs	r2, #127	; 0x7f
 8107e90:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8107e94:	e008      	b.n	8107ea8 <UART_Start_Receive_IT+0xa4>
 8107e96:	68fb      	ldr	r3, [r7, #12]
 8107e98:	223f      	movs	r2, #63	; 0x3f
 8107e9a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8107e9e:	e003      	b.n	8107ea8 <UART_Start_Receive_IT+0xa4>
 8107ea0:	68fb      	ldr	r3, [r7, #12]
 8107ea2:	2200      	movs	r2, #0
 8107ea4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8107ea8:	68fb      	ldr	r3, [r7, #12]
 8107eaa:	2200      	movs	r2, #0
 8107eac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8107eb0:	68fb      	ldr	r3, [r7, #12]
 8107eb2:	2222      	movs	r2, #34	; 0x22
 8107eb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8107eb8:	68fb      	ldr	r3, [r7, #12]
 8107eba:	681b      	ldr	r3, [r3, #0]
 8107ebc:	3308      	adds	r3, #8
 8107ebe:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107ec0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8107ec2:	e853 3f00 	ldrex	r3, [r3]
 8107ec6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8107ec8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8107eca:	f043 0301 	orr.w	r3, r3, #1
 8107ece:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8107ed2:	68fb      	ldr	r3, [r7, #12]
 8107ed4:	681b      	ldr	r3, [r3, #0]
 8107ed6:	3308      	adds	r3, #8
 8107ed8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8107edc:	673a      	str	r2, [r7, #112]	; 0x70
 8107ede:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107ee0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8107ee2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8107ee4:	e841 2300 	strex	r3, r2, [r1]
 8107ee8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8107eea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8107eec:	2b00      	cmp	r3, #0
 8107eee:	d1e3      	bne.n	8107eb8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8107ef0:	68fb      	ldr	r3, [r7, #12]
 8107ef2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8107ef4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107ef8:	d153      	bne.n	8107fa2 <UART_Start_Receive_IT+0x19e>
 8107efa:	68fb      	ldr	r3, [r7, #12]
 8107efc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8107f00:	88fa      	ldrh	r2, [r7, #6]
 8107f02:	429a      	cmp	r2, r3
 8107f04:	d34d      	bcc.n	8107fa2 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8107f06:	68fb      	ldr	r3, [r7, #12]
 8107f08:	689b      	ldr	r3, [r3, #8]
 8107f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8107f0e:	d107      	bne.n	8107f20 <UART_Start_Receive_IT+0x11c>
 8107f10:	68fb      	ldr	r3, [r7, #12]
 8107f12:	691b      	ldr	r3, [r3, #16]
 8107f14:	2b00      	cmp	r3, #0
 8107f16:	d103      	bne.n	8107f20 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8107f18:	68fb      	ldr	r3, [r7, #12]
 8107f1a:	4a4b      	ldr	r2, [pc, #300]	; (8108048 <UART_Start_Receive_IT+0x244>)
 8107f1c:	671a      	str	r2, [r3, #112]	; 0x70
 8107f1e:	e002      	b.n	8107f26 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8107f20:	68fb      	ldr	r3, [r7, #12]
 8107f22:	4a4a      	ldr	r2, [pc, #296]	; (810804c <UART_Start_Receive_IT+0x248>)
 8107f24:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8107f26:	68fb      	ldr	r3, [r7, #12]
 8107f28:	2200      	movs	r2, #0
 8107f2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8107f2e:	68fb      	ldr	r3, [r7, #12]
 8107f30:	691b      	ldr	r3, [r3, #16]
 8107f32:	2b00      	cmp	r3, #0
 8107f34:	d01a      	beq.n	8107f6c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8107f36:	68fb      	ldr	r3, [r7, #12]
 8107f38:	681b      	ldr	r3, [r3, #0]
 8107f3a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107f3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8107f3e:	e853 3f00 	ldrex	r3, [r3]
 8107f42:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8107f44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8107f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8107f4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8107f4e:	68fb      	ldr	r3, [r7, #12]
 8107f50:	681b      	ldr	r3, [r3, #0]
 8107f52:	461a      	mov	r2, r3
 8107f54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8107f58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8107f5a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107f5c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8107f5e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8107f60:	e841 2300 	strex	r3, r2, [r1]
 8107f64:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8107f66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8107f68:	2b00      	cmp	r3, #0
 8107f6a:	d1e4      	bne.n	8107f36 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8107f6c:	68fb      	ldr	r3, [r7, #12]
 8107f6e:	681b      	ldr	r3, [r3, #0]
 8107f70:	3308      	adds	r3, #8
 8107f72:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107f74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8107f76:	e853 3f00 	ldrex	r3, [r3]
 8107f7a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8107f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107f7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8107f82:	67fb      	str	r3, [r7, #124]	; 0x7c
 8107f84:	68fb      	ldr	r3, [r7, #12]
 8107f86:	681b      	ldr	r3, [r3, #0]
 8107f88:	3308      	adds	r3, #8
 8107f8a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8107f8c:	64ba      	str	r2, [r7, #72]	; 0x48
 8107f8e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107f90:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8107f92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8107f94:	e841 2300 	strex	r3, r2, [r1]
 8107f98:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8107f9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8107f9c:	2b00      	cmp	r3, #0
 8107f9e:	d1e5      	bne.n	8107f6c <UART_Start_Receive_IT+0x168>
 8107fa0:	e04a      	b.n	8108038 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8107fa2:	68fb      	ldr	r3, [r7, #12]
 8107fa4:	689b      	ldr	r3, [r3, #8]
 8107fa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8107faa:	d107      	bne.n	8107fbc <UART_Start_Receive_IT+0x1b8>
 8107fac:	68fb      	ldr	r3, [r7, #12]
 8107fae:	691b      	ldr	r3, [r3, #16]
 8107fb0:	2b00      	cmp	r3, #0
 8107fb2:	d103      	bne.n	8107fbc <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8107fb4:	68fb      	ldr	r3, [r7, #12]
 8107fb6:	4a26      	ldr	r2, [pc, #152]	; (8108050 <UART_Start_Receive_IT+0x24c>)
 8107fb8:	671a      	str	r2, [r3, #112]	; 0x70
 8107fba:	e002      	b.n	8107fc2 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8107fbc:	68fb      	ldr	r3, [r7, #12]
 8107fbe:	4a25      	ldr	r2, [pc, #148]	; (8108054 <UART_Start_Receive_IT+0x250>)
 8107fc0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8107fc2:	68fb      	ldr	r3, [r7, #12]
 8107fc4:	2200      	movs	r2, #0
 8107fc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8107fca:	68fb      	ldr	r3, [r7, #12]
 8107fcc:	691b      	ldr	r3, [r3, #16]
 8107fce:	2b00      	cmp	r3, #0
 8107fd0:	d019      	beq.n	8108006 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8107fd2:	68fb      	ldr	r3, [r7, #12]
 8107fd4:	681b      	ldr	r3, [r3, #0]
 8107fd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107fda:	e853 3f00 	ldrex	r3, [r3]
 8107fde:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8107fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8107fe2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8107fe6:	677b      	str	r3, [r7, #116]	; 0x74
 8107fe8:	68fb      	ldr	r3, [r7, #12]
 8107fea:	681b      	ldr	r3, [r3, #0]
 8107fec:	461a      	mov	r2, r3
 8107fee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8107ff0:	637b      	str	r3, [r7, #52]	; 0x34
 8107ff2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107ff4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8107ff6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8107ff8:	e841 2300 	strex	r3, r2, [r1]
 8107ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8107ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108000:	2b00      	cmp	r3, #0
 8108002:	d1e6      	bne.n	8107fd2 <UART_Start_Receive_IT+0x1ce>
 8108004:	e018      	b.n	8108038 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8108006:	68fb      	ldr	r3, [r7, #12]
 8108008:	681b      	ldr	r3, [r3, #0]
 810800a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810800c:	697b      	ldr	r3, [r7, #20]
 810800e:	e853 3f00 	ldrex	r3, [r3]
 8108012:	613b      	str	r3, [r7, #16]
   return(result);
 8108014:	693b      	ldr	r3, [r7, #16]
 8108016:	f043 0320 	orr.w	r3, r3, #32
 810801a:	67bb      	str	r3, [r7, #120]	; 0x78
 810801c:	68fb      	ldr	r3, [r7, #12]
 810801e:	681b      	ldr	r3, [r3, #0]
 8108020:	461a      	mov	r2, r3
 8108022:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8108024:	623b      	str	r3, [r7, #32]
 8108026:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108028:	69f9      	ldr	r1, [r7, #28]
 810802a:	6a3a      	ldr	r2, [r7, #32]
 810802c:	e841 2300 	strex	r3, r2, [r1]
 8108030:	61bb      	str	r3, [r7, #24]
   return(result);
 8108032:	69bb      	ldr	r3, [r7, #24]
 8108034:	2b00      	cmp	r3, #0
 8108036:	d1e6      	bne.n	8108006 <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 8108038:	2300      	movs	r3, #0
}
 810803a:	4618      	mov	r0, r3
 810803c:	378c      	adds	r7, #140	; 0x8c
 810803e:	46bd      	mov	sp, r7
 8108040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108044:	4770      	bx	lr
 8108046:	bf00      	nop
 8108048:	08108aa5 	.word	0x08108aa5
 810804c:	081087ad 	.word	0x081087ad
 8108050:	0810864b 	.word	0x0810864b
 8108054:	081084eb 	.word	0x081084eb

08108058 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8108058:	b480      	push	{r7}
 810805a:	b095      	sub	sp, #84	; 0x54
 810805c:	af00      	add	r7, sp, #0
 810805e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8108060:	687b      	ldr	r3, [r7, #4]
 8108062:	681b      	ldr	r3, [r3, #0]
 8108064:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8108068:	e853 3f00 	ldrex	r3, [r3]
 810806c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 810806e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108070:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8108074:	64fb      	str	r3, [r7, #76]	; 0x4c
 8108076:	687b      	ldr	r3, [r7, #4]
 8108078:	681b      	ldr	r3, [r3, #0]
 810807a:	461a      	mov	r2, r3
 810807c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810807e:	643b      	str	r3, [r7, #64]	; 0x40
 8108080:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108082:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8108084:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8108086:	e841 2300 	strex	r3, r2, [r1]
 810808a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 810808c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810808e:	2b00      	cmp	r3, #0
 8108090:	d1e6      	bne.n	8108060 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8108092:	687b      	ldr	r3, [r7, #4]
 8108094:	681b      	ldr	r3, [r3, #0]
 8108096:	3308      	adds	r3, #8
 8108098:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810809a:	6a3b      	ldr	r3, [r7, #32]
 810809c:	e853 3f00 	ldrex	r3, [r3]
 81080a0:	61fb      	str	r3, [r7, #28]
   return(result);
 81080a2:	69fb      	ldr	r3, [r7, #28]
 81080a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 81080a8:	f023 0301 	bic.w	r3, r3, #1
 81080ac:	64bb      	str	r3, [r7, #72]	; 0x48
 81080ae:	687b      	ldr	r3, [r7, #4]
 81080b0:	681b      	ldr	r3, [r3, #0]
 81080b2:	3308      	adds	r3, #8
 81080b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 81080b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 81080b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81080ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 81080bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 81080be:	e841 2300 	strex	r3, r2, [r1]
 81080c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 81080c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81080c6:	2b00      	cmp	r3, #0
 81080c8:	d1e3      	bne.n	8108092 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 81080ca:	687b      	ldr	r3, [r7, #4]
 81080cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81080ce:	2b01      	cmp	r3, #1
 81080d0:	d118      	bne.n	8108104 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 81080d2:	687b      	ldr	r3, [r7, #4]
 81080d4:	681b      	ldr	r3, [r3, #0]
 81080d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81080d8:	68fb      	ldr	r3, [r7, #12]
 81080da:	e853 3f00 	ldrex	r3, [r3]
 81080de:	60bb      	str	r3, [r7, #8]
   return(result);
 81080e0:	68bb      	ldr	r3, [r7, #8]
 81080e2:	f023 0310 	bic.w	r3, r3, #16
 81080e6:	647b      	str	r3, [r7, #68]	; 0x44
 81080e8:	687b      	ldr	r3, [r7, #4]
 81080ea:	681b      	ldr	r3, [r3, #0]
 81080ec:	461a      	mov	r2, r3
 81080ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81080f0:	61bb      	str	r3, [r7, #24]
 81080f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81080f4:	6979      	ldr	r1, [r7, #20]
 81080f6:	69ba      	ldr	r2, [r7, #24]
 81080f8:	e841 2300 	strex	r3, r2, [r1]
 81080fc:	613b      	str	r3, [r7, #16]
   return(result);
 81080fe:	693b      	ldr	r3, [r7, #16]
 8108100:	2b00      	cmp	r3, #0
 8108102:	d1e6      	bne.n	81080d2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8108104:	687b      	ldr	r3, [r7, #4]
 8108106:	2220      	movs	r2, #32
 8108108:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810810c:	687b      	ldr	r3, [r7, #4]
 810810e:	2200      	movs	r2, #0
 8108110:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8108112:	687b      	ldr	r3, [r7, #4]
 8108114:	2200      	movs	r2, #0
 8108116:	671a      	str	r2, [r3, #112]	; 0x70
}
 8108118:	bf00      	nop
 810811a:	3754      	adds	r7, #84	; 0x54
 810811c:	46bd      	mov	sp, r7
 810811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108122:	4770      	bx	lr

08108124 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8108124:	b580      	push	{r7, lr}
 8108126:	b084      	sub	sp, #16
 8108128:	af00      	add	r7, sp, #0
 810812a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810812c:	687b      	ldr	r3, [r7, #4]
 810812e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108130:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8108132:	68fb      	ldr	r3, [r7, #12]
 8108134:	2200      	movs	r2, #0
 8108136:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 810813a:	68fb      	ldr	r3, [r7, #12]
 810813c:	2200      	movs	r2, #0
 810813e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8108142:	68f8      	ldr	r0, [r7, #12]
 8108144:	f7fe ff2a 	bl	8106f9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8108148:	bf00      	nop
 810814a:	3710      	adds	r7, #16
 810814c:	46bd      	mov	sp, r7
 810814e:	bd80      	pop	{r7, pc}

08108150 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8108150:	b480      	push	{r7}
 8108152:	b08f      	sub	sp, #60	; 0x3c
 8108154:	af00      	add	r7, sp, #0
 8108156:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8108158:	687b      	ldr	r3, [r7, #4]
 810815a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810815e:	2b21      	cmp	r3, #33	; 0x21
 8108160:	d14c      	bne.n	81081fc <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8108162:	687b      	ldr	r3, [r7, #4]
 8108164:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8108168:	b29b      	uxth	r3, r3
 810816a:	2b00      	cmp	r3, #0
 810816c:	d132      	bne.n	81081d4 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 810816e:	687b      	ldr	r3, [r7, #4]
 8108170:	681b      	ldr	r3, [r3, #0]
 8108172:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108174:	6a3b      	ldr	r3, [r7, #32]
 8108176:	e853 3f00 	ldrex	r3, [r3]
 810817a:	61fb      	str	r3, [r7, #28]
   return(result);
 810817c:	69fb      	ldr	r3, [r7, #28]
 810817e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8108182:	637b      	str	r3, [r7, #52]	; 0x34
 8108184:	687b      	ldr	r3, [r7, #4]
 8108186:	681b      	ldr	r3, [r3, #0]
 8108188:	461a      	mov	r2, r3
 810818a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810818c:	62fb      	str	r3, [r7, #44]	; 0x2c
 810818e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108190:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8108192:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8108194:	e841 2300 	strex	r3, r2, [r1]
 8108198:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 810819a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810819c:	2b00      	cmp	r3, #0
 810819e:	d1e6      	bne.n	810816e <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 81081a0:	687b      	ldr	r3, [r7, #4]
 81081a2:	681b      	ldr	r3, [r3, #0]
 81081a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81081a6:	68fb      	ldr	r3, [r7, #12]
 81081a8:	e853 3f00 	ldrex	r3, [r3]
 81081ac:	60bb      	str	r3, [r7, #8]
   return(result);
 81081ae:	68bb      	ldr	r3, [r7, #8]
 81081b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81081b4:	633b      	str	r3, [r7, #48]	; 0x30
 81081b6:	687b      	ldr	r3, [r7, #4]
 81081b8:	681b      	ldr	r3, [r3, #0]
 81081ba:	461a      	mov	r2, r3
 81081bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81081be:	61bb      	str	r3, [r7, #24]
 81081c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81081c2:	6979      	ldr	r1, [r7, #20]
 81081c4:	69ba      	ldr	r2, [r7, #24]
 81081c6:	e841 2300 	strex	r3, r2, [r1]
 81081ca:	613b      	str	r3, [r7, #16]
   return(result);
 81081cc:	693b      	ldr	r3, [r7, #16]
 81081ce:	2b00      	cmp	r3, #0
 81081d0:	d1e6      	bne.n	81081a0 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 81081d2:	e013      	b.n	81081fc <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 81081d4:	687b      	ldr	r3, [r7, #4]
 81081d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81081d8:	781a      	ldrb	r2, [r3, #0]
 81081da:	687b      	ldr	r3, [r7, #4]
 81081dc:	681b      	ldr	r3, [r3, #0]
 81081de:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 81081e0:	687b      	ldr	r3, [r7, #4]
 81081e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81081e4:	1c5a      	adds	r2, r3, #1
 81081e6:	687b      	ldr	r3, [r7, #4]
 81081e8:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 81081ea:	687b      	ldr	r3, [r7, #4]
 81081ec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 81081f0:	b29b      	uxth	r3, r3
 81081f2:	3b01      	subs	r3, #1
 81081f4:	b29a      	uxth	r2, r3
 81081f6:	687b      	ldr	r3, [r7, #4]
 81081f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 81081fc:	bf00      	nop
 81081fe:	373c      	adds	r7, #60	; 0x3c
 8108200:	46bd      	mov	sp, r7
 8108202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108206:	4770      	bx	lr

08108208 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8108208:	b480      	push	{r7}
 810820a:	b091      	sub	sp, #68	; 0x44
 810820c:	af00      	add	r7, sp, #0
 810820e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8108210:	687b      	ldr	r3, [r7, #4]
 8108212:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8108216:	2b21      	cmp	r3, #33	; 0x21
 8108218:	d151      	bne.n	81082be <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 810821a:	687b      	ldr	r3, [r7, #4]
 810821c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8108220:	b29b      	uxth	r3, r3
 8108222:	2b00      	cmp	r3, #0
 8108224:	d132      	bne.n	810828c <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8108226:	687b      	ldr	r3, [r7, #4]
 8108228:	681b      	ldr	r3, [r3, #0]
 810822a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810822c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810822e:	e853 3f00 	ldrex	r3, [r3]
 8108232:	623b      	str	r3, [r7, #32]
   return(result);
 8108234:	6a3b      	ldr	r3, [r7, #32]
 8108236:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 810823a:	63bb      	str	r3, [r7, #56]	; 0x38
 810823c:	687b      	ldr	r3, [r7, #4]
 810823e:	681b      	ldr	r3, [r3, #0]
 8108240:	461a      	mov	r2, r3
 8108242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108244:	633b      	str	r3, [r7, #48]	; 0x30
 8108246:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108248:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 810824a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810824c:	e841 2300 	strex	r3, r2, [r1]
 8108250:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8108252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108254:	2b00      	cmp	r3, #0
 8108256:	d1e6      	bne.n	8108226 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8108258:	687b      	ldr	r3, [r7, #4]
 810825a:	681b      	ldr	r3, [r3, #0]
 810825c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810825e:	693b      	ldr	r3, [r7, #16]
 8108260:	e853 3f00 	ldrex	r3, [r3]
 8108264:	60fb      	str	r3, [r7, #12]
   return(result);
 8108266:	68fb      	ldr	r3, [r7, #12]
 8108268:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810826c:	637b      	str	r3, [r7, #52]	; 0x34
 810826e:	687b      	ldr	r3, [r7, #4]
 8108270:	681b      	ldr	r3, [r3, #0]
 8108272:	461a      	mov	r2, r3
 8108274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8108276:	61fb      	str	r3, [r7, #28]
 8108278:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810827a:	69b9      	ldr	r1, [r7, #24]
 810827c:	69fa      	ldr	r2, [r7, #28]
 810827e:	e841 2300 	strex	r3, r2, [r1]
 8108282:	617b      	str	r3, [r7, #20]
   return(result);
 8108284:	697b      	ldr	r3, [r7, #20]
 8108286:	2b00      	cmp	r3, #0
 8108288:	d1e6      	bne.n	8108258 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 810828a:	e018      	b.n	81082be <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 810828c:	687b      	ldr	r3, [r7, #4]
 810828e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8108290:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8108292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108294:	881b      	ldrh	r3, [r3, #0]
 8108296:	461a      	mov	r2, r3
 8108298:	687b      	ldr	r3, [r7, #4]
 810829a:	681b      	ldr	r3, [r3, #0]
 810829c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 81082a0:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 81082a2:	687b      	ldr	r3, [r7, #4]
 81082a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81082a6:	1c9a      	adds	r2, r3, #2
 81082a8:	687b      	ldr	r3, [r7, #4]
 81082aa:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 81082ac:	687b      	ldr	r3, [r7, #4]
 81082ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 81082b2:	b29b      	uxth	r3, r3
 81082b4:	3b01      	subs	r3, #1
 81082b6:	b29a      	uxth	r2, r3
 81082b8:	687b      	ldr	r3, [r7, #4]
 81082ba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 81082be:	bf00      	nop
 81082c0:	3744      	adds	r7, #68	; 0x44
 81082c2:	46bd      	mov	sp, r7
 81082c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81082c8:	4770      	bx	lr

081082ca <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 81082ca:	b480      	push	{r7}
 81082cc:	b091      	sub	sp, #68	; 0x44
 81082ce:	af00      	add	r7, sp, #0
 81082d0:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 81082d2:	687b      	ldr	r3, [r7, #4]
 81082d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81082d8:	2b21      	cmp	r3, #33	; 0x21
 81082da:	d160      	bne.n	810839e <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 81082dc:	687b      	ldr	r3, [r7, #4]
 81082de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81082e2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 81082e4:	e057      	b.n	8108396 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 81082e6:	687b      	ldr	r3, [r7, #4]
 81082e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 81082ec:	b29b      	uxth	r3, r3
 81082ee:	2b00      	cmp	r3, #0
 81082f0:	d133      	bne.n	810835a <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 81082f2:	687b      	ldr	r3, [r7, #4]
 81082f4:	681b      	ldr	r3, [r3, #0]
 81082f6:	3308      	adds	r3, #8
 81082f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81082fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81082fc:	e853 3f00 	ldrex	r3, [r3]
 8108300:	623b      	str	r3, [r7, #32]
   return(result);
 8108302:	6a3b      	ldr	r3, [r7, #32]
 8108304:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8108308:	63bb      	str	r3, [r7, #56]	; 0x38
 810830a:	687b      	ldr	r3, [r7, #4]
 810830c:	681b      	ldr	r3, [r3, #0]
 810830e:	3308      	adds	r3, #8
 8108310:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8108312:	633a      	str	r2, [r7, #48]	; 0x30
 8108314:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108316:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8108318:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810831a:	e841 2300 	strex	r3, r2, [r1]
 810831e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8108320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108322:	2b00      	cmp	r3, #0
 8108324:	d1e5      	bne.n	81082f2 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8108326:	687b      	ldr	r3, [r7, #4]
 8108328:	681b      	ldr	r3, [r3, #0]
 810832a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810832c:	693b      	ldr	r3, [r7, #16]
 810832e:	e853 3f00 	ldrex	r3, [r3]
 8108332:	60fb      	str	r3, [r7, #12]
   return(result);
 8108334:	68fb      	ldr	r3, [r7, #12]
 8108336:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810833a:	637b      	str	r3, [r7, #52]	; 0x34
 810833c:	687b      	ldr	r3, [r7, #4]
 810833e:	681b      	ldr	r3, [r3, #0]
 8108340:	461a      	mov	r2, r3
 8108342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8108344:	61fb      	str	r3, [r7, #28]
 8108346:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108348:	69b9      	ldr	r1, [r7, #24]
 810834a:	69fa      	ldr	r2, [r7, #28]
 810834c:	e841 2300 	strex	r3, r2, [r1]
 8108350:	617b      	str	r3, [r7, #20]
   return(result);
 8108352:	697b      	ldr	r3, [r7, #20]
 8108354:	2b00      	cmp	r3, #0
 8108356:	d1e6      	bne.n	8108326 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8108358:	e021      	b.n	810839e <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 810835a:	687b      	ldr	r3, [r7, #4]
 810835c:	681b      	ldr	r3, [r3, #0]
 810835e:	69db      	ldr	r3, [r3, #28]
 8108360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8108364:	2b00      	cmp	r3, #0
 8108366:	d013      	beq.n	8108390 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8108368:	687b      	ldr	r3, [r7, #4]
 810836a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810836c:	781a      	ldrb	r2, [r3, #0]
 810836e:	687b      	ldr	r3, [r7, #4]
 8108370:	681b      	ldr	r3, [r3, #0]
 8108372:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8108374:	687b      	ldr	r3, [r7, #4]
 8108376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8108378:	1c5a      	adds	r2, r3, #1
 810837a:	687b      	ldr	r3, [r7, #4]
 810837c:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 810837e:	687b      	ldr	r3, [r7, #4]
 8108380:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8108384:	b29b      	uxth	r3, r3
 8108386:	3b01      	subs	r3, #1
 8108388:	b29a      	uxth	r2, r3
 810838a:	687b      	ldr	r3, [r7, #4]
 810838c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8108390:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8108392:	3b01      	subs	r3, #1
 8108394:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8108396:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8108398:	2b00      	cmp	r3, #0
 810839a:	d1a4      	bne.n	81082e6 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 810839c:	e7ff      	b.n	810839e <UART_TxISR_8BIT_FIFOEN+0xd4>
 810839e:	bf00      	nop
 81083a0:	3744      	adds	r7, #68	; 0x44
 81083a2:	46bd      	mov	sp, r7
 81083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81083a8:	4770      	bx	lr

081083aa <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 81083aa:	b480      	push	{r7}
 81083ac:	b091      	sub	sp, #68	; 0x44
 81083ae:	af00      	add	r7, sp, #0
 81083b0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 81083b2:	687b      	ldr	r3, [r7, #4]
 81083b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81083b8:	2b21      	cmp	r3, #33	; 0x21
 81083ba:	d165      	bne.n	8108488 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 81083bc:	687b      	ldr	r3, [r7, #4]
 81083be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81083c2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 81083c4:	e05c      	b.n	8108480 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 81083c6:	687b      	ldr	r3, [r7, #4]
 81083c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 81083cc:	b29b      	uxth	r3, r3
 81083ce:	2b00      	cmp	r3, #0
 81083d0:	d133      	bne.n	810843a <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 81083d2:	687b      	ldr	r3, [r7, #4]
 81083d4:	681b      	ldr	r3, [r3, #0]
 81083d6:	3308      	adds	r3, #8
 81083d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81083da:	6a3b      	ldr	r3, [r7, #32]
 81083dc:	e853 3f00 	ldrex	r3, [r3]
 81083e0:	61fb      	str	r3, [r7, #28]
   return(result);
 81083e2:	69fb      	ldr	r3, [r7, #28]
 81083e4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 81083e8:	637b      	str	r3, [r7, #52]	; 0x34
 81083ea:	687b      	ldr	r3, [r7, #4]
 81083ec:	681b      	ldr	r3, [r3, #0]
 81083ee:	3308      	adds	r3, #8
 81083f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81083f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 81083f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81083f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 81083f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 81083fa:	e841 2300 	strex	r3, r2, [r1]
 81083fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8108400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108402:	2b00      	cmp	r3, #0
 8108404:	d1e5      	bne.n	81083d2 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8108406:	687b      	ldr	r3, [r7, #4]
 8108408:	681b      	ldr	r3, [r3, #0]
 810840a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810840c:	68fb      	ldr	r3, [r7, #12]
 810840e:	e853 3f00 	ldrex	r3, [r3]
 8108412:	60bb      	str	r3, [r7, #8]
   return(result);
 8108414:	68bb      	ldr	r3, [r7, #8]
 8108416:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810841a:	633b      	str	r3, [r7, #48]	; 0x30
 810841c:	687b      	ldr	r3, [r7, #4]
 810841e:	681b      	ldr	r3, [r3, #0]
 8108420:	461a      	mov	r2, r3
 8108422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108424:	61bb      	str	r3, [r7, #24]
 8108426:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108428:	6979      	ldr	r1, [r7, #20]
 810842a:	69ba      	ldr	r2, [r7, #24]
 810842c:	e841 2300 	strex	r3, r2, [r1]
 8108430:	613b      	str	r3, [r7, #16]
   return(result);
 8108432:	693b      	ldr	r3, [r7, #16]
 8108434:	2b00      	cmp	r3, #0
 8108436:	d1e6      	bne.n	8108406 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8108438:	e026      	b.n	8108488 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 810843a:	687b      	ldr	r3, [r7, #4]
 810843c:	681b      	ldr	r3, [r3, #0]
 810843e:	69db      	ldr	r3, [r3, #28]
 8108440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8108444:	2b00      	cmp	r3, #0
 8108446:	d018      	beq.n	810847a <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8108448:	687b      	ldr	r3, [r7, #4]
 810844a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810844c:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 810844e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108450:	881b      	ldrh	r3, [r3, #0]
 8108452:	461a      	mov	r2, r3
 8108454:	687b      	ldr	r3, [r7, #4]
 8108456:	681b      	ldr	r3, [r3, #0]
 8108458:	f3c2 0208 	ubfx	r2, r2, #0, #9
 810845c:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 810845e:	687b      	ldr	r3, [r7, #4]
 8108460:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8108462:	1c9a      	adds	r2, r3, #2
 8108464:	687b      	ldr	r3, [r7, #4]
 8108466:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8108468:	687b      	ldr	r3, [r7, #4]
 810846a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 810846e:	b29b      	uxth	r3, r3
 8108470:	3b01      	subs	r3, #1
 8108472:	b29a      	uxth	r2, r3
 8108474:	687b      	ldr	r3, [r7, #4]
 8108476:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 810847a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 810847c:	3b01      	subs	r3, #1
 810847e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8108480:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8108482:	2b00      	cmp	r3, #0
 8108484:	d19f      	bne.n	81083c6 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8108486:	e7ff      	b.n	8108488 <UART_TxISR_16BIT_FIFOEN+0xde>
 8108488:	bf00      	nop
 810848a:	3744      	adds	r7, #68	; 0x44
 810848c:	46bd      	mov	sp, r7
 810848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108492:	4770      	bx	lr

08108494 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8108494:	b580      	push	{r7, lr}
 8108496:	b088      	sub	sp, #32
 8108498:	af00      	add	r7, sp, #0
 810849a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 810849c:	687b      	ldr	r3, [r7, #4]
 810849e:	681b      	ldr	r3, [r3, #0]
 81084a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81084a2:	68fb      	ldr	r3, [r7, #12]
 81084a4:	e853 3f00 	ldrex	r3, [r3]
 81084a8:	60bb      	str	r3, [r7, #8]
   return(result);
 81084aa:	68bb      	ldr	r3, [r7, #8]
 81084ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 81084b0:	61fb      	str	r3, [r7, #28]
 81084b2:	687b      	ldr	r3, [r7, #4]
 81084b4:	681b      	ldr	r3, [r3, #0]
 81084b6:	461a      	mov	r2, r3
 81084b8:	69fb      	ldr	r3, [r7, #28]
 81084ba:	61bb      	str	r3, [r7, #24]
 81084bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81084be:	6979      	ldr	r1, [r7, #20]
 81084c0:	69ba      	ldr	r2, [r7, #24]
 81084c2:	e841 2300 	strex	r3, r2, [r1]
 81084c6:	613b      	str	r3, [r7, #16]
   return(result);
 81084c8:	693b      	ldr	r3, [r7, #16]
 81084ca:	2b00      	cmp	r3, #0
 81084cc:	d1e6      	bne.n	810849c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 81084ce:	687b      	ldr	r3, [r7, #4]
 81084d0:	2220      	movs	r2, #32
 81084d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 81084d6:	687b      	ldr	r3, [r7, #4]
 81084d8:	2200      	movs	r2, #0
 81084da:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 81084dc:	6878      	ldr	r0, [r7, #4]
 81084de:	f7f9 f84f 	bl	8101580 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 81084e2:	bf00      	nop
 81084e4:	3720      	adds	r7, #32
 81084e6:	46bd      	mov	sp, r7
 81084e8:	bd80      	pop	{r7, pc}

081084ea <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 81084ea:	b580      	push	{r7, lr}
 81084ec:	b096      	sub	sp, #88	; 0x58
 81084ee:	af00      	add	r7, sp, #0
 81084f0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 81084f2:	687b      	ldr	r3, [r7, #4]
 81084f4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 81084f8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 81084fc:	687b      	ldr	r3, [r7, #4]
 81084fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8108502:	2b22      	cmp	r3, #34	; 0x22
 8108504:	f040 8095 	bne.w	8108632 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8108508:	687b      	ldr	r3, [r7, #4]
 810850a:	681b      	ldr	r3, [r3, #0]
 810850c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810850e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8108512:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8108516:	b2d9      	uxtb	r1, r3
 8108518:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 810851c:	b2da      	uxtb	r2, r3
 810851e:	687b      	ldr	r3, [r7, #4]
 8108520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108522:	400a      	ands	r2, r1
 8108524:	b2d2      	uxtb	r2, r2
 8108526:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8108528:	687b      	ldr	r3, [r7, #4]
 810852a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810852c:	1c5a      	adds	r2, r3, #1
 810852e:	687b      	ldr	r3, [r7, #4]
 8108530:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8108532:	687b      	ldr	r3, [r7, #4]
 8108534:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8108538:	b29b      	uxth	r3, r3
 810853a:	3b01      	subs	r3, #1
 810853c:	b29a      	uxth	r2, r3
 810853e:	687b      	ldr	r3, [r7, #4]
 8108540:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8108544:	687b      	ldr	r3, [r7, #4]
 8108546:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 810854a:	b29b      	uxth	r3, r3
 810854c:	2b00      	cmp	r3, #0
 810854e:	d178      	bne.n	8108642 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8108550:	687b      	ldr	r3, [r7, #4]
 8108552:	681b      	ldr	r3, [r3, #0]
 8108554:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108558:	e853 3f00 	ldrex	r3, [r3]
 810855c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 810855e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8108560:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8108564:	653b      	str	r3, [r7, #80]	; 0x50
 8108566:	687b      	ldr	r3, [r7, #4]
 8108568:	681b      	ldr	r3, [r3, #0]
 810856a:	461a      	mov	r2, r3
 810856c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 810856e:	647b      	str	r3, [r7, #68]	; 0x44
 8108570:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108572:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8108574:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8108576:	e841 2300 	strex	r3, r2, [r1]
 810857a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 810857c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810857e:	2b00      	cmp	r3, #0
 8108580:	d1e6      	bne.n	8108550 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8108582:	687b      	ldr	r3, [r7, #4]
 8108584:	681b      	ldr	r3, [r3, #0]
 8108586:	3308      	adds	r3, #8
 8108588:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810858a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810858c:	e853 3f00 	ldrex	r3, [r3]
 8108590:	623b      	str	r3, [r7, #32]
   return(result);
 8108592:	6a3b      	ldr	r3, [r7, #32]
 8108594:	f023 0301 	bic.w	r3, r3, #1
 8108598:	64fb      	str	r3, [r7, #76]	; 0x4c
 810859a:	687b      	ldr	r3, [r7, #4]
 810859c:	681b      	ldr	r3, [r3, #0]
 810859e:	3308      	adds	r3, #8
 81085a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 81085a2:	633a      	str	r2, [r7, #48]	; 0x30
 81085a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81085a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 81085a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81085aa:	e841 2300 	strex	r3, r2, [r1]
 81085ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 81085b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81085b2:	2b00      	cmp	r3, #0
 81085b4:	d1e5      	bne.n	8108582 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 81085b6:	687b      	ldr	r3, [r7, #4]
 81085b8:	2220      	movs	r2, #32
 81085ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 81085be:	687b      	ldr	r3, [r7, #4]
 81085c0:	2200      	movs	r2, #0
 81085c2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 81085c4:	687b      	ldr	r3, [r7, #4]
 81085c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81085c8:	2b01      	cmp	r3, #1
 81085ca:	d12e      	bne.n	810862a <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 81085cc:	687b      	ldr	r3, [r7, #4]
 81085ce:	2200      	movs	r2, #0
 81085d0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 81085d2:	687b      	ldr	r3, [r7, #4]
 81085d4:	681b      	ldr	r3, [r3, #0]
 81085d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81085d8:	693b      	ldr	r3, [r7, #16]
 81085da:	e853 3f00 	ldrex	r3, [r3]
 81085de:	60fb      	str	r3, [r7, #12]
   return(result);
 81085e0:	68fb      	ldr	r3, [r7, #12]
 81085e2:	f023 0310 	bic.w	r3, r3, #16
 81085e6:	64bb      	str	r3, [r7, #72]	; 0x48
 81085e8:	687b      	ldr	r3, [r7, #4]
 81085ea:	681b      	ldr	r3, [r3, #0]
 81085ec:	461a      	mov	r2, r3
 81085ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 81085f0:	61fb      	str	r3, [r7, #28]
 81085f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81085f4:	69b9      	ldr	r1, [r7, #24]
 81085f6:	69fa      	ldr	r2, [r7, #28]
 81085f8:	e841 2300 	strex	r3, r2, [r1]
 81085fc:	617b      	str	r3, [r7, #20]
   return(result);
 81085fe:	697b      	ldr	r3, [r7, #20]
 8108600:	2b00      	cmp	r3, #0
 8108602:	d1e6      	bne.n	81085d2 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8108604:	687b      	ldr	r3, [r7, #4]
 8108606:	681b      	ldr	r3, [r3, #0]
 8108608:	69db      	ldr	r3, [r3, #28]
 810860a:	f003 0310 	and.w	r3, r3, #16
 810860e:	2b10      	cmp	r3, #16
 8108610:	d103      	bne.n	810861a <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8108612:	687b      	ldr	r3, [r7, #4]
 8108614:	681b      	ldr	r3, [r3, #0]
 8108616:	2210      	movs	r2, #16
 8108618:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 810861a:	687b      	ldr	r3, [r7, #4]
 810861c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8108620:	4619      	mov	r1, r3
 8108622:	6878      	ldr	r0, [r7, #4]
 8108624:	f7fe fcc4 	bl	8106fb0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8108628:	e00b      	b.n	8108642 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 810862a:	6878      	ldr	r0, [r7, #4]
 810862c:	f7f8 ffb2 	bl	8101594 <HAL_UART_RxCpltCallback>
}
 8108630:	e007      	b.n	8108642 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8108632:	687b      	ldr	r3, [r7, #4]
 8108634:	681b      	ldr	r3, [r3, #0]
 8108636:	699a      	ldr	r2, [r3, #24]
 8108638:	687b      	ldr	r3, [r7, #4]
 810863a:	681b      	ldr	r3, [r3, #0]
 810863c:	f042 0208 	orr.w	r2, r2, #8
 8108640:	619a      	str	r2, [r3, #24]
}
 8108642:	bf00      	nop
 8108644:	3758      	adds	r7, #88	; 0x58
 8108646:	46bd      	mov	sp, r7
 8108648:	bd80      	pop	{r7, pc}

0810864a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 810864a:	b580      	push	{r7, lr}
 810864c:	b096      	sub	sp, #88	; 0x58
 810864e:	af00      	add	r7, sp, #0
 8108650:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8108652:	687b      	ldr	r3, [r7, #4]
 8108654:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8108658:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 810865c:	687b      	ldr	r3, [r7, #4]
 810865e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8108662:	2b22      	cmp	r3, #34	; 0x22
 8108664:	f040 8095 	bne.w	8108792 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8108668:	687b      	ldr	r3, [r7, #4]
 810866a:	681b      	ldr	r3, [r3, #0]
 810866c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810866e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8108672:	687b      	ldr	r3, [r7, #4]
 8108674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108676:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8108678:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 810867c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8108680:	4013      	ands	r3, r2
 8108682:	b29a      	uxth	r2, r3
 8108684:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8108686:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8108688:	687b      	ldr	r3, [r7, #4]
 810868a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810868c:	1c9a      	adds	r2, r3, #2
 810868e:	687b      	ldr	r3, [r7, #4]
 8108690:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8108692:	687b      	ldr	r3, [r7, #4]
 8108694:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8108698:	b29b      	uxth	r3, r3
 810869a:	3b01      	subs	r3, #1
 810869c:	b29a      	uxth	r2, r3
 810869e:	687b      	ldr	r3, [r7, #4]
 81086a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 81086a4:	687b      	ldr	r3, [r7, #4]
 81086a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 81086aa:	b29b      	uxth	r3, r3
 81086ac:	2b00      	cmp	r3, #0
 81086ae:	d178      	bne.n	81087a2 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 81086b0:	687b      	ldr	r3, [r7, #4]
 81086b2:	681b      	ldr	r3, [r3, #0]
 81086b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81086b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81086b8:	e853 3f00 	ldrex	r3, [r3]
 81086bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 81086be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81086c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 81086c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 81086c6:	687b      	ldr	r3, [r7, #4]
 81086c8:	681b      	ldr	r3, [r3, #0]
 81086ca:	461a      	mov	r2, r3
 81086cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81086ce:	643b      	str	r3, [r7, #64]	; 0x40
 81086d0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81086d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 81086d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 81086d6:	e841 2300 	strex	r3, r2, [r1]
 81086da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 81086dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81086de:	2b00      	cmp	r3, #0
 81086e0:	d1e6      	bne.n	81086b0 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 81086e2:	687b      	ldr	r3, [r7, #4]
 81086e4:	681b      	ldr	r3, [r3, #0]
 81086e6:	3308      	adds	r3, #8
 81086e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81086ea:	6a3b      	ldr	r3, [r7, #32]
 81086ec:	e853 3f00 	ldrex	r3, [r3]
 81086f0:	61fb      	str	r3, [r7, #28]
   return(result);
 81086f2:	69fb      	ldr	r3, [r7, #28]
 81086f4:	f023 0301 	bic.w	r3, r3, #1
 81086f8:	64bb      	str	r3, [r7, #72]	; 0x48
 81086fa:	687b      	ldr	r3, [r7, #4]
 81086fc:	681b      	ldr	r3, [r3, #0]
 81086fe:	3308      	adds	r3, #8
 8108700:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8108702:	62fa      	str	r2, [r7, #44]	; 0x2c
 8108704:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108706:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8108708:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810870a:	e841 2300 	strex	r3, r2, [r1]
 810870e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8108710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108712:	2b00      	cmp	r3, #0
 8108714:	d1e5      	bne.n	81086e2 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8108716:	687b      	ldr	r3, [r7, #4]
 8108718:	2220      	movs	r2, #32
 810871a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 810871e:	687b      	ldr	r3, [r7, #4]
 8108720:	2200      	movs	r2, #0
 8108722:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8108724:	687b      	ldr	r3, [r7, #4]
 8108726:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8108728:	2b01      	cmp	r3, #1
 810872a:	d12e      	bne.n	810878a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810872c:	687b      	ldr	r3, [r7, #4]
 810872e:	2200      	movs	r2, #0
 8108730:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8108732:	687b      	ldr	r3, [r7, #4]
 8108734:	681b      	ldr	r3, [r3, #0]
 8108736:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108738:	68fb      	ldr	r3, [r7, #12]
 810873a:	e853 3f00 	ldrex	r3, [r3]
 810873e:	60bb      	str	r3, [r7, #8]
   return(result);
 8108740:	68bb      	ldr	r3, [r7, #8]
 8108742:	f023 0310 	bic.w	r3, r3, #16
 8108746:	647b      	str	r3, [r7, #68]	; 0x44
 8108748:	687b      	ldr	r3, [r7, #4]
 810874a:	681b      	ldr	r3, [r3, #0]
 810874c:	461a      	mov	r2, r3
 810874e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8108750:	61bb      	str	r3, [r7, #24]
 8108752:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108754:	6979      	ldr	r1, [r7, #20]
 8108756:	69ba      	ldr	r2, [r7, #24]
 8108758:	e841 2300 	strex	r3, r2, [r1]
 810875c:	613b      	str	r3, [r7, #16]
   return(result);
 810875e:	693b      	ldr	r3, [r7, #16]
 8108760:	2b00      	cmp	r3, #0
 8108762:	d1e6      	bne.n	8108732 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8108764:	687b      	ldr	r3, [r7, #4]
 8108766:	681b      	ldr	r3, [r3, #0]
 8108768:	69db      	ldr	r3, [r3, #28]
 810876a:	f003 0310 	and.w	r3, r3, #16
 810876e:	2b10      	cmp	r3, #16
 8108770:	d103      	bne.n	810877a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8108772:	687b      	ldr	r3, [r7, #4]
 8108774:	681b      	ldr	r3, [r3, #0]
 8108776:	2210      	movs	r2, #16
 8108778:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 810877a:	687b      	ldr	r3, [r7, #4]
 810877c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8108780:	4619      	mov	r1, r3
 8108782:	6878      	ldr	r0, [r7, #4]
 8108784:	f7fe fc14 	bl	8106fb0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8108788:	e00b      	b.n	81087a2 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 810878a:	6878      	ldr	r0, [r7, #4]
 810878c:	f7f8 ff02 	bl	8101594 <HAL_UART_RxCpltCallback>
}
 8108790:	e007      	b.n	81087a2 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8108792:	687b      	ldr	r3, [r7, #4]
 8108794:	681b      	ldr	r3, [r3, #0]
 8108796:	699a      	ldr	r2, [r3, #24]
 8108798:	687b      	ldr	r3, [r7, #4]
 810879a:	681b      	ldr	r3, [r3, #0]
 810879c:	f042 0208 	orr.w	r2, r2, #8
 81087a0:	619a      	str	r2, [r3, #24]
}
 81087a2:	bf00      	nop
 81087a4:	3758      	adds	r7, #88	; 0x58
 81087a6:	46bd      	mov	sp, r7
 81087a8:	bd80      	pop	{r7, pc}
	...

081087ac <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 81087ac:	b580      	push	{r7, lr}
 81087ae:	b0a6      	sub	sp, #152	; 0x98
 81087b0:	af00      	add	r7, sp, #0
 81087b2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 81087b4:	687b      	ldr	r3, [r7, #4]
 81087b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 81087ba:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 81087be:	687b      	ldr	r3, [r7, #4]
 81087c0:	681b      	ldr	r3, [r3, #0]
 81087c2:	69db      	ldr	r3, [r3, #28]
 81087c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 81087c8:	687b      	ldr	r3, [r7, #4]
 81087ca:	681b      	ldr	r3, [r3, #0]
 81087cc:	681b      	ldr	r3, [r3, #0]
 81087ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 81087d2:	687b      	ldr	r3, [r7, #4]
 81087d4:	681b      	ldr	r3, [r3, #0]
 81087d6:	689b      	ldr	r3, [r3, #8]
 81087d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 81087dc:	687b      	ldr	r3, [r7, #4]
 81087de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81087e2:	2b22      	cmp	r3, #34	; 0x22
 81087e4:	f040 814f 	bne.w	8108a86 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 81087e8:	687b      	ldr	r3, [r7, #4]
 81087ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 81087ee:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 81087f2:	e0f6      	b.n	81089e2 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 81087f4:	687b      	ldr	r3, [r7, #4]
 81087f6:	681b      	ldr	r3, [r3, #0]
 81087f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81087fa:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 81087fe:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8108802:	b2d9      	uxtb	r1, r3
 8108804:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8108808:	b2da      	uxtb	r2, r3
 810880a:	687b      	ldr	r3, [r7, #4]
 810880c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810880e:	400a      	ands	r2, r1
 8108810:	b2d2      	uxtb	r2, r2
 8108812:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8108814:	687b      	ldr	r3, [r7, #4]
 8108816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108818:	1c5a      	adds	r2, r3, #1
 810881a:	687b      	ldr	r3, [r7, #4]
 810881c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 810881e:	687b      	ldr	r3, [r7, #4]
 8108820:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8108824:	b29b      	uxth	r3, r3
 8108826:	3b01      	subs	r3, #1
 8108828:	b29a      	uxth	r2, r3
 810882a:	687b      	ldr	r3, [r7, #4]
 810882c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8108830:	687b      	ldr	r3, [r7, #4]
 8108832:	681b      	ldr	r3, [r3, #0]
 8108834:	69db      	ldr	r3, [r3, #28]
 8108836:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 810883a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 810883e:	f003 0307 	and.w	r3, r3, #7
 8108842:	2b00      	cmp	r3, #0
 8108844:	d053      	beq.n	81088ee <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8108846:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 810884a:	f003 0301 	and.w	r3, r3, #1
 810884e:	2b00      	cmp	r3, #0
 8108850:	d011      	beq.n	8108876 <UART_RxISR_8BIT_FIFOEN+0xca>
 8108852:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8108856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810885a:	2b00      	cmp	r3, #0
 810885c:	d00b      	beq.n	8108876 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 810885e:	687b      	ldr	r3, [r7, #4]
 8108860:	681b      	ldr	r3, [r3, #0]
 8108862:	2201      	movs	r2, #1
 8108864:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8108866:	687b      	ldr	r3, [r7, #4]
 8108868:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810886c:	f043 0201 	orr.w	r2, r3, #1
 8108870:	687b      	ldr	r3, [r7, #4]
 8108872:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8108876:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 810887a:	f003 0302 	and.w	r3, r3, #2
 810887e:	2b00      	cmp	r3, #0
 8108880:	d011      	beq.n	81088a6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8108882:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8108886:	f003 0301 	and.w	r3, r3, #1
 810888a:	2b00      	cmp	r3, #0
 810888c:	d00b      	beq.n	81088a6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 810888e:	687b      	ldr	r3, [r7, #4]
 8108890:	681b      	ldr	r3, [r3, #0]
 8108892:	2202      	movs	r2, #2
 8108894:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8108896:	687b      	ldr	r3, [r7, #4]
 8108898:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810889c:	f043 0204 	orr.w	r2, r3, #4
 81088a0:	687b      	ldr	r3, [r7, #4]
 81088a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 81088a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 81088aa:	f003 0304 	and.w	r3, r3, #4
 81088ae:	2b00      	cmp	r3, #0
 81088b0:	d011      	beq.n	81088d6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 81088b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 81088b6:	f003 0301 	and.w	r3, r3, #1
 81088ba:	2b00      	cmp	r3, #0
 81088bc:	d00b      	beq.n	81088d6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 81088be:	687b      	ldr	r3, [r7, #4]
 81088c0:	681b      	ldr	r3, [r3, #0]
 81088c2:	2204      	movs	r2, #4
 81088c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 81088c6:	687b      	ldr	r3, [r7, #4]
 81088c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81088cc:	f043 0202 	orr.w	r2, r3, #2
 81088d0:	687b      	ldr	r3, [r7, #4]
 81088d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 81088d6:	687b      	ldr	r3, [r7, #4]
 81088d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81088dc:	2b00      	cmp	r3, #0
 81088de:	d006      	beq.n	81088ee <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 81088e0:	6878      	ldr	r0, [r7, #4]
 81088e2:	f7fe fb5b 	bl	8106f9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 81088e6:	687b      	ldr	r3, [r7, #4]
 81088e8:	2200      	movs	r2, #0
 81088ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 81088ee:	687b      	ldr	r3, [r7, #4]
 81088f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 81088f4:	b29b      	uxth	r3, r3
 81088f6:	2b00      	cmp	r3, #0
 81088f8:	d173      	bne.n	81089e2 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 81088fa:	687b      	ldr	r3, [r7, #4]
 81088fc:	681b      	ldr	r3, [r3, #0]
 81088fe:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108900:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8108902:	e853 3f00 	ldrex	r3, [r3]
 8108906:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8108908:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 810890a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810890e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8108912:	687b      	ldr	r3, [r7, #4]
 8108914:	681b      	ldr	r3, [r3, #0]
 8108916:	461a      	mov	r2, r3
 8108918:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 810891c:	66bb      	str	r3, [r7, #104]	; 0x68
 810891e:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108920:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8108922:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8108924:	e841 2300 	strex	r3, r2, [r1]
 8108928:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 810892a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 810892c:	2b00      	cmp	r3, #0
 810892e:	d1e4      	bne.n	81088fa <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8108930:	687b      	ldr	r3, [r7, #4]
 8108932:	681b      	ldr	r3, [r3, #0]
 8108934:	3308      	adds	r3, #8
 8108936:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108938:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 810893a:	e853 3f00 	ldrex	r3, [r3]
 810893e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8108940:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8108942:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8108946:	f023 0301 	bic.w	r3, r3, #1
 810894a:	67fb      	str	r3, [r7, #124]	; 0x7c
 810894c:	687b      	ldr	r3, [r7, #4]
 810894e:	681b      	ldr	r3, [r3, #0]
 8108950:	3308      	adds	r3, #8
 8108952:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8108954:	657a      	str	r2, [r7, #84]	; 0x54
 8108956:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108958:	6d39      	ldr	r1, [r7, #80]	; 0x50
 810895a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 810895c:	e841 2300 	strex	r3, r2, [r1]
 8108960:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8108962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8108964:	2b00      	cmp	r3, #0
 8108966:	d1e3      	bne.n	8108930 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8108968:	687b      	ldr	r3, [r7, #4]
 810896a:	2220      	movs	r2, #32
 810896c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8108970:	687b      	ldr	r3, [r7, #4]
 8108972:	2200      	movs	r2, #0
 8108974:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8108976:	687b      	ldr	r3, [r7, #4]
 8108978:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810897a:	2b01      	cmp	r3, #1
 810897c:	d12e      	bne.n	81089dc <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810897e:	687b      	ldr	r3, [r7, #4]
 8108980:	2200      	movs	r2, #0
 8108982:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8108984:	687b      	ldr	r3, [r7, #4]
 8108986:	681b      	ldr	r3, [r3, #0]
 8108988:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810898a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810898c:	e853 3f00 	ldrex	r3, [r3]
 8108990:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8108992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108994:	f023 0310 	bic.w	r3, r3, #16
 8108998:	67bb      	str	r3, [r7, #120]	; 0x78
 810899a:	687b      	ldr	r3, [r7, #4]
 810899c:	681b      	ldr	r3, [r3, #0]
 810899e:	461a      	mov	r2, r3
 81089a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 81089a2:	643b      	str	r3, [r7, #64]	; 0x40
 81089a4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81089a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 81089a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 81089aa:	e841 2300 	strex	r3, r2, [r1]
 81089ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 81089b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81089b2:	2b00      	cmp	r3, #0
 81089b4:	d1e6      	bne.n	8108984 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 81089b6:	687b      	ldr	r3, [r7, #4]
 81089b8:	681b      	ldr	r3, [r3, #0]
 81089ba:	69db      	ldr	r3, [r3, #28]
 81089bc:	f003 0310 	and.w	r3, r3, #16
 81089c0:	2b10      	cmp	r3, #16
 81089c2:	d103      	bne.n	81089cc <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 81089c4:	687b      	ldr	r3, [r7, #4]
 81089c6:	681b      	ldr	r3, [r3, #0]
 81089c8:	2210      	movs	r2, #16
 81089ca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 81089cc:	687b      	ldr	r3, [r7, #4]
 81089ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 81089d2:	4619      	mov	r1, r3
 81089d4:	6878      	ldr	r0, [r7, #4]
 81089d6:	f7fe faeb 	bl	8106fb0 <HAL_UARTEx_RxEventCallback>
 81089da:	e002      	b.n	81089e2 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 81089dc:	6878      	ldr	r0, [r7, #4]
 81089de:	f7f8 fdd9 	bl	8101594 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 81089e2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 81089e6:	2b00      	cmp	r3, #0
 81089e8:	d006      	beq.n	81089f8 <UART_RxISR_8BIT_FIFOEN+0x24c>
 81089ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 81089ee:	f003 0320 	and.w	r3, r3, #32
 81089f2:	2b00      	cmp	r3, #0
 81089f4:	f47f aefe 	bne.w	81087f4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 81089f8:	687b      	ldr	r3, [r7, #4]
 81089fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 81089fe:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8108a02:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8108a06:	2b00      	cmp	r3, #0
 8108a08:	d045      	beq.n	8108a96 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8108a0a:	687b      	ldr	r3, [r7, #4]
 8108a0c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8108a10:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8108a14:	429a      	cmp	r2, r3
 8108a16:	d23e      	bcs.n	8108a96 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8108a18:	687b      	ldr	r3, [r7, #4]
 8108a1a:	681b      	ldr	r3, [r3, #0]
 8108a1c:	3308      	adds	r3, #8
 8108a1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108a20:	6a3b      	ldr	r3, [r7, #32]
 8108a22:	e853 3f00 	ldrex	r3, [r3]
 8108a26:	61fb      	str	r3, [r7, #28]
   return(result);
 8108a28:	69fb      	ldr	r3, [r7, #28]
 8108a2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8108a2e:	673b      	str	r3, [r7, #112]	; 0x70
 8108a30:	687b      	ldr	r3, [r7, #4]
 8108a32:	681b      	ldr	r3, [r3, #0]
 8108a34:	3308      	adds	r3, #8
 8108a36:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8108a38:	62fa      	str	r2, [r7, #44]	; 0x2c
 8108a3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108a3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8108a3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8108a40:	e841 2300 	strex	r3, r2, [r1]
 8108a44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8108a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108a48:	2b00      	cmp	r3, #0
 8108a4a:	d1e5      	bne.n	8108a18 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8108a4c:	687b      	ldr	r3, [r7, #4]
 8108a4e:	4a14      	ldr	r2, [pc, #80]	; (8108aa0 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8108a50:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8108a52:	687b      	ldr	r3, [r7, #4]
 8108a54:	681b      	ldr	r3, [r3, #0]
 8108a56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108a58:	68fb      	ldr	r3, [r7, #12]
 8108a5a:	e853 3f00 	ldrex	r3, [r3]
 8108a5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8108a60:	68bb      	ldr	r3, [r7, #8]
 8108a62:	f043 0320 	orr.w	r3, r3, #32
 8108a66:	66fb      	str	r3, [r7, #108]	; 0x6c
 8108a68:	687b      	ldr	r3, [r7, #4]
 8108a6a:	681b      	ldr	r3, [r3, #0]
 8108a6c:	461a      	mov	r2, r3
 8108a6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8108a70:	61bb      	str	r3, [r7, #24]
 8108a72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108a74:	6979      	ldr	r1, [r7, #20]
 8108a76:	69ba      	ldr	r2, [r7, #24]
 8108a78:	e841 2300 	strex	r3, r2, [r1]
 8108a7c:	613b      	str	r3, [r7, #16]
   return(result);
 8108a7e:	693b      	ldr	r3, [r7, #16]
 8108a80:	2b00      	cmp	r3, #0
 8108a82:	d1e6      	bne.n	8108a52 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8108a84:	e007      	b.n	8108a96 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8108a86:	687b      	ldr	r3, [r7, #4]
 8108a88:	681b      	ldr	r3, [r3, #0]
 8108a8a:	699a      	ldr	r2, [r3, #24]
 8108a8c:	687b      	ldr	r3, [r7, #4]
 8108a8e:	681b      	ldr	r3, [r3, #0]
 8108a90:	f042 0208 	orr.w	r2, r2, #8
 8108a94:	619a      	str	r2, [r3, #24]
}
 8108a96:	bf00      	nop
 8108a98:	3798      	adds	r7, #152	; 0x98
 8108a9a:	46bd      	mov	sp, r7
 8108a9c:	bd80      	pop	{r7, pc}
 8108a9e:	bf00      	nop
 8108aa0:	081084eb 	.word	0x081084eb

08108aa4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8108aa4:	b580      	push	{r7, lr}
 8108aa6:	b0a8      	sub	sp, #160	; 0xa0
 8108aa8:	af00      	add	r7, sp, #0
 8108aaa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8108aac:	687b      	ldr	r3, [r7, #4]
 8108aae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8108ab2:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8108ab6:	687b      	ldr	r3, [r7, #4]
 8108ab8:	681b      	ldr	r3, [r3, #0]
 8108aba:	69db      	ldr	r3, [r3, #28]
 8108abc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8108ac0:	687b      	ldr	r3, [r7, #4]
 8108ac2:	681b      	ldr	r3, [r3, #0]
 8108ac4:	681b      	ldr	r3, [r3, #0]
 8108ac6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8108aca:	687b      	ldr	r3, [r7, #4]
 8108acc:	681b      	ldr	r3, [r3, #0]
 8108ace:	689b      	ldr	r3, [r3, #8]
 8108ad0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8108ad4:	687b      	ldr	r3, [r7, #4]
 8108ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8108ada:	2b22      	cmp	r3, #34	; 0x22
 8108adc:	f040 8153 	bne.w	8108d86 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8108ae0:	687b      	ldr	r3, [r7, #4]
 8108ae2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8108ae6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8108aea:	e0fa      	b.n	8108ce2 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8108aec:	687b      	ldr	r3, [r7, #4]
 8108aee:	681b      	ldr	r3, [r3, #0]
 8108af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108af2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8108af6:	687b      	ldr	r3, [r7, #4]
 8108af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108afa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8108afe:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8108b02:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8108b06:	4013      	ands	r3, r2
 8108b08:	b29a      	uxth	r2, r3
 8108b0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8108b0e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8108b10:	687b      	ldr	r3, [r7, #4]
 8108b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108b14:	1c9a      	adds	r2, r3, #2
 8108b16:	687b      	ldr	r3, [r7, #4]
 8108b18:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8108b1a:	687b      	ldr	r3, [r7, #4]
 8108b1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8108b20:	b29b      	uxth	r3, r3
 8108b22:	3b01      	subs	r3, #1
 8108b24:	b29a      	uxth	r2, r3
 8108b26:	687b      	ldr	r3, [r7, #4]
 8108b28:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8108b2c:	687b      	ldr	r3, [r7, #4]
 8108b2e:	681b      	ldr	r3, [r3, #0]
 8108b30:	69db      	ldr	r3, [r3, #28]
 8108b32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8108b36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8108b3a:	f003 0307 	and.w	r3, r3, #7
 8108b3e:	2b00      	cmp	r3, #0
 8108b40:	d053      	beq.n	8108bea <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8108b42:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8108b46:	f003 0301 	and.w	r3, r3, #1
 8108b4a:	2b00      	cmp	r3, #0
 8108b4c:	d011      	beq.n	8108b72 <UART_RxISR_16BIT_FIFOEN+0xce>
 8108b4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8108b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8108b56:	2b00      	cmp	r3, #0
 8108b58:	d00b      	beq.n	8108b72 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8108b5a:	687b      	ldr	r3, [r7, #4]
 8108b5c:	681b      	ldr	r3, [r3, #0]
 8108b5e:	2201      	movs	r2, #1
 8108b60:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8108b62:	687b      	ldr	r3, [r7, #4]
 8108b64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8108b68:	f043 0201 	orr.w	r2, r3, #1
 8108b6c:	687b      	ldr	r3, [r7, #4]
 8108b6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8108b72:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8108b76:	f003 0302 	and.w	r3, r3, #2
 8108b7a:	2b00      	cmp	r3, #0
 8108b7c:	d011      	beq.n	8108ba2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8108b7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8108b82:	f003 0301 	and.w	r3, r3, #1
 8108b86:	2b00      	cmp	r3, #0
 8108b88:	d00b      	beq.n	8108ba2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8108b8a:	687b      	ldr	r3, [r7, #4]
 8108b8c:	681b      	ldr	r3, [r3, #0]
 8108b8e:	2202      	movs	r2, #2
 8108b90:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8108b92:	687b      	ldr	r3, [r7, #4]
 8108b94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8108b98:	f043 0204 	orr.w	r2, r3, #4
 8108b9c:	687b      	ldr	r3, [r7, #4]
 8108b9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8108ba2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8108ba6:	f003 0304 	and.w	r3, r3, #4
 8108baa:	2b00      	cmp	r3, #0
 8108bac:	d011      	beq.n	8108bd2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8108bae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8108bb2:	f003 0301 	and.w	r3, r3, #1
 8108bb6:	2b00      	cmp	r3, #0
 8108bb8:	d00b      	beq.n	8108bd2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8108bba:	687b      	ldr	r3, [r7, #4]
 8108bbc:	681b      	ldr	r3, [r3, #0]
 8108bbe:	2204      	movs	r2, #4
 8108bc0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8108bc2:	687b      	ldr	r3, [r7, #4]
 8108bc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8108bc8:	f043 0202 	orr.w	r2, r3, #2
 8108bcc:	687b      	ldr	r3, [r7, #4]
 8108bce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8108bd2:	687b      	ldr	r3, [r7, #4]
 8108bd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8108bd8:	2b00      	cmp	r3, #0
 8108bda:	d006      	beq.n	8108bea <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8108bdc:	6878      	ldr	r0, [r7, #4]
 8108bde:	f7fe f9dd 	bl	8106f9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8108be2:	687b      	ldr	r3, [r7, #4]
 8108be4:	2200      	movs	r2, #0
 8108be6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8108bea:	687b      	ldr	r3, [r7, #4]
 8108bec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8108bf0:	b29b      	uxth	r3, r3
 8108bf2:	2b00      	cmp	r3, #0
 8108bf4:	d175      	bne.n	8108ce2 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8108bf6:	687b      	ldr	r3, [r7, #4]
 8108bf8:	681b      	ldr	r3, [r3, #0]
 8108bfa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108bfc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8108bfe:	e853 3f00 	ldrex	r3, [r3]
 8108c02:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8108c04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8108c06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8108c0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8108c0e:	687b      	ldr	r3, [r7, #4]
 8108c10:	681b      	ldr	r3, [r3, #0]
 8108c12:	461a      	mov	r2, r3
 8108c14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8108c18:	66fb      	str	r3, [r7, #108]	; 0x6c
 8108c1a:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108c1c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8108c1e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8108c20:	e841 2300 	strex	r3, r2, [r1]
 8108c24:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8108c26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8108c28:	2b00      	cmp	r3, #0
 8108c2a:	d1e4      	bne.n	8108bf6 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8108c2c:	687b      	ldr	r3, [r7, #4]
 8108c2e:	681b      	ldr	r3, [r3, #0]
 8108c30:	3308      	adds	r3, #8
 8108c32:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108c34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8108c36:	e853 3f00 	ldrex	r3, [r3]
 8108c3a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8108c3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8108c3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8108c42:	f023 0301 	bic.w	r3, r3, #1
 8108c46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8108c4a:	687b      	ldr	r3, [r7, #4]
 8108c4c:	681b      	ldr	r3, [r3, #0]
 8108c4e:	3308      	adds	r3, #8
 8108c50:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8108c54:	65ba      	str	r2, [r7, #88]	; 0x58
 8108c56:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108c58:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8108c5a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8108c5c:	e841 2300 	strex	r3, r2, [r1]
 8108c60:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8108c62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8108c64:	2b00      	cmp	r3, #0
 8108c66:	d1e1      	bne.n	8108c2c <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8108c68:	687b      	ldr	r3, [r7, #4]
 8108c6a:	2220      	movs	r2, #32
 8108c6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8108c70:	687b      	ldr	r3, [r7, #4]
 8108c72:	2200      	movs	r2, #0
 8108c74:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8108c76:	687b      	ldr	r3, [r7, #4]
 8108c78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8108c7a:	2b01      	cmp	r3, #1
 8108c7c:	d12e      	bne.n	8108cdc <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8108c7e:	687b      	ldr	r3, [r7, #4]
 8108c80:	2200      	movs	r2, #0
 8108c82:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8108c84:	687b      	ldr	r3, [r7, #4]
 8108c86:	681b      	ldr	r3, [r3, #0]
 8108c88:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108c8c:	e853 3f00 	ldrex	r3, [r3]
 8108c90:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8108c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8108c94:	f023 0310 	bic.w	r3, r3, #16
 8108c98:	67fb      	str	r3, [r7, #124]	; 0x7c
 8108c9a:	687b      	ldr	r3, [r7, #4]
 8108c9c:	681b      	ldr	r3, [r3, #0]
 8108c9e:	461a      	mov	r2, r3
 8108ca0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8108ca2:	647b      	str	r3, [r7, #68]	; 0x44
 8108ca4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108ca6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8108ca8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8108caa:	e841 2300 	strex	r3, r2, [r1]
 8108cae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8108cb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108cb2:	2b00      	cmp	r3, #0
 8108cb4:	d1e6      	bne.n	8108c84 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8108cb6:	687b      	ldr	r3, [r7, #4]
 8108cb8:	681b      	ldr	r3, [r3, #0]
 8108cba:	69db      	ldr	r3, [r3, #28]
 8108cbc:	f003 0310 	and.w	r3, r3, #16
 8108cc0:	2b10      	cmp	r3, #16
 8108cc2:	d103      	bne.n	8108ccc <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8108cc4:	687b      	ldr	r3, [r7, #4]
 8108cc6:	681b      	ldr	r3, [r3, #0]
 8108cc8:	2210      	movs	r2, #16
 8108cca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8108ccc:	687b      	ldr	r3, [r7, #4]
 8108cce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8108cd2:	4619      	mov	r1, r3
 8108cd4:	6878      	ldr	r0, [r7, #4]
 8108cd6:	f7fe f96b 	bl	8106fb0 <HAL_UARTEx_RxEventCallback>
 8108cda:	e002      	b.n	8108ce2 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8108cdc:	6878      	ldr	r0, [r7, #4]
 8108cde:	f7f8 fc59 	bl	8101594 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8108ce2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8108ce6:	2b00      	cmp	r3, #0
 8108ce8:	d006      	beq.n	8108cf8 <UART_RxISR_16BIT_FIFOEN+0x254>
 8108cea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8108cee:	f003 0320 	and.w	r3, r3, #32
 8108cf2:	2b00      	cmp	r3, #0
 8108cf4:	f47f aefa 	bne.w	8108aec <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8108cf8:	687b      	ldr	r3, [r7, #4]
 8108cfa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8108cfe:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8108d02:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8108d06:	2b00      	cmp	r3, #0
 8108d08:	d045      	beq.n	8108d96 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8108d0a:	687b      	ldr	r3, [r7, #4]
 8108d0c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8108d10:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8108d14:	429a      	cmp	r2, r3
 8108d16:	d23e      	bcs.n	8108d96 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8108d18:	687b      	ldr	r3, [r7, #4]
 8108d1a:	681b      	ldr	r3, [r3, #0]
 8108d1c:	3308      	adds	r3, #8
 8108d1e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108d22:	e853 3f00 	ldrex	r3, [r3]
 8108d26:	623b      	str	r3, [r7, #32]
   return(result);
 8108d28:	6a3b      	ldr	r3, [r7, #32]
 8108d2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8108d2e:	677b      	str	r3, [r7, #116]	; 0x74
 8108d30:	687b      	ldr	r3, [r7, #4]
 8108d32:	681b      	ldr	r3, [r3, #0]
 8108d34:	3308      	adds	r3, #8
 8108d36:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8108d38:	633a      	str	r2, [r7, #48]	; 0x30
 8108d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108d3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8108d3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8108d40:	e841 2300 	strex	r3, r2, [r1]
 8108d44:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8108d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108d48:	2b00      	cmp	r3, #0
 8108d4a:	d1e5      	bne.n	8108d18 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8108d4c:	687b      	ldr	r3, [r7, #4]
 8108d4e:	4a14      	ldr	r2, [pc, #80]	; (8108da0 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8108d50:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8108d52:	687b      	ldr	r3, [r7, #4]
 8108d54:	681b      	ldr	r3, [r3, #0]
 8108d56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108d58:	693b      	ldr	r3, [r7, #16]
 8108d5a:	e853 3f00 	ldrex	r3, [r3]
 8108d5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8108d60:	68fb      	ldr	r3, [r7, #12]
 8108d62:	f043 0320 	orr.w	r3, r3, #32
 8108d66:	673b      	str	r3, [r7, #112]	; 0x70
 8108d68:	687b      	ldr	r3, [r7, #4]
 8108d6a:	681b      	ldr	r3, [r3, #0]
 8108d6c:	461a      	mov	r2, r3
 8108d6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8108d70:	61fb      	str	r3, [r7, #28]
 8108d72:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108d74:	69b9      	ldr	r1, [r7, #24]
 8108d76:	69fa      	ldr	r2, [r7, #28]
 8108d78:	e841 2300 	strex	r3, r2, [r1]
 8108d7c:	617b      	str	r3, [r7, #20]
   return(result);
 8108d7e:	697b      	ldr	r3, [r7, #20]
 8108d80:	2b00      	cmp	r3, #0
 8108d82:	d1e6      	bne.n	8108d52 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8108d84:	e007      	b.n	8108d96 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8108d86:	687b      	ldr	r3, [r7, #4]
 8108d88:	681b      	ldr	r3, [r3, #0]
 8108d8a:	699a      	ldr	r2, [r3, #24]
 8108d8c:	687b      	ldr	r3, [r7, #4]
 8108d8e:	681b      	ldr	r3, [r3, #0]
 8108d90:	f042 0208 	orr.w	r2, r2, #8
 8108d94:	619a      	str	r2, [r3, #24]
}
 8108d96:	bf00      	nop
 8108d98:	37a0      	adds	r7, #160	; 0xa0
 8108d9a:	46bd      	mov	sp, r7
 8108d9c:	bd80      	pop	{r7, pc}
 8108d9e:	bf00      	nop
 8108da0:	0810864b 	.word	0x0810864b

08108da4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8108da4:	b480      	push	{r7}
 8108da6:	b083      	sub	sp, #12
 8108da8:	af00      	add	r7, sp, #0
 8108daa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8108dac:	bf00      	nop
 8108dae:	370c      	adds	r7, #12
 8108db0:	46bd      	mov	sp, r7
 8108db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108db6:	4770      	bx	lr

08108db8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8108db8:	b480      	push	{r7}
 8108dba:	b083      	sub	sp, #12
 8108dbc:	af00      	add	r7, sp, #0
 8108dbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8108dc0:	bf00      	nop
 8108dc2:	370c      	adds	r7, #12
 8108dc4:	46bd      	mov	sp, r7
 8108dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108dca:	4770      	bx	lr

08108dcc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8108dcc:	b480      	push	{r7}
 8108dce:	b083      	sub	sp, #12
 8108dd0:	af00      	add	r7, sp, #0
 8108dd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8108dd4:	bf00      	nop
 8108dd6:	370c      	adds	r7, #12
 8108dd8:	46bd      	mov	sp, r7
 8108dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108dde:	4770      	bx	lr

08108de0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8108de0:	b480      	push	{r7}
 8108de2:	b085      	sub	sp, #20
 8108de4:	af00      	add	r7, sp, #0
 8108de6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8108de8:	687b      	ldr	r3, [r7, #4]
 8108dea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8108dee:	2b01      	cmp	r3, #1
 8108df0:	d101      	bne.n	8108df6 <HAL_UARTEx_DisableFifoMode+0x16>
 8108df2:	2302      	movs	r3, #2
 8108df4:	e027      	b.n	8108e46 <HAL_UARTEx_DisableFifoMode+0x66>
 8108df6:	687b      	ldr	r3, [r7, #4]
 8108df8:	2201      	movs	r2, #1
 8108dfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8108dfe:	687b      	ldr	r3, [r7, #4]
 8108e00:	2224      	movs	r2, #36	; 0x24
 8108e02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8108e06:	687b      	ldr	r3, [r7, #4]
 8108e08:	681b      	ldr	r3, [r3, #0]
 8108e0a:	681b      	ldr	r3, [r3, #0]
 8108e0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8108e0e:	687b      	ldr	r3, [r7, #4]
 8108e10:	681b      	ldr	r3, [r3, #0]
 8108e12:	681a      	ldr	r2, [r3, #0]
 8108e14:	687b      	ldr	r3, [r7, #4]
 8108e16:	681b      	ldr	r3, [r3, #0]
 8108e18:	f022 0201 	bic.w	r2, r2, #1
 8108e1c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8108e1e:	68fb      	ldr	r3, [r7, #12]
 8108e20:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8108e24:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8108e26:	687b      	ldr	r3, [r7, #4]
 8108e28:	2200      	movs	r2, #0
 8108e2a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8108e2c:	687b      	ldr	r3, [r7, #4]
 8108e2e:	681b      	ldr	r3, [r3, #0]
 8108e30:	68fa      	ldr	r2, [r7, #12]
 8108e32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8108e34:	687b      	ldr	r3, [r7, #4]
 8108e36:	2220      	movs	r2, #32
 8108e38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8108e3c:	687b      	ldr	r3, [r7, #4]
 8108e3e:	2200      	movs	r2, #0
 8108e40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8108e44:	2300      	movs	r3, #0
}
 8108e46:	4618      	mov	r0, r3
 8108e48:	3714      	adds	r7, #20
 8108e4a:	46bd      	mov	sp, r7
 8108e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108e50:	4770      	bx	lr

08108e52 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8108e52:	b580      	push	{r7, lr}
 8108e54:	b084      	sub	sp, #16
 8108e56:	af00      	add	r7, sp, #0
 8108e58:	6078      	str	r0, [r7, #4]
 8108e5a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8108e5c:	687b      	ldr	r3, [r7, #4]
 8108e5e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8108e62:	2b01      	cmp	r3, #1
 8108e64:	d101      	bne.n	8108e6a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8108e66:	2302      	movs	r3, #2
 8108e68:	e02d      	b.n	8108ec6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8108e6a:	687b      	ldr	r3, [r7, #4]
 8108e6c:	2201      	movs	r2, #1
 8108e6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8108e72:	687b      	ldr	r3, [r7, #4]
 8108e74:	2224      	movs	r2, #36	; 0x24
 8108e76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8108e7a:	687b      	ldr	r3, [r7, #4]
 8108e7c:	681b      	ldr	r3, [r3, #0]
 8108e7e:	681b      	ldr	r3, [r3, #0]
 8108e80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8108e82:	687b      	ldr	r3, [r7, #4]
 8108e84:	681b      	ldr	r3, [r3, #0]
 8108e86:	681a      	ldr	r2, [r3, #0]
 8108e88:	687b      	ldr	r3, [r7, #4]
 8108e8a:	681b      	ldr	r3, [r3, #0]
 8108e8c:	f022 0201 	bic.w	r2, r2, #1
 8108e90:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8108e92:	687b      	ldr	r3, [r7, #4]
 8108e94:	681b      	ldr	r3, [r3, #0]
 8108e96:	689b      	ldr	r3, [r3, #8]
 8108e98:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8108e9c:	687b      	ldr	r3, [r7, #4]
 8108e9e:	681b      	ldr	r3, [r3, #0]
 8108ea0:	683a      	ldr	r2, [r7, #0]
 8108ea2:	430a      	orrs	r2, r1
 8108ea4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8108ea6:	6878      	ldr	r0, [r7, #4]
 8108ea8:	f000 f850 	bl	8108f4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8108eac:	687b      	ldr	r3, [r7, #4]
 8108eae:	681b      	ldr	r3, [r3, #0]
 8108eb0:	68fa      	ldr	r2, [r7, #12]
 8108eb2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8108eb4:	687b      	ldr	r3, [r7, #4]
 8108eb6:	2220      	movs	r2, #32
 8108eb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8108ebc:	687b      	ldr	r3, [r7, #4]
 8108ebe:	2200      	movs	r2, #0
 8108ec0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8108ec4:	2300      	movs	r3, #0
}
 8108ec6:	4618      	mov	r0, r3
 8108ec8:	3710      	adds	r7, #16
 8108eca:	46bd      	mov	sp, r7
 8108ecc:	bd80      	pop	{r7, pc}

08108ece <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8108ece:	b580      	push	{r7, lr}
 8108ed0:	b084      	sub	sp, #16
 8108ed2:	af00      	add	r7, sp, #0
 8108ed4:	6078      	str	r0, [r7, #4]
 8108ed6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8108ed8:	687b      	ldr	r3, [r7, #4]
 8108eda:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8108ede:	2b01      	cmp	r3, #1
 8108ee0:	d101      	bne.n	8108ee6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8108ee2:	2302      	movs	r3, #2
 8108ee4:	e02d      	b.n	8108f42 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8108ee6:	687b      	ldr	r3, [r7, #4]
 8108ee8:	2201      	movs	r2, #1
 8108eea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8108eee:	687b      	ldr	r3, [r7, #4]
 8108ef0:	2224      	movs	r2, #36	; 0x24
 8108ef2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8108ef6:	687b      	ldr	r3, [r7, #4]
 8108ef8:	681b      	ldr	r3, [r3, #0]
 8108efa:	681b      	ldr	r3, [r3, #0]
 8108efc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8108efe:	687b      	ldr	r3, [r7, #4]
 8108f00:	681b      	ldr	r3, [r3, #0]
 8108f02:	681a      	ldr	r2, [r3, #0]
 8108f04:	687b      	ldr	r3, [r7, #4]
 8108f06:	681b      	ldr	r3, [r3, #0]
 8108f08:	f022 0201 	bic.w	r2, r2, #1
 8108f0c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8108f0e:	687b      	ldr	r3, [r7, #4]
 8108f10:	681b      	ldr	r3, [r3, #0]
 8108f12:	689b      	ldr	r3, [r3, #8]
 8108f14:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8108f18:	687b      	ldr	r3, [r7, #4]
 8108f1a:	681b      	ldr	r3, [r3, #0]
 8108f1c:	683a      	ldr	r2, [r7, #0]
 8108f1e:	430a      	orrs	r2, r1
 8108f20:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8108f22:	6878      	ldr	r0, [r7, #4]
 8108f24:	f000 f812 	bl	8108f4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8108f28:	687b      	ldr	r3, [r7, #4]
 8108f2a:	681b      	ldr	r3, [r3, #0]
 8108f2c:	68fa      	ldr	r2, [r7, #12]
 8108f2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8108f30:	687b      	ldr	r3, [r7, #4]
 8108f32:	2220      	movs	r2, #32
 8108f34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8108f38:	687b      	ldr	r3, [r7, #4]
 8108f3a:	2200      	movs	r2, #0
 8108f3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8108f40:	2300      	movs	r3, #0
}
 8108f42:	4618      	mov	r0, r3
 8108f44:	3710      	adds	r7, #16
 8108f46:	46bd      	mov	sp, r7
 8108f48:	bd80      	pop	{r7, pc}
	...

08108f4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8108f4c:	b480      	push	{r7}
 8108f4e:	b085      	sub	sp, #20
 8108f50:	af00      	add	r7, sp, #0
 8108f52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8108f54:	687b      	ldr	r3, [r7, #4]
 8108f56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8108f58:	2b00      	cmp	r3, #0
 8108f5a:	d108      	bne.n	8108f6e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8108f5c:	687b      	ldr	r3, [r7, #4]
 8108f5e:	2201      	movs	r2, #1
 8108f60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8108f64:	687b      	ldr	r3, [r7, #4]
 8108f66:	2201      	movs	r2, #1
 8108f68:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8108f6c:	e031      	b.n	8108fd2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8108f6e:	2310      	movs	r3, #16
 8108f70:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8108f72:	2310      	movs	r3, #16
 8108f74:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8108f76:	687b      	ldr	r3, [r7, #4]
 8108f78:	681b      	ldr	r3, [r3, #0]
 8108f7a:	689b      	ldr	r3, [r3, #8]
 8108f7c:	0e5b      	lsrs	r3, r3, #25
 8108f7e:	b2db      	uxtb	r3, r3
 8108f80:	f003 0307 	and.w	r3, r3, #7
 8108f84:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8108f86:	687b      	ldr	r3, [r7, #4]
 8108f88:	681b      	ldr	r3, [r3, #0]
 8108f8a:	689b      	ldr	r3, [r3, #8]
 8108f8c:	0f5b      	lsrs	r3, r3, #29
 8108f8e:	b2db      	uxtb	r3, r3
 8108f90:	f003 0307 	and.w	r3, r3, #7
 8108f94:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8108f96:	7bbb      	ldrb	r3, [r7, #14]
 8108f98:	7b3a      	ldrb	r2, [r7, #12]
 8108f9a:	4911      	ldr	r1, [pc, #68]	; (8108fe0 <UARTEx_SetNbDataToProcess+0x94>)
 8108f9c:	5c8a      	ldrb	r2, [r1, r2]
 8108f9e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8108fa2:	7b3a      	ldrb	r2, [r7, #12]
 8108fa4:	490f      	ldr	r1, [pc, #60]	; (8108fe4 <UARTEx_SetNbDataToProcess+0x98>)
 8108fa6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8108fa8:	fb93 f3f2 	sdiv	r3, r3, r2
 8108fac:	b29a      	uxth	r2, r3
 8108fae:	687b      	ldr	r3, [r7, #4]
 8108fb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8108fb4:	7bfb      	ldrb	r3, [r7, #15]
 8108fb6:	7b7a      	ldrb	r2, [r7, #13]
 8108fb8:	4909      	ldr	r1, [pc, #36]	; (8108fe0 <UARTEx_SetNbDataToProcess+0x94>)
 8108fba:	5c8a      	ldrb	r2, [r1, r2]
 8108fbc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8108fc0:	7b7a      	ldrb	r2, [r7, #13]
 8108fc2:	4908      	ldr	r1, [pc, #32]	; (8108fe4 <UARTEx_SetNbDataToProcess+0x98>)
 8108fc4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8108fc6:	fb93 f3f2 	sdiv	r3, r3, r2
 8108fca:	b29a      	uxth	r2, r3
 8108fcc:	687b      	ldr	r3, [r7, #4]
 8108fce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8108fd2:	bf00      	nop
 8108fd4:	3714      	adds	r7, #20
 8108fd6:	46bd      	mov	sp, r7
 8108fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108fdc:	4770      	bx	lr
 8108fde:	bf00      	nop
 8108fe0:	0810e7b0 	.word	0x0810e7b0
 8108fe4:	0810e7b8 	.word	0x0810e7b8

08108fe8 <__cvt>:
 8108fe8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8108fec:	ec55 4b10 	vmov	r4, r5, d0
 8108ff0:	2d00      	cmp	r5, #0
 8108ff2:	460e      	mov	r6, r1
 8108ff4:	4619      	mov	r1, r3
 8108ff6:	462b      	mov	r3, r5
 8108ff8:	bfbb      	ittet	lt
 8108ffa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8108ffe:	461d      	movlt	r5, r3
 8109000:	2300      	movge	r3, #0
 8109002:	232d      	movlt	r3, #45	; 0x2d
 8109004:	700b      	strb	r3, [r1, #0]
 8109006:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8109008:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 810900c:	4691      	mov	r9, r2
 810900e:	f023 0820 	bic.w	r8, r3, #32
 8109012:	bfbc      	itt	lt
 8109014:	4622      	movlt	r2, r4
 8109016:	4614      	movlt	r4, r2
 8109018:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 810901c:	d005      	beq.n	810902a <__cvt+0x42>
 810901e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8109022:	d100      	bne.n	8109026 <__cvt+0x3e>
 8109024:	3601      	adds	r6, #1
 8109026:	2102      	movs	r1, #2
 8109028:	e000      	b.n	810902c <__cvt+0x44>
 810902a:	2103      	movs	r1, #3
 810902c:	ab03      	add	r3, sp, #12
 810902e:	9301      	str	r3, [sp, #4]
 8109030:	ab02      	add	r3, sp, #8
 8109032:	9300      	str	r3, [sp, #0]
 8109034:	ec45 4b10 	vmov	d0, r4, r5
 8109038:	4653      	mov	r3, sl
 810903a:	4632      	mov	r2, r6
 810903c:	f001 ff54 	bl	810aee8 <_dtoa_r>
 8109040:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8109044:	4607      	mov	r7, r0
 8109046:	d102      	bne.n	810904e <__cvt+0x66>
 8109048:	f019 0f01 	tst.w	r9, #1
 810904c:	d022      	beq.n	8109094 <__cvt+0xac>
 810904e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8109052:	eb07 0906 	add.w	r9, r7, r6
 8109056:	d110      	bne.n	810907a <__cvt+0x92>
 8109058:	783b      	ldrb	r3, [r7, #0]
 810905a:	2b30      	cmp	r3, #48	; 0x30
 810905c:	d10a      	bne.n	8109074 <__cvt+0x8c>
 810905e:	2200      	movs	r2, #0
 8109060:	2300      	movs	r3, #0
 8109062:	4620      	mov	r0, r4
 8109064:	4629      	mov	r1, r5
 8109066:	f7f7 fdb7 	bl	8100bd8 <__aeabi_dcmpeq>
 810906a:	b918      	cbnz	r0, 8109074 <__cvt+0x8c>
 810906c:	f1c6 0601 	rsb	r6, r6, #1
 8109070:	f8ca 6000 	str.w	r6, [sl]
 8109074:	f8da 3000 	ldr.w	r3, [sl]
 8109078:	4499      	add	r9, r3
 810907a:	2200      	movs	r2, #0
 810907c:	2300      	movs	r3, #0
 810907e:	4620      	mov	r0, r4
 8109080:	4629      	mov	r1, r5
 8109082:	f7f7 fda9 	bl	8100bd8 <__aeabi_dcmpeq>
 8109086:	b108      	cbz	r0, 810908c <__cvt+0xa4>
 8109088:	f8cd 900c 	str.w	r9, [sp, #12]
 810908c:	2230      	movs	r2, #48	; 0x30
 810908e:	9b03      	ldr	r3, [sp, #12]
 8109090:	454b      	cmp	r3, r9
 8109092:	d307      	bcc.n	81090a4 <__cvt+0xbc>
 8109094:	9b03      	ldr	r3, [sp, #12]
 8109096:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8109098:	1bdb      	subs	r3, r3, r7
 810909a:	4638      	mov	r0, r7
 810909c:	6013      	str	r3, [r2, #0]
 810909e:	b004      	add	sp, #16
 81090a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81090a4:	1c59      	adds	r1, r3, #1
 81090a6:	9103      	str	r1, [sp, #12]
 81090a8:	701a      	strb	r2, [r3, #0]
 81090aa:	e7f0      	b.n	810908e <__cvt+0xa6>

081090ac <__exponent>:
 81090ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 81090ae:	4603      	mov	r3, r0
 81090b0:	2900      	cmp	r1, #0
 81090b2:	bfb8      	it	lt
 81090b4:	4249      	neglt	r1, r1
 81090b6:	f803 2b02 	strb.w	r2, [r3], #2
 81090ba:	bfb4      	ite	lt
 81090bc:	222d      	movlt	r2, #45	; 0x2d
 81090be:	222b      	movge	r2, #43	; 0x2b
 81090c0:	2909      	cmp	r1, #9
 81090c2:	7042      	strb	r2, [r0, #1]
 81090c4:	dd2a      	ble.n	810911c <__exponent+0x70>
 81090c6:	f10d 0207 	add.w	r2, sp, #7
 81090ca:	4617      	mov	r7, r2
 81090cc:	260a      	movs	r6, #10
 81090ce:	4694      	mov	ip, r2
 81090d0:	fb91 f5f6 	sdiv	r5, r1, r6
 81090d4:	fb06 1415 	mls	r4, r6, r5, r1
 81090d8:	3430      	adds	r4, #48	; 0x30
 81090da:	f80c 4c01 	strb.w	r4, [ip, #-1]
 81090de:	460c      	mov	r4, r1
 81090e0:	2c63      	cmp	r4, #99	; 0x63
 81090e2:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 81090e6:	4629      	mov	r1, r5
 81090e8:	dcf1      	bgt.n	81090ce <__exponent+0x22>
 81090ea:	3130      	adds	r1, #48	; 0x30
 81090ec:	f1ac 0402 	sub.w	r4, ip, #2
 81090f0:	f802 1c01 	strb.w	r1, [r2, #-1]
 81090f4:	1c41      	adds	r1, r0, #1
 81090f6:	4622      	mov	r2, r4
 81090f8:	42ba      	cmp	r2, r7
 81090fa:	d30a      	bcc.n	8109112 <__exponent+0x66>
 81090fc:	f10d 0209 	add.w	r2, sp, #9
 8109100:	eba2 020c 	sub.w	r2, r2, ip
 8109104:	42bc      	cmp	r4, r7
 8109106:	bf88      	it	hi
 8109108:	2200      	movhi	r2, #0
 810910a:	4413      	add	r3, r2
 810910c:	1a18      	subs	r0, r3, r0
 810910e:	b003      	add	sp, #12
 8109110:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8109112:	f812 5b01 	ldrb.w	r5, [r2], #1
 8109116:	f801 5f01 	strb.w	r5, [r1, #1]!
 810911a:	e7ed      	b.n	81090f8 <__exponent+0x4c>
 810911c:	2330      	movs	r3, #48	; 0x30
 810911e:	3130      	adds	r1, #48	; 0x30
 8109120:	7083      	strb	r3, [r0, #2]
 8109122:	70c1      	strb	r1, [r0, #3]
 8109124:	1d03      	adds	r3, r0, #4
 8109126:	e7f1      	b.n	810910c <__exponent+0x60>

08109128 <_printf_float>:
 8109128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810912c:	ed2d 8b02 	vpush	{d8}
 8109130:	b08d      	sub	sp, #52	; 0x34
 8109132:	460c      	mov	r4, r1
 8109134:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8109138:	4616      	mov	r6, r2
 810913a:	461f      	mov	r7, r3
 810913c:	4605      	mov	r5, r0
 810913e:	f001 fdcf 	bl	810ace0 <_localeconv_r>
 8109142:	f8d0 a000 	ldr.w	sl, [r0]
 8109146:	4650      	mov	r0, sl
 8109148:	f7f7 f91a 	bl	8100380 <strlen>
 810914c:	2300      	movs	r3, #0
 810914e:	930a      	str	r3, [sp, #40]	; 0x28
 8109150:	6823      	ldr	r3, [r4, #0]
 8109152:	9305      	str	r3, [sp, #20]
 8109154:	f8d8 3000 	ldr.w	r3, [r8]
 8109158:	f894 b018 	ldrb.w	fp, [r4, #24]
 810915c:	3307      	adds	r3, #7
 810915e:	f023 0307 	bic.w	r3, r3, #7
 8109162:	f103 0208 	add.w	r2, r3, #8
 8109166:	f8c8 2000 	str.w	r2, [r8]
 810916a:	e9d3 8900 	ldrd	r8, r9, [r3]
 810916e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8109172:	9307      	str	r3, [sp, #28]
 8109174:	f8cd 8018 	str.w	r8, [sp, #24]
 8109178:	ee08 0a10 	vmov	s16, r0
 810917c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8109180:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8109184:	4b9e      	ldr	r3, [pc, #632]	; (8109400 <_printf_float+0x2d8>)
 8109186:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810918a:	f7f7 fd57 	bl	8100c3c <__aeabi_dcmpun>
 810918e:	bb88      	cbnz	r0, 81091f4 <_printf_float+0xcc>
 8109190:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8109194:	4b9a      	ldr	r3, [pc, #616]	; (8109400 <_printf_float+0x2d8>)
 8109196:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810919a:	f7f7 fd31 	bl	8100c00 <__aeabi_dcmple>
 810919e:	bb48      	cbnz	r0, 81091f4 <_printf_float+0xcc>
 81091a0:	2200      	movs	r2, #0
 81091a2:	2300      	movs	r3, #0
 81091a4:	4640      	mov	r0, r8
 81091a6:	4649      	mov	r1, r9
 81091a8:	f7f7 fd20 	bl	8100bec <__aeabi_dcmplt>
 81091ac:	b110      	cbz	r0, 81091b4 <_printf_float+0x8c>
 81091ae:	232d      	movs	r3, #45	; 0x2d
 81091b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 81091b4:	4a93      	ldr	r2, [pc, #588]	; (8109404 <_printf_float+0x2dc>)
 81091b6:	4b94      	ldr	r3, [pc, #592]	; (8109408 <_printf_float+0x2e0>)
 81091b8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 81091bc:	bf94      	ite	ls
 81091be:	4690      	movls	r8, r2
 81091c0:	4698      	movhi	r8, r3
 81091c2:	2303      	movs	r3, #3
 81091c4:	6123      	str	r3, [r4, #16]
 81091c6:	9b05      	ldr	r3, [sp, #20]
 81091c8:	f023 0304 	bic.w	r3, r3, #4
 81091cc:	6023      	str	r3, [r4, #0]
 81091ce:	f04f 0900 	mov.w	r9, #0
 81091d2:	9700      	str	r7, [sp, #0]
 81091d4:	4633      	mov	r3, r6
 81091d6:	aa0b      	add	r2, sp, #44	; 0x2c
 81091d8:	4621      	mov	r1, r4
 81091da:	4628      	mov	r0, r5
 81091dc:	f000 f9da 	bl	8109594 <_printf_common>
 81091e0:	3001      	adds	r0, #1
 81091e2:	f040 8090 	bne.w	8109306 <_printf_float+0x1de>
 81091e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 81091ea:	b00d      	add	sp, #52	; 0x34
 81091ec:	ecbd 8b02 	vpop	{d8}
 81091f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81091f4:	4642      	mov	r2, r8
 81091f6:	464b      	mov	r3, r9
 81091f8:	4640      	mov	r0, r8
 81091fa:	4649      	mov	r1, r9
 81091fc:	f7f7 fd1e 	bl	8100c3c <__aeabi_dcmpun>
 8109200:	b140      	cbz	r0, 8109214 <_printf_float+0xec>
 8109202:	464b      	mov	r3, r9
 8109204:	2b00      	cmp	r3, #0
 8109206:	bfbc      	itt	lt
 8109208:	232d      	movlt	r3, #45	; 0x2d
 810920a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 810920e:	4a7f      	ldr	r2, [pc, #508]	; (810940c <_printf_float+0x2e4>)
 8109210:	4b7f      	ldr	r3, [pc, #508]	; (8109410 <_printf_float+0x2e8>)
 8109212:	e7d1      	b.n	81091b8 <_printf_float+0x90>
 8109214:	6863      	ldr	r3, [r4, #4]
 8109216:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 810921a:	9206      	str	r2, [sp, #24]
 810921c:	1c5a      	adds	r2, r3, #1
 810921e:	d13f      	bne.n	81092a0 <_printf_float+0x178>
 8109220:	2306      	movs	r3, #6
 8109222:	6063      	str	r3, [r4, #4]
 8109224:	9b05      	ldr	r3, [sp, #20]
 8109226:	6861      	ldr	r1, [r4, #4]
 8109228:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 810922c:	2300      	movs	r3, #0
 810922e:	9303      	str	r3, [sp, #12]
 8109230:	ab0a      	add	r3, sp, #40	; 0x28
 8109232:	e9cd b301 	strd	fp, r3, [sp, #4]
 8109236:	ab09      	add	r3, sp, #36	; 0x24
 8109238:	ec49 8b10 	vmov	d0, r8, r9
 810923c:	9300      	str	r3, [sp, #0]
 810923e:	6022      	str	r2, [r4, #0]
 8109240:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8109244:	4628      	mov	r0, r5
 8109246:	f7ff fecf 	bl	8108fe8 <__cvt>
 810924a:	9b06      	ldr	r3, [sp, #24]
 810924c:	9909      	ldr	r1, [sp, #36]	; 0x24
 810924e:	2b47      	cmp	r3, #71	; 0x47
 8109250:	4680      	mov	r8, r0
 8109252:	d108      	bne.n	8109266 <_printf_float+0x13e>
 8109254:	1cc8      	adds	r0, r1, #3
 8109256:	db02      	blt.n	810925e <_printf_float+0x136>
 8109258:	6863      	ldr	r3, [r4, #4]
 810925a:	4299      	cmp	r1, r3
 810925c:	dd41      	ble.n	81092e2 <_printf_float+0x1ba>
 810925e:	f1ab 0302 	sub.w	r3, fp, #2
 8109262:	fa5f fb83 	uxtb.w	fp, r3
 8109266:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 810926a:	d820      	bhi.n	81092ae <_printf_float+0x186>
 810926c:	3901      	subs	r1, #1
 810926e:	465a      	mov	r2, fp
 8109270:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8109274:	9109      	str	r1, [sp, #36]	; 0x24
 8109276:	f7ff ff19 	bl	81090ac <__exponent>
 810927a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810927c:	1813      	adds	r3, r2, r0
 810927e:	2a01      	cmp	r2, #1
 8109280:	4681      	mov	r9, r0
 8109282:	6123      	str	r3, [r4, #16]
 8109284:	dc02      	bgt.n	810928c <_printf_float+0x164>
 8109286:	6822      	ldr	r2, [r4, #0]
 8109288:	07d2      	lsls	r2, r2, #31
 810928a:	d501      	bpl.n	8109290 <_printf_float+0x168>
 810928c:	3301      	adds	r3, #1
 810928e:	6123      	str	r3, [r4, #16]
 8109290:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8109294:	2b00      	cmp	r3, #0
 8109296:	d09c      	beq.n	81091d2 <_printf_float+0xaa>
 8109298:	232d      	movs	r3, #45	; 0x2d
 810929a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810929e:	e798      	b.n	81091d2 <_printf_float+0xaa>
 81092a0:	9a06      	ldr	r2, [sp, #24]
 81092a2:	2a47      	cmp	r2, #71	; 0x47
 81092a4:	d1be      	bne.n	8109224 <_printf_float+0xfc>
 81092a6:	2b00      	cmp	r3, #0
 81092a8:	d1bc      	bne.n	8109224 <_printf_float+0xfc>
 81092aa:	2301      	movs	r3, #1
 81092ac:	e7b9      	b.n	8109222 <_printf_float+0xfa>
 81092ae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 81092b2:	d118      	bne.n	81092e6 <_printf_float+0x1be>
 81092b4:	2900      	cmp	r1, #0
 81092b6:	6863      	ldr	r3, [r4, #4]
 81092b8:	dd0b      	ble.n	81092d2 <_printf_float+0x1aa>
 81092ba:	6121      	str	r1, [r4, #16]
 81092bc:	b913      	cbnz	r3, 81092c4 <_printf_float+0x19c>
 81092be:	6822      	ldr	r2, [r4, #0]
 81092c0:	07d0      	lsls	r0, r2, #31
 81092c2:	d502      	bpl.n	81092ca <_printf_float+0x1a2>
 81092c4:	3301      	adds	r3, #1
 81092c6:	440b      	add	r3, r1
 81092c8:	6123      	str	r3, [r4, #16]
 81092ca:	65a1      	str	r1, [r4, #88]	; 0x58
 81092cc:	f04f 0900 	mov.w	r9, #0
 81092d0:	e7de      	b.n	8109290 <_printf_float+0x168>
 81092d2:	b913      	cbnz	r3, 81092da <_printf_float+0x1b2>
 81092d4:	6822      	ldr	r2, [r4, #0]
 81092d6:	07d2      	lsls	r2, r2, #31
 81092d8:	d501      	bpl.n	81092de <_printf_float+0x1b6>
 81092da:	3302      	adds	r3, #2
 81092dc:	e7f4      	b.n	81092c8 <_printf_float+0x1a0>
 81092de:	2301      	movs	r3, #1
 81092e0:	e7f2      	b.n	81092c8 <_printf_float+0x1a0>
 81092e2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 81092e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81092e8:	4299      	cmp	r1, r3
 81092ea:	db05      	blt.n	81092f8 <_printf_float+0x1d0>
 81092ec:	6823      	ldr	r3, [r4, #0]
 81092ee:	6121      	str	r1, [r4, #16]
 81092f0:	07d8      	lsls	r0, r3, #31
 81092f2:	d5ea      	bpl.n	81092ca <_printf_float+0x1a2>
 81092f4:	1c4b      	adds	r3, r1, #1
 81092f6:	e7e7      	b.n	81092c8 <_printf_float+0x1a0>
 81092f8:	2900      	cmp	r1, #0
 81092fa:	bfd4      	ite	le
 81092fc:	f1c1 0202 	rsble	r2, r1, #2
 8109300:	2201      	movgt	r2, #1
 8109302:	4413      	add	r3, r2
 8109304:	e7e0      	b.n	81092c8 <_printf_float+0x1a0>
 8109306:	6823      	ldr	r3, [r4, #0]
 8109308:	055a      	lsls	r2, r3, #21
 810930a:	d407      	bmi.n	810931c <_printf_float+0x1f4>
 810930c:	6923      	ldr	r3, [r4, #16]
 810930e:	4642      	mov	r2, r8
 8109310:	4631      	mov	r1, r6
 8109312:	4628      	mov	r0, r5
 8109314:	47b8      	blx	r7
 8109316:	3001      	adds	r0, #1
 8109318:	d12c      	bne.n	8109374 <_printf_float+0x24c>
 810931a:	e764      	b.n	81091e6 <_printf_float+0xbe>
 810931c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8109320:	f240 80e0 	bls.w	81094e4 <_printf_float+0x3bc>
 8109324:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8109328:	2200      	movs	r2, #0
 810932a:	2300      	movs	r3, #0
 810932c:	f7f7 fc54 	bl	8100bd8 <__aeabi_dcmpeq>
 8109330:	2800      	cmp	r0, #0
 8109332:	d034      	beq.n	810939e <_printf_float+0x276>
 8109334:	4a37      	ldr	r2, [pc, #220]	; (8109414 <_printf_float+0x2ec>)
 8109336:	2301      	movs	r3, #1
 8109338:	4631      	mov	r1, r6
 810933a:	4628      	mov	r0, r5
 810933c:	47b8      	blx	r7
 810933e:	3001      	adds	r0, #1
 8109340:	f43f af51 	beq.w	81091e6 <_printf_float+0xbe>
 8109344:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8109348:	429a      	cmp	r2, r3
 810934a:	db02      	blt.n	8109352 <_printf_float+0x22a>
 810934c:	6823      	ldr	r3, [r4, #0]
 810934e:	07d8      	lsls	r0, r3, #31
 8109350:	d510      	bpl.n	8109374 <_printf_float+0x24c>
 8109352:	ee18 3a10 	vmov	r3, s16
 8109356:	4652      	mov	r2, sl
 8109358:	4631      	mov	r1, r6
 810935a:	4628      	mov	r0, r5
 810935c:	47b8      	blx	r7
 810935e:	3001      	adds	r0, #1
 8109360:	f43f af41 	beq.w	81091e6 <_printf_float+0xbe>
 8109364:	f04f 0800 	mov.w	r8, #0
 8109368:	f104 091a 	add.w	r9, r4, #26
 810936c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810936e:	3b01      	subs	r3, #1
 8109370:	4543      	cmp	r3, r8
 8109372:	dc09      	bgt.n	8109388 <_printf_float+0x260>
 8109374:	6823      	ldr	r3, [r4, #0]
 8109376:	079b      	lsls	r3, r3, #30
 8109378:	f100 8107 	bmi.w	810958a <_printf_float+0x462>
 810937c:	68e0      	ldr	r0, [r4, #12]
 810937e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8109380:	4298      	cmp	r0, r3
 8109382:	bfb8      	it	lt
 8109384:	4618      	movlt	r0, r3
 8109386:	e730      	b.n	81091ea <_printf_float+0xc2>
 8109388:	2301      	movs	r3, #1
 810938a:	464a      	mov	r2, r9
 810938c:	4631      	mov	r1, r6
 810938e:	4628      	mov	r0, r5
 8109390:	47b8      	blx	r7
 8109392:	3001      	adds	r0, #1
 8109394:	f43f af27 	beq.w	81091e6 <_printf_float+0xbe>
 8109398:	f108 0801 	add.w	r8, r8, #1
 810939c:	e7e6      	b.n	810936c <_printf_float+0x244>
 810939e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81093a0:	2b00      	cmp	r3, #0
 81093a2:	dc39      	bgt.n	8109418 <_printf_float+0x2f0>
 81093a4:	4a1b      	ldr	r2, [pc, #108]	; (8109414 <_printf_float+0x2ec>)
 81093a6:	2301      	movs	r3, #1
 81093a8:	4631      	mov	r1, r6
 81093aa:	4628      	mov	r0, r5
 81093ac:	47b8      	blx	r7
 81093ae:	3001      	adds	r0, #1
 81093b0:	f43f af19 	beq.w	81091e6 <_printf_float+0xbe>
 81093b4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 81093b8:	4313      	orrs	r3, r2
 81093ba:	d102      	bne.n	81093c2 <_printf_float+0x29a>
 81093bc:	6823      	ldr	r3, [r4, #0]
 81093be:	07d9      	lsls	r1, r3, #31
 81093c0:	d5d8      	bpl.n	8109374 <_printf_float+0x24c>
 81093c2:	ee18 3a10 	vmov	r3, s16
 81093c6:	4652      	mov	r2, sl
 81093c8:	4631      	mov	r1, r6
 81093ca:	4628      	mov	r0, r5
 81093cc:	47b8      	blx	r7
 81093ce:	3001      	adds	r0, #1
 81093d0:	f43f af09 	beq.w	81091e6 <_printf_float+0xbe>
 81093d4:	f04f 0900 	mov.w	r9, #0
 81093d8:	f104 0a1a 	add.w	sl, r4, #26
 81093dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81093de:	425b      	negs	r3, r3
 81093e0:	454b      	cmp	r3, r9
 81093e2:	dc01      	bgt.n	81093e8 <_printf_float+0x2c0>
 81093e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81093e6:	e792      	b.n	810930e <_printf_float+0x1e6>
 81093e8:	2301      	movs	r3, #1
 81093ea:	4652      	mov	r2, sl
 81093ec:	4631      	mov	r1, r6
 81093ee:	4628      	mov	r0, r5
 81093f0:	47b8      	blx	r7
 81093f2:	3001      	adds	r0, #1
 81093f4:	f43f aef7 	beq.w	81091e6 <_printf_float+0xbe>
 81093f8:	f109 0901 	add.w	r9, r9, #1
 81093fc:	e7ee      	b.n	81093dc <_printf_float+0x2b4>
 81093fe:	bf00      	nop
 8109400:	7fefffff 	.word	0x7fefffff
 8109404:	0810e7c0 	.word	0x0810e7c0
 8109408:	0810e7c4 	.word	0x0810e7c4
 810940c:	0810e7c8 	.word	0x0810e7c8
 8109410:	0810e7cc 	.word	0x0810e7cc
 8109414:	0810e7d0 	.word	0x0810e7d0
 8109418:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810941a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 810941c:	429a      	cmp	r2, r3
 810941e:	bfa8      	it	ge
 8109420:	461a      	movge	r2, r3
 8109422:	2a00      	cmp	r2, #0
 8109424:	4691      	mov	r9, r2
 8109426:	dc37      	bgt.n	8109498 <_printf_float+0x370>
 8109428:	f04f 0b00 	mov.w	fp, #0
 810942c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8109430:	f104 021a 	add.w	r2, r4, #26
 8109434:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8109436:	9305      	str	r3, [sp, #20]
 8109438:	eba3 0309 	sub.w	r3, r3, r9
 810943c:	455b      	cmp	r3, fp
 810943e:	dc33      	bgt.n	81094a8 <_printf_float+0x380>
 8109440:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8109444:	429a      	cmp	r2, r3
 8109446:	db3b      	blt.n	81094c0 <_printf_float+0x398>
 8109448:	6823      	ldr	r3, [r4, #0]
 810944a:	07da      	lsls	r2, r3, #31
 810944c:	d438      	bmi.n	81094c0 <_printf_float+0x398>
 810944e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8109452:	eba2 0903 	sub.w	r9, r2, r3
 8109456:	9b05      	ldr	r3, [sp, #20]
 8109458:	1ad2      	subs	r2, r2, r3
 810945a:	4591      	cmp	r9, r2
 810945c:	bfa8      	it	ge
 810945e:	4691      	movge	r9, r2
 8109460:	f1b9 0f00 	cmp.w	r9, #0
 8109464:	dc35      	bgt.n	81094d2 <_printf_float+0x3aa>
 8109466:	f04f 0800 	mov.w	r8, #0
 810946a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810946e:	f104 0a1a 	add.w	sl, r4, #26
 8109472:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8109476:	1a9b      	subs	r3, r3, r2
 8109478:	eba3 0309 	sub.w	r3, r3, r9
 810947c:	4543      	cmp	r3, r8
 810947e:	f77f af79 	ble.w	8109374 <_printf_float+0x24c>
 8109482:	2301      	movs	r3, #1
 8109484:	4652      	mov	r2, sl
 8109486:	4631      	mov	r1, r6
 8109488:	4628      	mov	r0, r5
 810948a:	47b8      	blx	r7
 810948c:	3001      	adds	r0, #1
 810948e:	f43f aeaa 	beq.w	81091e6 <_printf_float+0xbe>
 8109492:	f108 0801 	add.w	r8, r8, #1
 8109496:	e7ec      	b.n	8109472 <_printf_float+0x34a>
 8109498:	4613      	mov	r3, r2
 810949a:	4631      	mov	r1, r6
 810949c:	4642      	mov	r2, r8
 810949e:	4628      	mov	r0, r5
 81094a0:	47b8      	blx	r7
 81094a2:	3001      	adds	r0, #1
 81094a4:	d1c0      	bne.n	8109428 <_printf_float+0x300>
 81094a6:	e69e      	b.n	81091e6 <_printf_float+0xbe>
 81094a8:	2301      	movs	r3, #1
 81094aa:	4631      	mov	r1, r6
 81094ac:	4628      	mov	r0, r5
 81094ae:	9205      	str	r2, [sp, #20]
 81094b0:	47b8      	blx	r7
 81094b2:	3001      	adds	r0, #1
 81094b4:	f43f ae97 	beq.w	81091e6 <_printf_float+0xbe>
 81094b8:	9a05      	ldr	r2, [sp, #20]
 81094ba:	f10b 0b01 	add.w	fp, fp, #1
 81094be:	e7b9      	b.n	8109434 <_printf_float+0x30c>
 81094c0:	ee18 3a10 	vmov	r3, s16
 81094c4:	4652      	mov	r2, sl
 81094c6:	4631      	mov	r1, r6
 81094c8:	4628      	mov	r0, r5
 81094ca:	47b8      	blx	r7
 81094cc:	3001      	adds	r0, #1
 81094ce:	d1be      	bne.n	810944e <_printf_float+0x326>
 81094d0:	e689      	b.n	81091e6 <_printf_float+0xbe>
 81094d2:	9a05      	ldr	r2, [sp, #20]
 81094d4:	464b      	mov	r3, r9
 81094d6:	4442      	add	r2, r8
 81094d8:	4631      	mov	r1, r6
 81094da:	4628      	mov	r0, r5
 81094dc:	47b8      	blx	r7
 81094de:	3001      	adds	r0, #1
 81094e0:	d1c1      	bne.n	8109466 <_printf_float+0x33e>
 81094e2:	e680      	b.n	81091e6 <_printf_float+0xbe>
 81094e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 81094e6:	2a01      	cmp	r2, #1
 81094e8:	dc01      	bgt.n	81094ee <_printf_float+0x3c6>
 81094ea:	07db      	lsls	r3, r3, #31
 81094ec:	d53a      	bpl.n	8109564 <_printf_float+0x43c>
 81094ee:	2301      	movs	r3, #1
 81094f0:	4642      	mov	r2, r8
 81094f2:	4631      	mov	r1, r6
 81094f4:	4628      	mov	r0, r5
 81094f6:	47b8      	blx	r7
 81094f8:	3001      	adds	r0, #1
 81094fa:	f43f ae74 	beq.w	81091e6 <_printf_float+0xbe>
 81094fe:	ee18 3a10 	vmov	r3, s16
 8109502:	4652      	mov	r2, sl
 8109504:	4631      	mov	r1, r6
 8109506:	4628      	mov	r0, r5
 8109508:	47b8      	blx	r7
 810950a:	3001      	adds	r0, #1
 810950c:	f43f ae6b 	beq.w	81091e6 <_printf_float+0xbe>
 8109510:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8109514:	2200      	movs	r2, #0
 8109516:	2300      	movs	r3, #0
 8109518:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 810951c:	f7f7 fb5c 	bl	8100bd8 <__aeabi_dcmpeq>
 8109520:	b9d8      	cbnz	r0, 810955a <_printf_float+0x432>
 8109522:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8109526:	f108 0201 	add.w	r2, r8, #1
 810952a:	4631      	mov	r1, r6
 810952c:	4628      	mov	r0, r5
 810952e:	47b8      	blx	r7
 8109530:	3001      	adds	r0, #1
 8109532:	d10e      	bne.n	8109552 <_printf_float+0x42a>
 8109534:	e657      	b.n	81091e6 <_printf_float+0xbe>
 8109536:	2301      	movs	r3, #1
 8109538:	4652      	mov	r2, sl
 810953a:	4631      	mov	r1, r6
 810953c:	4628      	mov	r0, r5
 810953e:	47b8      	blx	r7
 8109540:	3001      	adds	r0, #1
 8109542:	f43f ae50 	beq.w	81091e6 <_printf_float+0xbe>
 8109546:	f108 0801 	add.w	r8, r8, #1
 810954a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810954c:	3b01      	subs	r3, #1
 810954e:	4543      	cmp	r3, r8
 8109550:	dcf1      	bgt.n	8109536 <_printf_float+0x40e>
 8109552:	464b      	mov	r3, r9
 8109554:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8109558:	e6da      	b.n	8109310 <_printf_float+0x1e8>
 810955a:	f04f 0800 	mov.w	r8, #0
 810955e:	f104 0a1a 	add.w	sl, r4, #26
 8109562:	e7f2      	b.n	810954a <_printf_float+0x422>
 8109564:	2301      	movs	r3, #1
 8109566:	4642      	mov	r2, r8
 8109568:	e7df      	b.n	810952a <_printf_float+0x402>
 810956a:	2301      	movs	r3, #1
 810956c:	464a      	mov	r2, r9
 810956e:	4631      	mov	r1, r6
 8109570:	4628      	mov	r0, r5
 8109572:	47b8      	blx	r7
 8109574:	3001      	adds	r0, #1
 8109576:	f43f ae36 	beq.w	81091e6 <_printf_float+0xbe>
 810957a:	f108 0801 	add.w	r8, r8, #1
 810957e:	68e3      	ldr	r3, [r4, #12]
 8109580:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8109582:	1a5b      	subs	r3, r3, r1
 8109584:	4543      	cmp	r3, r8
 8109586:	dcf0      	bgt.n	810956a <_printf_float+0x442>
 8109588:	e6f8      	b.n	810937c <_printf_float+0x254>
 810958a:	f04f 0800 	mov.w	r8, #0
 810958e:	f104 0919 	add.w	r9, r4, #25
 8109592:	e7f4      	b.n	810957e <_printf_float+0x456>

08109594 <_printf_common>:
 8109594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8109598:	4616      	mov	r6, r2
 810959a:	4699      	mov	r9, r3
 810959c:	688a      	ldr	r2, [r1, #8]
 810959e:	690b      	ldr	r3, [r1, #16]
 81095a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 81095a4:	4293      	cmp	r3, r2
 81095a6:	bfb8      	it	lt
 81095a8:	4613      	movlt	r3, r2
 81095aa:	6033      	str	r3, [r6, #0]
 81095ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 81095b0:	4607      	mov	r7, r0
 81095b2:	460c      	mov	r4, r1
 81095b4:	b10a      	cbz	r2, 81095ba <_printf_common+0x26>
 81095b6:	3301      	adds	r3, #1
 81095b8:	6033      	str	r3, [r6, #0]
 81095ba:	6823      	ldr	r3, [r4, #0]
 81095bc:	0699      	lsls	r1, r3, #26
 81095be:	bf42      	ittt	mi
 81095c0:	6833      	ldrmi	r3, [r6, #0]
 81095c2:	3302      	addmi	r3, #2
 81095c4:	6033      	strmi	r3, [r6, #0]
 81095c6:	6825      	ldr	r5, [r4, #0]
 81095c8:	f015 0506 	ands.w	r5, r5, #6
 81095cc:	d106      	bne.n	81095dc <_printf_common+0x48>
 81095ce:	f104 0a19 	add.w	sl, r4, #25
 81095d2:	68e3      	ldr	r3, [r4, #12]
 81095d4:	6832      	ldr	r2, [r6, #0]
 81095d6:	1a9b      	subs	r3, r3, r2
 81095d8:	42ab      	cmp	r3, r5
 81095da:	dc26      	bgt.n	810962a <_printf_common+0x96>
 81095dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 81095e0:	1e13      	subs	r3, r2, #0
 81095e2:	6822      	ldr	r2, [r4, #0]
 81095e4:	bf18      	it	ne
 81095e6:	2301      	movne	r3, #1
 81095e8:	0692      	lsls	r2, r2, #26
 81095ea:	d42b      	bmi.n	8109644 <_printf_common+0xb0>
 81095ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 81095f0:	4649      	mov	r1, r9
 81095f2:	4638      	mov	r0, r7
 81095f4:	47c0      	blx	r8
 81095f6:	3001      	adds	r0, #1
 81095f8:	d01e      	beq.n	8109638 <_printf_common+0xa4>
 81095fa:	6823      	ldr	r3, [r4, #0]
 81095fc:	6922      	ldr	r2, [r4, #16]
 81095fe:	f003 0306 	and.w	r3, r3, #6
 8109602:	2b04      	cmp	r3, #4
 8109604:	bf02      	ittt	eq
 8109606:	68e5      	ldreq	r5, [r4, #12]
 8109608:	6833      	ldreq	r3, [r6, #0]
 810960a:	1aed      	subeq	r5, r5, r3
 810960c:	68a3      	ldr	r3, [r4, #8]
 810960e:	bf0c      	ite	eq
 8109610:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8109614:	2500      	movne	r5, #0
 8109616:	4293      	cmp	r3, r2
 8109618:	bfc4      	itt	gt
 810961a:	1a9b      	subgt	r3, r3, r2
 810961c:	18ed      	addgt	r5, r5, r3
 810961e:	2600      	movs	r6, #0
 8109620:	341a      	adds	r4, #26
 8109622:	42b5      	cmp	r5, r6
 8109624:	d11a      	bne.n	810965c <_printf_common+0xc8>
 8109626:	2000      	movs	r0, #0
 8109628:	e008      	b.n	810963c <_printf_common+0xa8>
 810962a:	2301      	movs	r3, #1
 810962c:	4652      	mov	r2, sl
 810962e:	4649      	mov	r1, r9
 8109630:	4638      	mov	r0, r7
 8109632:	47c0      	blx	r8
 8109634:	3001      	adds	r0, #1
 8109636:	d103      	bne.n	8109640 <_printf_common+0xac>
 8109638:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810963c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8109640:	3501      	adds	r5, #1
 8109642:	e7c6      	b.n	81095d2 <_printf_common+0x3e>
 8109644:	18e1      	adds	r1, r4, r3
 8109646:	1c5a      	adds	r2, r3, #1
 8109648:	2030      	movs	r0, #48	; 0x30
 810964a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 810964e:	4422      	add	r2, r4
 8109650:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8109654:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8109658:	3302      	adds	r3, #2
 810965a:	e7c7      	b.n	81095ec <_printf_common+0x58>
 810965c:	2301      	movs	r3, #1
 810965e:	4622      	mov	r2, r4
 8109660:	4649      	mov	r1, r9
 8109662:	4638      	mov	r0, r7
 8109664:	47c0      	blx	r8
 8109666:	3001      	adds	r0, #1
 8109668:	d0e6      	beq.n	8109638 <_printf_common+0xa4>
 810966a:	3601      	adds	r6, #1
 810966c:	e7d9      	b.n	8109622 <_printf_common+0x8e>
	...

08109670 <_printf_i>:
 8109670:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8109674:	7e0f      	ldrb	r7, [r1, #24]
 8109676:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8109678:	2f78      	cmp	r7, #120	; 0x78
 810967a:	4691      	mov	r9, r2
 810967c:	4680      	mov	r8, r0
 810967e:	460c      	mov	r4, r1
 8109680:	469a      	mov	sl, r3
 8109682:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8109686:	d807      	bhi.n	8109698 <_printf_i+0x28>
 8109688:	2f62      	cmp	r7, #98	; 0x62
 810968a:	d80a      	bhi.n	81096a2 <_printf_i+0x32>
 810968c:	2f00      	cmp	r7, #0
 810968e:	f000 80d4 	beq.w	810983a <_printf_i+0x1ca>
 8109692:	2f58      	cmp	r7, #88	; 0x58
 8109694:	f000 80c0 	beq.w	8109818 <_printf_i+0x1a8>
 8109698:	f104 0542 	add.w	r5, r4, #66	; 0x42
 810969c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 81096a0:	e03a      	b.n	8109718 <_printf_i+0xa8>
 81096a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 81096a6:	2b15      	cmp	r3, #21
 81096a8:	d8f6      	bhi.n	8109698 <_printf_i+0x28>
 81096aa:	a101      	add	r1, pc, #4	; (adr r1, 81096b0 <_printf_i+0x40>)
 81096ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 81096b0:	08109709 	.word	0x08109709
 81096b4:	0810971d 	.word	0x0810971d
 81096b8:	08109699 	.word	0x08109699
 81096bc:	08109699 	.word	0x08109699
 81096c0:	08109699 	.word	0x08109699
 81096c4:	08109699 	.word	0x08109699
 81096c8:	0810971d 	.word	0x0810971d
 81096cc:	08109699 	.word	0x08109699
 81096d0:	08109699 	.word	0x08109699
 81096d4:	08109699 	.word	0x08109699
 81096d8:	08109699 	.word	0x08109699
 81096dc:	08109821 	.word	0x08109821
 81096e0:	08109749 	.word	0x08109749
 81096e4:	081097db 	.word	0x081097db
 81096e8:	08109699 	.word	0x08109699
 81096ec:	08109699 	.word	0x08109699
 81096f0:	08109843 	.word	0x08109843
 81096f4:	08109699 	.word	0x08109699
 81096f8:	08109749 	.word	0x08109749
 81096fc:	08109699 	.word	0x08109699
 8109700:	08109699 	.word	0x08109699
 8109704:	081097e3 	.word	0x081097e3
 8109708:	682b      	ldr	r3, [r5, #0]
 810970a:	1d1a      	adds	r2, r3, #4
 810970c:	681b      	ldr	r3, [r3, #0]
 810970e:	602a      	str	r2, [r5, #0]
 8109710:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8109714:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8109718:	2301      	movs	r3, #1
 810971a:	e09f      	b.n	810985c <_printf_i+0x1ec>
 810971c:	6820      	ldr	r0, [r4, #0]
 810971e:	682b      	ldr	r3, [r5, #0]
 8109720:	0607      	lsls	r7, r0, #24
 8109722:	f103 0104 	add.w	r1, r3, #4
 8109726:	6029      	str	r1, [r5, #0]
 8109728:	d501      	bpl.n	810972e <_printf_i+0xbe>
 810972a:	681e      	ldr	r6, [r3, #0]
 810972c:	e003      	b.n	8109736 <_printf_i+0xc6>
 810972e:	0646      	lsls	r6, r0, #25
 8109730:	d5fb      	bpl.n	810972a <_printf_i+0xba>
 8109732:	f9b3 6000 	ldrsh.w	r6, [r3]
 8109736:	2e00      	cmp	r6, #0
 8109738:	da03      	bge.n	8109742 <_printf_i+0xd2>
 810973a:	232d      	movs	r3, #45	; 0x2d
 810973c:	4276      	negs	r6, r6
 810973e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8109742:	485a      	ldr	r0, [pc, #360]	; (81098ac <_printf_i+0x23c>)
 8109744:	230a      	movs	r3, #10
 8109746:	e012      	b.n	810976e <_printf_i+0xfe>
 8109748:	682b      	ldr	r3, [r5, #0]
 810974a:	6820      	ldr	r0, [r4, #0]
 810974c:	1d19      	adds	r1, r3, #4
 810974e:	6029      	str	r1, [r5, #0]
 8109750:	0605      	lsls	r5, r0, #24
 8109752:	d501      	bpl.n	8109758 <_printf_i+0xe8>
 8109754:	681e      	ldr	r6, [r3, #0]
 8109756:	e002      	b.n	810975e <_printf_i+0xee>
 8109758:	0641      	lsls	r1, r0, #25
 810975a:	d5fb      	bpl.n	8109754 <_printf_i+0xe4>
 810975c:	881e      	ldrh	r6, [r3, #0]
 810975e:	4853      	ldr	r0, [pc, #332]	; (81098ac <_printf_i+0x23c>)
 8109760:	2f6f      	cmp	r7, #111	; 0x6f
 8109762:	bf0c      	ite	eq
 8109764:	2308      	moveq	r3, #8
 8109766:	230a      	movne	r3, #10
 8109768:	2100      	movs	r1, #0
 810976a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 810976e:	6865      	ldr	r5, [r4, #4]
 8109770:	60a5      	str	r5, [r4, #8]
 8109772:	2d00      	cmp	r5, #0
 8109774:	bfa2      	ittt	ge
 8109776:	6821      	ldrge	r1, [r4, #0]
 8109778:	f021 0104 	bicge.w	r1, r1, #4
 810977c:	6021      	strge	r1, [r4, #0]
 810977e:	b90e      	cbnz	r6, 8109784 <_printf_i+0x114>
 8109780:	2d00      	cmp	r5, #0
 8109782:	d04b      	beq.n	810981c <_printf_i+0x1ac>
 8109784:	4615      	mov	r5, r2
 8109786:	fbb6 f1f3 	udiv	r1, r6, r3
 810978a:	fb03 6711 	mls	r7, r3, r1, r6
 810978e:	5dc7      	ldrb	r7, [r0, r7]
 8109790:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8109794:	4637      	mov	r7, r6
 8109796:	42bb      	cmp	r3, r7
 8109798:	460e      	mov	r6, r1
 810979a:	d9f4      	bls.n	8109786 <_printf_i+0x116>
 810979c:	2b08      	cmp	r3, #8
 810979e:	d10b      	bne.n	81097b8 <_printf_i+0x148>
 81097a0:	6823      	ldr	r3, [r4, #0]
 81097a2:	07de      	lsls	r6, r3, #31
 81097a4:	d508      	bpl.n	81097b8 <_printf_i+0x148>
 81097a6:	6923      	ldr	r3, [r4, #16]
 81097a8:	6861      	ldr	r1, [r4, #4]
 81097aa:	4299      	cmp	r1, r3
 81097ac:	bfde      	ittt	le
 81097ae:	2330      	movle	r3, #48	; 0x30
 81097b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 81097b4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 81097b8:	1b52      	subs	r2, r2, r5
 81097ba:	6122      	str	r2, [r4, #16]
 81097bc:	f8cd a000 	str.w	sl, [sp]
 81097c0:	464b      	mov	r3, r9
 81097c2:	aa03      	add	r2, sp, #12
 81097c4:	4621      	mov	r1, r4
 81097c6:	4640      	mov	r0, r8
 81097c8:	f7ff fee4 	bl	8109594 <_printf_common>
 81097cc:	3001      	adds	r0, #1
 81097ce:	d14a      	bne.n	8109866 <_printf_i+0x1f6>
 81097d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 81097d4:	b004      	add	sp, #16
 81097d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81097da:	6823      	ldr	r3, [r4, #0]
 81097dc:	f043 0320 	orr.w	r3, r3, #32
 81097e0:	6023      	str	r3, [r4, #0]
 81097e2:	4833      	ldr	r0, [pc, #204]	; (81098b0 <_printf_i+0x240>)
 81097e4:	2778      	movs	r7, #120	; 0x78
 81097e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 81097ea:	6823      	ldr	r3, [r4, #0]
 81097ec:	6829      	ldr	r1, [r5, #0]
 81097ee:	061f      	lsls	r7, r3, #24
 81097f0:	f851 6b04 	ldr.w	r6, [r1], #4
 81097f4:	d402      	bmi.n	81097fc <_printf_i+0x18c>
 81097f6:	065f      	lsls	r7, r3, #25
 81097f8:	bf48      	it	mi
 81097fa:	b2b6      	uxthmi	r6, r6
 81097fc:	07df      	lsls	r7, r3, #31
 81097fe:	bf48      	it	mi
 8109800:	f043 0320 	orrmi.w	r3, r3, #32
 8109804:	6029      	str	r1, [r5, #0]
 8109806:	bf48      	it	mi
 8109808:	6023      	strmi	r3, [r4, #0]
 810980a:	b91e      	cbnz	r6, 8109814 <_printf_i+0x1a4>
 810980c:	6823      	ldr	r3, [r4, #0]
 810980e:	f023 0320 	bic.w	r3, r3, #32
 8109812:	6023      	str	r3, [r4, #0]
 8109814:	2310      	movs	r3, #16
 8109816:	e7a7      	b.n	8109768 <_printf_i+0xf8>
 8109818:	4824      	ldr	r0, [pc, #144]	; (81098ac <_printf_i+0x23c>)
 810981a:	e7e4      	b.n	81097e6 <_printf_i+0x176>
 810981c:	4615      	mov	r5, r2
 810981e:	e7bd      	b.n	810979c <_printf_i+0x12c>
 8109820:	682b      	ldr	r3, [r5, #0]
 8109822:	6826      	ldr	r6, [r4, #0]
 8109824:	6961      	ldr	r1, [r4, #20]
 8109826:	1d18      	adds	r0, r3, #4
 8109828:	6028      	str	r0, [r5, #0]
 810982a:	0635      	lsls	r5, r6, #24
 810982c:	681b      	ldr	r3, [r3, #0]
 810982e:	d501      	bpl.n	8109834 <_printf_i+0x1c4>
 8109830:	6019      	str	r1, [r3, #0]
 8109832:	e002      	b.n	810983a <_printf_i+0x1ca>
 8109834:	0670      	lsls	r0, r6, #25
 8109836:	d5fb      	bpl.n	8109830 <_printf_i+0x1c0>
 8109838:	8019      	strh	r1, [r3, #0]
 810983a:	2300      	movs	r3, #0
 810983c:	6123      	str	r3, [r4, #16]
 810983e:	4615      	mov	r5, r2
 8109840:	e7bc      	b.n	81097bc <_printf_i+0x14c>
 8109842:	682b      	ldr	r3, [r5, #0]
 8109844:	1d1a      	adds	r2, r3, #4
 8109846:	602a      	str	r2, [r5, #0]
 8109848:	681d      	ldr	r5, [r3, #0]
 810984a:	6862      	ldr	r2, [r4, #4]
 810984c:	2100      	movs	r1, #0
 810984e:	4628      	mov	r0, r5
 8109850:	f7f6 fd46 	bl	81002e0 <memchr>
 8109854:	b108      	cbz	r0, 810985a <_printf_i+0x1ea>
 8109856:	1b40      	subs	r0, r0, r5
 8109858:	6060      	str	r0, [r4, #4]
 810985a:	6863      	ldr	r3, [r4, #4]
 810985c:	6123      	str	r3, [r4, #16]
 810985e:	2300      	movs	r3, #0
 8109860:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8109864:	e7aa      	b.n	81097bc <_printf_i+0x14c>
 8109866:	6923      	ldr	r3, [r4, #16]
 8109868:	462a      	mov	r2, r5
 810986a:	4649      	mov	r1, r9
 810986c:	4640      	mov	r0, r8
 810986e:	47d0      	blx	sl
 8109870:	3001      	adds	r0, #1
 8109872:	d0ad      	beq.n	81097d0 <_printf_i+0x160>
 8109874:	6823      	ldr	r3, [r4, #0]
 8109876:	079b      	lsls	r3, r3, #30
 8109878:	d413      	bmi.n	81098a2 <_printf_i+0x232>
 810987a:	68e0      	ldr	r0, [r4, #12]
 810987c:	9b03      	ldr	r3, [sp, #12]
 810987e:	4298      	cmp	r0, r3
 8109880:	bfb8      	it	lt
 8109882:	4618      	movlt	r0, r3
 8109884:	e7a6      	b.n	81097d4 <_printf_i+0x164>
 8109886:	2301      	movs	r3, #1
 8109888:	4632      	mov	r2, r6
 810988a:	4649      	mov	r1, r9
 810988c:	4640      	mov	r0, r8
 810988e:	47d0      	blx	sl
 8109890:	3001      	adds	r0, #1
 8109892:	d09d      	beq.n	81097d0 <_printf_i+0x160>
 8109894:	3501      	adds	r5, #1
 8109896:	68e3      	ldr	r3, [r4, #12]
 8109898:	9903      	ldr	r1, [sp, #12]
 810989a:	1a5b      	subs	r3, r3, r1
 810989c:	42ab      	cmp	r3, r5
 810989e:	dcf2      	bgt.n	8109886 <_printf_i+0x216>
 81098a0:	e7eb      	b.n	810987a <_printf_i+0x20a>
 81098a2:	2500      	movs	r5, #0
 81098a4:	f104 0619 	add.w	r6, r4, #25
 81098a8:	e7f5      	b.n	8109896 <_printf_i+0x226>
 81098aa:	bf00      	nop
 81098ac:	0810e7d2 	.word	0x0810e7d2
 81098b0:	0810e7e3 	.word	0x0810e7e3

081098b4 <_scanf_float>:
 81098b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81098b8:	b087      	sub	sp, #28
 81098ba:	4617      	mov	r7, r2
 81098bc:	9303      	str	r3, [sp, #12]
 81098be:	688b      	ldr	r3, [r1, #8]
 81098c0:	1e5a      	subs	r2, r3, #1
 81098c2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 81098c6:	bf83      	ittte	hi
 81098c8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 81098cc:	195b      	addhi	r3, r3, r5
 81098ce:	9302      	strhi	r3, [sp, #8]
 81098d0:	2300      	movls	r3, #0
 81098d2:	bf86      	itte	hi
 81098d4:	f240 135d 	movwhi	r3, #349	; 0x15d
 81098d8:	608b      	strhi	r3, [r1, #8]
 81098da:	9302      	strls	r3, [sp, #8]
 81098dc:	680b      	ldr	r3, [r1, #0]
 81098de:	468b      	mov	fp, r1
 81098e0:	2500      	movs	r5, #0
 81098e2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 81098e6:	f84b 3b1c 	str.w	r3, [fp], #28
 81098ea:	e9cd 5504 	strd	r5, r5, [sp, #16]
 81098ee:	4680      	mov	r8, r0
 81098f0:	460c      	mov	r4, r1
 81098f2:	465e      	mov	r6, fp
 81098f4:	46aa      	mov	sl, r5
 81098f6:	46a9      	mov	r9, r5
 81098f8:	9501      	str	r5, [sp, #4]
 81098fa:	68a2      	ldr	r2, [r4, #8]
 81098fc:	b152      	cbz	r2, 8109914 <_scanf_float+0x60>
 81098fe:	683b      	ldr	r3, [r7, #0]
 8109900:	781b      	ldrb	r3, [r3, #0]
 8109902:	2b4e      	cmp	r3, #78	; 0x4e
 8109904:	d864      	bhi.n	81099d0 <_scanf_float+0x11c>
 8109906:	2b40      	cmp	r3, #64	; 0x40
 8109908:	d83c      	bhi.n	8109984 <_scanf_float+0xd0>
 810990a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 810990e:	b2c8      	uxtb	r0, r1
 8109910:	280e      	cmp	r0, #14
 8109912:	d93a      	bls.n	810998a <_scanf_float+0xd6>
 8109914:	f1b9 0f00 	cmp.w	r9, #0
 8109918:	d003      	beq.n	8109922 <_scanf_float+0x6e>
 810991a:	6823      	ldr	r3, [r4, #0]
 810991c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8109920:	6023      	str	r3, [r4, #0]
 8109922:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8109926:	f1ba 0f01 	cmp.w	sl, #1
 810992a:	f200 8113 	bhi.w	8109b54 <_scanf_float+0x2a0>
 810992e:	455e      	cmp	r6, fp
 8109930:	f200 8105 	bhi.w	8109b3e <_scanf_float+0x28a>
 8109934:	2501      	movs	r5, #1
 8109936:	4628      	mov	r0, r5
 8109938:	b007      	add	sp, #28
 810993a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810993e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8109942:	2a0d      	cmp	r2, #13
 8109944:	d8e6      	bhi.n	8109914 <_scanf_float+0x60>
 8109946:	a101      	add	r1, pc, #4	; (adr r1, 810994c <_scanf_float+0x98>)
 8109948:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 810994c:	08109a8b 	.word	0x08109a8b
 8109950:	08109915 	.word	0x08109915
 8109954:	08109915 	.word	0x08109915
 8109958:	08109915 	.word	0x08109915
 810995c:	08109aeb 	.word	0x08109aeb
 8109960:	08109ac3 	.word	0x08109ac3
 8109964:	08109915 	.word	0x08109915
 8109968:	08109915 	.word	0x08109915
 810996c:	08109a99 	.word	0x08109a99
 8109970:	08109915 	.word	0x08109915
 8109974:	08109915 	.word	0x08109915
 8109978:	08109915 	.word	0x08109915
 810997c:	08109915 	.word	0x08109915
 8109980:	08109a51 	.word	0x08109a51
 8109984:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8109988:	e7db      	b.n	8109942 <_scanf_float+0x8e>
 810998a:	290e      	cmp	r1, #14
 810998c:	d8c2      	bhi.n	8109914 <_scanf_float+0x60>
 810998e:	a001      	add	r0, pc, #4	; (adr r0, 8109994 <_scanf_float+0xe0>)
 8109990:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8109994:	08109a43 	.word	0x08109a43
 8109998:	08109915 	.word	0x08109915
 810999c:	08109a43 	.word	0x08109a43
 81099a0:	08109ad7 	.word	0x08109ad7
 81099a4:	08109915 	.word	0x08109915
 81099a8:	081099f1 	.word	0x081099f1
 81099ac:	08109a2d 	.word	0x08109a2d
 81099b0:	08109a2d 	.word	0x08109a2d
 81099b4:	08109a2d 	.word	0x08109a2d
 81099b8:	08109a2d 	.word	0x08109a2d
 81099bc:	08109a2d 	.word	0x08109a2d
 81099c0:	08109a2d 	.word	0x08109a2d
 81099c4:	08109a2d 	.word	0x08109a2d
 81099c8:	08109a2d 	.word	0x08109a2d
 81099cc:	08109a2d 	.word	0x08109a2d
 81099d0:	2b6e      	cmp	r3, #110	; 0x6e
 81099d2:	d809      	bhi.n	81099e8 <_scanf_float+0x134>
 81099d4:	2b60      	cmp	r3, #96	; 0x60
 81099d6:	d8b2      	bhi.n	810993e <_scanf_float+0x8a>
 81099d8:	2b54      	cmp	r3, #84	; 0x54
 81099da:	d077      	beq.n	8109acc <_scanf_float+0x218>
 81099dc:	2b59      	cmp	r3, #89	; 0x59
 81099de:	d199      	bne.n	8109914 <_scanf_float+0x60>
 81099e0:	2d07      	cmp	r5, #7
 81099e2:	d197      	bne.n	8109914 <_scanf_float+0x60>
 81099e4:	2508      	movs	r5, #8
 81099e6:	e029      	b.n	8109a3c <_scanf_float+0x188>
 81099e8:	2b74      	cmp	r3, #116	; 0x74
 81099ea:	d06f      	beq.n	8109acc <_scanf_float+0x218>
 81099ec:	2b79      	cmp	r3, #121	; 0x79
 81099ee:	e7f6      	b.n	81099de <_scanf_float+0x12a>
 81099f0:	6821      	ldr	r1, [r4, #0]
 81099f2:	05c8      	lsls	r0, r1, #23
 81099f4:	d51a      	bpl.n	8109a2c <_scanf_float+0x178>
 81099f6:	9b02      	ldr	r3, [sp, #8]
 81099f8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 81099fc:	6021      	str	r1, [r4, #0]
 81099fe:	f109 0901 	add.w	r9, r9, #1
 8109a02:	b11b      	cbz	r3, 8109a0c <_scanf_float+0x158>
 8109a04:	3b01      	subs	r3, #1
 8109a06:	3201      	adds	r2, #1
 8109a08:	9302      	str	r3, [sp, #8]
 8109a0a:	60a2      	str	r2, [r4, #8]
 8109a0c:	68a3      	ldr	r3, [r4, #8]
 8109a0e:	3b01      	subs	r3, #1
 8109a10:	60a3      	str	r3, [r4, #8]
 8109a12:	6923      	ldr	r3, [r4, #16]
 8109a14:	3301      	adds	r3, #1
 8109a16:	6123      	str	r3, [r4, #16]
 8109a18:	687b      	ldr	r3, [r7, #4]
 8109a1a:	3b01      	subs	r3, #1
 8109a1c:	2b00      	cmp	r3, #0
 8109a1e:	607b      	str	r3, [r7, #4]
 8109a20:	f340 8084 	ble.w	8109b2c <_scanf_float+0x278>
 8109a24:	683b      	ldr	r3, [r7, #0]
 8109a26:	3301      	adds	r3, #1
 8109a28:	603b      	str	r3, [r7, #0]
 8109a2a:	e766      	b.n	81098fa <_scanf_float+0x46>
 8109a2c:	eb1a 0f05 	cmn.w	sl, r5
 8109a30:	f47f af70 	bne.w	8109914 <_scanf_float+0x60>
 8109a34:	6822      	ldr	r2, [r4, #0]
 8109a36:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8109a3a:	6022      	str	r2, [r4, #0]
 8109a3c:	f806 3b01 	strb.w	r3, [r6], #1
 8109a40:	e7e4      	b.n	8109a0c <_scanf_float+0x158>
 8109a42:	6822      	ldr	r2, [r4, #0]
 8109a44:	0610      	lsls	r0, r2, #24
 8109a46:	f57f af65 	bpl.w	8109914 <_scanf_float+0x60>
 8109a4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8109a4e:	e7f4      	b.n	8109a3a <_scanf_float+0x186>
 8109a50:	f1ba 0f00 	cmp.w	sl, #0
 8109a54:	d10e      	bne.n	8109a74 <_scanf_float+0x1c0>
 8109a56:	f1b9 0f00 	cmp.w	r9, #0
 8109a5a:	d10e      	bne.n	8109a7a <_scanf_float+0x1c6>
 8109a5c:	6822      	ldr	r2, [r4, #0]
 8109a5e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8109a62:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8109a66:	d108      	bne.n	8109a7a <_scanf_float+0x1c6>
 8109a68:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8109a6c:	6022      	str	r2, [r4, #0]
 8109a6e:	f04f 0a01 	mov.w	sl, #1
 8109a72:	e7e3      	b.n	8109a3c <_scanf_float+0x188>
 8109a74:	f1ba 0f02 	cmp.w	sl, #2
 8109a78:	d055      	beq.n	8109b26 <_scanf_float+0x272>
 8109a7a:	2d01      	cmp	r5, #1
 8109a7c:	d002      	beq.n	8109a84 <_scanf_float+0x1d0>
 8109a7e:	2d04      	cmp	r5, #4
 8109a80:	f47f af48 	bne.w	8109914 <_scanf_float+0x60>
 8109a84:	3501      	adds	r5, #1
 8109a86:	b2ed      	uxtb	r5, r5
 8109a88:	e7d8      	b.n	8109a3c <_scanf_float+0x188>
 8109a8a:	f1ba 0f01 	cmp.w	sl, #1
 8109a8e:	f47f af41 	bne.w	8109914 <_scanf_float+0x60>
 8109a92:	f04f 0a02 	mov.w	sl, #2
 8109a96:	e7d1      	b.n	8109a3c <_scanf_float+0x188>
 8109a98:	b97d      	cbnz	r5, 8109aba <_scanf_float+0x206>
 8109a9a:	f1b9 0f00 	cmp.w	r9, #0
 8109a9e:	f47f af3c 	bne.w	810991a <_scanf_float+0x66>
 8109aa2:	6822      	ldr	r2, [r4, #0]
 8109aa4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8109aa8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8109aac:	f47f af39 	bne.w	8109922 <_scanf_float+0x6e>
 8109ab0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8109ab4:	6022      	str	r2, [r4, #0]
 8109ab6:	2501      	movs	r5, #1
 8109ab8:	e7c0      	b.n	8109a3c <_scanf_float+0x188>
 8109aba:	2d03      	cmp	r5, #3
 8109abc:	d0e2      	beq.n	8109a84 <_scanf_float+0x1d0>
 8109abe:	2d05      	cmp	r5, #5
 8109ac0:	e7de      	b.n	8109a80 <_scanf_float+0x1cc>
 8109ac2:	2d02      	cmp	r5, #2
 8109ac4:	f47f af26 	bne.w	8109914 <_scanf_float+0x60>
 8109ac8:	2503      	movs	r5, #3
 8109aca:	e7b7      	b.n	8109a3c <_scanf_float+0x188>
 8109acc:	2d06      	cmp	r5, #6
 8109ace:	f47f af21 	bne.w	8109914 <_scanf_float+0x60>
 8109ad2:	2507      	movs	r5, #7
 8109ad4:	e7b2      	b.n	8109a3c <_scanf_float+0x188>
 8109ad6:	6822      	ldr	r2, [r4, #0]
 8109ad8:	0591      	lsls	r1, r2, #22
 8109ada:	f57f af1b 	bpl.w	8109914 <_scanf_float+0x60>
 8109ade:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8109ae2:	6022      	str	r2, [r4, #0]
 8109ae4:	f8cd 9004 	str.w	r9, [sp, #4]
 8109ae8:	e7a8      	b.n	8109a3c <_scanf_float+0x188>
 8109aea:	6822      	ldr	r2, [r4, #0]
 8109aec:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8109af0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8109af4:	d006      	beq.n	8109b04 <_scanf_float+0x250>
 8109af6:	0550      	lsls	r0, r2, #21
 8109af8:	f57f af0c 	bpl.w	8109914 <_scanf_float+0x60>
 8109afc:	f1b9 0f00 	cmp.w	r9, #0
 8109b00:	f43f af0f 	beq.w	8109922 <_scanf_float+0x6e>
 8109b04:	0591      	lsls	r1, r2, #22
 8109b06:	bf58      	it	pl
 8109b08:	9901      	ldrpl	r1, [sp, #4]
 8109b0a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8109b0e:	bf58      	it	pl
 8109b10:	eba9 0101 	subpl.w	r1, r9, r1
 8109b14:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8109b18:	bf58      	it	pl
 8109b1a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8109b1e:	6022      	str	r2, [r4, #0]
 8109b20:	f04f 0900 	mov.w	r9, #0
 8109b24:	e78a      	b.n	8109a3c <_scanf_float+0x188>
 8109b26:	f04f 0a03 	mov.w	sl, #3
 8109b2a:	e787      	b.n	8109a3c <_scanf_float+0x188>
 8109b2c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8109b30:	4639      	mov	r1, r7
 8109b32:	4640      	mov	r0, r8
 8109b34:	4798      	blx	r3
 8109b36:	2800      	cmp	r0, #0
 8109b38:	f43f aedf 	beq.w	81098fa <_scanf_float+0x46>
 8109b3c:	e6ea      	b.n	8109914 <_scanf_float+0x60>
 8109b3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8109b42:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8109b46:	463a      	mov	r2, r7
 8109b48:	4640      	mov	r0, r8
 8109b4a:	4798      	blx	r3
 8109b4c:	6923      	ldr	r3, [r4, #16]
 8109b4e:	3b01      	subs	r3, #1
 8109b50:	6123      	str	r3, [r4, #16]
 8109b52:	e6ec      	b.n	810992e <_scanf_float+0x7a>
 8109b54:	1e6b      	subs	r3, r5, #1
 8109b56:	2b06      	cmp	r3, #6
 8109b58:	d825      	bhi.n	8109ba6 <_scanf_float+0x2f2>
 8109b5a:	2d02      	cmp	r5, #2
 8109b5c:	d836      	bhi.n	8109bcc <_scanf_float+0x318>
 8109b5e:	455e      	cmp	r6, fp
 8109b60:	f67f aee8 	bls.w	8109934 <_scanf_float+0x80>
 8109b64:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8109b68:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8109b6c:	463a      	mov	r2, r7
 8109b6e:	4640      	mov	r0, r8
 8109b70:	4798      	blx	r3
 8109b72:	6923      	ldr	r3, [r4, #16]
 8109b74:	3b01      	subs	r3, #1
 8109b76:	6123      	str	r3, [r4, #16]
 8109b78:	e7f1      	b.n	8109b5e <_scanf_float+0x2aa>
 8109b7a:	9802      	ldr	r0, [sp, #8]
 8109b7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8109b80:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8109b84:	9002      	str	r0, [sp, #8]
 8109b86:	463a      	mov	r2, r7
 8109b88:	4640      	mov	r0, r8
 8109b8a:	4798      	blx	r3
 8109b8c:	6923      	ldr	r3, [r4, #16]
 8109b8e:	3b01      	subs	r3, #1
 8109b90:	6123      	str	r3, [r4, #16]
 8109b92:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8109b96:	fa5f fa8a 	uxtb.w	sl, sl
 8109b9a:	f1ba 0f02 	cmp.w	sl, #2
 8109b9e:	d1ec      	bne.n	8109b7a <_scanf_float+0x2c6>
 8109ba0:	3d03      	subs	r5, #3
 8109ba2:	b2ed      	uxtb	r5, r5
 8109ba4:	1b76      	subs	r6, r6, r5
 8109ba6:	6823      	ldr	r3, [r4, #0]
 8109ba8:	05da      	lsls	r2, r3, #23
 8109baa:	d52f      	bpl.n	8109c0c <_scanf_float+0x358>
 8109bac:	055b      	lsls	r3, r3, #21
 8109bae:	d510      	bpl.n	8109bd2 <_scanf_float+0x31e>
 8109bb0:	455e      	cmp	r6, fp
 8109bb2:	f67f aebf 	bls.w	8109934 <_scanf_float+0x80>
 8109bb6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8109bba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8109bbe:	463a      	mov	r2, r7
 8109bc0:	4640      	mov	r0, r8
 8109bc2:	4798      	blx	r3
 8109bc4:	6923      	ldr	r3, [r4, #16]
 8109bc6:	3b01      	subs	r3, #1
 8109bc8:	6123      	str	r3, [r4, #16]
 8109bca:	e7f1      	b.n	8109bb0 <_scanf_float+0x2fc>
 8109bcc:	46aa      	mov	sl, r5
 8109bce:	9602      	str	r6, [sp, #8]
 8109bd0:	e7df      	b.n	8109b92 <_scanf_float+0x2de>
 8109bd2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8109bd6:	6923      	ldr	r3, [r4, #16]
 8109bd8:	2965      	cmp	r1, #101	; 0x65
 8109bda:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8109bde:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8109be2:	6123      	str	r3, [r4, #16]
 8109be4:	d00c      	beq.n	8109c00 <_scanf_float+0x34c>
 8109be6:	2945      	cmp	r1, #69	; 0x45
 8109be8:	d00a      	beq.n	8109c00 <_scanf_float+0x34c>
 8109bea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8109bee:	463a      	mov	r2, r7
 8109bf0:	4640      	mov	r0, r8
 8109bf2:	4798      	blx	r3
 8109bf4:	6923      	ldr	r3, [r4, #16]
 8109bf6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8109bfa:	3b01      	subs	r3, #1
 8109bfc:	1eb5      	subs	r5, r6, #2
 8109bfe:	6123      	str	r3, [r4, #16]
 8109c00:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8109c04:	463a      	mov	r2, r7
 8109c06:	4640      	mov	r0, r8
 8109c08:	4798      	blx	r3
 8109c0a:	462e      	mov	r6, r5
 8109c0c:	6825      	ldr	r5, [r4, #0]
 8109c0e:	f015 0510 	ands.w	r5, r5, #16
 8109c12:	d158      	bne.n	8109cc6 <_scanf_float+0x412>
 8109c14:	7035      	strb	r5, [r6, #0]
 8109c16:	6823      	ldr	r3, [r4, #0]
 8109c18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8109c1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8109c20:	d11c      	bne.n	8109c5c <_scanf_float+0x3a8>
 8109c22:	9b01      	ldr	r3, [sp, #4]
 8109c24:	454b      	cmp	r3, r9
 8109c26:	eba3 0209 	sub.w	r2, r3, r9
 8109c2a:	d124      	bne.n	8109c76 <_scanf_float+0x3c2>
 8109c2c:	2200      	movs	r2, #0
 8109c2e:	4659      	mov	r1, fp
 8109c30:	4640      	mov	r0, r8
 8109c32:	f000 ff79 	bl	810ab28 <_strtod_r>
 8109c36:	9b03      	ldr	r3, [sp, #12]
 8109c38:	6821      	ldr	r1, [r4, #0]
 8109c3a:	681b      	ldr	r3, [r3, #0]
 8109c3c:	f011 0f02 	tst.w	r1, #2
 8109c40:	ec57 6b10 	vmov	r6, r7, d0
 8109c44:	f103 0204 	add.w	r2, r3, #4
 8109c48:	d020      	beq.n	8109c8c <_scanf_float+0x3d8>
 8109c4a:	9903      	ldr	r1, [sp, #12]
 8109c4c:	600a      	str	r2, [r1, #0]
 8109c4e:	681b      	ldr	r3, [r3, #0]
 8109c50:	e9c3 6700 	strd	r6, r7, [r3]
 8109c54:	68e3      	ldr	r3, [r4, #12]
 8109c56:	3301      	adds	r3, #1
 8109c58:	60e3      	str	r3, [r4, #12]
 8109c5a:	e66c      	b.n	8109936 <_scanf_float+0x82>
 8109c5c:	9b04      	ldr	r3, [sp, #16]
 8109c5e:	2b00      	cmp	r3, #0
 8109c60:	d0e4      	beq.n	8109c2c <_scanf_float+0x378>
 8109c62:	9905      	ldr	r1, [sp, #20]
 8109c64:	230a      	movs	r3, #10
 8109c66:	462a      	mov	r2, r5
 8109c68:	3101      	adds	r1, #1
 8109c6a:	4640      	mov	r0, r8
 8109c6c:	f000 ffe4 	bl	810ac38 <_strtol_r>
 8109c70:	9b04      	ldr	r3, [sp, #16]
 8109c72:	9e05      	ldr	r6, [sp, #20]
 8109c74:	1ac2      	subs	r2, r0, r3
 8109c76:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8109c7a:	429e      	cmp	r6, r3
 8109c7c:	bf28      	it	cs
 8109c7e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8109c82:	4912      	ldr	r1, [pc, #72]	; (8109ccc <_scanf_float+0x418>)
 8109c84:	4630      	mov	r0, r6
 8109c86:	f000 f825 	bl	8109cd4 <siprintf>
 8109c8a:	e7cf      	b.n	8109c2c <_scanf_float+0x378>
 8109c8c:	f011 0f04 	tst.w	r1, #4
 8109c90:	9903      	ldr	r1, [sp, #12]
 8109c92:	600a      	str	r2, [r1, #0]
 8109c94:	d1db      	bne.n	8109c4e <_scanf_float+0x39a>
 8109c96:	f8d3 8000 	ldr.w	r8, [r3]
 8109c9a:	ee10 2a10 	vmov	r2, s0
 8109c9e:	ee10 0a10 	vmov	r0, s0
 8109ca2:	463b      	mov	r3, r7
 8109ca4:	4639      	mov	r1, r7
 8109ca6:	f7f6 ffc9 	bl	8100c3c <__aeabi_dcmpun>
 8109caa:	b128      	cbz	r0, 8109cb8 <_scanf_float+0x404>
 8109cac:	4808      	ldr	r0, [pc, #32]	; (8109cd0 <_scanf_float+0x41c>)
 8109cae:	f001 f86f 	bl	810ad90 <nanf>
 8109cb2:	ed88 0a00 	vstr	s0, [r8]
 8109cb6:	e7cd      	b.n	8109c54 <_scanf_float+0x3a0>
 8109cb8:	4630      	mov	r0, r6
 8109cba:	4639      	mov	r1, r7
 8109cbc:	f7f7 f81c 	bl	8100cf8 <__aeabi_d2f>
 8109cc0:	f8c8 0000 	str.w	r0, [r8]
 8109cc4:	e7c6      	b.n	8109c54 <_scanf_float+0x3a0>
 8109cc6:	2500      	movs	r5, #0
 8109cc8:	e635      	b.n	8109936 <_scanf_float+0x82>
 8109cca:	bf00      	nop
 8109ccc:	0810e7f4 	.word	0x0810e7f4
 8109cd0:	0810ea04 	.word	0x0810ea04

08109cd4 <siprintf>:
 8109cd4:	b40e      	push	{r1, r2, r3}
 8109cd6:	b500      	push	{lr}
 8109cd8:	b09c      	sub	sp, #112	; 0x70
 8109cda:	ab1d      	add	r3, sp, #116	; 0x74
 8109cdc:	9002      	str	r0, [sp, #8]
 8109cde:	9006      	str	r0, [sp, #24]
 8109ce0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8109ce4:	4809      	ldr	r0, [pc, #36]	; (8109d0c <siprintf+0x38>)
 8109ce6:	9107      	str	r1, [sp, #28]
 8109ce8:	9104      	str	r1, [sp, #16]
 8109cea:	4909      	ldr	r1, [pc, #36]	; (8109d10 <siprintf+0x3c>)
 8109cec:	f853 2b04 	ldr.w	r2, [r3], #4
 8109cf0:	9105      	str	r1, [sp, #20]
 8109cf2:	6800      	ldr	r0, [r0, #0]
 8109cf4:	9301      	str	r3, [sp, #4]
 8109cf6:	a902      	add	r1, sp, #8
 8109cf8:	f002 fa9a 	bl	810c230 <_svfiprintf_r>
 8109cfc:	9b02      	ldr	r3, [sp, #8]
 8109cfe:	2200      	movs	r2, #0
 8109d00:	701a      	strb	r2, [r3, #0]
 8109d02:	b01c      	add	sp, #112	; 0x70
 8109d04:	f85d eb04 	ldr.w	lr, [sp], #4
 8109d08:	b003      	add	sp, #12
 8109d0a:	4770      	bx	lr
 8109d0c:	100001d4 	.word	0x100001d4
 8109d10:	ffff0208 	.word	0xffff0208

08109d14 <srand>:
 8109d14:	b538      	push	{r3, r4, r5, lr}
 8109d16:	4b10      	ldr	r3, [pc, #64]	; (8109d58 <srand+0x44>)
 8109d18:	681d      	ldr	r5, [r3, #0]
 8109d1a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8109d1c:	4604      	mov	r4, r0
 8109d1e:	b9b3      	cbnz	r3, 8109d4e <srand+0x3a>
 8109d20:	2018      	movs	r0, #24
 8109d22:	f002 fb83 	bl	810c42c <malloc>
 8109d26:	4602      	mov	r2, r0
 8109d28:	6328      	str	r0, [r5, #48]	; 0x30
 8109d2a:	b920      	cbnz	r0, 8109d36 <srand+0x22>
 8109d2c:	4b0b      	ldr	r3, [pc, #44]	; (8109d5c <srand+0x48>)
 8109d2e:	480c      	ldr	r0, [pc, #48]	; (8109d60 <srand+0x4c>)
 8109d30:	2146      	movs	r1, #70	; 0x46
 8109d32:	f001 f833 	bl	810ad9c <__assert_func>
 8109d36:	490b      	ldr	r1, [pc, #44]	; (8109d64 <srand+0x50>)
 8109d38:	4b0b      	ldr	r3, [pc, #44]	; (8109d68 <srand+0x54>)
 8109d3a:	e9c0 1300 	strd	r1, r3, [r0]
 8109d3e:	4b0b      	ldr	r3, [pc, #44]	; (8109d6c <srand+0x58>)
 8109d40:	6083      	str	r3, [r0, #8]
 8109d42:	230b      	movs	r3, #11
 8109d44:	8183      	strh	r3, [r0, #12]
 8109d46:	2100      	movs	r1, #0
 8109d48:	2001      	movs	r0, #1
 8109d4a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8109d4e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8109d50:	2200      	movs	r2, #0
 8109d52:	611c      	str	r4, [r3, #16]
 8109d54:	615a      	str	r2, [r3, #20]
 8109d56:	bd38      	pop	{r3, r4, r5, pc}
 8109d58:	100001d4 	.word	0x100001d4
 8109d5c:	0810e7f9 	.word	0x0810e7f9
 8109d60:	0810e810 	.word	0x0810e810
 8109d64:	abcd330e 	.word	0xabcd330e
 8109d68:	e66d1234 	.word	0xe66d1234
 8109d6c:	0005deec 	.word	0x0005deec

08109d70 <rand>:
 8109d70:	4b16      	ldr	r3, [pc, #88]	; (8109dcc <rand+0x5c>)
 8109d72:	b510      	push	{r4, lr}
 8109d74:	681c      	ldr	r4, [r3, #0]
 8109d76:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8109d78:	b9b3      	cbnz	r3, 8109da8 <rand+0x38>
 8109d7a:	2018      	movs	r0, #24
 8109d7c:	f002 fb56 	bl	810c42c <malloc>
 8109d80:	4602      	mov	r2, r0
 8109d82:	6320      	str	r0, [r4, #48]	; 0x30
 8109d84:	b920      	cbnz	r0, 8109d90 <rand+0x20>
 8109d86:	4b12      	ldr	r3, [pc, #72]	; (8109dd0 <rand+0x60>)
 8109d88:	4812      	ldr	r0, [pc, #72]	; (8109dd4 <rand+0x64>)
 8109d8a:	2152      	movs	r1, #82	; 0x52
 8109d8c:	f001 f806 	bl	810ad9c <__assert_func>
 8109d90:	4911      	ldr	r1, [pc, #68]	; (8109dd8 <rand+0x68>)
 8109d92:	4b12      	ldr	r3, [pc, #72]	; (8109ddc <rand+0x6c>)
 8109d94:	e9c0 1300 	strd	r1, r3, [r0]
 8109d98:	4b11      	ldr	r3, [pc, #68]	; (8109de0 <rand+0x70>)
 8109d9a:	6083      	str	r3, [r0, #8]
 8109d9c:	230b      	movs	r3, #11
 8109d9e:	8183      	strh	r3, [r0, #12]
 8109da0:	2100      	movs	r1, #0
 8109da2:	2001      	movs	r0, #1
 8109da4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8109da8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8109daa:	480e      	ldr	r0, [pc, #56]	; (8109de4 <rand+0x74>)
 8109dac:	690b      	ldr	r3, [r1, #16]
 8109dae:	694c      	ldr	r4, [r1, #20]
 8109db0:	4a0d      	ldr	r2, [pc, #52]	; (8109de8 <rand+0x78>)
 8109db2:	4358      	muls	r0, r3
 8109db4:	fb02 0004 	mla	r0, r2, r4, r0
 8109db8:	fba3 3202 	umull	r3, r2, r3, r2
 8109dbc:	3301      	adds	r3, #1
 8109dbe:	eb40 0002 	adc.w	r0, r0, r2
 8109dc2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8109dc6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8109dca:	bd10      	pop	{r4, pc}
 8109dcc:	100001d4 	.word	0x100001d4
 8109dd0:	0810e7f9 	.word	0x0810e7f9
 8109dd4:	0810e810 	.word	0x0810e810
 8109dd8:	abcd330e 	.word	0xabcd330e
 8109ddc:	e66d1234 	.word	0xe66d1234
 8109de0:	0005deec 	.word	0x0005deec
 8109de4:	5851f42d 	.word	0x5851f42d
 8109de8:	4c957f2d 	.word	0x4c957f2d

08109dec <std>:
 8109dec:	2300      	movs	r3, #0
 8109dee:	b510      	push	{r4, lr}
 8109df0:	4604      	mov	r4, r0
 8109df2:	e9c0 3300 	strd	r3, r3, [r0]
 8109df6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8109dfa:	6083      	str	r3, [r0, #8]
 8109dfc:	8181      	strh	r1, [r0, #12]
 8109dfe:	6643      	str	r3, [r0, #100]	; 0x64
 8109e00:	81c2      	strh	r2, [r0, #14]
 8109e02:	6183      	str	r3, [r0, #24]
 8109e04:	4619      	mov	r1, r3
 8109e06:	2208      	movs	r2, #8
 8109e08:	305c      	adds	r0, #92	; 0x5c
 8109e0a:	f000 ff47 	bl	810ac9c <memset>
 8109e0e:	4b05      	ldr	r3, [pc, #20]	; (8109e24 <std+0x38>)
 8109e10:	6263      	str	r3, [r4, #36]	; 0x24
 8109e12:	4b05      	ldr	r3, [pc, #20]	; (8109e28 <std+0x3c>)
 8109e14:	62a3      	str	r3, [r4, #40]	; 0x28
 8109e16:	4b05      	ldr	r3, [pc, #20]	; (8109e2c <std+0x40>)
 8109e18:	62e3      	str	r3, [r4, #44]	; 0x2c
 8109e1a:	4b05      	ldr	r3, [pc, #20]	; (8109e30 <std+0x44>)
 8109e1c:	6224      	str	r4, [r4, #32]
 8109e1e:	6323      	str	r3, [r4, #48]	; 0x30
 8109e20:	bd10      	pop	{r4, pc}
 8109e22:	bf00      	nop
 8109e24:	0810d06f 	.word	0x0810d06f
 8109e28:	0810d091 	.word	0x0810d091
 8109e2c:	0810d0c9 	.word	0x0810d0c9
 8109e30:	0810d0ed 	.word	0x0810d0ed

08109e34 <stdio_exit_handler>:
 8109e34:	4a02      	ldr	r2, [pc, #8]	; (8109e40 <stdio_exit_handler+0xc>)
 8109e36:	4903      	ldr	r1, [pc, #12]	; (8109e44 <stdio_exit_handler+0x10>)
 8109e38:	4803      	ldr	r0, [pc, #12]	; (8109e48 <stdio_exit_handler+0x14>)
 8109e3a:	f000 beff 	b.w	810ac3c <_fwalk_sglue>
 8109e3e:	bf00      	nop
 8109e40:	10000010 	.word	0x10000010
 8109e44:	0810c6ad 	.word	0x0810c6ad
 8109e48:	10000188 	.word	0x10000188

08109e4c <cleanup_stdio>:
 8109e4c:	6841      	ldr	r1, [r0, #4]
 8109e4e:	4b0c      	ldr	r3, [pc, #48]	; (8109e80 <cleanup_stdio+0x34>)
 8109e50:	4299      	cmp	r1, r3
 8109e52:	b510      	push	{r4, lr}
 8109e54:	4604      	mov	r4, r0
 8109e56:	d001      	beq.n	8109e5c <cleanup_stdio+0x10>
 8109e58:	f002 fc28 	bl	810c6ac <_fflush_r>
 8109e5c:	68a1      	ldr	r1, [r4, #8]
 8109e5e:	4b09      	ldr	r3, [pc, #36]	; (8109e84 <cleanup_stdio+0x38>)
 8109e60:	4299      	cmp	r1, r3
 8109e62:	d002      	beq.n	8109e6a <cleanup_stdio+0x1e>
 8109e64:	4620      	mov	r0, r4
 8109e66:	f002 fc21 	bl	810c6ac <_fflush_r>
 8109e6a:	68e1      	ldr	r1, [r4, #12]
 8109e6c:	4b06      	ldr	r3, [pc, #24]	; (8109e88 <cleanup_stdio+0x3c>)
 8109e6e:	4299      	cmp	r1, r3
 8109e70:	d004      	beq.n	8109e7c <cleanup_stdio+0x30>
 8109e72:	4620      	mov	r0, r4
 8109e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8109e78:	f002 bc18 	b.w	810c6ac <_fflush_r>
 8109e7c:	bd10      	pop	{r4, pc}
 8109e7e:	bf00      	nop
 8109e80:	10000380 	.word	0x10000380
 8109e84:	100003e8 	.word	0x100003e8
 8109e88:	10000450 	.word	0x10000450

08109e8c <global_stdio_init.part.0>:
 8109e8c:	b510      	push	{r4, lr}
 8109e8e:	4b0b      	ldr	r3, [pc, #44]	; (8109ebc <global_stdio_init.part.0+0x30>)
 8109e90:	4c0b      	ldr	r4, [pc, #44]	; (8109ec0 <global_stdio_init.part.0+0x34>)
 8109e92:	4a0c      	ldr	r2, [pc, #48]	; (8109ec4 <global_stdio_init.part.0+0x38>)
 8109e94:	601a      	str	r2, [r3, #0]
 8109e96:	4620      	mov	r0, r4
 8109e98:	2200      	movs	r2, #0
 8109e9a:	2104      	movs	r1, #4
 8109e9c:	f7ff ffa6 	bl	8109dec <std>
 8109ea0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8109ea4:	2201      	movs	r2, #1
 8109ea6:	2109      	movs	r1, #9
 8109ea8:	f7ff ffa0 	bl	8109dec <std>
 8109eac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8109eb0:	2202      	movs	r2, #2
 8109eb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8109eb6:	2112      	movs	r1, #18
 8109eb8:	f7ff bf98 	b.w	8109dec <std>
 8109ebc:	100004b8 	.word	0x100004b8
 8109ec0:	10000380 	.word	0x10000380
 8109ec4:	08109e35 	.word	0x08109e35

08109ec8 <__sfp_lock_acquire>:
 8109ec8:	4801      	ldr	r0, [pc, #4]	; (8109ed0 <__sfp_lock_acquire+0x8>)
 8109eca:	f000 bf49 	b.w	810ad60 <__retarget_lock_acquire_recursive>
 8109ece:	bf00      	nop
 8109ed0:	100004bd 	.word	0x100004bd

08109ed4 <__sfp_lock_release>:
 8109ed4:	4801      	ldr	r0, [pc, #4]	; (8109edc <__sfp_lock_release+0x8>)
 8109ed6:	f000 bf44 	b.w	810ad62 <__retarget_lock_release_recursive>
 8109eda:	bf00      	nop
 8109edc:	100004bd 	.word	0x100004bd

08109ee0 <__sinit>:
 8109ee0:	b510      	push	{r4, lr}
 8109ee2:	4604      	mov	r4, r0
 8109ee4:	f7ff fff0 	bl	8109ec8 <__sfp_lock_acquire>
 8109ee8:	6a23      	ldr	r3, [r4, #32]
 8109eea:	b11b      	cbz	r3, 8109ef4 <__sinit+0x14>
 8109eec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8109ef0:	f7ff bff0 	b.w	8109ed4 <__sfp_lock_release>
 8109ef4:	4b04      	ldr	r3, [pc, #16]	; (8109f08 <__sinit+0x28>)
 8109ef6:	6223      	str	r3, [r4, #32]
 8109ef8:	4b04      	ldr	r3, [pc, #16]	; (8109f0c <__sinit+0x2c>)
 8109efa:	681b      	ldr	r3, [r3, #0]
 8109efc:	2b00      	cmp	r3, #0
 8109efe:	d1f5      	bne.n	8109eec <__sinit+0xc>
 8109f00:	f7ff ffc4 	bl	8109e8c <global_stdio_init.part.0>
 8109f04:	e7f2      	b.n	8109eec <__sinit+0xc>
 8109f06:	bf00      	nop
 8109f08:	08109e4d 	.word	0x08109e4d
 8109f0c:	100004b8 	.word	0x100004b8

08109f10 <sulp>:
 8109f10:	b570      	push	{r4, r5, r6, lr}
 8109f12:	4604      	mov	r4, r0
 8109f14:	460d      	mov	r5, r1
 8109f16:	ec45 4b10 	vmov	d0, r4, r5
 8109f1a:	4616      	mov	r6, r2
 8109f1c:	f002 ff66 	bl	810cdec <__ulp>
 8109f20:	ec51 0b10 	vmov	r0, r1, d0
 8109f24:	b17e      	cbz	r6, 8109f46 <sulp+0x36>
 8109f26:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8109f2a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8109f2e:	2b00      	cmp	r3, #0
 8109f30:	dd09      	ble.n	8109f46 <sulp+0x36>
 8109f32:	051b      	lsls	r3, r3, #20
 8109f34:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8109f38:	2400      	movs	r4, #0
 8109f3a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8109f3e:	4622      	mov	r2, r4
 8109f40:	462b      	mov	r3, r5
 8109f42:	f7f6 fbe1 	bl	8100708 <__aeabi_dmul>
 8109f46:	bd70      	pop	{r4, r5, r6, pc}

08109f48 <_strtod_l>:
 8109f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109f4c:	ed2d 8b02 	vpush	{d8}
 8109f50:	b09b      	sub	sp, #108	; 0x6c
 8109f52:	4604      	mov	r4, r0
 8109f54:	9213      	str	r2, [sp, #76]	; 0x4c
 8109f56:	2200      	movs	r2, #0
 8109f58:	9216      	str	r2, [sp, #88]	; 0x58
 8109f5a:	460d      	mov	r5, r1
 8109f5c:	f04f 0800 	mov.w	r8, #0
 8109f60:	f04f 0900 	mov.w	r9, #0
 8109f64:	460a      	mov	r2, r1
 8109f66:	9215      	str	r2, [sp, #84]	; 0x54
 8109f68:	7811      	ldrb	r1, [r2, #0]
 8109f6a:	292b      	cmp	r1, #43	; 0x2b
 8109f6c:	d04c      	beq.n	810a008 <_strtod_l+0xc0>
 8109f6e:	d83a      	bhi.n	8109fe6 <_strtod_l+0x9e>
 8109f70:	290d      	cmp	r1, #13
 8109f72:	d834      	bhi.n	8109fde <_strtod_l+0x96>
 8109f74:	2908      	cmp	r1, #8
 8109f76:	d834      	bhi.n	8109fe2 <_strtod_l+0x9a>
 8109f78:	2900      	cmp	r1, #0
 8109f7a:	d03d      	beq.n	8109ff8 <_strtod_l+0xb0>
 8109f7c:	2200      	movs	r2, #0
 8109f7e:	920a      	str	r2, [sp, #40]	; 0x28
 8109f80:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8109f82:	7832      	ldrb	r2, [r6, #0]
 8109f84:	2a30      	cmp	r2, #48	; 0x30
 8109f86:	f040 80b4 	bne.w	810a0f2 <_strtod_l+0x1aa>
 8109f8a:	7872      	ldrb	r2, [r6, #1]
 8109f8c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8109f90:	2a58      	cmp	r2, #88	; 0x58
 8109f92:	d170      	bne.n	810a076 <_strtod_l+0x12e>
 8109f94:	9302      	str	r3, [sp, #8]
 8109f96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8109f98:	9301      	str	r3, [sp, #4]
 8109f9a:	ab16      	add	r3, sp, #88	; 0x58
 8109f9c:	9300      	str	r3, [sp, #0]
 8109f9e:	4a8e      	ldr	r2, [pc, #568]	; (810a1d8 <_strtod_l+0x290>)
 8109fa0:	ab17      	add	r3, sp, #92	; 0x5c
 8109fa2:	a915      	add	r1, sp, #84	; 0x54
 8109fa4:	4620      	mov	r0, r4
 8109fa6:	f001 fdf9 	bl	810bb9c <__gethex>
 8109faa:	f010 070f 	ands.w	r7, r0, #15
 8109fae:	4605      	mov	r5, r0
 8109fb0:	d005      	beq.n	8109fbe <_strtod_l+0x76>
 8109fb2:	2f06      	cmp	r7, #6
 8109fb4:	d12a      	bne.n	810a00c <_strtod_l+0xc4>
 8109fb6:	3601      	adds	r6, #1
 8109fb8:	2300      	movs	r3, #0
 8109fba:	9615      	str	r6, [sp, #84]	; 0x54
 8109fbc:	930a      	str	r3, [sp, #40]	; 0x28
 8109fbe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8109fc0:	2b00      	cmp	r3, #0
 8109fc2:	f040 857f 	bne.w	810aac4 <_strtod_l+0xb7c>
 8109fc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8109fc8:	b1db      	cbz	r3, 810a002 <_strtod_l+0xba>
 8109fca:	4642      	mov	r2, r8
 8109fcc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8109fd0:	ec43 2b10 	vmov	d0, r2, r3
 8109fd4:	b01b      	add	sp, #108	; 0x6c
 8109fd6:	ecbd 8b02 	vpop	{d8}
 8109fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109fde:	2920      	cmp	r1, #32
 8109fe0:	d1cc      	bne.n	8109f7c <_strtod_l+0x34>
 8109fe2:	3201      	adds	r2, #1
 8109fe4:	e7bf      	b.n	8109f66 <_strtod_l+0x1e>
 8109fe6:	292d      	cmp	r1, #45	; 0x2d
 8109fe8:	d1c8      	bne.n	8109f7c <_strtod_l+0x34>
 8109fea:	2101      	movs	r1, #1
 8109fec:	910a      	str	r1, [sp, #40]	; 0x28
 8109fee:	1c51      	adds	r1, r2, #1
 8109ff0:	9115      	str	r1, [sp, #84]	; 0x54
 8109ff2:	7852      	ldrb	r2, [r2, #1]
 8109ff4:	2a00      	cmp	r2, #0
 8109ff6:	d1c3      	bne.n	8109f80 <_strtod_l+0x38>
 8109ff8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8109ffa:	9515      	str	r5, [sp, #84]	; 0x54
 8109ffc:	2b00      	cmp	r3, #0
 8109ffe:	f040 855f 	bne.w	810aac0 <_strtod_l+0xb78>
 810a002:	4642      	mov	r2, r8
 810a004:	464b      	mov	r3, r9
 810a006:	e7e3      	b.n	8109fd0 <_strtod_l+0x88>
 810a008:	2100      	movs	r1, #0
 810a00a:	e7ef      	b.n	8109fec <_strtod_l+0xa4>
 810a00c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 810a00e:	b13a      	cbz	r2, 810a020 <_strtod_l+0xd8>
 810a010:	2135      	movs	r1, #53	; 0x35
 810a012:	a818      	add	r0, sp, #96	; 0x60
 810a014:	f002 ffe7 	bl	810cfe6 <__copybits>
 810a018:	9916      	ldr	r1, [sp, #88]	; 0x58
 810a01a:	4620      	mov	r0, r4
 810a01c:	f002 fbba 	bl	810c794 <_Bfree>
 810a020:	3f01      	subs	r7, #1
 810a022:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 810a024:	2f04      	cmp	r7, #4
 810a026:	d806      	bhi.n	810a036 <_strtod_l+0xee>
 810a028:	e8df f007 	tbb	[pc, r7]
 810a02c:	201d0314 	.word	0x201d0314
 810a030:	14          	.byte	0x14
 810a031:	00          	.byte	0x00
 810a032:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 810a036:	05e9      	lsls	r1, r5, #23
 810a038:	bf48      	it	mi
 810a03a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 810a03e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 810a042:	0d1b      	lsrs	r3, r3, #20
 810a044:	051b      	lsls	r3, r3, #20
 810a046:	2b00      	cmp	r3, #0
 810a048:	d1b9      	bne.n	8109fbe <_strtod_l+0x76>
 810a04a:	f000 fe5f 	bl	810ad0c <__errno>
 810a04e:	2322      	movs	r3, #34	; 0x22
 810a050:	6003      	str	r3, [r0, #0]
 810a052:	e7b4      	b.n	8109fbe <_strtod_l+0x76>
 810a054:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 810a058:	f202 4233 	addw	r2, r2, #1075	; 0x433
 810a05c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 810a060:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 810a064:	e7e7      	b.n	810a036 <_strtod_l+0xee>
 810a066:	f8df 9178 	ldr.w	r9, [pc, #376]	; 810a1e0 <_strtod_l+0x298>
 810a06a:	e7e4      	b.n	810a036 <_strtod_l+0xee>
 810a06c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 810a070:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 810a074:	e7df      	b.n	810a036 <_strtod_l+0xee>
 810a076:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810a078:	1c5a      	adds	r2, r3, #1
 810a07a:	9215      	str	r2, [sp, #84]	; 0x54
 810a07c:	785b      	ldrb	r3, [r3, #1]
 810a07e:	2b30      	cmp	r3, #48	; 0x30
 810a080:	d0f9      	beq.n	810a076 <_strtod_l+0x12e>
 810a082:	2b00      	cmp	r3, #0
 810a084:	d09b      	beq.n	8109fbe <_strtod_l+0x76>
 810a086:	2301      	movs	r3, #1
 810a088:	f04f 0a00 	mov.w	sl, #0
 810a08c:	9304      	str	r3, [sp, #16]
 810a08e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810a090:	930b      	str	r3, [sp, #44]	; 0x2c
 810a092:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 810a096:	46d3      	mov	fp, sl
 810a098:	220a      	movs	r2, #10
 810a09a:	9815      	ldr	r0, [sp, #84]	; 0x54
 810a09c:	7806      	ldrb	r6, [r0, #0]
 810a09e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 810a0a2:	b2d9      	uxtb	r1, r3
 810a0a4:	2909      	cmp	r1, #9
 810a0a6:	d926      	bls.n	810a0f6 <_strtod_l+0x1ae>
 810a0a8:	494c      	ldr	r1, [pc, #304]	; (810a1dc <_strtod_l+0x294>)
 810a0aa:	2201      	movs	r2, #1
 810a0ac:	f000 fde4 	bl	810ac78 <strncmp>
 810a0b0:	2800      	cmp	r0, #0
 810a0b2:	d030      	beq.n	810a116 <_strtod_l+0x1ce>
 810a0b4:	2000      	movs	r0, #0
 810a0b6:	4632      	mov	r2, r6
 810a0b8:	9005      	str	r0, [sp, #20]
 810a0ba:	465e      	mov	r6, fp
 810a0bc:	4603      	mov	r3, r0
 810a0be:	2a65      	cmp	r2, #101	; 0x65
 810a0c0:	d001      	beq.n	810a0c6 <_strtod_l+0x17e>
 810a0c2:	2a45      	cmp	r2, #69	; 0x45
 810a0c4:	d113      	bne.n	810a0ee <_strtod_l+0x1a6>
 810a0c6:	b91e      	cbnz	r6, 810a0d0 <_strtod_l+0x188>
 810a0c8:	9a04      	ldr	r2, [sp, #16]
 810a0ca:	4302      	orrs	r2, r0
 810a0cc:	d094      	beq.n	8109ff8 <_strtod_l+0xb0>
 810a0ce:	2600      	movs	r6, #0
 810a0d0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 810a0d2:	1c6a      	adds	r2, r5, #1
 810a0d4:	9215      	str	r2, [sp, #84]	; 0x54
 810a0d6:	786a      	ldrb	r2, [r5, #1]
 810a0d8:	2a2b      	cmp	r2, #43	; 0x2b
 810a0da:	d074      	beq.n	810a1c6 <_strtod_l+0x27e>
 810a0dc:	2a2d      	cmp	r2, #45	; 0x2d
 810a0de:	d078      	beq.n	810a1d2 <_strtod_l+0x28a>
 810a0e0:	f04f 0c00 	mov.w	ip, #0
 810a0e4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 810a0e8:	2909      	cmp	r1, #9
 810a0ea:	d97f      	bls.n	810a1ec <_strtod_l+0x2a4>
 810a0ec:	9515      	str	r5, [sp, #84]	; 0x54
 810a0ee:	2700      	movs	r7, #0
 810a0f0:	e09e      	b.n	810a230 <_strtod_l+0x2e8>
 810a0f2:	2300      	movs	r3, #0
 810a0f4:	e7c8      	b.n	810a088 <_strtod_l+0x140>
 810a0f6:	f1bb 0f08 	cmp.w	fp, #8
 810a0fa:	bfd8      	it	le
 810a0fc:	9909      	ldrle	r1, [sp, #36]	; 0x24
 810a0fe:	f100 0001 	add.w	r0, r0, #1
 810a102:	bfda      	itte	le
 810a104:	fb02 3301 	mlale	r3, r2, r1, r3
 810a108:	9309      	strle	r3, [sp, #36]	; 0x24
 810a10a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 810a10e:	f10b 0b01 	add.w	fp, fp, #1
 810a112:	9015      	str	r0, [sp, #84]	; 0x54
 810a114:	e7c1      	b.n	810a09a <_strtod_l+0x152>
 810a116:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810a118:	1c5a      	adds	r2, r3, #1
 810a11a:	9215      	str	r2, [sp, #84]	; 0x54
 810a11c:	785a      	ldrb	r2, [r3, #1]
 810a11e:	f1bb 0f00 	cmp.w	fp, #0
 810a122:	d037      	beq.n	810a194 <_strtod_l+0x24c>
 810a124:	9005      	str	r0, [sp, #20]
 810a126:	465e      	mov	r6, fp
 810a128:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 810a12c:	2b09      	cmp	r3, #9
 810a12e:	d912      	bls.n	810a156 <_strtod_l+0x20e>
 810a130:	2301      	movs	r3, #1
 810a132:	e7c4      	b.n	810a0be <_strtod_l+0x176>
 810a134:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810a136:	1c5a      	adds	r2, r3, #1
 810a138:	9215      	str	r2, [sp, #84]	; 0x54
 810a13a:	785a      	ldrb	r2, [r3, #1]
 810a13c:	3001      	adds	r0, #1
 810a13e:	2a30      	cmp	r2, #48	; 0x30
 810a140:	d0f8      	beq.n	810a134 <_strtod_l+0x1ec>
 810a142:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 810a146:	2b08      	cmp	r3, #8
 810a148:	f200 84c1 	bhi.w	810aace <_strtod_l+0xb86>
 810a14c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810a14e:	9005      	str	r0, [sp, #20]
 810a150:	2000      	movs	r0, #0
 810a152:	930b      	str	r3, [sp, #44]	; 0x2c
 810a154:	4606      	mov	r6, r0
 810a156:	3a30      	subs	r2, #48	; 0x30
 810a158:	f100 0301 	add.w	r3, r0, #1
 810a15c:	d014      	beq.n	810a188 <_strtod_l+0x240>
 810a15e:	9905      	ldr	r1, [sp, #20]
 810a160:	4419      	add	r1, r3
 810a162:	9105      	str	r1, [sp, #20]
 810a164:	4633      	mov	r3, r6
 810a166:	eb00 0c06 	add.w	ip, r0, r6
 810a16a:	210a      	movs	r1, #10
 810a16c:	4563      	cmp	r3, ip
 810a16e:	d113      	bne.n	810a198 <_strtod_l+0x250>
 810a170:	1833      	adds	r3, r6, r0
 810a172:	2b08      	cmp	r3, #8
 810a174:	f106 0601 	add.w	r6, r6, #1
 810a178:	4406      	add	r6, r0
 810a17a:	dc1a      	bgt.n	810a1b2 <_strtod_l+0x26a>
 810a17c:	9909      	ldr	r1, [sp, #36]	; 0x24
 810a17e:	230a      	movs	r3, #10
 810a180:	fb03 2301 	mla	r3, r3, r1, r2
 810a184:	9309      	str	r3, [sp, #36]	; 0x24
 810a186:	2300      	movs	r3, #0
 810a188:	9a15      	ldr	r2, [sp, #84]	; 0x54
 810a18a:	1c51      	adds	r1, r2, #1
 810a18c:	9115      	str	r1, [sp, #84]	; 0x54
 810a18e:	7852      	ldrb	r2, [r2, #1]
 810a190:	4618      	mov	r0, r3
 810a192:	e7c9      	b.n	810a128 <_strtod_l+0x1e0>
 810a194:	4658      	mov	r0, fp
 810a196:	e7d2      	b.n	810a13e <_strtod_l+0x1f6>
 810a198:	2b08      	cmp	r3, #8
 810a19a:	f103 0301 	add.w	r3, r3, #1
 810a19e:	dc03      	bgt.n	810a1a8 <_strtod_l+0x260>
 810a1a0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 810a1a2:	434f      	muls	r7, r1
 810a1a4:	9709      	str	r7, [sp, #36]	; 0x24
 810a1a6:	e7e1      	b.n	810a16c <_strtod_l+0x224>
 810a1a8:	2b10      	cmp	r3, #16
 810a1aa:	bfd8      	it	le
 810a1ac:	fb01 fa0a 	mulle.w	sl, r1, sl
 810a1b0:	e7dc      	b.n	810a16c <_strtod_l+0x224>
 810a1b2:	2e10      	cmp	r6, #16
 810a1b4:	bfdc      	itt	le
 810a1b6:	230a      	movle	r3, #10
 810a1b8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 810a1bc:	e7e3      	b.n	810a186 <_strtod_l+0x23e>
 810a1be:	2300      	movs	r3, #0
 810a1c0:	9305      	str	r3, [sp, #20]
 810a1c2:	2301      	movs	r3, #1
 810a1c4:	e780      	b.n	810a0c8 <_strtod_l+0x180>
 810a1c6:	f04f 0c00 	mov.w	ip, #0
 810a1ca:	1caa      	adds	r2, r5, #2
 810a1cc:	9215      	str	r2, [sp, #84]	; 0x54
 810a1ce:	78aa      	ldrb	r2, [r5, #2]
 810a1d0:	e788      	b.n	810a0e4 <_strtod_l+0x19c>
 810a1d2:	f04f 0c01 	mov.w	ip, #1
 810a1d6:	e7f8      	b.n	810a1ca <_strtod_l+0x282>
 810a1d8:	0810e86c 	.word	0x0810e86c
 810a1dc:	0810e868 	.word	0x0810e868
 810a1e0:	7ff00000 	.word	0x7ff00000
 810a1e4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 810a1e6:	1c51      	adds	r1, r2, #1
 810a1e8:	9115      	str	r1, [sp, #84]	; 0x54
 810a1ea:	7852      	ldrb	r2, [r2, #1]
 810a1ec:	2a30      	cmp	r2, #48	; 0x30
 810a1ee:	d0f9      	beq.n	810a1e4 <_strtod_l+0x29c>
 810a1f0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 810a1f4:	2908      	cmp	r1, #8
 810a1f6:	f63f af7a 	bhi.w	810a0ee <_strtod_l+0x1a6>
 810a1fa:	3a30      	subs	r2, #48	; 0x30
 810a1fc:	9208      	str	r2, [sp, #32]
 810a1fe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 810a200:	920c      	str	r2, [sp, #48]	; 0x30
 810a202:	9a15      	ldr	r2, [sp, #84]	; 0x54
 810a204:	1c57      	adds	r7, r2, #1
 810a206:	9715      	str	r7, [sp, #84]	; 0x54
 810a208:	7852      	ldrb	r2, [r2, #1]
 810a20a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 810a20e:	f1be 0f09 	cmp.w	lr, #9
 810a212:	d938      	bls.n	810a286 <_strtod_l+0x33e>
 810a214:	990c      	ldr	r1, [sp, #48]	; 0x30
 810a216:	1a7f      	subs	r7, r7, r1
 810a218:	2f08      	cmp	r7, #8
 810a21a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 810a21e:	dc03      	bgt.n	810a228 <_strtod_l+0x2e0>
 810a220:	9908      	ldr	r1, [sp, #32]
 810a222:	428f      	cmp	r7, r1
 810a224:	bfa8      	it	ge
 810a226:	460f      	movge	r7, r1
 810a228:	f1bc 0f00 	cmp.w	ip, #0
 810a22c:	d000      	beq.n	810a230 <_strtod_l+0x2e8>
 810a22e:	427f      	negs	r7, r7
 810a230:	2e00      	cmp	r6, #0
 810a232:	d14f      	bne.n	810a2d4 <_strtod_l+0x38c>
 810a234:	9904      	ldr	r1, [sp, #16]
 810a236:	4301      	orrs	r1, r0
 810a238:	f47f aec1 	bne.w	8109fbe <_strtod_l+0x76>
 810a23c:	2b00      	cmp	r3, #0
 810a23e:	f47f aedb 	bne.w	8109ff8 <_strtod_l+0xb0>
 810a242:	2a69      	cmp	r2, #105	; 0x69
 810a244:	d029      	beq.n	810a29a <_strtod_l+0x352>
 810a246:	dc26      	bgt.n	810a296 <_strtod_l+0x34e>
 810a248:	2a49      	cmp	r2, #73	; 0x49
 810a24a:	d026      	beq.n	810a29a <_strtod_l+0x352>
 810a24c:	2a4e      	cmp	r2, #78	; 0x4e
 810a24e:	f47f aed3 	bne.w	8109ff8 <_strtod_l+0xb0>
 810a252:	499b      	ldr	r1, [pc, #620]	; (810a4c0 <_strtod_l+0x578>)
 810a254:	a815      	add	r0, sp, #84	; 0x54
 810a256:	f001 fee1 	bl	810c01c <__match>
 810a25a:	2800      	cmp	r0, #0
 810a25c:	f43f aecc 	beq.w	8109ff8 <_strtod_l+0xb0>
 810a260:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810a262:	781b      	ldrb	r3, [r3, #0]
 810a264:	2b28      	cmp	r3, #40	; 0x28
 810a266:	d12f      	bne.n	810a2c8 <_strtod_l+0x380>
 810a268:	4996      	ldr	r1, [pc, #600]	; (810a4c4 <_strtod_l+0x57c>)
 810a26a:	aa18      	add	r2, sp, #96	; 0x60
 810a26c:	a815      	add	r0, sp, #84	; 0x54
 810a26e:	f001 fee9 	bl	810c044 <__hexnan>
 810a272:	2805      	cmp	r0, #5
 810a274:	d128      	bne.n	810a2c8 <_strtod_l+0x380>
 810a276:	9b19      	ldr	r3, [sp, #100]	; 0x64
 810a278:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 810a27c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 810a280:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 810a284:	e69b      	b.n	8109fbe <_strtod_l+0x76>
 810a286:	9f08      	ldr	r7, [sp, #32]
 810a288:	210a      	movs	r1, #10
 810a28a:	fb01 2107 	mla	r1, r1, r7, r2
 810a28e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 810a292:	9208      	str	r2, [sp, #32]
 810a294:	e7b5      	b.n	810a202 <_strtod_l+0x2ba>
 810a296:	2a6e      	cmp	r2, #110	; 0x6e
 810a298:	e7d9      	b.n	810a24e <_strtod_l+0x306>
 810a29a:	498b      	ldr	r1, [pc, #556]	; (810a4c8 <_strtod_l+0x580>)
 810a29c:	a815      	add	r0, sp, #84	; 0x54
 810a29e:	f001 febd 	bl	810c01c <__match>
 810a2a2:	2800      	cmp	r0, #0
 810a2a4:	f43f aea8 	beq.w	8109ff8 <_strtod_l+0xb0>
 810a2a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810a2aa:	4988      	ldr	r1, [pc, #544]	; (810a4cc <_strtod_l+0x584>)
 810a2ac:	3b01      	subs	r3, #1
 810a2ae:	a815      	add	r0, sp, #84	; 0x54
 810a2b0:	9315      	str	r3, [sp, #84]	; 0x54
 810a2b2:	f001 feb3 	bl	810c01c <__match>
 810a2b6:	b910      	cbnz	r0, 810a2be <_strtod_l+0x376>
 810a2b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810a2ba:	3301      	adds	r3, #1
 810a2bc:	9315      	str	r3, [sp, #84]	; 0x54
 810a2be:	f8df 921c 	ldr.w	r9, [pc, #540]	; 810a4dc <_strtod_l+0x594>
 810a2c2:	f04f 0800 	mov.w	r8, #0
 810a2c6:	e67a      	b.n	8109fbe <_strtod_l+0x76>
 810a2c8:	4881      	ldr	r0, [pc, #516]	; (810a4d0 <_strtod_l+0x588>)
 810a2ca:	f000 fd59 	bl	810ad80 <nan>
 810a2ce:	ec59 8b10 	vmov	r8, r9, d0
 810a2d2:	e674      	b.n	8109fbe <_strtod_l+0x76>
 810a2d4:	9b05      	ldr	r3, [sp, #20]
 810a2d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 810a2d8:	1afb      	subs	r3, r7, r3
 810a2da:	f1bb 0f00 	cmp.w	fp, #0
 810a2de:	bf08      	it	eq
 810a2e0:	46b3      	moveq	fp, r6
 810a2e2:	2e10      	cmp	r6, #16
 810a2e4:	9308      	str	r3, [sp, #32]
 810a2e6:	4635      	mov	r5, r6
 810a2e8:	bfa8      	it	ge
 810a2ea:	2510      	movge	r5, #16
 810a2ec:	f7f6 f992 	bl	8100614 <__aeabi_ui2d>
 810a2f0:	2e09      	cmp	r6, #9
 810a2f2:	4680      	mov	r8, r0
 810a2f4:	4689      	mov	r9, r1
 810a2f6:	dd13      	ble.n	810a320 <_strtod_l+0x3d8>
 810a2f8:	4b76      	ldr	r3, [pc, #472]	; (810a4d4 <_strtod_l+0x58c>)
 810a2fa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 810a2fe:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 810a302:	f7f6 fa01 	bl	8100708 <__aeabi_dmul>
 810a306:	4680      	mov	r8, r0
 810a308:	4650      	mov	r0, sl
 810a30a:	4689      	mov	r9, r1
 810a30c:	f7f6 f982 	bl	8100614 <__aeabi_ui2d>
 810a310:	4602      	mov	r2, r0
 810a312:	460b      	mov	r3, r1
 810a314:	4640      	mov	r0, r8
 810a316:	4649      	mov	r1, r9
 810a318:	f7f6 f840 	bl	810039c <__adddf3>
 810a31c:	4680      	mov	r8, r0
 810a31e:	4689      	mov	r9, r1
 810a320:	2e0f      	cmp	r6, #15
 810a322:	dc38      	bgt.n	810a396 <_strtod_l+0x44e>
 810a324:	9b08      	ldr	r3, [sp, #32]
 810a326:	2b00      	cmp	r3, #0
 810a328:	f43f ae49 	beq.w	8109fbe <_strtod_l+0x76>
 810a32c:	dd24      	ble.n	810a378 <_strtod_l+0x430>
 810a32e:	2b16      	cmp	r3, #22
 810a330:	dc0b      	bgt.n	810a34a <_strtod_l+0x402>
 810a332:	4968      	ldr	r1, [pc, #416]	; (810a4d4 <_strtod_l+0x58c>)
 810a334:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810a338:	e9d1 0100 	ldrd	r0, r1, [r1]
 810a33c:	4642      	mov	r2, r8
 810a33e:	464b      	mov	r3, r9
 810a340:	f7f6 f9e2 	bl	8100708 <__aeabi_dmul>
 810a344:	4680      	mov	r8, r0
 810a346:	4689      	mov	r9, r1
 810a348:	e639      	b.n	8109fbe <_strtod_l+0x76>
 810a34a:	9a08      	ldr	r2, [sp, #32]
 810a34c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 810a350:	4293      	cmp	r3, r2
 810a352:	db20      	blt.n	810a396 <_strtod_l+0x44e>
 810a354:	4c5f      	ldr	r4, [pc, #380]	; (810a4d4 <_strtod_l+0x58c>)
 810a356:	f1c6 060f 	rsb	r6, r6, #15
 810a35a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 810a35e:	4642      	mov	r2, r8
 810a360:	464b      	mov	r3, r9
 810a362:	e9d1 0100 	ldrd	r0, r1, [r1]
 810a366:	f7f6 f9cf 	bl	8100708 <__aeabi_dmul>
 810a36a:	9b08      	ldr	r3, [sp, #32]
 810a36c:	1b9e      	subs	r6, r3, r6
 810a36e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 810a372:	e9d4 2300 	ldrd	r2, r3, [r4]
 810a376:	e7e3      	b.n	810a340 <_strtod_l+0x3f8>
 810a378:	9b08      	ldr	r3, [sp, #32]
 810a37a:	3316      	adds	r3, #22
 810a37c:	db0b      	blt.n	810a396 <_strtod_l+0x44e>
 810a37e:	9b05      	ldr	r3, [sp, #20]
 810a380:	1bdf      	subs	r7, r3, r7
 810a382:	4b54      	ldr	r3, [pc, #336]	; (810a4d4 <_strtod_l+0x58c>)
 810a384:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 810a388:	e9d7 2300 	ldrd	r2, r3, [r7]
 810a38c:	4640      	mov	r0, r8
 810a38e:	4649      	mov	r1, r9
 810a390:	f7f6 fae4 	bl	810095c <__aeabi_ddiv>
 810a394:	e7d6      	b.n	810a344 <_strtod_l+0x3fc>
 810a396:	9b08      	ldr	r3, [sp, #32]
 810a398:	1b75      	subs	r5, r6, r5
 810a39a:	441d      	add	r5, r3
 810a39c:	2d00      	cmp	r5, #0
 810a39e:	dd70      	ble.n	810a482 <_strtod_l+0x53a>
 810a3a0:	f015 030f 	ands.w	r3, r5, #15
 810a3a4:	d00a      	beq.n	810a3bc <_strtod_l+0x474>
 810a3a6:	494b      	ldr	r1, [pc, #300]	; (810a4d4 <_strtod_l+0x58c>)
 810a3a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810a3ac:	4642      	mov	r2, r8
 810a3ae:	464b      	mov	r3, r9
 810a3b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 810a3b4:	f7f6 f9a8 	bl	8100708 <__aeabi_dmul>
 810a3b8:	4680      	mov	r8, r0
 810a3ba:	4689      	mov	r9, r1
 810a3bc:	f035 050f 	bics.w	r5, r5, #15
 810a3c0:	d04d      	beq.n	810a45e <_strtod_l+0x516>
 810a3c2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 810a3c6:	dd22      	ble.n	810a40e <_strtod_l+0x4c6>
 810a3c8:	2500      	movs	r5, #0
 810a3ca:	46ab      	mov	fp, r5
 810a3cc:	9509      	str	r5, [sp, #36]	; 0x24
 810a3ce:	9505      	str	r5, [sp, #20]
 810a3d0:	2322      	movs	r3, #34	; 0x22
 810a3d2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 810a4dc <_strtod_l+0x594>
 810a3d6:	6023      	str	r3, [r4, #0]
 810a3d8:	f04f 0800 	mov.w	r8, #0
 810a3dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810a3de:	2b00      	cmp	r3, #0
 810a3e0:	f43f aded 	beq.w	8109fbe <_strtod_l+0x76>
 810a3e4:	9916      	ldr	r1, [sp, #88]	; 0x58
 810a3e6:	4620      	mov	r0, r4
 810a3e8:	f002 f9d4 	bl	810c794 <_Bfree>
 810a3ec:	9905      	ldr	r1, [sp, #20]
 810a3ee:	4620      	mov	r0, r4
 810a3f0:	f002 f9d0 	bl	810c794 <_Bfree>
 810a3f4:	4659      	mov	r1, fp
 810a3f6:	4620      	mov	r0, r4
 810a3f8:	f002 f9cc 	bl	810c794 <_Bfree>
 810a3fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 810a3fe:	4620      	mov	r0, r4
 810a400:	f002 f9c8 	bl	810c794 <_Bfree>
 810a404:	4629      	mov	r1, r5
 810a406:	4620      	mov	r0, r4
 810a408:	f002 f9c4 	bl	810c794 <_Bfree>
 810a40c:	e5d7      	b.n	8109fbe <_strtod_l+0x76>
 810a40e:	4b32      	ldr	r3, [pc, #200]	; (810a4d8 <_strtod_l+0x590>)
 810a410:	9304      	str	r3, [sp, #16]
 810a412:	2300      	movs	r3, #0
 810a414:	112d      	asrs	r5, r5, #4
 810a416:	4640      	mov	r0, r8
 810a418:	4649      	mov	r1, r9
 810a41a:	469a      	mov	sl, r3
 810a41c:	2d01      	cmp	r5, #1
 810a41e:	dc21      	bgt.n	810a464 <_strtod_l+0x51c>
 810a420:	b10b      	cbz	r3, 810a426 <_strtod_l+0x4de>
 810a422:	4680      	mov	r8, r0
 810a424:	4689      	mov	r9, r1
 810a426:	492c      	ldr	r1, [pc, #176]	; (810a4d8 <_strtod_l+0x590>)
 810a428:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 810a42c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 810a430:	4642      	mov	r2, r8
 810a432:	464b      	mov	r3, r9
 810a434:	e9d1 0100 	ldrd	r0, r1, [r1]
 810a438:	f7f6 f966 	bl	8100708 <__aeabi_dmul>
 810a43c:	4b27      	ldr	r3, [pc, #156]	; (810a4dc <_strtod_l+0x594>)
 810a43e:	460a      	mov	r2, r1
 810a440:	400b      	ands	r3, r1
 810a442:	4927      	ldr	r1, [pc, #156]	; (810a4e0 <_strtod_l+0x598>)
 810a444:	428b      	cmp	r3, r1
 810a446:	4680      	mov	r8, r0
 810a448:	d8be      	bhi.n	810a3c8 <_strtod_l+0x480>
 810a44a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 810a44e:	428b      	cmp	r3, r1
 810a450:	bf86      	itte	hi
 810a452:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 810a4e4 <_strtod_l+0x59c>
 810a456:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 810a45a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 810a45e:	2300      	movs	r3, #0
 810a460:	9304      	str	r3, [sp, #16]
 810a462:	e07b      	b.n	810a55c <_strtod_l+0x614>
 810a464:	07ea      	lsls	r2, r5, #31
 810a466:	d505      	bpl.n	810a474 <_strtod_l+0x52c>
 810a468:	9b04      	ldr	r3, [sp, #16]
 810a46a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a46e:	f7f6 f94b 	bl	8100708 <__aeabi_dmul>
 810a472:	2301      	movs	r3, #1
 810a474:	9a04      	ldr	r2, [sp, #16]
 810a476:	3208      	adds	r2, #8
 810a478:	f10a 0a01 	add.w	sl, sl, #1
 810a47c:	106d      	asrs	r5, r5, #1
 810a47e:	9204      	str	r2, [sp, #16]
 810a480:	e7cc      	b.n	810a41c <_strtod_l+0x4d4>
 810a482:	d0ec      	beq.n	810a45e <_strtod_l+0x516>
 810a484:	426d      	negs	r5, r5
 810a486:	f015 020f 	ands.w	r2, r5, #15
 810a48a:	d00a      	beq.n	810a4a2 <_strtod_l+0x55a>
 810a48c:	4b11      	ldr	r3, [pc, #68]	; (810a4d4 <_strtod_l+0x58c>)
 810a48e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810a492:	4640      	mov	r0, r8
 810a494:	4649      	mov	r1, r9
 810a496:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a49a:	f7f6 fa5f 	bl	810095c <__aeabi_ddiv>
 810a49e:	4680      	mov	r8, r0
 810a4a0:	4689      	mov	r9, r1
 810a4a2:	112d      	asrs	r5, r5, #4
 810a4a4:	d0db      	beq.n	810a45e <_strtod_l+0x516>
 810a4a6:	2d1f      	cmp	r5, #31
 810a4a8:	dd1e      	ble.n	810a4e8 <_strtod_l+0x5a0>
 810a4aa:	2500      	movs	r5, #0
 810a4ac:	46ab      	mov	fp, r5
 810a4ae:	9509      	str	r5, [sp, #36]	; 0x24
 810a4b0:	9505      	str	r5, [sp, #20]
 810a4b2:	2322      	movs	r3, #34	; 0x22
 810a4b4:	f04f 0800 	mov.w	r8, #0
 810a4b8:	f04f 0900 	mov.w	r9, #0
 810a4bc:	6023      	str	r3, [r4, #0]
 810a4be:	e78d      	b.n	810a3dc <_strtod_l+0x494>
 810a4c0:	0810e7cd 	.word	0x0810e7cd
 810a4c4:	0810e880 	.word	0x0810e880
 810a4c8:	0810e7c5 	.word	0x0810e7c5
 810a4cc:	0810ea08 	.word	0x0810ea08
 810a4d0:	0810ea04 	.word	0x0810ea04
 810a4d4:	0810eb70 	.word	0x0810eb70
 810a4d8:	0810eb48 	.word	0x0810eb48
 810a4dc:	7ff00000 	.word	0x7ff00000
 810a4e0:	7ca00000 	.word	0x7ca00000
 810a4e4:	7fefffff 	.word	0x7fefffff
 810a4e8:	f015 0310 	ands.w	r3, r5, #16
 810a4ec:	bf18      	it	ne
 810a4ee:	236a      	movne	r3, #106	; 0x6a
 810a4f0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 810a894 <_strtod_l+0x94c>
 810a4f4:	9304      	str	r3, [sp, #16]
 810a4f6:	4640      	mov	r0, r8
 810a4f8:	4649      	mov	r1, r9
 810a4fa:	2300      	movs	r3, #0
 810a4fc:	07ea      	lsls	r2, r5, #31
 810a4fe:	d504      	bpl.n	810a50a <_strtod_l+0x5c2>
 810a500:	e9da 2300 	ldrd	r2, r3, [sl]
 810a504:	f7f6 f900 	bl	8100708 <__aeabi_dmul>
 810a508:	2301      	movs	r3, #1
 810a50a:	106d      	asrs	r5, r5, #1
 810a50c:	f10a 0a08 	add.w	sl, sl, #8
 810a510:	d1f4      	bne.n	810a4fc <_strtod_l+0x5b4>
 810a512:	b10b      	cbz	r3, 810a518 <_strtod_l+0x5d0>
 810a514:	4680      	mov	r8, r0
 810a516:	4689      	mov	r9, r1
 810a518:	9b04      	ldr	r3, [sp, #16]
 810a51a:	b1bb      	cbz	r3, 810a54c <_strtod_l+0x604>
 810a51c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 810a520:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 810a524:	2b00      	cmp	r3, #0
 810a526:	4649      	mov	r1, r9
 810a528:	dd10      	ble.n	810a54c <_strtod_l+0x604>
 810a52a:	2b1f      	cmp	r3, #31
 810a52c:	f340 811e 	ble.w	810a76c <_strtod_l+0x824>
 810a530:	2b34      	cmp	r3, #52	; 0x34
 810a532:	bfde      	ittt	le
 810a534:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 810a538:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 810a53c:	4093      	lslle	r3, r2
 810a53e:	f04f 0800 	mov.w	r8, #0
 810a542:	bfcc      	ite	gt
 810a544:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 810a548:	ea03 0901 	andle.w	r9, r3, r1
 810a54c:	2200      	movs	r2, #0
 810a54e:	2300      	movs	r3, #0
 810a550:	4640      	mov	r0, r8
 810a552:	4649      	mov	r1, r9
 810a554:	f7f6 fb40 	bl	8100bd8 <__aeabi_dcmpeq>
 810a558:	2800      	cmp	r0, #0
 810a55a:	d1a6      	bne.n	810a4aa <_strtod_l+0x562>
 810a55c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810a55e:	9300      	str	r3, [sp, #0]
 810a560:	990b      	ldr	r1, [sp, #44]	; 0x2c
 810a562:	4633      	mov	r3, r6
 810a564:	465a      	mov	r2, fp
 810a566:	4620      	mov	r0, r4
 810a568:	f002 f97c 	bl	810c864 <__s2b>
 810a56c:	9009      	str	r0, [sp, #36]	; 0x24
 810a56e:	2800      	cmp	r0, #0
 810a570:	f43f af2a 	beq.w	810a3c8 <_strtod_l+0x480>
 810a574:	9a08      	ldr	r2, [sp, #32]
 810a576:	9b05      	ldr	r3, [sp, #20]
 810a578:	2a00      	cmp	r2, #0
 810a57a:	eba3 0307 	sub.w	r3, r3, r7
 810a57e:	bfa8      	it	ge
 810a580:	2300      	movge	r3, #0
 810a582:	930c      	str	r3, [sp, #48]	; 0x30
 810a584:	2500      	movs	r5, #0
 810a586:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 810a58a:	9312      	str	r3, [sp, #72]	; 0x48
 810a58c:	46ab      	mov	fp, r5
 810a58e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810a590:	4620      	mov	r0, r4
 810a592:	6859      	ldr	r1, [r3, #4]
 810a594:	f002 f8be 	bl	810c714 <_Balloc>
 810a598:	9005      	str	r0, [sp, #20]
 810a59a:	2800      	cmp	r0, #0
 810a59c:	f43f af18 	beq.w	810a3d0 <_strtod_l+0x488>
 810a5a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810a5a2:	691a      	ldr	r2, [r3, #16]
 810a5a4:	3202      	adds	r2, #2
 810a5a6:	f103 010c 	add.w	r1, r3, #12
 810a5aa:	0092      	lsls	r2, r2, #2
 810a5ac:	300c      	adds	r0, #12
 810a5ae:	f000 fbd9 	bl	810ad64 <memcpy>
 810a5b2:	ec49 8b10 	vmov	d0, r8, r9
 810a5b6:	aa18      	add	r2, sp, #96	; 0x60
 810a5b8:	a917      	add	r1, sp, #92	; 0x5c
 810a5ba:	4620      	mov	r0, r4
 810a5bc:	f002 fc86 	bl	810cecc <__d2b>
 810a5c0:	ec49 8b18 	vmov	d8, r8, r9
 810a5c4:	9016      	str	r0, [sp, #88]	; 0x58
 810a5c6:	2800      	cmp	r0, #0
 810a5c8:	f43f af02 	beq.w	810a3d0 <_strtod_l+0x488>
 810a5cc:	2101      	movs	r1, #1
 810a5ce:	4620      	mov	r0, r4
 810a5d0:	f002 f9e0 	bl	810c994 <__i2b>
 810a5d4:	4683      	mov	fp, r0
 810a5d6:	2800      	cmp	r0, #0
 810a5d8:	f43f aefa 	beq.w	810a3d0 <_strtod_l+0x488>
 810a5dc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 810a5de:	9a18      	ldr	r2, [sp, #96]	; 0x60
 810a5e0:	2e00      	cmp	r6, #0
 810a5e2:	bfab      	itete	ge
 810a5e4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 810a5e6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 810a5e8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 810a5ea:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 810a5ee:	bfac      	ite	ge
 810a5f0:	eb06 0a03 	addge.w	sl, r6, r3
 810a5f4:	1b9f      	sublt	r7, r3, r6
 810a5f6:	9b04      	ldr	r3, [sp, #16]
 810a5f8:	1af6      	subs	r6, r6, r3
 810a5fa:	4416      	add	r6, r2
 810a5fc:	4ba0      	ldr	r3, [pc, #640]	; (810a880 <_strtod_l+0x938>)
 810a5fe:	3e01      	subs	r6, #1
 810a600:	429e      	cmp	r6, r3
 810a602:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 810a606:	f280 80c4 	bge.w	810a792 <_strtod_l+0x84a>
 810a60a:	1b9b      	subs	r3, r3, r6
 810a60c:	2b1f      	cmp	r3, #31
 810a60e:	eba2 0203 	sub.w	r2, r2, r3
 810a612:	f04f 0101 	mov.w	r1, #1
 810a616:	f300 80b0 	bgt.w	810a77a <_strtod_l+0x832>
 810a61a:	fa01 f303 	lsl.w	r3, r1, r3
 810a61e:	930e      	str	r3, [sp, #56]	; 0x38
 810a620:	2300      	movs	r3, #0
 810a622:	930d      	str	r3, [sp, #52]	; 0x34
 810a624:	eb0a 0602 	add.w	r6, sl, r2
 810a628:	9b04      	ldr	r3, [sp, #16]
 810a62a:	45b2      	cmp	sl, r6
 810a62c:	4417      	add	r7, r2
 810a62e:	441f      	add	r7, r3
 810a630:	4653      	mov	r3, sl
 810a632:	bfa8      	it	ge
 810a634:	4633      	movge	r3, r6
 810a636:	42bb      	cmp	r3, r7
 810a638:	bfa8      	it	ge
 810a63a:	463b      	movge	r3, r7
 810a63c:	2b00      	cmp	r3, #0
 810a63e:	bfc2      	ittt	gt
 810a640:	1af6      	subgt	r6, r6, r3
 810a642:	1aff      	subgt	r7, r7, r3
 810a644:	ebaa 0a03 	subgt.w	sl, sl, r3
 810a648:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810a64a:	2b00      	cmp	r3, #0
 810a64c:	dd17      	ble.n	810a67e <_strtod_l+0x736>
 810a64e:	4659      	mov	r1, fp
 810a650:	461a      	mov	r2, r3
 810a652:	4620      	mov	r0, r4
 810a654:	f002 fa5e 	bl	810cb14 <__pow5mult>
 810a658:	4683      	mov	fp, r0
 810a65a:	2800      	cmp	r0, #0
 810a65c:	f43f aeb8 	beq.w	810a3d0 <_strtod_l+0x488>
 810a660:	4601      	mov	r1, r0
 810a662:	9a16      	ldr	r2, [sp, #88]	; 0x58
 810a664:	4620      	mov	r0, r4
 810a666:	f002 f9ab 	bl	810c9c0 <__multiply>
 810a66a:	900b      	str	r0, [sp, #44]	; 0x2c
 810a66c:	2800      	cmp	r0, #0
 810a66e:	f43f aeaf 	beq.w	810a3d0 <_strtod_l+0x488>
 810a672:	9916      	ldr	r1, [sp, #88]	; 0x58
 810a674:	4620      	mov	r0, r4
 810a676:	f002 f88d 	bl	810c794 <_Bfree>
 810a67a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810a67c:	9316      	str	r3, [sp, #88]	; 0x58
 810a67e:	2e00      	cmp	r6, #0
 810a680:	f300 808c 	bgt.w	810a79c <_strtod_l+0x854>
 810a684:	9b08      	ldr	r3, [sp, #32]
 810a686:	2b00      	cmp	r3, #0
 810a688:	dd08      	ble.n	810a69c <_strtod_l+0x754>
 810a68a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 810a68c:	9905      	ldr	r1, [sp, #20]
 810a68e:	4620      	mov	r0, r4
 810a690:	f002 fa40 	bl	810cb14 <__pow5mult>
 810a694:	9005      	str	r0, [sp, #20]
 810a696:	2800      	cmp	r0, #0
 810a698:	f43f ae9a 	beq.w	810a3d0 <_strtod_l+0x488>
 810a69c:	2f00      	cmp	r7, #0
 810a69e:	dd08      	ble.n	810a6b2 <_strtod_l+0x76a>
 810a6a0:	9905      	ldr	r1, [sp, #20]
 810a6a2:	463a      	mov	r2, r7
 810a6a4:	4620      	mov	r0, r4
 810a6a6:	f002 fa8f 	bl	810cbc8 <__lshift>
 810a6aa:	9005      	str	r0, [sp, #20]
 810a6ac:	2800      	cmp	r0, #0
 810a6ae:	f43f ae8f 	beq.w	810a3d0 <_strtod_l+0x488>
 810a6b2:	f1ba 0f00 	cmp.w	sl, #0
 810a6b6:	dd08      	ble.n	810a6ca <_strtod_l+0x782>
 810a6b8:	4659      	mov	r1, fp
 810a6ba:	4652      	mov	r2, sl
 810a6bc:	4620      	mov	r0, r4
 810a6be:	f002 fa83 	bl	810cbc8 <__lshift>
 810a6c2:	4683      	mov	fp, r0
 810a6c4:	2800      	cmp	r0, #0
 810a6c6:	f43f ae83 	beq.w	810a3d0 <_strtod_l+0x488>
 810a6ca:	9a05      	ldr	r2, [sp, #20]
 810a6cc:	9916      	ldr	r1, [sp, #88]	; 0x58
 810a6ce:	4620      	mov	r0, r4
 810a6d0:	f002 fb02 	bl	810ccd8 <__mdiff>
 810a6d4:	4605      	mov	r5, r0
 810a6d6:	2800      	cmp	r0, #0
 810a6d8:	f43f ae7a 	beq.w	810a3d0 <_strtod_l+0x488>
 810a6dc:	68c3      	ldr	r3, [r0, #12]
 810a6de:	930b      	str	r3, [sp, #44]	; 0x2c
 810a6e0:	2300      	movs	r3, #0
 810a6e2:	60c3      	str	r3, [r0, #12]
 810a6e4:	4659      	mov	r1, fp
 810a6e6:	f002 fadb 	bl	810cca0 <__mcmp>
 810a6ea:	2800      	cmp	r0, #0
 810a6ec:	da60      	bge.n	810a7b0 <_strtod_l+0x868>
 810a6ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810a6f0:	ea53 0308 	orrs.w	r3, r3, r8
 810a6f4:	f040 8084 	bne.w	810a800 <_strtod_l+0x8b8>
 810a6f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810a6fc:	2b00      	cmp	r3, #0
 810a6fe:	d17f      	bne.n	810a800 <_strtod_l+0x8b8>
 810a700:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 810a704:	0d1b      	lsrs	r3, r3, #20
 810a706:	051b      	lsls	r3, r3, #20
 810a708:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 810a70c:	d978      	bls.n	810a800 <_strtod_l+0x8b8>
 810a70e:	696b      	ldr	r3, [r5, #20]
 810a710:	b913      	cbnz	r3, 810a718 <_strtod_l+0x7d0>
 810a712:	692b      	ldr	r3, [r5, #16]
 810a714:	2b01      	cmp	r3, #1
 810a716:	dd73      	ble.n	810a800 <_strtod_l+0x8b8>
 810a718:	4629      	mov	r1, r5
 810a71a:	2201      	movs	r2, #1
 810a71c:	4620      	mov	r0, r4
 810a71e:	f002 fa53 	bl	810cbc8 <__lshift>
 810a722:	4659      	mov	r1, fp
 810a724:	4605      	mov	r5, r0
 810a726:	f002 fabb 	bl	810cca0 <__mcmp>
 810a72a:	2800      	cmp	r0, #0
 810a72c:	dd68      	ble.n	810a800 <_strtod_l+0x8b8>
 810a72e:	9904      	ldr	r1, [sp, #16]
 810a730:	4a54      	ldr	r2, [pc, #336]	; (810a884 <_strtod_l+0x93c>)
 810a732:	464b      	mov	r3, r9
 810a734:	2900      	cmp	r1, #0
 810a736:	f000 8084 	beq.w	810a842 <_strtod_l+0x8fa>
 810a73a:	ea02 0109 	and.w	r1, r2, r9
 810a73e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 810a742:	dc7e      	bgt.n	810a842 <_strtod_l+0x8fa>
 810a744:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 810a748:	f77f aeb3 	ble.w	810a4b2 <_strtod_l+0x56a>
 810a74c:	4b4e      	ldr	r3, [pc, #312]	; (810a888 <_strtod_l+0x940>)
 810a74e:	4640      	mov	r0, r8
 810a750:	4649      	mov	r1, r9
 810a752:	2200      	movs	r2, #0
 810a754:	f7f5 ffd8 	bl	8100708 <__aeabi_dmul>
 810a758:	4b4a      	ldr	r3, [pc, #296]	; (810a884 <_strtod_l+0x93c>)
 810a75a:	400b      	ands	r3, r1
 810a75c:	4680      	mov	r8, r0
 810a75e:	4689      	mov	r9, r1
 810a760:	2b00      	cmp	r3, #0
 810a762:	f47f ae3f 	bne.w	810a3e4 <_strtod_l+0x49c>
 810a766:	2322      	movs	r3, #34	; 0x22
 810a768:	6023      	str	r3, [r4, #0]
 810a76a:	e63b      	b.n	810a3e4 <_strtod_l+0x49c>
 810a76c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810a770:	fa02 f303 	lsl.w	r3, r2, r3
 810a774:	ea03 0808 	and.w	r8, r3, r8
 810a778:	e6e8      	b.n	810a54c <_strtod_l+0x604>
 810a77a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 810a77e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 810a782:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 810a786:	36e2      	adds	r6, #226	; 0xe2
 810a788:	fa01 f306 	lsl.w	r3, r1, r6
 810a78c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 810a790:	e748      	b.n	810a624 <_strtod_l+0x6dc>
 810a792:	2100      	movs	r1, #0
 810a794:	2301      	movs	r3, #1
 810a796:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 810a79a:	e743      	b.n	810a624 <_strtod_l+0x6dc>
 810a79c:	9916      	ldr	r1, [sp, #88]	; 0x58
 810a79e:	4632      	mov	r2, r6
 810a7a0:	4620      	mov	r0, r4
 810a7a2:	f002 fa11 	bl	810cbc8 <__lshift>
 810a7a6:	9016      	str	r0, [sp, #88]	; 0x58
 810a7a8:	2800      	cmp	r0, #0
 810a7aa:	f47f af6b 	bne.w	810a684 <_strtod_l+0x73c>
 810a7ae:	e60f      	b.n	810a3d0 <_strtod_l+0x488>
 810a7b0:	46ca      	mov	sl, r9
 810a7b2:	d171      	bne.n	810a898 <_strtod_l+0x950>
 810a7b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810a7b6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810a7ba:	b352      	cbz	r2, 810a812 <_strtod_l+0x8ca>
 810a7bc:	4a33      	ldr	r2, [pc, #204]	; (810a88c <_strtod_l+0x944>)
 810a7be:	4293      	cmp	r3, r2
 810a7c0:	d12a      	bne.n	810a818 <_strtod_l+0x8d0>
 810a7c2:	9b04      	ldr	r3, [sp, #16]
 810a7c4:	4641      	mov	r1, r8
 810a7c6:	b1fb      	cbz	r3, 810a808 <_strtod_l+0x8c0>
 810a7c8:	4b2e      	ldr	r3, [pc, #184]	; (810a884 <_strtod_l+0x93c>)
 810a7ca:	ea09 0303 	and.w	r3, r9, r3
 810a7ce:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 810a7d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810a7d6:	d81a      	bhi.n	810a80e <_strtod_l+0x8c6>
 810a7d8:	0d1b      	lsrs	r3, r3, #20
 810a7da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 810a7de:	fa02 f303 	lsl.w	r3, r2, r3
 810a7e2:	4299      	cmp	r1, r3
 810a7e4:	d118      	bne.n	810a818 <_strtod_l+0x8d0>
 810a7e6:	4b2a      	ldr	r3, [pc, #168]	; (810a890 <_strtod_l+0x948>)
 810a7e8:	459a      	cmp	sl, r3
 810a7ea:	d102      	bne.n	810a7f2 <_strtod_l+0x8aa>
 810a7ec:	3101      	adds	r1, #1
 810a7ee:	f43f adef 	beq.w	810a3d0 <_strtod_l+0x488>
 810a7f2:	4b24      	ldr	r3, [pc, #144]	; (810a884 <_strtod_l+0x93c>)
 810a7f4:	ea0a 0303 	and.w	r3, sl, r3
 810a7f8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 810a7fc:	f04f 0800 	mov.w	r8, #0
 810a800:	9b04      	ldr	r3, [sp, #16]
 810a802:	2b00      	cmp	r3, #0
 810a804:	d1a2      	bne.n	810a74c <_strtod_l+0x804>
 810a806:	e5ed      	b.n	810a3e4 <_strtod_l+0x49c>
 810a808:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 810a80c:	e7e9      	b.n	810a7e2 <_strtod_l+0x89a>
 810a80e:	4613      	mov	r3, r2
 810a810:	e7e7      	b.n	810a7e2 <_strtod_l+0x89a>
 810a812:	ea53 0308 	orrs.w	r3, r3, r8
 810a816:	d08a      	beq.n	810a72e <_strtod_l+0x7e6>
 810a818:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810a81a:	b1e3      	cbz	r3, 810a856 <_strtod_l+0x90e>
 810a81c:	ea13 0f0a 	tst.w	r3, sl
 810a820:	d0ee      	beq.n	810a800 <_strtod_l+0x8b8>
 810a822:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810a824:	9a04      	ldr	r2, [sp, #16]
 810a826:	4640      	mov	r0, r8
 810a828:	4649      	mov	r1, r9
 810a82a:	b1c3      	cbz	r3, 810a85e <_strtod_l+0x916>
 810a82c:	f7ff fb70 	bl	8109f10 <sulp>
 810a830:	4602      	mov	r2, r0
 810a832:	460b      	mov	r3, r1
 810a834:	ec51 0b18 	vmov	r0, r1, d8
 810a838:	f7f5 fdb0 	bl	810039c <__adddf3>
 810a83c:	4680      	mov	r8, r0
 810a83e:	4689      	mov	r9, r1
 810a840:	e7de      	b.n	810a800 <_strtod_l+0x8b8>
 810a842:	4013      	ands	r3, r2
 810a844:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 810a848:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 810a84c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 810a850:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 810a854:	e7d4      	b.n	810a800 <_strtod_l+0x8b8>
 810a856:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810a858:	ea13 0f08 	tst.w	r3, r8
 810a85c:	e7e0      	b.n	810a820 <_strtod_l+0x8d8>
 810a85e:	f7ff fb57 	bl	8109f10 <sulp>
 810a862:	4602      	mov	r2, r0
 810a864:	460b      	mov	r3, r1
 810a866:	ec51 0b18 	vmov	r0, r1, d8
 810a86a:	f7f5 fd95 	bl	8100398 <__aeabi_dsub>
 810a86e:	2200      	movs	r2, #0
 810a870:	2300      	movs	r3, #0
 810a872:	4680      	mov	r8, r0
 810a874:	4689      	mov	r9, r1
 810a876:	f7f6 f9af 	bl	8100bd8 <__aeabi_dcmpeq>
 810a87a:	2800      	cmp	r0, #0
 810a87c:	d0c0      	beq.n	810a800 <_strtod_l+0x8b8>
 810a87e:	e618      	b.n	810a4b2 <_strtod_l+0x56a>
 810a880:	fffffc02 	.word	0xfffffc02
 810a884:	7ff00000 	.word	0x7ff00000
 810a888:	39500000 	.word	0x39500000
 810a88c:	000fffff 	.word	0x000fffff
 810a890:	7fefffff 	.word	0x7fefffff
 810a894:	0810e898 	.word	0x0810e898
 810a898:	4659      	mov	r1, fp
 810a89a:	4628      	mov	r0, r5
 810a89c:	f002 fb70 	bl	810cf80 <__ratio>
 810a8a0:	ec57 6b10 	vmov	r6, r7, d0
 810a8a4:	ee10 0a10 	vmov	r0, s0
 810a8a8:	2200      	movs	r2, #0
 810a8aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 810a8ae:	4639      	mov	r1, r7
 810a8b0:	f7f6 f9a6 	bl	8100c00 <__aeabi_dcmple>
 810a8b4:	2800      	cmp	r0, #0
 810a8b6:	d071      	beq.n	810a99c <_strtod_l+0xa54>
 810a8b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810a8ba:	2b00      	cmp	r3, #0
 810a8bc:	d17c      	bne.n	810a9b8 <_strtod_l+0xa70>
 810a8be:	f1b8 0f00 	cmp.w	r8, #0
 810a8c2:	d15a      	bne.n	810a97a <_strtod_l+0xa32>
 810a8c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810a8c8:	2b00      	cmp	r3, #0
 810a8ca:	d15d      	bne.n	810a988 <_strtod_l+0xa40>
 810a8cc:	4b90      	ldr	r3, [pc, #576]	; (810ab10 <_strtod_l+0xbc8>)
 810a8ce:	2200      	movs	r2, #0
 810a8d0:	4630      	mov	r0, r6
 810a8d2:	4639      	mov	r1, r7
 810a8d4:	f7f6 f98a 	bl	8100bec <__aeabi_dcmplt>
 810a8d8:	2800      	cmp	r0, #0
 810a8da:	d15c      	bne.n	810a996 <_strtod_l+0xa4e>
 810a8dc:	4630      	mov	r0, r6
 810a8de:	4639      	mov	r1, r7
 810a8e0:	4b8c      	ldr	r3, [pc, #560]	; (810ab14 <_strtod_l+0xbcc>)
 810a8e2:	2200      	movs	r2, #0
 810a8e4:	f7f5 ff10 	bl	8100708 <__aeabi_dmul>
 810a8e8:	4606      	mov	r6, r0
 810a8ea:	460f      	mov	r7, r1
 810a8ec:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 810a8f0:	9606      	str	r6, [sp, #24]
 810a8f2:	9307      	str	r3, [sp, #28]
 810a8f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810a8f8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 810a8fc:	4b86      	ldr	r3, [pc, #536]	; (810ab18 <_strtod_l+0xbd0>)
 810a8fe:	ea0a 0303 	and.w	r3, sl, r3
 810a902:	930d      	str	r3, [sp, #52]	; 0x34
 810a904:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810a906:	4b85      	ldr	r3, [pc, #532]	; (810ab1c <_strtod_l+0xbd4>)
 810a908:	429a      	cmp	r2, r3
 810a90a:	f040 8090 	bne.w	810aa2e <_strtod_l+0xae6>
 810a90e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 810a912:	ec49 8b10 	vmov	d0, r8, r9
 810a916:	f002 fa69 	bl	810cdec <__ulp>
 810a91a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810a91e:	ec51 0b10 	vmov	r0, r1, d0
 810a922:	f7f5 fef1 	bl	8100708 <__aeabi_dmul>
 810a926:	4642      	mov	r2, r8
 810a928:	464b      	mov	r3, r9
 810a92a:	f7f5 fd37 	bl	810039c <__adddf3>
 810a92e:	460b      	mov	r3, r1
 810a930:	4979      	ldr	r1, [pc, #484]	; (810ab18 <_strtod_l+0xbd0>)
 810a932:	4a7b      	ldr	r2, [pc, #492]	; (810ab20 <_strtod_l+0xbd8>)
 810a934:	4019      	ands	r1, r3
 810a936:	4291      	cmp	r1, r2
 810a938:	4680      	mov	r8, r0
 810a93a:	d944      	bls.n	810a9c6 <_strtod_l+0xa7e>
 810a93c:	ee18 2a90 	vmov	r2, s17
 810a940:	4b78      	ldr	r3, [pc, #480]	; (810ab24 <_strtod_l+0xbdc>)
 810a942:	429a      	cmp	r2, r3
 810a944:	d104      	bne.n	810a950 <_strtod_l+0xa08>
 810a946:	ee18 3a10 	vmov	r3, s16
 810a94a:	3301      	adds	r3, #1
 810a94c:	f43f ad40 	beq.w	810a3d0 <_strtod_l+0x488>
 810a950:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 810ab24 <_strtod_l+0xbdc>
 810a954:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 810a958:	9916      	ldr	r1, [sp, #88]	; 0x58
 810a95a:	4620      	mov	r0, r4
 810a95c:	f001 ff1a 	bl	810c794 <_Bfree>
 810a960:	9905      	ldr	r1, [sp, #20]
 810a962:	4620      	mov	r0, r4
 810a964:	f001 ff16 	bl	810c794 <_Bfree>
 810a968:	4659      	mov	r1, fp
 810a96a:	4620      	mov	r0, r4
 810a96c:	f001 ff12 	bl	810c794 <_Bfree>
 810a970:	4629      	mov	r1, r5
 810a972:	4620      	mov	r0, r4
 810a974:	f001 ff0e 	bl	810c794 <_Bfree>
 810a978:	e609      	b.n	810a58e <_strtod_l+0x646>
 810a97a:	f1b8 0f01 	cmp.w	r8, #1
 810a97e:	d103      	bne.n	810a988 <_strtod_l+0xa40>
 810a980:	f1b9 0f00 	cmp.w	r9, #0
 810a984:	f43f ad95 	beq.w	810a4b2 <_strtod_l+0x56a>
 810a988:	ed9f 7b55 	vldr	d7, [pc, #340]	; 810aae0 <_strtod_l+0xb98>
 810a98c:	4f60      	ldr	r7, [pc, #384]	; (810ab10 <_strtod_l+0xbc8>)
 810a98e:	ed8d 7b06 	vstr	d7, [sp, #24]
 810a992:	2600      	movs	r6, #0
 810a994:	e7ae      	b.n	810a8f4 <_strtod_l+0x9ac>
 810a996:	4f5f      	ldr	r7, [pc, #380]	; (810ab14 <_strtod_l+0xbcc>)
 810a998:	2600      	movs	r6, #0
 810a99a:	e7a7      	b.n	810a8ec <_strtod_l+0x9a4>
 810a99c:	4b5d      	ldr	r3, [pc, #372]	; (810ab14 <_strtod_l+0xbcc>)
 810a99e:	4630      	mov	r0, r6
 810a9a0:	4639      	mov	r1, r7
 810a9a2:	2200      	movs	r2, #0
 810a9a4:	f7f5 feb0 	bl	8100708 <__aeabi_dmul>
 810a9a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810a9aa:	4606      	mov	r6, r0
 810a9ac:	460f      	mov	r7, r1
 810a9ae:	2b00      	cmp	r3, #0
 810a9b0:	d09c      	beq.n	810a8ec <_strtod_l+0x9a4>
 810a9b2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 810a9b6:	e79d      	b.n	810a8f4 <_strtod_l+0x9ac>
 810a9b8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 810aae8 <_strtod_l+0xba0>
 810a9bc:	ed8d 7b06 	vstr	d7, [sp, #24]
 810a9c0:	ec57 6b17 	vmov	r6, r7, d7
 810a9c4:	e796      	b.n	810a8f4 <_strtod_l+0x9ac>
 810a9c6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 810a9ca:	9b04      	ldr	r3, [sp, #16]
 810a9cc:	46ca      	mov	sl, r9
 810a9ce:	2b00      	cmp	r3, #0
 810a9d0:	d1c2      	bne.n	810a958 <_strtod_l+0xa10>
 810a9d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 810a9d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810a9d8:	0d1b      	lsrs	r3, r3, #20
 810a9da:	051b      	lsls	r3, r3, #20
 810a9dc:	429a      	cmp	r2, r3
 810a9de:	d1bb      	bne.n	810a958 <_strtod_l+0xa10>
 810a9e0:	4630      	mov	r0, r6
 810a9e2:	4639      	mov	r1, r7
 810a9e4:	f7f6 f9f0 	bl	8100dc8 <__aeabi_d2lz>
 810a9e8:	f7f5 fe60 	bl	81006ac <__aeabi_l2d>
 810a9ec:	4602      	mov	r2, r0
 810a9ee:	460b      	mov	r3, r1
 810a9f0:	4630      	mov	r0, r6
 810a9f2:	4639      	mov	r1, r7
 810a9f4:	f7f5 fcd0 	bl	8100398 <__aeabi_dsub>
 810a9f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810a9fa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810a9fe:	ea43 0308 	orr.w	r3, r3, r8
 810aa02:	4313      	orrs	r3, r2
 810aa04:	4606      	mov	r6, r0
 810aa06:	460f      	mov	r7, r1
 810aa08:	d054      	beq.n	810aab4 <_strtod_l+0xb6c>
 810aa0a:	a339      	add	r3, pc, #228	; (adr r3, 810aaf0 <_strtod_l+0xba8>)
 810aa0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810aa10:	f7f6 f8ec 	bl	8100bec <__aeabi_dcmplt>
 810aa14:	2800      	cmp	r0, #0
 810aa16:	f47f ace5 	bne.w	810a3e4 <_strtod_l+0x49c>
 810aa1a:	a337      	add	r3, pc, #220	; (adr r3, 810aaf8 <_strtod_l+0xbb0>)
 810aa1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810aa20:	4630      	mov	r0, r6
 810aa22:	4639      	mov	r1, r7
 810aa24:	f7f6 f900 	bl	8100c28 <__aeabi_dcmpgt>
 810aa28:	2800      	cmp	r0, #0
 810aa2a:	d095      	beq.n	810a958 <_strtod_l+0xa10>
 810aa2c:	e4da      	b.n	810a3e4 <_strtod_l+0x49c>
 810aa2e:	9b04      	ldr	r3, [sp, #16]
 810aa30:	b333      	cbz	r3, 810aa80 <_strtod_l+0xb38>
 810aa32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810aa34:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 810aa38:	d822      	bhi.n	810aa80 <_strtod_l+0xb38>
 810aa3a:	a331      	add	r3, pc, #196	; (adr r3, 810ab00 <_strtod_l+0xbb8>)
 810aa3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810aa40:	4630      	mov	r0, r6
 810aa42:	4639      	mov	r1, r7
 810aa44:	f7f6 f8dc 	bl	8100c00 <__aeabi_dcmple>
 810aa48:	b1a0      	cbz	r0, 810aa74 <_strtod_l+0xb2c>
 810aa4a:	4639      	mov	r1, r7
 810aa4c:	4630      	mov	r0, r6
 810aa4e:	f7f6 f933 	bl	8100cb8 <__aeabi_d2uiz>
 810aa52:	2801      	cmp	r0, #1
 810aa54:	bf38      	it	cc
 810aa56:	2001      	movcc	r0, #1
 810aa58:	f7f5 fddc 	bl	8100614 <__aeabi_ui2d>
 810aa5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810aa5e:	4606      	mov	r6, r0
 810aa60:	460f      	mov	r7, r1
 810aa62:	bb23      	cbnz	r3, 810aaae <_strtod_l+0xb66>
 810aa64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810aa68:	9010      	str	r0, [sp, #64]	; 0x40
 810aa6a:	9311      	str	r3, [sp, #68]	; 0x44
 810aa6c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 810aa70:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 810aa74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810aa76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810aa78:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 810aa7c:	1a9b      	subs	r3, r3, r2
 810aa7e:	930f      	str	r3, [sp, #60]	; 0x3c
 810aa80:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 810aa84:	eeb0 0a48 	vmov.f32	s0, s16
 810aa88:	eef0 0a68 	vmov.f32	s1, s17
 810aa8c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 810aa90:	f002 f9ac 	bl	810cdec <__ulp>
 810aa94:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 810aa98:	ec53 2b10 	vmov	r2, r3, d0
 810aa9c:	f7f5 fe34 	bl	8100708 <__aeabi_dmul>
 810aaa0:	ec53 2b18 	vmov	r2, r3, d8
 810aaa4:	f7f5 fc7a 	bl	810039c <__adddf3>
 810aaa8:	4680      	mov	r8, r0
 810aaaa:	4689      	mov	r9, r1
 810aaac:	e78d      	b.n	810a9ca <_strtod_l+0xa82>
 810aaae:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 810aab2:	e7db      	b.n	810aa6c <_strtod_l+0xb24>
 810aab4:	a314      	add	r3, pc, #80	; (adr r3, 810ab08 <_strtod_l+0xbc0>)
 810aab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 810aaba:	f7f6 f897 	bl	8100bec <__aeabi_dcmplt>
 810aabe:	e7b3      	b.n	810aa28 <_strtod_l+0xae0>
 810aac0:	2300      	movs	r3, #0
 810aac2:	930a      	str	r3, [sp, #40]	; 0x28
 810aac4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 810aac6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810aac8:	6013      	str	r3, [r2, #0]
 810aaca:	f7ff ba7c 	b.w	8109fc6 <_strtod_l+0x7e>
 810aace:	2a65      	cmp	r2, #101	; 0x65
 810aad0:	f43f ab75 	beq.w	810a1be <_strtod_l+0x276>
 810aad4:	2a45      	cmp	r2, #69	; 0x45
 810aad6:	f43f ab72 	beq.w	810a1be <_strtod_l+0x276>
 810aada:	2301      	movs	r3, #1
 810aadc:	f7ff bbaa 	b.w	810a234 <_strtod_l+0x2ec>
 810aae0:	00000000 	.word	0x00000000
 810aae4:	bff00000 	.word	0xbff00000
 810aae8:	00000000 	.word	0x00000000
 810aaec:	3ff00000 	.word	0x3ff00000
 810aaf0:	94a03595 	.word	0x94a03595
 810aaf4:	3fdfffff 	.word	0x3fdfffff
 810aaf8:	35afe535 	.word	0x35afe535
 810aafc:	3fe00000 	.word	0x3fe00000
 810ab00:	ffc00000 	.word	0xffc00000
 810ab04:	41dfffff 	.word	0x41dfffff
 810ab08:	94a03595 	.word	0x94a03595
 810ab0c:	3fcfffff 	.word	0x3fcfffff
 810ab10:	3ff00000 	.word	0x3ff00000
 810ab14:	3fe00000 	.word	0x3fe00000
 810ab18:	7ff00000 	.word	0x7ff00000
 810ab1c:	7fe00000 	.word	0x7fe00000
 810ab20:	7c9fffff 	.word	0x7c9fffff
 810ab24:	7fefffff 	.word	0x7fefffff

0810ab28 <_strtod_r>:
 810ab28:	4b01      	ldr	r3, [pc, #4]	; (810ab30 <_strtod_r+0x8>)
 810ab2a:	f7ff ba0d 	b.w	8109f48 <_strtod_l>
 810ab2e:	bf00      	nop
 810ab30:	1000001c 	.word	0x1000001c

0810ab34 <_strtol_l.constprop.0>:
 810ab34:	2b01      	cmp	r3, #1
 810ab36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810ab3a:	d001      	beq.n	810ab40 <_strtol_l.constprop.0+0xc>
 810ab3c:	2b24      	cmp	r3, #36	; 0x24
 810ab3e:	d906      	bls.n	810ab4e <_strtol_l.constprop.0+0x1a>
 810ab40:	f000 f8e4 	bl	810ad0c <__errno>
 810ab44:	2316      	movs	r3, #22
 810ab46:	6003      	str	r3, [r0, #0]
 810ab48:	2000      	movs	r0, #0
 810ab4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810ab4e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 810ac34 <_strtol_l.constprop.0+0x100>
 810ab52:	460d      	mov	r5, r1
 810ab54:	462e      	mov	r6, r5
 810ab56:	f815 4b01 	ldrb.w	r4, [r5], #1
 810ab5a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 810ab5e:	f017 0708 	ands.w	r7, r7, #8
 810ab62:	d1f7      	bne.n	810ab54 <_strtol_l.constprop.0+0x20>
 810ab64:	2c2d      	cmp	r4, #45	; 0x2d
 810ab66:	d132      	bne.n	810abce <_strtol_l.constprop.0+0x9a>
 810ab68:	782c      	ldrb	r4, [r5, #0]
 810ab6a:	2701      	movs	r7, #1
 810ab6c:	1cb5      	adds	r5, r6, #2
 810ab6e:	2b00      	cmp	r3, #0
 810ab70:	d05b      	beq.n	810ac2a <_strtol_l.constprop.0+0xf6>
 810ab72:	2b10      	cmp	r3, #16
 810ab74:	d109      	bne.n	810ab8a <_strtol_l.constprop.0+0x56>
 810ab76:	2c30      	cmp	r4, #48	; 0x30
 810ab78:	d107      	bne.n	810ab8a <_strtol_l.constprop.0+0x56>
 810ab7a:	782c      	ldrb	r4, [r5, #0]
 810ab7c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 810ab80:	2c58      	cmp	r4, #88	; 0x58
 810ab82:	d14d      	bne.n	810ac20 <_strtol_l.constprop.0+0xec>
 810ab84:	786c      	ldrb	r4, [r5, #1]
 810ab86:	2310      	movs	r3, #16
 810ab88:	3502      	adds	r5, #2
 810ab8a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 810ab8e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 810ab92:	f04f 0e00 	mov.w	lr, #0
 810ab96:	fbb8 f9f3 	udiv	r9, r8, r3
 810ab9a:	4676      	mov	r6, lr
 810ab9c:	fb03 8a19 	mls	sl, r3, r9, r8
 810aba0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 810aba4:	f1bc 0f09 	cmp.w	ip, #9
 810aba8:	d816      	bhi.n	810abd8 <_strtol_l.constprop.0+0xa4>
 810abaa:	4664      	mov	r4, ip
 810abac:	42a3      	cmp	r3, r4
 810abae:	dd24      	ble.n	810abfa <_strtol_l.constprop.0+0xc6>
 810abb0:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 810abb4:	d008      	beq.n	810abc8 <_strtol_l.constprop.0+0x94>
 810abb6:	45b1      	cmp	r9, r6
 810abb8:	d31c      	bcc.n	810abf4 <_strtol_l.constprop.0+0xc0>
 810abba:	d101      	bne.n	810abc0 <_strtol_l.constprop.0+0x8c>
 810abbc:	45a2      	cmp	sl, r4
 810abbe:	db19      	blt.n	810abf4 <_strtol_l.constprop.0+0xc0>
 810abc0:	fb06 4603 	mla	r6, r6, r3, r4
 810abc4:	f04f 0e01 	mov.w	lr, #1
 810abc8:	f815 4b01 	ldrb.w	r4, [r5], #1
 810abcc:	e7e8      	b.n	810aba0 <_strtol_l.constprop.0+0x6c>
 810abce:	2c2b      	cmp	r4, #43	; 0x2b
 810abd0:	bf04      	itt	eq
 810abd2:	782c      	ldrbeq	r4, [r5, #0]
 810abd4:	1cb5      	addeq	r5, r6, #2
 810abd6:	e7ca      	b.n	810ab6e <_strtol_l.constprop.0+0x3a>
 810abd8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 810abdc:	f1bc 0f19 	cmp.w	ip, #25
 810abe0:	d801      	bhi.n	810abe6 <_strtol_l.constprop.0+0xb2>
 810abe2:	3c37      	subs	r4, #55	; 0x37
 810abe4:	e7e2      	b.n	810abac <_strtol_l.constprop.0+0x78>
 810abe6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 810abea:	f1bc 0f19 	cmp.w	ip, #25
 810abee:	d804      	bhi.n	810abfa <_strtol_l.constprop.0+0xc6>
 810abf0:	3c57      	subs	r4, #87	; 0x57
 810abf2:	e7db      	b.n	810abac <_strtol_l.constprop.0+0x78>
 810abf4:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 810abf8:	e7e6      	b.n	810abc8 <_strtol_l.constprop.0+0x94>
 810abfa:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 810abfe:	d105      	bne.n	810ac0c <_strtol_l.constprop.0+0xd8>
 810ac00:	2322      	movs	r3, #34	; 0x22
 810ac02:	6003      	str	r3, [r0, #0]
 810ac04:	4646      	mov	r6, r8
 810ac06:	b942      	cbnz	r2, 810ac1a <_strtol_l.constprop.0+0xe6>
 810ac08:	4630      	mov	r0, r6
 810ac0a:	e79e      	b.n	810ab4a <_strtol_l.constprop.0+0x16>
 810ac0c:	b107      	cbz	r7, 810ac10 <_strtol_l.constprop.0+0xdc>
 810ac0e:	4276      	negs	r6, r6
 810ac10:	2a00      	cmp	r2, #0
 810ac12:	d0f9      	beq.n	810ac08 <_strtol_l.constprop.0+0xd4>
 810ac14:	f1be 0f00 	cmp.w	lr, #0
 810ac18:	d000      	beq.n	810ac1c <_strtol_l.constprop.0+0xe8>
 810ac1a:	1e69      	subs	r1, r5, #1
 810ac1c:	6011      	str	r1, [r2, #0]
 810ac1e:	e7f3      	b.n	810ac08 <_strtol_l.constprop.0+0xd4>
 810ac20:	2430      	movs	r4, #48	; 0x30
 810ac22:	2b00      	cmp	r3, #0
 810ac24:	d1b1      	bne.n	810ab8a <_strtol_l.constprop.0+0x56>
 810ac26:	2308      	movs	r3, #8
 810ac28:	e7af      	b.n	810ab8a <_strtol_l.constprop.0+0x56>
 810ac2a:	2c30      	cmp	r4, #48	; 0x30
 810ac2c:	d0a5      	beq.n	810ab7a <_strtol_l.constprop.0+0x46>
 810ac2e:	230a      	movs	r3, #10
 810ac30:	e7ab      	b.n	810ab8a <_strtol_l.constprop.0+0x56>
 810ac32:	bf00      	nop
 810ac34:	0810e8c9 	.word	0x0810e8c9

0810ac38 <_strtol_r>:
 810ac38:	f7ff bf7c 	b.w	810ab34 <_strtol_l.constprop.0>

0810ac3c <_fwalk_sglue>:
 810ac3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810ac40:	4607      	mov	r7, r0
 810ac42:	4688      	mov	r8, r1
 810ac44:	4614      	mov	r4, r2
 810ac46:	2600      	movs	r6, #0
 810ac48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 810ac4c:	f1b9 0901 	subs.w	r9, r9, #1
 810ac50:	d505      	bpl.n	810ac5e <_fwalk_sglue+0x22>
 810ac52:	6824      	ldr	r4, [r4, #0]
 810ac54:	2c00      	cmp	r4, #0
 810ac56:	d1f7      	bne.n	810ac48 <_fwalk_sglue+0xc>
 810ac58:	4630      	mov	r0, r6
 810ac5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810ac5e:	89ab      	ldrh	r3, [r5, #12]
 810ac60:	2b01      	cmp	r3, #1
 810ac62:	d907      	bls.n	810ac74 <_fwalk_sglue+0x38>
 810ac64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 810ac68:	3301      	adds	r3, #1
 810ac6a:	d003      	beq.n	810ac74 <_fwalk_sglue+0x38>
 810ac6c:	4629      	mov	r1, r5
 810ac6e:	4638      	mov	r0, r7
 810ac70:	47c0      	blx	r8
 810ac72:	4306      	orrs	r6, r0
 810ac74:	3568      	adds	r5, #104	; 0x68
 810ac76:	e7e9      	b.n	810ac4c <_fwalk_sglue+0x10>

0810ac78 <strncmp>:
 810ac78:	b510      	push	{r4, lr}
 810ac7a:	b16a      	cbz	r2, 810ac98 <strncmp+0x20>
 810ac7c:	3901      	subs	r1, #1
 810ac7e:	1884      	adds	r4, r0, r2
 810ac80:	f810 2b01 	ldrb.w	r2, [r0], #1
 810ac84:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 810ac88:	429a      	cmp	r2, r3
 810ac8a:	d103      	bne.n	810ac94 <strncmp+0x1c>
 810ac8c:	42a0      	cmp	r0, r4
 810ac8e:	d001      	beq.n	810ac94 <strncmp+0x1c>
 810ac90:	2a00      	cmp	r2, #0
 810ac92:	d1f5      	bne.n	810ac80 <strncmp+0x8>
 810ac94:	1ad0      	subs	r0, r2, r3
 810ac96:	bd10      	pop	{r4, pc}
 810ac98:	4610      	mov	r0, r2
 810ac9a:	e7fc      	b.n	810ac96 <strncmp+0x1e>

0810ac9c <memset>:
 810ac9c:	4402      	add	r2, r0
 810ac9e:	4603      	mov	r3, r0
 810aca0:	4293      	cmp	r3, r2
 810aca2:	d100      	bne.n	810aca6 <memset+0xa>
 810aca4:	4770      	bx	lr
 810aca6:	f803 1b01 	strb.w	r1, [r3], #1
 810acaa:	e7f9      	b.n	810aca0 <memset+0x4>

0810acac <time>:
 810acac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 810acae:	4b0b      	ldr	r3, [pc, #44]	; (810acdc <time+0x30>)
 810acb0:	2200      	movs	r2, #0
 810acb2:	4669      	mov	r1, sp
 810acb4:	4604      	mov	r4, r0
 810acb6:	6818      	ldr	r0, [r3, #0]
 810acb8:	f000 f816 	bl	810ace8 <_gettimeofday_r>
 810acbc:	2800      	cmp	r0, #0
 810acbe:	bfbe      	ittt	lt
 810acc0:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 810acc4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 810acc8:	e9cd 2300 	strdlt	r2, r3, [sp]
 810accc:	e9dd 0100 	ldrd	r0, r1, [sp]
 810acd0:	b10c      	cbz	r4, 810acd6 <time+0x2a>
 810acd2:	e9c4 0100 	strd	r0, r1, [r4]
 810acd6:	b004      	add	sp, #16
 810acd8:	bd10      	pop	{r4, pc}
 810acda:	bf00      	nop
 810acdc:	100001d4 	.word	0x100001d4

0810ace0 <_localeconv_r>:
 810ace0:	4800      	ldr	r0, [pc, #0]	; (810ace4 <_localeconv_r+0x4>)
 810ace2:	4770      	bx	lr
 810ace4:	1000010c 	.word	0x1000010c

0810ace8 <_gettimeofday_r>:
 810ace8:	b538      	push	{r3, r4, r5, lr}
 810acea:	4d07      	ldr	r5, [pc, #28]	; (810ad08 <_gettimeofday_r+0x20>)
 810acec:	2300      	movs	r3, #0
 810acee:	4604      	mov	r4, r0
 810acf0:	4608      	mov	r0, r1
 810acf2:	4611      	mov	r1, r2
 810acf4:	602b      	str	r3, [r5, #0]
 810acf6:	f003 fd07 	bl	810e708 <_gettimeofday>
 810acfa:	1c43      	adds	r3, r0, #1
 810acfc:	d102      	bne.n	810ad04 <_gettimeofday_r+0x1c>
 810acfe:	682b      	ldr	r3, [r5, #0]
 810ad00:	b103      	cbz	r3, 810ad04 <_gettimeofday_r+0x1c>
 810ad02:	6023      	str	r3, [r4, #0]
 810ad04:	bd38      	pop	{r3, r4, r5, pc}
 810ad06:	bf00      	nop
 810ad08:	100004c8 	.word	0x100004c8

0810ad0c <__errno>:
 810ad0c:	4b01      	ldr	r3, [pc, #4]	; (810ad14 <__errno+0x8>)
 810ad0e:	6818      	ldr	r0, [r3, #0]
 810ad10:	4770      	bx	lr
 810ad12:	bf00      	nop
 810ad14:	100001d4 	.word	0x100001d4

0810ad18 <__libc_init_array>:
 810ad18:	b570      	push	{r4, r5, r6, lr}
 810ad1a:	4d0d      	ldr	r5, [pc, #52]	; (810ad50 <__libc_init_array+0x38>)
 810ad1c:	4c0d      	ldr	r4, [pc, #52]	; (810ad54 <__libc_init_array+0x3c>)
 810ad1e:	1b64      	subs	r4, r4, r5
 810ad20:	10a4      	asrs	r4, r4, #2
 810ad22:	2600      	movs	r6, #0
 810ad24:	42a6      	cmp	r6, r4
 810ad26:	d109      	bne.n	810ad3c <__libc_init_array+0x24>
 810ad28:	4d0b      	ldr	r5, [pc, #44]	; (810ad58 <__libc_init_array+0x40>)
 810ad2a:	4c0c      	ldr	r4, [pc, #48]	; (810ad5c <__libc_init_array+0x44>)
 810ad2c:	f003 fcf4 	bl	810e718 <_init>
 810ad30:	1b64      	subs	r4, r4, r5
 810ad32:	10a4      	asrs	r4, r4, #2
 810ad34:	2600      	movs	r6, #0
 810ad36:	42a6      	cmp	r6, r4
 810ad38:	d105      	bne.n	810ad46 <__libc_init_array+0x2e>
 810ad3a:	bd70      	pop	{r4, r5, r6, pc}
 810ad3c:	f855 3b04 	ldr.w	r3, [r5], #4
 810ad40:	4798      	blx	r3
 810ad42:	3601      	adds	r6, #1
 810ad44:	e7ee      	b.n	810ad24 <__libc_init_array+0xc>
 810ad46:	f855 3b04 	ldr.w	r3, [r5], #4
 810ad4a:	4798      	blx	r3
 810ad4c:	3601      	adds	r6, #1
 810ad4e:	e7f2      	b.n	810ad36 <__libc_init_array+0x1e>
 810ad50:	0810ec80 	.word	0x0810ec80
 810ad54:	0810ec80 	.word	0x0810ec80
 810ad58:	0810ec80 	.word	0x0810ec80
 810ad5c:	0810ec84 	.word	0x0810ec84

0810ad60 <__retarget_lock_acquire_recursive>:
 810ad60:	4770      	bx	lr

0810ad62 <__retarget_lock_release_recursive>:
 810ad62:	4770      	bx	lr

0810ad64 <memcpy>:
 810ad64:	440a      	add	r2, r1
 810ad66:	4291      	cmp	r1, r2
 810ad68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 810ad6c:	d100      	bne.n	810ad70 <memcpy+0xc>
 810ad6e:	4770      	bx	lr
 810ad70:	b510      	push	{r4, lr}
 810ad72:	f811 4b01 	ldrb.w	r4, [r1], #1
 810ad76:	f803 4f01 	strb.w	r4, [r3, #1]!
 810ad7a:	4291      	cmp	r1, r2
 810ad7c:	d1f9      	bne.n	810ad72 <memcpy+0xe>
 810ad7e:	bd10      	pop	{r4, pc}

0810ad80 <nan>:
 810ad80:	ed9f 0b01 	vldr	d0, [pc, #4]	; 810ad88 <nan+0x8>
 810ad84:	4770      	bx	lr
 810ad86:	bf00      	nop
 810ad88:	00000000 	.word	0x00000000
 810ad8c:	7ff80000 	.word	0x7ff80000

0810ad90 <nanf>:
 810ad90:	ed9f 0a01 	vldr	s0, [pc, #4]	; 810ad98 <nanf+0x8>
 810ad94:	4770      	bx	lr
 810ad96:	bf00      	nop
 810ad98:	7fc00000 	.word	0x7fc00000

0810ad9c <__assert_func>:
 810ad9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 810ad9e:	4614      	mov	r4, r2
 810ada0:	461a      	mov	r2, r3
 810ada2:	4b09      	ldr	r3, [pc, #36]	; (810adc8 <__assert_func+0x2c>)
 810ada4:	681b      	ldr	r3, [r3, #0]
 810ada6:	4605      	mov	r5, r0
 810ada8:	68d8      	ldr	r0, [r3, #12]
 810adaa:	b14c      	cbz	r4, 810adc0 <__assert_func+0x24>
 810adac:	4b07      	ldr	r3, [pc, #28]	; (810adcc <__assert_func+0x30>)
 810adae:	9100      	str	r1, [sp, #0]
 810adb0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 810adb4:	4906      	ldr	r1, [pc, #24]	; (810add0 <__assert_func+0x34>)
 810adb6:	462b      	mov	r3, r5
 810adb8:	f002 f99c 	bl	810d0f4 <fiprintf>
 810adbc:	f002 fa58 	bl	810d270 <abort>
 810adc0:	4b04      	ldr	r3, [pc, #16]	; (810add4 <__assert_func+0x38>)
 810adc2:	461c      	mov	r4, r3
 810adc4:	e7f3      	b.n	810adae <__assert_func+0x12>
 810adc6:	bf00      	nop
 810adc8:	100001d4 	.word	0x100001d4
 810adcc:	0810e9c9 	.word	0x0810e9c9
 810add0:	0810e9d6 	.word	0x0810e9d6
 810add4:	0810ea04 	.word	0x0810ea04

0810add8 <quorem>:
 810add8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810addc:	6903      	ldr	r3, [r0, #16]
 810adde:	690c      	ldr	r4, [r1, #16]
 810ade0:	42a3      	cmp	r3, r4
 810ade2:	4607      	mov	r7, r0
 810ade4:	db7e      	blt.n	810aee4 <quorem+0x10c>
 810ade6:	3c01      	subs	r4, #1
 810ade8:	f101 0814 	add.w	r8, r1, #20
 810adec:	f100 0514 	add.w	r5, r0, #20
 810adf0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810adf4:	9301      	str	r3, [sp, #4]
 810adf6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 810adfa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810adfe:	3301      	adds	r3, #1
 810ae00:	429a      	cmp	r2, r3
 810ae02:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 810ae06:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 810ae0a:	fbb2 f6f3 	udiv	r6, r2, r3
 810ae0e:	d331      	bcc.n	810ae74 <quorem+0x9c>
 810ae10:	f04f 0e00 	mov.w	lr, #0
 810ae14:	4640      	mov	r0, r8
 810ae16:	46ac      	mov	ip, r5
 810ae18:	46f2      	mov	sl, lr
 810ae1a:	f850 2b04 	ldr.w	r2, [r0], #4
 810ae1e:	b293      	uxth	r3, r2
 810ae20:	fb06 e303 	mla	r3, r6, r3, lr
 810ae24:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 810ae28:	0c1a      	lsrs	r2, r3, #16
 810ae2a:	b29b      	uxth	r3, r3
 810ae2c:	ebaa 0303 	sub.w	r3, sl, r3
 810ae30:	f8dc a000 	ldr.w	sl, [ip]
 810ae34:	fa13 f38a 	uxtah	r3, r3, sl
 810ae38:	fb06 220e 	mla	r2, r6, lr, r2
 810ae3c:	9300      	str	r3, [sp, #0]
 810ae3e:	9b00      	ldr	r3, [sp, #0]
 810ae40:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 810ae44:	b292      	uxth	r2, r2
 810ae46:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 810ae4a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810ae4e:	f8bd 3000 	ldrh.w	r3, [sp]
 810ae52:	4581      	cmp	r9, r0
 810ae54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810ae58:	f84c 3b04 	str.w	r3, [ip], #4
 810ae5c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 810ae60:	d2db      	bcs.n	810ae1a <quorem+0x42>
 810ae62:	f855 300b 	ldr.w	r3, [r5, fp]
 810ae66:	b92b      	cbnz	r3, 810ae74 <quorem+0x9c>
 810ae68:	9b01      	ldr	r3, [sp, #4]
 810ae6a:	3b04      	subs	r3, #4
 810ae6c:	429d      	cmp	r5, r3
 810ae6e:	461a      	mov	r2, r3
 810ae70:	d32c      	bcc.n	810aecc <quorem+0xf4>
 810ae72:	613c      	str	r4, [r7, #16]
 810ae74:	4638      	mov	r0, r7
 810ae76:	f001 ff13 	bl	810cca0 <__mcmp>
 810ae7a:	2800      	cmp	r0, #0
 810ae7c:	db22      	blt.n	810aec4 <quorem+0xec>
 810ae7e:	3601      	adds	r6, #1
 810ae80:	4629      	mov	r1, r5
 810ae82:	2000      	movs	r0, #0
 810ae84:	f858 2b04 	ldr.w	r2, [r8], #4
 810ae88:	f8d1 c000 	ldr.w	ip, [r1]
 810ae8c:	b293      	uxth	r3, r2
 810ae8e:	1ac3      	subs	r3, r0, r3
 810ae90:	0c12      	lsrs	r2, r2, #16
 810ae92:	fa13 f38c 	uxtah	r3, r3, ip
 810ae96:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 810ae9a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810ae9e:	b29b      	uxth	r3, r3
 810aea0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810aea4:	45c1      	cmp	r9, r8
 810aea6:	f841 3b04 	str.w	r3, [r1], #4
 810aeaa:	ea4f 4022 	mov.w	r0, r2, asr #16
 810aeae:	d2e9      	bcs.n	810ae84 <quorem+0xac>
 810aeb0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810aeb4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810aeb8:	b922      	cbnz	r2, 810aec4 <quorem+0xec>
 810aeba:	3b04      	subs	r3, #4
 810aebc:	429d      	cmp	r5, r3
 810aebe:	461a      	mov	r2, r3
 810aec0:	d30a      	bcc.n	810aed8 <quorem+0x100>
 810aec2:	613c      	str	r4, [r7, #16]
 810aec4:	4630      	mov	r0, r6
 810aec6:	b003      	add	sp, #12
 810aec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810aecc:	6812      	ldr	r2, [r2, #0]
 810aece:	3b04      	subs	r3, #4
 810aed0:	2a00      	cmp	r2, #0
 810aed2:	d1ce      	bne.n	810ae72 <quorem+0x9a>
 810aed4:	3c01      	subs	r4, #1
 810aed6:	e7c9      	b.n	810ae6c <quorem+0x94>
 810aed8:	6812      	ldr	r2, [r2, #0]
 810aeda:	3b04      	subs	r3, #4
 810aedc:	2a00      	cmp	r2, #0
 810aede:	d1f0      	bne.n	810aec2 <quorem+0xea>
 810aee0:	3c01      	subs	r4, #1
 810aee2:	e7eb      	b.n	810aebc <quorem+0xe4>
 810aee4:	2000      	movs	r0, #0
 810aee6:	e7ee      	b.n	810aec6 <quorem+0xee>

0810aee8 <_dtoa_r>:
 810aee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810aeec:	ed2d 8b04 	vpush	{d8-d9}
 810aef0:	69c5      	ldr	r5, [r0, #28]
 810aef2:	b093      	sub	sp, #76	; 0x4c
 810aef4:	ed8d 0b02 	vstr	d0, [sp, #8]
 810aef8:	ec57 6b10 	vmov	r6, r7, d0
 810aefc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 810af00:	9107      	str	r1, [sp, #28]
 810af02:	4604      	mov	r4, r0
 810af04:	920a      	str	r2, [sp, #40]	; 0x28
 810af06:	930d      	str	r3, [sp, #52]	; 0x34
 810af08:	b975      	cbnz	r5, 810af28 <_dtoa_r+0x40>
 810af0a:	2010      	movs	r0, #16
 810af0c:	f001 fa8e 	bl	810c42c <malloc>
 810af10:	4602      	mov	r2, r0
 810af12:	61e0      	str	r0, [r4, #28]
 810af14:	b920      	cbnz	r0, 810af20 <_dtoa_r+0x38>
 810af16:	4bae      	ldr	r3, [pc, #696]	; (810b1d0 <_dtoa_r+0x2e8>)
 810af18:	21ef      	movs	r1, #239	; 0xef
 810af1a:	48ae      	ldr	r0, [pc, #696]	; (810b1d4 <_dtoa_r+0x2ec>)
 810af1c:	f7ff ff3e 	bl	810ad9c <__assert_func>
 810af20:	e9c0 5501 	strd	r5, r5, [r0, #4]
 810af24:	6005      	str	r5, [r0, #0]
 810af26:	60c5      	str	r5, [r0, #12]
 810af28:	69e3      	ldr	r3, [r4, #28]
 810af2a:	6819      	ldr	r1, [r3, #0]
 810af2c:	b151      	cbz	r1, 810af44 <_dtoa_r+0x5c>
 810af2e:	685a      	ldr	r2, [r3, #4]
 810af30:	604a      	str	r2, [r1, #4]
 810af32:	2301      	movs	r3, #1
 810af34:	4093      	lsls	r3, r2
 810af36:	608b      	str	r3, [r1, #8]
 810af38:	4620      	mov	r0, r4
 810af3a:	f001 fc2b 	bl	810c794 <_Bfree>
 810af3e:	69e3      	ldr	r3, [r4, #28]
 810af40:	2200      	movs	r2, #0
 810af42:	601a      	str	r2, [r3, #0]
 810af44:	1e3b      	subs	r3, r7, #0
 810af46:	bfbb      	ittet	lt
 810af48:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 810af4c:	9303      	strlt	r3, [sp, #12]
 810af4e:	2300      	movge	r3, #0
 810af50:	2201      	movlt	r2, #1
 810af52:	bfac      	ite	ge
 810af54:	f8c8 3000 	strge.w	r3, [r8]
 810af58:	f8c8 2000 	strlt.w	r2, [r8]
 810af5c:	4b9e      	ldr	r3, [pc, #632]	; (810b1d8 <_dtoa_r+0x2f0>)
 810af5e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 810af62:	ea33 0308 	bics.w	r3, r3, r8
 810af66:	d11b      	bne.n	810afa0 <_dtoa_r+0xb8>
 810af68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810af6a:	f242 730f 	movw	r3, #9999	; 0x270f
 810af6e:	6013      	str	r3, [r2, #0]
 810af70:	f3c8 0313 	ubfx	r3, r8, #0, #20
 810af74:	4333      	orrs	r3, r6
 810af76:	f000 8593 	beq.w	810baa0 <_dtoa_r+0xbb8>
 810af7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810af7c:	b963      	cbnz	r3, 810af98 <_dtoa_r+0xb0>
 810af7e:	4b97      	ldr	r3, [pc, #604]	; (810b1dc <_dtoa_r+0x2f4>)
 810af80:	e027      	b.n	810afd2 <_dtoa_r+0xea>
 810af82:	4b97      	ldr	r3, [pc, #604]	; (810b1e0 <_dtoa_r+0x2f8>)
 810af84:	9300      	str	r3, [sp, #0]
 810af86:	3308      	adds	r3, #8
 810af88:	9a21      	ldr	r2, [sp, #132]	; 0x84
 810af8a:	6013      	str	r3, [r2, #0]
 810af8c:	9800      	ldr	r0, [sp, #0]
 810af8e:	b013      	add	sp, #76	; 0x4c
 810af90:	ecbd 8b04 	vpop	{d8-d9}
 810af94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810af98:	4b90      	ldr	r3, [pc, #576]	; (810b1dc <_dtoa_r+0x2f4>)
 810af9a:	9300      	str	r3, [sp, #0]
 810af9c:	3303      	adds	r3, #3
 810af9e:	e7f3      	b.n	810af88 <_dtoa_r+0xa0>
 810afa0:	ed9d 7b02 	vldr	d7, [sp, #8]
 810afa4:	2200      	movs	r2, #0
 810afa6:	ec51 0b17 	vmov	r0, r1, d7
 810afaa:	eeb0 8a47 	vmov.f32	s16, s14
 810afae:	eef0 8a67 	vmov.f32	s17, s15
 810afb2:	2300      	movs	r3, #0
 810afb4:	f7f5 fe10 	bl	8100bd8 <__aeabi_dcmpeq>
 810afb8:	4681      	mov	r9, r0
 810afba:	b160      	cbz	r0, 810afd6 <_dtoa_r+0xee>
 810afbc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810afbe:	2301      	movs	r3, #1
 810afc0:	6013      	str	r3, [r2, #0]
 810afc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810afc4:	2b00      	cmp	r3, #0
 810afc6:	f000 8568 	beq.w	810ba9a <_dtoa_r+0xbb2>
 810afca:	4b86      	ldr	r3, [pc, #536]	; (810b1e4 <_dtoa_r+0x2fc>)
 810afcc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 810afce:	6013      	str	r3, [r2, #0]
 810afd0:	3b01      	subs	r3, #1
 810afd2:	9300      	str	r3, [sp, #0]
 810afd4:	e7da      	b.n	810af8c <_dtoa_r+0xa4>
 810afd6:	aa10      	add	r2, sp, #64	; 0x40
 810afd8:	a911      	add	r1, sp, #68	; 0x44
 810afda:	4620      	mov	r0, r4
 810afdc:	eeb0 0a48 	vmov.f32	s0, s16
 810afe0:	eef0 0a68 	vmov.f32	s1, s17
 810afe4:	f001 ff72 	bl	810cecc <__d2b>
 810afe8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 810afec:	4682      	mov	sl, r0
 810afee:	2d00      	cmp	r5, #0
 810aff0:	d07f      	beq.n	810b0f2 <_dtoa_r+0x20a>
 810aff2:	ee18 3a90 	vmov	r3, s17
 810aff6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810affa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 810affe:	ec51 0b18 	vmov	r0, r1, d8
 810b002:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 810b006:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 810b00a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 810b00e:	4619      	mov	r1, r3
 810b010:	2200      	movs	r2, #0
 810b012:	4b75      	ldr	r3, [pc, #468]	; (810b1e8 <_dtoa_r+0x300>)
 810b014:	f7f5 f9c0 	bl	8100398 <__aeabi_dsub>
 810b018:	a367      	add	r3, pc, #412	; (adr r3, 810b1b8 <_dtoa_r+0x2d0>)
 810b01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b01e:	f7f5 fb73 	bl	8100708 <__aeabi_dmul>
 810b022:	a367      	add	r3, pc, #412	; (adr r3, 810b1c0 <_dtoa_r+0x2d8>)
 810b024:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b028:	f7f5 f9b8 	bl	810039c <__adddf3>
 810b02c:	4606      	mov	r6, r0
 810b02e:	4628      	mov	r0, r5
 810b030:	460f      	mov	r7, r1
 810b032:	f7f5 faff 	bl	8100634 <__aeabi_i2d>
 810b036:	a364      	add	r3, pc, #400	; (adr r3, 810b1c8 <_dtoa_r+0x2e0>)
 810b038:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b03c:	f7f5 fb64 	bl	8100708 <__aeabi_dmul>
 810b040:	4602      	mov	r2, r0
 810b042:	460b      	mov	r3, r1
 810b044:	4630      	mov	r0, r6
 810b046:	4639      	mov	r1, r7
 810b048:	f7f5 f9a8 	bl	810039c <__adddf3>
 810b04c:	4606      	mov	r6, r0
 810b04e:	460f      	mov	r7, r1
 810b050:	f7f5 fe0a 	bl	8100c68 <__aeabi_d2iz>
 810b054:	2200      	movs	r2, #0
 810b056:	4683      	mov	fp, r0
 810b058:	2300      	movs	r3, #0
 810b05a:	4630      	mov	r0, r6
 810b05c:	4639      	mov	r1, r7
 810b05e:	f7f5 fdc5 	bl	8100bec <__aeabi_dcmplt>
 810b062:	b148      	cbz	r0, 810b078 <_dtoa_r+0x190>
 810b064:	4658      	mov	r0, fp
 810b066:	f7f5 fae5 	bl	8100634 <__aeabi_i2d>
 810b06a:	4632      	mov	r2, r6
 810b06c:	463b      	mov	r3, r7
 810b06e:	f7f5 fdb3 	bl	8100bd8 <__aeabi_dcmpeq>
 810b072:	b908      	cbnz	r0, 810b078 <_dtoa_r+0x190>
 810b074:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 810b078:	f1bb 0f16 	cmp.w	fp, #22
 810b07c:	d857      	bhi.n	810b12e <_dtoa_r+0x246>
 810b07e:	4b5b      	ldr	r3, [pc, #364]	; (810b1ec <_dtoa_r+0x304>)
 810b080:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 810b084:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b088:	ec51 0b18 	vmov	r0, r1, d8
 810b08c:	f7f5 fdae 	bl	8100bec <__aeabi_dcmplt>
 810b090:	2800      	cmp	r0, #0
 810b092:	d04e      	beq.n	810b132 <_dtoa_r+0x24a>
 810b094:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 810b098:	2300      	movs	r3, #0
 810b09a:	930c      	str	r3, [sp, #48]	; 0x30
 810b09c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 810b09e:	1b5b      	subs	r3, r3, r5
 810b0a0:	1e5a      	subs	r2, r3, #1
 810b0a2:	bf45      	ittet	mi
 810b0a4:	f1c3 0301 	rsbmi	r3, r3, #1
 810b0a8:	9305      	strmi	r3, [sp, #20]
 810b0aa:	2300      	movpl	r3, #0
 810b0ac:	2300      	movmi	r3, #0
 810b0ae:	9206      	str	r2, [sp, #24]
 810b0b0:	bf54      	ite	pl
 810b0b2:	9305      	strpl	r3, [sp, #20]
 810b0b4:	9306      	strmi	r3, [sp, #24]
 810b0b6:	f1bb 0f00 	cmp.w	fp, #0
 810b0ba:	db3c      	blt.n	810b136 <_dtoa_r+0x24e>
 810b0bc:	9b06      	ldr	r3, [sp, #24]
 810b0be:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 810b0c2:	445b      	add	r3, fp
 810b0c4:	9306      	str	r3, [sp, #24]
 810b0c6:	2300      	movs	r3, #0
 810b0c8:	9308      	str	r3, [sp, #32]
 810b0ca:	9b07      	ldr	r3, [sp, #28]
 810b0cc:	2b09      	cmp	r3, #9
 810b0ce:	d868      	bhi.n	810b1a2 <_dtoa_r+0x2ba>
 810b0d0:	2b05      	cmp	r3, #5
 810b0d2:	bfc4      	itt	gt
 810b0d4:	3b04      	subgt	r3, #4
 810b0d6:	9307      	strgt	r3, [sp, #28]
 810b0d8:	9b07      	ldr	r3, [sp, #28]
 810b0da:	f1a3 0302 	sub.w	r3, r3, #2
 810b0de:	bfcc      	ite	gt
 810b0e0:	2500      	movgt	r5, #0
 810b0e2:	2501      	movle	r5, #1
 810b0e4:	2b03      	cmp	r3, #3
 810b0e6:	f200 8085 	bhi.w	810b1f4 <_dtoa_r+0x30c>
 810b0ea:	e8df f003 	tbb	[pc, r3]
 810b0ee:	3b2e      	.short	0x3b2e
 810b0f0:	5839      	.short	0x5839
 810b0f2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 810b0f6:	441d      	add	r5, r3
 810b0f8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 810b0fc:	2b20      	cmp	r3, #32
 810b0fe:	bfc1      	itttt	gt
 810b100:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 810b104:	fa08 f803 	lslgt.w	r8, r8, r3
 810b108:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 810b10c:	fa26 f303 	lsrgt.w	r3, r6, r3
 810b110:	bfd6      	itet	le
 810b112:	f1c3 0320 	rsble	r3, r3, #32
 810b116:	ea48 0003 	orrgt.w	r0, r8, r3
 810b11a:	fa06 f003 	lslle.w	r0, r6, r3
 810b11e:	f7f5 fa79 	bl	8100614 <__aeabi_ui2d>
 810b122:	2201      	movs	r2, #1
 810b124:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 810b128:	3d01      	subs	r5, #1
 810b12a:	920e      	str	r2, [sp, #56]	; 0x38
 810b12c:	e76f      	b.n	810b00e <_dtoa_r+0x126>
 810b12e:	2301      	movs	r3, #1
 810b130:	e7b3      	b.n	810b09a <_dtoa_r+0x1b2>
 810b132:	900c      	str	r0, [sp, #48]	; 0x30
 810b134:	e7b2      	b.n	810b09c <_dtoa_r+0x1b4>
 810b136:	9b05      	ldr	r3, [sp, #20]
 810b138:	eba3 030b 	sub.w	r3, r3, fp
 810b13c:	9305      	str	r3, [sp, #20]
 810b13e:	f1cb 0300 	rsb	r3, fp, #0
 810b142:	9308      	str	r3, [sp, #32]
 810b144:	2300      	movs	r3, #0
 810b146:	930b      	str	r3, [sp, #44]	; 0x2c
 810b148:	e7bf      	b.n	810b0ca <_dtoa_r+0x1e2>
 810b14a:	2300      	movs	r3, #0
 810b14c:	9309      	str	r3, [sp, #36]	; 0x24
 810b14e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b150:	2b00      	cmp	r3, #0
 810b152:	dc52      	bgt.n	810b1fa <_dtoa_r+0x312>
 810b154:	2301      	movs	r3, #1
 810b156:	9301      	str	r3, [sp, #4]
 810b158:	9304      	str	r3, [sp, #16]
 810b15a:	461a      	mov	r2, r3
 810b15c:	920a      	str	r2, [sp, #40]	; 0x28
 810b15e:	e00b      	b.n	810b178 <_dtoa_r+0x290>
 810b160:	2301      	movs	r3, #1
 810b162:	e7f3      	b.n	810b14c <_dtoa_r+0x264>
 810b164:	2300      	movs	r3, #0
 810b166:	9309      	str	r3, [sp, #36]	; 0x24
 810b168:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b16a:	445b      	add	r3, fp
 810b16c:	9301      	str	r3, [sp, #4]
 810b16e:	3301      	adds	r3, #1
 810b170:	2b01      	cmp	r3, #1
 810b172:	9304      	str	r3, [sp, #16]
 810b174:	bfb8      	it	lt
 810b176:	2301      	movlt	r3, #1
 810b178:	69e0      	ldr	r0, [r4, #28]
 810b17a:	2100      	movs	r1, #0
 810b17c:	2204      	movs	r2, #4
 810b17e:	f102 0614 	add.w	r6, r2, #20
 810b182:	429e      	cmp	r6, r3
 810b184:	d93d      	bls.n	810b202 <_dtoa_r+0x31a>
 810b186:	6041      	str	r1, [r0, #4]
 810b188:	4620      	mov	r0, r4
 810b18a:	f001 fac3 	bl	810c714 <_Balloc>
 810b18e:	9000      	str	r0, [sp, #0]
 810b190:	2800      	cmp	r0, #0
 810b192:	d139      	bne.n	810b208 <_dtoa_r+0x320>
 810b194:	4b16      	ldr	r3, [pc, #88]	; (810b1f0 <_dtoa_r+0x308>)
 810b196:	4602      	mov	r2, r0
 810b198:	f240 11af 	movw	r1, #431	; 0x1af
 810b19c:	e6bd      	b.n	810af1a <_dtoa_r+0x32>
 810b19e:	2301      	movs	r3, #1
 810b1a0:	e7e1      	b.n	810b166 <_dtoa_r+0x27e>
 810b1a2:	2501      	movs	r5, #1
 810b1a4:	2300      	movs	r3, #0
 810b1a6:	9307      	str	r3, [sp, #28]
 810b1a8:	9509      	str	r5, [sp, #36]	; 0x24
 810b1aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 810b1ae:	9301      	str	r3, [sp, #4]
 810b1b0:	9304      	str	r3, [sp, #16]
 810b1b2:	2200      	movs	r2, #0
 810b1b4:	2312      	movs	r3, #18
 810b1b6:	e7d1      	b.n	810b15c <_dtoa_r+0x274>
 810b1b8:	636f4361 	.word	0x636f4361
 810b1bc:	3fd287a7 	.word	0x3fd287a7
 810b1c0:	8b60c8b3 	.word	0x8b60c8b3
 810b1c4:	3fc68a28 	.word	0x3fc68a28
 810b1c8:	509f79fb 	.word	0x509f79fb
 810b1cc:	3fd34413 	.word	0x3fd34413
 810b1d0:	0810e7f9 	.word	0x0810e7f9
 810b1d4:	0810ea12 	.word	0x0810ea12
 810b1d8:	7ff00000 	.word	0x7ff00000
 810b1dc:	0810ea0e 	.word	0x0810ea0e
 810b1e0:	0810ea05 	.word	0x0810ea05
 810b1e4:	0810e7d1 	.word	0x0810e7d1
 810b1e8:	3ff80000 	.word	0x3ff80000
 810b1ec:	0810eb70 	.word	0x0810eb70
 810b1f0:	0810ea6a 	.word	0x0810ea6a
 810b1f4:	2301      	movs	r3, #1
 810b1f6:	9309      	str	r3, [sp, #36]	; 0x24
 810b1f8:	e7d7      	b.n	810b1aa <_dtoa_r+0x2c2>
 810b1fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b1fc:	9301      	str	r3, [sp, #4]
 810b1fe:	9304      	str	r3, [sp, #16]
 810b200:	e7ba      	b.n	810b178 <_dtoa_r+0x290>
 810b202:	3101      	adds	r1, #1
 810b204:	0052      	lsls	r2, r2, #1
 810b206:	e7ba      	b.n	810b17e <_dtoa_r+0x296>
 810b208:	69e3      	ldr	r3, [r4, #28]
 810b20a:	9a00      	ldr	r2, [sp, #0]
 810b20c:	601a      	str	r2, [r3, #0]
 810b20e:	9b04      	ldr	r3, [sp, #16]
 810b210:	2b0e      	cmp	r3, #14
 810b212:	f200 80a8 	bhi.w	810b366 <_dtoa_r+0x47e>
 810b216:	2d00      	cmp	r5, #0
 810b218:	f000 80a5 	beq.w	810b366 <_dtoa_r+0x47e>
 810b21c:	f1bb 0f00 	cmp.w	fp, #0
 810b220:	dd38      	ble.n	810b294 <_dtoa_r+0x3ac>
 810b222:	4bc0      	ldr	r3, [pc, #768]	; (810b524 <_dtoa_r+0x63c>)
 810b224:	f00b 020f 	and.w	r2, fp, #15
 810b228:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810b22c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 810b230:	e9d3 6700 	ldrd	r6, r7, [r3]
 810b234:	ea4f 182b 	mov.w	r8, fp, asr #4
 810b238:	d019      	beq.n	810b26e <_dtoa_r+0x386>
 810b23a:	4bbb      	ldr	r3, [pc, #748]	; (810b528 <_dtoa_r+0x640>)
 810b23c:	ec51 0b18 	vmov	r0, r1, d8
 810b240:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 810b244:	f7f5 fb8a 	bl	810095c <__aeabi_ddiv>
 810b248:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810b24c:	f008 080f 	and.w	r8, r8, #15
 810b250:	2503      	movs	r5, #3
 810b252:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 810b528 <_dtoa_r+0x640>
 810b256:	f1b8 0f00 	cmp.w	r8, #0
 810b25a:	d10a      	bne.n	810b272 <_dtoa_r+0x38a>
 810b25c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810b260:	4632      	mov	r2, r6
 810b262:	463b      	mov	r3, r7
 810b264:	f7f5 fb7a 	bl	810095c <__aeabi_ddiv>
 810b268:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810b26c:	e02b      	b.n	810b2c6 <_dtoa_r+0x3de>
 810b26e:	2502      	movs	r5, #2
 810b270:	e7ef      	b.n	810b252 <_dtoa_r+0x36a>
 810b272:	f018 0f01 	tst.w	r8, #1
 810b276:	d008      	beq.n	810b28a <_dtoa_r+0x3a2>
 810b278:	4630      	mov	r0, r6
 810b27a:	4639      	mov	r1, r7
 810b27c:	e9d9 2300 	ldrd	r2, r3, [r9]
 810b280:	f7f5 fa42 	bl	8100708 <__aeabi_dmul>
 810b284:	3501      	adds	r5, #1
 810b286:	4606      	mov	r6, r0
 810b288:	460f      	mov	r7, r1
 810b28a:	ea4f 0868 	mov.w	r8, r8, asr #1
 810b28e:	f109 0908 	add.w	r9, r9, #8
 810b292:	e7e0      	b.n	810b256 <_dtoa_r+0x36e>
 810b294:	f000 809f 	beq.w	810b3d6 <_dtoa_r+0x4ee>
 810b298:	f1cb 0600 	rsb	r6, fp, #0
 810b29c:	4ba1      	ldr	r3, [pc, #644]	; (810b524 <_dtoa_r+0x63c>)
 810b29e:	4fa2      	ldr	r7, [pc, #648]	; (810b528 <_dtoa_r+0x640>)
 810b2a0:	f006 020f 	and.w	r2, r6, #15
 810b2a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810b2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b2ac:	ec51 0b18 	vmov	r0, r1, d8
 810b2b0:	f7f5 fa2a 	bl	8100708 <__aeabi_dmul>
 810b2b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810b2b8:	1136      	asrs	r6, r6, #4
 810b2ba:	2300      	movs	r3, #0
 810b2bc:	2502      	movs	r5, #2
 810b2be:	2e00      	cmp	r6, #0
 810b2c0:	d17e      	bne.n	810b3c0 <_dtoa_r+0x4d8>
 810b2c2:	2b00      	cmp	r3, #0
 810b2c4:	d1d0      	bne.n	810b268 <_dtoa_r+0x380>
 810b2c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810b2c8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 810b2cc:	2b00      	cmp	r3, #0
 810b2ce:	f000 8084 	beq.w	810b3da <_dtoa_r+0x4f2>
 810b2d2:	4b96      	ldr	r3, [pc, #600]	; (810b52c <_dtoa_r+0x644>)
 810b2d4:	2200      	movs	r2, #0
 810b2d6:	4640      	mov	r0, r8
 810b2d8:	4649      	mov	r1, r9
 810b2da:	f7f5 fc87 	bl	8100bec <__aeabi_dcmplt>
 810b2de:	2800      	cmp	r0, #0
 810b2e0:	d07b      	beq.n	810b3da <_dtoa_r+0x4f2>
 810b2e2:	9b04      	ldr	r3, [sp, #16]
 810b2e4:	2b00      	cmp	r3, #0
 810b2e6:	d078      	beq.n	810b3da <_dtoa_r+0x4f2>
 810b2e8:	9b01      	ldr	r3, [sp, #4]
 810b2ea:	2b00      	cmp	r3, #0
 810b2ec:	dd39      	ble.n	810b362 <_dtoa_r+0x47a>
 810b2ee:	4b90      	ldr	r3, [pc, #576]	; (810b530 <_dtoa_r+0x648>)
 810b2f0:	2200      	movs	r2, #0
 810b2f2:	4640      	mov	r0, r8
 810b2f4:	4649      	mov	r1, r9
 810b2f6:	f7f5 fa07 	bl	8100708 <__aeabi_dmul>
 810b2fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810b2fe:	9e01      	ldr	r6, [sp, #4]
 810b300:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 810b304:	3501      	adds	r5, #1
 810b306:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 810b30a:	4628      	mov	r0, r5
 810b30c:	f7f5 f992 	bl	8100634 <__aeabi_i2d>
 810b310:	4642      	mov	r2, r8
 810b312:	464b      	mov	r3, r9
 810b314:	f7f5 f9f8 	bl	8100708 <__aeabi_dmul>
 810b318:	4b86      	ldr	r3, [pc, #536]	; (810b534 <_dtoa_r+0x64c>)
 810b31a:	2200      	movs	r2, #0
 810b31c:	f7f5 f83e 	bl	810039c <__adddf3>
 810b320:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 810b324:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810b328:	9303      	str	r3, [sp, #12]
 810b32a:	2e00      	cmp	r6, #0
 810b32c:	d158      	bne.n	810b3e0 <_dtoa_r+0x4f8>
 810b32e:	4b82      	ldr	r3, [pc, #520]	; (810b538 <_dtoa_r+0x650>)
 810b330:	2200      	movs	r2, #0
 810b332:	4640      	mov	r0, r8
 810b334:	4649      	mov	r1, r9
 810b336:	f7f5 f82f 	bl	8100398 <__aeabi_dsub>
 810b33a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810b33e:	4680      	mov	r8, r0
 810b340:	4689      	mov	r9, r1
 810b342:	f7f5 fc71 	bl	8100c28 <__aeabi_dcmpgt>
 810b346:	2800      	cmp	r0, #0
 810b348:	f040 8296 	bne.w	810b878 <_dtoa_r+0x990>
 810b34c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 810b350:	4640      	mov	r0, r8
 810b352:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810b356:	4649      	mov	r1, r9
 810b358:	f7f5 fc48 	bl	8100bec <__aeabi_dcmplt>
 810b35c:	2800      	cmp	r0, #0
 810b35e:	f040 8289 	bne.w	810b874 <_dtoa_r+0x98c>
 810b362:	ed8d 8b02 	vstr	d8, [sp, #8]
 810b366:	9b11      	ldr	r3, [sp, #68]	; 0x44
 810b368:	2b00      	cmp	r3, #0
 810b36a:	f2c0 814e 	blt.w	810b60a <_dtoa_r+0x722>
 810b36e:	f1bb 0f0e 	cmp.w	fp, #14
 810b372:	f300 814a 	bgt.w	810b60a <_dtoa_r+0x722>
 810b376:	4b6b      	ldr	r3, [pc, #428]	; (810b524 <_dtoa_r+0x63c>)
 810b378:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 810b37c:	e9d3 8900 	ldrd	r8, r9, [r3]
 810b380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b382:	2b00      	cmp	r3, #0
 810b384:	f280 80dc 	bge.w	810b540 <_dtoa_r+0x658>
 810b388:	9b04      	ldr	r3, [sp, #16]
 810b38a:	2b00      	cmp	r3, #0
 810b38c:	f300 80d8 	bgt.w	810b540 <_dtoa_r+0x658>
 810b390:	f040 826f 	bne.w	810b872 <_dtoa_r+0x98a>
 810b394:	4b68      	ldr	r3, [pc, #416]	; (810b538 <_dtoa_r+0x650>)
 810b396:	2200      	movs	r2, #0
 810b398:	4640      	mov	r0, r8
 810b39a:	4649      	mov	r1, r9
 810b39c:	f7f5 f9b4 	bl	8100708 <__aeabi_dmul>
 810b3a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810b3a4:	f7f5 fc36 	bl	8100c14 <__aeabi_dcmpge>
 810b3a8:	9e04      	ldr	r6, [sp, #16]
 810b3aa:	4637      	mov	r7, r6
 810b3ac:	2800      	cmp	r0, #0
 810b3ae:	f040 8245 	bne.w	810b83c <_dtoa_r+0x954>
 810b3b2:	9d00      	ldr	r5, [sp, #0]
 810b3b4:	2331      	movs	r3, #49	; 0x31
 810b3b6:	f805 3b01 	strb.w	r3, [r5], #1
 810b3ba:	f10b 0b01 	add.w	fp, fp, #1
 810b3be:	e241      	b.n	810b844 <_dtoa_r+0x95c>
 810b3c0:	07f2      	lsls	r2, r6, #31
 810b3c2:	d505      	bpl.n	810b3d0 <_dtoa_r+0x4e8>
 810b3c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 810b3c8:	f7f5 f99e 	bl	8100708 <__aeabi_dmul>
 810b3cc:	3501      	adds	r5, #1
 810b3ce:	2301      	movs	r3, #1
 810b3d0:	1076      	asrs	r6, r6, #1
 810b3d2:	3708      	adds	r7, #8
 810b3d4:	e773      	b.n	810b2be <_dtoa_r+0x3d6>
 810b3d6:	2502      	movs	r5, #2
 810b3d8:	e775      	b.n	810b2c6 <_dtoa_r+0x3de>
 810b3da:	9e04      	ldr	r6, [sp, #16]
 810b3dc:	465f      	mov	r7, fp
 810b3de:	e792      	b.n	810b306 <_dtoa_r+0x41e>
 810b3e0:	9900      	ldr	r1, [sp, #0]
 810b3e2:	4b50      	ldr	r3, [pc, #320]	; (810b524 <_dtoa_r+0x63c>)
 810b3e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 810b3e8:	4431      	add	r1, r6
 810b3ea:	9102      	str	r1, [sp, #8]
 810b3ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 810b3ee:	eeb0 9a47 	vmov.f32	s18, s14
 810b3f2:	eef0 9a67 	vmov.f32	s19, s15
 810b3f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 810b3fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 810b3fe:	2900      	cmp	r1, #0
 810b400:	d044      	beq.n	810b48c <_dtoa_r+0x5a4>
 810b402:	494e      	ldr	r1, [pc, #312]	; (810b53c <_dtoa_r+0x654>)
 810b404:	2000      	movs	r0, #0
 810b406:	f7f5 faa9 	bl	810095c <__aeabi_ddiv>
 810b40a:	ec53 2b19 	vmov	r2, r3, d9
 810b40e:	f7f4 ffc3 	bl	8100398 <__aeabi_dsub>
 810b412:	9d00      	ldr	r5, [sp, #0]
 810b414:	ec41 0b19 	vmov	d9, r0, r1
 810b418:	4649      	mov	r1, r9
 810b41a:	4640      	mov	r0, r8
 810b41c:	f7f5 fc24 	bl	8100c68 <__aeabi_d2iz>
 810b420:	4606      	mov	r6, r0
 810b422:	f7f5 f907 	bl	8100634 <__aeabi_i2d>
 810b426:	4602      	mov	r2, r0
 810b428:	460b      	mov	r3, r1
 810b42a:	4640      	mov	r0, r8
 810b42c:	4649      	mov	r1, r9
 810b42e:	f7f4 ffb3 	bl	8100398 <__aeabi_dsub>
 810b432:	3630      	adds	r6, #48	; 0x30
 810b434:	f805 6b01 	strb.w	r6, [r5], #1
 810b438:	ec53 2b19 	vmov	r2, r3, d9
 810b43c:	4680      	mov	r8, r0
 810b43e:	4689      	mov	r9, r1
 810b440:	f7f5 fbd4 	bl	8100bec <__aeabi_dcmplt>
 810b444:	2800      	cmp	r0, #0
 810b446:	d164      	bne.n	810b512 <_dtoa_r+0x62a>
 810b448:	4642      	mov	r2, r8
 810b44a:	464b      	mov	r3, r9
 810b44c:	4937      	ldr	r1, [pc, #220]	; (810b52c <_dtoa_r+0x644>)
 810b44e:	2000      	movs	r0, #0
 810b450:	f7f4 ffa2 	bl	8100398 <__aeabi_dsub>
 810b454:	ec53 2b19 	vmov	r2, r3, d9
 810b458:	f7f5 fbc8 	bl	8100bec <__aeabi_dcmplt>
 810b45c:	2800      	cmp	r0, #0
 810b45e:	f040 80b6 	bne.w	810b5ce <_dtoa_r+0x6e6>
 810b462:	9b02      	ldr	r3, [sp, #8]
 810b464:	429d      	cmp	r5, r3
 810b466:	f43f af7c 	beq.w	810b362 <_dtoa_r+0x47a>
 810b46a:	4b31      	ldr	r3, [pc, #196]	; (810b530 <_dtoa_r+0x648>)
 810b46c:	ec51 0b19 	vmov	r0, r1, d9
 810b470:	2200      	movs	r2, #0
 810b472:	f7f5 f949 	bl	8100708 <__aeabi_dmul>
 810b476:	4b2e      	ldr	r3, [pc, #184]	; (810b530 <_dtoa_r+0x648>)
 810b478:	ec41 0b19 	vmov	d9, r0, r1
 810b47c:	2200      	movs	r2, #0
 810b47e:	4640      	mov	r0, r8
 810b480:	4649      	mov	r1, r9
 810b482:	f7f5 f941 	bl	8100708 <__aeabi_dmul>
 810b486:	4680      	mov	r8, r0
 810b488:	4689      	mov	r9, r1
 810b48a:	e7c5      	b.n	810b418 <_dtoa_r+0x530>
 810b48c:	ec51 0b17 	vmov	r0, r1, d7
 810b490:	f7f5 f93a 	bl	8100708 <__aeabi_dmul>
 810b494:	9b02      	ldr	r3, [sp, #8]
 810b496:	9d00      	ldr	r5, [sp, #0]
 810b498:	930f      	str	r3, [sp, #60]	; 0x3c
 810b49a:	ec41 0b19 	vmov	d9, r0, r1
 810b49e:	4649      	mov	r1, r9
 810b4a0:	4640      	mov	r0, r8
 810b4a2:	f7f5 fbe1 	bl	8100c68 <__aeabi_d2iz>
 810b4a6:	4606      	mov	r6, r0
 810b4a8:	f7f5 f8c4 	bl	8100634 <__aeabi_i2d>
 810b4ac:	3630      	adds	r6, #48	; 0x30
 810b4ae:	4602      	mov	r2, r0
 810b4b0:	460b      	mov	r3, r1
 810b4b2:	4640      	mov	r0, r8
 810b4b4:	4649      	mov	r1, r9
 810b4b6:	f7f4 ff6f 	bl	8100398 <__aeabi_dsub>
 810b4ba:	f805 6b01 	strb.w	r6, [r5], #1
 810b4be:	9b02      	ldr	r3, [sp, #8]
 810b4c0:	429d      	cmp	r5, r3
 810b4c2:	4680      	mov	r8, r0
 810b4c4:	4689      	mov	r9, r1
 810b4c6:	f04f 0200 	mov.w	r2, #0
 810b4ca:	d124      	bne.n	810b516 <_dtoa_r+0x62e>
 810b4cc:	4b1b      	ldr	r3, [pc, #108]	; (810b53c <_dtoa_r+0x654>)
 810b4ce:	ec51 0b19 	vmov	r0, r1, d9
 810b4d2:	f7f4 ff63 	bl	810039c <__adddf3>
 810b4d6:	4602      	mov	r2, r0
 810b4d8:	460b      	mov	r3, r1
 810b4da:	4640      	mov	r0, r8
 810b4dc:	4649      	mov	r1, r9
 810b4de:	f7f5 fba3 	bl	8100c28 <__aeabi_dcmpgt>
 810b4e2:	2800      	cmp	r0, #0
 810b4e4:	d173      	bne.n	810b5ce <_dtoa_r+0x6e6>
 810b4e6:	ec53 2b19 	vmov	r2, r3, d9
 810b4ea:	4914      	ldr	r1, [pc, #80]	; (810b53c <_dtoa_r+0x654>)
 810b4ec:	2000      	movs	r0, #0
 810b4ee:	f7f4 ff53 	bl	8100398 <__aeabi_dsub>
 810b4f2:	4602      	mov	r2, r0
 810b4f4:	460b      	mov	r3, r1
 810b4f6:	4640      	mov	r0, r8
 810b4f8:	4649      	mov	r1, r9
 810b4fa:	f7f5 fb77 	bl	8100bec <__aeabi_dcmplt>
 810b4fe:	2800      	cmp	r0, #0
 810b500:	f43f af2f 	beq.w	810b362 <_dtoa_r+0x47a>
 810b504:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 810b506:	1e6b      	subs	r3, r5, #1
 810b508:	930f      	str	r3, [sp, #60]	; 0x3c
 810b50a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 810b50e:	2b30      	cmp	r3, #48	; 0x30
 810b510:	d0f8      	beq.n	810b504 <_dtoa_r+0x61c>
 810b512:	46bb      	mov	fp, r7
 810b514:	e04a      	b.n	810b5ac <_dtoa_r+0x6c4>
 810b516:	4b06      	ldr	r3, [pc, #24]	; (810b530 <_dtoa_r+0x648>)
 810b518:	f7f5 f8f6 	bl	8100708 <__aeabi_dmul>
 810b51c:	4680      	mov	r8, r0
 810b51e:	4689      	mov	r9, r1
 810b520:	e7bd      	b.n	810b49e <_dtoa_r+0x5b6>
 810b522:	bf00      	nop
 810b524:	0810eb70 	.word	0x0810eb70
 810b528:	0810eb48 	.word	0x0810eb48
 810b52c:	3ff00000 	.word	0x3ff00000
 810b530:	40240000 	.word	0x40240000
 810b534:	401c0000 	.word	0x401c0000
 810b538:	40140000 	.word	0x40140000
 810b53c:	3fe00000 	.word	0x3fe00000
 810b540:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 810b544:	9d00      	ldr	r5, [sp, #0]
 810b546:	4642      	mov	r2, r8
 810b548:	464b      	mov	r3, r9
 810b54a:	4630      	mov	r0, r6
 810b54c:	4639      	mov	r1, r7
 810b54e:	f7f5 fa05 	bl	810095c <__aeabi_ddiv>
 810b552:	f7f5 fb89 	bl	8100c68 <__aeabi_d2iz>
 810b556:	9001      	str	r0, [sp, #4]
 810b558:	f7f5 f86c 	bl	8100634 <__aeabi_i2d>
 810b55c:	4642      	mov	r2, r8
 810b55e:	464b      	mov	r3, r9
 810b560:	f7f5 f8d2 	bl	8100708 <__aeabi_dmul>
 810b564:	4602      	mov	r2, r0
 810b566:	460b      	mov	r3, r1
 810b568:	4630      	mov	r0, r6
 810b56a:	4639      	mov	r1, r7
 810b56c:	f7f4 ff14 	bl	8100398 <__aeabi_dsub>
 810b570:	9e01      	ldr	r6, [sp, #4]
 810b572:	9f04      	ldr	r7, [sp, #16]
 810b574:	3630      	adds	r6, #48	; 0x30
 810b576:	f805 6b01 	strb.w	r6, [r5], #1
 810b57a:	9e00      	ldr	r6, [sp, #0]
 810b57c:	1bae      	subs	r6, r5, r6
 810b57e:	42b7      	cmp	r7, r6
 810b580:	4602      	mov	r2, r0
 810b582:	460b      	mov	r3, r1
 810b584:	d134      	bne.n	810b5f0 <_dtoa_r+0x708>
 810b586:	f7f4 ff09 	bl	810039c <__adddf3>
 810b58a:	4642      	mov	r2, r8
 810b58c:	464b      	mov	r3, r9
 810b58e:	4606      	mov	r6, r0
 810b590:	460f      	mov	r7, r1
 810b592:	f7f5 fb49 	bl	8100c28 <__aeabi_dcmpgt>
 810b596:	b9c8      	cbnz	r0, 810b5cc <_dtoa_r+0x6e4>
 810b598:	4642      	mov	r2, r8
 810b59a:	464b      	mov	r3, r9
 810b59c:	4630      	mov	r0, r6
 810b59e:	4639      	mov	r1, r7
 810b5a0:	f7f5 fb1a 	bl	8100bd8 <__aeabi_dcmpeq>
 810b5a4:	b110      	cbz	r0, 810b5ac <_dtoa_r+0x6c4>
 810b5a6:	9b01      	ldr	r3, [sp, #4]
 810b5a8:	07db      	lsls	r3, r3, #31
 810b5aa:	d40f      	bmi.n	810b5cc <_dtoa_r+0x6e4>
 810b5ac:	4651      	mov	r1, sl
 810b5ae:	4620      	mov	r0, r4
 810b5b0:	f001 f8f0 	bl	810c794 <_Bfree>
 810b5b4:	2300      	movs	r3, #0
 810b5b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810b5b8:	702b      	strb	r3, [r5, #0]
 810b5ba:	f10b 0301 	add.w	r3, fp, #1
 810b5be:	6013      	str	r3, [r2, #0]
 810b5c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810b5c2:	2b00      	cmp	r3, #0
 810b5c4:	f43f ace2 	beq.w	810af8c <_dtoa_r+0xa4>
 810b5c8:	601d      	str	r5, [r3, #0]
 810b5ca:	e4df      	b.n	810af8c <_dtoa_r+0xa4>
 810b5cc:	465f      	mov	r7, fp
 810b5ce:	462b      	mov	r3, r5
 810b5d0:	461d      	mov	r5, r3
 810b5d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810b5d6:	2a39      	cmp	r2, #57	; 0x39
 810b5d8:	d106      	bne.n	810b5e8 <_dtoa_r+0x700>
 810b5da:	9a00      	ldr	r2, [sp, #0]
 810b5dc:	429a      	cmp	r2, r3
 810b5de:	d1f7      	bne.n	810b5d0 <_dtoa_r+0x6e8>
 810b5e0:	9900      	ldr	r1, [sp, #0]
 810b5e2:	2230      	movs	r2, #48	; 0x30
 810b5e4:	3701      	adds	r7, #1
 810b5e6:	700a      	strb	r2, [r1, #0]
 810b5e8:	781a      	ldrb	r2, [r3, #0]
 810b5ea:	3201      	adds	r2, #1
 810b5ec:	701a      	strb	r2, [r3, #0]
 810b5ee:	e790      	b.n	810b512 <_dtoa_r+0x62a>
 810b5f0:	4ba3      	ldr	r3, [pc, #652]	; (810b880 <_dtoa_r+0x998>)
 810b5f2:	2200      	movs	r2, #0
 810b5f4:	f7f5 f888 	bl	8100708 <__aeabi_dmul>
 810b5f8:	2200      	movs	r2, #0
 810b5fa:	2300      	movs	r3, #0
 810b5fc:	4606      	mov	r6, r0
 810b5fe:	460f      	mov	r7, r1
 810b600:	f7f5 faea 	bl	8100bd8 <__aeabi_dcmpeq>
 810b604:	2800      	cmp	r0, #0
 810b606:	d09e      	beq.n	810b546 <_dtoa_r+0x65e>
 810b608:	e7d0      	b.n	810b5ac <_dtoa_r+0x6c4>
 810b60a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810b60c:	2a00      	cmp	r2, #0
 810b60e:	f000 80ca 	beq.w	810b7a6 <_dtoa_r+0x8be>
 810b612:	9a07      	ldr	r2, [sp, #28]
 810b614:	2a01      	cmp	r2, #1
 810b616:	f300 80ad 	bgt.w	810b774 <_dtoa_r+0x88c>
 810b61a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810b61c:	2a00      	cmp	r2, #0
 810b61e:	f000 80a5 	beq.w	810b76c <_dtoa_r+0x884>
 810b622:	f203 4333 	addw	r3, r3, #1075	; 0x433
 810b626:	9e08      	ldr	r6, [sp, #32]
 810b628:	9d05      	ldr	r5, [sp, #20]
 810b62a:	9a05      	ldr	r2, [sp, #20]
 810b62c:	441a      	add	r2, r3
 810b62e:	9205      	str	r2, [sp, #20]
 810b630:	9a06      	ldr	r2, [sp, #24]
 810b632:	2101      	movs	r1, #1
 810b634:	441a      	add	r2, r3
 810b636:	4620      	mov	r0, r4
 810b638:	9206      	str	r2, [sp, #24]
 810b63a:	f001 f9ab 	bl	810c994 <__i2b>
 810b63e:	4607      	mov	r7, r0
 810b640:	b165      	cbz	r5, 810b65c <_dtoa_r+0x774>
 810b642:	9b06      	ldr	r3, [sp, #24]
 810b644:	2b00      	cmp	r3, #0
 810b646:	dd09      	ble.n	810b65c <_dtoa_r+0x774>
 810b648:	42ab      	cmp	r3, r5
 810b64a:	9a05      	ldr	r2, [sp, #20]
 810b64c:	bfa8      	it	ge
 810b64e:	462b      	movge	r3, r5
 810b650:	1ad2      	subs	r2, r2, r3
 810b652:	9205      	str	r2, [sp, #20]
 810b654:	9a06      	ldr	r2, [sp, #24]
 810b656:	1aed      	subs	r5, r5, r3
 810b658:	1ad3      	subs	r3, r2, r3
 810b65a:	9306      	str	r3, [sp, #24]
 810b65c:	9b08      	ldr	r3, [sp, #32]
 810b65e:	b1f3      	cbz	r3, 810b69e <_dtoa_r+0x7b6>
 810b660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810b662:	2b00      	cmp	r3, #0
 810b664:	f000 80a3 	beq.w	810b7ae <_dtoa_r+0x8c6>
 810b668:	2e00      	cmp	r6, #0
 810b66a:	dd10      	ble.n	810b68e <_dtoa_r+0x7a6>
 810b66c:	4639      	mov	r1, r7
 810b66e:	4632      	mov	r2, r6
 810b670:	4620      	mov	r0, r4
 810b672:	f001 fa4f 	bl	810cb14 <__pow5mult>
 810b676:	4652      	mov	r2, sl
 810b678:	4601      	mov	r1, r0
 810b67a:	4607      	mov	r7, r0
 810b67c:	4620      	mov	r0, r4
 810b67e:	f001 f99f 	bl	810c9c0 <__multiply>
 810b682:	4651      	mov	r1, sl
 810b684:	4680      	mov	r8, r0
 810b686:	4620      	mov	r0, r4
 810b688:	f001 f884 	bl	810c794 <_Bfree>
 810b68c:	46c2      	mov	sl, r8
 810b68e:	9b08      	ldr	r3, [sp, #32]
 810b690:	1b9a      	subs	r2, r3, r6
 810b692:	d004      	beq.n	810b69e <_dtoa_r+0x7b6>
 810b694:	4651      	mov	r1, sl
 810b696:	4620      	mov	r0, r4
 810b698:	f001 fa3c 	bl	810cb14 <__pow5mult>
 810b69c:	4682      	mov	sl, r0
 810b69e:	2101      	movs	r1, #1
 810b6a0:	4620      	mov	r0, r4
 810b6a2:	f001 f977 	bl	810c994 <__i2b>
 810b6a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810b6a8:	2b00      	cmp	r3, #0
 810b6aa:	4606      	mov	r6, r0
 810b6ac:	f340 8081 	ble.w	810b7b2 <_dtoa_r+0x8ca>
 810b6b0:	461a      	mov	r2, r3
 810b6b2:	4601      	mov	r1, r0
 810b6b4:	4620      	mov	r0, r4
 810b6b6:	f001 fa2d 	bl	810cb14 <__pow5mult>
 810b6ba:	9b07      	ldr	r3, [sp, #28]
 810b6bc:	2b01      	cmp	r3, #1
 810b6be:	4606      	mov	r6, r0
 810b6c0:	dd7a      	ble.n	810b7b8 <_dtoa_r+0x8d0>
 810b6c2:	f04f 0800 	mov.w	r8, #0
 810b6c6:	6933      	ldr	r3, [r6, #16]
 810b6c8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 810b6cc:	6918      	ldr	r0, [r3, #16]
 810b6ce:	f001 f913 	bl	810c8f8 <__hi0bits>
 810b6d2:	f1c0 0020 	rsb	r0, r0, #32
 810b6d6:	9b06      	ldr	r3, [sp, #24]
 810b6d8:	4418      	add	r0, r3
 810b6da:	f010 001f 	ands.w	r0, r0, #31
 810b6de:	f000 8094 	beq.w	810b80a <_dtoa_r+0x922>
 810b6e2:	f1c0 0320 	rsb	r3, r0, #32
 810b6e6:	2b04      	cmp	r3, #4
 810b6e8:	f340 8085 	ble.w	810b7f6 <_dtoa_r+0x90e>
 810b6ec:	9b05      	ldr	r3, [sp, #20]
 810b6ee:	f1c0 001c 	rsb	r0, r0, #28
 810b6f2:	4403      	add	r3, r0
 810b6f4:	9305      	str	r3, [sp, #20]
 810b6f6:	9b06      	ldr	r3, [sp, #24]
 810b6f8:	4403      	add	r3, r0
 810b6fa:	4405      	add	r5, r0
 810b6fc:	9306      	str	r3, [sp, #24]
 810b6fe:	9b05      	ldr	r3, [sp, #20]
 810b700:	2b00      	cmp	r3, #0
 810b702:	dd05      	ble.n	810b710 <_dtoa_r+0x828>
 810b704:	4651      	mov	r1, sl
 810b706:	461a      	mov	r2, r3
 810b708:	4620      	mov	r0, r4
 810b70a:	f001 fa5d 	bl	810cbc8 <__lshift>
 810b70e:	4682      	mov	sl, r0
 810b710:	9b06      	ldr	r3, [sp, #24]
 810b712:	2b00      	cmp	r3, #0
 810b714:	dd05      	ble.n	810b722 <_dtoa_r+0x83a>
 810b716:	4631      	mov	r1, r6
 810b718:	461a      	mov	r2, r3
 810b71a:	4620      	mov	r0, r4
 810b71c:	f001 fa54 	bl	810cbc8 <__lshift>
 810b720:	4606      	mov	r6, r0
 810b722:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810b724:	2b00      	cmp	r3, #0
 810b726:	d072      	beq.n	810b80e <_dtoa_r+0x926>
 810b728:	4631      	mov	r1, r6
 810b72a:	4650      	mov	r0, sl
 810b72c:	f001 fab8 	bl	810cca0 <__mcmp>
 810b730:	2800      	cmp	r0, #0
 810b732:	da6c      	bge.n	810b80e <_dtoa_r+0x926>
 810b734:	2300      	movs	r3, #0
 810b736:	4651      	mov	r1, sl
 810b738:	220a      	movs	r2, #10
 810b73a:	4620      	mov	r0, r4
 810b73c:	f001 f84c 	bl	810c7d8 <__multadd>
 810b740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810b742:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 810b746:	4682      	mov	sl, r0
 810b748:	2b00      	cmp	r3, #0
 810b74a:	f000 81b0 	beq.w	810baae <_dtoa_r+0xbc6>
 810b74e:	2300      	movs	r3, #0
 810b750:	4639      	mov	r1, r7
 810b752:	220a      	movs	r2, #10
 810b754:	4620      	mov	r0, r4
 810b756:	f001 f83f 	bl	810c7d8 <__multadd>
 810b75a:	9b01      	ldr	r3, [sp, #4]
 810b75c:	2b00      	cmp	r3, #0
 810b75e:	4607      	mov	r7, r0
 810b760:	f300 8096 	bgt.w	810b890 <_dtoa_r+0x9a8>
 810b764:	9b07      	ldr	r3, [sp, #28]
 810b766:	2b02      	cmp	r3, #2
 810b768:	dc59      	bgt.n	810b81e <_dtoa_r+0x936>
 810b76a:	e091      	b.n	810b890 <_dtoa_r+0x9a8>
 810b76c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 810b76e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 810b772:	e758      	b.n	810b626 <_dtoa_r+0x73e>
 810b774:	9b04      	ldr	r3, [sp, #16]
 810b776:	1e5e      	subs	r6, r3, #1
 810b778:	9b08      	ldr	r3, [sp, #32]
 810b77a:	42b3      	cmp	r3, r6
 810b77c:	bfbf      	itttt	lt
 810b77e:	9b08      	ldrlt	r3, [sp, #32]
 810b780:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 810b782:	9608      	strlt	r6, [sp, #32]
 810b784:	1af3      	sublt	r3, r6, r3
 810b786:	bfb4      	ite	lt
 810b788:	18d2      	addlt	r2, r2, r3
 810b78a:	1b9e      	subge	r6, r3, r6
 810b78c:	9b04      	ldr	r3, [sp, #16]
 810b78e:	bfbc      	itt	lt
 810b790:	920b      	strlt	r2, [sp, #44]	; 0x2c
 810b792:	2600      	movlt	r6, #0
 810b794:	2b00      	cmp	r3, #0
 810b796:	bfb7      	itett	lt
 810b798:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 810b79c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 810b7a0:	1a9d      	sublt	r5, r3, r2
 810b7a2:	2300      	movlt	r3, #0
 810b7a4:	e741      	b.n	810b62a <_dtoa_r+0x742>
 810b7a6:	9e08      	ldr	r6, [sp, #32]
 810b7a8:	9d05      	ldr	r5, [sp, #20]
 810b7aa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 810b7ac:	e748      	b.n	810b640 <_dtoa_r+0x758>
 810b7ae:	9a08      	ldr	r2, [sp, #32]
 810b7b0:	e770      	b.n	810b694 <_dtoa_r+0x7ac>
 810b7b2:	9b07      	ldr	r3, [sp, #28]
 810b7b4:	2b01      	cmp	r3, #1
 810b7b6:	dc19      	bgt.n	810b7ec <_dtoa_r+0x904>
 810b7b8:	9b02      	ldr	r3, [sp, #8]
 810b7ba:	b9bb      	cbnz	r3, 810b7ec <_dtoa_r+0x904>
 810b7bc:	9b03      	ldr	r3, [sp, #12]
 810b7be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810b7c2:	b99b      	cbnz	r3, 810b7ec <_dtoa_r+0x904>
 810b7c4:	9b03      	ldr	r3, [sp, #12]
 810b7c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 810b7ca:	0d1b      	lsrs	r3, r3, #20
 810b7cc:	051b      	lsls	r3, r3, #20
 810b7ce:	b183      	cbz	r3, 810b7f2 <_dtoa_r+0x90a>
 810b7d0:	9b05      	ldr	r3, [sp, #20]
 810b7d2:	3301      	adds	r3, #1
 810b7d4:	9305      	str	r3, [sp, #20]
 810b7d6:	9b06      	ldr	r3, [sp, #24]
 810b7d8:	3301      	adds	r3, #1
 810b7da:	9306      	str	r3, [sp, #24]
 810b7dc:	f04f 0801 	mov.w	r8, #1
 810b7e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810b7e2:	2b00      	cmp	r3, #0
 810b7e4:	f47f af6f 	bne.w	810b6c6 <_dtoa_r+0x7de>
 810b7e8:	2001      	movs	r0, #1
 810b7ea:	e774      	b.n	810b6d6 <_dtoa_r+0x7ee>
 810b7ec:	f04f 0800 	mov.w	r8, #0
 810b7f0:	e7f6      	b.n	810b7e0 <_dtoa_r+0x8f8>
 810b7f2:	4698      	mov	r8, r3
 810b7f4:	e7f4      	b.n	810b7e0 <_dtoa_r+0x8f8>
 810b7f6:	d082      	beq.n	810b6fe <_dtoa_r+0x816>
 810b7f8:	9a05      	ldr	r2, [sp, #20]
 810b7fa:	331c      	adds	r3, #28
 810b7fc:	441a      	add	r2, r3
 810b7fe:	9205      	str	r2, [sp, #20]
 810b800:	9a06      	ldr	r2, [sp, #24]
 810b802:	441a      	add	r2, r3
 810b804:	441d      	add	r5, r3
 810b806:	9206      	str	r2, [sp, #24]
 810b808:	e779      	b.n	810b6fe <_dtoa_r+0x816>
 810b80a:	4603      	mov	r3, r0
 810b80c:	e7f4      	b.n	810b7f8 <_dtoa_r+0x910>
 810b80e:	9b04      	ldr	r3, [sp, #16]
 810b810:	2b00      	cmp	r3, #0
 810b812:	dc37      	bgt.n	810b884 <_dtoa_r+0x99c>
 810b814:	9b07      	ldr	r3, [sp, #28]
 810b816:	2b02      	cmp	r3, #2
 810b818:	dd34      	ble.n	810b884 <_dtoa_r+0x99c>
 810b81a:	9b04      	ldr	r3, [sp, #16]
 810b81c:	9301      	str	r3, [sp, #4]
 810b81e:	9b01      	ldr	r3, [sp, #4]
 810b820:	b963      	cbnz	r3, 810b83c <_dtoa_r+0x954>
 810b822:	4631      	mov	r1, r6
 810b824:	2205      	movs	r2, #5
 810b826:	4620      	mov	r0, r4
 810b828:	f000 ffd6 	bl	810c7d8 <__multadd>
 810b82c:	4601      	mov	r1, r0
 810b82e:	4606      	mov	r6, r0
 810b830:	4650      	mov	r0, sl
 810b832:	f001 fa35 	bl	810cca0 <__mcmp>
 810b836:	2800      	cmp	r0, #0
 810b838:	f73f adbb 	bgt.w	810b3b2 <_dtoa_r+0x4ca>
 810b83c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b83e:	9d00      	ldr	r5, [sp, #0]
 810b840:	ea6f 0b03 	mvn.w	fp, r3
 810b844:	f04f 0800 	mov.w	r8, #0
 810b848:	4631      	mov	r1, r6
 810b84a:	4620      	mov	r0, r4
 810b84c:	f000 ffa2 	bl	810c794 <_Bfree>
 810b850:	2f00      	cmp	r7, #0
 810b852:	f43f aeab 	beq.w	810b5ac <_dtoa_r+0x6c4>
 810b856:	f1b8 0f00 	cmp.w	r8, #0
 810b85a:	d005      	beq.n	810b868 <_dtoa_r+0x980>
 810b85c:	45b8      	cmp	r8, r7
 810b85e:	d003      	beq.n	810b868 <_dtoa_r+0x980>
 810b860:	4641      	mov	r1, r8
 810b862:	4620      	mov	r0, r4
 810b864:	f000 ff96 	bl	810c794 <_Bfree>
 810b868:	4639      	mov	r1, r7
 810b86a:	4620      	mov	r0, r4
 810b86c:	f000 ff92 	bl	810c794 <_Bfree>
 810b870:	e69c      	b.n	810b5ac <_dtoa_r+0x6c4>
 810b872:	2600      	movs	r6, #0
 810b874:	4637      	mov	r7, r6
 810b876:	e7e1      	b.n	810b83c <_dtoa_r+0x954>
 810b878:	46bb      	mov	fp, r7
 810b87a:	4637      	mov	r7, r6
 810b87c:	e599      	b.n	810b3b2 <_dtoa_r+0x4ca>
 810b87e:	bf00      	nop
 810b880:	40240000 	.word	0x40240000
 810b884:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810b886:	2b00      	cmp	r3, #0
 810b888:	f000 80c8 	beq.w	810ba1c <_dtoa_r+0xb34>
 810b88c:	9b04      	ldr	r3, [sp, #16]
 810b88e:	9301      	str	r3, [sp, #4]
 810b890:	2d00      	cmp	r5, #0
 810b892:	dd05      	ble.n	810b8a0 <_dtoa_r+0x9b8>
 810b894:	4639      	mov	r1, r7
 810b896:	462a      	mov	r2, r5
 810b898:	4620      	mov	r0, r4
 810b89a:	f001 f995 	bl	810cbc8 <__lshift>
 810b89e:	4607      	mov	r7, r0
 810b8a0:	f1b8 0f00 	cmp.w	r8, #0
 810b8a4:	d05b      	beq.n	810b95e <_dtoa_r+0xa76>
 810b8a6:	6879      	ldr	r1, [r7, #4]
 810b8a8:	4620      	mov	r0, r4
 810b8aa:	f000 ff33 	bl	810c714 <_Balloc>
 810b8ae:	4605      	mov	r5, r0
 810b8b0:	b928      	cbnz	r0, 810b8be <_dtoa_r+0x9d6>
 810b8b2:	4b83      	ldr	r3, [pc, #524]	; (810bac0 <_dtoa_r+0xbd8>)
 810b8b4:	4602      	mov	r2, r0
 810b8b6:	f240 21ef 	movw	r1, #751	; 0x2ef
 810b8ba:	f7ff bb2e 	b.w	810af1a <_dtoa_r+0x32>
 810b8be:	693a      	ldr	r2, [r7, #16]
 810b8c0:	3202      	adds	r2, #2
 810b8c2:	0092      	lsls	r2, r2, #2
 810b8c4:	f107 010c 	add.w	r1, r7, #12
 810b8c8:	300c      	adds	r0, #12
 810b8ca:	f7ff fa4b 	bl	810ad64 <memcpy>
 810b8ce:	2201      	movs	r2, #1
 810b8d0:	4629      	mov	r1, r5
 810b8d2:	4620      	mov	r0, r4
 810b8d4:	f001 f978 	bl	810cbc8 <__lshift>
 810b8d8:	9b00      	ldr	r3, [sp, #0]
 810b8da:	3301      	adds	r3, #1
 810b8dc:	9304      	str	r3, [sp, #16]
 810b8de:	e9dd 2300 	ldrd	r2, r3, [sp]
 810b8e2:	4413      	add	r3, r2
 810b8e4:	9308      	str	r3, [sp, #32]
 810b8e6:	9b02      	ldr	r3, [sp, #8]
 810b8e8:	f003 0301 	and.w	r3, r3, #1
 810b8ec:	46b8      	mov	r8, r7
 810b8ee:	9306      	str	r3, [sp, #24]
 810b8f0:	4607      	mov	r7, r0
 810b8f2:	9b04      	ldr	r3, [sp, #16]
 810b8f4:	4631      	mov	r1, r6
 810b8f6:	3b01      	subs	r3, #1
 810b8f8:	4650      	mov	r0, sl
 810b8fa:	9301      	str	r3, [sp, #4]
 810b8fc:	f7ff fa6c 	bl	810add8 <quorem>
 810b900:	4641      	mov	r1, r8
 810b902:	9002      	str	r0, [sp, #8]
 810b904:	f100 0930 	add.w	r9, r0, #48	; 0x30
 810b908:	4650      	mov	r0, sl
 810b90a:	f001 f9c9 	bl	810cca0 <__mcmp>
 810b90e:	463a      	mov	r2, r7
 810b910:	9005      	str	r0, [sp, #20]
 810b912:	4631      	mov	r1, r6
 810b914:	4620      	mov	r0, r4
 810b916:	f001 f9df 	bl	810ccd8 <__mdiff>
 810b91a:	68c2      	ldr	r2, [r0, #12]
 810b91c:	4605      	mov	r5, r0
 810b91e:	bb02      	cbnz	r2, 810b962 <_dtoa_r+0xa7a>
 810b920:	4601      	mov	r1, r0
 810b922:	4650      	mov	r0, sl
 810b924:	f001 f9bc 	bl	810cca0 <__mcmp>
 810b928:	4602      	mov	r2, r0
 810b92a:	4629      	mov	r1, r5
 810b92c:	4620      	mov	r0, r4
 810b92e:	9209      	str	r2, [sp, #36]	; 0x24
 810b930:	f000 ff30 	bl	810c794 <_Bfree>
 810b934:	9b07      	ldr	r3, [sp, #28]
 810b936:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810b938:	9d04      	ldr	r5, [sp, #16]
 810b93a:	ea43 0102 	orr.w	r1, r3, r2
 810b93e:	9b06      	ldr	r3, [sp, #24]
 810b940:	4319      	orrs	r1, r3
 810b942:	d110      	bne.n	810b966 <_dtoa_r+0xa7e>
 810b944:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 810b948:	d029      	beq.n	810b99e <_dtoa_r+0xab6>
 810b94a:	9b05      	ldr	r3, [sp, #20]
 810b94c:	2b00      	cmp	r3, #0
 810b94e:	dd02      	ble.n	810b956 <_dtoa_r+0xa6e>
 810b950:	9b02      	ldr	r3, [sp, #8]
 810b952:	f103 0931 	add.w	r9, r3, #49	; 0x31
 810b956:	9b01      	ldr	r3, [sp, #4]
 810b958:	f883 9000 	strb.w	r9, [r3]
 810b95c:	e774      	b.n	810b848 <_dtoa_r+0x960>
 810b95e:	4638      	mov	r0, r7
 810b960:	e7ba      	b.n	810b8d8 <_dtoa_r+0x9f0>
 810b962:	2201      	movs	r2, #1
 810b964:	e7e1      	b.n	810b92a <_dtoa_r+0xa42>
 810b966:	9b05      	ldr	r3, [sp, #20]
 810b968:	2b00      	cmp	r3, #0
 810b96a:	db04      	blt.n	810b976 <_dtoa_r+0xa8e>
 810b96c:	9907      	ldr	r1, [sp, #28]
 810b96e:	430b      	orrs	r3, r1
 810b970:	9906      	ldr	r1, [sp, #24]
 810b972:	430b      	orrs	r3, r1
 810b974:	d120      	bne.n	810b9b8 <_dtoa_r+0xad0>
 810b976:	2a00      	cmp	r2, #0
 810b978:	dded      	ble.n	810b956 <_dtoa_r+0xa6e>
 810b97a:	4651      	mov	r1, sl
 810b97c:	2201      	movs	r2, #1
 810b97e:	4620      	mov	r0, r4
 810b980:	f001 f922 	bl	810cbc8 <__lshift>
 810b984:	4631      	mov	r1, r6
 810b986:	4682      	mov	sl, r0
 810b988:	f001 f98a 	bl	810cca0 <__mcmp>
 810b98c:	2800      	cmp	r0, #0
 810b98e:	dc03      	bgt.n	810b998 <_dtoa_r+0xab0>
 810b990:	d1e1      	bne.n	810b956 <_dtoa_r+0xa6e>
 810b992:	f019 0f01 	tst.w	r9, #1
 810b996:	d0de      	beq.n	810b956 <_dtoa_r+0xa6e>
 810b998:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 810b99c:	d1d8      	bne.n	810b950 <_dtoa_r+0xa68>
 810b99e:	9a01      	ldr	r2, [sp, #4]
 810b9a0:	2339      	movs	r3, #57	; 0x39
 810b9a2:	7013      	strb	r3, [r2, #0]
 810b9a4:	462b      	mov	r3, r5
 810b9a6:	461d      	mov	r5, r3
 810b9a8:	3b01      	subs	r3, #1
 810b9aa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 810b9ae:	2a39      	cmp	r2, #57	; 0x39
 810b9b0:	d06c      	beq.n	810ba8c <_dtoa_r+0xba4>
 810b9b2:	3201      	adds	r2, #1
 810b9b4:	701a      	strb	r2, [r3, #0]
 810b9b6:	e747      	b.n	810b848 <_dtoa_r+0x960>
 810b9b8:	2a00      	cmp	r2, #0
 810b9ba:	dd07      	ble.n	810b9cc <_dtoa_r+0xae4>
 810b9bc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 810b9c0:	d0ed      	beq.n	810b99e <_dtoa_r+0xab6>
 810b9c2:	9a01      	ldr	r2, [sp, #4]
 810b9c4:	f109 0301 	add.w	r3, r9, #1
 810b9c8:	7013      	strb	r3, [r2, #0]
 810b9ca:	e73d      	b.n	810b848 <_dtoa_r+0x960>
 810b9cc:	9b04      	ldr	r3, [sp, #16]
 810b9ce:	9a08      	ldr	r2, [sp, #32]
 810b9d0:	f803 9c01 	strb.w	r9, [r3, #-1]
 810b9d4:	4293      	cmp	r3, r2
 810b9d6:	d043      	beq.n	810ba60 <_dtoa_r+0xb78>
 810b9d8:	4651      	mov	r1, sl
 810b9da:	2300      	movs	r3, #0
 810b9dc:	220a      	movs	r2, #10
 810b9de:	4620      	mov	r0, r4
 810b9e0:	f000 fefa 	bl	810c7d8 <__multadd>
 810b9e4:	45b8      	cmp	r8, r7
 810b9e6:	4682      	mov	sl, r0
 810b9e8:	f04f 0300 	mov.w	r3, #0
 810b9ec:	f04f 020a 	mov.w	r2, #10
 810b9f0:	4641      	mov	r1, r8
 810b9f2:	4620      	mov	r0, r4
 810b9f4:	d107      	bne.n	810ba06 <_dtoa_r+0xb1e>
 810b9f6:	f000 feef 	bl	810c7d8 <__multadd>
 810b9fa:	4680      	mov	r8, r0
 810b9fc:	4607      	mov	r7, r0
 810b9fe:	9b04      	ldr	r3, [sp, #16]
 810ba00:	3301      	adds	r3, #1
 810ba02:	9304      	str	r3, [sp, #16]
 810ba04:	e775      	b.n	810b8f2 <_dtoa_r+0xa0a>
 810ba06:	f000 fee7 	bl	810c7d8 <__multadd>
 810ba0a:	4639      	mov	r1, r7
 810ba0c:	4680      	mov	r8, r0
 810ba0e:	2300      	movs	r3, #0
 810ba10:	220a      	movs	r2, #10
 810ba12:	4620      	mov	r0, r4
 810ba14:	f000 fee0 	bl	810c7d8 <__multadd>
 810ba18:	4607      	mov	r7, r0
 810ba1a:	e7f0      	b.n	810b9fe <_dtoa_r+0xb16>
 810ba1c:	9b04      	ldr	r3, [sp, #16]
 810ba1e:	9301      	str	r3, [sp, #4]
 810ba20:	9d00      	ldr	r5, [sp, #0]
 810ba22:	4631      	mov	r1, r6
 810ba24:	4650      	mov	r0, sl
 810ba26:	f7ff f9d7 	bl	810add8 <quorem>
 810ba2a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 810ba2e:	9b00      	ldr	r3, [sp, #0]
 810ba30:	f805 9b01 	strb.w	r9, [r5], #1
 810ba34:	1aea      	subs	r2, r5, r3
 810ba36:	9b01      	ldr	r3, [sp, #4]
 810ba38:	4293      	cmp	r3, r2
 810ba3a:	dd07      	ble.n	810ba4c <_dtoa_r+0xb64>
 810ba3c:	4651      	mov	r1, sl
 810ba3e:	2300      	movs	r3, #0
 810ba40:	220a      	movs	r2, #10
 810ba42:	4620      	mov	r0, r4
 810ba44:	f000 fec8 	bl	810c7d8 <__multadd>
 810ba48:	4682      	mov	sl, r0
 810ba4a:	e7ea      	b.n	810ba22 <_dtoa_r+0xb3a>
 810ba4c:	9b01      	ldr	r3, [sp, #4]
 810ba4e:	2b00      	cmp	r3, #0
 810ba50:	bfc8      	it	gt
 810ba52:	461d      	movgt	r5, r3
 810ba54:	9b00      	ldr	r3, [sp, #0]
 810ba56:	bfd8      	it	le
 810ba58:	2501      	movle	r5, #1
 810ba5a:	441d      	add	r5, r3
 810ba5c:	f04f 0800 	mov.w	r8, #0
 810ba60:	4651      	mov	r1, sl
 810ba62:	2201      	movs	r2, #1
 810ba64:	4620      	mov	r0, r4
 810ba66:	f001 f8af 	bl	810cbc8 <__lshift>
 810ba6a:	4631      	mov	r1, r6
 810ba6c:	4682      	mov	sl, r0
 810ba6e:	f001 f917 	bl	810cca0 <__mcmp>
 810ba72:	2800      	cmp	r0, #0
 810ba74:	dc96      	bgt.n	810b9a4 <_dtoa_r+0xabc>
 810ba76:	d102      	bne.n	810ba7e <_dtoa_r+0xb96>
 810ba78:	f019 0f01 	tst.w	r9, #1
 810ba7c:	d192      	bne.n	810b9a4 <_dtoa_r+0xabc>
 810ba7e:	462b      	mov	r3, r5
 810ba80:	461d      	mov	r5, r3
 810ba82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810ba86:	2a30      	cmp	r2, #48	; 0x30
 810ba88:	d0fa      	beq.n	810ba80 <_dtoa_r+0xb98>
 810ba8a:	e6dd      	b.n	810b848 <_dtoa_r+0x960>
 810ba8c:	9a00      	ldr	r2, [sp, #0]
 810ba8e:	429a      	cmp	r2, r3
 810ba90:	d189      	bne.n	810b9a6 <_dtoa_r+0xabe>
 810ba92:	f10b 0b01 	add.w	fp, fp, #1
 810ba96:	2331      	movs	r3, #49	; 0x31
 810ba98:	e796      	b.n	810b9c8 <_dtoa_r+0xae0>
 810ba9a:	4b0a      	ldr	r3, [pc, #40]	; (810bac4 <_dtoa_r+0xbdc>)
 810ba9c:	f7ff ba99 	b.w	810afd2 <_dtoa_r+0xea>
 810baa0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810baa2:	2b00      	cmp	r3, #0
 810baa4:	f47f aa6d 	bne.w	810af82 <_dtoa_r+0x9a>
 810baa8:	4b07      	ldr	r3, [pc, #28]	; (810bac8 <_dtoa_r+0xbe0>)
 810baaa:	f7ff ba92 	b.w	810afd2 <_dtoa_r+0xea>
 810baae:	9b01      	ldr	r3, [sp, #4]
 810bab0:	2b00      	cmp	r3, #0
 810bab2:	dcb5      	bgt.n	810ba20 <_dtoa_r+0xb38>
 810bab4:	9b07      	ldr	r3, [sp, #28]
 810bab6:	2b02      	cmp	r3, #2
 810bab8:	f73f aeb1 	bgt.w	810b81e <_dtoa_r+0x936>
 810babc:	e7b0      	b.n	810ba20 <_dtoa_r+0xb38>
 810babe:	bf00      	nop
 810bac0:	0810ea6a 	.word	0x0810ea6a
 810bac4:	0810e7d0 	.word	0x0810e7d0
 810bac8:	0810ea05 	.word	0x0810ea05

0810bacc <rshift>:
 810bacc:	6903      	ldr	r3, [r0, #16]
 810bace:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 810bad2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810bad6:	ea4f 1261 	mov.w	r2, r1, asr #5
 810bada:	f100 0414 	add.w	r4, r0, #20
 810bade:	dd45      	ble.n	810bb6c <rshift+0xa0>
 810bae0:	f011 011f 	ands.w	r1, r1, #31
 810bae4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 810bae8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 810baec:	d10c      	bne.n	810bb08 <rshift+0x3c>
 810baee:	f100 0710 	add.w	r7, r0, #16
 810baf2:	4629      	mov	r1, r5
 810baf4:	42b1      	cmp	r1, r6
 810baf6:	d334      	bcc.n	810bb62 <rshift+0x96>
 810baf8:	1a9b      	subs	r3, r3, r2
 810bafa:	009b      	lsls	r3, r3, #2
 810bafc:	1eea      	subs	r2, r5, #3
 810bafe:	4296      	cmp	r6, r2
 810bb00:	bf38      	it	cc
 810bb02:	2300      	movcc	r3, #0
 810bb04:	4423      	add	r3, r4
 810bb06:	e015      	b.n	810bb34 <rshift+0x68>
 810bb08:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 810bb0c:	f1c1 0820 	rsb	r8, r1, #32
 810bb10:	40cf      	lsrs	r7, r1
 810bb12:	f105 0e04 	add.w	lr, r5, #4
 810bb16:	46a1      	mov	r9, r4
 810bb18:	4576      	cmp	r6, lr
 810bb1a:	46f4      	mov	ip, lr
 810bb1c:	d815      	bhi.n	810bb4a <rshift+0x7e>
 810bb1e:	1a9a      	subs	r2, r3, r2
 810bb20:	0092      	lsls	r2, r2, #2
 810bb22:	3a04      	subs	r2, #4
 810bb24:	3501      	adds	r5, #1
 810bb26:	42ae      	cmp	r6, r5
 810bb28:	bf38      	it	cc
 810bb2a:	2200      	movcc	r2, #0
 810bb2c:	18a3      	adds	r3, r4, r2
 810bb2e:	50a7      	str	r7, [r4, r2]
 810bb30:	b107      	cbz	r7, 810bb34 <rshift+0x68>
 810bb32:	3304      	adds	r3, #4
 810bb34:	1b1a      	subs	r2, r3, r4
 810bb36:	42a3      	cmp	r3, r4
 810bb38:	ea4f 02a2 	mov.w	r2, r2, asr #2
 810bb3c:	bf08      	it	eq
 810bb3e:	2300      	moveq	r3, #0
 810bb40:	6102      	str	r2, [r0, #16]
 810bb42:	bf08      	it	eq
 810bb44:	6143      	streq	r3, [r0, #20]
 810bb46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810bb4a:	f8dc c000 	ldr.w	ip, [ip]
 810bb4e:	fa0c fc08 	lsl.w	ip, ip, r8
 810bb52:	ea4c 0707 	orr.w	r7, ip, r7
 810bb56:	f849 7b04 	str.w	r7, [r9], #4
 810bb5a:	f85e 7b04 	ldr.w	r7, [lr], #4
 810bb5e:	40cf      	lsrs	r7, r1
 810bb60:	e7da      	b.n	810bb18 <rshift+0x4c>
 810bb62:	f851 cb04 	ldr.w	ip, [r1], #4
 810bb66:	f847 cf04 	str.w	ip, [r7, #4]!
 810bb6a:	e7c3      	b.n	810baf4 <rshift+0x28>
 810bb6c:	4623      	mov	r3, r4
 810bb6e:	e7e1      	b.n	810bb34 <rshift+0x68>

0810bb70 <__hexdig_fun>:
 810bb70:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 810bb74:	2b09      	cmp	r3, #9
 810bb76:	d802      	bhi.n	810bb7e <__hexdig_fun+0xe>
 810bb78:	3820      	subs	r0, #32
 810bb7a:	b2c0      	uxtb	r0, r0
 810bb7c:	4770      	bx	lr
 810bb7e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 810bb82:	2b05      	cmp	r3, #5
 810bb84:	d801      	bhi.n	810bb8a <__hexdig_fun+0x1a>
 810bb86:	3847      	subs	r0, #71	; 0x47
 810bb88:	e7f7      	b.n	810bb7a <__hexdig_fun+0xa>
 810bb8a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 810bb8e:	2b05      	cmp	r3, #5
 810bb90:	d801      	bhi.n	810bb96 <__hexdig_fun+0x26>
 810bb92:	3827      	subs	r0, #39	; 0x27
 810bb94:	e7f1      	b.n	810bb7a <__hexdig_fun+0xa>
 810bb96:	2000      	movs	r0, #0
 810bb98:	4770      	bx	lr
	...

0810bb9c <__gethex>:
 810bb9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810bba0:	4617      	mov	r7, r2
 810bba2:	680a      	ldr	r2, [r1, #0]
 810bba4:	b085      	sub	sp, #20
 810bba6:	f102 0b02 	add.w	fp, r2, #2
 810bbaa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 810bbae:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 810bbb2:	4681      	mov	r9, r0
 810bbb4:	468a      	mov	sl, r1
 810bbb6:	9302      	str	r3, [sp, #8]
 810bbb8:	32fe      	adds	r2, #254	; 0xfe
 810bbba:	eb02 030b 	add.w	r3, r2, fp
 810bbbe:	46d8      	mov	r8, fp
 810bbc0:	f81b 0b01 	ldrb.w	r0, [fp], #1
 810bbc4:	9301      	str	r3, [sp, #4]
 810bbc6:	2830      	cmp	r0, #48	; 0x30
 810bbc8:	d0f7      	beq.n	810bbba <__gethex+0x1e>
 810bbca:	f7ff ffd1 	bl	810bb70 <__hexdig_fun>
 810bbce:	4604      	mov	r4, r0
 810bbd0:	2800      	cmp	r0, #0
 810bbd2:	d138      	bne.n	810bc46 <__gethex+0xaa>
 810bbd4:	49a7      	ldr	r1, [pc, #668]	; (810be74 <__gethex+0x2d8>)
 810bbd6:	2201      	movs	r2, #1
 810bbd8:	4640      	mov	r0, r8
 810bbda:	f7ff f84d 	bl	810ac78 <strncmp>
 810bbde:	4606      	mov	r6, r0
 810bbe0:	2800      	cmp	r0, #0
 810bbe2:	d169      	bne.n	810bcb8 <__gethex+0x11c>
 810bbe4:	f898 0001 	ldrb.w	r0, [r8, #1]
 810bbe8:	465d      	mov	r5, fp
 810bbea:	f7ff ffc1 	bl	810bb70 <__hexdig_fun>
 810bbee:	2800      	cmp	r0, #0
 810bbf0:	d064      	beq.n	810bcbc <__gethex+0x120>
 810bbf2:	465a      	mov	r2, fp
 810bbf4:	7810      	ldrb	r0, [r2, #0]
 810bbf6:	2830      	cmp	r0, #48	; 0x30
 810bbf8:	4690      	mov	r8, r2
 810bbfa:	f102 0201 	add.w	r2, r2, #1
 810bbfe:	d0f9      	beq.n	810bbf4 <__gethex+0x58>
 810bc00:	f7ff ffb6 	bl	810bb70 <__hexdig_fun>
 810bc04:	2301      	movs	r3, #1
 810bc06:	fab0 f480 	clz	r4, r0
 810bc0a:	0964      	lsrs	r4, r4, #5
 810bc0c:	465e      	mov	r6, fp
 810bc0e:	9301      	str	r3, [sp, #4]
 810bc10:	4642      	mov	r2, r8
 810bc12:	4615      	mov	r5, r2
 810bc14:	3201      	adds	r2, #1
 810bc16:	7828      	ldrb	r0, [r5, #0]
 810bc18:	f7ff ffaa 	bl	810bb70 <__hexdig_fun>
 810bc1c:	2800      	cmp	r0, #0
 810bc1e:	d1f8      	bne.n	810bc12 <__gethex+0x76>
 810bc20:	4994      	ldr	r1, [pc, #592]	; (810be74 <__gethex+0x2d8>)
 810bc22:	2201      	movs	r2, #1
 810bc24:	4628      	mov	r0, r5
 810bc26:	f7ff f827 	bl	810ac78 <strncmp>
 810bc2a:	b978      	cbnz	r0, 810bc4c <__gethex+0xb0>
 810bc2c:	b946      	cbnz	r6, 810bc40 <__gethex+0xa4>
 810bc2e:	1c6e      	adds	r6, r5, #1
 810bc30:	4632      	mov	r2, r6
 810bc32:	4615      	mov	r5, r2
 810bc34:	3201      	adds	r2, #1
 810bc36:	7828      	ldrb	r0, [r5, #0]
 810bc38:	f7ff ff9a 	bl	810bb70 <__hexdig_fun>
 810bc3c:	2800      	cmp	r0, #0
 810bc3e:	d1f8      	bne.n	810bc32 <__gethex+0x96>
 810bc40:	1b73      	subs	r3, r6, r5
 810bc42:	009e      	lsls	r6, r3, #2
 810bc44:	e004      	b.n	810bc50 <__gethex+0xb4>
 810bc46:	2400      	movs	r4, #0
 810bc48:	4626      	mov	r6, r4
 810bc4a:	e7e1      	b.n	810bc10 <__gethex+0x74>
 810bc4c:	2e00      	cmp	r6, #0
 810bc4e:	d1f7      	bne.n	810bc40 <__gethex+0xa4>
 810bc50:	782b      	ldrb	r3, [r5, #0]
 810bc52:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 810bc56:	2b50      	cmp	r3, #80	; 0x50
 810bc58:	d13d      	bne.n	810bcd6 <__gethex+0x13a>
 810bc5a:	786b      	ldrb	r3, [r5, #1]
 810bc5c:	2b2b      	cmp	r3, #43	; 0x2b
 810bc5e:	d02f      	beq.n	810bcc0 <__gethex+0x124>
 810bc60:	2b2d      	cmp	r3, #45	; 0x2d
 810bc62:	d031      	beq.n	810bcc8 <__gethex+0x12c>
 810bc64:	1c69      	adds	r1, r5, #1
 810bc66:	f04f 0b00 	mov.w	fp, #0
 810bc6a:	7808      	ldrb	r0, [r1, #0]
 810bc6c:	f7ff ff80 	bl	810bb70 <__hexdig_fun>
 810bc70:	1e42      	subs	r2, r0, #1
 810bc72:	b2d2      	uxtb	r2, r2
 810bc74:	2a18      	cmp	r2, #24
 810bc76:	d82e      	bhi.n	810bcd6 <__gethex+0x13a>
 810bc78:	f1a0 0210 	sub.w	r2, r0, #16
 810bc7c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 810bc80:	f7ff ff76 	bl	810bb70 <__hexdig_fun>
 810bc84:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 810bc88:	fa5f fc8c 	uxtb.w	ip, ip
 810bc8c:	f1bc 0f18 	cmp.w	ip, #24
 810bc90:	d91d      	bls.n	810bcce <__gethex+0x132>
 810bc92:	f1bb 0f00 	cmp.w	fp, #0
 810bc96:	d000      	beq.n	810bc9a <__gethex+0xfe>
 810bc98:	4252      	negs	r2, r2
 810bc9a:	4416      	add	r6, r2
 810bc9c:	f8ca 1000 	str.w	r1, [sl]
 810bca0:	b1dc      	cbz	r4, 810bcda <__gethex+0x13e>
 810bca2:	9b01      	ldr	r3, [sp, #4]
 810bca4:	2b00      	cmp	r3, #0
 810bca6:	bf14      	ite	ne
 810bca8:	f04f 0800 	movne.w	r8, #0
 810bcac:	f04f 0806 	moveq.w	r8, #6
 810bcb0:	4640      	mov	r0, r8
 810bcb2:	b005      	add	sp, #20
 810bcb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810bcb8:	4645      	mov	r5, r8
 810bcba:	4626      	mov	r6, r4
 810bcbc:	2401      	movs	r4, #1
 810bcbe:	e7c7      	b.n	810bc50 <__gethex+0xb4>
 810bcc0:	f04f 0b00 	mov.w	fp, #0
 810bcc4:	1ca9      	adds	r1, r5, #2
 810bcc6:	e7d0      	b.n	810bc6a <__gethex+0xce>
 810bcc8:	f04f 0b01 	mov.w	fp, #1
 810bccc:	e7fa      	b.n	810bcc4 <__gethex+0x128>
 810bcce:	230a      	movs	r3, #10
 810bcd0:	fb03 0002 	mla	r0, r3, r2, r0
 810bcd4:	e7d0      	b.n	810bc78 <__gethex+0xdc>
 810bcd6:	4629      	mov	r1, r5
 810bcd8:	e7e0      	b.n	810bc9c <__gethex+0x100>
 810bcda:	eba5 0308 	sub.w	r3, r5, r8
 810bcde:	3b01      	subs	r3, #1
 810bce0:	4621      	mov	r1, r4
 810bce2:	2b07      	cmp	r3, #7
 810bce4:	dc0a      	bgt.n	810bcfc <__gethex+0x160>
 810bce6:	4648      	mov	r0, r9
 810bce8:	f000 fd14 	bl	810c714 <_Balloc>
 810bcec:	4604      	mov	r4, r0
 810bcee:	b940      	cbnz	r0, 810bd02 <__gethex+0x166>
 810bcf0:	4b61      	ldr	r3, [pc, #388]	; (810be78 <__gethex+0x2dc>)
 810bcf2:	4602      	mov	r2, r0
 810bcf4:	21e4      	movs	r1, #228	; 0xe4
 810bcf6:	4861      	ldr	r0, [pc, #388]	; (810be7c <__gethex+0x2e0>)
 810bcf8:	f7ff f850 	bl	810ad9c <__assert_func>
 810bcfc:	3101      	adds	r1, #1
 810bcfe:	105b      	asrs	r3, r3, #1
 810bd00:	e7ef      	b.n	810bce2 <__gethex+0x146>
 810bd02:	f100 0a14 	add.w	sl, r0, #20
 810bd06:	2300      	movs	r3, #0
 810bd08:	495a      	ldr	r1, [pc, #360]	; (810be74 <__gethex+0x2d8>)
 810bd0a:	f8cd a004 	str.w	sl, [sp, #4]
 810bd0e:	469b      	mov	fp, r3
 810bd10:	45a8      	cmp	r8, r5
 810bd12:	d342      	bcc.n	810bd9a <__gethex+0x1fe>
 810bd14:	9801      	ldr	r0, [sp, #4]
 810bd16:	f840 bb04 	str.w	fp, [r0], #4
 810bd1a:	eba0 000a 	sub.w	r0, r0, sl
 810bd1e:	1080      	asrs	r0, r0, #2
 810bd20:	6120      	str	r0, [r4, #16]
 810bd22:	ea4f 1840 	mov.w	r8, r0, lsl #5
 810bd26:	4658      	mov	r0, fp
 810bd28:	f000 fde6 	bl	810c8f8 <__hi0bits>
 810bd2c:	683d      	ldr	r5, [r7, #0]
 810bd2e:	eba8 0000 	sub.w	r0, r8, r0
 810bd32:	42a8      	cmp	r0, r5
 810bd34:	dd59      	ble.n	810bdea <__gethex+0x24e>
 810bd36:	eba0 0805 	sub.w	r8, r0, r5
 810bd3a:	4641      	mov	r1, r8
 810bd3c:	4620      	mov	r0, r4
 810bd3e:	f001 f975 	bl	810d02c <__any_on>
 810bd42:	4683      	mov	fp, r0
 810bd44:	b1b8      	cbz	r0, 810bd76 <__gethex+0x1da>
 810bd46:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 810bd4a:	1159      	asrs	r1, r3, #5
 810bd4c:	f003 021f 	and.w	r2, r3, #31
 810bd50:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 810bd54:	f04f 0b01 	mov.w	fp, #1
 810bd58:	fa0b f202 	lsl.w	r2, fp, r2
 810bd5c:	420a      	tst	r2, r1
 810bd5e:	d00a      	beq.n	810bd76 <__gethex+0x1da>
 810bd60:	455b      	cmp	r3, fp
 810bd62:	dd06      	ble.n	810bd72 <__gethex+0x1d6>
 810bd64:	f1a8 0102 	sub.w	r1, r8, #2
 810bd68:	4620      	mov	r0, r4
 810bd6a:	f001 f95f 	bl	810d02c <__any_on>
 810bd6e:	2800      	cmp	r0, #0
 810bd70:	d138      	bne.n	810bde4 <__gethex+0x248>
 810bd72:	f04f 0b02 	mov.w	fp, #2
 810bd76:	4641      	mov	r1, r8
 810bd78:	4620      	mov	r0, r4
 810bd7a:	f7ff fea7 	bl	810bacc <rshift>
 810bd7e:	4446      	add	r6, r8
 810bd80:	68bb      	ldr	r3, [r7, #8]
 810bd82:	42b3      	cmp	r3, r6
 810bd84:	da41      	bge.n	810be0a <__gethex+0x26e>
 810bd86:	4621      	mov	r1, r4
 810bd88:	4648      	mov	r0, r9
 810bd8a:	f000 fd03 	bl	810c794 <_Bfree>
 810bd8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810bd90:	2300      	movs	r3, #0
 810bd92:	6013      	str	r3, [r2, #0]
 810bd94:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 810bd98:	e78a      	b.n	810bcb0 <__gethex+0x114>
 810bd9a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 810bd9e:	2a2e      	cmp	r2, #46	; 0x2e
 810bda0:	d014      	beq.n	810bdcc <__gethex+0x230>
 810bda2:	2b20      	cmp	r3, #32
 810bda4:	d106      	bne.n	810bdb4 <__gethex+0x218>
 810bda6:	9b01      	ldr	r3, [sp, #4]
 810bda8:	f843 bb04 	str.w	fp, [r3], #4
 810bdac:	f04f 0b00 	mov.w	fp, #0
 810bdb0:	9301      	str	r3, [sp, #4]
 810bdb2:	465b      	mov	r3, fp
 810bdb4:	7828      	ldrb	r0, [r5, #0]
 810bdb6:	9303      	str	r3, [sp, #12]
 810bdb8:	f7ff feda 	bl	810bb70 <__hexdig_fun>
 810bdbc:	9b03      	ldr	r3, [sp, #12]
 810bdbe:	f000 000f 	and.w	r0, r0, #15
 810bdc2:	4098      	lsls	r0, r3
 810bdc4:	ea4b 0b00 	orr.w	fp, fp, r0
 810bdc8:	3304      	adds	r3, #4
 810bdca:	e7a1      	b.n	810bd10 <__gethex+0x174>
 810bdcc:	45a8      	cmp	r8, r5
 810bdce:	d8e8      	bhi.n	810bda2 <__gethex+0x206>
 810bdd0:	2201      	movs	r2, #1
 810bdd2:	4628      	mov	r0, r5
 810bdd4:	9303      	str	r3, [sp, #12]
 810bdd6:	f7fe ff4f 	bl	810ac78 <strncmp>
 810bdda:	4926      	ldr	r1, [pc, #152]	; (810be74 <__gethex+0x2d8>)
 810bddc:	9b03      	ldr	r3, [sp, #12]
 810bdde:	2800      	cmp	r0, #0
 810bde0:	d1df      	bne.n	810bda2 <__gethex+0x206>
 810bde2:	e795      	b.n	810bd10 <__gethex+0x174>
 810bde4:	f04f 0b03 	mov.w	fp, #3
 810bde8:	e7c5      	b.n	810bd76 <__gethex+0x1da>
 810bdea:	da0b      	bge.n	810be04 <__gethex+0x268>
 810bdec:	eba5 0800 	sub.w	r8, r5, r0
 810bdf0:	4621      	mov	r1, r4
 810bdf2:	4642      	mov	r2, r8
 810bdf4:	4648      	mov	r0, r9
 810bdf6:	f000 fee7 	bl	810cbc8 <__lshift>
 810bdfa:	eba6 0608 	sub.w	r6, r6, r8
 810bdfe:	4604      	mov	r4, r0
 810be00:	f100 0a14 	add.w	sl, r0, #20
 810be04:	f04f 0b00 	mov.w	fp, #0
 810be08:	e7ba      	b.n	810bd80 <__gethex+0x1e4>
 810be0a:	687b      	ldr	r3, [r7, #4]
 810be0c:	42b3      	cmp	r3, r6
 810be0e:	dd73      	ble.n	810bef8 <__gethex+0x35c>
 810be10:	1b9e      	subs	r6, r3, r6
 810be12:	42b5      	cmp	r5, r6
 810be14:	dc34      	bgt.n	810be80 <__gethex+0x2e4>
 810be16:	68fb      	ldr	r3, [r7, #12]
 810be18:	2b02      	cmp	r3, #2
 810be1a:	d023      	beq.n	810be64 <__gethex+0x2c8>
 810be1c:	2b03      	cmp	r3, #3
 810be1e:	d025      	beq.n	810be6c <__gethex+0x2d0>
 810be20:	2b01      	cmp	r3, #1
 810be22:	d115      	bne.n	810be50 <__gethex+0x2b4>
 810be24:	42b5      	cmp	r5, r6
 810be26:	d113      	bne.n	810be50 <__gethex+0x2b4>
 810be28:	2d01      	cmp	r5, #1
 810be2a:	d10b      	bne.n	810be44 <__gethex+0x2a8>
 810be2c:	9a02      	ldr	r2, [sp, #8]
 810be2e:	687b      	ldr	r3, [r7, #4]
 810be30:	6013      	str	r3, [r2, #0]
 810be32:	2301      	movs	r3, #1
 810be34:	6123      	str	r3, [r4, #16]
 810be36:	f8ca 3000 	str.w	r3, [sl]
 810be3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810be3c:	f04f 0862 	mov.w	r8, #98	; 0x62
 810be40:	601c      	str	r4, [r3, #0]
 810be42:	e735      	b.n	810bcb0 <__gethex+0x114>
 810be44:	1e69      	subs	r1, r5, #1
 810be46:	4620      	mov	r0, r4
 810be48:	f001 f8f0 	bl	810d02c <__any_on>
 810be4c:	2800      	cmp	r0, #0
 810be4e:	d1ed      	bne.n	810be2c <__gethex+0x290>
 810be50:	4621      	mov	r1, r4
 810be52:	4648      	mov	r0, r9
 810be54:	f000 fc9e 	bl	810c794 <_Bfree>
 810be58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810be5a:	2300      	movs	r3, #0
 810be5c:	6013      	str	r3, [r2, #0]
 810be5e:	f04f 0850 	mov.w	r8, #80	; 0x50
 810be62:	e725      	b.n	810bcb0 <__gethex+0x114>
 810be64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810be66:	2b00      	cmp	r3, #0
 810be68:	d1f2      	bne.n	810be50 <__gethex+0x2b4>
 810be6a:	e7df      	b.n	810be2c <__gethex+0x290>
 810be6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810be6e:	2b00      	cmp	r3, #0
 810be70:	d1dc      	bne.n	810be2c <__gethex+0x290>
 810be72:	e7ed      	b.n	810be50 <__gethex+0x2b4>
 810be74:	0810e868 	.word	0x0810e868
 810be78:	0810ea6a 	.word	0x0810ea6a
 810be7c:	0810ea7b 	.word	0x0810ea7b
 810be80:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 810be84:	f1bb 0f00 	cmp.w	fp, #0
 810be88:	d133      	bne.n	810bef2 <__gethex+0x356>
 810be8a:	f1b8 0f00 	cmp.w	r8, #0
 810be8e:	d004      	beq.n	810be9a <__gethex+0x2fe>
 810be90:	4641      	mov	r1, r8
 810be92:	4620      	mov	r0, r4
 810be94:	f001 f8ca 	bl	810d02c <__any_on>
 810be98:	4683      	mov	fp, r0
 810be9a:	ea4f 1268 	mov.w	r2, r8, asr #5
 810be9e:	2301      	movs	r3, #1
 810bea0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 810bea4:	f008 081f 	and.w	r8, r8, #31
 810bea8:	fa03 f308 	lsl.w	r3, r3, r8
 810beac:	4213      	tst	r3, r2
 810beae:	4631      	mov	r1, r6
 810beb0:	4620      	mov	r0, r4
 810beb2:	bf18      	it	ne
 810beb4:	f04b 0b02 	orrne.w	fp, fp, #2
 810beb8:	1bad      	subs	r5, r5, r6
 810beba:	f7ff fe07 	bl	810bacc <rshift>
 810bebe:	687e      	ldr	r6, [r7, #4]
 810bec0:	f04f 0802 	mov.w	r8, #2
 810bec4:	f1bb 0f00 	cmp.w	fp, #0
 810bec8:	d04a      	beq.n	810bf60 <__gethex+0x3c4>
 810beca:	68fb      	ldr	r3, [r7, #12]
 810becc:	2b02      	cmp	r3, #2
 810bece:	d016      	beq.n	810befe <__gethex+0x362>
 810bed0:	2b03      	cmp	r3, #3
 810bed2:	d018      	beq.n	810bf06 <__gethex+0x36a>
 810bed4:	2b01      	cmp	r3, #1
 810bed6:	d109      	bne.n	810beec <__gethex+0x350>
 810bed8:	f01b 0f02 	tst.w	fp, #2
 810bedc:	d006      	beq.n	810beec <__gethex+0x350>
 810bede:	f8da 3000 	ldr.w	r3, [sl]
 810bee2:	ea4b 0b03 	orr.w	fp, fp, r3
 810bee6:	f01b 0f01 	tst.w	fp, #1
 810beea:	d10f      	bne.n	810bf0c <__gethex+0x370>
 810beec:	f048 0810 	orr.w	r8, r8, #16
 810bef0:	e036      	b.n	810bf60 <__gethex+0x3c4>
 810bef2:	f04f 0b01 	mov.w	fp, #1
 810bef6:	e7d0      	b.n	810be9a <__gethex+0x2fe>
 810bef8:	f04f 0801 	mov.w	r8, #1
 810befc:	e7e2      	b.n	810bec4 <__gethex+0x328>
 810befe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810bf00:	f1c3 0301 	rsb	r3, r3, #1
 810bf04:	930f      	str	r3, [sp, #60]	; 0x3c
 810bf06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810bf08:	2b00      	cmp	r3, #0
 810bf0a:	d0ef      	beq.n	810beec <__gethex+0x350>
 810bf0c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 810bf10:	f104 0214 	add.w	r2, r4, #20
 810bf14:	ea4f 038b 	mov.w	r3, fp, lsl #2
 810bf18:	9301      	str	r3, [sp, #4]
 810bf1a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 810bf1e:	2300      	movs	r3, #0
 810bf20:	4694      	mov	ip, r2
 810bf22:	f852 1b04 	ldr.w	r1, [r2], #4
 810bf26:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 810bf2a:	d01e      	beq.n	810bf6a <__gethex+0x3ce>
 810bf2c:	3101      	adds	r1, #1
 810bf2e:	f8cc 1000 	str.w	r1, [ip]
 810bf32:	f1b8 0f02 	cmp.w	r8, #2
 810bf36:	f104 0214 	add.w	r2, r4, #20
 810bf3a:	d13d      	bne.n	810bfb8 <__gethex+0x41c>
 810bf3c:	683b      	ldr	r3, [r7, #0]
 810bf3e:	3b01      	subs	r3, #1
 810bf40:	42ab      	cmp	r3, r5
 810bf42:	d10b      	bne.n	810bf5c <__gethex+0x3c0>
 810bf44:	1169      	asrs	r1, r5, #5
 810bf46:	2301      	movs	r3, #1
 810bf48:	f005 051f 	and.w	r5, r5, #31
 810bf4c:	fa03 f505 	lsl.w	r5, r3, r5
 810bf50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810bf54:	421d      	tst	r5, r3
 810bf56:	bf18      	it	ne
 810bf58:	f04f 0801 	movne.w	r8, #1
 810bf5c:	f048 0820 	orr.w	r8, r8, #32
 810bf60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810bf62:	601c      	str	r4, [r3, #0]
 810bf64:	9b02      	ldr	r3, [sp, #8]
 810bf66:	601e      	str	r6, [r3, #0]
 810bf68:	e6a2      	b.n	810bcb0 <__gethex+0x114>
 810bf6a:	4290      	cmp	r0, r2
 810bf6c:	f842 3c04 	str.w	r3, [r2, #-4]
 810bf70:	d8d6      	bhi.n	810bf20 <__gethex+0x384>
 810bf72:	68a2      	ldr	r2, [r4, #8]
 810bf74:	4593      	cmp	fp, r2
 810bf76:	db17      	blt.n	810bfa8 <__gethex+0x40c>
 810bf78:	6861      	ldr	r1, [r4, #4]
 810bf7a:	4648      	mov	r0, r9
 810bf7c:	3101      	adds	r1, #1
 810bf7e:	f000 fbc9 	bl	810c714 <_Balloc>
 810bf82:	4682      	mov	sl, r0
 810bf84:	b918      	cbnz	r0, 810bf8e <__gethex+0x3f2>
 810bf86:	4b1b      	ldr	r3, [pc, #108]	; (810bff4 <__gethex+0x458>)
 810bf88:	4602      	mov	r2, r0
 810bf8a:	2184      	movs	r1, #132	; 0x84
 810bf8c:	e6b3      	b.n	810bcf6 <__gethex+0x15a>
 810bf8e:	6922      	ldr	r2, [r4, #16]
 810bf90:	3202      	adds	r2, #2
 810bf92:	f104 010c 	add.w	r1, r4, #12
 810bf96:	0092      	lsls	r2, r2, #2
 810bf98:	300c      	adds	r0, #12
 810bf9a:	f7fe fee3 	bl	810ad64 <memcpy>
 810bf9e:	4621      	mov	r1, r4
 810bfa0:	4648      	mov	r0, r9
 810bfa2:	f000 fbf7 	bl	810c794 <_Bfree>
 810bfa6:	4654      	mov	r4, sl
 810bfa8:	6922      	ldr	r2, [r4, #16]
 810bfaa:	1c51      	adds	r1, r2, #1
 810bfac:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 810bfb0:	6121      	str	r1, [r4, #16]
 810bfb2:	2101      	movs	r1, #1
 810bfb4:	6151      	str	r1, [r2, #20]
 810bfb6:	e7bc      	b.n	810bf32 <__gethex+0x396>
 810bfb8:	6921      	ldr	r1, [r4, #16]
 810bfba:	4559      	cmp	r1, fp
 810bfbc:	dd0b      	ble.n	810bfd6 <__gethex+0x43a>
 810bfbe:	2101      	movs	r1, #1
 810bfc0:	4620      	mov	r0, r4
 810bfc2:	f7ff fd83 	bl	810bacc <rshift>
 810bfc6:	68bb      	ldr	r3, [r7, #8]
 810bfc8:	3601      	adds	r6, #1
 810bfca:	42b3      	cmp	r3, r6
 810bfcc:	f6ff aedb 	blt.w	810bd86 <__gethex+0x1ea>
 810bfd0:	f04f 0801 	mov.w	r8, #1
 810bfd4:	e7c2      	b.n	810bf5c <__gethex+0x3c0>
 810bfd6:	f015 051f 	ands.w	r5, r5, #31
 810bfda:	d0f9      	beq.n	810bfd0 <__gethex+0x434>
 810bfdc:	9b01      	ldr	r3, [sp, #4]
 810bfde:	441a      	add	r2, r3
 810bfe0:	f1c5 0520 	rsb	r5, r5, #32
 810bfe4:	f852 0c04 	ldr.w	r0, [r2, #-4]
 810bfe8:	f000 fc86 	bl	810c8f8 <__hi0bits>
 810bfec:	42a8      	cmp	r0, r5
 810bfee:	dbe6      	blt.n	810bfbe <__gethex+0x422>
 810bff0:	e7ee      	b.n	810bfd0 <__gethex+0x434>
 810bff2:	bf00      	nop
 810bff4:	0810ea6a 	.word	0x0810ea6a

0810bff8 <L_shift>:
 810bff8:	f1c2 0208 	rsb	r2, r2, #8
 810bffc:	0092      	lsls	r2, r2, #2
 810bffe:	b570      	push	{r4, r5, r6, lr}
 810c000:	f1c2 0620 	rsb	r6, r2, #32
 810c004:	6843      	ldr	r3, [r0, #4]
 810c006:	6804      	ldr	r4, [r0, #0]
 810c008:	fa03 f506 	lsl.w	r5, r3, r6
 810c00c:	432c      	orrs	r4, r5
 810c00e:	40d3      	lsrs	r3, r2
 810c010:	6004      	str	r4, [r0, #0]
 810c012:	f840 3f04 	str.w	r3, [r0, #4]!
 810c016:	4288      	cmp	r0, r1
 810c018:	d3f4      	bcc.n	810c004 <L_shift+0xc>
 810c01a:	bd70      	pop	{r4, r5, r6, pc}

0810c01c <__match>:
 810c01c:	b530      	push	{r4, r5, lr}
 810c01e:	6803      	ldr	r3, [r0, #0]
 810c020:	3301      	adds	r3, #1
 810c022:	f811 4b01 	ldrb.w	r4, [r1], #1
 810c026:	b914      	cbnz	r4, 810c02e <__match+0x12>
 810c028:	6003      	str	r3, [r0, #0]
 810c02a:	2001      	movs	r0, #1
 810c02c:	bd30      	pop	{r4, r5, pc}
 810c02e:	f813 2b01 	ldrb.w	r2, [r3], #1
 810c032:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 810c036:	2d19      	cmp	r5, #25
 810c038:	bf98      	it	ls
 810c03a:	3220      	addls	r2, #32
 810c03c:	42a2      	cmp	r2, r4
 810c03e:	d0f0      	beq.n	810c022 <__match+0x6>
 810c040:	2000      	movs	r0, #0
 810c042:	e7f3      	b.n	810c02c <__match+0x10>

0810c044 <__hexnan>:
 810c044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c048:	680b      	ldr	r3, [r1, #0]
 810c04a:	6801      	ldr	r1, [r0, #0]
 810c04c:	115e      	asrs	r6, r3, #5
 810c04e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 810c052:	f013 031f 	ands.w	r3, r3, #31
 810c056:	b087      	sub	sp, #28
 810c058:	bf18      	it	ne
 810c05a:	3604      	addne	r6, #4
 810c05c:	2500      	movs	r5, #0
 810c05e:	1f37      	subs	r7, r6, #4
 810c060:	4682      	mov	sl, r0
 810c062:	4690      	mov	r8, r2
 810c064:	9301      	str	r3, [sp, #4]
 810c066:	f846 5c04 	str.w	r5, [r6, #-4]
 810c06a:	46b9      	mov	r9, r7
 810c06c:	463c      	mov	r4, r7
 810c06e:	9502      	str	r5, [sp, #8]
 810c070:	46ab      	mov	fp, r5
 810c072:	784a      	ldrb	r2, [r1, #1]
 810c074:	1c4b      	adds	r3, r1, #1
 810c076:	9303      	str	r3, [sp, #12]
 810c078:	b342      	cbz	r2, 810c0cc <__hexnan+0x88>
 810c07a:	4610      	mov	r0, r2
 810c07c:	9105      	str	r1, [sp, #20]
 810c07e:	9204      	str	r2, [sp, #16]
 810c080:	f7ff fd76 	bl	810bb70 <__hexdig_fun>
 810c084:	2800      	cmp	r0, #0
 810c086:	d14f      	bne.n	810c128 <__hexnan+0xe4>
 810c088:	9a04      	ldr	r2, [sp, #16]
 810c08a:	9905      	ldr	r1, [sp, #20]
 810c08c:	2a20      	cmp	r2, #32
 810c08e:	d818      	bhi.n	810c0c2 <__hexnan+0x7e>
 810c090:	9b02      	ldr	r3, [sp, #8]
 810c092:	459b      	cmp	fp, r3
 810c094:	dd13      	ble.n	810c0be <__hexnan+0x7a>
 810c096:	454c      	cmp	r4, r9
 810c098:	d206      	bcs.n	810c0a8 <__hexnan+0x64>
 810c09a:	2d07      	cmp	r5, #7
 810c09c:	dc04      	bgt.n	810c0a8 <__hexnan+0x64>
 810c09e:	462a      	mov	r2, r5
 810c0a0:	4649      	mov	r1, r9
 810c0a2:	4620      	mov	r0, r4
 810c0a4:	f7ff ffa8 	bl	810bff8 <L_shift>
 810c0a8:	4544      	cmp	r4, r8
 810c0aa:	d950      	bls.n	810c14e <__hexnan+0x10a>
 810c0ac:	2300      	movs	r3, #0
 810c0ae:	f1a4 0904 	sub.w	r9, r4, #4
 810c0b2:	f844 3c04 	str.w	r3, [r4, #-4]
 810c0b6:	f8cd b008 	str.w	fp, [sp, #8]
 810c0ba:	464c      	mov	r4, r9
 810c0bc:	461d      	mov	r5, r3
 810c0be:	9903      	ldr	r1, [sp, #12]
 810c0c0:	e7d7      	b.n	810c072 <__hexnan+0x2e>
 810c0c2:	2a29      	cmp	r2, #41	; 0x29
 810c0c4:	d155      	bne.n	810c172 <__hexnan+0x12e>
 810c0c6:	3102      	adds	r1, #2
 810c0c8:	f8ca 1000 	str.w	r1, [sl]
 810c0cc:	f1bb 0f00 	cmp.w	fp, #0
 810c0d0:	d04f      	beq.n	810c172 <__hexnan+0x12e>
 810c0d2:	454c      	cmp	r4, r9
 810c0d4:	d206      	bcs.n	810c0e4 <__hexnan+0xa0>
 810c0d6:	2d07      	cmp	r5, #7
 810c0d8:	dc04      	bgt.n	810c0e4 <__hexnan+0xa0>
 810c0da:	462a      	mov	r2, r5
 810c0dc:	4649      	mov	r1, r9
 810c0de:	4620      	mov	r0, r4
 810c0e0:	f7ff ff8a 	bl	810bff8 <L_shift>
 810c0e4:	4544      	cmp	r4, r8
 810c0e6:	d934      	bls.n	810c152 <__hexnan+0x10e>
 810c0e8:	f1a8 0204 	sub.w	r2, r8, #4
 810c0ec:	4623      	mov	r3, r4
 810c0ee:	f853 1b04 	ldr.w	r1, [r3], #4
 810c0f2:	f842 1f04 	str.w	r1, [r2, #4]!
 810c0f6:	429f      	cmp	r7, r3
 810c0f8:	d2f9      	bcs.n	810c0ee <__hexnan+0xaa>
 810c0fa:	1b3b      	subs	r3, r7, r4
 810c0fc:	f023 0303 	bic.w	r3, r3, #3
 810c100:	3304      	adds	r3, #4
 810c102:	3e03      	subs	r6, #3
 810c104:	3401      	adds	r4, #1
 810c106:	42a6      	cmp	r6, r4
 810c108:	bf38      	it	cc
 810c10a:	2304      	movcc	r3, #4
 810c10c:	4443      	add	r3, r8
 810c10e:	2200      	movs	r2, #0
 810c110:	f843 2b04 	str.w	r2, [r3], #4
 810c114:	429f      	cmp	r7, r3
 810c116:	d2fb      	bcs.n	810c110 <__hexnan+0xcc>
 810c118:	683b      	ldr	r3, [r7, #0]
 810c11a:	b91b      	cbnz	r3, 810c124 <__hexnan+0xe0>
 810c11c:	4547      	cmp	r7, r8
 810c11e:	d126      	bne.n	810c16e <__hexnan+0x12a>
 810c120:	2301      	movs	r3, #1
 810c122:	603b      	str	r3, [r7, #0]
 810c124:	2005      	movs	r0, #5
 810c126:	e025      	b.n	810c174 <__hexnan+0x130>
 810c128:	3501      	adds	r5, #1
 810c12a:	2d08      	cmp	r5, #8
 810c12c:	f10b 0b01 	add.w	fp, fp, #1
 810c130:	dd06      	ble.n	810c140 <__hexnan+0xfc>
 810c132:	4544      	cmp	r4, r8
 810c134:	d9c3      	bls.n	810c0be <__hexnan+0x7a>
 810c136:	2300      	movs	r3, #0
 810c138:	f844 3c04 	str.w	r3, [r4, #-4]
 810c13c:	2501      	movs	r5, #1
 810c13e:	3c04      	subs	r4, #4
 810c140:	6822      	ldr	r2, [r4, #0]
 810c142:	f000 000f 	and.w	r0, r0, #15
 810c146:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 810c14a:	6020      	str	r0, [r4, #0]
 810c14c:	e7b7      	b.n	810c0be <__hexnan+0x7a>
 810c14e:	2508      	movs	r5, #8
 810c150:	e7b5      	b.n	810c0be <__hexnan+0x7a>
 810c152:	9b01      	ldr	r3, [sp, #4]
 810c154:	2b00      	cmp	r3, #0
 810c156:	d0df      	beq.n	810c118 <__hexnan+0xd4>
 810c158:	f1c3 0320 	rsb	r3, r3, #32
 810c15c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810c160:	40da      	lsrs	r2, r3
 810c162:	f856 3c04 	ldr.w	r3, [r6, #-4]
 810c166:	4013      	ands	r3, r2
 810c168:	f846 3c04 	str.w	r3, [r6, #-4]
 810c16c:	e7d4      	b.n	810c118 <__hexnan+0xd4>
 810c16e:	3f04      	subs	r7, #4
 810c170:	e7d2      	b.n	810c118 <__hexnan+0xd4>
 810c172:	2004      	movs	r0, #4
 810c174:	b007      	add	sp, #28
 810c176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810c17a <__ssputs_r>:
 810c17a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810c17e:	688e      	ldr	r6, [r1, #8]
 810c180:	461f      	mov	r7, r3
 810c182:	42be      	cmp	r6, r7
 810c184:	680b      	ldr	r3, [r1, #0]
 810c186:	4682      	mov	sl, r0
 810c188:	460c      	mov	r4, r1
 810c18a:	4690      	mov	r8, r2
 810c18c:	d82c      	bhi.n	810c1e8 <__ssputs_r+0x6e>
 810c18e:	898a      	ldrh	r2, [r1, #12]
 810c190:	f412 6f90 	tst.w	r2, #1152	; 0x480
 810c194:	d026      	beq.n	810c1e4 <__ssputs_r+0x6a>
 810c196:	6965      	ldr	r5, [r4, #20]
 810c198:	6909      	ldr	r1, [r1, #16]
 810c19a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 810c19e:	eba3 0901 	sub.w	r9, r3, r1
 810c1a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 810c1a6:	1c7b      	adds	r3, r7, #1
 810c1a8:	444b      	add	r3, r9
 810c1aa:	106d      	asrs	r5, r5, #1
 810c1ac:	429d      	cmp	r5, r3
 810c1ae:	bf38      	it	cc
 810c1b0:	461d      	movcc	r5, r3
 810c1b2:	0553      	lsls	r3, r2, #21
 810c1b4:	d527      	bpl.n	810c206 <__ssputs_r+0x8c>
 810c1b6:	4629      	mov	r1, r5
 810c1b8:	f000 f960 	bl	810c47c <_malloc_r>
 810c1bc:	4606      	mov	r6, r0
 810c1be:	b360      	cbz	r0, 810c21a <__ssputs_r+0xa0>
 810c1c0:	6921      	ldr	r1, [r4, #16]
 810c1c2:	464a      	mov	r2, r9
 810c1c4:	f7fe fdce 	bl	810ad64 <memcpy>
 810c1c8:	89a3      	ldrh	r3, [r4, #12]
 810c1ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 810c1ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810c1d2:	81a3      	strh	r3, [r4, #12]
 810c1d4:	6126      	str	r6, [r4, #16]
 810c1d6:	6165      	str	r5, [r4, #20]
 810c1d8:	444e      	add	r6, r9
 810c1da:	eba5 0509 	sub.w	r5, r5, r9
 810c1de:	6026      	str	r6, [r4, #0]
 810c1e0:	60a5      	str	r5, [r4, #8]
 810c1e2:	463e      	mov	r6, r7
 810c1e4:	42be      	cmp	r6, r7
 810c1e6:	d900      	bls.n	810c1ea <__ssputs_r+0x70>
 810c1e8:	463e      	mov	r6, r7
 810c1ea:	6820      	ldr	r0, [r4, #0]
 810c1ec:	4632      	mov	r2, r6
 810c1ee:	4641      	mov	r1, r8
 810c1f0:	f000 ffce 	bl	810d190 <memmove>
 810c1f4:	68a3      	ldr	r3, [r4, #8]
 810c1f6:	1b9b      	subs	r3, r3, r6
 810c1f8:	60a3      	str	r3, [r4, #8]
 810c1fa:	6823      	ldr	r3, [r4, #0]
 810c1fc:	4433      	add	r3, r6
 810c1fe:	6023      	str	r3, [r4, #0]
 810c200:	2000      	movs	r0, #0
 810c202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810c206:	462a      	mov	r2, r5
 810c208:	f000 ff86 	bl	810d118 <_realloc_r>
 810c20c:	4606      	mov	r6, r0
 810c20e:	2800      	cmp	r0, #0
 810c210:	d1e0      	bne.n	810c1d4 <__ssputs_r+0x5a>
 810c212:	6921      	ldr	r1, [r4, #16]
 810c214:	4650      	mov	r0, sl
 810c216:	f001 f849 	bl	810d2ac <_free_r>
 810c21a:	230c      	movs	r3, #12
 810c21c:	f8ca 3000 	str.w	r3, [sl]
 810c220:	89a3      	ldrh	r3, [r4, #12]
 810c222:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810c226:	81a3      	strh	r3, [r4, #12]
 810c228:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810c22c:	e7e9      	b.n	810c202 <__ssputs_r+0x88>
	...

0810c230 <_svfiprintf_r>:
 810c230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c234:	4698      	mov	r8, r3
 810c236:	898b      	ldrh	r3, [r1, #12]
 810c238:	061b      	lsls	r3, r3, #24
 810c23a:	b09d      	sub	sp, #116	; 0x74
 810c23c:	4607      	mov	r7, r0
 810c23e:	460d      	mov	r5, r1
 810c240:	4614      	mov	r4, r2
 810c242:	d50e      	bpl.n	810c262 <_svfiprintf_r+0x32>
 810c244:	690b      	ldr	r3, [r1, #16]
 810c246:	b963      	cbnz	r3, 810c262 <_svfiprintf_r+0x32>
 810c248:	2140      	movs	r1, #64	; 0x40
 810c24a:	f000 f917 	bl	810c47c <_malloc_r>
 810c24e:	6028      	str	r0, [r5, #0]
 810c250:	6128      	str	r0, [r5, #16]
 810c252:	b920      	cbnz	r0, 810c25e <_svfiprintf_r+0x2e>
 810c254:	230c      	movs	r3, #12
 810c256:	603b      	str	r3, [r7, #0]
 810c258:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810c25c:	e0d0      	b.n	810c400 <_svfiprintf_r+0x1d0>
 810c25e:	2340      	movs	r3, #64	; 0x40
 810c260:	616b      	str	r3, [r5, #20]
 810c262:	2300      	movs	r3, #0
 810c264:	9309      	str	r3, [sp, #36]	; 0x24
 810c266:	2320      	movs	r3, #32
 810c268:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810c26c:	f8cd 800c 	str.w	r8, [sp, #12]
 810c270:	2330      	movs	r3, #48	; 0x30
 810c272:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 810c418 <_svfiprintf_r+0x1e8>
 810c276:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810c27a:	f04f 0901 	mov.w	r9, #1
 810c27e:	4623      	mov	r3, r4
 810c280:	469a      	mov	sl, r3
 810c282:	f813 2b01 	ldrb.w	r2, [r3], #1
 810c286:	b10a      	cbz	r2, 810c28c <_svfiprintf_r+0x5c>
 810c288:	2a25      	cmp	r2, #37	; 0x25
 810c28a:	d1f9      	bne.n	810c280 <_svfiprintf_r+0x50>
 810c28c:	ebba 0b04 	subs.w	fp, sl, r4
 810c290:	d00b      	beq.n	810c2aa <_svfiprintf_r+0x7a>
 810c292:	465b      	mov	r3, fp
 810c294:	4622      	mov	r2, r4
 810c296:	4629      	mov	r1, r5
 810c298:	4638      	mov	r0, r7
 810c29a:	f7ff ff6e 	bl	810c17a <__ssputs_r>
 810c29e:	3001      	adds	r0, #1
 810c2a0:	f000 80a9 	beq.w	810c3f6 <_svfiprintf_r+0x1c6>
 810c2a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810c2a6:	445a      	add	r2, fp
 810c2a8:	9209      	str	r2, [sp, #36]	; 0x24
 810c2aa:	f89a 3000 	ldrb.w	r3, [sl]
 810c2ae:	2b00      	cmp	r3, #0
 810c2b0:	f000 80a1 	beq.w	810c3f6 <_svfiprintf_r+0x1c6>
 810c2b4:	2300      	movs	r3, #0
 810c2b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810c2ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810c2be:	f10a 0a01 	add.w	sl, sl, #1
 810c2c2:	9304      	str	r3, [sp, #16]
 810c2c4:	9307      	str	r3, [sp, #28]
 810c2c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810c2ca:	931a      	str	r3, [sp, #104]	; 0x68
 810c2cc:	4654      	mov	r4, sl
 810c2ce:	2205      	movs	r2, #5
 810c2d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 810c2d4:	4850      	ldr	r0, [pc, #320]	; (810c418 <_svfiprintf_r+0x1e8>)
 810c2d6:	f7f4 f803 	bl	81002e0 <memchr>
 810c2da:	9a04      	ldr	r2, [sp, #16]
 810c2dc:	b9d8      	cbnz	r0, 810c316 <_svfiprintf_r+0xe6>
 810c2de:	06d0      	lsls	r0, r2, #27
 810c2e0:	bf44      	itt	mi
 810c2e2:	2320      	movmi	r3, #32
 810c2e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810c2e8:	0711      	lsls	r1, r2, #28
 810c2ea:	bf44      	itt	mi
 810c2ec:	232b      	movmi	r3, #43	; 0x2b
 810c2ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810c2f2:	f89a 3000 	ldrb.w	r3, [sl]
 810c2f6:	2b2a      	cmp	r3, #42	; 0x2a
 810c2f8:	d015      	beq.n	810c326 <_svfiprintf_r+0xf6>
 810c2fa:	9a07      	ldr	r2, [sp, #28]
 810c2fc:	4654      	mov	r4, sl
 810c2fe:	2000      	movs	r0, #0
 810c300:	f04f 0c0a 	mov.w	ip, #10
 810c304:	4621      	mov	r1, r4
 810c306:	f811 3b01 	ldrb.w	r3, [r1], #1
 810c30a:	3b30      	subs	r3, #48	; 0x30
 810c30c:	2b09      	cmp	r3, #9
 810c30e:	d94d      	bls.n	810c3ac <_svfiprintf_r+0x17c>
 810c310:	b1b0      	cbz	r0, 810c340 <_svfiprintf_r+0x110>
 810c312:	9207      	str	r2, [sp, #28]
 810c314:	e014      	b.n	810c340 <_svfiprintf_r+0x110>
 810c316:	eba0 0308 	sub.w	r3, r0, r8
 810c31a:	fa09 f303 	lsl.w	r3, r9, r3
 810c31e:	4313      	orrs	r3, r2
 810c320:	9304      	str	r3, [sp, #16]
 810c322:	46a2      	mov	sl, r4
 810c324:	e7d2      	b.n	810c2cc <_svfiprintf_r+0x9c>
 810c326:	9b03      	ldr	r3, [sp, #12]
 810c328:	1d19      	adds	r1, r3, #4
 810c32a:	681b      	ldr	r3, [r3, #0]
 810c32c:	9103      	str	r1, [sp, #12]
 810c32e:	2b00      	cmp	r3, #0
 810c330:	bfbb      	ittet	lt
 810c332:	425b      	neglt	r3, r3
 810c334:	f042 0202 	orrlt.w	r2, r2, #2
 810c338:	9307      	strge	r3, [sp, #28]
 810c33a:	9307      	strlt	r3, [sp, #28]
 810c33c:	bfb8      	it	lt
 810c33e:	9204      	strlt	r2, [sp, #16]
 810c340:	7823      	ldrb	r3, [r4, #0]
 810c342:	2b2e      	cmp	r3, #46	; 0x2e
 810c344:	d10c      	bne.n	810c360 <_svfiprintf_r+0x130>
 810c346:	7863      	ldrb	r3, [r4, #1]
 810c348:	2b2a      	cmp	r3, #42	; 0x2a
 810c34a:	d134      	bne.n	810c3b6 <_svfiprintf_r+0x186>
 810c34c:	9b03      	ldr	r3, [sp, #12]
 810c34e:	1d1a      	adds	r2, r3, #4
 810c350:	681b      	ldr	r3, [r3, #0]
 810c352:	9203      	str	r2, [sp, #12]
 810c354:	2b00      	cmp	r3, #0
 810c356:	bfb8      	it	lt
 810c358:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 810c35c:	3402      	adds	r4, #2
 810c35e:	9305      	str	r3, [sp, #20]
 810c360:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 810c428 <_svfiprintf_r+0x1f8>
 810c364:	7821      	ldrb	r1, [r4, #0]
 810c366:	2203      	movs	r2, #3
 810c368:	4650      	mov	r0, sl
 810c36a:	f7f3 ffb9 	bl	81002e0 <memchr>
 810c36e:	b138      	cbz	r0, 810c380 <_svfiprintf_r+0x150>
 810c370:	9b04      	ldr	r3, [sp, #16]
 810c372:	eba0 000a 	sub.w	r0, r0, sl
 810c376:	2240      	movs	r2, #64	; 0x40
 810c378:	4082      	lsls	r2, r0
 810c37a:	4313      	orrs	r3, r2
 810c37c:	3401      	adds	r4, #1
 810c37e:	9304      	str	r3, [sp, #16]
 810c380:	f814 1b01 	ldrb.w	r1, [r4], #1
 810c384:	4825      	ldr	r0, [pc, #148]	; (810c41c <_svfiprintf_r+0x1ec>)
 810c386:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810c38a:	2206      	movs	r2, #6
 810c38c:	f7f3 ffa8 	bl	81002e0 <memchr>
 810c390:	2800      	cmp	r0, #0
 810c392:	d038      	beq.n	810c406 <_svfiprintf_r+0x1d6>
 810c394:	4b22      	ldr	r3, [pc, #136]	; (810c420 <_svfiprintf_r+0x1f0>)
 810c396:	bb1b      	cbnz	r3, 810c3e0 <_svfiprintf_r+0x1b0>
 810c398:	9b03      	ldr	r3, [sp, #12]
 810c39a:	3307      	adds	r3, #7
 810c39c:	f023 0307 	bic.w	r3, r3, #7
 810c3a0:	3308      	adds	r3, #8
 810c3a2:	9303      	str	r3, [sp, #12]
 810c3a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810c3a6:	4433      	add	r3, r6
 810c3a8:	9309      	str	r3, [sp, #36]	; 0x24
 810c3aa:	e768      	b.n	810c27e <_svfiprintf_r+0x4e>
 810c3ac:	fb0c 3202 	mla	r2, ip, r2, r3
 810c3b0:	460c      	mov	r4, r1
 810c3b2:	2001      	movs	r0, #1
 810c3b4:	e7a6      	b.n	810c304 <_svfiprintf_r+0xd4>
 810c3b6:	2300      	movs	r3, #0
 810c3b8:	3401      	adds	r4, #1
 810c3ba:	9305      	str	r3, [sp, #20]
 810c3bc:	4619      	mov	r1, r3
 810c3be:	f04f 0c0a 	mov.w	ip, #10
 810c3c2:	4620      	mov	r0, r4
 810c3c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 810c3c8:	3a30      	subs	r2, #48	; 0x30
 810c3ca:	2a09      	cmp	r2, #9
 810c3cc:	d903      	bls.n	810c3d6 <_svfiprintf_r+0x1a6>
 810c3ce:	2b00      	cmp	r3, #0
 810c3d0:	d0c6      	beq.n	810c360 <_svfiprintf_r+0x130>
 810c3d2:	9105      	str	r1, [sp, #20]
 810c3d4:	e7c4      	b.n	810c360 <_svfiprintf_r+0x130>
 810c3d6:	fb0c 2101 	mla	r1, ip, r1, r2
 810c3da:	4604      	mov	r4, r0
 810c3dc:	2301      	movs	r3, #1
 810c3de:	e7f0      	b.n	810c3c2 <_svfiprintf_r+0x192>
 810c3e0:	ab03      	add	r3, sp, #12
 810c3e2:	9300      	str	r3, [sp, #0]
 810c3e4:	462a      	mov	r2, r5
 810c3e6:	4b0f      	ldr	r3, [pc, #60]	; (810c424 <_svfiprintf_r+0x1f4>)
 810c3e8:	a904      	add	r1, sp, #16
 810c3ea:	4638      	mov	r0, r7
 810c3ec:	f7fc fe9c 	bl	8109128 <_printf_float>
 810c3f0:	1c42      	adds	r2, r0, #1
 810c3f2:	4606      	mov	r6, r0
 810c3f4:	d1d6      	bne.n	810c3a4 <_svfiprintf_r+0x174>
 810c3f6:	89ab      	ldrh	r3, [r5, #12]
 810c3f8:	065b      	lsls	r3, r3, #25
 810c3fa:	f53f af2d 	bmi.w	810c258 <_svfiprintf_r+0x28>
 810c3fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 810c400:	b01d      	add	sp, #116	; 0x74
 810c402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c406:	ab03      	add	r3, sp, #12
 810c408:	9300      	str	r3, [sp, #0]
 810c40a:	462a      	mov	r2, r5
 810c40c:	4b05      	ldr	r3, [pc, #20]	; (810c424 <_svfiprintf_r+0x1f4>)
 810c40e:	a904      	add	r1, sp, #16
 810c410:	4638      	mov	r0, r7
 810c412:	f7fd f92d 	bl	8109670 <_printf_i>
 810c416:	e7eb      	b.n	810c3f0 <_svfiprintf_r+0x1c0>
 810c418:	0810eadb 	.word	0x0810eadb
 810c41c:	0810eae5 	.word	0x0810eae5
 810c420:	08109129 	.word	0x08109129
 810c424:	0810c17b 	.word	0x0810c17b
 810c428:	0810eae1 	.word	0x0810eae1

0810c42c <malloc>:
 810c42c:	4b02      	ldr	r3, [pc, #8]	; (810c438 <malloc+0xc>)
 810c42e:	4601      	mov	r1, r0
 810c430:	6818      	ldr	r0, [r3, #0]
 810c432:	f000 b823 	b.w	810c47c <_malloc_r>
 810c436:	bf00      	nop
 810c438:	100001d4 	.word	0x100001d4

0810c43c <sbrk_aligned>:
 810c43c:	b570      	push	{r4, r5, r6, lr}
 810c43e:	4e0e      	ldr	r6, [pc, #56]	; (810c478 <sbrk_aligned+0x3c>)
 810c440:	460c      	mov	r4, r1
 810c442:	6831      	ldr	r1, [r6, #0]
 810c444:	4605      	mov	r5, r0
 810c446:	b911      	cbnz	r1, 810c44e <sbrk_aligned+0x12>
 810c448:	f000 fef0 	bl	810d22c <_sbrk_r>
 810c44c:	6030      	str	r0, [r6, #0]
 810c44e:	4621      	mov	r1, r4
 810c450:	4628      	mov	r0, r5
 810c452:	f000 feeb 	bl	810d22c <_sbrk_r>
 810c456:	1c43      	adds	r3, r0, #1
 810c458:	d00a      	beq.n	810c470 <sbrk_aligned+0x34>
 810c45a:	1cc4      	adds	r4, r0, #3
 810c45c:	f024 0403 	bic.w	r4, r4, #3
 810c460:	42a0      	cmp	r0, r4
 810c462:	d007      	beq.n	810c474 <sbrk_aligned+0x38>
 810c464:	1a21      	subs	r1, r4, r0
 810c466:	4628      	mov	r0, r5
 810c468:	f000 fee0 	bl	810d22c <_sbrk_r>
 810c46c:	3001      	adds	r0, #1
 810c46e:	d101      	bne.n	810c474 <sbrk_aligned+0x38>
 810c470:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 810c474:	4620      	mov	r0, r4
 810c476:	bd70      	pop	{r4, r5, r6, pc}
 810c478:	100004c4 	.word	0x100004c4

0810c47c <_malloc_r>:
 810c47c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810c480:	1ccd      	adds	r5, r1, #3
 810c482:	f025 0503 	bic.w	r5, r5, #3
 810c486:	3508      	adds	r5, #8
 810c488:	2d0c      	cmp	r5, #12
 810c48a:	bf38      	it	cc
 810c48c:	250c      	movcc	r5, #12
 810c48e:	2d00      	cmp	r5, #0
 810c490:	4607      	mov	r7, r0
 810c492:	db01      	blt.n	810c498 <_malloc_r+0x1c>
 810c494:	42a9      	cmp	r1, r5
 810c496:	d905      	bls.n	810c4a4 <_malloc_r+0x28>
 810c498:	230c      	movs	r3, #12
 810c49a:	603b      	str	r3, [r7, #0]
 810c49c:	2600      	movs	r6, #0
 810c49e:	4630      	mov	r0, r6
 810c4a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810c4a4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 810c578 <_malloc_r+0xfc>
 810c4a8:	f000 f928 	bl	810c6fc <__malloc_lock>
 810c4ac:	f8d8 3000 	ldr.w	r3, [r8]
 810c4b0:	461c      	mov	r4, r3
 810c4b2:	bb5c      	cbnz	r4, 810c50c <_malloc_r+0x90>
 810c4b4:	4629      	mov	r1, r5
 810c4b6:	4638      	mov	r0, r7
 810c4b8:	f7ff ffc0 	bl	810c43c <sbrk_aligned>
 810c4bc:	1c43      	adds	r3, r0, #1
 810c4be:	4604      	mov	r4, r0
 810c4c0:	d155      	bne.n	810c56e <_malloc_r+0xf2>
 810c4c2:	f8d8 4000 	ldr.w	r4, [r8]
 810c4c6:	4626      	mov	r6, r4
 810c4c8:	2e00      	cmp	r6, #0
 810c4ca:	d145      	bne.n	810c558 <_malloc_r+0xdc>
 810c4cc:	2c00      	cmp	r4, #0
 810c4ce:	d048      	beq.n	810c562 <_malloc_r+0xe6>
 810c4d0:	6823      	ldr	r3, [r4, #0]
 810c4d2:	4631      	mov	r1, r6
 810c4d4:	4638      	mov	r0, r7
 810c4d6:	eb04 0903 	add.w	r9, r4, r3
 810c4da:	f000 fea7 	bl	810d22c <_sbrk_r>
 810c4de:	4581      	cmp	r9, r0
 810c4e0:	d13f      	bne.n	810c562 <_malloc_r+0xe6>
 810c4e2:	6821      	ldr	r1, [r4, #0]
 810c4e4:	1a6d      	subs	r5, r5, r1
 810c4e6:	4629      	mov	r1, r5
 810c4e8:	4638      	mov	r0, r7
 810c4ea:	f7ff ffa7 	bl	810c43c <sbrk_aligned>
 810c4ee:	3001      	adds	r0, #1
 810c4f0:	d037      	beq.n	810c562 <_malloc_r+0xe6>
 810c4f2:	6823      	ldr	r3, [r4, #0]
 810c4f4:	442b      	add	r3, r5
 810c4f6:	6023      	str	r3, [r4, #0]
 810c4f8:	f8d8 3000 	ldr.w	r3, [r8]
 810c4fc:	2b00      	cmp	r3, #0
 810c4fe:	d038      	beq.n	810c572 <_malloc_r+0xf6>
 810c500:	685a      	ldr	r2, [r3, #4]
 810c502:	42a2      	cmp	r2, r4
 810c504:	d12b      	bne.n	810c55e <_malloc_r+0xe2>
 810c506:	2200      	movs	r2, #0
 810c508:	605a      	str	r2, [r3, #4]
 810c50a:	e00f      	b.n	810c52c <_malloc_r+0xb0>
 810c50c:	6822      	ldr	r2, [r4, #0]
 810c50e:	1b52      	subs	r2, r2, r5
 810c510:	d41f      	bmi.n	810c552 <_malloc_r+0xd6>
 810c512:	2a0b      	cmp	r2, #11
 810c514:	d917      	bls.n	810c546 <_malloc_r+0xca>
 810c516:	1961      	adds	r1, r4, r5
 810c518:	42a3      	cmp	r3, r4
 810c51a:	6025      	str	r5, [r4, #0]
 810c51c:	bf18      	it	ne
 810c51e:	6059      	strne	r1, [r3, #4]
 810c520:	6863      	ldr	r3, [r4, #4]
 810c522:	bf08      	it	eq
 810c524:	f8c8 1000 	streq.w	r1, [r8]
 810c528:	5162      	str	r2, [r4, r5]
 810c52a:	604b      	str	r3, [r1, #4]
 810c52c:	4638      	mov	r0, r7
 810c52e:	f104 060b 	add.w	r6, r4, #11
 810c532:	f000 f8e9 	bl	810c708 <__malloc_unlock>
 810c536:	f026 0607 	bic.w	r6, r6, #7
 810c53a:	1d23      	adds	r3, r4, #4
 810c53c:	1af2      	subs	r2, r6, r3
 810c53e:	d0ae      	beq.n	810c49e <_malloc_r+0x22>
 810c540:	1b9b      	subs	r3, r3, r6
 810c542:	50a3      	str	r3, [r4, r2]
 810c544:	e7ab      	b.n	810c49e <_malloc_r+0x22>
 810c546:	42a3      	cmp	r3, r4
 810c548:	6862      	ldr	r2, [r4, #4]
 810c54a:	d1dd      	bne.n	810c508 <_malloc_r+0x8c>
 810c54c:	f8c8 2000 	str.w	r2, [r8]
 810c550:	e7ec      	b.n	810c52c <_malloc_r+0xb0>
 810c552:	4623      	mov	r3, r4
 810c554:	6864      	ldr	r4, [r4, #4]
 810c556:	e7ac      	b.n	810c4b2 <_malloc_r+0x36>
 810c558:	4634      	mov	r4, r6
 810c55a:	6876      	ldr	r6, [r6, #4]
 810c55c:	e7b4      	b.n	810c4c8 <_malloc_r+0x4c>
 810c55e:	4613      	mov	r3, r2
 810c560:	e7cc      	b.n	810c4fc <_malloc_r+0x80>
 810c562:	230c      	movs	r3, #12
 810c564:	603b      	str	r3, [r7, #0]
 810c566:	4638      	mov	r0, r7
 810c568:	f000 f8ce 	bl	810c708 <__malloc_unlock>
 810c56c:	e797      	b.n	810c49e <_malloc_r+0x22>
 810c56e:	6025      	str	r5, [r4, #0]
 810c570:	e7dc      	b.n	810c52c <_malloc_r+0xb0>
 810c572:	605b      	str	r3, [r3, #4]
 810c574:	deff      	udf	#255	; 0xff
 810c576:	bf00      	nop
 810c578:	100004c0 	.word	0x100004c0

0810c57c <__ascii_mbtowc>:
 810c57c:	b082      	sub	sp, #8
 810c57e:	b901      	cbnz	r1, 810c582 <__ascii_mbtowc+0x6>
 810c580:	a901      	add	r1, sp, #4
 810c582:	b142      	cbz	r2, 810c596 <__ascii_mbtowc+0x1a>
 810c584:	b14b      	cbz	r3, 810c59a <__ascii_mbtowc+0x1e>
 810c586:	7813      	ldrb	r3, [r2, #0]
 810c588:	600b      	str	r3, [r1, #0]
 810c58a:	7812      	ldrb	r2, [r2, #0]
 810c58c:	1e10      	subs	r0, r2, #0
 810c58e:	bf18      	it	ne
 810c590:	2001      	movne	r0, #1
 810c592:	b002      	add	sp, #8
 810c594:	4770      	bx	lr
 810c596:	4610      	mov	r0, r2
 810c598:	e7fb      	b.n	810c592 <__ascii_mbtowc+0x16>
 810c59a:	f06f 0001 	mvn.w	r0, #1
 810c59e:	e7f8      	b.n	810c592 <__ascii_mbtowc+0x16>

0810c5a0 <__sflush_r>:
 810c5a0:	898a      	ldrh	r2, [r1, #12]
 810c5a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810c5a6:	4605      	mov	r5, r0
 810c5a8:	0710      	lsls	r0, r2, #28
 810c5aa:	460c      	mov	r4, r1
 810c5ac:	d458      	bmi.n	810c660 <__sflush_r+0xc0>
 810c5ae:	684b      	ldr	r3, [r1, #4]
 810c5b0:	2b00      	cmp	r3, #0
 810c5b2:	dc05      	bgt.n	810c5c0 <__sflush_r+0x20>
 810c5b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 810c5b6:	2b00      	cmp	r3, #0
 810c5b8:	dc02      	bgt.n	810c5c0 <__sflush_r+0x20>
 810c5ba:	2000      	movs	r0, #0
 810c5bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810c5c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810c5c2:	2e00      	cmp	r6, #0
 810c5c4:	d0f9      	beq.n	810c5ba <__sflush_r+0x1a>
 810c5c6:	2300      	movs	r3, #0
 810c5c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 810c5cc:	682f      	ldr	r7, [r5, #0]
 810c5ce:	6a21      	ldr	r1, [r4, #32]
 810c5d0:	602b      	str	r3, [r5, #0]
 810c5d2:	d032      	beq.n	810c63a <__sflush_r+0x9a>
 810c5d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 810c5d6:	89a3      	ldrh	r3, [r4, #12]
 810c5d8:	075a      	lsls	r2, r3, #29
 810c5da:	d505      	bpl.n	810c5e8 <__sflush_r+0x48>
 810c5dc:	6863      	ldr	r3, [r4, #4]
 810c5de:	1ac0      	subs	r0, r0, r3
 810c5e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 810c5e2:	b10b      	cbz	r3, 810c5e8 <__sflush_r+0x48>
 810c5e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 810c5e6:	1ac0      	subs	r0, r0, r3
 810c5e8:	2300      	movs	r3, #0
 810c5ea:	4602      	mov	r2, r0
 810c5ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810c5ee:	6a21      	ldr	r1, [r4, #32]
 810c5f0:	4628      	mov	r0, r5
 810c5f2:	47b0      	blx	r6
 810c5f4:	1c43      	adds	r3, r0, #1
 810c5f6:	89a3      	ldrh	r3, [r4, #12]
 810c5f8:	d106      	bne.n	810c608 <__sflush_r+0x68>
 810c5fa:	6829      	ldr	r1, [r5, #0]
 810c5fc:	291d      	cmp	r1, #29
 810c5fe:	d82b      	bhi.n	810c658 <__sflush_r+0xb8>
 810c600:	4a29      	ldr	r2, [pc, #164]	; (810c6a8 <__sflush_r+0x108>)
 810c602:	410a      	asrs	r2, r1
 810c604:	07d6      	lsls	r6, r2, #31
 810c606:	d427      	bmi.n	810c658 <__sflush_r+0xb8>
 810c608:	2200      	movs	r2, #0
 810c60a:	6062      	str	r2, [r4, #4]
 810c60c:	04d9      	lsls	r1, r3, #19
 810c60e:	6922      	ldr	r2, [r4, #16]
 810c610:	6022      	str	r2, [r4, #0]
 810c612:	d504      	bpl.n	810c61e <__sflush_r+0x7e>
 810c614:	1c42      	adds	r2, r0, #1
 810c616:	d101      	bne.n	810c61c <__sflush_r+0x7c>
 810c618:	682b      	ldr	r3, [r5, #0]
 810c61a:	b903      	cbnz	r3, 810c61e <__sflush_r+0x7e>
 810c61c:	6560      	str	r0, [r4, #84]	; 0x54
 810c61e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810c620:	602f      	str	r7, [r5, #0]
 810c622:	2900      	cmp	r1, #0
 810c624:	d0c9      	beq.n	810c5ba <__sflush_r+0x1a>
 810c626:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810c62a:	4299      	cmp	r1, r3
 810c62c:	d002      	beq.n	810c634 <__sflush_r+0x94>
 810c62e:	4628      	mov	r0, r5
 810c630:	f000 fe3c 	bl	810d2ac <_free_r>
 810c634:	2000      	movs	r0, #0
 810c636:	6360      	str	r0, [r4, #52]	; 0x34
 810c638:	e7c0      	b.n	810c5bc <__sflush_r+0x1c>
 810c63a:	2301      	movs	r3, #1
 810c63c:	4628      	mov	r0, r5
 810c63e:	47b0      	blx	r6
 810c640:	1c41      	adds	r1, r0, #1
 810c642:	d1c8      	bne.n	810c5d6 <__sflush_r+0x36>
 810c644:	682b      	ldr	r3, [r5, #0]
 810c646:	2b00      	cmp	r3, #0
 810c648:	d0c5      	beq.n	810c5d6 <__sflush_r+0x36>
 810c64a:	2b1d      	cmp	r3, #29
 810c64c:	d001      	beq.n	810c652 <__sflush_r+0xb2>
 810c64e:	2b16      	cmp	r3, #22
 810c650:	d101      	bne.n	810c656 <__sflush_r+0xb6>
 810c652:	602f      	str	r7, [r5, #0]
 810c654:	e7b1      	b.n	810c5ba <__sflush_r+0x1a>
 810c656:	89a3      	ldrh	r3, [r4, #12]
 810c658:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810c65c:	81a3      	strh	r3, [r4, #12]
 810c65e:	e7ad      	b.n	810c5bc <__sflush_r+0x1c>
 810c660:	690f      	ldr	r7, [r1, #16]
 810c662:	2f00      	cmp	r7, #0
 810c664:	d0a9      	beq.n	810c5ba <__sflush_r+0x1a>
 810c666:	0793      	lsls	r3, r2, #30
 810c668:	680e      	ldr	r6, [r1, #0]
 810c66a:	bf08      	it	eq
 810c66c:	694b      	ldreq	r3, [r1, #20]
 810c66e:	600f      	str	r7, [r1, #0]
 810c670:	bf18      	it	ne
 810c672:	2300      	movne	r3, #0
 810c674:	eba6 0807 	sub.w	r8, r6, r7
 810c678:	608b      	str	r3, [r1, #8]
 810c67a:	f1b8 0f00 	cmp.w	r8, #0
 810c67e:	dd9c      	ble.n	810c5ba <__sflush_r+0x1a>
 810c680:	6a21      	ldr	r1, [r4, #32]
 810c682:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 810c684:	4643      	mov	r3, r8
 810c686:	463a      	mov	r2, r7
 810c688:	4628      	mov	r0, r5
 810c68a:	47b0      	blx	r6
 810c68c:	2800      	cmp	r0, #0
 810c68e:	dc06      	bgt.n	810c69e <__sflush_r+0xfe>
 810c690:	89a3      	ldrh	r3, [r4, #12]
 810c692:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810c696:	81a3      	strh	r3, [r4, #12]
 810c698:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810c69c:	e78e      	b.n	810c5bc <__sflush_r+0x1c>
 810c69e:	4407      	add	r7, r0
 810c6a0:	eba8 0800 	sub.w	r8, r8, r0
 810c6a4:	e7e9      	b.n	810c67a <__sflush_r+0xda>
 810c6a6:	bf00      	nop
 810c6a8:	dfbffffe 	.word	0xdfbffffe

0810c6ac <_fflush_r>:
 810c6ac:	b538      	push	{r3, r4, r5, lr}
 810c6ae:	690b      	ldr	r3, [r1, #16]
 810c6b0:	4605      	mov	r5, r0
 810c6b2:	460c      	mov	r4, r1
 810c6b4:	b913      	cbnz	r3, 810c6bc <_fflush_r+0x10>
 810c6b6:	2500      	movs	r5, #0
 810c6b8:	4628      	mov	r0, r5
 810c6ba:	bd38      	pop	{r3, r4, r5, pc}
 810c6bc:	b118      	cbz	r0, 810c6c6 <_fflush_r+0x1a>
 810c6be:	6a03      	ldr	r3, [r0, #32]
 810c6c0:	b90b      	cbnz	r3, 810c6c6 <_fflush_r+0x1a>
 810c6c2:	f7fd fc0d 	bl	8109ee0 <__sinit>
 810c6c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810c6ca:	2b00      	cmp	r3, #0
 810c6cc:	d0f3      	beq.n	810c6b6 <_fflush_r+0xa>
 810c6ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 810c6d0:	07d0      	lsls	r0, r2, #31
 810c6d2:	d404      	bmi.n	810c6de <_fflush_r+0x32>
 810c6d4:	0599      	lsls	r1, r3, #22
 810c6d6:	d402      	bmi.n	810c6de <_fflush_r+0x32>
 810c6d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810c6da:	f7fe fb41 	bl	810ad60 <__retarget_lock_acquire_recursive>
 810c6de:	4628      	mov	r0, r5
 810c6e0:	4621      	mov	r1, r4
 810c6e2:	f7ff ff5d 	bl	810c5a0 <__sflush_r>
 810c6e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810c6e8:	07da      	lsls	r2, r3, #31
 810c6ea:	4605      	mov	r5, r0
 810c6ec:	d4e4      	bmi.n	810c6b8 <_fflush_r+0xc>
 810c6ee:	89a3      	ldrh	r3, [r4, #12]
 810c6f0:	059b      	lsls	r3, r3, #22
 810c6f2:	d4e1      	bmi.n	810c6b8 <_fflush_r+0xc>
 810c6f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810c6f6:	f7fe fb34 	bl	810ad62 <__retarget_lock_release_recursive>
 810c6fa:	e7dd      	b.n	810c6b8 <_fflush_r+0xc>

0810c6fc <__malloc_lock>:
 810c6fc:	4801      	ldr	r0, [pc, #4]	; (810c704 <__malloc_lock+0x8>)
 810c6fe:	f7fe bb2f 	b.w	810ad60 <__retarget_lock_acquire_recursive>
 810c702:	bf00      	nop
 810c704:	100004bc 	.word	0x100004bc

0810c708 <__malloc_unlock>:
 810c708:	4801      	ldr	r0, [pc, #4]	; (810c710 <__malloc_unlock+0x8>)
 810c70a:	f7fe bb2a 	b.w	810ad62 <__retarget_lock_release_recursive>
 810c70e:	bf00      	nop
 810c710:	100004bc 	.word	0x100004bc

0810c714 <_Balloc>:
 810c714:	b570      	push	{r4, r5, r6, lr}
 810c716:	69c6      	ldr	r6, [r0, #28]
 810c718:	4604      	mov	r4, r0
 810c71a:	460d      	mov	r5, r1
 810c71c:	b976      	cbnz	r6, 810c73c <_Balloc+0x28>
 810c71e:	2010      	movs	r0, #16
 810c720:	f7ff fe84 	bl	810c42c <malloc>
 810c724:	4602      	mov	r2, r0
 810c726:	61e0      	str	r0, [r4, #28]
 810c728:	b920      	cbnz	r0, 810c734 <_Balloc+0x20>
 810c72a:	4b18      	ldr	r3, [pc, #96]	; (810c78c <_Balloc+0x78>)
 810c72c:	4818      	ldr	r0, [pc, #96]	; (810c790 <_Balloc+0x7c>)
 810c72e:	216b      	movs	r1, #107	; 0x6b
 810c730:	f7fe fb34 	bl	810ad9c <__assert_func>
 810c734:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810c738:	6006      	str	r6, [r0, #0]
 810c73a:	60c6      	str	r6, [r0, #12]
 810c73c:	69e6      	ldr	r6, [r4, #28]
 810c73e:	68f3      	ldr	r3, [r6, #12]
 810c740:	b183      	cbz	r3, 810c764 <_Balloc+0x50>
 810c742:	69e3      	ldr	r3, [r4, #28]
 810c744:	68db      	ldr	r3, [r3, #12]
 810c746:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 810c74a:	b9b8      	cbnz	r0, 810c77c <_Balloc+0x68>
 810c74c:	2101      	movs	r1, #1
 810c74e:	fa01 f605 	lsl.w	r6, r1, r5
 810c752:	1d72      	adds	r2, r6, #5
 810c754:	0092      	lsls	r2, r2, #2
 810c756:	4620      	mov	r0, r4
 810c758:	f000 fd91 	bl	810d27e <_calloc_r>
 810c75c:	b160      	cbz	r0, 810c778 <_Balloc+0x64>
 810c75e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 810c762:	e00e      	b.n	810c782 <_Balloc+0x6e>
 810c764:	2221      	movs	r2, #33	; 0x21
 810c766:	2104      	movs	r1, #4
 810c768:	4620      	mov	r0, r4
 810c76a:	f000 fd88 	bl	810d27e <_calloc_r>
 810c76e:	69e3      	ldr	r3, [r4, #28]
 810c770:	60f0      	str	r0, [r6, #12]
 810c772:	68db      	ldr	r3, [r3, #12]
 810c774:	2b00      	cmp	r3, #0
 810c776:	d1e4      	bne.n	810c742 <_Balloc+0x2e>
 810c778:	2000      	movs	r0, #0
 810c77a:	bd70      	pop	{r4, r5, r6, pc}
 810c77c:	6802      	ldr	r2, [r0, #0]
 810c77e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 810c782:	2300      	movs	r3, #0
 810c784:	e9c0 3303 	strd	r3, r3, [r0, #12]
 810c788:	e7f7      	b.n	810c77a <_Balloc+0x66>
 810c78a:	bf00      	nop
 810c78c:	0810e7f9 	.word	0x0810e7f9
 810c790:	0810eaec 	.word	0x0810eaec

0810c794 <_Bfree>:
 810c794:	b570      	push	{r4, r5, r6, lr}
 810c796:	69c6      	ldr	r6, [r0, #28]
 810c798:	4605      	mov	r5, r0
 810c79a:	460c      	mov	r4, r1
 810c79c:	b976      	cbnz	r6, 810c7bc <_Bfree+0x28>
 810c79e:	2010      	movs	r0, #16
 810c7a0:	f7ff fe44 	bl	810c42c <malloc>
 810c7a4:	4602      	mov	r2, r0
 810c7a6:	61e8      	str	r0, [r5, #28]
 810c7a8:	b920      	cbnz	r0, 810c7b4 <_Bfree+0x20>
 810c7aa:	4b09      	ldr	r3, [pc, #36]	; (810c7d0 <_Bfree+0x3c>)
 810c7ac:	4809      	ldr	r0, [pc, #36]	; (810c7d4 <_Bfree+0x40>)
 810c7ae:	218f      	movs	r1, #143	; 0x8f
 810c7b0:	f7fe faf4 	bl	810ad9c <__assert_func>
 810c7b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810c7b8:	6006      	str	r6, [r0, #0]
 810c7ba:	60c6      	str	r6, [r0, #12]
 810c7bc:	b13c      	cbz	r4, 810c7ce <_Bfree+0x3a>
 810c7be:	69eb      	ldr	r3, [r5, #28]
 810c7c0:	6862      	ldr	r2, [r4, #4]
 810c7c2:	68db      	ldr	r3, [r3, #12]
 810c7c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 810c7c8:	6021      	str	r1, [r4, #0]
 810c7ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 810c7ce:	bd70      	pop	{r4, r5, r6, pc}
 810c7d0:	0810e7f9 	.word	0x0810e7f9
 810c7d4:	0810eaec 	.word	0x0810eaec

0810c7d8 <__multadd>:
 810c7d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810c7dc:	690d      	ldr	r5, [r1, #16]
 810c7de:	4607      	mov	r7, r0
 810c7e0:	460c      	mov	r4, r1
 810c7e2:	461e      	mov	r6, r3
 810c7e4:	f101 0c14 	add.w	ip, r1, #20
 810c7e8:	2000      	movs	r0, #0
 810c7ea:	f8dc 3000 	ldr.w	r3, [ip]
 810c7ee:	b299      	uxth	r1, r3
 810c7f0:	fb02 6101 	mla	r1, r2, r1, r6
 810c7f4:	0c1e      	lsrs	r6, r3, #16
 810c7f6:	0c0b      	lsrs	r3, r1, #16
 810c7f8:	fb02 3306 	mla	r3, r2, r6, r3
 810c7fc:	b289      	uxth	r1, r1
 810c7fe:	3001      	adds	r0, #1
 810c800:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 810c804:	4285      	cmp	r5, r0
 810c806:	f84c 1b04 	str.w	r1, [ip], #4
 810c80a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 810c80e:	dcec      	bgt.n	810c7ea <__multadd+0x12>
 810c810:	b30e      	cbz	r6, 810c856 <__multadd+0x7e>
 810c812:	68a3      	ldr	r3, [r4, #8]
 810c814:	42ab      	cmp	r3, r5
 810c816:	dc19      	bgt.n	810c84c <__multadd+0x74>
 810c818:	6861      	ldr	r1, [r4, #4]
 810c81a:	4638      	mov	r0, r7
 810c81c:	3101      	adds	r1, #1
 810c81e:	f7ff ff79 	bl	810c714 <_Balloc>
 810c822:	4680      	mov	r8, r0
 810c824:	b928      	cbnz	r0, 810c832 <__multadd+0x5a>
 810c826:	4602      	mov	r2, r0
 810c828:	4b0c      	ldr	r3, [pc, #48]	; (810c85c <__multadd+0x84>)
 810c82a:	480d      	ldr	r0, [pc, #52]	; (810c860 <__multadd+0x88>)
 810c82c:	21ba      	movs	r1, #186	; 0xba
 810c82e:	f7fe fab5 	bl	810ad9c <__assert_func>
 810c832:	6922      	ldr	r2, [r4, #16]
 810c834:	3202      	adds	r2, #2
 810c836:	f104 010c 	add.w	r1, r4, #12
 810c83a:	0092      	lsls	r2, r2, #2
 810c83c:	300c      	adds	r0, #12
 810c83e:	f7fe fa91 	bl	810ad64 <memcpy>
 810c842:	4621      	mov	r1, r4
 810c844:	4638      	mov	r0, r7
 810c846:	f7ff ffa5 	bl	810c794 <_Bfree>
 810c84a:	4644      	mov	r4, r8
 810c84c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 810c850:	3501      	adds	r5, #1
 810c852:	615e      	str	r6, [r3, #20]
 810c854:	6125      	str	r5, [r4, #16]
 810c856:	4620      	mov	r0, r4
 810c858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810c85c:	0810ea6a 	.word	0x0810ea6a
 810c860:	0810eaec 	.word	0x0810eaec

0810c864 <__s2b>:
 810c864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810c868:	460c      	mov	r4, r1
 810c86a:	4615      	mov	r5, r2
 810c86c:	461f      	mov	r7, r3
 810c86e:	2209      	movs	r2, #9
 810c870:	3308      	adds	r3, #8
 810c872:	4606      	mov	r6, r0
 810c874:	fb93 f3f2 	sdiv	r3, r3, r2
 810c878:	2100      	movs	r1, #0
 810c87a:	2201      	movs	r2, #1
 810c87c:	429a      	cmp	r2, r3
 810c87e:	db09      	blt.n	810c894 <__s2b+0x30>
 810c880:	4630      	mov	r0, r6
 810c882:	f7ff ff47 	bl	810c714 <_Balloc>
 810c886:	b940      	cbnz	r0, 810c89a <__s2b+0x36>
 810c888:	4602      	mov	r2, r0
 810c88a:	4b19      	ldr	r3, [pc, #100]	; (810c8f0 <__s2b+0x8c>)
 810c88c:	4819      	ldr	r0, [pc, #100]	; (810c8f4 <__s2b+0x90>)
 810c88e:	21d3      	movs	r1, #211	; 0xd3
 810c890:	f7fe fa84 	bl	810ad9c <__assert_func>
 810c894:	0052      	lsls	r2, r2, #1
 810c896:	3101      	adds	r1, #1
 810c898:	e7f0      	b.n	810c87c <__s2b+0x18>
 810c89a:	9b08      	ldr	r3, [sp, #32]
 810c89c:	6143      	str	r3, [r0, #20]
 810c89e:	2d09      	cmp	r5, #9
 810c8a0:	f04f 0301 	mov.w	r3, #1
 810c8a4:	6103      	str	r3, [r0, #16]
 810c8a6:	dd16      	ble.n	810c8d6 <__s2b+0x72>
 810c8a8:	f104 0909 	add.w	r9, r4, #9
 810c8ac:	46c8      	mov	r8, r9
 810c8ae:	442c      	add	r4, r5
 810c8b0:	f818 3b01 	ldrb.w	r3, [r8], #1
 810c8b4:	4601      	mov	r1, r0
 810c8b6:	3b30      	subs	r3, #48	; 0x30
 810c8b8:	220a      	movs	r2, #10
 810c8ba:	4630      	mov	r0, r6
 810c8bc:	f7ff ff8c 	bl	810c7d8 <__multadd>
 810c8c0:	45a0      	cmp	r8, r4
 810c8c2:	d1f5      	bne.n	810c8b0 <__s2b+0x4c>
 810c8c4:	f1a5 0408 	sub.w	r4, r5, #8
 810c8c8:	444c      	add	r4, r9
 810c8ca:	1b2d      	subs	r5, r5, r4
 810c8cc:	1963      	adds	r3, r4, r5
 810c8ce:	42bb      	cmp	r3, r7
 810c8d0:	db04      	blt.n	810c8dc <__s2b+0x78>
 810c8d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810c8d6:	340a      	adds	r4, #10
 810c8d8:	2509      	movs	r5, #9
 810c8da:	e7f6      	b.n	810c8ca <__s2b+0x66>
 810c8dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 810c8e0:	4601      	mov	r1, r0
 810c8e2:	3b30      	subs	r3, #48	; 0x30
 810c8e4:	220a      	movs	r2, #10
 810c8e6:	4630      	mov	r0, r6
 810c8e8:	f7ff ff76 	bl	810c7d8 <__multadd>
 810c8ec:	e7ee      	b.n	810c8cc <__s2b+0x68>
 810c8ee:	bf00      	nop
 810c8f0:	0810ea6a 	.word	0x0810ea6a
 810c8f4:	0810eaec 	.word	0x0810eaec

0810c8f8 <__hi0bits>:
 810c8f8:	0c03      	lsrs	r3, r0, #16
 810c8fa:	041b      	lsls	r3, r3, #16
 810c8fc:	b9d3      	cbnz	r3, 810c934 <__hi0bits+0x3c>
 810c8fe:	0400      	lsls	r0, r0, #16
 810c900:	2310      	movs	r3, #16
 810c902:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 810c906:	bf04      	itt	eq
 810c908:	0200      	lsleq	r0, r0, #8
 810c90a:	3308      	addeq	r3, #8
 810c90c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 810c910:	bf04      	itt	eq
 810c912:	0100      	lsleq	r0, r0, #4
 810c914:	3304      	addeq	r3, #4
 810c916:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 810c91a:	bf04      	itt	eq
 810c91c:	0080      	lsleq	r0, r0, #2
 810c91e:	3302      	addeq	r3, #2
 810c920:	2800      	cmp	r0, #0
 810c922:	db05      	blt.n	810c930 <__hi0bits+0x38>
 810c924:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 810c928:	f103 0301 	add.w	r3, r3, #1
 810c92c:	bf08      	it	eq
 810c92e:	2320      	moveq	r3, #32
 810c930:	4618      	mov	r0, r3
 810c932:	4770      	bx	lr
 810c934:	2300      	movs	r3, #0
 810c936:	e7e4      	b.n	810c902 <__hi0bits+0xa>

0810c938 <__lo0bits>:
 810c938:	6803      	ldr	r3, [r0, #0]
 810c93a:	f013 0207 	ands.w	r2, r3, #7
 810c93e:	d00c      	beq.n	810c95a <__lo0bits+0x22>
 810c940:	07d9      	lsls	r1, r3, #31
 810c942:	d422      	bmi.n	810c98a <__lo0bits+0x52>
 810c944:	079a      	lsls	r2, r3, #30
 810c946:	bf49      	itett	mi
 810c948:	085b      	lsrmi	r3, r3, #1
 810c94a:	089b      	lsrpl	r3, r3, #2
 810c94c:	6003      	strmi	r3, [r0, #0]
 810c94e:	2201      	movmi	r2, #1
 810c950:	bf5c      	itt	pl
 810c952:	6003      	strpl	r3, [r0, #0]
 810c954:	2202      	movpl	r2, #2
 810c956:	4610      	mov	r0, r2
 810c958:	4770      	bx	lr
 810c95a:	b299      	uxth	r1, r3
 810c95c:	b909      	cbnz	r1, 810c962 <__lo0bits+0x2a>
 810c95e:	0c1b      	lsrs	r3, r3, #16
 810c960:	2210      	movs	r2, #16
 810c962:	b2d9      	uxtb	r1, r3
 810c964:	b909      	cbnz	r1, 810c96a <__lo0bits+0x32>
 810c966:	3208      	adds	r2, #8
 810c968:	0a1b      	lsrs	r3, r3, #8
 810c96a:	0719      	lsls	r1, r3, #28
 810c96c:	bf04      	itt	eq
 810c96e:	091b      	lsreq	r3, r3, #4
 810c970:	3204      	addeq	r2, #4
 810c972:	0799      	lsls	r1, r3, #30
 810c974:	bf04      	itt	eq
 810c976:	089b      	lsreq	r3, r3, #2
 810c978:	3202      	addeq	r2, #2
 810c97a:	07d9      	lsls	r1, r3, #31
 810c97c:	d403      	bmi.n	810c986 <__lo0bits+0x4e>
 810c97e:	085b      	lsrs	r3, r3, #1
 810c980:	f102 0201 	add.w	r2, r2, #1
 810c984:	d003      	beq.n	810c98e <__lo0bits+0x56>
 810c986:	6003      	str	r3, [r0, #0]
 810c988:	e7e5      	b.n	810c956 <__lo0bits+0x1e>
 810c98a:	2200      	movs	r2, #0
 810c98c:	e7e3      	b.n	810c956 <__lo0bits+0x1e>
 810c98e:	2220      	movs	r2, #32
 810c990:	e7e1      	b.n	810c956 <__lo0bits+0x1e>
	...

0810c994 <__i2b>:
 810c994:	b510      	push	{r4, lr}
 810c996:	460c      	mov	r4, r1
 810c998:	2101      	movs	r1, #1
 810c99a:	f7ff febb 	bl	810c714 <_Balloc>
 810c99e:	4602      	mov	r2, r0
 810c9a0:	b928      	cbnz	r0, 810c9ae <__i2b+0x1a>
 810c9a2:	4b05      	ldr	r3, [pc, #20]	; (810c9b8 <__i2b+0x24>)
 810c9a4:	4805      	ldr	r0, [pc, #20]	; (810c9bc <__i2b+0x28>)
 810c9a6:	f240 1145 	movw	r1, #325	; 0x145
 810c9aa:	f7fe f9f7 	bl	810ad9c <__assert_func>
 810c9ae:	2301      	movs	r3, #1
 810c9b0:	6144      	str	r4, [r0, #20]
 810c9b2:	6103      	str	r3, [r0, #16]
 810c9b4:	bd10      	pop	{r4, pc}
 810c9b6:	bf00      	nop
 810c9b8:	0810ea6a 	.word	0x0810ea6a
 810c9bc:	0810eaec 	.word	0x0810eaec

0810c9c0 <__multiply>:
 810c9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c9c4:	4691      	mov	r9, r2
 810c9c6:	690a      	ldr	r2, [r1, #16]
 810c9c8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810c9cc:	429a      	cmp	r2, r3
 810c9ce:	bfb8      	it	lt
 810c9d0:	460b      	movlt	r3, r1
 810c9d2:	460c      	mov	r4, r1
 810c9d4:	bfbc      	itt	lt
 810c9d6:	464c      	movlt	r4, r9
 810c9d8:	4699      	movlt	r9, r3
 810c9da:	6927      	ldr	r7, [r4, #16]
 810c9dc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 810c9e0:	68a3      	ldr	r3, [r4, #8]
 810c9e2:	6861      	ldr	r1, [r4, #4]
 810c9e4:	eb07 060a 	add.w	r6, r7, sl
 810c9e8:	42b3      	cmp	r3, r6
 810c9ea:	b085      	sub	sp, #20
 810c9ec:	bfb8      	it	lt
 810c9ee:	3101      	addlt	r1, #1
 810c9f0:	f7ff fe90 	bl	810c714 <_Balloc>
 810c9f4:	b930      	cbnz	r0, 810ca04 <__multiply+0x44>
 810c9f6:	4602      	mov	r2, r0
 810c9f8:	4b44      	ldr	r3, [pc, #272]	; (810cb0c <__multiply+0x14c>)
 810c9fa:	4845      	ldr	r0, [pc, #276]	; (810cb10 <__multiply+0x150>)
 810c9fc:	f44f 71b1 	mov.w	r1, #354	; 0x162
 810ca00:	f7fe f9cc 	bl	810ad9c <__assert_func>
 810ca04:	f100 0514 	add.w	r5, r0, #20
 810ca08:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 810ca0c:	462b      	mov	r3, r5
 810ca0e:	2200      	movs	r2, #0
 810ca10:	4543      	cmp	r3, r8
 810ca12:	d321      	bcc.n	810ca58 <__multiply+0x98>
 810ca14:	f104 0314 	add.w	r3, r4, #20
 810ca18:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 810ca1c:	f109 0314 	add.w	r3, r9, #20
 810ca20:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 810ca24:	9202      	str	r2, [sp, #8]
 810ca26:	1b3a      	subs	r2, r7, r4
 810ca28:	3a15      	subs	r2, #21
 810ca2a:	f022 0203 	bic.w	r2, r2, #3
 810ca2e:	3204      	adds	r2, #4
 810ca30:	f104 0115 	add.w	r1, r4, #21
 810ca34:	428f      	cmp	r7, r1
 810ca36:	bf38      	it	cc
 810ca38:	2204      	movcc	r2, #4
 810ca3a:	9201      	str	r2, [sp, #4]
 810ca3c:	9a02      	ldr	r2, [sp, #8]
 810ca3e:	9303      	str	r3, [sp, #12]
 810ca40:	429a      	cmp	r2, r3
 810ca42:	d80c      	bhi.n	810ca5e <__multiply+0x9e>
 810ca44:	2e00      	cmp	r6, #0
 810ca46:	dd03      	ble.n	810ca50 <__multiply+0x90>
 810ca48:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 810ca4c:	2b00      	cmp	r3, #0
 810ca4e:	d05b      	beq.n	810cb08 <__multiply+0x148>
 810ca50:	6106      	str	r6, [r0, #16]
 810ca52:	b005      	add	sp, #20
 810ca54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810ca58:	f843 2b04 	str.w	r2, [r3], #4
 810ca5c:	e7d8      	b.n	810ca10 <__multiply+0x50>
 810ca5e:	f8b3 a000 	ldrh.w	sl, [r3]
 810ca62:	f1ba 0f00 	cmp.w	sl, #0
 810ca66:	d024      	beq.n	810cab2 <__multiply+0xf2>
 810ca68:	f104 0e14 	add.w	lr, r4, #20
 810ca6c:	46a9      	mov	r9, r5
 810ca6e:	f04f 0c00 	mov.w	ip, #0
 810ca72:	f85e 2b04 	ldr.w	r2, [lr], #4
 810ca76:	f8d9 1000 	ldr.w	r1, [r9]
 810ca7a:	fa1f fb82 	uxth.w	fp, r2
 810ca7e:	b289      	uxth	r1, r1
 810ca80:	fb0a 110b 	mla	r1, sl, fp, r1
 810ca84:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 810ca88:	f8d9 2000 	ldr.w	r2, [r9]
 810ca8c:	4461      	add	r1, ip
 810ca8e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 810ca92:	fb0a c20b 	mla	r2, sl, fp, ip
 810ca96:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 810ca9a:	b289      	uxth	r1, r1
 810ca9c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 810caa0:	4577      	cmp	r7, lr
 810caa2:	f849 1b04 	str.w	r1, [r9], #4
 810caa6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 810caaa:	d8e2      	bhi.n	810ca72 <__multiply+0xb2>
 810caac:	9a01      	ldr	r2, [sp, #4]
 810caae:	f845 c002 	str.w	ip, [r5, r2]
 810cab2:	9a03      	ldr	r2, [sp, #12]
 810cab4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 810cab8:	3304      	adds	r3, #4
 810caba:	f1b9 0f00 	cmp.w	r9, #0
 810cabe:	d021      	beq.n	810cb04 <__multiply+0x144>
 810cac0:	6829      	ldr	r1, [r5, #0]
 810cac2:	f104 0c14 	add.w	ip, r4, #20
 810cac6:	46ae      	mov	lr, r5
 810cac8:	f04f 0a00 	mov.w	sl, #0
 810cacc:	f8bc b000 	ldrh.w	fp, [ip]
 810cad0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 810cad4:	fb09 220b 	mla	r2, r9, fp, r2
 810cad8:	4452      	add	r2, sl
 810cada:	b289      	uxth	r1, r1
 810cadc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 810cae0:	f84e 1b04 	str.w	r1, [lr], #4
 810cae4:	f85c 1b04 	ldr.w	r1, [ip], #4
 810cae8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 810caec:	f8be 1000 	ldrh.w	r1, [lr]
 810caf0:	fb09 110a 	mla	r1, r9, sl, r1
 810caf4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 810caf8:	4567      	cmp	r7, ip
 810cafa:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 810cafe:	d8e5      	bhi.n	810cacc <__multiply+0x10c>
 810cb00:	9a01      	ldr	r2, [sp, #4]
 810cb02:	50a9      	str	r1, [r5, r2]
 810cb04:	3504      	adds	r5, #4
 810cb06:	e799      	b.n	810ca3c <__multiply+0x7c>
 810cb08:	3e01      	subs	r6, #1
 810cb0a:	e79b      	b.n	810ca44 <__multiply+0x84>
 810cb0c:	0810ea6a 	.word	0x0810ea6a
 810cb10:	0810eaec 	.word	0x0810eaec

0810cb14 <__pow5mult>:
 810cb14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810cb18:	4615      	mov	r5, r2
 810cb1a:	f012 0203 	ands.w	r2, r2, #3
 810cb1e:	4606      	mov	r6, r0
 810cb20:	460f      	mov	r7, r1
 810cb22:	d007      	beq.n	810cb34 <__pow5mult+0x20>
 810cb24:	4c25      	ldr	r4, [pc, #148]	; (810cbbc <__pow5mult+0xa8>)
 810cb26:	3a01      	subs	r2, #1
 810cb28:	2300      	movs	r3, #0
 810cb2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 810cb2e:	f7ff fe53 	bl	810c7d8 <__multadd>
 810cb32:	4607      	mov	r7, r0
 810cb34:	10ad      	asrs	r5, r5, #2
 810cb36:	d03d      	beq.n	810cbb4 <__pow5mult+0xa0>
 810cb38:	69f4      	ldr	r4, [r6, #28]
 810cb3a:	b97c      	cbnz	r4, 810cb5c <__pow5mult+0x48>
 810cb3c:	2010      	movs	r0, #16
 810cb3e:	f7ff fc75 	bl	810c42c <malloc>
 810cb42:	4602      	mov	r2, r0
 810cb44:	61f0      	str	r0, [r6, #28]
 810cb46:	b928      	cbnz	r0, 810cb54 <__pow5mult+0x40>
 810cb48:	4b1d      	ldr	r3, [pc, #116]	; (810cbc0 <__pow5mult+0xac>)
 810cb4a:	481e      	ldr	r0, [pc, #120]	; (810cbc4 <__pow5mult+0xb0>)
 810cb4c:	f240 11b3 	movw	r1, #435	; 0x1b3
 810cb50:	f7fe f924 	bl	810ad9c <__assert_func>
 810cb54:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810cb58:	6004      	str	r4, [r0, #0]
 810cb5a:	60c4      	str	r4, [r0, #12]
 810cb5c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 810cb60:	f8d8 4008 	ldr.w	r4, [r8, #8]
 810cb64:	b94c      	cbnz	r4, 810cb7a <__pow5mult+0x66>
 810cb66:	f240 2171 	movw	r1, #625	; 0x271
 810cb6a:	4630      	mov	r0, r6
 810cb6c:	f7ff ff12 	bl	810c994 <__i2b>
 810cb70:	2300      	movs	r3, #0
 810cb72:	f8c8 0008 	str.w	r0, [r8, #8]
 810cb76:	4604      	mov	r4, r0
 810cb78:	6003      	str	r3, [r0, #0]
 810cb7a:	f04f 0900 	mov.w	r9, #0
 810cb7e:	07eb      	lsls	r3, r5, #31
 810cb80:	d50a      	bpl.n	810cb98 <__pow5mult+0x84>
 810cb82:	4639      	mov	r1, r7
 810cb84:	4622      	mov	r2, r4
 810cb86:	4630      	mov	r0, r6
 810cb88:	f7ff ff1a 	bl	810c9c0 <__multiply>
 810cb8c:	4639      	mov	r1, r7
 810cb8e:	4680      	mov	r8, r0
 810cb90:	4630      	mov	r0, r6
 810cb92:	f7ff fdff 	bl	810c794 <_Bfree>
 810cb96:	4647      	mov	r7, r8
 810cb98:	106d      	asrs	r5, r5, #1
 810cb9a:	d00b      	beq.n	810cbb4 <__pow5mult+0xa0>
 810cb9c:	6820      	ldr	r0, [r4, #0]
 810cb9e:	b938      	cbnz	r0, 810cbb0 <__pow5mult+0x9c>
 810cba0:	4622      	mov	r2, r4
 810cba2:	4621      	mov	r1, r4
 810cba4:	4630      	mov	r0, r6
 810cba6:	f7ff ff0b 	bl	810c9c0 <__multiply>
 810cbaa:	6020      	str	r0, [r4, #0]
 810cbac:	f8c0 9000 	str.w	r9, [r0]
 810cbb0:	4604      	mov	r4, r0
 810cbb2:	e7e4      	b.n	810cb7e <__pow5mult+0x6a>
 810cbb4:	4638      	mov	r0, r7
 810cbb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810cbba:	bf00      	nop
 810cbbc:	0810ec38 	.word	0x0810ec38
 810cbc0:	0810e7f9 	.word	0x0810e7f9
 810cbc4:	0810eaec 	.word	0x0810eaec

0810cbc8 <__lshift>:
 810cbc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810cbcc:	460c      	mov	r4, r1
 810cbce:	6849      	ldr	r1, [r1, #4]
 810cbd0:	6923      	ldr	r3, [r4, #16]
 810cbd2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 810cbd6:	68a3      	ldr	r3, [r4, #8]
 810cbd8:	4607      	mov	r7, r0
 810cbda:	4691      	mov	r9, r2
 810cbdc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 810cbe0:	f108 0601 	add.w	r6, r8, #1
 810cbe4:	42b3      	cmp	r3, r6
 810cbe6:	db0b      	blt.n	810cc00 <__lshift+0x38>
 810cbe8:	4638      	mov	r0, r7
 810cbea:	f7ff fd93 	bl	810c714 <_Balloc>
 810cbee:	4605      	mov	r5, r0
 810cbf0:	b948      	cbnz	r0, 810cc06 <__lshift+0x3e>
 810cbf2:	4602      	mov	r2, r0
 810cbf4:	4b28      	ldr	r3, [pc, #160]	; (810cc98 <__lshift+0xd0>)
 810cbf6:	4829      	ldr	r0, [pc, #164]	; (810cc9c <__lshift+0xd4>)
 810cbf8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 810cbfc:	f7fe f8ce 	bl	810ad9c <__assert_func>
 810cc00:	3101      	adds	r1, #1
 810cc02:	005b      	lsls	r3, r3, #1
 810cc04:	e7ee      	b.n	810cbe4 <__lshift+0x1c>
 810cc06:	2300      	movs	r3, #0
 810cc08:	f100 0114 	add.w	r1, r0, #20
 810cc0c:	f100 0210 	add.w	r2, r0, #16
 810cc10:	4618      	mov	r0, r3
 810cc12:	4553      	cmp	r3, sl
 810cc14:	db33      	blt.n	810cc7e <__lshift+0xb6>
 810cc16:	6920      	ldr	r0, [r4, #16]
 810cc18:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810cc1c:	f104 0314 	add.w	r3, r4, #20
 810cc20:	f019 091f 	ands.w	r9, r9, #31
 810cc24:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 810cc28:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 810cc2c:	d02b      	beq.n	810cc86 <__lshift+0xbe>
 810cc2e:	f1c9 0e20 	rsb	lr, r9, #32
 810cc32:	468a      	mov	sl, r1
 810cc34:	2200      	movs	r2, #0
 810cc36:	6818      	ldr	r0, [r3, #0]
 810cc38:	fa00 f009 	lsl.w	r0, r0, r9
 810cc3c:	4310      	orrs	r0, r2
 810cc3e:	f84a 0b04 	str.w	r0, [sl], #4
 810cc42:	f853 2b04 	ldr.w	r2, [r3], #4
 810cc46:	459c      	cmp	ip, r3
 810cc48:	fa22 f20e 	lsr.w	r2, r2, lr
 810cc4c:	d8f3      	bhi.n	810cc36 <__lshift+0x6e>
 810cc4e:	ebac 0304 	sub.w	r3, ip, r4
 810cc52:	3b15      	subs	r3, #21
 810cc54:	f023 0303 	bic.w	r3, r3, #3
 810cc58:	3304      	adds	r3, #4
 810cc5a:	f104 0015 	add.w	r0, r4, #21
 810cc5e:	4584      	cmp	ip, r0
 810cc60:	bf38      	it	cc
 810cc62:	2304      	movcc	r3, #4
 810cc64:	50ca      	str	r2, [r1, r3]
 810cc66:	b10a      	cbz	r2, 810cc6c <__lshift+0xa4>
 810cc68:	f108 0602 	add.w	r6, r8, #2
 810cc6c:	3e01      	subs	r6, #1
 810cc6e:	4638      	mov	r0, r7
 810cc70:	612e      	str	r6, [r5, #16]
 810cc72:	4621      	mov	r1, r4
 810cc74:	f7ff fd8e 	bl	810c794 <_Bfree>
 810cc78:	4628      	mov	r0, r5
 810cc7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810cc7e:	f842 0f04 	str.w	r0, [r2, #4]!
 810cc82:	3301      	adds	r3, #1
 810cc84:	e7c5      	b.n	810cc12 <__lshift+0x4a>
 810cc86:	3904      	subs	r1, #4
 810cc88:	f853 2b04 	ldr.w	r2, [r3], #4
 810cc8c:	f841 2f04 	str.w	r2, [r1, #4]!
 810cc90:	459c      	cmp	ip, r3
 810cc92:	d8f9      	bhi.n	810cc88 <__lshift+0xc0>
 810cc94:	e7ea      	b.n	810cc6c <__lshift+0xa4>
 810cc96:	bf00      	nop
 810cc98:	0810ea6a 	.word	0x0810ea6a
 810cc9c:	0810eaec 	.word	0x0810eaec

0810cca0 <__mcmp>:
 810cca0:	b530      	push	{r4, r5, lr}
 810cca2:	6902      	ldr	r2, [r0, #16]
 810cca4:	690c      	ldr	r4, [r1, #16]
 810cca6:	1b12      	subs	r2, r2, r4
 810cca8:	d10e      	bne.n	810ccc8 <__mcmp+0x28>
 810ccaa:	f100 0314 	add.w	r3, r0, #20
 810ccae:	3114      	adds	r1, #20
 810ccb0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 810ccb4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 810ccb8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 810ccbc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 810ccc0:	42a5      	cmp	r5, r4
 810ccc2:	d003      	beq.n	810cccc <__mcmp+0x2c>
 810ccc4:	d305      	bcc.n	810ccd2 <__mcmp+0x32>
 810ccc6:	2201      	movs	r2, #1
 810ccc8:	4610      	mov	r0, r2
 810ccca:	bd30      	pop	{r4, r5, pc}
 810cccc:	4283      	cmp	r3, r0
 810ccce:	d3f3      	bcc.n	810ccb8 <__mcmp+0x18>
 810ccd0:	e7fa      	b.n	810ccc8 <__mcmp+0x28>
 810ccd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810ccd6:	e7f7      	b.n	810ccc8 <__mcmp+0x28>

0810ccd8 <__mdiff>:
 810ccd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ccdc:	460c      	mov	r4, r1
 810ccde:	4606      	mov	r6, r0
 810cce0:	4611      	mov	r1, r2
 810cce2:	4620      	mov	r0, r4
 810cce4:	4690      	mov	r8, r2
 810cce6:	f7ff ffdb 	bl	810cca0 <__mcmp>
 810ccea:	1e05      	subs	r5, r0, #0
 810ccec:	d110      	bne.n	810cd10 <__mdiff+0x38>
 810ccee:	4629      	mov	r1, r5
 810ccf0:	4630      	mov	r0, r6
 810ccf2:	f7ff fd0f 	bl	810c714 <_Balloc>
 810ccf6:	b930      	cbnz	r0, 810cd06 <__mdiff+0x2e>
 810ccf8:	4b3a      	ldr	r3, [pc, #232]	; (810cde4 <__mdiff+0x10c>)
 810ccfa:	4602      	mov	r2, r0
 810ccfc:	f240 2137 	movw	r1, #567	; 0x237
 810cd00:	4839      	ldr	r0, [pc, #228]	; (810cde8 <__mdiff+0x110>)
 810cd02:	f7fe f84b 	bl	810ad9c <__assert_func>
 810cd06:	2301      	movs	r3, #1
 810cd08:	e9c0 3504 	strd	r3, r5, [r0, #16]
 810cd0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810cd10:	bfa4      	itt	ge
 810cd12:	4643      	movge	r3, r8
 810cd14:	46a0      	movge	r8, r4
 810cd16:	4630      	mov	r0, r6
 810cd18:	f8d8 1004 	ldr.w	r1, [r8, #4]
 810cd1c:	bfa6      	itte	ge
 810cd1e:	461c      	movge	r4, r3
 810cd20:	2500      	movge	r5, #0
 810cd22:	2501      	movlt	r5, #1
 810cd24:	f7ff fcf6 	bl	810c714 <_Balloc>
 810cd28:	b920      	cbnz	r0, 810cd34 <__mdiff+0x5c>
 810cd2a:	4b2e      	ldr	r3, [pc, #184]	; (810cde4 <__mdiff+0x10c>)
 810cd2c:	4602      	mov	r2, r0
 810cd2e:	f240 2145 	movw	r1, #581	; 0x245
 810cd32:	e7e5      	b.n	810cd00 <__mdiff+0x28>
 810cd34:	f8d8 7010 	ldr.w	r7, [r8, #16]
 810cd38:	6926      	ldr	r6, [r4, #16]
 810cd3a:	60c5      	str	r5, [r0, #12]
 810cd3c:	f104 0914 	add.w	r9, r4, #20
 810cd40:	f108 0514 	add.w	r5, r8, #20
 810cd44:	f100 0e14 	add.w	lr, r0, #20
 810cd48:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 810cd4c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 810cd50:	f108 0210 	add.w	r2, r8, #16
 810cd54:	46f2      	mov	sl, lr
 810cd56:	2100      	movs	r1, #0
 810cd58:	f859 3b04 	ldr.w	r3, [r9], #4
 810cd5c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 810cd60:	fa11 f88b 	uxtah	r8, r1, fp
 810cd64:	b299      	uxth	r1, r3
 810cd66:	0c1b      	lsrs	r3, r3, #16
 810cd68:	eba8 0801 	sub.w	r8, r8, r1
 810cd6c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 810cd70:	eb03 4328 	add.w	r3, r3, r8, asr #16
 810cd74:	fa1f f888 	uxth.w	r8, r8
 810cd78:	1419      	asrs	r1, r3, #16
 810cd7a:	454e      	cmp	r6, r9
 810cd7c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 810cd80:	f84a 3b04 	str.w	r3, [sl], #4
 810cd84:	d8e8      	bhi.n	810cd58 <__mdiff+0x80>
 810cd86:	1b33      	subs	r3, r6, r4
 810cd88:	3b15      	subs	r3, #21
 810cd8a:	f023 0303 	bic.w	r3, r3, #3
 810cd8e:	3304      	adds	r3, #4
 810cd90:	3415      	adds	r4, #21
 810cd92:	42a6      	cmp	r6, r4
 810cd94:	bf38      	it	cc
 810cd96:	2304      	movcc	r3, #4
 810cd98:	441d      	add	r5, r3
 810cd9a:	4473      	add	r3, lr
 810cd9c:	469e      	mov	lr, r3
 810cd9e:	462e      	mov	r6, r5
 810cda0:	4566      	cmp	r6, ip
 810cda2:	d30e      	bcc.n	810cdc2 <__mdiff+0xea>
 810cda4:	f10c 0203 	add.w	r2, ip, #3
 810cda8:	1b52      	subs	r2, r2, r5
 810cdaa:	f022 0203 	bic.w	r2, r2, #3
 810cdae:	3d03      	subs	r5, #3
 810cdb0:	45ac      	cmp	ip, r5
 810cdb2:	bf38      	it	cc
 810cdb4:	2200      	movcc	r2, #0
 810cdb6:	4413      	add	r3, r2
 810cdb8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 810cdbc:	b17a      	cbz	r2, 810cdde <__mdiff+0x106>
 810cdbe:	6107      	str	r7, [r0, #16]
 810cdc0:	e7a4      	b.n	810cd0c <__mdiff+0x34>
 810cdc2:	f856 8b04 	ldr.w	r8, [r6], #4
 810cdc6:	fa11 f288 	uxtah	r2, r1, r8
 810cdca:	1414      	asrs	r4, r2, #16
 810cdcc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 810cdd0:	b292      	uxth	r2, r2
 810cdd2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 810cdd6:	f84e 2b04 	str.w	r2, [lr], #4
 810cdda:	1421      	asrs	r1, r4, #16
 810cddc:	e7e0      	b.n	810cda0 <__mdiff+0xc8>
 810cdde:	3f01      	subs	r7, #1
 810cde0:	e7ea      	b.n	810cdb8 <__mdiff+0xe0>
 810cde2:	bf00      	nop
 810cde4:	0810ea6a 	.word	0x0810ea6a
 810cde8:	0810eaec 	.word	0x0810eaec

0810cdec <__ulp>:
 810cdec:	b082      	sub	sp, #8
 810cdee:	ed8d 0b00 	vstr	d0, [sp]
 810cdf2:	9a01      	ldr	r2, [sp, #4]
 810cdf4:	4b0f      	ldr	r3, [pc, #60]	; (810ce34 <__ulp+0x48>)
 810cdf6:	4013      	ands	r3, r2
 810cdf8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 810cdfc:	2b00      	cmp	r3, #0
 810cdfe:	dc08      	bgt.n	810ce12 <__ulp+0x26>
 810ce00:	425b      	negs	r3, r3
 810ce02:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 810ce06:	ea4f 5223 	mov.w	r2, r3, asr #20
 810ce0a:	da04      	bge.n	810ce16 <__ulp+0x2a>
 810ce0c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 810ce10:	4113      	asrs	r3, r2
 810ce12:	2200      	movs	r2, #0
 810ce14:	e008      	b.n	810ce28 <__ulp+0x3c>
 810ce16:	f1a2 0314 	sub.w	r3, r2, #20
 810ce1a:	2b1e      	cmp	r3, #30
 810ce1c:	bfda      	itte	le
 810ce1e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 810ce22:	40da      	lsrle	r2, r3
 810ce24:	2201      	movgt	r2, #1
 810ce26:	2300      	movs	r3, #0
 810ce28:	4619      	mov	r1, r3
 810ce2a:	4610      	mov	r0, r2
 810ce2c:	ec41 0b10 	vmov	d0, r0, r1
 810ce30:	b002      	add	sp, #8
 810ce32:	4770      	bx	lr
 810ce34:	7ff00000 	.word	0x7ff00000

0810ce38 <__b2d>:
 810ce38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810ce3c:	6906      	ldr	r6, [r0, #16]
 810ce3e:	f100 0814 	add.w	r8, r0, #20
 810ce42:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 810ce46:	1f37      	subs	r7, r6, #4
 810ce48:	f856 2c04 	ldr.w	r2, [r6, #-4]
 810ce4c:	4610      	mov	r0, r2
 810ce4e:	f7ff fd53 	bl	810c8f8 <__hi0bits>
 810ce52:	f1c0 0320 	rsb	r3, r0, #32
 810ce56:	280a      	cmp	r0, #10
 810ce58:	600b      	str	r3, [r1, #0]
 810ce5a:	491b      	ldr	r1, [pc, #108]	; (810cec8 <__b2d+0x90>)
 810ce5c:	dc15      	bgt.n	810ce8a <__b2d+0x52>
 810ce5e:	f1c0 0c0b 	rsb	ip, r0, #11
 810ce62:	fa22 f30c 	lsr.w	r3, r2, ip
 810ce66:	45b8      	cmp	r8, r7
 810ce68:	ea43 0501 	orr.w	r5, r3, r1
 810ce6c:	bf34      	ite	cc
 810ce6e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 810ce72:	2300      	movcs	r3, #0
 810ce74:	3015      	adds	r0, #21
 810ce76:	fa02 f000 	lsl.w	r0, r2, r0
 810ce7a:	fa23 f30c 	lsr.w	r3, r3, ip
 810ce7e:	4303      	orrs	r3, r0
 810ce80:	461c      	mov	r4, r3
 810ce82:	ec45 4b10 	vmov	d0, r4, r5
 810ce86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810ce8a:	45b8      	cmp	r8, r7
 810ce8c:	bf3a      	itte	cc
 810ce8e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 810ce92:	f1a6 0708 	subcc.w	r7, r6, #8
 810ce96:	2300      	movcs	r3, #0
 810ce98:	380b      	subs	r0, #11
 810ce9a:	d012      	beq.n	810cec2 <__b2d+0x8a>
 810ce9c:	f1c0 0120 	rsb	r1, r0, #32
 810cea0:	fa23 f401 	lsr.w	r4, r3, r1
 810cea4:	4082      	lsls	r2, r0
 810cea6:	4322      	orrs	r2, r4
 810cea8:	4547      	cmp	r7, r8
 810ceaa:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 810ceae:	bf8c      	ite	hi
 810ceb0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 810ceb4:	2200      	movls	r2, #0
 810ceb6:	4083      	lsls	r3, r0
 810ceb8:	40ca      	lsrs	r2, r1
 810ceba:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 810cebe:	4313      	orrs	r3, r2
 810cec0:	e7de      	b.n	810ce80 <__b2d+0x48>
 810cec2:	ea42 0501 	orr.w	r5, r2, r1
 810cec6:	e7db      	b.n	810ce80 <__b2d+0x48>
 810cec8:	3ff00000 	.word	0x3ff00000

0810cecc <__d2b>:
 810cecc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 810ced0:	460f      	mov	r7, r1
 810ced2:	2101      	movs	r1, #1
 810ced4:	ec59 8b10 	vmov	r8, r9, d0
 810ced8:	4616      	mov	r6, r2
 810ceda:	f7ff fc1b 	bl	810c714 <_Balloc>
 810cede:	4604      	mov	r4, r0
 810cee0:	b930      	cbnz	r0, 810cef0 <__d2b+0x24>
 810cee2:	4602      	mov	r2, r0
 810cee4:	4b24      	ldr	r3, [pc, #144]	; (810cf78 <__d2b+0xac>)
 810cee6:	4825      	ldr	r0, [pc, #148]	; (810cf7c <__d2b+0xb0>)
 810cee8:	f240 310f 	movw	r1, #783	; 0x30f
 810ceec:	f7fd ff56 	bl	810ad9c <__assert_func>
 810cef0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 810cef4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810cef8:	bb2d      	cbnz	r5, 810cf46 <__d2b+0x7a>
 810cefa:	9301      	str	r3, [sp, #4]
 810cefc:	f1b8 0300 	subs.w	r3, r8, #0
 810cf00:	d026      	beq.n	810cf50 <__d2b+0x84>
 810cf02:	4668      	mov	r0, sp
 810cf04:	9300      	str	r3, [sp, #0]
 810cf06:	f7ff fd17 	bl	810c938 <__lo0bits>
 810cf0a:	e9dd 1200 	ldrd	r1, r2, [sp]
 810cf0e:	b1e8      	cbz	r0, 810cf4c <__d2b+0x80>
 810cf10:	f1c0 0320 	rsb	r3, r0, #32
 810cf14:	fa02 f303 	lsl.w	r3, r2, r3
 810cf18:	430b      	orrs	r3, r1
 810cf1a:	40c2      	lsrs	r2, r0
 810cf1c:	6163      	str	r3, [r4, #20]
 810cf1e:	9201      	str	r2, [sp, #4]
 810cf20:	9b01      	ldr	r3, [sp, #4]
 810cf22:	61a3      	str	r3, [r4, #24]
 810cf24:	2b00      	cmp	r3, #0
 810cf26:	bf14      	ite	ne
 810cf28:	2202      	movne	r2, #2
 810cf2a:	2201      	moveq	r2, #1
 810cf2c:	6122      	str	r2, [r4, #16]
 810cf2e:	b1bd      	cbz	r5, 810cf60 <__d2b+0x94>
 810cf30:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 810cf34:	4405      	add	r5, r0
 810cf36:	603d      	str	r5, [r7, #0]
 810cf38:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 810cf3c:	6030      	str	r0, [r6, #0]
 810cf3e:	4620      	mov	r0, r4
 810cf40:	b003      	add	sp, #12
 810cf42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810cf46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810cf4a:	e7d6      	b.n	810cefa <__d2b+0x2e>
 810cf4c:	6161      	str	r1, [r4, #20]
 810cf4e:	e7e7      	b.n	810cf20 <__d2b+0x54>
 810cf50:	a801      	add	r0, sp, #4
 810cf52:	f7ff fcf1 	bl	810c938 <__lo0bits>
 810cf56:	9b01      	ldr	r3, [sp, #4]
 810cf58:	6163      	str	r3, [r4, #20]
 810cf5a:	3020      	adds	r0, #32
 810cf5c:	2201      	movs	r2, #1
 810cf5e:	e7e5      	b.n	810cf2c <__d2b+0x60>
 810cf60:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 810cf64:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 810cf68:	6038      	str	r0, [r7, #0]
 810cf6a:	6918      	ldr	r0, [r3, #16]
 810cf6c:	f7ff fcc4 	bl	810c8f8 <__hi0bits>
 810cf70:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 810cf74:	e7e2      	b.n	810cf3c <__d2b+0x70>
 810cf76:	bf00      	nop
 810cf78:	0810ea6a 	.word	0x0810ea6a
 810cf7c:	0810eaec 	.word	0x0810eaec

0810cf80 <__ratio>:
 810cf80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810cf84:	4688      	mov	r8, r1
 810cf86:	4669      	mov	r1, sp
 810cf88:	4681      	mov	r9, r0
 810cf8a:	f7ff ff55 	bl	810ce38 <__b2d>
 810cf8e:	a901      	add	r1, sp, #4
 810cf90:	4640      	mov	r0, r8
 810cf92:	ec55 4b10 	vmov	r4, r5, d0
 810cf96:	f7ff ff4f 	bl	810ce38 <__b2d>
 810cf9a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810cf9e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 810cfa2:	eba3 0c02 	sub.w	ip, r3, r2
 810cfa6:	e9dd 3200 	ldrd	r3, r2, [sp]
 810cfaa:	1a9b      	subs	r3, r3, r2
 810cfac:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 810cfb0:	ec51 0b10 	vmov	r0, r1, d0
 810cfb4:	2b00      	cmp	r3, #0
 810cfb6:	bfd6      	itet	le
 810cfb8:	460a      	movle	r2, r1
 810cfba:	462a      	movgt	r2, r5
 810cfbc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 810cfc0:	468b      	mov	fp, r1
 810cfc2:	462f      	mov	r7, r5
 810cfc4:	bfd4      	ite	le
 810cfc6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 810cfca:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 810cfce:	4620      	mov	r0, r4
 810cfd0:	ee10 2a10 	vmov	r2, s0
 810cfd4:	465b      	mov	r3, fp
 810cfd6:	4639      	mov	r1, r7
 810cfd8:	f7f3 fcc0 	bl	810095c <__aeabi_ddiv>
 810cfdc:	ec41 0b10 	vmov	d0, r0, r1
 810cfe0:	b003      	add	sp, #12
 810cfe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810cfe6 <__copybits>:
 810cfe6:	3901      	subs	r1, #1
 810cfe8:	b570      	push	{r4, r5, r6, lr}
 810cfea:	1149      	asrs	r1, r1, #5
 810cfec:	6914      	ldr	r4, [r2, #16]
 810cfee:	3101      	adds	r1, #1
 810cff0:	f102 0314 	add.w	r3, r2, #20
 810cff4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 810cff8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 810cffc:	1f05      	subs	r5, r0, #4
 810cffe:	42a3      	cmp	r3, r4
 810d000:	d30c      	bcc.n	810d01c <__copybits+0x36>
 810d002:	1aa3      	subs	r3, r4, r2
 810d004:	3b11      	subs	r3, #17
 810d006:	f023 0303 	bic.w	r3, r3, #3
 810d00a:	3211      	adds	r2, #17
 810d00c:	42a2      	cmp	r2, r4
 810d00e:	bf88      	it	hi
 810d010:	2300      	movhi	r3, #0
 810d012:	4418      	add	r0, r3
 810d014:	2300      	movs	r3, #0
 810d016:	4288      	cmp	r0, r1
 810d018:	d305      	bcc.n	810d026 <__copybits+0x40>
 810d01a:	bd70      	pop	{r4, r5, r6, pc}
 810d01c:	f853 6b04 	ldr.w	r6, [r3], #4
 810d020:	f845 6f04 	str.w	r6, [r5, #4]!
 810d024:	e7eb      	b.n	810cffe <__copybits+0x18>
 810d026:	f840 3b04 	str.w	r3, [r0], #4
 810d02a:	e7f4      	b.n	810d016 <__copybits+0x30>

0810d02c <__any_on>:
 810d02c:	f100 0214 	add.w	r2, r0, #20
 810d030:	6900      	ldr	r0, [r0, #16]
 810d032:	114b      	asrs	r3, r1, #5
 810d034:	4298      	cmp	r0, r3
 810d036:	b510      	push	{r4, lr}
 810d038:	db11      	blt.n	810d05e <__any_on+0x32>
 810d03a:	dd0a      	ble.n	810d052 <__any_on+0x26>
 810d03c:	f011 011f 	ands.w	r1, r1, #31
 810d040:	d007      	beq.n	810d052 <__any_on+0x26>
 810d042:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 810d046:	fa24 f001 	lsr.w	r0, r4, r1
 810d04a:	fa00 f101 	lsl.w	r1, r0, r1
 810d04e:	428c      	cmp	r4, r1
 810d050:	d10b      	bne.n	810d06a <__any_on+0x3e>
 810d052:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 810d056:	4293      	cmp	r3, r2
 810d058:	d803      	bhi.n	810d062 <__any_on+0x36>
 810d05a:	2000      	movs	r0, #0
 810d05c:	bd10      	pop	{r4, pc}
 810d05e:	4603      	mov	r3, r0
 810d060:	e7f7      	b.n	810d052 <__any_on+0x26>
 810d062:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810d066:	2900      	cmp	r1, #0
 810d068:	d0f5      	beq.n	810d056 <__any_on+0x2a>
 810d06a:	2001      	movs	r0, #1
 810d06c:	e7f6      	b.n	810d05c <__any_on+0x30>

0810d06e <__sread>:
 810d06e:	b510      	push	{r4, lr}
 810d070:	460c      	mov	r4, r1
 810d072:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810d076:	f000 f8c7 	bl	810d208 <_read_r>
 810d07a:	2800      	cmp	r0, #0
 810d07c:	bfab      	itete	ge
 810d07e:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 810d080:	89a3      	ldrhlt	r3, [r4, #12]
 810d082:	181b      	addge	r3, r3, r0
 810d084:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 810d088:	bfac      	ite	ge
 810d08a:	6563      	strge	r3, [r4, #84]	; 0x54
 810d08c:	81a3      	strhlt	r3, [r4, #12]
 810d08e:	bd10      	pop	{r4, pc}

0810d090 <__swrite>:
 810d090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810d094:	461f      	mov	r7, r3
 810d096:	898b      	ldrh	r3, [r1, #12]
 810d098:	05db      	lsls	r3, r3, #23
 810d09a:	4605      	mov	r5, r0
 810d09c:	460c      	mov	r4, r1
 810d09e:	4616      	mov	r6, r2
 810d0a0:	d505      	bpl.n	810d0ae <__swrite+0x1e>
 810d0a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810d0a6:	2302      	movs	r3, #2
 810d0a8:	2200      	movs	r2, #0
 810d0aa:	f000 f89b 	bl	810d1e4 <_lseek_r>
 810d0ae:	89a3      	ldrh	r3, [r4, #12]
 810d0b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810d0b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 810d0b8:	81a3      	strh	r3, [r4, #12]
 810d0ba:	4632      	mov	r2, r6
 810d0bc:	463b      	mov	r3, r7
 810d0be:	4628      	mov	r0, r5
 810d0c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810d0c4:	f000 b8c2 	b.w	810d24c <_write_r>

0810d0c8 <__sseek>:
 810d0c8:	b510      	push	{r4, lr}
 810d0ca:	460c      	mov	r4, r1
 810d0cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810d0d0:	f000 f888 	bl	810d1e4 <_lseek_r>
 810d0d4:	1c43      	adds	r3, r0, #1
 810d0d6:	89a3      	ldrh	r3, [r4, #12]
 810d0d8:	bf15      	itete	ne
 810d0da:	6560      	strne	r0, [r4, #84]	; 0x54
 810d0dc:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 810d0e0:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 810d0e4:	81a3      	strheq	r3, [r4, #12]
 810d0e6:	bf18      	it	ne
 810d0e8:	81a3      	strhne	r3, [r4, #12]
 810d0ea:	bd10      	pop	{r4, pc}

0810d0ec <__sclose>:
 810d0ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810d0f0:	f000 b868 	b.w	810d1c4 <_close_r>

0810d0f4 <fiprintf>:
 810d0f4:	b40e      	push	{r1, r2, r3}
 810d0f6:	b503      	push	{r0, r1, lr}
 810d0f8:	4601      	mov	r1, r0
 810d0fa:	ab03      	add	r3, sp, #12
 810d0fc:	4805      	ldr	r0, [pc, #20]	; (810d114 <fiprintf+0x20>)
 810d0fe:	f853 2b04 	ldr.w	r2, [r3], #4
 810d102:	6800      	ldr	r0, [r0, #0]
 810d104:	9301      	str	r3, [sp, #4]
 810d106:	f000 f947 	bl	810d398 <_vfiprintf_r>
 810d10a:	b002      	add	sp, #8
 810d10c:	f85d eb04 	ldr.w	lr, [sp], #4
 810d110:	b003      	add	sp, #12
 810d112:	4770      	bx	lr
 810d114:	100001d4 	.word	0x100001d4

0810d118 <_realloc_r>:
 810d118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810d11c:	4680      	mov	r8, r0
 810d11e:	4614      	mov	r4, r2
 810d120:	460e      	mov	r6, r1
 810d122:	b921      	cbnz	r1, 810d12e <_realloc_r+0x16>
 810d124:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810d128:	4611      	mov	r1, r2
 810d12a:	f7ff b9a7 	b.w	810c47c <_malloc_r>
 810d12e:	b92a      	cbnz	r2, 810d13c <_realloc_r+0x24>
 810d130:	f000 f8bc 	bl	810d2ac <_free_r>
 810d134:	4625      	mov	r5, r4
 810d136:	4628      	mov	r0, r5
 810d138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810d13c:	f000 fa46 	bl	810d5cc <_malloc_usable_size_r>
 810d140:	4284      	cmp	r4, r0
 810d142:	4607      	mov	r7, r0
 810d144:	d802      	bhi.n	810d14c <_realloc_r+0x34>
 810d146:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 810d14a:	d812      	bhi.n	810d172 <_realloc_r+0x5a>
 810d14c:	4621      	mov	r1, r4
 810d14e:	4640      	mov	r0, r8
 810d150:	f7ff f994 	bl	810c47c <_malloc_r>
 810d154:	4605      	mov	r5, r0
 810d156:	2800      	cmp	r0, #0
 810d158:	d0ed      	beq.n	810d136 <_realloc_r+0x1e>
 810d15a:	42bc      	cmp	r4, r7
 810d15c:	4622      	mov	r2, r4
 810d15e:	4631      	mov	r1, r6
 810d160:	bf28      	it	cs
 810d162:	463a      	movcs	r2, r7
 810d164:	f7fd fdfe 	bl	810ad64 <memcpy>
 810d168:	4631      	mov	r1, r6
 810d16a:	4640      	mov	r0, r8
 810d16c:	f000 f89e 	bl	810d2ac <_free_r>
 810d170:	e7e1      	b.n	810d136 <_realloc_r+0x1e>
 810d172:	4635      	mov	r5, r6
 810d174:	e7df      	b.n	810d136 <_realloc_r+0x1e>

0810d176 <__ascii_wctomb>:
 810d176:	b149      	cbz	r1, 810d18c <__ascii_wctomb+0x16>
 810d178:	2aff      	cmp	r2, #255	; 0xff
 810d17a:	bf85      	ittet	hi
 810d17c:	238a      	movhi	r3, #138	; 0x8a
 810d17e:	6003      	strhi	r3, [r0, #0]
 810d180:	700a      	strbls	r2, [r1, #0]
 810d182:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 810d186:	bf98      	it	ls
 810d188:	2001      	movls	r0, #1
 810d18a:	4770      	bx	lr
 810d18c:	4608      	mov	r0, r1
 810d18e:	4770      	bx	lr

0810d190 <memmove>:
 810d190:	4288      	cmp	r0, r1
 810d192:	b510      	push	{r4, lr}
 810d194:	eb01 0402 	add.w	r4, r1, r2
 810d198:	d902      	bls.n	810d1a0 <memmove+0x10>
 810d19a:	4284      	cmp	r4, r0
 810d19c:	4623      	mov	r3, r4
 810d19e:	d807      	bhi.n	810d1b0 <memmove+0x20>
 810d1a0:	1e43      	subs	r3, r0, #1
 810d1a2:	42a1      	cmp	r1, r4
 810d1a4:	d008      	beq.n	810d1b8 <memmove+0x28>
 810d1a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 810d1aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 810d1ae:	e7f8      	b.n	810d1a2 <memmove+0x12>
 810d1b0:	4402      	add	r2, r0
 810d1b2:	4601      	mov	r1, r0
 810d1b4:	428a      	cmp	r2, r1
 810d1b6:	d100      	bne.n	810d1ba <memmove+0x2a>
 810d1b8:	bd10      	pop	{r4, pc}
 810d1ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810d1be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810d1c2:	e7f7      	b.n	810d1b4 <memmove+0x24>

0810d1c4 <_close_r>:
 810d1c4:	b538      	push	{r3, r4, r5, lr}
 810d1c6:	4d06      	ldr	r5, [pc, #24]	; (810d1e0 <_close_r+0x1c>)
 810d1c8:	2300      	movs	r3, #0
 810d1ca:	4604      	mov	r4, r0
 810d1cc:	4608      	mov	r0, r1
 810d1ce:	602b      	str	r3, [r5, #0]
 810d1d0:	f7f5 f811 	bl	81021f6 <_close>
 810d1d4:	1c43      	adds	r3, r0, #1
 810d1d6:	d102      	bne.n	810d1de <_close_r+0x1a>
 810d1d8:	682b      	ldr	r3, [r5, #0]
 810d1da:	b103      	cbz	r3, 810d1de <_close_r+0x1a>
 810d1dc:	6023      	str	r3, [r4, #0]
 810d1de:	bd38      	pop	{r3, r4, r5, pc}
 810d1e0:	100004c8 	.word	0x100004c8

0810d1e4 <_lseek_r>:
 810d1e4:	b538      	push	{r3, r4, r5, lr}
 810d1e6:	4d07      	ldr	r5, [pc, #28]	; (810d204 <_lseek_r+0x20>)
 810d1e8:	4604      	mov	r4, r0
 810d1ea:	4608      	mov	r0, r1
 810d1ec:	4611      	mov	r1, r2
 810d1ee:	2200      	movs	r2, #0
 810d1f0:	602a      	str	r2, [r5, #0]
 810d1f2:	461a      	mov	r2, r3
 810d1f4:	f7f5 f826 	bl	8102244 <_lseek>
 810d1f8:	1c43      	adds	r3, r0, #1
 810d1fa:	d102      	bne.n	810d202 <_lseek_r+0x1e>
 810d1fc:	682b      	ldr	r3, [r5, #0]
 810d1fe:	b103      	cbz	r3, 810d202 <_lseek_r+0x1e>
 810d200:	6023      	str	r3, [r4, #0]
 810d202:	bd38      	pop	{r3, r4, r5, pc}
 810d204:	100004c8 	.word	0x100004c8

0810d208 <_read_r>:
 810d208:	b538      	push	{r3, r4, r5, lr}
 810d20a:	4d07      	ldr	r5, [pc, #28]	; (810d228 <_read_r+0x20>)
 810d20c:	4604      	mov	r4, r0
 810d20e:	4608      	mov	r0, r1
 810d210:	4611      	mov	r1, r2
 810d212:	2200      	movs	r2, #0
 810d214:	602a      	str	r2, [r5, #0]
 810d216:	461a      	mov	r2, r3
 810d218:	f7f4 ffb2 	bl	8102180 <_read>
 810d21c:	1c43      	adds	r3, r0, #1
 810d21e:	d102      	bne.n	810d226 <_read_r+0x1e>
 810d220:	682b      	ldr	r3, [r5, #0]
 810d222:	b103      	cbz	r3, 810d226 <_read_r+0x1e>
 810d224:	6023      	str	r3, [r4, #0]
 810d226:	bd38      	pop	{r3, r4, r5, pc}
 810d228:	100004c8 	.word	0x100004c8

0810d22c <_sbrk_r>:
 810d22c:	b538      	push	{r3, r4, r5, lr}
 810d22e:	4d06      	ldr	r5, [pc, #24]	; (810d248 <_sbrk_r+0x1c>)
 810d230:	2300      	movs	r3, #0
 810d232:	4604      	mov	r4, r0
 810d234:	4608      	mov	r0, r1
 810d236:	602b      	str	r3, [r5, #0]
 810d238:	f7f5 f812 	bl	8102260 <_sbrk>
 810d23c:	1c43      	adds	r3, r0, #1
 810d23e:	d102      	bne.n	810d246 <_sbrk_r+0x1a>
 810d240:	682b      	ldr	r3, [r5, #0]
 810d242:	b103      	cbz	r3, 810d246 <_sbrk_r+0x1a>
 810d244:	6023      	str	r3, [r4, #0]
 810d246:	bd38      	pop	{r3, r4, r5, pc}
 810d248:	100004c8 	.word	0x100004c8

0810d24c <_write_r>:
 810d24c:	b538      	push	{r3, r4, r5, lr}
 810d24e:	4d07      	ldr	r5, [pc, #28]	; (810d26c <_write_r+0x20>)
 810d250:	4604      	mov	r4, r0
 810d252:	4608      	mov	r0, r1
 810d254:	4611      	mov	r1, r2
 810d256:	2200      	movs	r2, #0
 810d258:	602a      	str	r2, [r5, #0]
 810d25a:	461a      	mov	r2, r3
 810d25c:	f7f4 ffaf 	bl	81021be <_write>
 810d260:	1c43      	adds	r3, r0, #1
 810d262:	d102      	bne.n	810d26a <_write_r+0x1e>
 810d264:	682b      	ldr	r3, [r5, #0]
 810d266:	b103      	cbz	r3, 810d26a <_write_r+0x1e>
 810d268:	6023      	str	r3, [r4, #0]
 810d26a:	bd38      	pop	{r3, r4, r5, pc}
 810d26c:	100004c8 	.word	0x100004c8

0810d270 <abort>:
 810d270:	b508      	push	{r3, lr}
 810d272:	2006      	movs	r0, #6
 810d274:	f000 faf4 	bl	810d860 <raise>
 810d278:	2001      	movs	r0, #1
 810d27a:	f7f4 ff77 	bl	810216c <_exit>

0810d27e <_calloc_r>:
 810d27e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810d280:	fba1 2402 	umull	r2, r4, r1, r2
 810d284:	b94c      	cbnz	r4, 810d29a <_calloc_r+0x1c>
 810d286:	4611      	mov	r1, r2
 810d288:	9201      	str	r2, [sp, #4]
 810d28a:	f7ff f8f7 	bl	810c47c <_malloc_r>
 810d28e:	9a01      	ldr	r2, [sp, #4]
 810d290:	4605      	mov	r5, r0
 810d292:	b930      	cbnz	r0, 810d2a2 <_calloc_r+0x24>
 810d294:	4628      	mov	r0, r5
 810d296:	b003      	add	sp, #12
 810d298:	bd30      	pop	{r4, r5, pc}
 810d29a:	220c      	movs	r2, #12
 810d29c:	6002      	str	r2, [r0, #0]
 810d29e:	2500      	movs	r5, #0
 810d2a0:	e7f8      	b.n	810d294 <_calloc_r+0x16>
 810d2a2:	4621      	mov	r1, r4
 810d2a4:	f7fd fcfa 	bl	810ac9c <memset>
 810d2a8:	e7f4      	b.n	810d294 <_calloc_r+0x16>
	...

0810d2ac <_free_r>:
 810d2ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810d2ae:	2900      	cmp	r1, #0
 810d2b0:	d044      	beq.n	810d33c <_free_r+0x90>
 810d2b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810d2b6:	9001      	str	r0, [sp, #4]
 810d2b8:	2b00      	cmp	r3, #0
 810d2ba:	f1a1 0404 	sub.w	r4, r1, #4
 810d2be:	bfb8      	it	lt
 810d2c0:	18e4      	addlt	r4, r4, r3
 810d2c2:	f7ff fa1b 	bl	810c6fc <__malloc_lock>
 810d2c6:	4a1e      	ldr	r2, [pc, #120]	; (810d340 <_free_r+0x94>)
 810d2c8:	9801      	ldr	r0, [sp, #4]
 810d2ca:	6813      	ldr	r3, [r2, #0]
 810d2cc:	b933      	cbnz	r3, 810d2dc <_free_r+0x30>
 810d2ce:	6063      	str	r3, [r4, #4]
 810d2d0:	6014      	str	r4, [r2, #0]
 810d2d2:	b003      	add	sp, #12
 810d2d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 810d2d8:	f7ff ba16 	b.w	810c708 <__malloc_unlock>
 810d2dc:	42a3      	cmp	r3, r4
 810d2de:	d908      	bls.n	810d2f2 <_free_r+0x46>
 810d2e0:	6825      	ldr	r5, [r4, #0]
 810d2e2:	1961      	adds	r1, r4, r5
 810d2e4:	428b      	cmp	r3, r1
 810d2e6:	bf01      	itttt	eq
 810d2e8:	6819      	ldreq	r1, [r3, #0]
 810d2ea:	685b      	ldreq	r3, [r3, #4]
 810d2ec:	1949      	addeq	r1, r1, r5
 810d2ee:	6021      	streq	r1, [r4, #0]
 810d2f0:	e7ed      	b.n	810d2ce <_free_r+0x22>
 810d2f2:	461a      	mov	r2, r3
 810d2f4:	685b      	ldr	r3, [r3, #4]
 810d2f6:	b10b      	cbz	r3, 810d2fc <_free_r+0x50>
 810d2f8:	42a3      	cmp	r3, r4
 810d2fa:	d9fa      	bls.n	810d2f2 <_free_r+0x46>
 810d2fc:	6811      	ldr	r1, [r2, #0]
 810d2fe:	1855      	adds	r5, r2, r1
 810d300:	42a5      	cmp	r5, r4
 810d302:	d10b      	bne.n	810d31c <_free_r+0x70>
 810d304:	6824      	ldr	r4, [r4, #0]
 810d306:	4421      	add	r1, r4
 810d308:	1854      	adds	r4, r2, r1
 810d30a:	42a3      	cmp	r3, r4
 810d30c:	6011      	str	r1, [r2, #0]
 810d30e:	d1e0      	bne.n	810d2d2 <_free_r+0x26>
 810d310:	681c      	ldr	r4, [r3, #0]
 810d312:	685b      	ldr	r3, [r3, #4]
 810d314:	6053      	str	r3, [r2, #4]
 810d316:	440c      	add	r4, r1
 810d318:	6014      	str	r4, [r2, #0]
 810d31a:	e7da      	b.n	810d2d2 <_free_r+0x26>
 810d31c:	d902      	bls.n	810d324 <_free_r+0x78>
 810d31e:	230c      	movs	r3, #12
 810d320:	6003      	str	r3, [r0, #0]
 810d322:	e7d6      	b.n	810d2d2 <_free_r+0x26>
 810d324:	6825      	ldr	r5, [r4, #0]
 810d326:	1961      	adds	r1, r4, r5
 810d328:	428b      	cmp	r3, r1
 810d32a:	bf04      	itt	eq
 810d32c:	6819      	ldreq	r1, [r3, #0]
 810d32e:	685b      	ldreq	r3, [r3, #4]
 810d330:	6063      	str	r3, [r4, #4]
 810d332:	bf04      	itt	eq
 810d334:	1949      	addeq	r1, r1, r5
 810d336:	6021      	streq	r1, [r4, #0]
 810d338:	6054      	str	r4, [r2, #4]
 810d33a:	e7ca      	b.n	810d2d2 <_free_r+0x26>
 810d33c:	b003      	add	sp, #12
 810d33e:	bd30      	pop	{r4, r5, pc}
 810d340:	100004c0 	.word	0x100004c0

0810d344 <__sfputc_r>:
 810d344:	6893      	ldr	r3, [r2, #8]
 810d346:	3b01      	subs	r3, #1
 810d348:	2b00      	cmp	r3, #0
 810d34a:	b410      	push	{r4}
 810d34c:	6093      	str	r3, [r2, #8]
 810d34e:	da08      	bge.n	810d362 <__sfputc_r+0x1e>
 810d350:	6994      	ldr	r4, [r2, #24]
 810d352:	42a3      	cmp	r3, r4
 810d354:	db01      	blt.n	810d35a <__sfputc_r+0x16>
 810d356:	290a      	cmp	r1, #10
 810d358:	d103      	bne.n	810d362 <__sfputc_r+0x1e>
 810d35a:	f85d 4b04 	ldr.w	r4, [sp], #4
 810d35e:	f000 b93d 	b.w	810d5dc <__swbuf_r>
 810d362:	6813      	ldr	r3, [r2, #0]
 810d364:	1c58      	adds	r0, r3, #1
 810d366:	6010      	str	r0, [r2, #0]
 810d368:	7019      	strb	r1, [r3, #0]
 810d36a:	4608      	mov	r0, r1
 810d36c:	f85d 4b04 	ldr.w	r4, [sp], #4
 810d370:	4770      	bx	lr

0810d372 <__sfputs_r>:
 810d372:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810d374:	4606      	mov	r6, r0
 810d376:	460f      	mov	r7, r1
 810d378:	4614      	mov	r4, r2
 810d37a:	18d5      	adds	r5, r2, r3
 810d37c:	42ac      	cmp	r4, r5
 810d37e:	d101      	bne.n	810d384 <__sfputs_r+0x12>
 810d380:	2000      	movs	r0, #0
 810d382:	e007      	b.n	810d394 <__sfputs_r+0x22>
 810d384:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d388:	463a      	mov	r2, r7
 810d38a:	4630      	mov	r0, r6
 810d38c:	f7ff ffda 	bl	810d344 <__sfputc_r>
 810d390:	1c43      	adds	r3, r0, #1
 810d392:	d1f3      	bne.n	810d37c <__sfputs_r+0xa>
 810d394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0810d398 <_vfiprintf_r>:
 810d398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d39c:	460d      	mov	r5, r1
 810d39e:	b09d      	sub	sp, #116	; 0x74
 810d3a0:	4614      	mov	r4, r2
 810d3a2:	4698      	mov	r8, r3
 810d3a4:	4606      	mov	r6, r0
 810d3a6:	b118      	cbz	r0, 810d3b0 <_vfiprintf_r+0x18>
 810d3a8:	6a03      	ldr	r3, [r0, #32]
 810d3aa:	b90b      	cbnz	r3, 810d3b0 <_vfiprintf_r+0x18>
 810d3ac:	f7fc fd98 	bl	8109ee0 <__sinit>
 810d3b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810d3b2:	07d9      	lsls	r1, r3, #31
 810d3b4:	d405      	bmi.n	810d3c2 <_vfiprintf_r+0x2a>
 810d3b6:	89ab      	ldrh	r3, [r5, #12]
 810d3b8:	059a      	lsls	r2, r3, #22
 810d3ba:	d402      	bmi.n	810d3c2 <_vfiprintf_r+0x2a>
 810d3bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810d3be:	f7fd fccf 	bl	810ad60 <__retarget_lock_acquire_recursive>
 810d3c2:	89ab      	ldrh	r3, [r5, #12]
 810d3c4:	071b      	lsls	r3, r3, #28
 810d3c6:	d501      	bpl.n	810d3cc <_vfiprintf_r+0x34>
 810d3c8:	692b      	ldr	r3, [r5, #16]
 810d3ca:	b99b      	cbnz	r3, 810d3f4 <_vfiprintf_r+0x5c>
 810d3cc:	4629      	mov	r1, r5
 810d3ce:	4630      	mov	r0, r6
 810d3d0:	f000 f942 	bl	810d658 <__swsetup_r>
 810d3d4:	b170      	cbz	r0, 810d3f4 <_vfiprintf_r+0x5c>
 810d3d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810d3d8:	07dc      	lsls	r4, r3, #31
 810d3da:	d504      	bpl.n	810d3e6 <_vfiprintf_r+0x4e>
 810d3dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810d3e0:	b01d      	add	sp, #116	; 0x74
 810d3e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810d3e6:	89ab      	ldrh	r3, [r5, #12]
 810d3e8:	0598      	lsls	r0, r3, #22
 810d3ea:	d4f7      	bmi.n	810d3dc <_vfiprintf_r+0x44>
 810d3ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810d3ee:	f7fd fcb8 	bl	810ad62 <__retarget_lock_release_recursive>
 810d3f2:	e7f3      	b.n	810d3dc <_vfiprintf_r+0x44>
 810d3f4:	2300      	movs	r3, #0
 810d3f6:	9309      	str	r3, [sp, #36]	; 0x24
 810d3f8:	2320      	movs	r3, #32
 810d3fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810d3fe:	f8cd 800c 	str.w	r8, [sp, #12]
 810d402:	2330      	movs	r3, #48	; 0x30
 810d404:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 810d5b8 <_vfiprintf_r+0x220>
 810d408:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810d40c:	f04f 0901 	mov.w	r9, #1
 810d410:	4623      	mov	r3, r4
 810d412:	469a      	mov	sl, r3
 810d414:	f813 2b01 	ldrb.w	r2, [r3], #1
 810d418:	b10a      	cbz	r2, 810d41e <_vfiprintf_r+0x86>
 810d41a:	2a25      	cmp	r2, #37	; 0x25
 810d41c:	d1f9      	bne.n	810d412 <_vfiprintf_r+0x7a>
 810d41e:	ebba 0b04 	subs.w	fp, sl, r4
 810d422:	d00b      	beq.n	810d43c <_vfiprintf_r+0xa4>
 810d424:	465b      	mov	r3, fp
 810d426:	4622      	mov	r2, r4
 810d428:	4629      	mov	r1, r5
 810d42a:	4630      	mov	r0, r6
 810d42c:	f7ff ffa1 	bl	810d372 <__sfputs_r>
 810d430:	3001      	adds	r0, #1
 810d432:	f000 80a9 	beq.w	810d588 <_vfiprintf_r+0x1f0>
 810d436:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810d438:	445a      	add	r2, fp
 810d43a:	9209      	str	r2, [sp, #36]	; 0x24
 810d43c:	f89a 3000 	ldrb.w	r3, [sl]
 810d440:	2b00      	cmp	r3, #0
 810d442:	f000 80a1 	beq.w	810d588 <_vfiprintf_r+0x1f0>
 810d446:	2300      	movs	r3, #0
 810d448:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810d44c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810d450:	f10a 0a01 	add.w	sl, sl, #1
 810d454:	9304      	str	r3, [sp, #16]
 810d456:	9307      	str	r3, [sp, #28]
 810d458:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810d45c:	931a      	str	r3, [sp, #104]	; 0x68
 810d45e:	4654      	mov	r4, sl
 810d460:	2205      	movs	r2, #5
 810d462:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d466:	4854      	ldr	r0, [pc, #336]	; (810d5b8 <_vfiprintf_r+0x220>)
 810d468:	f7f2 ff3a 	bl	81002e0 <memchr>
 810d46c:	9a04      	ldr	r2, [sp, #16]
 810d46e:	b9d8      	cbnz	r0, 810d4a8 <_vfiprintf_r+0x110>
 810d470:	06d1      	lsls	r1, r2, #27
 810d472:	bf44      	itt	mi
 810d474:	2320      	movmi	r3, #32
 810d476:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810d47a:	0713      	lsls	r3, r2, #28
 810d47c:	bf44      	itt	mi
 810d47e:	232b      	movmi	r3, #43	; 0x2b
 810d480:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810d484:	f89a 3000 	ldrb.w	r3, [sl]
 810d488:	2b2a      	cmp	r3, #42	; 0x2a
 810d48a:	d015      	beq.n	810d4b8 <_vfiprintf_r+0x120>
 810d48c:	9a07      	ldr	r2, [sp, #28]
 810d48e:	4654      	mov	r4, sl
 810d490:	2000      	movs	r0, #0
 810d492:	f04f 0c0a 	mov.w	ip, #10
 810d496:	4621      	mov	r1, r4
 810d498:	f811 3b01 	ldrb.w	r3, [r1], #1
 810d49c:	3b30      	subs	r3, #48	; 0x30
 810d49e:	2b09      	cmp	r3, #9
 810d4a0:	d94d      	bls.n	810d53e <_vfiprintf_r+0x1a6>
 810d4a2:	b1b0      	cbz	r0, 810d4d2 <_vfiprintf_r+0x13a>
 810d4a4:	9207      	str	r2, [sp, #28]
 810d4a6:	e014      	b.n	810d4d2 <_vfiprintf_r+0x13a>
 810d4a8:	eba0 0308 	sub.w	r3, r0, r8
 810d4ac:	fa09 f303 	lsl.w	r3, r9, r3
 810d4b0:	4313      	orrs	r3, r2
 810d4b2:	9304      	str	r3, [sp, #16]
 810d4b4:	46a2      	mov	sl, r4
 810d4b6:	e7d2      	b.n	810d45e <_vfiprintf_r+0xc6>
 810d4b8:	9b03      	ldr	r3, [sp, #12]
 810d4ba:	1d19      	adds	r1, r3, #4
 810d4bc:	681b      	ldr	r3, [r3, #0]
 810d4be:	9103      	str	r1, [sp, #12]
 810d4c0:	2b00      	cmp	r3, #0
 810d4c2:	bfbb      	ittet	lt
 810d4c4:	425b      	neglt	r3, r3
 810d4c6:	f042 0202 	orrlt.w	r2, r2, #2
 810d4ca:	9307      	strge	r3, [sp, #28]
 810d4cc:	9307      	strlt	r3, [sp, #28]
 810d4ce:	bfb8      	it	lt
 810d4d0:	9204      	strlt	r2, [sp, #16]
 810d4d2:	7823      	ldrb	r3, [r4, #0]
 810d4d4:	2b2e      	cmp	r3, #46	; 0x2e
 810d4d6:	d10c      	bne.n	810d4f2 <_vfiprintf_r+0x15a>
 810d4d8:	7863      	ldrb	r3, [r4, #1]
 810d4da:	2b2a      	cmp	r3, #42	; 0x2a
 810d4dc:	d134      	bne.n	810d548 <_vfiprintf_r+0x1b0>
 810d4de:	9b03      	ldr	r3, [sp, #12]
 810d4e0:	1d1a      	adds	r2, r3, #4
 810d4e2:	681b      	ldr	r3, [r3, #0]
 810d4e4:	9203      	str	r2, [sp, #12]
 810d4e6:	2b00      	cmp	r3, #0
 810d4e8:	bfb8      	it	lt
 810d4ea:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 810d4ee:	3402      	adds	r4, #2
 810d4f0:	9305      	str	r3, [sp, #20]
 810d4f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 810d5c8 <_vfiprintf_r+0x230>
 810d4f6:	7821      	ldrb	r1, [r4, #0]
 810d4f8:	2203      	movs	r2, #3
 810d4fa:	4650      	mov	r0, sl
 810d4fc:	f7f2 fef0 	bl	81002e0 <memchr>
 810d500:	b138      	cbz	r0, 810d512 <_vfiprintf_r+0x17a>
 810d502:	9b04      	ldr	r3, [sp, #16]
 810d504:	eba0 000a 	sub.w	r0, r0, sl
 810d508:	2240      	movs	r2, #64	; 0x40
 810d50a:	4082      	lsls	r2, r0
 810d50c:	4313      	orrs	r3, r2
 810d50e:	3401      	adds	r4, #1
 810d510:	9304      	str	r3, [sp, #16]
 810d512:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d516:	4829      	ldr	r0, [pc, #164]	; (810d5bc <_vfiprintf_r+0x224>)
 810d518:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810d51c:	2206      	movs	r2, #6
 810d51e:	f7f2 fedf 	bl	81002e0 <memchr>
 810d522:	2800      	cmp	r0, #0
 810d524:	d03f      	beq.n	810d5a6 <_vfiprintf_r+0x20e>
 810d526:	4b26      	ldr	r3, [pc, #152]	; (810d5c0 <_vfiprintf_r+0x228>)
 810d528:	bb1b      	cbnz	r3, 810d572 <_vfiprintf_r+0x1da>
 810d52a:	9b03      	ldr	r3, [sp, #12]
 810d52c:	3307      	adds	r3, #7
 810d52e:	f023 0307 	bic.w	r3, r3, #7
 810d532:	3308      	adds	r3, #8
 810d534:	9303      	str	r3, [sp, #12]
 810d536:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810d538:	443b      	add	r3, r7
 810d53a:	9309      	str	r3, [sp, #36]	; 0x24
 810d53c:	e768      	b.n	810d410 <_vfiprintf_r+0x78>
 810d53e:	fb0c 3202 	mla	r2, ip, r2, r3
 810d542:	460c      	mov	r4, r1
 810d544:	2001      	movs	r0, #1
 810d546:	e7a6      	b.n	810d496 <_vfiprintf_r+0xfe>
 810d548:	2300      	movs	r3, #0
 810d54a:	3401      	adds	r4, #1
 810d54c:	9305      	str	r3, [sp, #20]
 810d54e:	4619      	mov	r1, r3
 810d550:	f04f 0c0a 	mov.w	ip, #10
 810d554:	4620      	mov	r0, r4
 810d556:	f810 2b01 	ldrb.w	r2, [r0], #1
 810d55a:	3a30      	subs	r2, #48	; 0x30
 810d55c:	2a09      	cmp	r2, #9
 810d55e:	d903      	bls.n	810d568 <_vfiprintf_r+0x1d0>
 810d560:	2b00      	cmp	r3, #0
 810d562:	d0c6      	beq.n	810d4f2 <_vfiprintf_r+0x15a>
 810d564:	9105      	str	r1, [sp, #20]
 810d566:	e7c4      	b.n	810d4f2 <_vfiprintf_r+0x15a>
 810d568:	fb0c 2101 	mla	r1, ip, r1, r2
 810d56c:	4604      	mov	r4, r0
 810d56e:	2301      	movs	r3, #1
 810d570:	e7f0      	b.n	810d554 <_vfiprintf_r+0x1bc>
 810d572:	ab03      	add	r3, sp, #12
 810d574:	9300      	str	r3, [sp, #0]
 810d576:	462a      	mov	r2, r5
 810d578:	4b12      	ldr	r3, [pc, #72]	; (810d5c4 <_vfiprintf_r+0x22c>)
 810d57a:	a904      	add	r1, sp, #16
 810d57c:	4630      	mov	r0, r6
 810d57e:	f7fb fdd3 	bl	8109128 <_printf_float>
 810d582:	4607      	mov	r7, r0
 810d584:	1c78      	adds	r0, r7, #1
 810d586:	d1d6      	bne.n	810d536 <_vfiprintf_r+0x19e>
 810d588:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810d58a:	07d9      	lsls	r1, r3, #31
 810d58c:	d405      	bmi.n	810d59a <_vfiprintf_r+0x202>
 810d58e:	89ab      	ldrh	r3, [r5, #12]
 810d590:	059a      	lsls	r2, r3, #22
 810d592:	d402      	bmi.n	810d59a <_vfiprintf_r+0x202>
 810d594:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810d596:	f7fd fbe4 	bl	810ad62 <__retarget_lock_release_recursive>
 810d59a:	89ab      	ldrh	r3, [r5, #12]
 810d59c:	065b      	lsls	r3, r3, #25
 810d59e:	f53f af1d 	bmi.w	810d3dc <_vfiprintf_r+0x44>
 810d5a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 810d5a4:	e71c      	b.n	810d3e0 <_vfiprintf_r+0x48>
 810d5a6:	ab03      	add	r3, sp, #12
 810d5a8:	9300      	str	r3, [sp, #0]
 810d5aa:	462a      	mov	r2, r5
 810d5ac:	4b05      	ldr	r3, [pc, #20]	; (810d5c4 <_vfiprintf_r+0x22c>)
 810d5ae:	a904      	add	r1, sp, #16
 810d5b0:	4630      	mov	r0, r6
 810d5b2:	f7fc f85d 	bl	8109670 <_printf_i>
 810d5b6:	e7e4      	b.n	810d582 <_vfiprintf_r+0x1ea>
 810d5b8:	0810eadb 	.word	0x0810eadb
 810d5bc:	0810eae5 	.word	0x0810eae5
 810d5c0:	08109129 	.word	0x08109129
 810d5c4:	0810d373 	.word	0x0810d373
 810d5c8:	0810eae1 	.word	0x0810eae1

0810d5cc <_malloc_usable_size_r>:
 810d5cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810d5d0:	1f18      	subs	r0, r3, #4
 810d5d2:	2b00      	cmp	r3, #0
 810d5d4:	bfbc      	itt	lt
 810d5d6:	580b      	ldrlt	r3, [r1, r0]
 810d5d8:	18c0      	addlt	r0, r0, r3
 810d5da:	4770      	bx	lr

0810d5dc <__swbuf_r>:
 810d5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810d5de:	460e      	mov	r6, r1
 810d5e0:	4614      	mov	r4, r2
 810d5e2:	4605      	mov	r5, r0
 810d5e4:	b118      	cbz	r0, 810d5ee <__swbuf_r+0x12>
 810d5e6:	6a03      	ldr	r3, [r0, #32]
 810d5e8:	b90b      	cbnz	r3, 810d5ee <__swbuf_r+0x12>
 810d5ea:	f7fc fc79 	bl	8109ee0 <__sinit>
 810d5ee:	69a3      	ldr	r3, [r4, #24]
 810d5f0:	60a3      	str	r3, [r4, #8]
 810d5f2:	89a3      	ldrh	r3, [r4, #12]
 810d5f4:	071a      	lsls	r2, r3, #28
 810d5f6:	d525      	bpl.n	810d644 <__swbuf_r+0x68>
 810d5f8:	6923      	ldr	r3, [r4, #16]
 810d5fa:	b31b      	cbz	r3, 810d644 <__swbuf_r+0x68>
 810d5fc:	6823      	ldr	r3, [r4, #0]
 810d5fe:	6922      	ldr	r2, [r4, #16]
 810d600:	1a98      	subs	r0, r3, r2
 810d602:	6963      	ldr	r3, [r4, #20]
 810d604:	b2f6      	uxtb	r6, r6
 810d606:	4283      	cmp	r3, r0
 810d608:	4637      	mov	r7, r6
 810d60a:	dc04      	bgt.n	810d616 <__swbuf_r+0x3a>
 810d60c:	4621      	mov	r1, r4
 810d60e:	4628      	mov	r0, r5
 810d610:	f7ff f84c 	bl	810c6ac <_fflush_r>
 810d614:	b9e0      	cbnz	r0, 810d650 <__swbuf_r+0x74>
 810d616:	68a3      	ldr	r3, [r4, #8]
 810d618:	3b01      	subs	r3, #1
 810d61a:	60a3      	str	r3, [r4, #8]
 810d61c:	6823      	ldr	r3, [r4, #0]
 810d61e:	1c5a      	adds	r2, r3, #1
 810d620:	6022      	str	r2, [r4, #0]
 810d622:	701e      	strb	r6, [r3, #0]
 810d624:	6962      	ldr	r2, [r4, #20]
 810d626:	1c43      	adds	r3, r0, #1
 810d628:	429a      	cmp	r2, r3
 810d62a:	d004      	beq.n	810d636 <__swbuf_r+0x5a>
 810d62c:	89a3      	ldrh	r3, [r4, #12]
 810d62e:	07db      	lsls	r3, r3, #31
 810d630:	d506      	bpl.n	810d640 <__swbuf_r+0x64>
 810d632:	2e0a      	cmp	r6, #10
 810d634:	d104      	bne.n	810d640 <__swbuf_r+0x64>
 810d636:	4621      	mov	r1, r4
 810d638:	4628      	mov	r0, r5
 810d63a:	f7ff f837 	bl	810c6ac <_fflush_r>
 810d63e:	b938      	cbnz	r0, 810d650 <__swbuf_r+0x74>
 810d640:	4638      	mov	r0, r7
 810d642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810d644:	4621      	mov	r1, r4
 810d646:	4628      	mov	r0, r5
 810d648:	f000 f806 	bl	810d658 <__swsetup_r>
 810d64c:	2800      	cmp	r0, #0
 810d64e:	d0d5      	beq.n	810d5fc <__swbuf_r+0x20>
 810d650:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 810d654:	e7f4      	b.n	810d640 <__swbuf_r+0x64>
	...

0810d658 <__swsetup_r>:
 810d658:	b538      	push	{r3, r4, r5, lr}
 810d65a:	4b2a      	ldr	r3, [pc, #168]	; (810d704 <__swsetup_r+0xac>)
 810d65c:	4605      	mov	r5, r0
 810d65e:	6818      	ldr	r0, [r3, #0]
 810d660:	460c      	mov	r4, r1
 810d662:	b118      	cbz	r0, 810d66c <__swsetup_r+0x14>
 810d664:	6a03      	ldr	r3, [r0, #32]
 810d666:	b90b      	cbnz	r3, 810d66c <__swsetup_r+0x14>
 810d668:	f7fc fc3a 	bl	8109ee0 <__sinit>
 810d66c:	89a3      	ldrh	r3, [r4, #12]
 810d66e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810d672:	0718      	lsls	r0, r3, #28
 810d674:	d422      	bmi.n	810d6bc <__swsetup_r+0x64>
 810d676:	06d9      	lsls	r1, r3, #27
 810d678:	d407      	bmi.n	810d68a <__swsetup_r+0x32>
 810d67a:	2309      	movs	r3, #9
 810d67c:	602b      	str	r3, [r5, #0]
 810d67e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 810d682:	81a3      	strh	r3, [r4, #12]
 810d684:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810d688:	e034      	b.n	810d6f4 <__swsetup_r+0x9c>
 810d68a:	0758      	lsls	r0, r3, #29
 810d68c:	d512      	bpl.n	810d6b4 <__swsetup_r+0x5c>
 810d68e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810d690:	b141      	cbz	r1, 810d6a4 <__swsetup_r+0x4c>
 810d692:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810d696:	4299      	cmp	r1, r3
 810d698:	d002      	beq.n	810d6a0 <__swsetup_r+0x48>
 810d69a:	4628      	mov	r0, r5
 810d69c:	f7ff fe06 	bl	810d2ac <_free_r>
 810d6a0:	2300      	movs	r3, #0
 810d6a2:	6363      	str	r3, [r4, #52]	; 0x34
 810d6a4:	89a3      	ldrh	r3, [r4, #12]
 810d6a6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 810d6aa:	81a3      	strh	r3, [r4, #12]
 810d6ac:	2300      	movs	r3, #0
 810d6ae:	6063      	str	r3, [r4, #4]
 810d6b0:	6923      	ldr	r3, [r4, #16]
 810d6b2:	6023      	str	r3, [r4, #0]
 810d6b4:	89a3      	ldrh	r3, [r4, #12]
 810d6b6:	f043 0308 	orr.w	r3, r3, #8
 810d6ba:	81a3      	strh	r3, [r4, #12]
 810d6bc:	6923      	ldr	r3, [r4, #16]
 810d6be:	b94b      	cbnz	r3, 810d6d4 <__swsetup_r+0x7c>
 810d6c0:	89a3      	ldrh	r3, [r4, #12]
 810d6c2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 810d6c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810d6ca:	d003      	beq.n	810d6d4 <__swsetup_r+0x7c>
 810d6cc:	4621      	mov	r1, r4
 810d6ce:	4628      	mov	r0, r5
 810d6d0:	f000 f840 	bl	810d754 <__smakebuf_r>
 810d6d4:	89a0      	ldrh	r0, [r4, #12]
 810d6d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810d6da:	f010 0301 	ands.w	r3, r0, #1
 810d6de:	d00a      	beq.n	810d6f6 <__swsetup_r+0x9e>
 810d6e0:	2300      	movs	r3, #0
 810d6e2:	60a3      	str	r3, [r4, #8]
 810d6e4:	6963      	ldr	r3, [r4, #20]
 810d6e6:	425b      	negs	r3, r3
 810d6e8:	61a3      	str	r3, [r4, #24]
 810d6ea:	6923      	ldr	r3, [r4, #16]
 810d6ec:	b943      	cbnz	r3, 810d700 <__swsetup_r+0xa8>
 810d6ee:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 810d6f2:	d1c4      	bne.n	810d67e <__swsetup_r+0x26>
 810d6f4:	bd38      	pop	{r3, r4, r5, pc}
 810d6f6:	0781      	lsls	r1, r0, #30
 810d6f8:	bf58      	it	pl
 810d6fa:	6963      	ldrpl	r3, [r4, #20]
 810d6fc:	60a3      	str	r3, [r4, #8]
 810d6fe:	e7f4      	b.n	810d6ea <__swsetup_r+0x92>
 810d700:	2000      	movs	r0, #0
 810d702:	e7f7      	b.n	810d6f4 <__swsetup_r+0x9c>
 810d704:	100001d4 	.word	0x100001d4

0810d708 <__swhatbuf_r>:
 810d708:	b570      	push	{r4, r5, r6, lr}
 810d70a:	460c      	mov	r4, r1
 810d70c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810d710:	2900      	cmp	r1, #0
 810d712:	b096      	sub	sp, #88	; 0x58
 810d714:	4615      	mov	r5, r2
 810d716:	461e      	mov	r6, r3
 810d718:	da0d      	bge.n	810d736 <__swhatbuf_r+0x2e>
 810d71a:	89a3      	ldrh	r3, [r4, #12]
 810d71c:	f013 0f80 	tst.w	r3, #128	; 0x80
 810d720:	f04f 0100 	mov.w	r1, #0
 810d724:	bf0c      	ite	eq
 810d726:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 810d72a:	2340      	movne	r3, #64	; 0x40
 810d72c:	2000      	movs	r0, #0
 810d72e:	6031      	str	r1, [r6, #0]
 810d730:	602b      	str	r3, [r5, #0]
 810d732:	b016      	add	sp, #88	; 0x58
 810d734:	bd70      	pop	{r4, r5, r6, pc}
 810d736:	466a      	mov	r2, sp
 810d738:	f000 f848 	bl	810d7cc <_fstat_r>
 810d73c:	2800      	cmp	r0, #0
 810d73e:	dbec      	blt.n	810d71a <__swhatbuf_r+0x12>
 810d740:	9901      	ldr	r1, [sp, #4]
 810d742:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 810d746:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 810d74a:	4259      	negs	r1, r3
 810d74c:	4159      	adcs	r1, r3
 810d74e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810d752:	e7eb      	b.n	810d72c <__swhatbuf_r+0x24>

0810d754 <__smakebuf_r>:
 810d754:	898b      	ldrh	r3, [r1, #12]
 810d756:	b573      	push	{r0, r1, r4, r5, r6, lr}
 810d758:	079d      	lsls	r5, r3, #30
 810d75a:	4606      	mov	r6, r0
 810d75c:	460c      	mov	r4, r1
 810d75e:	d507      	bpl.n	810d770 <__smakebuf_r+0x1c>
 810d760:	f104 0347 	add.w	r3, r4, #71	; 0x47
 810d764:	6023      	str	r3, [r4, #0]
 810d766:	6123      	str	r3, [r4, #16]
 810d768:	2301      	movs	r3, #1
 810d76a:	6163      	str	r3, [r4, #20]
 810d76c:	b002      	add	sp, #8
 810d76e:	bd70      	pop	{r4, r5, r6, pc}
 810d770:	ab01      	add	r3, sp, #4
 810d772:	466a      	mov	r2, sp
 810d774:	f7ff ffc8 	bl	810d708 <__swhatbuf_r>
 810d778:	9900      	ldr	r1, [sp, #0]
 810d77a:	4605      	mov	r5, r0
 810d77c:	4630      	mov	r0, r6
 810d77e:	f7fe fe7d 	bl	810c47c <_malloc_r>
 810d782:	b948      	cbnz	r0, 810d798 <__smakebuf_r+0x44>
 810d784:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810d788:	059a      	lsls	r2, r3, #22
 810d78a:	d4ef      	bmi.n	810d76c <__smakebuf_r+0x18>
 810d78c:	f023 0303 	bic.w	r3, r3, #3
 810d790:	f043 0302 	orr.w	r3, r3, #2
 810d794:	81a3      	strh	r3, [r4, #12]
 810d796:	e7e3      	b.n	810d760 <__smakebuf_r+0xc>
 810d798:	89a3      	ldrh	r3, [r4, #12]
 810d79a:	6020      	str	r0, [r4, #0]
 810d79c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810d7a0:	81a3      	strh	r3, [r4, #12]
 810d7a2:	9b00      	ldr	r3, [sp, #0]
 810d7a4:	6163      	str	r3, [r4, #20]
 810d7a6:	9b01      	ldr	r3, [sp, #4]
 810d7a8:	6120      	str	r0, [r4, #16]
 810d7aa:	b15b      	cbz	r3, 810d7c4 <__smakebuf_r+0x70>
 810d7ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810d7b0:	4630      	mov	r0, r6
 810d7b2:	f000 f81d 	bl	810d7f0 <_isatty_r>
 810d7b6:	b128      	cbz	r0, 810d7c4 <__smakebuf_r+0x70>
 810d7b8:	89a3      	ldrh	r3, [r4, #12]
 810d7ba:	f023 0303 	bic.w	r3, r3, #3
 810d7be:	f043 0301 	orr.w	r3, r3, #1
 810d7c2:	81a3      	strh	r3, [r4, #12]
 810d7c4:	89a3      	ldrh	r3, [r4, #12]
 810d7c6:	431d      	orrs	r5, r3
 810d7c8:	81a5      	strh	r5, [r4, #12]
 810d7ca:	e7cf      	b.n	810d76c <__smakebuf_r+0x18>

0810d7cc <_fstat_r>:
 810d7cc:	b538      	push	{r3, r4, r5, lr}
 810d7ce:	4d07      	ldr	r5, [pc, #28]	; (810d7ec <_fstat_r+0x20>)
 810d7d0:	2300      	movs	r3, #0
 810d7d2:	4604      	mov	r4, r0
 810d7d4:	4608      	mov	r0, r1
 810d7d6:	4611      	mov	r1, r2
 810d7d8:	602b      	str	r3, [r5, #0]
 810d7da:	f7f4 fd18 	bl	810220e <_fstat>
 810d7de:	1c43      	adds	r3, r0, #1
 810d7e0:	d102      	bne.n	810d7e8 <_fstat_r+0x1c>
 810d7e2:	682b      	ldr	r3, [r5, #0]
 810d7e4:	b103      	cbz	r3, 810d7e8 <_fstat_r+0x1c>
 810d7e6:	6023      	str	r3, [r4, #0]
 810d7e8:	bd38      	pop	{r3, r4, r5, pc}
 810d7ea:	bf00      	nop
 810d7ec:	100004c8 	.word	0x100004c8

0810d7f0 <_isatty_r>:
 810d7f0:	b538      	push	{r3, r4, r5, lr}
 810d7f2:	4d06      	ldr	r5, [pc, #24]	; (810d80c <_isatty_r+0x1c>)
 810d7f4:	2300      	movs	r3, #0
 810d7f6:	4604      	mov	r4, r0
 810d7f8:	4608      	mov	r0, r1
 810d7fa:	602b      	str	r3, [r5, #0]
 810d7fc:	f7f4 fd17 	bl	810222e <_isatty>
 810d800:	1c43      	adds	r3, r0, #1
 810d802:	d102      	bne.n	810d80a <_isatty_r+0x1a>
 810d804:	682b      	ldr	r3, [r5, #0]
 810d806:	b103      	cbz	r3, 810d80a <_isatty_r+0x1a>
 810d808:	6023      	str	r3, [r4, #0]
 810d80a:	bd38      	pop	{r3, r4, r5, pc}
 810d80c:	100004c8 	.word	0x100004c8

0810d810 <_raise_r>:
 810d810:	291f      	cmp	r1, #31
 810d812:	b538      	push	{r3, r4, r5, lr}
 810d814:	4604      	mov	r4, r0
 810d816:	460d      	mov	r5, r1
 810d818:	d904      	bls.n	810d824 <_raise_r+0x14>
 810d81a:	2316      	movs	r3, #22
 810d81c:	6003      	str	r3, [r0, #0]
 810d81e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810d822:	bd38      	pop	{r3, r4, r5, pc}
 810d824:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 810d826:	b112      	cbz	r2, 810d82e <_raise_r+0x1e>
 810d828:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810d82c:	b94b      	cbnz	r3, 810d842 <_raise_r+0x32>
 810d82e:	4620      	mov	r0, r4
 810d830:	f000 f830 	bl	810d894 <_getpid_r>
 810d834:	462a      	mov	r2, r5
 810d836:	4601      	mov	r1, r0
 810d838:	4620      	mov	r0, r4
 810d83a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810d83e:	f000 b817 	b.w	810d870 <_kill_r>
 810d842:	2b01      	cmp	r3, #1
 810d844:	d00a      	beq.n	810d85c <_raise_r+0x4c>
 810d846:	1c59      	adds	r1, r3, #1
 810d848:	d103      	bne.n	810d852 <_raise_r+0x42>
 810d84a:	2316      	movs	r3, #22
 810d84c:	6003      	str	r3, [r0, #0]
 810d84e:	2001      	movs	r0, #1
 810d850:	e7e7      	b.n	810d822 <_raise_r+0x12>
 810d852:	2400      	movs	r4, #0
 810d854:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 810d858:	4628      	mov	r0, r5
 810d85a:	4798      	blx	r3
 810d85c:	2000      	movs	r0, #0
 810d85e:	e7e0      	b.n	810d822 <_raise_r+0x12>

0810d860 <raise>:
 810d860:	4b02      	ldr	r3, [pc, #8]	; (810d86c <raise+0xc>)
 810d862:	4601      	mov	r1, r0
 810d864:	6818      	ldr	r0, [r3, #0]
 810d866:	f7ff bfd3 	b.w	810d810 <_raise_r>
 810d86a:	bf00      	nop
 810d86c:	100001d4 	.word	0x100001d4

0810d870 <_kill_r>:
 810d870:	b538      	push	{r3, r4, r5, lr}
 810d872:	4d07      	ldr	r5, [pc, #28]	; (810d890 <_kill_r+0x20>)
 810d874:	2300      	movs	r3, #0
 810d876:	4604      	mov	r4, r0
 810d878:	4608      	mov	r0, r1
 810d87a:	4611      	mov	r1, r2
 810d87c:	602b      	str	r3, [r5, #0]
 810d87e:	f7f4 fc65 	bl	810214c <_kill>
 810d882:	1c43      	adds	r3, r0, #1
 810d884:	d102      	bne.n	810d88c <_kill_r+0x1c>
 810d886:	682b      	ldr	r3, [r5, #0]
 810d888:	b103      	cbz	r3, 810d88c <_kill_r+0x1c>
 810d88a:	6023      	str	r3, [r4, #0]
 810d88c:	bd38      	pop	{r3, r4, r5, pc}
 810d88e:	bf00      	nop
 810d890:	100004c8 	.word	0x100004c8

0810d894 <_getpid_r>:
 810d894:	f7f4 bc52 	b.w	810213c <_getpid>

0810d898 <pow>:
 810d898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810d89a:	ed2d 8b02 	vpush	{d8}
 810d89e:	eeb0 8a40 	vmov.f32	s16, s0
 810d8a2:	eef0 8a60 	vmov.f32	s17, s1
 810d8a6:	ec55 4b11 	vmov	r4, r5, d1
 810d8aa:	f000 f871 	bl	810d990 <__ieee754_pow>
 810d8ae:	4622      	mov	r2, r4
 810d8b0:	462b      	mov	r3, r5
 810d8b2:	4620      	mov	r0, r4
 810d8b4:	4629      	mov	r1, r5
 810d8b6:	ec57 6b10 	vmov	r6, r7, d0
 810d8ba:	f7f3 f9bf 	bl	8100c3c <__aeabi_dcmpun>
 810d8be:	2800      	cmp	r0, #0
 810d8c0:	d13b      	bne.n	810d93a <pow+0xa2>
 810d8c2:	ec51 0b18 	vmov	r0, r1, d8
 810d8c6:	2200      	movs	r2, #0
 810d8c8:	2300      	movs	r3, #0
 810d8ca:	f7f3 f985 	bl	8100bd8 <__aeabi_dcmpeq>
 810d8ce:	b1b8      	cbz	r0, 810d900 <pow+0x68>
 810d8d0:	2200      	movs	r2, #0
 810d8d2:	2300      	movs	r3, #0
 810d8d4:	4620      	mov	r0, r4
 810d8d6:	4629      	mov	r1, r5
 810d8d8:	f7f3 f97e 	bl	8100bd8 <__aeabi_dcmpeq>
 810d8dc:	2800      	cmp	r0, #0
 810d8de:	d146      	bne.n	810d96e <pow+0xd6>
 810d8e0:	ec45 4b10 	vmov	d0, r4, r5
 810d8e4:	f000 f848 	bl	810d978 <finite>
 810d8e8:	b338      	cbz	r0, 810d93a <pow+0xa2>
 810d8ea:	2200      	movs	r2, #0
 810d8ec:	2300      	movs	r3, #0
 810d8ee:	4620      	mov	r0, r4
 810d8f0:	4629      	mov	r1, r5
 810d8f2:	f7f3 f97b 	bl	8100bec <__aeabi_dcmplt>
 810d8f6:	b300      	cbz	r0, 810d93a <pow+0xa2>
 810d8f8:	f7fd fa08 	bl	810ad0c <__errno>
 810d8fc:	2322      	movs	r3, #34	; 0x22
 810d8fe:	e01b      	b.n	810d938 <pow+0xa0>
 810d900:	ec47 6b10 	vmov	d0, r6, r7
 810d904:	f000 f838 	bl	810d978 <finite>
 810d908:	b9e0      	cbnz	r0, 810d944 <pow+0xac>
 810d90a:	eeb0 0a48 	vmov.f32	s0, s16
 810d90e:	eef0 0a68 	vmov.f32	s1, s17
 810d912:	f000 f831 	bl	810d978 <finite>
 810d916:	b1a8      	cbz	r0, 810d944 <pow+0xac>
 810d918:	ec45 4b10 	vmov	d0, r4, r5
 810d91c:	f000 f82c 	bl	810d978 <finite>
 810d920:	b180      	cbz	r0, 810d944 <pow+0xac>
 810d922:	4632      	mov	r2, r6
 810d924:	463b      	mov	r3, r7
 810d926:	4630      	mov	r0, r6
 810d928:	4639      	mov	r1, r7
 810d92a:	f7f3 f987 	bl	8100c3c <__aeabi_dcmpun>
 810d92e:	2800      	cmp	r0, #0
 810d930:	d0e2      	beq.n	810d8f8 <pow+0x60>
 810d932:	f7fd f9eb 	bl	810ad0c <__errno>
 810d936:	2321      	movs	r3, #33	; 0x21
 810d938:	6003      	str	r3, [r0, #0]
 810d93a:	ecbd 8b02 	vpop	{d8}
 810d93e:	ec47 6b10 	vmov	d0, r6, r7
 810d942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810d944:	2200      	movs	r2, #0
 810d946:	2300      	movs	r3, #0
 810d948:	4630      	mov	r0, r6
 810d94a:	4639      	mov	r1, r7
 810d94c:	f7f3 f944 	bl	8100bd8 <__aeabi_dcmpeq>
 810d950:	2800      	cmp	r0, #0
 810d952:	d0f2      	beq.n	810d93a <pow+0xa2>
 810d954:	eeb0 0a48 	vmov.f32	s0, s16
 810d958:	eef0 0a68 	vmov.f32	s1, s17
 810d95c:	f000 f80c 	bl	810d978 <finite>
 810d960:	2800      	cmp	r0, #0
 810d962:	d0ea      	beq.n	810d93a <pow+0xa2>
 810d964:	ec45 4b10 	vmov	d0, r4, r5
 810d968:	f000 f806 	bl	810d978 <finite>
 810d96c:	e7c3      	b.n	810d8f6 <pow+0x5e>
 810d96e:	4f01      	ldr	r7, [pc, #4]	; (810d974 <pow+0xdc>)
 810d970:	2600      	movs	r6, #0
 810d972:	e7e2      	b.n	810d93a <pow+0xa2>
 810d974:	3ff00000 	.word	0x3ff00000

0810d978 <finite>:
 810d978:	b082      	sub	sp, #8
 810d97a:	ed8d 0b00 	vstr	d0, [sp]
 810d97e:	9801      	ldr	r0, [sp, #4]
 810d980:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 810d984:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 810d988:	0fc0      	lsrs	r0, r0, #31
 810d98a:	b002      	add	sp, #8
 810d98c:	4770      	bx	lr
	...

0810d990 <__ieee754_pow>:
 810d990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d994:	ed2d 8b06 	vpush	{d8-d10}
 810d998:	b089      	sub	sp, #36	; 0x24
 810d99a:	ed8d 1b00 	vstr	d1, [sp]
 810d99e:	e9dd 2900 	ldrd	r2, r9, [sp]
 810d9a2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 810d9a6:	ea58 0102 	orrs.w	r1, r8, r2
 810d9aa:	ec57 6b10 	vmov	r6, r7, d0
 810d9ae:	d115      	bne.n	810d9dc <__ieee754_pow+0x4c>
 810d9b0:	19b3      	adds	r3, r6, r6
 810d9b2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 810d9b6:	4152      	adcs	r2, r2
 810d9b8:	4299      	cmp	r1, r3
 810d9ba:	4b89      	ldr	r3, [pc, #548]	; (810dbe0 <__ieee754_pow+0x250>)
 810d9bc:	4193      	sbcs	r3, r2
 810d9be:	f080 84d1 	bcs.w	810e364 <__ieee754_pow+0x9d4>
 810d9c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 810d9c6:	4630      	mov	r0, r6
 810d9c8:	4639      	mov	r1, r7
 810d9ca:	f7f2 fce7 	bl	810039c <__adddf3>
 810d9ce:	ec41 0b10 	vmov	d0, r0, r1
 810d9d2:	b009      	add	sp, #36	; 0x24
 810d9d4:	ecbd 8b06 	vpop	{d8-d10}
 810d9d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810d9dc:	4b81      	ldr	r3, [pc, #516]	; (810dbe4 <__ieee754_pow+0x254>)
 810d9de:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 810d9e2:	429c      	cmp	r4, r3
 810d9e4:	ee10 aa10 	vmov	sl, s0
 810d9e8:	463d      	mov	r5, r7
 810d9ea:	dc06      	bgt.n	810d9fa <__ieee754_pow+0x6a>
 810d9ec:	d101      	bne.n	810d9f2 <__ieee754_pow+0x62>
 810d9ee:	2e00      	cmp	r6, #0
 810d9f0:	d1e7      	bne.n	810d9c2 <__ieee754_pow+0x32>
 810d9f2:	4598      	cmp	r8, r3
 810d9f4:	dc01      	bgt.n	810d9fa <__ieee754_pow+0x6a>
 810d9f6:	d10f      	bne.n	810da18 <__ieee754_pow+0x88>
 810d9f8:	b172      	cbz	r2, 810da18 <__ieee754_pow+0x88>
 810d9fa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 810d9fe:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 810da02:	ea55 050a 	orrs.w	r5, r5, sl
 810da06:	d1dc      	bne.n	810d9c2 <__ieee754_pow+0x32>
 810da08:	e9dd 3200 	ldrd	r3, r2, [sp]
 810da0c:	18db      	adds	r3, r3, r3
 810da0e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 810da12:	4152      	adcs	r2, r2
 810da14:	429d      	cmp	r5, r3
 810da16:	e7d0      	b.n	810d9ba <__ieee754_pow+0x2a>
 810da18:	2d00      	cmp	r5, #0
 810da1a:	da3b      	bge.n	810da94 <__ieee754_pow+0x104>
 810da1c:	4b72      	ldr	r3, [pc, #456]	; (810dbe8 <__ieee754_pow+0x258>)
 810da1e:	4598      	cmp	r8, r3
 810da20:	dc51      	bgt.n	810dac6 <__ieee754_pow+0x136>
 810da22:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 810da26:	4598      	cmp	r8, r3
 810da28:	f340 84ab 	ble.w	810e382 <__ieee754_pow+0x9f2>
 810da2c:	ea4f 5328 	mov.w	r3, r8, asr #20
 810da30:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 810da34:	2b14      	cmp	r3, #20
 810da36:	dd0f      	ble.n	810da58 <__ieee754_pow+0xc8>
 810da38:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 810da3c:	fa22 f103 	lsr.w	r1, r2, r3
 810da40:	fa01 f303 	lsl.w	r3, r1, r3
 810da44:	4293      	cmp	r3, r2
 810da46:	f040 849c 	bne.w	810e382 <__ieee754_pow+0x9f2>
 810da4a:	f001 0101 	and.w	r1, r1, #1
 810da4e:	f1c1 0302 	rsb	r3, r1, #2
 810da52:	9304      	str	r3, [sp, #16]
 810da54:	b182      	cbz	r2, 810da78 <__ieee754_pow+0xe8>
 810da56:	e05f      	b.n	810db18 <__ieee754_pow+0x188>
 810da58:	2a00      	cmp	r2, #0
 810da5a:	d15b      	bne.n	810db14 <__ieee754_pow+0x184>
 810da5c:	f1c3 0314 	rsb	r3, r3, #20
 810da60:	fa48 f103 	asr.w	r1, r8, r3
 810da64:	fa01 f303 	lsl.w	r3, r1, r3
 810da68:	4543      	cmp	r3, r8
 810da6a:	f040 8487 	bne.w	810e37c <__ieee754_pow+0x9ec>
 810da6e:	f001 0101 	and.w	r1, r1, #1
 810da72:	f1c1 0302 	rsb	r3, r1, #2
 810da76:	9304      	str	r3, [sp, #16]
 810da78:	4b5c      	ldr	r3, [pc, #368]	; (810dbec <__ieee754_pow+0x25c>)
 810da7a:	4598      	cmp	r8, r3
 810da7c:	d132      	bne.n	810dae4 <__ieee754_pow+0x154>
 810da7e:	f1b9 0f00 	cmp.w	r9, #0
 810da82:	f280 8477 	bge.w	810e374 <__ieee754_pow+0x9e4>
 810da86:	4959      	ldr	r1, [pc, #356]	; (810dbec <__ieee754_pow+0x25c>)
 810da88:	4632      	mov	r2, r6
 810da8a:	463b      	mov	r3, r7
 810da8c:	2000      	movs	r0, #0
 810da8e:	f7f2 ff65 	bl	810095c <__aeabi_ddiv>
 810da92:	e79c      	b.n	810d9ce <__ieee754_pow+0x3e>
 810da94:	2300      	movs	r3, #0
 810da96:	9304      	str	r3, [sp, #16]
 810da98:	2a00      	cmp	r2, #0
 810da9a:	d13d      	bne.n	810db18 <__ieee754_pow+0x188>
 810da9c:	4b51      	ldr	r3, [pc, #324]	; (810dbe4 <__ieee754_pow+0x254>)
 810da9e:	4598      	cmp	r8, r3
 810daa0:	d1ea      	bne.n	810da78 <__ieee754_pow+0xe8>
 810daa2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 810daa6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 810daaa:	ea53 030a 	orrs.w	r3, r3, sl
 810daae:	f000 8459 	beq.w	810e364 <__ieee754_pow+0x9d4>
 810dab2:	4b4f      	ldr	r3, [pc, #316]	; (810dbf0 <__ieee754_pow+0x260>)
 810dab4:	429c      	cmp	r4, r3
 810dab6:	dd08      	ble.n	810daca <__ieee754_pow+0x13a>
 810dab8:	f1b9 0f00 	cmp.w	r9, #0
 810dabc:	f2c0 8456 	blt.w	810e36c <__ieee754_pow+0x9dc>
 810dac0:	e9dd 0100 	ldrd	r0, r1, [sp]
 810dac4:	e783      	b.n	810d9ce <__ieee754_pow+0x3e>
 810dac6:	2302      	movs	r3, #2
 810dac8:	e7e5      	b.n	810da96 <__ieee754_pow+0x106>
 810daca:	f1b9 0f00 	cmp.w	r9, #0
 810dace:	f04f 0000 	mov.w	r0, #0
 810dad2:	f04f 0100 	mov.w	r1, #0
 810dad6:	f6bf af7a 	bge.w	810d9ce <__ieee754_pow+0x3e>
 810dada:	e9dd 0300 	ldrd	r0, r3, [sp]
 810dade:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 810dae2:	e774      	b.n	810d9ce <__ieee754_pow+0x3e>
 810dae4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 810dae8:	d106      	bne.n	810daf8 <__ieee754_pow+0x168>
 810daea:	4632      	mov	r2, r6
 810daec:	463b      	mov	r3, r7
 810daee:	4630      	mov	r0, r6
 810daf0:	4639      	mov	r1, r7
 810daf2:	f7f2 fe09 	bl	8100708 <__aeabi_dmul>
 810daf6:	e76a      	b.n	810d9ce <__ieee754_pow+0x3e>
 810daf8:	4b3e      	ldr	r3, [pc, #248]	; (810dbf4 <__ieee754_pow+0x264>)
 810dafa:	4599      	cmp	r9, r3
 810dafc:	d10c      	bne.n	810db18 <__ieee754_pow+0x188>
 810dafe:	2d00      	cmp	r5, #0
 810db00:	db0a      	blt.n	810db18 <__ieee754_pow+0x188>
 810db02:	ec47 6b10 	vmov	d0, r6, r7
 810db06:	b009      	add	sp, #36	; 0x24
 810db08:	ecbd 8b06 	vpop	{d8-d10}
 810db0c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810db10:	f000 bd20 	b.w	810e554 <__ieee754_sqrt>
 810db14:	2300      	movs	r3, #0
 810db16:	9304      	str	r3, [sp, #16]
 810db18:	ec47 6b10 	vmov	d0, r6, r7
 810db1c:	f000 fc92 	bl	810e444 <fabs>
 810db20:	ec51 0b10 	vmov	r0, r1, d0
 810db24:	f1ba 0f00 	cmp.w	sl, #0
 810db28:	d129      	bne.n	810db7e <__ieee754_pow+0x1ee>
 810db2a:	b124      	cbz	r4, 810db36 <__ieee754_pow+0x1a6>
 810db2c:	4b2f      	ldr	r3, [pc, #188]	; (810dbec <__ieee754_pow+0x25c>)
 810db2e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 810db32:	429a      	cmp	r2, r3
 810db34:	d123      	bne.n	810db7e <__ieee754_pow+0x1ee>
 810db36:	f1b9 0f00 	cmp.w	r9, #0
 810db3a:	da05      	bge.n	810db48 <__ieee754_pow+0x1b8>
 810db3c:	4602      	mov	r2, r0
 810db3e:	460b      	mov	r3, r1
 810db40:	2000      	movs	r0, #0
 810db42:	492a      	ldr	r1, [pc, #168]	; (810dbec <__ieee754_pow+0x25c>)
 810db44:	f7f2 ff0a 	bl	810095c <__aeabi_ddiv>
 810db48:	2d00      	cmp	r5, #0
 810db4a:	f6bf af40 	bge.w	810d9ce <__ieee754_pow+0x3e>
 810db4e:	9b04      	ldr	r3, [sp, #16]
 810db50:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 810db54:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 810db58:	431c      	orrs	r4, r3
 810db5a:	d108      	bne.n	810db6e <__ieee754_pow+0x1de>
 810db5c:	4602      	mov	r2, r0
 810db5e:	460b      	mov	r3, r1
 810db60:	4610      	mov	r0, r2
 810db62:	4619      	mov	r1, r3
 810db64:	f7f2 fc18 	bl	8100398 <__aeabi_dsub>
 810db68:	4602      	mov	r2, r0
 810db6a:	460b      	mov	r3, r1
 810db6c:	e78f      	b.n	810da8e <__ieee754_pow+0xfe>
 810db6e:	9b04      	ldr	r3, [sp, #16]
 810db70:	2b01      	cmp	r3, #1
 810db72:	f47f af2c 	bne.w	810d9ce <__ieee754_pow+0x3e>
 810db76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810db7a:	4619      	mov	r1, r3
 810db7c:	e727      	b.n	810d9ce <__ieee754_pow+0x3e>
 810db7e:	0feb      	lsrs	r3, r5, #31
 810db80:	3b01      	subs	r3, #1
 810db82:	9306      	str	r3, [sp, #24]
 810db84:	9a06      	ldr	r2, [sp, #24]
 810db86:	9b04      	ldr	r3, [sp, #16]
 810db88:	4313      	orrs	r3, r2
 810db8a:	d102      	bne.n	810db92 <__ieee754_pow+0x202>
 810db8c:	4632      	mov	r2, r6
 810db8e:	463b      	mov	r3, r7
 810db90:	e7e6      	b.n	810db60 <__ieee754_pow+0x1d0>
 810db92:	4b19      	ldr	r3, [pc, #100]	; (810dbf8 <__ieee754_pow+0x268>)
 810db94:	4598      	cmp	r8, r3
 810db96:	f340 80fb 	ble.w	810dd90 <__ieee754_pow+0x400>
 810db9a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 810db9e:	4598      	cmp	r8, r3
 810dba0:	4b13      	ldr	r3, [pc, #76]	; (810dbf0 <__ieee754_pow+0x260>)
 810dba2:	dd0c      	ble.n	810dbbe <__ieee754_pow+0x22e>
 810dba4:	429c      	cmp	r4, r3
 810dba6:	dc0f      	bgt.n	810dbc8 <__ieee754_pow+0x238>
 810dba8:	f1b9 0f00 	cmp.w	r9, #0
 810dbac:	da0f      	bge.n	810dbce <__ieee754_pow+0x23e>
 810dbae:	2000      	movs	r0, #0
 810dbb0:	b009      	add	sp, #36	; 0x24
 810dbb2:	ecbd 8b06 	vpop	{d8-d10}
 810dbb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810dbba:	f000 bc3a 	b.w	810e432 <__math_oflow>
 810dbbe:	429c      	cmp	r4, r3
 810dbc0:	dbf2      	blt.n	810dba8 <__ieee754_pow+0x218>
 810dbc2:	4b0a      	ldr	r3, [pc, #40]	; (810dbec <__ieee754_pow+0x25c>)
 810dbc4:	429c      	cmp	r4, r3
 810dbc6:	dd19      	ble.n	810dbfc <__ieee754_pow+0x26c>
 810dbc8:	f1b9 0f00 	cmp.w	r9, #0
 810dbcc:	dcef      	bgt.n	810dbae <__ieee754_pow+0x21e>
 810dbce:	2000      	movs	r0, #0
 810dbd0:	b009      	add	sp, #36	; 0x24
 810dbd2:	ecbd 8b06 	vpop	{d8-d10}
 810dbd6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810dbda:	f000 bc21 	b.w	810e420 <__math_uflow>
 810dbde:	bf00      	nop
 810dbe0:	fff00000 	.word	0xfff00000
 810dbe4:	7ff00000 	.word	0x7ff00000
 810dbe8:	433fffff 	.word	0x433fffff
 810dbec:	3ff00000 	.word	0x3ff00000
 810dbf0:	3fefffff 	.word	0x3fefffff
 810dbf4:	3fe00000 	.word	0x3fe00000
 810dbf8:	41e00000 	.word	0x41e00000
 810dbfc:	4b60      	ldr	r3, [pc, #384]	; (810dd80 <__ieee754_pow+0x3f0>)
 810dbfe:	2200      	movs	r2, #0
 810dc00:	f7f2 fbca 	bl	8100398 <__aeabi_dsub>
 810dc04:	a354      	add	r3, pc, #336	; (adr r3, 810dd58 <__ieee754_pow+0x3c8>)
 810dc06:	e9d3 2300 	ldrd	r2, r3, [r3]
 810dc0a:	4604      	mov	r4, r0
 810dc0c:	460d      	mov	r5, r1
 810dc0e:	f7f2 fd7b 	bl	8100708 <__aeabi_dmul>
 810dc12:	a353      	add	r3, pc, #332	; (adr r3, 810dd60 <__ieee754_pow+0x3d0>)
 810dc14:	e9d3 2300 	ldrd	r2, r3, [r3]
 810dc18:	4606      	mov	r6, r0
 810dc1a:	460f      	mov	r7, r1
 810dc1c:	4620      	mov	r0, r4
 810dc1e:	4629      	mov	r1, r5
 810dc20:	f7f2 fd72 	bl	8100708 <__aeabi_dmul>
 810dc24:	4b57      	ldr	r3, [pc, #348]	; (810dd84 <__ieee754_pow+0x3f4>)
 810dc26:	4682      	mov	sl, r0
 810dc28:	468b      	mov	fp, r1
 810dc2a:	2200      	movs	r2, #0
 810dc2c:	4620      	mov	r0, r4
 810dc2e:	4629      	mov	r1, r5
 810dc30:	f7f2 fd6a 	bl	8100708 <__aeabi_dmul>
 810dc34:	4602      	mov	r2, r0
 810dc36:	460b      	mov	r3, r1
 810dc38:	a14b      	add	r1, pc, #300	; (adr r1, 810dd68 <__ieee754_pow+0x3d8>)
 810dc3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 810dc3e:	f7f2 fbab 	bl	8100398 <__aeabi_dsub>
 810dc42:	4622      	mov	r2, r4
 810dc44:	462b      	mov	r3, r5
 810dc46:	f7f2 fd5f 	bl	8100708 <__aeabi_dmul>
 810dc4a:	4602      	mov	r2, r0
 810dc4c:	460b      	mov	r3, r1
 810dc4e:	2000      	movs	r0, #0
 810dc50:	494d      	ldr	r1, [pc, #308]	; (810dd88 <__ieee754_pow+0x3f8>)
 810dc52:	f7f2 fba1 	bl	8100398 <__aeabi_dsub>
 810dc56:	4622      	mov	r2, r4
 810dc58:	4680      	mov	r8, r0
 810dc5a:	4689      	mov	r9, r1
 810dc5c:	462b      	mov	r3, r5
 810dc5e:	4620      	mov	r0, r4
 810dc60:	4629      	mov	r1, r5
 810dc62:	f7f2 fd51 	bl	8100708 <__aeabi_dmul>
 810dc66:	4602      	mov	r2, r0
 810dc68:	460b      	mov	r3, r1
 810dc6a:	4640      	mov	r0, r8
 810dc6c:	4649      	mov	r1, r9
 810dc6e:	f7f2 fd4b 	bl	8100708 <__aeabi_dmul>
 810dc72:	a33f      	add	r3, pc, #252	; (adr r3, 810dd70 <__ieee754_pow+0x3e0>)
 810dc74:	e9d3 2300 	ldrd	r2, r3, [r3]
 810dc78:	f7f2 fd46 	bl	8100708 <__aeabi_dmul>
 810dc7c:	4602      	mov	r2, r0
 810dc7e:	460b      	mov	r3, r1
 810dc80:	4650      	mov	r0, sl
 810dc82:	4659      	mov	r1, fp
 810dc84:	f7f2 fb88 	bl	8100398 <__aeabi_dsub>
 810dc88:	4602      	mov	r2, r0
 810dc8a:	460b      	mov	r3, r1
 810dc8c:	4680      	mov	r8, r0
 810dc8e:	4689      	mov	r9, r1
 810dc90:	4630      	mov	r0, r6
 810dc92:	4639      	mov	r1, r7
 810dc94:	f7f2 fb82 	bl	810039c <__adddf3>
 810dc98:	2000      	movs	r0, #0
 810dc9a:	4632      	mov	r2, r6
 810dc9c:	463b      	mov	r3, r7
 810dc9e:	4604      	mov	r4, r0
 810dca0:	460d      	mov	r5, r1
 810dca2:	f7f2 fb79 	bl	8100398 <__aeabi_dsub>
 810dca6:	4602      	mov	r2, r0
 810dca8:	460b      	mov	r3, r1
 810dcaa:	4640      	mov	r0, r8
 810dcac:	4649      	mov	r1, r9
 810dcae:	f7f2 fb73 	bl	8100398 <__aeabi_dsub>
 810dcb2:	9b04      	ldr	r3, [sp, #16]
 810dcb4:	9a06      	ldr	r2, [sp, #24]
 810dcb6:	3b01      	subs	r3, #1
 810dcb8:	4313      	orrs	r3, r2
 810dcba:	4682      	mov	sl, r0
 810dcbc:	468b      	mov	fp, r1
 810dcbe:	f040 81e7 	bne.w	810e090 <__ieee754_pow+0x700>
 810dcc2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 810dd78 <__ieee754_pow+0x3e8>
 810dcc6:	eeb0 8a47 	vmov.f32	s16, s14
 810dcca:	eef0 8a67 	vmov.f32	s17, s15
 810dcce:	e9dd 6700 	ldrd	r6, r7, [sp]
 810dcd2:	2600      	movs	r6, #0
 810dcd4:	4632      	mov	r2, r6
 810dcd6:	463b      	mov	r3, r7
 810dcd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 810dcdc:	f7f2 fb5c 	bl	8100398 <__aeabi_dsub>
 810dce0:	4622      	mov	r2, r4
 810dce2:	462b      	mov	r3, r5
 810dce4:	f7f2 fd10 	bl	8100708 <__aeabi_dmul>
 810dce8:	e9dd 2300 	ldrd	r2, r3, [sp]
 810dcec:	4680      	mov	r8, r0
 810dcee:	4689      	mov	r9, r1
 810dcf0:	4650      	mov	r0, sl
 810dcf2:	4659      	mov	r1, fp
 810dcf4:	f7f2 fd08 	bl	8100708 <__aeabi_dmul>
 810dcf8:	4602      	mov	r2, r0
 810dcfa:	460b      	mov	r3, r1
 810dcfc:	4640      	mov	r0, r8
 810dcfe:	4649      	mov	r1, r9
 810dd00:	f7f2 fb4c 	bl	810039c <__adddf3>
 810dd04:	4632      	mov	r2, r6
 810dd06:	463b      	mov	r3, r7
 810dd08:	4680      	mov	r8, r0
 810dd0a:	4689      	mov	r9, r1
 810dd0c:	4620      	mov	r0, r4
 810dd0e:	4629      	mov	r1, r5
 810dd10:	f7f2 fcfa 	bl	8100708 <__aeabi_dmul>
 810dd14:	460b      	mov	r3, r1
 810dd16:	4604      	mov	r4, r0
 810dd18:	460d      	mov	r5, r1
 810dd1a:	4602      	mov	r2, r0
 810dd1c:	4649      	mov	r1, r9
 810dd1e:	4640      	mov	r0, r8
 810dd20:	f7f2 fb3c 	bl	810039c <__adddf3>
 810dd24:	4b19      	ldr	r3, [pc, #100]	; (810dd8c <__ieee754_pow+0x3fc>)
 810dd26:	4299      	cmp	r1, r3
 810dd28:	ec45 4b19 	vmov	d9, r4, r5
 810dd2c:	4606      	mov	r6, r0
 810dd2e:	460f      	mov	r7, r1
 810dd30:	468b      	mov	fp, r1
 810dd32:	f340 82f0 	ble.w	810e316 <__ieee754_pow+0x986>
 810dd36:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 810dd3a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 810dd3e:	4303      	orrs	r3, r0
 810dd40:	f000 81e4 	beq.w	810e10c <__ieee754_pow+0x77c>
 810dd44:	ec51 0b18 	vmov	r0, r1, d8
 810dd48:	2200      	movs	r2, #0
 810dd4a:	2300      	movs	r3, #0
 810dd4c:	f7f2 ff4e 	bl	8100bec <__aeabi_dcmplt>
 810dd50:	3800      	subs	r0, #0
 810dd52:	bf18      	it	ne
 810dd54:	2001      	movne	r0, #1
 810dd56:	e72b      	b.n	810dbb0 <__ieee754_pow+0x220>
 810dd58:	60000000 	.word	0x60000000
 810dd5c:	3ff71547 	.word	0x3ff71547
 810dd60:	f85ddf44 	.word	0xf85ddf44
 810dd64:	3e54ae0b 	.word	0x3e54ae0b
 810dd68:	55555555 	.word	0x55555555
 810dd6c:	3fd55555 	.word	0x3fd55555
 810dd70:	652b82fe 	.word	0x652b82fe
 810dd74:	3ff71547 	.word	0x3ff71547
 810dd78:	00000000 	.word	0x00000000
 810dd7c:	bff00000 	.word	0xbff00000
 810dd80:	3ff00000 	.word	0x3ff00000
 810dd84:	3fd00000 	.word	0x3fd00000
 810dd88:	3fe00000 	.word	0x3fe00000
 810dd8c:	408fffff 	.word	0x408fffff
 810dd90:	4bd5      	ldr	r3, [pc, #852]	; (810e0e8 <__ieee754_pow+0x758>)
 810dd92:	402b      	ands	r3, r5
 810dd94:	2200      	movs	r2, #0
 810dd96:	b92b      	cbnz	r3, 810dda4 <__ieee754_pow+0x414>
 810dd98:	4bd4      	ldr	r3, [pc, #848]	; (810e0ec <__ieee754_pow+0x75c>)
 810dd9a:	f7f2 fcb5 	bl	8100708 <__aeabi_dmul>
 810dd9e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 810dda2:	460c      	mov	r4, r1
 810dda4:	1523      	asrs	r3, r4, #20
 810dda6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 810ddaa:	4413      	add	r3, r2
 810ddac:	9305      	str	r3, [sp, #20]
 810ddae:	4bd0      	ldr	r3, [pc, #832]	; (810e0f0 <__ieee754_pow+0x760>)
 810ddb0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 810ddb4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 810ddb8:	429c      	cmp	r4, r3
 810ddba:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 810ddbe:	dd08      	ble.n	810ddd2 <__ieee754_pow+0x442>
 810ddc0:	4bcc      	ldr	r3, [pc, #816]	; (810e0f4 <__ieee754_pow+0x764>)
 810ddc2:	429c      	cmp	r4, r3
 810ddc4:	f340 8162 	ble.w	810e08c <__ieee754_pow+0x6fc>
 810ddc8:	9b05      	ldr	r3, [sp, #20]
 810ddca:	3301      	adds	r3, #1
 810ddcc:	9305      	str	r3, [sp, #20]
 810ddce:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 810ddd2:	2400      	movs	r4, #0
 810ddd4:	00e3      	lsls	r3, r4, #3
 810ddd6:	9307      	str	r3, [sp, #28]
 810ddd8:	4bc7      	ldr	r3, [pc, #796]	; (810e0f8 <__ieee754_pow+0x768>)
 810ddda:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 810ddde:	ed93 7b00 	vldr	d7, [r3]
 810dde2:	4629      	mov	r1, r5
 810dde4:	ec53 2b17 	vmov	r2, r3, d7
 810dde8:	eeb0 9a47 	vmov.f32	s18, s14
 810ddec:	eef0 9a67 	vmov.f32	s19, s15
 810ddf0:	4682      	mov	sl, r0
 810ddf2:	f7f2 fad1 	bl	8100398 <__aeabi_dsub>
 810ddf6:	4652      	mov	r2, sl
 810ddf8:	4606      	mov	r6, r0
 810ddfa:	460f      	mov	r7, r1
 810ddfc:	462b      	mov	r3, r5
 810ddfe:	ec51 0b19 	vmov	r0, r1, d9
 810de02:	f7f2 facb 	bl	810039c <__adddf3>
 810de06:	4602      	mov	r2, r0
 810de08:	460b      	mov	r3, r1
 810de0a:	2000      	movs	r0, #0
 810de0c:	49bb      	ldr	r1, [pc, #748]	; (810e0fc <__ieee754_pow+0x76c>)
 810de0e:	f7f2 fda5 	bl	810095c <__aeabi_ddiv>
 810de12:	ec41 0b1a 	vmov	d10, r0, r1
 810de16:	4602      	mov	r2, r0
 810de18:	460b      	mov	r3, r1
 810de1a:	4630      	mov	r0, r6
 810de1c:	4639      	mov	r1, r7
 810de1e:	f7f2 fc73 	bl	8100708 <__aeabi_dmul>
 810de22:	2300      	movs	r3, #0
 810de24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810de28:	9302      	str	r3, [sp, #8]
 810de2a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 810de2e:	46ab      	mov	fp, r5
 810de30:	106d      	asrs	r5, r5, #1
 810de32:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 810de36:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 810de3a:	ec41 0b18 	vmov	d8, r0, r1
 810de3e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 810de42:	2200      	movs	r2, #0
 810de44:	4640      	mov	r0, r8
 810de46:	4649      	mov	r1, r9
 810de48:	4614      	mov	r4, r2
 810de4a:	461d      	mov	r5, r3
 810de4c:	f7f2 fc5c 	bl	8100708 <__aeabi_dmul>
 810de50:	4602      	mov	r2, r0
 810de52:	460b      	mov	r3, r1
 810de54:	4630      	mov	r0, r6
 810de56:	4639      	mov	r1, r7
 810de58:	f7f2 fa9e 	bl	8100398 <__aeabi_dsub>
 810de5c:	ec53 2b19 	vmov	r2, r3, d9
 810de60:	4606      	mov	r6, r0
 810de62:	460f      	mov	r7, r1
 810de64:	4620      	mov	r0, r4
 810de66:	4629      	mov	r1, r5
 810de68:	f7f2 fa96 	bl	8100398 <__aeabi_dsub>
 810de6c:	4602      	mov	r2, r0
 810de6e:	460b      	mov	r3, r1
 810de70:	4650      	mov	r0, sl
 810de72:	4659      	mov	r1, fp
 810de74:	f7f2 fa90 	bl	8100398 <__aeabi_dsub>
 810de78:	4642      	mov	r2, r8
 810de7a:	464b      	mov	r3, r9
 810de7c:	f7f2 fc44 	bl	8100708 <__aeabi_dmul>
 810de80:	4602      	mov	r2, r0
 810de82:	460b      	mov	r3, r1
 810de84:	4630      	mov	r0, r6
 810de86:	4639      	mov	r1, r7
 810de88:	f7f2 fa86 	bl	8100398 <__aeabi_dsub>
 810de8c:	ec53 2b1a 	vmov	r2, r3, d10
 810de90:	f7f2 fc3a 	bl	8100708 <__aeabi_dmul>
 810de94:	ec53 2b18 	vmov	r2, r3, d8
 810de98:	ec41 0b19 	vmov	d9, r0, r1
 810de9c:	ec51 0b18 	vmov	r0, r1, d8
 810dea0:	f7f2 fc32 	bl	8100708 <__aeabi_dmul>
 810dea4:	a37c      	add	r3, pc, #496	; (adr r3, 810e098 <__ieee754_pow+0x708>)
 810dea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 810deaa:	4604      	mov	r4, r0
 810deac:	460d      	mov	r5, r1
 810deae:	f7f2 fc2b 	bl	8100708 <__aeabi_dmul>
 810deb2:	a37b      	add	r3, pc, #492	; (adr r3, 810e0a0 <__ieee754_pow+0x710>)
 810deb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810deb8:	f7f2 fa70 	bl	810039c <__adddf3>
 810debc:	4622      	mov	r2, r4
 810debe:	462b      	mov	r3, r5
 810dec0:	f7f2 fc22 	bl	8100708 <__aeabi_dmul>
 810dec4:	a378      	add	r3, pc, #480	; (adr r3, 810e0a8 <__ieee754_pow+0x718>)
 810dec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 810deca:	f7f2 fa67 	bl	810039c <__adddf3>
 810dece:	4622      	mov	r2, r4
 810ded0:	462b      	mov	r3, r5
 810ded2:	f7f2 fc19 	bl	8100708 <__aeabi_dmul>
 810ded6:	a376      	add	r3, pc, #472	; (adr r3, 810e0b0 <__ieee754_pow+0x720>)
 810ded8:	e9d3 2300 	ldrd	r2, r3, [r3]
 810dedc:	f7f2 fa5e 	bl	810039c <__adddf3>
 810dee0:	4622      	mov	r2, r4
 810dee2:	462b      	mov	r3, r5
 810dee4:	f7f2 fc10 	bl	8100708 <__aeabi_dmul>
 810dee8:	a373      	add	r3, pc, #460	; (adr r3, 810e0b8 <__ieee754_pow+0x728>)
 810deea:	e9d3 2300 	ldrd	r2, r3, [r3]
 810deee:	f7f2 fa55 	bl	810039c <__adddf3>
 810def2:	4622      	mov	r2, r4
 810def4:	462b      	mov	r3, r5
 810def6:	f7f2 fc07 	bl	8100708 <__aeabi_dmul>
 810defa:	a371      	add	r3, pc, #452	; (adr r3, 810e0c0 <__ieee754_pow+0x730>)
 810defc:	e9d3 2300 	ldrd	r2, r3, [r3]
 810df00:	f7f2 fa4c 	bl	810039c <__adddf3>
 810df04:	4622      	mov	r2, r4
 810df06:	4606      	mov	r6, r0
 810df08:	460f      	mov	r7, r1
 810df0a:	462b      	mov	r3, r5
 810df0c:	4620      	mov	r0, r4
 810df0e:	4629      	mov	r1, r5
 810df10:	f7f2 fbfa 	bl	8100708 <__aeabi_dmul>
 810df14:	4602      	mov	r2, r0
 810df16:	460b      	mov	r3, r1
 810df18:	4630      	mov	r0, r6
 810df1a:	4639      	mov	r1, r7
 810df1c:	f7f2 fbf4 	bl	8100708 <__aeabi_dmul>
 810df20:	4642      	mov	r2, r8
 810df22:	4604      	mov	r4, r0
 810df24:	460d      	mov	r5, r1
 810df26:	464b      	mov	r3, r9
 810df28:	ec51 0b18 	vmov	r0, r1, d8
 810df2c:	f7f2 fa36 	bl	810039c <__adddf3>
 810df30:	ec53 2b19 	vmov	r2, r3, d9
 810df34:	f7f2 fbe8 	bl	8100708 <__aeabi_dmul>
 810df38:	4622      	mov	r2, r4
 810df3a:	462b      	mov	r3, r5
 810df3c:	f7f2 fa2e 	bl	810039c <__adddf3>
 810df40:	4642      	mov	r2, r8
 810df42:	4682      	mov	sl, r0
 810df44:	468b      	mov	fp, r1
 810df46:	464b      	mov	r3, r9
 810df48:	4640      	mov	r0, r8
 810df4a:	4649      	mov	r1, r9
 810df4c:	f7f2 fbdc 	bl	8100708 <__aeabi_dmul>
 810df50:	4b6b      	ldr	r3, [pc, #428]	; (810e100 <__ieee754_pow+0x770>)
 810df52:	2200      	movs	r2, #0
 810df54:	4606      	mov	r6, r0
 810df56:	460f      	mov	r7, r1
 810df58:	f7f2 fa20 	bl	810039c <__adddf3>
 810df5c:	4652      	mov	r2, sl
 810df5e:	465b      	mov	r3, fp
 810df60:	f7f2 fa1c 	bl	810039c <__adddf3>
 810df64:	2000      	movs	r0, #0
 810df66:	4604      	mov	r4, r0
 810df68:	460d      	mov	r5, r1
 810df6a:	4602      	mov	r2, r0
 810df6c:	460b      	mov	r3, r1
 810df6e:	4640      	mov	r0, r8
 810df70:	4649      	mov	r1, r9
 810df72:	f7f2 fbc9 	bl	8100708 <__aeabi_dmul>
 810df76:	4b62      	ldr	r3, [pc, #392]	; (810e100 <__ieee754_pow+0x770>)
 810df78:	4680      	mov	r8, r0
 810df7a:	4689      	mov	r9, r1
 810df7c:	2200      	movs	r2, #0
 810df7e:	4620      	mov	r0, r4
 810df80:	4629      	mov	r1, r5
 810df82:	f7f2 fa09 	bl	8100398 <__aeabi_dsub>
 810df86:	4632      	mov	r2, r6
 810df88:	463b      	mov	r3, r7
 810df8a:	f7f2 fa05 	bl	8100398 <__aeabi_dsub>
 810df8e:	4602      	mov	r2, r0
 810df90:	460b      	mov	r3, r1
 810df92:	4650      	mov	r0, sl
 810df94:	4659      	mov	r1, fp
 810df96:	f7f2 f9ff 	bl	8100398 <__aeabi_dsub>
 810df9a:	ec53 2b18 	vmov	r2, r3, d8
 810df9e:	f7f2 fbb3 	bl	8100708 <__aeabi_dmul>
 810dfa2:	4622      	mov	r2, r4
 810dfa4:	4606      	mov	r6, r0
 810dfa6:	460f      	mov	r7, r1
 810dfa8:	462b      	mov	r3, r5
 810dfaa:	ec51 0b19 	vmov	r0, r1, d9
 810dfae:	f7f2 fbab 	bl	8100708 <__aeabi_dmul>
 810dfb2:	4602      	mov	r2, r0
 810dfb4:	460b      	mov	r3, r1
 810dfb6:	4630      	mov	r0, r6
 810dfb8:	4639      	mov	r1, r7
 810dfba:	f7f2 f9ef 	bl	810039c <__adddf3>
 810dfbe:	4606      	mov	r6, r0
 810dfc0:	460f      	mov	r7, r1
 810dfc2:	4602      	mov	r2, r0
 810dfc4:	460b      	mov	r3, r1
 810dfc6:	4640      	mov	r0, r8
 810dfc8:	4649      	mov	r1, r9
 810dfca:	f7f2 f9e7 	bl	810039c <__adddf3>
 810dfce:	a33e      	add	r3, pc, #248	; (adr r3, 810e0c8 <__ieee754_pow+0x738>)
 810dfd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810dfd4:	2000      	movs	r0, #0
 810dfd6:	4604      	mov	r4, r0
 810dfd8:	460d      	mov	r5, r1
 810dfda:	f7f2 fb95 	bl	8100708 <__aeabi_dmul>
 810dfde:	4642      	mov	r2, r8
 810dfe0:	ec41 0b18 	vmov	d8, r0, r1
 810dfe4:	464b      	mov	r3, r9
 810dfe6:	4620      	mov	r0, r4
 810dfe8:	4629      	mov	r1, r5
 810dfea:	f7f2 f9d5 	bl	8100398 <__aeabi_dsub>
 810dfee:	4602      	mov	r2, r0
 810dff0:	460b      	mov	r3, r1
 810dff2:	4630      	mov	r0, r6
 810dff4:	4639      	mov	r1, r7
 810dff6:	f7f2 f9cf 	bl	8100398 <__aeabi_dsub>
 810dffa:	a335      	add	r3, pc, #212	; (adr r3, 810e0d0 <__ieee754_pow+0x740>)
 810dffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e000:	f7f2 fb82 	bl	8100708 <__aeabi_dmul>
 810e004:	a334      	add	r3, pc, #208	; (adr r3, 810e0d8 <__ieee754_pow+0x748>)
 810e006:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e00a:	4606      	mov	r6, r0
 810e00c:	460f      	mov	r7, r1
 810e00e:	4620      	mov	r0, r4
 810e010:	4629      	mov	r1, r5
 810e012:	f7f2 fb79 	bl	8100708 <__aeabi_dmul>
 810e016:	4602      	mov	r2, r0
 810e018:	460b      	mov	r3, r1
 810e01a:	4630      	mov	r0, r6
 810e01c:	4639      	mov	r1, r7
 810e01e:	f7f2 f9bd 	bl	810039c <__adddf3>
 810e022:	9a07      	ldr	r2, [sp, #28]
 810e024:	4b37      	ldr	r3, [pc, #220]	; (810e104 <__ieee754_pow+0x774>)
 810e026:	4413      	add	r3, r2
 810e028:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e02c:	f7f2 f9b6 	bl	810039c <__adddf3>
 810e030:	4682      	mov	sl, r0
 810e032:	9805      	ldr	r0, [sp, #20]
 810e034:	468b      	mov	fp, r1
 810e036:	f7f2 fafd 	bl	8100634 <__aeabi_i2d>
 810e03a:	9a07      	ldr	r2, [sp, #28]
 810e03c:	4b32      	ldr	r3, [pc, #200]	; (810e108 <__ieee754_pow+0x778>)
 810e03e:	4413      	add	r3, r2
 810e040:	e9d3 8900 	ldrd	r8, r9, [r3]
 810e044:	4606      	mov	r6, r0
 810e046:	460f      	mov	r7, r1
 810e048:	4652      	mov	r2, sl
 810e04a:	465b      	mov	r3, fp
 810e04c:	ec51 0b18 	vmov	r0, r1, d8
 810e050:	f7f2 f9a4 	bl	810039c <__adddf3>
 810e054:	4642      	mov	r2, r8
 810e056:	464b      	mov	r3, r9
 810e058:	f7f2 f9a0 	bl	810039c <__adddf3>
 810e05c:	4632      	mov	r2, r6
 810e05e:	463b      	mov	r3, r7
 810e060:	f7f2 f99c 	bl	810039c <__adddf3>
 810e064:	2000      	movs	r0, #0
 810e066:	4632      	mov	r2, r6
 810e068:	463b      	mov	r3, r7
 810e06a:	4604      	mov	r4, r0
 810e06c:	460d      	mov	r5, r1
 810e06e:	f7f2 f993 	bl	8100398 <__aeabi_dsub>
 810e072:	4642      	mov	r2, r8
 810e074:	464b      	mov	r3, r9
 810e076:	f7f2 f98f 	bl	8100398 <__aeabi_dsub>
 810e07a:	ec53 2b18 	vmov	r2, r3, d8
 810e07e:	f7f2 f98b 	bl	8100398 <__aeabi_dsub>
 810e082:	4602      	mov	r2, r0
 810e084:	460b      	mov	r3, r1
 810e086:	4650      	mov	r0, sl
 810e088:	4659      	mov	r1, fp
 810e08a:	e610      	b.n	810dcae <__ieee754_pow+0x31e>
 810e08c:	2401      	movs	r4, #1
 810e08e:	e6a1      	b.n	810ddd4 <__ieee754_pow+0x444>
 810e090:	ed9f 7b13 	vldr	d7, [pc, #76]	; 810e0e0 <__ieee754_pow+0x750>
 810e094:	e617      	b.n	810dcc6 <__ieee754_pow+0x336>
 810e096:	bf00      	nop
 810e098:	4a454eef 	.word	0x4a454eef
 810e09c:	3fca7e28 	.word	0x3fca7e28
 810e0a0:	93c9db65 	.word	0x93c9db65
 810e0a4:	3fcd864a 	.word	0x3fcd864a
 810e0a8:	a91d4101 	.word	0xa91d4101
 810e0ac:	3fd17460 	.word	0x3fd17460
 810e0b0:	518f264d 	.word	0x518f264d
 810e0b4:	3fd55555 	.word	0x3fd55555
 810e0b8:	db6fabff 	.word	0xdb6fabff
 810e0bc:	3fdb6db6 	.word	0x3fdb6db6
 810e0c0:	33333303 	.word	0x33333303
 810e0c4:	3fe33333 	.word	0x3fe33333
 810e0c8:	e0000000 	.word	0xe0000000
 810e0cc:	3feec709 	.word	0x3feec709
 810e0d0:	dc3a03fd 	.word	0xdc3a03fd
 810e0d4:	3feec709 	.word	0x3feec709
 810e0d8:	145b01f5 	.word	0x145b01f5
 810e0dc:	be3e2fe0 	.word	0xbe3e2fe0
 810e0e0:	00000000 	.word	0x00000000
 810e0e4:	3ff00000 	.word	0x3ff00000
 810e0e8:	7ff00000 	.word	0x7ff00000
 810e0ec:	43400000 	.word	0x43400000
 810e0f0:	0003988e 	.word	0x0003988e
 810e0f4:	000bb679 	.word	0x000bb679
 810e0f8:	0810ec48 	.word	0x0810ec48
 810e0fc:	3ff00000 	.word	0x3ff00000
 810e100:	40080000 	.word	0x40080000
 810e104:	0810ec68 	.word	0x0810ec68
 810e108:	0810ec58 	.word	0x0810ec58
 810e10c:	a3b3      	add	r3, pc, #716	; (adr r3, 810e3dc <__ieee754_pow+0xa4c>)
 810e10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e112:	4640      	mov	r0, r8
 810e114:	4649      	mov	r1, r9
 810e116:	f7f2 f941 	bl	810039c <__adddf3>
 810e11a:	4622      	mov	r2, r4
 810e11c:	ec41 0b1a 	vmov	d10, r0, r1
 810e120:	462b      	mov	r3, r5
 810e122:	4630      	mov	r0, r6
 810e124:	4639      	mov	r1, r7
 810e126:	f7f2 f937 	bl	8100398 <__aeabi_dsub>
 810e12a:	4602      	mov	r2, r0
 810e12c:	460b      	mov	r3, r1
 810e12e:	ec51 0b1a 	vmov	r0, r1, d10
 810e132:	f7f2 fd79 	bl	8100c28 <__aeabi_dcmpgt>
 810e136:	2800      	cmp	r0, #0
 810e138:	f47f ae04 	bne.w	810dd44 <__ieee754_pow+0x3b4>
 810e13c:	4aa2      	ldr	r2, [pc, #648]	; (810e3c8 <__ieee754_pow+0xa38>)
 810e13e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 810e142:	4293      	cmp	r3, r2
 810e144:	f340 8107 	ble.w	810e356 <__ieee754_pow+0x9c6>
 810e148:	151b      	asrs	r3, r3, #20
 810e14a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 810e14e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 810e152:	fa4a fa03 	asr.w	sl, sl, r3
 810e156:	44da      	add	sl, fp
 810e158:	f3ca 510a 	ubfx	r1, sl, #20, #11
 810e15c:	489b      	ldr	r0, [pc, #620]	; (810e3cc <__ieee754_pow+0xa3c>)
 810e15e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 810e162:	4108      	asrs	r0, r1
 810e164:	ea00 030a 	and.w	r3, r0, sl
 810e168:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 810e16c:	f1c1 0114 	rsb	r1, r1, #20
 810e170:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 810e174:	fa4a fa01 	asr.w	sl, sl, r1
 810e178:	f1bb 0f00 	cmp.w	fp, #0
 810e17c:	f04f 0200 	mov.w	r2, #0
 810e180:	4620      	mov	r0, r4
 810e182:	4629      	mov	r1, r5
 810e184:	bfb8      	it	lt
 810e186:	f1ca 0a00 	rsblt	sl, sl, #0
 810e18a:	f7f2 f905 	bl	8100398 <__aeabi_dsub>
 810e18e:	ec41 0b19 	vmov	d9, r0, r1
 810e192:	4642      	mov	r2, r8
 810e194:	464b      	mov	r3, r9
 810e196:	ec51 0b19 	vmov	r0, r1, d9
 810e19a:	f7f2 f8ff 	bl	810039c <__adddf3>
 810e19e:	a37a      	add	r3, pc, #488	; (adr r3, 810e388 <__ieee754_pow+0x9f8>)
 810e1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e1a4:	2000      	movs	r0, #0
 810e1a6:	4604      	mov	r4, r0
 810e1a8:	460d      	mov	r5, r1
 810e1aa:	f7f2 faad 	bl	8100708 <__aeabi_dmul>
 810e1ae:	ec53 2b19 	vmov	r2, r3, d9
 810e1b2:	4606      	mov	r6, r0
 810e1b4:	460f      	mov	r7, r1
 810e1b6:	4620      	mov	r0, r4
 810e1b8:	4629      	mov	r1, r5
 810e1ba:	f7f2 f8ed 	bl	8100398 <__aeabi_dsub>
 810e1be:	4602      	mov	r2, r0
 810e1c0:	460b      	mov	r3, r1
 810e1c2:	4640      	mov	r0, r8
 810e1c4:	4649      	mov	r1, r9
 810e1c6:	f7f2 f8e7 	bl	8100398 <__aeabi_dsub>
 810e1ca:	a371      	add	r3, pc, #452	; (adr r3, 810e390 <__ieee754_pow+0xa00>)
 810e1cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e1d0:	f7f2 fa9a 	bl	8100708 <__aeabi_dmul>
 810e1d4:	a370      	add	r3, pc, #448	; (adr r3, 810e398 <__ieee754_pow+0xa08>)
 810e1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e1da:	4680      	mov	r8, r0
 810e1dc:	4689      	mov	r9, r1
 810e1de:	4620      	mov	r0, r4
 810e1e0:	4629      	mov	r1, r5
 810e1e2:	f7f2 fa91 	bl	8100708 <__aeabi_dmul>
 810e1e6:	4602      	mov	r2, r0
 810e1e8:	460b      	mov	r3, r1
 810e1ea:	4640      	mov	r0, r8
 810e1ec:	4649      	mov	r1, r9
 810e1ee:	f7f2 f8d5 	bl	810039c <__adddf3>
 810e1f2:	4604      	mov	r4, r0
 810e1f4:	460d      	mov	r5, r1
 810e1f6:	4602      	mov	r2, r0
 810e1f8:	460b      	mov	r3, r1
 810e1fa:	4630      	mov	r0, r6
 810e1fc:	4639      	mov	r1, r7
 810e1fe:	f7f2 f8cd 	bl	810039c <__adddf3>
 810e202:	4632      	mov	r2, r6
 810e204:	463b      	mov	r3, r7
 810e206:	4680      	mov	r8, r0
 810e208:	4689      	mov	r9, r1
 810e20a:	f7f2 f8c5 	bl	8100398 <__aeabi_dsub>
 810e20e:	4602      	mov	r2, r0
 810e210:	460b      	mov	r3, r1
 810e212:	4620      	mov	r0, r4
 810e214:	4629      	mov	r1, r5
 810e216:	f7f2 f8bf 	bl	8100398 <__aeabi_dsub>
 810e21a:	4642      	mov	r2, r8
 810e21c:	4606      	mov	r6, r0
 810e21e:	460f      	mov	r7, r1
 810e220:	464b      	mov	r3, r9
 810e222:	4640      	mov	r0, r8
 810e224:	4649      	mov	r1, r9
 810e226:	f7f2 fa6f 	bl	8100708 <__aeabi_dmul>
 810e22a:	a35d      	add	r3, pc, #372	; (adr r3, 810e3a0 <__ieee754_pow+0xa10>)
 810e22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e230:	4604      	mov	r4, r0
 810e232:	460d      	mov	r5, r1
 810e234:	f7f2 fa68 	bl	8100708 <__aeabi_dmul>
 810e238:	a35b      	add	r3, pc, #364	; (adr r3, 810e3a8 <__ieee754_pow+0xa18>)
 810e23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e23e:	f7f2 f8ab 	bl	8100398 <__aeabi_dsub>
 810e242:	4622      	mov	r2, r4
 810e244:	462b      	mov	r3, r5
 810e246:	f7f2 fa5f 	bl	8100708 <__aeabi_dmul>
 810e24a:	a359      	add	r3, pc, #356	; (adr r3, 810e3b0 <__ieee754_pow+0xa20>)
 810e24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e250:	f7f2 f8a4 	bl	810039c <__adddf3>
 810e254:	4622      	mov	r2, r4
 810e256:	462b      	mov	r3, r5
 810e258:	f7f2 fa56 	bl	8100708 <__aeabi_dmul>
 810e25c:	a356      	add	r3, pc, #344	; (adr r3, 810e3b8 <__ieee754_pow+0xa28>)
 810e25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e262:	f7f2 f899 	bl	8100398 <__aeabi_dsub>
 810e266:	4622      	mov	r2, r4
 810e268:	462b      	mov	r3, r5
 810e26a:	f7f2 fa4d 	bl	8100708 <__aeabi_dmul>
 810e26e:	a354      	add	r3, pc, #336	; (adr r3, 810e3c0 <__ieee754_pow+0xa30>)
 810e270:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e274:	f7f2 f892 	bl	810039c <__adddf3>
 810e278:	4622      	mov	r2, r4
 810e27a:	462b      	mov	r3, r5
 810e27c:	f7f2 fa44 	bl	8100708 <__aeabi_dmul>
 810e280:	4602      	mov	r2, r0
 810e282:	460b      	mov	r3, r1
 810e284:	4640      	mov	r0, r8
 810e286:	4649      	mov	r1, r9
 810e288:	f7f2 f886 	bl	8100398 <__aeabi_dsub>
 810e28c:	4604      	mov	r4, r0
 810e28e:	460d      	mov	r5, r1
 810e290:	4602      	mov	r2, r0
 810e292:	460b      	mov	r3, r1
 810e294:	4640      	mov	r0, r8
 810e296:	4649      	mov	r1, r9
 810e298:	f7f2 fa36 	bl	8100708 <__aeabi_dmul>
 810e29c:	2200      	movs	r2, #0
 810e29e:	ec41 0b19 	vmov	d9, r0, r1
 810e2a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 810e2a6:	4620      	mov	r0, r4
 810e2a8:	4629      	mov	r1, r5
 810e2aa:	f7f2 f875 	bl	8100398 <__aeabi_dsub>
 810e2ae:	4602      	mov	r2, r0
 810e2b0:	460b      	mov	r3, r1
 810e2b2:	ec51 0b19 	vmov	r0, r1, d9
 810e2b6:	f7f2 fb51 	bl	810095c <__aeabi_ddiv>
 810e2ba:	4632      	mov	r2, r6
 810e2bc:	4604      	mov	r4, r0
 810e2be:	460d      	mov	r5, r1
 810e2c0:	463b      	mov	r3, r7
 810e2c2:	4640      	mov	r0, r8
 810e2c4:	4649      	mov	r1, r9
 810e2c6:	f7f2 fa1f 	bl	8100708 <__aeabi_dmul>
 810e2ca:	4632      	mov	r2, r6
 810e2cc:	463b      	mov	r3, r7
 810e2ce:	f7f2 f865 	bl	810039c <__adddf3>
 810e2d2:	4602      	mov	r2, r0
 810e2d4:	460b      	mov	r3, r1
 810e2d6:	4620      	mov	r0, r4
 810e2d8:	4629      	mov	r1, r5
 810e2da:	f7f2 f85d 	bl	8100398 <__aeabi_dsub>
 810e2de:	4642      	mov	r2, r8
 810e2e0:	464b      	mov	r3, r9
 810e2e2:	f7f2 f859 	bl	8100398 <__aeabi_dsub>
 810e2e6:	460b      	mov	r3, r1
 810e2e8:	4602      	mov	r2, r0
 810e2ea:	4939      	ldr	r1, [pc, #228]	; (810e3d0 <__ieee754_pow+0xa40>)
 810e2ec:	2000      	movs	r0, #0
 810e2ee:	f7f2 f853 	bl	8100398 <__aeabi_dsub>
 810e2f2:	ec41 0b10 	vmov	d0, r0, r1
 810e2f6:	ee10 3a90 	vmov	r3, s1
 810e2fa:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 810e2fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810e302:	da2b      	bge.n	810e35c <__ieee754_pow+0x9cc>
 810e304:	4650      	mov	r0, sl
 810e306:	f000 f8a7 	bl	810e458 <scalbn>
 810e30a:	ec51 0b10 	vmov	r0, r1, d0
 810e30e:	ec53 2b18 	vmov	r2, r3, d8
 810e312:	f7ff bbee 	b.w	810daf2 <__ieee754_pow+0x162>
 810e316:	4b2f      	ldr	r3, [pc, #188]	; (810e3d4 <__ieee754_pow+0xa44>)
 810e318:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 810e31c:	429e      	cmp	r6, r3
 810e31e:	f77f af0d 	ble.w	810e13c <__ieee754_pow+0x7ac>
 810e322:	4b2d      	ldr	r3, [pc, #180]	; (810e3d8 <__ieee754_pow+0xa48>)
 810e324:	440b      	add	r3, r1
 810e326:	4303      	orrs	r3, r0
 810e328:	d009      	beq.n	810e33e <__ieee754_pow+0x9ae>
 810e32a:	ec51 0b18 	vmov	r0, r1, d8
 810e32e:	2200      	movs	r2, #0
 810e330:	2300      	movs	r3, #0
 810e332:	f7f2 fc5b 	bl	8100bec <__aeabi_dcmplt>
 810e336:	3800      	subs	r0, #0
 810e338:	bf18      	it	ne
 810e33a:	2001      	movne	r0, #1
 810e33c:	e448      	b.n	810dbd0 <__ieee754_pow+0x240>
 810e33e:	4622      	mov	r2, r4
 810e340:	462b      	mov	r3, r5
 810e342:	f7f2 f829 	bl	8100398 <__aeabi_dsub>
 810e346:	4642      	mov	r2, r8
 810e348:	464b      	mov	r3, r9
 810e34a:	f7f2 fc63 	bl	8100c14 <__aeabi_dcmpge>
 810e34e:	2800      	cmp	r0, #0
 810e350:	f43f aef4 	beq.w	810e13c <__ieee754_pow+0x7ac>
 810e354:	e7e9      	b.n	810e32a <__ieee754_pow+0x99a>
 810e356:	f04f 0a00 	mov.w	sl, #0
 810e35a:	e71a      	b.n	810e192 <__ieee754_pow+0x802>
 810e35c:	ec51 0b10 	vmov	r0, r1, d0
 810e360:	4619      	mov	r1, r3
 810e362:	e7d4      	b.n	810e30e <__ieee754_pow+0x97e>
 810e364:	491a      	ldr	r1, [pc, #104]	; (810e3d0 <__ieee754_pow+0xa40>)
 810e366:	2000      	movs	r0, #0
 810e368:	f7ff bb31 	b.w	810d9ce <__ieee754_pow+0x3e>
 810e36c:	2000      	movs	r0, #0
 810e36e:	2100      	movs	r1, #0
 810e370:	f7ff bb2d 	b.w	810d9ce <__ieee754_pow+0x3e>
 810e374:	4630      	mov	r0, r6
 810e376:	4639      	mov	r1, r7
 810e378:	f7ff bb29 	b.w	810d9ce <__ieee754_pow+0x3e>
 810e37c:	9204      	str	r2, [sp, #16]
 810e37e:	f7ff bb7b 	b.w	810da78 <__ieee754_pow+0xe8>
 810e382:	2300      	movs	r3, #0
 810e384:	f7ff bb65 	b.w	810da52 <__ieee754_pow+0xc2>
 810e388:	00000000 	.word	0x00000000
 810e38c:	3fe62e43 	.word	0x3fe62e43
 810e390:	fefa39ef 	.word	0xfefa39ef
 810e394:	3fe62e42 	.word	0x3fe62e42
 810e398:	0ca86c39 	.word	0x0ca86c39
 810e39c:	be205c61 	.word	0xbe205c61
 810e3a0:	72bea4d0 	.word	0x72bea4d0
 810e3a4:	3e663769 	.word	0x3e663769
 810e3a8:	c5d26bf1 	.word	0xc5d26bf1
 810e3ac:	3ebbbd41 	.word	0x3ebbbd41
 810e3b0:	af25de2c 	.word	0xaf25de2c
 810e3b4:	3f11566a 	.word	0x3f11566a
 810e3b8:	16bebd93 	.word	0x16bebd93
 810e3bc:	3f66c16c 	.word	0x3f66c16c
 810e3c0:	5555553e 	.word	0x5555553e
 810e3c4:	3fc55555 	.word	0x3fc55555
 810e3c8:	3fe00000 	.word	0x3fe00000
 810e3cc:	fff00000 	.word	0xfff00000
 810e3d0:	3ff00000 	.word	0x3ff00000
 810e3d4:	4090cbff 	.word	0x4090cbff
 810e3d8:	3f6f3400 	.word	0x3f6f3400
 810e3dc:	652b82fe 	.word	0x652b82fe
 810e3e0:	3c971547 	.word	0x3c971547

0810e3e4 <with_errno>:
 810e3e4:	b570      	push	{r4, r5, r6, lr}
 810e3e6:	4604      	mov	r4, r0
 810e3e8:	460d      	mov	r5, r1
 810e3ea:	4616      	mov	r6, r2
 810e3ec:	f7fc fc8e 	bl	810ad0c <__errno>
 810e3f0:	4629      	mov	r1, r5
 810e3f2:	6006      	str	r6, [r0, #0]
 810e3f4:	4620      	mov	r0, r4
 810e3f6:	bd70      	pop	{r4, r5, r6, pc}

0810e3f8 <xflow>:
 810e3f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810e3fa:	4614      	mov	r4, r2
 810e3fc:	461d      	mov	r5, r3
 810e3fe:	b108      	cbz	r0, 810e404 <xflow+0xc>
 810e400:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 810e404:	e9cd 2300 	strd	r2, r3, [sp]
 810e408:	e9dd 2300 	ldrd	r2, r3, [sp]
 810e40c:	4620      	mov	r0, r4
 810e40e:	4629      	mov	r1, r5
 810e410:	f7f2 f97a 	bl	8100708 <__aeabi_dmul>
 810e414:	2222      	movs	r2, #34	; 0x22
 810e416:	b003      	add	sp, #12
 810e418:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 810e41c:	f7ff bfe2 	b.w	810e3e4 <with_errno>

0810e420 <__math_uflow>:
 810e420:	b508      	push	{r3, lr}
 810e422:	2200      	movs	r2, #0
 810e424:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 810e428:	f7ff ffe6 	bl	810e3f8 <xflow>
 810e42c:	ec41 0b10 	vmov	d0, r0, r1
 810e430:	bd08      	pop	{r3, pc}

0810e432 <__math_oflow>:
 810e432:	b508      	push	{r3, lr}
 810e434:	2200      	movs	r2, #0
 810e436:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 810e43a:	f7ff ffdd 	bl	810e3f8 <xflow>
 810e43e:	ec41 0b10 	vmov	d0, r0, r1
 810e442:	bd08      	pop	{r3, pc}

0810e444 <fabs>:
 810e444:	ec51 0b10 	vmov	r0, r1, d0
 810e448:	ee10 2a10 	vmov	r2, s0
 810e44c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 810e450:	ec43 2b10 	vmov	d0, r2, r3
 810e454:	4770      	bx	lr
	...

0810e458 <scalbn>:
 810e458:	b570      	push	{r4, r5, r6, lr}
 810e45a:	ec55 4b10 	vmov	r4, r5, d0
 810e45e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 810e462:	4606      	mov	r6, r0
 810e464:	462b      	mov	r3, r5
 810e466:	b999      	cbnz	r1, 810e490 <scalbn+0x38>
 810e468:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 810e46c:	4323      	orrs	r3, r4
 810e46e:	d03f      	beq.n	810e4f0 <scalbn+0x98>
 810e470:	4b35      	ldr	r3, [pc, #212]	; (810e548 <scalbn+0xf0>)
 810e472:	4629      	mov	r1, r5
 810e474:	ee10 0a10 	vmov	r0, s0
 810e478:	2200      	movs	r2, #0
 810e47a:	f7f2 f945 	bl	8100708 <__aeabi_dmul>
 810e47e:	4b33      	ldr	r3, [pc, #204]	; (810e54c <scalbn+0xf4>)
 810e480:	429e      	cmp	r6, r3
 810e482:	4604      	mov	r4, r0
 810e484:	460d      	mov	r5, r1
 810e486:	da10      	bge.n	810e4aa <scalbn+0x52>
 810e488:	a327      	add	r3, pc, #156	; (adr r3, 810e528 <scalbn+0xd0>)
 810e48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e48e:	e01f      	b.n	810e4d0 <scalbn+0x78>
 810e490:	f240 72ff 	movw	r2, #2047	; 0x7ff
 810e494:	4291      	cmp	r1, r2
 810e496:	d10c      	bne.n	810e4b2 <scalbn+0x5a>
 810e498:	ee10 2a10 	vmov	r2, s0
 810e49c:	4620      	mov	r0, r4
 810e49e:	4629      	mov	r1, r5
 810e4a0:	f7f1 ff7c 	bl	810039c <__adddf3>
 810e4a4:	4604      	mov	r4, r0
 810e4a6:	460d      	mov	r5, r1
 810e4a8:	e022      	b.n	810e4f0 <scalbn+0x98>
 810e4aa:	460b      	mov	r3, r1
 810e4ac:	f3c1 510a 	ubfx	r1, r1, #20, #11
 810e4b0:	3936      	subs	r1, #54	; 0x36
 810e4b2:	f24c 3250 	movw	r2, #50000	; 0xc350
 810e4b6:	4296      	cmp	r6, r2
 810e4b8:	dd0d      	ble.n	810e4d6 <scalbn+0x7e>
 810e4ba:	2d00      	cmp	r5, #0
 810e4bc:	a11c      	add	r1, pc, #112	; (adr r1, 810e530 <scalbn+0xd8>)
 810e4be:	e9d1 0100 	ldrd	r0, r1, [r1]
 810e4c2:	da02      	bge.n	810e4ca <scalbn+0x72>
 810e4c4:	a11c      	add	r1, pc, #112	; (adr r1, 810e538 <scalbn+0xe0>)
 810e4c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 810e4ca:	a319      	add	r3, pc, #100	; (adr r3, 810e530 <scalbn+0xd8>)
 810e4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e4d0:	f7f2 f91a 	bl	8100708 <__aeabi_dmul>
 810e4d4:	e7e6      	b.n	810e4a4 <scalbn+0x4c>
 810e4d6:	1872      	adds	r2, r6, r1
 810e4d8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 810e4dc:	428a      	cmp	r2, r1
 810e4de:	dcec      	bgt.n	810e4ba <scalbn+0x62>
 810e4e0:	2a00      	cmp	r2, #0
 810e4e2:	dd08      	ble.n	810e4f6 <scalbn+0x9e>
 810e4e4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 810e4e8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 810e4ec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 810e4f0:	ec45 4b10 	vmov	d0, r4, r5
 810e4f4:	bd70      	pop	{r4, r5, r6, pc}
 810e4f6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 810e4fa:	da08      	bge.n	810e50e <scalbn+0xb6>
 810e4fc:	2d00      	cmp	r5, #0
 810e4fe:	a10a      	add	r1, pc, #40	; (adr r1, 810e528 <scalbn+0xd0>)
 810e500:	e9d1 0100 	ldrd	r0, r1, [r1]
 810e504:	dac0      	bge.n	810e488 <scalbn+0x30>
 810e506:	a10e      	add	r1, pc, #56	; (adr r1, 810e540 <scalbn+0xe8>)
 810e508:	e9d1 0100 	ldrd	r0, r1, [r1]
 810e50c:	e7bc      	b.n	810e488 <scalbn+0x30>
 810e50e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 810e512:	3236      	adds	r2, #54	; 0x36
 810e514:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 810e518:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 810e51c:	4620      	mov	r0, r4
 810e51e:	4b0c      	ldr	r3, [pc, #48]	; (810e550 <scalbn+0xf8>)
 810e520:	2200      	movs	r2, #0
 810e522:	e7d5      	b.n	810e4d0 <scalbn+0x78>
 810e524:	f3af 8000 	nop.w
 810e528:	c2f8f359 	.word	0xc2f8f359
 810e52c:	01a56e1f 	.word	0x01a56e1f
 810e530:	8800759c 	.word	0x8800759c
 810e534:	7e37e43c 	.word	0x7e37e43c
 810e538:	8800759c 	.word	0x8800759c
 810e53c:	fe37e43c 	.word	0xfe37e43c
 810e540:	c2f8f359 	.word	0xc2f8f359
 810e544:	81a56e1f 	.word	0x81a56e1f
 810e548:	43500000 	.word	0x43500000
 810e54c:	ffff3cb0 	.word	0xffff3cb0
 810e550:	3c900000 	.word	0x3c900000

0810e554 <__ieee754_sqrt>:
 810e554:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810e558:	ec55 4b10 	vmov	r4, r5, d0
 810e55c:	4e67      	ldr	r6, [pc, #412]	; (810e6fc <__ieee754_sqrt+0x1a8>)
 810e55e:	43ae      	bics	r6, r5
 810e560:	ee10 0a10 	vmov	r0, s0
 810e564:	ee10 2a10 	vmov	r2, s0
 810e568:	4629      	mov	r1, r5
 810e56a:	462b      	mov	r3, r5
 810e56c:	d10d      	bne.n	810e58a <__ieee754_sqrt+0x36>
 810e56e:	f7f2 f8cb 	bl	8100708 <__aeabi_dmul>
 810e572:	4602      	mov	r2, r0
 810e574:	460b      	mov	r3, r1
 810e576:	4620      	mov	r0, r4
 810e578:	4629      	mov	r1, r5
 810e57a:	f7f1 ff0f 	bl	810039c <__adddf3>
 810e57e:	4604      	mov	r4, r0
 810e580:	460d      	mov	r5, r1
 810e582:	ec45 4b10 	vmov	d0, r4, r5
 810e586:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810e58a:	2d00      	cmp	r5, #0
 810e58c:	dc0b      	bgt.n	810e5a6 <__ieee754_sqrt+0x52>
 810e58e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 810e592:	4326      	orrs	r6, r4
 810e594:	d0f5      	beq.n	810e582 <__ieee754_sqrt+0x2e>
 810e596:	b135      	cbz	r5, 810e5a6 <__ieee754_sqrt+0x52>
 810e598:	f7f1 fefe 	bl	8100398 <__aeabi_dsub>
 810e59c:	4602      	mov	r2, r0
 810e59e:	460b      	mov	r3, r1
 810e5a0:	f7f2 f9dc 	bl	810095c <__aeabi_ddiv>
 810e5a4:	e7eb      	b.n	810e57e <__ieee754_sqrt+0x2a>
 810e5a6:	1509      	asrs	r1, r1, #20
 810e5a8:	f000 808d 	beq.w	810e6c6 <__ieee754_sqrt+0x172>
 810e5ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810e5b0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 810e5b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810e5b8:	07c9      	lsls	r1, r1, #31
 810e5ba:	bf5c      	itt	pl
 810e5bc:	005b      	lslpl	r3, r3, #1
 810e5be:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 810e5c2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 810e5c6:	bf58      	it	pl
 810e5c8:	0052      	lslpl	r2, r2, #1
 810e5ca:	2500      	movs	r5, #0
 810e5cc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 810e5d0:	1076      	asrs	r6, r6, #1
 810e5d2:	0052      	lsls	r2, r2, #1
 810e5d4:	f04f 0e16 	mov.w	lr, #22
 810e5d8:	46ac      	mov	ip, r5
 810e5da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 810e5de:	eb0c 0001 	add.w	r0, ip, r1
 810e5e2:	4298      	cmp	r0, r3
 810e5e4:	bfde      	ittt	le
 810e5e6:	1a1b      	suble	r3, r3, r0
 810e5e8:	eb00 0c01 	addle.w	ip, r0, r1
 810e5ec:	186d      	addle	r5, r5, r1
 810e5ee:	005b      	lsls	r3, r3, #1
 810e5f0:	f1be 0e01 	subs.w	lr, lr, #1
 810e5f4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 810e5f8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 810e5fc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 810e600:	d1ed      	bne.n	810e5de <__ieee754_sqrt+0x8a>
 810e602:	4674      	mov	r4, lr
 810e604:	2720      	movs	r7, #32
 810e606:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 810e60a:	4563      	cmp	r3, ip
 810e60c:	eb01 000e 	add.w	r0, r1, lr
 810e610:	dc02      	bgt.n	810e618 <__ieee754_sqrt+0xc4>
 810e612:	d113      	bne.n	810e63c <__ieee754_sqrt+0xe8>
 810e614:	4290      	cmp	r0, r2
 810e616:	d811      	bhi.n	810e63c <__ieee754_sqrt+0xe8>
 810e618:	2800      	cmp	r0, #0
 810e61a:	eb00 0e01 	add.w	lr, r0, r1
 810e61e:	da57      	bge.n	810e6d0 <__ieee754_sqrt+0x17c>
 810e620:	f1be 0f00 	cmp.w	lr, #0
 810e624:	db54      	blt.n	810e6d0 <__ieee754_sqrt+0x17c>
 810e626:	f10c 0801 	add.w	r8, ip, #1
 810e62a:	eba3 030c 	sub.w	r3, r3, ip
 810e62e:	4290      	cmp	r0, r2
 810e630:	bf88      	it	hi
 810e632:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 810e636:	1a12      	subs	r2, r2, r0
 810e638:	440c      	add	r4, r1
 810e63a:	46c4      	mov	ip, r8
 810e63c:	005b      	lsls	r3, r3, #1
 810e63e:	3f01      	subs	r7, #1
 810e640:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 810e644:	ea4f 0151 	mov.w	r1, r1, lsr #1
 810e648:	ea4f 0242 	mov.w	r2, r2, lsl #1
 810e64c:	d1dd      	bne.n	810e60a <__ieee754_sqrt+0xb6>
 810e64e:	4313      	orrs	r3, r2
 810e650:	d01b      	beq.n	810e68a <__ieee754_sqrt+0x136>
 810e652:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 810e700 <__ieee754_sqrt+0x1ac>
 810e656:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 810e704 <__ieee754_sqrt+0x1b0>
 810e65a:	e9da 0100 	ldrd	r0, r1, [sl]
 810e65e:	e9db 2300 	ldrd	r2, r3, [fp]
 810e662:	f7f1 fe99 	bl	8100398 <__aeabi_dsub>
 810e666:	e9da 8900 	ldrd	r8, r9, [sl]
 810e66a:	4602      	mov	r2, r0
 810e66c:	460b      	mov	r3, r1
 810e66e:	4640      	mov	r0, r8
 810e670:	4649      	mov	r1, r9
 810e672:	f7f2 fac5 	bl	8100c00 <__aeabi_dcmple>
 810e676:	b140      	cbz	r0, 810e68a <__ieee754_sqrt+0x136>
 810e678:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 810e67c:	e9da 0100 	ldrd	r0, r1, [sl]
 810e680:	e9db 2300 	ldrd	r2, r3, [fp]
 810e684:	d126      	bne.n	810e6d4 <__ieee754_sqrt+0x180>
 810e686:	3501      	adds	r5, #1
 810e688:	463c      	mov	r4, r7
 810e68a:	106a      	asrs	r2, r5, #1
 810e68c:	0863      	lsrs	r3, r4, #1
 810e68e:	07e9      	lsls	r1, r5, #31
 810e690:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 810e694:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 810e698:	bf48      	it	mi
 810e69a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 810e69e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 810e6a2:	461c      	mov	r4, r3
 810e6a4:	e76d      	b.n	810e582 <__ieee754_sqrt+0x2e>
 810e6a6:	0ad3      	lsrs	r3, r2, #11
 810e6a8:	3815      	subs	r0, #21
 810e6aa:	0552      	lsls	r2, r2, #21
 810e6ac:	2b00      	cmp	r3, #0
 810e6ae:	d0fa      	beq.n	810e6a6 <__ieee754_sqrt+0x152>
 810e6b0:	02dc      	lsls	r4, r3, #11
 810e6b2:	d50a      	bpl.n	810e6ca <__ieee754_sqrt+0x176>
 810e6b4:	f1c1 0420 	rsb	r4, r1, #32
 810e6b8:	fa22 f404 	lsr.w	r4, r2, r4
 810e6bc:	1e4d      	subs	r5, r1, #1
 810e6be:	408a      	lsls	r2, r1
 810e6c0:	4323      	orrs	r3, r4
 810e6c2:	1b41      	subs	r1, r0, r5
 810e6c4:	e772      	b.n	810e5ac <__ieee754_sqrt+0x58>
 810e6c6:	4608      	mov	r0, r1
 810e6c8:	e7f0      	b.n	810e6ac <__ieee754_sqrt+0x158>
 810e6ca:	005b      	lsls	r3, r3, #1
 810e6cc:	3101      	adds	r1, #1
 810e6ce:	e7ef      	b.n	810e6b0 <__ieee754_sqrt+0x15c>
 810e6d0:	46e0      	mov	r8, ip
 810e6d2:	e7aa      	b.n	810e62a <__ieee754_sqrt+0xd6>
 810e6d4:	f7f1 fe62 	bl	810039c <__adddf3>
 810e6d8:	e9da 8900 	ldrd	r8, r9, [sl]
 810e6dc:	4602      	mov	r2, r0
 810e6de:	460b      	mov	r3, r1
 810e6e0:	4640      	mov	r0, r8
 810e6e2:	4649      	mov	r1, r9
 810e6e4:	f7f2 fa82 	bl	8100bec <__aeabi_dcmplt>
 810e6e8:	b120      	cbz	r0, 810e6f4 <__ieee754_sqrt+0x1a0>
 810e6ea:	1ca0      	adds	r0, r4, #2
 810e6ec:	bf08      	it	eq
 810e6ee:	3501      	addeq	r5, #1
 810e6f0:	3402      	adds	r4, #2
 810e6f2:	e7ca      	b.n	810e68a <__ieee754_sqrt+0x136>
 810e6f4:	3401      	adds	r4, #1
 810e6f6:	f024 0401 	bic.w	r4, r4, #1
 810e6fa:	e7c6      	b.n	810e68a <__ieee754_sqrt+0x136>
 810e6fc:	7ff00000 	.word	0x7ff00000
 810e700:	100001d8 	.word	0x100001d8
 810e704:	100001e0 	.word	0x100001e0

0810e708 <_gettimeofday>:
 810e708:	4b02      	ldr	r3, [pc, #8]	; (810e714 <_gettimeofday+0xc>)
 810e70a:	2258      	movs	r2, #88	; 0x58
 810e70c:	601a      	str	r2, [r3, #0]
 810e70e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810e712:	4770      	bx	lr
 810e714:	100004c8 	.word	0x100004c8

0810e718 <_init>:
 810e718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810e71a:	bf00      	nop
 810e71c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810e71e:	bc08      	pop	{r3}
 810e720:	469e      	mov	lr, r3
 810e722:	4770      	bx	lr

0810e724 <_fini>:
 810e724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810e726:	bf00      	nop
 810e728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810e72a:	bc08      	pop	{r3}
 810e72c:	469e      	mov	lr, r3
 810e72e:	4770      	bx	lr
